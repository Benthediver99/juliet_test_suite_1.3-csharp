‹
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_01.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_01 7
:8 9
AbstractTestCase: J
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data   
=   
IO   
.   
GetRandomULong    
(    !
)  ! "
;  " #
if!! 

(!!
 
data!! 
<!! 
$num!! 
)!! 
{"" 	
ulong$$ 
result$$ 
=$$ 
($$ 
ulong$$ !
)$$! "
($$" #
data$$# '
*$$( )
$num$$* +
)$$+ ,
;$$, -
IO%% 
.%% 
	WriteLine%% 
(%% 
$str%% #
+%%$ %
result%%& ,
)%%, -
;%%- .
}&& 	
}'' 
public** 

override** 
void** 
Good** 
(** 
)** 
{++ 
GoodG2B,, 
(,, 
),, 
;,, 
GoodB2G-- 
(-- 
)-- 
;-- 
}.. 
private11 
void11 
GoodG2B11 
(11 
)11 
{22 
ulong33 
data33 
;33 
data55 
=55 
$num55 
;55 
if66 

(66
 
data66 
<66 
$num66 
)66 
{77 	
ulong99 
result99 
=99 
(99 
ulong99 !
)99! "
(99" #
data99# '
*99( )
$num99* +
)99+ ,
;99, -
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: #
+::$ %
result::& ,
)::, -
;::- .
};; 	
}<< 
private?? 
void?? 
GoodB2G?? 
(?? 
)?? 
{@@ 
ulongAA 
dataAA 
;AA 
dataCC 
=CC 
IOCC 
.CC 
GetRandomULongCC  
(CC  !
)CC! "
;CC" #
ifDD 

(DD
 
dataDD 
<DD 
$numDD 
)DD 
{EE 	
ifGG 
(GG 
dataGG 
>GG 
(GG 
ulongGG 
.GG 
MinValueGG &
/GG& '
$numGG' (
)GG( )
)GG) *
{HH 
ulongII 
resultII 
=II 
(II  
ulongII  %
)II% &
(II& '
dataII' +
*II, -
$numII. /
)II/ 0
;II0 1
IOJJ 
.JJ 
	WriteLineJJ 
(JJ 
$strJJ '
+JJ( )
resultJJ* 0
)JJ0 1
;JJ1 2
}KK 
elseLL 
{MM 
IONN 
.NN 
	WriteLineNN 
(NN 
$strNN Q
)NNQ R
;NNR S
}OO 
}PP 	
}QQ 
}SS 
}TT ≥:
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_02.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_02 7
:8 9
AbstractTestCase: J
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
true 
) 
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
true** 
)** 
{++ 	
if,, 
(,, 
data,, 
<,, 
$num,, 
),, 
{-- 
ulong// 
result// 
=// 
(//  
ulong//  %
)//% &
(//& '
data//' +
*//, -
$num//. /
)/// 0
;//0 1
IO00 
.00 
	WriteLine00 
(00 
$str00 '
+00( )
result00* 0
)000 1
;001 2
}11 
}22 	
}33 
private77 
void77 
GoodG2B177 
(77 
)77 
{88 
ulong99 
data99 
;99 
if:: 

(:: 
false:: 
):: 
{;; 	
data>> 
=>> 
$num>> 
;>> 
}?? 	
else@@ 
{AA 	
dataCC 
=CC 
$numCC 
;CC 
}DD 	
ifEE 

(EE 
trueEE 
)EE 
{FF 	
ifGG 
(GG 
dataGG 
<GG 
$numGG 
)GG 
{HH 
ulongJJ 
resultJJ 
=JJ 
(JJ  
ulongJJ  %
)JJ% &
(JJ& '
dataJJ' +
*JJ, -
$numJJ. /
)JJ/ 0
;JJ0 1
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK '
+KK( )
resultKK* 0
)KK0 1
;KK1 2
}LL 
}MM 	
}NN 
privateQQ 
voidQQ 
GoodG2B2QQ 
(QQ 
)QQ 
{RR 
ulongSS 
dataSS 
;SS 
ifTT 

(TT 
trueTT 
)TT 
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
true__ 
)__ 
{`` 	
ifaa 
(aa 
dataaa 
<aa 
$numaa 
)aa 
{bb 
ulongdd 
resultdd 
=dd 
(dd  
ulongdd  %
)dd% &
(dd& '
datadd' +
*dd, -
$numdd. /
)dd/ 0
;dd0 1
IOee 
.ee 
	WriteLineee 
(ee 
$stree '
+ee( )
resultee* 0
)ee0 1
;ee1 2
}ff 
}gg 	
}hh 
privatekk 
voidkk 
GoodB2G1kk 
(kk 
)kk 
{ll 
ulongmm 
datamm 
;mm 
ifnn 

(nn 
truenn 
)nn 
{oo 	
dataqq 
=qq 
IOqq 
.qq 
GetRandomULongqq $
(qq$ %
)qq% &
;qq& '
}rr 	
elsess 
{tt 	
dataww 
=ww 
$numww 
;ww 
}xx 	
ifyy 

(yy 
falseyy 
)yy 
{zz 	
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| /
)||/ 0
;||0 1
}}} 	
else~~ 
{ 	
if
ÄÄ 
(
ÄÄ 
data
ÄÄ 
<
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
{
ÅÅ 
if
ÉÉ 
(
ÉÉ 
data
ÉÉ 
>
ÉÉ 
(
ÉÉ 
ulong
ÉÉ !
.
ÉÉ! "
MinValue
ÉÉ" *
/
ÉÉ* +
$num
ÉÉ+ ,
)
ÉÉ, -
)
ÉÉ- .
{
ÑÑ 
ulong
ÖÖ 
result
ÖÖ  
=
ÖÖ! "
(
ÖÖ# $
ulong
ÖÖ$ )
)
ÖÖ) *
(
ÖÖ* +
data
ÖÖ+ /
*
ÖÖ0 1
$num
ÖÖ2 3
)
ÖÖ3 4
;
ÖÖ4 5
IO
ÜÜ 
.
ÜÜ 
	WriteLine
ÜÜ  
(
ÜÜ  !
$str
ÜÜ! +
+
ÜÜ, -
result
ÜÜ. 4
)
ÜÜ4 5
;
ÜÜ5 6
}
áá 
else
àà 
{
ââ 
IO
ää 
.
ää 
	WriteLine
ää  
(
ää  !
$str
ää! U
)
ääU V
;
ääV W
}
ãã 
}
åå 
}
çç 	
}
éé 
private
ëë 
void
ëë 
GoodB2G2
ëë 
(
ëë 
)
ëë 
{
íí 
ulong
ìì 
data
ìì 
;
ìì 
if
îî 

(
îî 
true
îî 
)
îî 
{
ïï 	
data
óó 
=
óó 
IO
óó 
.
óó 
GetRandomULong
óó $
(
óó$ %
)
óó% &
;
óó& '
}
òò 	
else
ôô 
{
öö 	
data
ùù 
=
ùù 
$num
ùù 
;
ùù 
}
ûû 	
if
üü 

(
üü 
true
üü 
)
üü 
{
†† 	
if
°° 
(
°° 
data
°° 
<
°° 
$num
°° 
)
°° 
{
¢¢ 
if
§§ 
(
§§ 
data
§§ 
>
§§ 
(
§§ 
ulong
§§ !
.
§§! "
MinValue
§§" *
/
§§* +
$num
§§+ ,
)
§§, -
)
§§- .
{
•• 
ulong
¶¶ 
result
¶¶  
=
¶¶! "
(
¶¶# $
ulong
¶¶$ )
)
¶¶) *
(
¶¶* +
data
¶¶+ /
*
¶¶0 1
$num
¶¶2 3
)
¶¶3 4
;
¶¶4 5
IO
ßß 
.
ßß 
	WriteLine
ßß  
(
ßß  !
$str
ßß! +
+
ßß, -
result
ßß. 4
)
ßß4 5
;
ßß5 6
}
®® 
else
©© 
{
™™ 
IO
´´ 
.
´´ 
	WriteLine
´´  
(
´´  !
$str
´´! U
)
´´U V
;
´´V W
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
}
ØØ 
public
±± 

override
±± 
void
±± 
Good
±± 
(
±± 
)
±± 
{
≤≤ 
GoodG2B1
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
GoodG2B2
¥¥ 
(
¥¥ 
)
¥¥ 
;
¥¥ 
GoodB2G1
µµ 
(
µµ 
)
µµ 
;
µµ 
GoodB2G2
∂∂ 
(
∂∂ 
)
∂∂ 
;
∂∂ 
}
∑∑ 
}ππ 
}∫∫ ç=
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_03.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_03 7
:8 9
AbstractTestCase: J
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
$num 
== 
$num 
) 
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
$num** 
==** 
$num** 
)** 
{++ 	
if,, 
(,, 
data,, 
<,, 
$num,, 
),, 
{-- 
ulong// 
result// 
=// 
(//  
ulong//  %
)//% &
(//& '
data//' +
*//, -
$num//. /
)/// 0
;//0 1
IO00 
.00 
	WriteLine00 
(00 
$str00 '
+00( )
result00* 0
)000 1
;001 2
}11 
}22 	
}33 
private77 
void77 
GoodG2B177 
(77 
)77 
{88 
ulong99 
data99 
;99 
if:: 

(:: 
$num:: 
!=:: 
$num:: 
):: 
{;; 	
data>> 
=>> 
$num>> 
;>> 
}?? 	
else@@ 
{AA 	
dataCC 
=CC 
$numCC 
;CC 
}DD 	
ifEE 

(EE 
$numEE 
==EE 
$numEE 
)EE 
{FF 	
ifGG 
(GG 
dataGG 
<GG 
$numGG 
)GG 
{HH 
ulongJJ 
resultJJ 
=JJ 
(JJ  
ulongJJ  %
)JJ% &
(JJ& '
dataJJ' +
*JJ, -
$numJJ. /
)JJ/ 0
;JJ0 1
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK '
+KK( )
resultKK* 0
)KK0 1
;KK1 2
}LL 
}MM 	
}NN 
privateQQ 
voidQQ 
GoodG2B2QQ 
(QQ 
)QQ 
{RR 
ulongSS 
dataSS 
;SS 
ifTT 

(TT 
$numTT 
==TT 
$numTT 
)TT 
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
$num__ 
==__ 
$num__ 
)__ 
{`` 	
ifaa 
(aa 
dataaa 
<aa 
$numaa 
)aa 
{bb 
ulongdd 
resultdd 
=dd 
(dd  
ulongdd  %
)dd% &
(dd& '
datadd' +
*dd, -
$numdd. /
)dd/ 0
;dd0 1
IOee 
.ee 
	WriteLineee 
(ee 
$stree '
+ee( )
resultee* 0
)ee0 1
;ee1 2
}ff 
}gg 	
}hh 
privatekk 
voidkk 
GoodB2G1kk 
(kk 
)kk 
{ll 
ulongmm 
datamm 
;mm 
ifnn 

(nn 
$numnn 
==nn 
$numnn 
)nn 
{oo 	
dataqq 
=qq 
IOqq 
.qq 
GetRandomULongqq $
(qq$ %
)qq% &
;qq& '
}rr 	
elsess 
{tt 	
dataww 
=ww 
$numww 
;ww 
}xx 	
ifyy 

(yy 
$numyy 
!=yy 
$numyy 
)yy 
{zz 	
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| /
)||/ 0
;||0 1
}}} 	
else~~ 
{ 	
if
ÄÄ 
(
ÄÄ 
data
ÄÄ 
<
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
{
ÅÅ 
if
ÉÉ 
(
ÉÉ 
data
ÉÉ 
>
ÉÉ 
(
ÉÉ 
ulong
ÉÉ !
.
ÉÉ! "
MinValue
ÉÉ" *
/
ÉÉ* +
$num
ÉÉ+ ,
)
ÉÉ, -
)
ÉÉ- .
{
ÑÑ 
ulong
ÖÖ 
result
ÖÖ  
=
ÖÖ! "
(
ÖÖ# $
ulong
ÖÖ$ )
)
ÖÖ) *
(
ÖÖ* +
data
ÖÖ+ /
*
ÖÖ0 1
$num
ÖÖ2 3
)
ÖÖ3 4
;
ÖÖ4 5
IO
ÜÜ 
.
ÜÜ 
	WriteLine
ÜÜ  
(
ÜÜ  !
$str
ÜÜ! +
+
ÜÜ, -
result
ÜÜ. 4
)
ÜÜ4 5
;
ÜÜ5 6
}
áá 
else
àà 
{
ââ 
IO
ää 
.
ää 
	WriteLine
ää  
(
ää  !
$str
ää! U
)
ääU V
;
ääV W
}
ãã 
}
åå 
}
çç 	
}
éé 
private
ëë 
void
ëë 
GoodB2G2
ëë 
(
ëë 
)
ëë 
{
íí 
ulong
ìì 
data
ìì 
;
ìì 
if
îî 

(
îî 
$num
îî 
==
îî 
$num
îî 
)
îî 
{
ïï 	
data
óó 
=
óó 
IO
óó 
.
óó 
GetRandomULong
óó $
(
óó$ %
)
óó% &
;
óó& '
}
òò 	
else
ôô 
{
öö 	
data
ùù 
=
ùù 
$num
ùù 
;
ùù 
}
ûû 	
if
üü 

(
üü 
$num
üü 
==
üü 
$num
üü 
)
üü 
{
†† 	
if
°° 
(
°° 
data
°° 
<
°° 
$num
°° 
)
°° 
{
¢¢ 
if
§§ 
(
§§ 
data
§§ 
>
§§ 
(
§§ 
ulong
§§ !
.
§§! "
MinValue
§§" *
/
§§* +
$num
§§+ ,
)
§§, -
)
§§- .
{
•• 
ulong
¶¶ 
result
¶¶  
=
¶¶! "
(
¶¶# $
ulong
¶¶$ )
)
¶¶) *
(
¶¶* +
data
¶¶+ /
*
¶¶0 1
$num
¶¶2 3
)
¶¶3 4
;
¶¶4 5
IO
ßß 
.
ßß 
	WriteLine
ßß  
(
ßß  !
$str
ßß! +
+
ßß, -
result
ßß. 4
)
ßß4 5
;
ßß5 6
}
®® 
else
©© 
{
™™ 
IO
´´ 
.
´´ 
	WriteLine
´´  
(
´´  !
$str
´´! U
)
´´U V
;
´´V W
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
}
ØØ 
public
±± 

override
±± 
void
±± 
Good
±± 
(
±± 
)
±± 
{
≤≤ 
GoodG2B1
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
GoodG2B2
¥¥ 
(
¥¥ 
)
¥¥ 
;
¥¥ 
GoodB2G1
µµ 
(
µµ 
)
µµ 
;
µµ 
GoodB2G2
∂∂ 
(
∂∂ 
)
∂∂ 
;
∂∂ 
}
∑∑ 
}ππ 
}∫∫ Û=
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_04.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_04 7
:8 9
AbstractTestCase: J
{ 
private   
const   
bool   
PRIVATE_CONST_TRUE   )
=  * +
true  , 0
;  0 1
private!! 
const!! 
bool!! 
PRIVATE_CONST_FALSE!! *
=!!+ ,
false!!- 2
;!!2 3
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
ulong%% 
data%% 
;%% 
if&& 

(&& 
PRIVATE_CONST_TRUE&& 
)&& 
{'' 	
data)) 
=)) 
IO)) 
.)) 
GetRandomULong)) $
())$ %
)))% &
;))& '
}** 	
else++ 
{,, 	
data// 
=// 
$num// 
;// 
}00 	
if11 

(11 
PRIVATE_CONST_TRUE11 
)11 
{22 	
if33 
(33 
data33 
<33 
$num33 
)33 
{44 
ulong66 
result66 
=66 
(66  
ulong66  %
)66% &
(66& '
data66' +
*66, -
$num66. /
)66/ 0
;660 1
IO77 
.77 
	WriteLine77 
(77 
$str77 '
+77( )
result77* 0
)770 1
;771 2
}88 
}99 	
}:: 
private>> 
void>> 
GoodG2B1>> 
(>> 
)>> 
{?? 
ulong@@ 
data@@ 
;@@ 
ifAA 

(AA 
PRIVATE_CONST_FALSEAA 
)AA  
{BB 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
elseGG 
{HH 	
dataJJ 
=JJ 
$numJJ 
;JJ 
}KK 	
ifLL 

(LL 
PRIVATE_CONST_TRUELL 
)LL 
{MM 	
ifNN 
(NN 
dataNN 
<NN 
$numNN 
)NN 
{OO 
ulongQQ 
resultQQ 
=QQ 
(QQ  
ulongQQ  %
)QQ% &
(QQ& '
dataQQ' +
*QQ, -
$numQQ. /
)QQ/ 0
;QQ0 1
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR '
+RR( )
resultRR* 0
)RR0 1
;RR1 2
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
)XX 
{YY 
ulongZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
PRIVATE_CONST_TRUE[[ 
)[[ 
{\\ 	
data^^ 
=^^ 
$num^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
$numdd 
;dd 
}ee 	
ifff 

(ff 
PRIVATE_CONST_TRUEff 
)ff 
{gg 	
ifhh 
(hh 
datahh 
<hh 
$numhh 
)hh 
{ii 
ulongkk 
resultkk 
=kk 
(kk  
ulongkk  %
)kk% &
(kk& '
datakk' +
*kk, -
$numkk. /
)kk/ 0
;kk0 1
IOll 
.ll 
	WriteLinell 
(ll 
$strll '
+ll( )
resultll* 0
)ll0 1
;ll1 2
}mm 
}nn 	
}oo 
privaterr 
voidrr 
GoodB2G1rr 
(rr 
)rr 
{ss 
ulongtt 
datatt 
;tt 
ifuu 

(uu 
PRIVATE_CONST_TRUEuu 
)uu 
{vv 	
dataxx 
=xx 
IOxx 
.xx 
GetRandomULongxx $
(xx$ %
)xx% &
;xx& '
}yy 	
elsezz 
{{{ 	
data~~ 
=~~ 
$num~~ 
;~~ 
} 	
if
ÄÄ 

(
ÄÄ !
PRIVATE_CONST_FALSE
ÄÄ 
)
ÄÄ  
{
ÅÅ 	
IO
ÉÉ 
.
ÉÉ 
	WriteLine
ÉÉ 
(
ÉÉ 
$str
ÉÉ /
)
ÉÉ/ 0
;
ÉÉ0 1
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
if
áá 
(
áá 
data
áá 
<
áá 
$num
áá 
)
áá 
{
àà 
if
ää 
(
ää 
data
ää 
>
ää 
(
ää 
ulong
ää !
.
ää! "
MinValue
ää" *
/
ää* +
$num
ää+ ,
)
ää, -
)
ää- .
{
ãã 
ulong
åå 
result
åå  
=
åå! "
(
åå# $
ulong
åå$ )
)
åå) *
(
åå* +
data
åå+ /
*
åå0 1
$num
åå2 3
)
åå3 4
;
åå4 5
IO
çç 
.
çç 
	WriteLine
çç  
(
çç  !
$str
çç! +
+
çç, -
result
çç. 4
)
çç4 5
;
çç5 6
}
éé 
else
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë  
(
ëë  !
$str
ëë! U
)
ëëU V
;
ëëV W
}
íí 
}
ìì 
}
îî 	
}
ïï 
private
òò 
void
òò 
GoodB2G2
òò 
(
òò 
)
òò 
{
ôô 
ulong
öö 
data
öö 
;
öö 
if
õõ 

(
õõ  
PRIVATE_CONST_TRUE
õõ 
)
õõ 
{
úú 	
data
ûû 
=
ûû 
IO
ûû 
.
ûû 
GetRandomULong
ûû $
(
ûû$ %
)
ûû% &
;
ûû& '
}
üü 	
else
†† 
{
°° 	
data
§§ 
=
§§ 
$num
§§ 
;
§§ 
}
•• 	
if
¶¶ 

(
¶¶  
PRIVATE_CONST_TRUE
¶¶ 
)
¶¶ 
{
ßß 	
if
®® 
(
®® 
data
®® 
<
®® 
$num
®® 
)
®® 
{
©© 
if
´´ 
(
´´ 
data
´´ 
>
´´ 
(
´´ 
ulong
´´ !
.
´´! "
MinValue
´´" *
/
´´* +
$num
´´+ ,
)
´´, -
)
´´- .
{
¨¨ 
ulong
≠≠ 
result
≠≠  
=
≠≠! "
(
≠≠# $
ulong
≠≠$ )
)
≠≠) *
(
≠≠* +
data
≠≠+ /
*
≠≠0 1
$num
≠≠2 3
)
≠≠3 4
;
≠≠4 5
IO
ÆÆ 
.
ÆÆ 
	WriteLine
ÆÆ  
(
ÆÆ  !
$str
ÆÆ! +
+
ÆÆ, -
result
ÆÆ. 4
)
ÆÆ4 5
;
ÆÆ5 6
}
ØØ 
else
∞∞ 
{
±± 
IO
≤≤ 
.
≤≤ 
	WriteLine
≤≤  
(
≤≤  !
$str
≤≤! U
)
≤≤U V
;
≤≤V W
}
≥≥ 
}
¥¥ 
}
µµ 	
}
∂∂ 
public
∏∏ 

override
∏∏ 
void
∏∏ 
Good
∏∏ 
(
∏∏ 
)
∏∏ 
{
ππ 
GoodG2B1
∫∫ 
(
∫∫ 
)
∫∫ 
;
∫∫ 
GoodG2B2
ªª 
(
ªª 
)
ªª 
;
ªª 
GoodB2G1
ºº 
(
ºº 
)
ºº 
;
ºº 
GoodB2G2
ΩΩ 
(
ΩΩ 
)
ΩΩ 
;
ΩΩ 
}
ææ 
}¿¿ 
}¡¡ Ò<
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_05.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_05 7
:8 9
AbstractTestCase: J
{ 
private 
bool 
privateTrue 
= 
true #
;# $
private   
bool   
privateFalse   
=   
false    %
;  % &
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
ulong$$ 
data$$ 
;$$ 
if%% 

(%% 
privateTrue%% 
)%% 
{&& 	
data(( 
=(( 
IO(( 
.(( 
GetRandomULong(( $
((($ %
)((% &
;((& '
})) 	
else** 
{++ 	
data.. 
=.. 
$num.. 
;.. 
}// 	
if00 

(00 
privateTrue00 
)00 
{11 	
if22 
(22 
data22 
<22 
$num22 
)22 
{33 
ulong55 
result55 
=55 
(55  
ulong55  %
)55% &
(55& '
data55' +
*55, -
$num55. /
)55/ 0
;550 1
IO66 
.66 
	WriteLine66 
(66 
$str66 '
+66( )
result66* 0
)660 1
;661 2
}77 
}88 	
}99 
private== 
void== 
GoodG2B1== 
(== 
)== 
{>> 
ulong?? 
data?? 
;?? 
if@@ 

(@@ 
privateFalse@@ 
)@@ 
{AA 	
dataDD 
=DD 
$numDD 
;DD 
}EE 	
elseFF 
{GG 	
dataII 
=II 
$numII 
;II 
}JJ 	
ifKK 

(KK 
privateTrueKK 
)KK 
{LL 	
ifMM 
(MM 
dataMM 
<MM 
$numMM 
)MM 
{NN 
ulongPP 
resultPP 
=PP 
(PP  
ulongPP  %
)PP% &
(PP& '
dataPP' +
*PP, -
$numPP. /
)PP/ 0
;PP0 1
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ '
+QQ( )
resultQQ* 0
)QQ0 1
;QQ1 2
}RR 
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
)WW 
{XX 
ulongYY 
dataYY 
;YY 
ifZZ 

(ZZ 
privateTrueZZ 
)ZZ 
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
privateTrueee 
)ee 
{ff 	
ifgg 
(gg 
datagg 
<gg 
$numgg 
)gg 
{hh 
ulongjj 
resultjj 
=jj 
(jj  
ulongjj  %
)jj% &
(jj& '
datajj' +
*jj, -
$numjj. /
)jj/ 0
;jj0 1
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk '
+kk( )
resultkk* 0
)kk0 1
;kk1 2
}ll 
}mm 	
}nn 
privateqq 
voidqq 
GoodB2G1qq 
(qq 
)qq 
{rr 
ulongss 
datass 
;ss 
iftt 

(tt 
privateTruett 
)tt 
{uu 	
dataww 
=ww 
IOww 
.ww 
GetRandomULongww $
(ww$ %
)ww% &
;ww& '
}xx 	
elseyy 
{zz 	
data}} 
=}} 
$num}} 
;}} 
}~~ 	
if 

( 
privateFalse 
) 
{
ÄÄ 	
IO
ÇÇ 
.
ÇÇ 
	WriteLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ /
)
ÇÇ/ 0
;
ÇÇ0 1
}
ÉÉ 	
else
ÑÑ 
{
ÖÖ 	
if
ÜÜ 
(
ÜÜ 
data
ÜÜ 
<
ÜÜ 
$num
ÜÜ 
)
ÜÜ 
{
áá 
if
ââ 
(
ââ 
data
ââ 
>
ââ 
(
ââ 
ulong
ââ !
.
ââ! "
MinValue
ââ" *
/
ââ* +
$num
ââ+ ,
)
ââ, -
)
ââ- .
{
ää 
ulong
ãã 
result
ãã  
=
ãã! "
(
ãã# $
ulong
ãã$ )
)
ãã) *
(
ãã* +
data
ãã+ /
*
ãã0 1
$num
ãã2 3
)
ãã3 4
;
ãã4 5
IO
åå 
.
åå 
	WriteLine
åå  
(
åå  !
$str
åå! +
+
åå, -
result
åå. 4
)
åå4 5
;
åå5 6
}
çç 
else
éé 
{
èè 
IO
êê 
.
êê 
	WriteLine
êê  
(
êê  !
$str
êê! U
)
êêU V
;
êêV W
}
ëë 
}
íí 
}
ìì 	
}
îî 
private
óó 
void
óó 
GoodB2G2
óó 
(
óó 
)
óó 
{
òò 
ulong
ôô 
data
ôô 
;
ôô 
if
öö 

(
öö 
privateTrue
öö 
)
öö 
{
õõ 	
data
ùù 
=
ùù 
IO
ùù 
.
ùù 
GetRandomULong
ùù $
(
ùù$ %
)
ùù% &
;
ùù& '
}
ûû 	
else
üü 
{
†† 	
data
££ 
=
££ 
$num
££ 
;
££ 
}
§§ 	
if
•• 

(
•• 
privateTrue
•• 
)
•• 
{
¶¶ 	
if
ßß 
(
ßß 
data
ßß 
<
ßß 
$num
ßß 
)
ßß 
{
®® 
if
™™ 
(
™™ 
data
™™ 
>
™™ 
(
™™ 
ulong
™™ !
.
™™! "
MinValue
™™" *
/
™™* +
$num
™™+ ,
)
™™, -
)
™™- .
{
´´ 
ulong
¨¨ 
result
¨¨  
=
¨¨! "
(
¨¨# $
ulong
¨¨$ )
)
¨¨) *
(
¨¨* +
data
¨¨+ /
*
¨¨0 1
$num
¨¨2 3
)
¨¨3 4
;
¨¨4 5
IO
≠≠ 
.
≠≠ 
	WriteLine
≠≠  
(
≠≠  !
$str
≠≠! +
+
≠≠, -
result
≠≠. 4
)
≠≠4 5
;
≠≠5 6
}
ÆÆ 
else
ØØ 
{
∞∞ 
IO
±± 
.
±± 
	WriteLine
±±  
(
±±  !
$str
±±! U
)
±±U V
;
±±V W
}
≤≤ 
}
≥≥ 
}
¥¥ 	
}
µµ 
public
∑∑ 

override
∑∑ 
void
∑∑ 
Good
∑∑ 
(
∑∑ 
)
∑∑ 
{
∏∏ 
GoodG2B1
ππ 
(
ππ 
)
ππ 
;
ππ 
GoodG2B2
∫∫ 
(
∫∫ 
)
∫∫ 
;
∫∫ 
GoodB2G1
ªª 
(
ªª 
)
ªª 
;
ªª 
GoodB2G2
ºº 
(
ºº 
)
ºº 
;
ºº 
}
ΩΩ 
}øø 
}¿¿ ∂?
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_06.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_06 7
:8 9
AbstractTestCase: J
{ 
private 
const 
int 
PRIVATE_CONST_FIVE (
=) *
$num+ ,
;, -
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
ulong## 
data## 
;## 
if$$ 

($$ 
PRIVATE_CONST_FIVE$$ 
==$$  
$num$$  !
)$$! "
{%% 	
data'' 
='' 
IO'' 
.'' 
GetRandomULong'' $
(''$ %
)''% &
;''& '
}(( 	
else)) 
{** 	
data-- 
=-- 
$num-- 
;-- 
}.. 	
if// 

(// 
PRIVATE_CONST_FIVE// 
==//  
$num//  !
)//! "
{00 	
if11 
(11 
data11 
<11 
$num11 
)11 
{22 
ulong44 
result44 
=44 
(44  
ulong44  %
)44% &
(44& '
data44' +
*44, -
$num44. /
)44/ 0
;440 1
IO55 
.55 
	WriteLine55 
(55 
$str55 '
+55( )
result55* 0
)550 1
;551 2
}66 
}77 	
}88 
private<< 
void<< 
GoodG2B1<< 
(<< 
)<< 
{== 
ulong>> 
data>> 
;>> 
if?? 

(?? 
PRIVATE_CONST_FIVE?? 
!=??  
$num??  !
)??! "
{@@ 	
dataCC 
=CC 
$numCC 
;CC 
}DD 	
elseEE 
{FF 	
dataHH 
=HH 
$numHH 
;HH 
}II 	
ifJJ 

(JJ 
PRIVATE_CONST_FIVEJJ 
==JJ  
$numJJ  !
)JJ! "
{KK 	
ifLL 
(LL 
dataLL 
<LL 
$numLL 
)LL 
{MM 
ulongOO 
resultOO 
=OO 
(OO  
ulongOO  %
)OO% &
(OO& '
dataOO' +
*OO, -
$numOO. /
)OO/ 0
;OO0 1
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP '
+PP( )
resultPP* 0
)PP0 1
;PP1 2
}QQ 
}RR 	
}SS 
privateVV 
voidVV 
GoodG2B2VV 
(VV 
)VV 
{WW 
ulongXX 
dataXX 
;XX 
ifYY 

(YY 
PRIVATE_CONST_FIVEYY 
==YY  
$numYY  !
)YY! "
{ZZ 	
data\\ 
=\\ 
$num\\ 
;\\ 
}]] 	
else^^ 
{__ 	
databb 
=bb 
$numbb 
;bb 
}cc 	
ifdd 

(dd 
PRIVATE_CONST_FIVEdd 
==dd  
$numdd  !
)dd! "
{ee 	
ifff 
(ff 
dataff 
<ff 
$numff 
)ff 
{gg 
ulongii 
resultii 
=ii 
(ii  
ulongii  %
)ii% &
(ii& '
dataii' +
*ii, -
$numii. /
)ii/ 0
;ii0 1
IOjj 
.jj 
	WriteLinejj 
(jj 
$strjj '
+jj( )
resultjj* 0
)jj0 1
;jj1 2
}kk 
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
)pp 
{qq 
ulongrr 
datarr 
;rr 
ifss 

(ss 
PRIVATE_CONST_FIVEss 
==ss  
$numss  !
)ss! "
{tt 	
datavv 
=vv 
IOvv 
.vv 
GetRandomULongvv $
(vv$ %
)vv% &
;vv& '
}ww 	
elsexx 
{yy 	
data|| 
=|| 
$num|| 
;|| 
}}} 	
if~~ 

(~~ 
PRIVATE_CONST_FIVE~~ 
!=~~  
$num~~  !
)~~! "
{ 	
IO
ÅÅ 
.
ÅÅ 
	WriteLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ /
)
ÅÅ/ 0
;
ÅÅ0 1
}
ÇÇ 	
else
ÉÉ 
{
ÑÑ 	
if
ÖÖ 
(
ÖÖ 
data
ÖÖ 
<
ÖÖ 
$num
ÖÖ 
)
ÖÖ 
{
ÜÜ 
if
àà 
(
àà 
data
àà 
>
àà 
(
àà 
ulong
àà !
.
àà! "
MinValue
àà" *
/
àà* +
$num
àà+ ,
)
àà, -
)
àà- .
{
ââ 
ulong
ää 
result
ää  
=
ää! "
(
ää# $
ulong
ää$ )
)
ää) *
(
ää* +
data
ää+ /
*
ää0 1
$num
ää2 3
)
ää3 4
;
ää4 5
IO
ãã 
.
ãã 
	WriteLine
ãã  
(
ãã  !
$str
ãã! +
+
ãã, -
result
ãã. 4
)
ãã4 5
;
ãã5 6
}
åå 
else
çç 
{
éé 
IO
èè 
.
èè 
	WriteLine
èè  
(
èè  !
$str
èè! U
)
èèU V
;
èèV W
}
êê 
}
ëë 
}
íí 	
}
ìì 
private
ññ 
void
ññ 
GoodB2G2
ññ 
(
ññ 
)
ññ 
{
óó 
ulong
òò 
data
òò 
;
òò 
if
ôô 

(
ôô  
PRIVATE_CONST_FIVE
ôô 
==
ôô  
$num
ôô  !
)
ôô! "
{
öö 	
data
úú 
=
úú 
IO
úú 
.
úú 
GetRandomULong
úú $
(
úú$ %
)
úú% &
;
úú& '
}
ùù 	
else
ûû 
{
üü 	
data
¢¢ 
=
¢¢ 
$num
¢¢ 
;
¢¢ 
}
££ 	
if
§§ 

(
§§  
PRIVATE_CONST_FIVE
§§ 
==
§§  
$num
§§  !
)
§§! "
{
•• 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
<
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
if
©© 
(
©© 
data
©© 
>
©© 
(
©© 
ulong
©© !
.
©©! "
MinValue
©©" *
/
©©* +
$num
©©+ ,
)
©©, -
)
©©- .
{
™™ 
ulong
´´ 
result
´´  
=
´´! "
(
´´# $
ulong
´´$ )
)
´´) *
(
´´* +
data
´´+ /
*
´´0 1
$num
´´2 3
)
´´3 4
;
´´4 5
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨  
(
¨¨  !
$str
¨¨! +
+
¨¨, -
result
¨¨. 4
)
¨¨4 5
;
¨¨5 6
}
≠≠ 
else
ÆÆ 
{
ØØ 
IO
∞∞ 
.
∞∞ 
	WriteLine
∞∞  
(
∞∞  !
$str
∞∞! U
)
∞∞U V
;
∞∞V W
}
±± 
}
≤≤ 
}
≥≥ 	
}
¥¥ 
public
∂∂ 

override
∂∂ 
void
∂∂ 
Good
∂∂ 
(
∂∂ 
)
∂∂ 
{
∑∑ 
GoodG2B1
∏∏ 
(
∏∏ 
)
∏∏ 
;
∏∏ 
GoodG2B2
ππ 
(
ππ 
)
ππ 
;
ππ 
GoodB2G1
∫∫ 
(
∫∫ 
)
∫∫ 
;
∫∫ 
GoodB2G2
ªª 
(
ªª 
)
ªª 
;
ªª 
}
ºº 
}ææ 
}øø ÷>
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_07.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_07 7
:8 9
AbstractTestCase: J
{ 
private 
int 
privateFive 
= 
$num 
;  
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
ulong## 
data## 
;## 
if$$ 

($$ 
privateFive$$ 
==$$ 
$num$$ 
)$$ 
{%% 	
data'' 
='' 
IO'' 
.'' 
GetRandomULong'' $
(''$ %
)''% &
;''& '
}(( 	
else)) 
{** 	
data-- 
=-- 
$num-- 
;-- 
}.. 	
if// 

(// 
privateFive// 
==// 
$num// 
)// 
{00 	
if11 
(11 
data11 
<11 
$num11 
)11 
{22 
ulong44 
result44 
=44 
(44  
ulong44  %
)44% &
(44& '
data44' +
*44, -
$num44. /
)44/ 0
;440 1
IO55 
.55 
	WriteLine55 
(55 
$str55 '
+55( )
result55* 0
)550 1
;551 2
}66 
}77 	
}88 
private<< 
void<< 
GoodG2B1<< 
(<< 
)<< 
{== 
ulong>> 
data>> 
;>> 
if?? 

(?? 
privateFive?? 
!=?? 
$num?? 
)?? 
{@@ 	
dataCC 
=CC 
$numCC 
;CC 
}DD 	
elseEE 
{FF 	
dataHH 
=HH 
$numHH 
;HH 
}II 	
ifJJ 

(JJ 
privateFiveJJ 
==JJ 
$numJJ 
)JJ 
{KK 	
ifLL 
(LL 
dataLL 
<LL 
$numLL 
)LL 
{MM 
ulongOO 
resultOO 
=OO 
(OO  
ulongOO  %
)OO% &
(OO& '
dataOO' +
*OO, -
$numOO. /
)OO/ 0
;OO0 1
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP '
+PP( )
resultPP* 0
)PP0 1
;PP1 2
}QQ 
}RR 	
}SS 
privateVV 
voidVV 
GoodG2B2VV 
(VV 
)VV 
{WW 
ulongXX 
dataXX 
;XX 
ifYY 

(YY 
privateFiveYY 
==YY 
$numYY 
)YY 
{ZZ 	
data\\ 
=\\ 
$num\\ 
;\\ 
}]] 	
else^^ 
{__ 	
databb 
=bb 
$numbb 
;bb 
}cc 	
ifdd 

(dd 
privateFivedd 
==dd 
$numdd 
)dd 
{ee 	
ifff 
(ff 
dataff 
<ff 
$numff 
)ff 
{gg 
ulongii 
resultii 
=ii 
(ii  
ulongii  %
)ii% &
(ii& '
dataii' +
*ii, -
$numii. /
)ii/ 0
;ii0 1
IOjj 
.jj 
	WriteLinejj 
(jj 
$strjj '
+jj( )
resultjj* 0
)jj0 1
;jj1 2
}kk 
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
)pp 
{qq 
ulongrr 
datarr 
;rr 
ifss 

(ss 
privateFivess 
==ss 
$numss 
)ss 
{tt 	
datavv 
=vv 
IOvv 
.vv 
GetRandomULongvv $
(vv$ %
)vv% &
;vv& '
}ww 	
elsexx 
{yy 	
data|| 
=|| 
$num|| 
;|| 
}}} 	
if~~ 

(~~ 
privateFive~~ 
!=~~ 
$num~~ 
)~~ 
{ 	
IO
ÅÅ 
.
ÅÅ 
	WriteLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ /
)
ÅÅ/ 0
;
ÅÅ0 1
}
ÇÇ 	
else
ÉÉ 
{
ÑÑ 	
if
ÖÖ 
(
ÖÖ 
data
ÖÖ 
<
ÖÖ 
$num
ÖÖ 
)
ÖÖ 
{
ÜÜ 
if
àà 
(
àà 
data
àà 
>
àà 
(
àà 
ulong
àà !
.
àà! "
MinValue
àà" *
/
àà* +
$num
àà+ ,
)
àà, -
)
àà- .
{
ââ 
ulong
ää 
result
ää  
=
ää! "
(
ää# $
ulong
ää$ )
)
ää) *
(
ää* +
data
ää+ /
*
ää0 1
$num
ää2 3
)
ää3 4
;
ää4 5
IO
ãã 
.
ãã 
	WriteLine
ãã  
(
ãã  !
$str
ãã! +
+
ãã, -
result
ãã. 4
)
ãã4 5
;
ãã5 6
}
åå 
else
çç 
{
éé 
IO
èè 
.
èè 
	WriteLine
èè  
(
èè  !
$str
èè! U
)
èèU V
;
èèV W
}
êê 
}
ëë 
}
íí 	
}
ìì 
private
ññ 
void
ññ 
GoodB2G2
ññ 
(
ññ 
)
ññ 
{
óó 
ulong
òò 
data
òò 
;
òò 
if
ôô 

(
ôô 
privateFive
ôô 
==
ôô 
$num
ôô 
)
ôô 
{
öö 	
data
úú 
=
úú 
IO
úú 
.
úú 
GetRandomULong
úú $
(
úú$ %
)
úú% &
;
úú& '
}
ùù 	
else
ûû 
{
üü 	
data
¢¢ 
=
¢¢ 
$num
¢¢ 
;
¢¢ 
}
££ 	
if
§§ 

(
§§ 
privateFive
§§ 
==
§§ 
$num
§§ 
)
§§ 
{
•• 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
<
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
if
©© 
(
©© 
data
©© 
>
©© 
(
©© 
ulong
©© !
.
©©! "
MinValue
©©" *
/
©©* +
$num
©©+ ,
)
©©, -
)
©©- .
{
™™ 
ulong
´´ 
result
´´  
=
´´! "
(
´´# $
ulong
´´$ )
)
´´) *
(
´´* +
data
´´+ /
*
´´0 1
$num
´´2 3
)
´´3 4
;
´´4 5
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨  
(
¨¨  !
$str
¨¨! +
+
¨¨, -
result
¨¨. 4
)
¨¨4 5
;
¨¨5 6
}
≠≠ 
else
ÆÆ 
{
ØØ 
IO
∞∞ 
.
∞∞ 
	WriteLine
∞∞  
(
∞∞  !
$str
∞∞! U
)
∞∞U V
;
∞∞V W
}
±± 
}
≤≤ 
}
≥≥ 	
}
¥¥ 
public
∂∂ 

override
∂∂ 
void
∂∂ 
Good
∂∂ 
(
∂∂ 
)
∂∂ 
{
∑∑ 
GoodG2B1
∏∏ 
(
∏∏ 
)
∏∏ 
;
∏∏ 
GoodG2B2
ππ 
(
ππ 
)
ππ 
;
ππ 
GoodB2G1
∫∫ 
(
∫∫ 
)
∫∫ 
;
∫∫ 
GoodB2G2
ªª 
(
ªª 
)
ªª 
;
ªª 
}
ºº 
}ææ 
}øø ΩA
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_08.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_08 7
:8 9
AbstractTestCase: J
{ 
private 
static 
bool 
PrivateReturnsTrue *
(* +
)+ ,
{   
return!! 
true!! 
;!! 
}"" 
private$$ 
static$$ 
bool$$ 
PrivateReturnsFalse$$ +
($$+ ,
)$$, -
{%% 
return&& 
false&& 
;&& 
}'' 
public)) 

override)) 
void)) 
Bad)) 
()) 
))) 
{** 
ulong++ 
data++ 
;++ 
if,, 

(,, 
PrivateReturnsTrue,, 
(,, 
),,  
),,  !
{-- 	
data// 
=// 
IO// 
.// 
GetRandomULong// $
(//$ %
)//% &
;//& '
}00 	
else11 
{22 	
data55 
=55 
$num55 
;55 
}66 	
if77 

(77 
PrivateReturnsTrue77 
(77 
)77  
)77  !
{88 	
if99 
(99 
data99 
<99 
$num99 
)99 
{:: 
ulong<< 
result<< 
=<< 
(<<  
ulong<<  %
)<<% &
(<<& '
data<<' +
*<<, -
$num<<. /
)<</ 0
;<<0 1
IO== 
.== 
	WriteLine== 
(== 
$str== '
+==( )
result==* 0
)==0 1
;==1 2
}>> 
}?? 	
}@@ 
privateDD 
voidDD 
GoodG2B1DD 
(DD 
)DD 
{EE 
ulongFF 
dataFF 
;FF 
ifGG 

(GG 
PrivateReturnsFalseGG 
(GG  
)GG  !
)GG! "
{HH 	
dataKK 
=KK 
$numKK 
;KK 
}LL 	
elseMM 
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
ifRR 

(RR 
PrivateReturnsTrueRR 
(RR 
)RR  
)RR  !
{SS 	
ifTT 
(TT 
dataTT 
<TT 
$numTT 
)TT 
{UU 
ulongWW 
resultWW 
=WW 
(WW  
ulongWW  %
)WW% &
(WW& '
dataWW' +
*WW, -
$numWW. /
)WW/ 0
;WW0 1
IOXX 
.XX 
	WriteLineXX 
(XX 
$strXX '
+XX( )
resultXX* 0
)XX0 1
;XX1 2
}YY 
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
)^^ 
{__ 
ulong`` 
data`` 
;`` 
ifaa 

(aa 
PrivateReturnsTrueaa 
(aa 
)aa  
)aa  !
{bb 	
datadd 
=dd 
$numdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
$numjj 
;jj 
}kk 	
ifll 

(ll 
PrivateReturnsTruell 
(ll 
)ll  
)ll  !
{mm 	
ifnn 
(nn 
datann 
<nn 
$numnn 
)nn 
{oo 
ulongqq 
resultqq 
=qq 
(qq  
ulongqq  %
)qq% &
(qq& '
dataqq' +
*qq, -
$numqq. /
)qq/ 0
;qq0 1
IOrr 
.rr 
	WriteLinerr 
(rr 
$strrr '
+rr( )
resultrr* 0
)rr0 1
;rr1 2
}ss 
}tt 	
}uu 
privatexx 
voidxx 
GoodB2G1xx 
(xx 
)xx 
{yy 
ulongzz 
datazz 
;zz 
if{{ 

({{ 
PrivateReturnsTrue{{ 
({{ 
){{  
){{  !
{|| 	
data~~ 
=~~ 
IO~~ 
.~~ 
GetRandomULong~~ $
(~~$ %
)~~% &
;~~& '
} 	
else
ÄÄ 
{
ÅÅ 	
data
ÑÑ 
=
ÑÑ 
$num
ÑÑ 
;
ÑÑ 
}
ÖÖ 	
if
ÜÜ 

(
ÜÜ !
PrivateReturnsFalse
ÜÜ 
(
ÜÜ  
)
ÜÜ  !
)
ÜÜ! "
{
áá 	
IO
ââ 
.
ââ 
	WriteLine
ââ 
(
ââ 
$str
ââ /
)
ââ/ 0
;
ââ0 1
}
ää 	
else
ãã 
{
åå 	
if
çç 
(
çç 
data
çç 
<
çç 
$num
çç 
)
çç 
{
éé 
if
êê 
(
êê 
data
êê 
>
êê 
(
êê 
ulong
êê !
.
êê! "
MinValue
êê" *
/
êê* +
$num
êê+ ,
)
êê, -
)
êê- .
{
ëë 
ulong
íí 
result
íí  
=
íí! "
(
íí# $
ulong
íí$ )
)
íí) *
(
íí* +
data
íí+ /
*
íí0 1
$num
íí2 3
)
íí3 4
;
íí4 5
IO
ìì 
.
ìì 
	WriteLine
ìì  
(
ìì  !
$str
ìì! +
+
ìì, -
result
ìì. 4
)
ìì4 5
;
ìì5 6
}
îî 
else
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó  
(
óó  !
$str
óó! U
)
óóU V
;
óóV W
}
òò 
}
ôô 
}
öö 	
}
õõ 
private
ûû 
void
ûû 
GoodB2G2
ûû 
(
ûû 
)
ûû 
{
üü 
ulong
†† 
data
†† 
;
†† 
if
°° 

(
°°  
PrivateReturnsTrue
°° 
(
°° 
)
°°  
)
°°  !
{
¢¢ 	
data
§§ 
=
§§ 
IO
§§ 
.
§§ 
GetRandomULong
§§ $
(
§§$ %
)
§§% &
;
§§& '
}
•• 	
else
¶¶ 
{
ßß 	
data
™™ 
=
™™ 
$num
™™ 
;
™™ 
}
´´ 	
if
¨¨ 

(
¨¨  
PrivateReturnsTrue
¨¨ 
(
¨¨ 
)
¨¨  
)
¨¨  !
{
≠≠ 	
if
ÆÆ 
(
ÆÆ 
data
ÆÆ 
<
ÆÆ 
$num
ÆÆ 
)
ÆÆ 
{
ØØ 
if
±± 
(
±± 
data
±± 
>
±± 
(
±± 
ulong
±± !
.
±±! "
MinValue
±±" *
/
±±* +
$num
±±+ ,
)
±±, -
)
±±- .
{
≤≤ 
ulong
≥≥ 
result
≥≥  
=
≥≥! "
(
≥≥# $
ulong
≥≥$ )
)
≥≥) *
(
≥≥* +
data
≥≥+ /
*
≥≥0 1
$num
≥≥2 3
)
≥≥3 4
;
≥≥4 5
IO
¥¥ 
.
¥¥ 
	WriteLine
¥¥  
(
¥¥  !
$str
¥¥! +
+
¥¥, -
result
¥¥. 4
)
¥¥4 5
;
¥¥5 6
}
µµ 
else
∂∂ 
{
∑∑ 
IO
∏∏ 
.
∏∏ 
	WriteLine
∏∏  
(
∏∏  !
$str
∏∏! U
)
∏∏U V
;
∏∏V W
}
ππ 
}
∫∫ 
}
ªª 	
}
ºº 
public
ææ 

override
ææ 
void
ææ 
Good
ææ 
(
ææ 
)
ææ 
{
øø 
GoodG2B1
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
GoodG2B2
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
GoodB2G1
¬¬ 
(
¬¬ 
)
¬¬ 
;
¬¬ 
GoodB2G2
√√ 
(
√√ 
)
√√ 
;
√√ 
}
ƒƒ 
}∆∆ 
}«« ë>
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_09.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_09 7
:8 9
AbstractTestCase: J
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_TRUE #
)# $
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.**  
STATIC_READONLY_TRUE** #
)**# $
{++ 	
if,, 
(,, 
data,, 
<,, 
$num,, 
),, 
{-- 
ulong// 
result// 
=// 
(//  
ulong//  %
)//% &
(//& '
data//' +
*//, -
$num//. /
)/// 0
;//0 1
IO00 
.00 
	WriteLine00 
(00 
$str00 '
+00( )
result00* 0
)000 1
;001 2
}11 
}22 	
}33 
private77 
void77 
GoodG2B177 
(77 
)77 
{88 
ulong99 
data99 
;99 
if:: 

(:: 
IO:: 
.:: !
STATIC_READONLY_FALSE:: $
)::$ %
{;; 	
data>> 
=>> 
$num>> 
;>> 
}?? 	
else@@ 
{AA 	
dataCC 
=CC 
$numCC 
;CC 
}DD 	
ifEE 

(EE 
IOEE 
.EE  
STATIC_READONLY_TRUEEE #
)EE# $
{FF 	
ifGG 
(GG 
dataGG 
<GG 
$numGG 
)GG 
{HH 
ulongJJ 
resultJJ 
=JJ 
(JJ  
ulongJJ  %
)JJ% &
(JJ& '
dataJJ' +
*JJ, -
$numJJ. /
)JJ/ 0
;JJ0 1
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK '
+KK( )
resultKK* 0
)KK0 1
;KK1 2
}LL 
}MM 	
}NN 
privateQQ 
voidQQ 
GoodG2B2QQ 
(QQ 
)QQ 
{RR 
ulongSS 
dataSS 
;SS 
ifTT 

(TT 
IOTT 
.TT  
STATIC_READONLY_TRUETT #
)TT# $
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
IO__ 
.__  
STATIC_READONLY_TRUE__ #
)__# $
{`` 	
ifaa 
(aa 
dataaa 
<aa 
$numaa 
)aa 
{bb 
ulongdd 
resultdd 
=dd 
(dd  
ulongdd  %
)dd% &
(dd& '
datadd' +
*dd, -
$numdd. /
)dd/ 0
;dd0 1
IOee 
.ee 
	WriteLineee 
(ee 
$stree '
+ee( )
resultee* 0
)ee0 1
;ee1 2
}ff 
}gg 	
}hh 
privatekk 
voidkk 
GoodB2G1kk 
(kk 
)kk 
{ll 
ulongmm 
datamm 
;mm 
ifnn 

(nn 
IOnn 
.nn  
STATIC_READONLY_TRUEnn #
)nn# $
{oo 	
dataqq 
=qq 
IOqq 
.qq 
GetRandomULongqq $
(qq$ %
)qq% &
;qq& '
}rr 	
elsess 
{tt 	
dataww 
=ww 
$numww 
;ww 
}xx 	
ifyy 

(yy 
IOyy 
.yy !
STATIC_READONLY_FALSEyy $
)yy$ %
{zz 	
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| /
)||/ 0
;||0 1
}}} 	
else~~ 
{ 	
if
ÄÄ 
(
ÄÄ 
data
ÄÄ 
<
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
{
ÅÅ 
if
ÉÉ 
(
ÉÉ 
data
ÉÉ 
>
ÉÉ 
(
ÉÉ 
ulong
ÉÉ !
.
ÉÉ! "
MinValue
ÉÉ" *
/
ÉÉ* +
$num
ÉÉ+ ,
)
ÉÉ, -
)
ÉÉ- .
{
ÑÑ 
ulong
ÖÖ 
result
ÖÖ  
=
ÖÖ! "
(
ÖÖ# $
ulong
ÖÖ$ )
)
ÖÖ) *
(
ÖÖ* +
data
ÖÖ+ /
*
ÖÖ0 1
$num
ÖÖ2 3
)
ÖÖ3 4
;
ÖÖ4 5
IO
ÜÜ 
.
ÜÜ 
	WriteLine
ÜÜ  
(
ÜÜ  !
$str
ÜÜ! +
+
ÜÜ, -
result
ÜÜ. 4
)
ÜÜ4 5
;
ÜÜ5 6
}
áá 
else
àà 
{
ââ 
IO
ää 
.
ää 
	WriteLine
ää  
(
ää  !
$str
ää! U
)
ääU V
;
ääV W
}
ãã 
}
åå 
}
çç 	
}
éé 
private
ëë 
void
ëë 
GoodB2G2
ëë 
(
ëë 
)
ëë 
{
íí 
ulong
ìì 
data
ìì 
;
ìì 
if
îî 

(
îî 
IO
îî 
.
îî "
STATIC_READONLY_TRUE
îî #
)
îî# $
{
ïï 	
data
óó 
=
óó 
IO
óó 
.
óó 
GetRandomULong
óó $
(
óó$ %
)
óó% &
;
óó& '
}
òò 	
else
ôô 
{
öö 	
data
ùù 
=
ùù 
$num
ùù 
;
ùù 
}
ûû 	
if
üü 

(
üü 
IO
üü 
.
üü "
STATIC_READONLY_TRUE
üü #
)
üü# $
{
†† 	
if
°° 
(
°° 
data
°° 
<
°° 
$num
°° 
)
°° 
{
¢¢ 
if
§§ 
(
§§ 
data
§§ 
>
§§ 
(
§§ 
ulong
§§ !
.
§§! "
MinValue
§§" *
/
§§* +
$num
§§+ ,
)
§§, -
)
§§- .
{
•• 
ulong
¶¶ 
result
¶¶  
=
¶¶! "
(
¶¶# $
ulong
¶¶$ )
)
¶¶) *
(
¶¶* +
data
¶¶+ /
*
¶¶0 1
$num
¶¶2 3
)
¶¶3 4
;
¶¶4 5
IO
ßß 
.
ßß 
	WriteLine
ßß  
(
ßß  !
$str
ßß! +
+
ßß, -
result
ßß. 4
)
ßß4 5
;
ßß5 6
}
®® 
else
©© 
{
™™ 
IO
´´ 
.
´´ 
	WriteLine
´´  
(
´´  !
$str
´´! U
)
´´U V
;
´´V W
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
}
ØØ 
public
±± 

override
±± 
void
±± 
Good
±± 
(
±± 
)
±± 
{
≤≤ 
GoodG2B1
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
GoodG2B2
¥¥ 
(
¥¥ 
)
¥¥ 
;
¥¥ 
GoodB2G1
µµ 
(
µµ 
)
µµ 
;
µµ 
GoodB2G2
∂∂ 
(
∂∂ 
)
∂∂ 
;
∂∂ 
}
∑∑ 
}ππ 
}∫∫ ≠=
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_10.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_10 7
:8 9
AbstractTestCase: J
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
IO 
. 

staticTrue 
) 
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.** 

staticTrue** 
)** 
{++ 	
if,, 
(,, 
data,, 
<,, 
$num,, 
),, 
{-- 
ulong// 
result// 
=// 
(//  
ulong//  %
)//% &
(//& '
data//' +
*//, -
$num//. /
)/// 0
;//0 1
IO00 
.00 
	WriteLine00 
(00 
$str00 '
+00( )
result00* 0
)000 1
;001 2
}11 
}22 	
}33 
private77 
void77 
GoodG2B177 
(77 
)77 
{88 
ulong99 
data99 
;99 
if:: 

(:: 
IO:: 
.:: 
staticFalse:: 
):: 
{;; 	
data>> 
=>> 
$num>> 
;>> 
}?? 	
else@@ 
{AA 	
dataCC 
=CC 
$numCC 
;CC 
}DD 	
ifEE 

(EE 
IOEE 
.EE 

staticTrueEE 
)EE 
{FF 	
ifGG 
(GG 
dataGG 
<GG 
$numGG 
)GG 
{HH 
ulongJJ 
resultJJ 
=JJ 
(JJ  
ulongJJ  %
)JJ% &
(JJ& '
dataJJ' +
*JJ, -
$numJJ. /
)JJ/ 0
;JJ0 1
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK '
+KK( )
resultKK* 0
)KK0 1
;KK1 2
}LL 
}MM 	
}NN 
privateQQ 
voidQQ 
GoodG2B2QQ 
(QQ 
)QQ 
{RR 
ulongSS 
dataSS 
;SS 
ifTT 

(TT 
IOTT 
.TT 

staticTrueTT 
)TT 
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
IO__ 
.__ 

staticTrue__ 
)__ 
{`` 	
ifaa 
(aa 
dataaa 
<aa 
$numaa 
)aa 
{bb 
ulongdd 
resultdd 
=dd 
(dd  
ulongdd  %
)dd% &
(dd& '
datadd' +
*dd, -
$numdd. /
)dd/ 0
;dd0 1
IOee 
.ee 
	WriteLineee 
(ee 
$stree '
+ee( )
resultee* 0
)ee0 1
;ee1 2
}ff 
}gg 	
}hh 
privatekk 
voidkk 
GoodB2G1kk 
(kk 
)kk 
{ll 
ulongmm 
datamm 
;mm 
ifnn 

(nn 
IOnn 
.nn 

staticTruenn 
)nn 
{oo 	
dataqq 
=qq 
IOqq 
.qq 
GetRandomULongqq $
(qq$ %
)qq% &
;qq& '
}rr 	
elsess 
{tt 	
dataww 
=ww 
$numww 
;ww 
}xx 	
ifyy 

(yy 
IOyy 
.yy 
staticFalseyy 
)yy 
{zz 	
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| /
)||/ 0
;||0 1
}}} 	
else~~ 
{ 	
if
ÄÄ 
(
ÄÄ 
data
ÄÄ 
<
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
{
ÅÅ 
if
ÉÉ 
(
ÉÉ 
data
ÉÉ 
>
ÉÉ 
(
ÉÉ 
ulong
ÉÉ !
.
ÉÉ! "
MinValue
ÉÉ" *
/
ÉÉ* +
$num
ÉÉ+ ,
)
ÉÉ, -
)
ÉÉ- .
{
ÑÑ 
ulong
ÖÖ 
result
ÖÖ  
=
ÖÖ! "
(
ÖÖ# $
ulong
ÖÖ$ )
)
ÖÖ) *
(
ÖÖ* +
data
ÖÖ+ /
*
ÖÖ0 1
$num
ÖÖ2 3
)
ÖÖ3 4
;
ÖÖ4 5
IO
ÜÜ 
.
ÜÜ 
	WriteLine
ÜÜ  
(
ÜÜ  !
$str
ÜÜ! +
+
ÜÜ, -
result
ÜÜ. 4
)
ÜÜ4 5
;
ÜÜ5 6
}
áá 
else
àà 
{
ââ 
IO
ää 
.
ää 
	WriteLine
ää  
(
ää  !
$str
ää! U
)
ääU V
;
ääV W
}
ãã 
}
åå 
}
çç 	
}
éé 
private
ëë 
void
ëë 
GoodB2G2
ëë 
(
ëë 
)
ëë 
{
íí 
ulong
ìì 
data
ìì 
;
ìì 
if
îî 

(
îî 
IO
îî 
.
îî 

staticTrue
îî 
)
îî 
{
ïï 	
data
óó 
=
óó 
IO
óó 
.
óó 
GetRandomULong
óó $
(
óó$ %
)
óó% &
;
óó& '
}
òò 	
else
ôô 
{
öö 	
data
ùù 
=
ùù 
$num
ùù 
;
ùù 
}
ûû 	
if
üü 

(
üü 
IO
üü 
.
üü 

staticTrue
üü 
)
üü 
{
†† 	
if
°° 
(
°° 
data
°° 
<
°° 
$num
°° 
)
°° 
{
¢¢ 
if
§§ 
(
§§ 
data
§§ 
>
§§ 
(
§§ 
ulong
§§ !
.
§§! "
MinValue
§§" *
/
§§* +
$num
§§+ ,
)
§§, -
)
§§- .
{
•• 
ulong
¶¶ 
result
¶¶  
=
¶¶! "
(
¶¶# $
ulong
¶¶$ )
)
¶¶) *
(
¶¶* +
data
¶¶+ /
*
¶¶0 1
$num
¶¶2 3
)
¶¶3 4
;
¶¶4 5
IO
ßß 
.
ßß 
	WriteLine
ßß  
(
ßß  !
$str
ßß! +
+
ßß, -
result
ßß. 4
)
ßß4 5
;
ßß5 6
}
®® 
else
©© 
{
™™ 
IO
´´ 
.
´´ 
	WriteLine
´´  
(
´´  !
$str
´´! U
)
´´U V
;
´´V W
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
}
ØØ 
public
±± 

override
±± 
void
±± 
Good
±± 
(
±± 
)
±± 
{
≤≤ 
GoodG2B1
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
GoodG2B2
¥¥ 
(
¥¥ 
)
¥¥ 
;
¥¥ 
GoodB2G1
µµ 
(
µµ 
)
µµ 
;
µµ 
GoodB2G2
∂∂ 
(
∂∂ 
)
∂∂ 
;
∂∂ 
}
∑∑ 
}ππ 
}∫∫ ß@
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_11.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_11 7
:8 9
AbstractTestCase: J
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
IO 
. 
StaticReturnsTrue  
(  !
)! "
)" #
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(**
 
IO** 
.** 
StaticReturnsTrue** 
(**  
)**  !
)**! "
{++ 	
if,, 
(,, 
data,, 
<,, 
$num,, 
),, 
{-- 
ulong// 
result// 
=// 
(//  
ulong//  %
)//% &
(//& '
data//' +
*//, -
$num//. /
)/// 0
;//0 1
IO00 
.00 
	WriteLine00 
(00 
$str00 '
+00( )
result00* 0
)000 1
;001 2
}11 
}22 	
}33 
private77 
void77 
GoodG2B177 
(77 
)77 
{88 
ulong99 
data99 
;99 
if:: 

(:: 
IO:: 
.:: 
StaticReturnsFalse:: !
(::! "
)::" #
)::# $
{;; 	
data>> 
=>> 
$num>> 
;>> 
}?? 	
else@@ 
{AA 	
dataCC 
=CC 
$numCC 
;CC 
}DD 	
ifEE 

(EE 
IOEE 
.EE 
StaticReturnsTrueEE  
(EE  !
)EE! "
)EE" #
{FF 	
ifGG 
(GG 
dataGG 
<GG 
$numGG 
)GG 
{HH 
ulongJJ 
resultJJ 
=JJ 
(JJ  
ulongJJ  %
)JJ% &
(JJ& '
dataJJ' +
*JJ, -
$numJJ. /
)JJ/ 0
;JJ0 1
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK '
+KK( )
resultKK* 0
)KK0 1
;KK1 2
}LL 
}MM 	
}NN 
privateQQ 
voidQQ 
GoodG2B2QQ 
(QQ 
)QQ 
{RR 
ulongSS 
dataSS 
;SS 
ifTT 

(TT 
IOTT 
.TT 
StaticReturnsTrueTT  
(TT  !
)TT! "
)TT" #
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
IO__ 
.__ 
StaticReturnsTrue__  
(__  !
)__! "
)__" #
{`` 	
ifaa 
(aa 
dataaa 
<aa 
$numaa 
)aa 
{bb 
ulongdd 
resultdd 
=dd 
(dd  
ulongdd  %
)dd% &
(dd& '
datadd' +
*dd, -
$numdd. /
)dd/ 0
;dd0 1
IOee 
.ee 
	WriteLineee 
(ee 
$stree '
+ee( )
resultee* 0
)ee0 1
;ee1 2
}ff 
}gg 	
}hh 
privatekk 
voidkk 
GoodB2G1kk 
(kk 
)kk 
{ll 
ulongmm 
datamm 
;mm 
ifnn 

(nn 
IOnn 
.nn 
StaticReturnsTruenn  
(nn  !
)nn! "
)nn" #
{oo 	
dataqq 
=qq 
IOqq 
.qq 
GetRandomULongqq $
(qq$ %
)qq% &
;qq& '
}rr 	
elsess 
{tt 	
dataww 
=ww 
$numww 
;ww 
}xx 	
ifyy 

(yy 
IOyy 
.yy 
StaticReturnsFalseyy !
(yy! "
)yy" #
)yy# $
{zz 	
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| /
)||/ 0
;||0 1
}}} 	
else~~ 
{ 	
if
ÄÄ 
(
ÄÄ 
data
ÄÄ 
<
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
{
ÅÅ 
if
ÉÉ 
(
ÉÉ 
data
ÉÉ 
>
ÉÉ 
(
ÉÉ 
ulong
ÉÉ !
.
ÉÉ! "
MinValue
ÉÉ" *
/
ÉÉ* +
$num
ÉÉ+ ,
)
ÉÉ, -
)
ÉÉ- .
{
ÑÑ 
ulong
ÖÖ 
result
ÖÖ  
=
ÖÖ! "
(
ÖÖ# $
ulong
ÖÖ$ )
)
ÖÖ) *
(
ÖÖ* +
data
ÖÖ+ /
*
ÖÖ0 1
$num
ÖÖ2 3
)
ÖÖ3 4
;
ÖÖ4 5
IO
ÜÜ 
.
ÜÜ 
	WriteLine
ÜÜ  
(
ÜÜ  !
$str
ÜÜ! +
+
ÜÜ, -
result
ÜÜ. 4
)
ÜÜ4 5
;
ÜÜ5 6
}
áá 
else
àà 
{
ââ 
IO
ää 
.
ää 
	WriteLine
ää  
(
ää  !
$str
ää! U
)
ääU V
;
ääV W
}
ãã 
}
åå 
}
çç 	
}
éé 
private
ëë 
void
ëë 
GoodB2G2
ëë 
(
ëë 
)
ëë 
{
íí 
ulong
ìì 
data
ìì 
;
ìì 
if
îî 

(
îî 
IO
îî 
.
îî 
StaticReturnsTrue
îî  
(
îî  !
)
îî! "
)
îî" #
{
ïï 	
data
óó 
=
óó 
IO
óó 
.
óó 
GetRandomULong
óó $
(
óó$ %
)
óó% &
;
óó& '
}
òò 	
else
ôô 
{
öö 	
data
ùù 
=
ùù 
$num
ùù 
;
ùù 
}
ûû 	
if
üü 

(
üü 
IO
üü 
.
üü 
StaticReturnsTrue
üü  
(
üü  !
)
üü! "
)
üü" #
{
†† 	
if
°° 
(
°° 
data
°° 
<
°° 
$num
°° 
)
°° 
{
¢¢ 
if
§§ 
(
§§ 
data
§§ 
>
§§ 
(
§§ 
ulong
§§ !
.
§§! "
MinValue
§§" *
/
§§* +
$num
§§+ ,
)
§§, -
)
§§- .
{
•• 
ulong
¶¶ 
result
¶¶  
=
¶¶! "
(
¶¶# $
ulong
¶¶$ )
)
¶¶) *
(
¶¶* +
data
¶¶+ /
*
¶¶0 1
$num
¶¶2 3
)
¶¶3 4
;
¶¶4 5
IO
ßß 
.
ßß 
	WriteLine
ßß  
(
ßß  !
$str
ßß! +
+
ßß, -
result
ßß. 4
)
ßß4 5
;
ßß5 6
}
®® 
else
©© 
{
™™ 
IO
´´ 
.
´´ 
	WriteLine
´´  
(
´´  !
$str
´´! U
)
´´U V
;
´´V W
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
}
ØØ 
public
±± 

override
±± 
void
±± 
Good
±± 
(
±± 
)
±± 
{
≤≤ 
GoodG2B1
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
GoodG2B2
¥¥ 
(
¥¥ 
)
¥¥ 
;
¥¥ 
GoodB2G1
µµ 
(
µµ 
)
µµ 
;
µµ 
GoodB2G2
∂∂ 
(
∂∂ 
)
∂∂ 
;
∂∂ 
}
∑∑ 
}ππ 
}∫∫ ˇ9
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_12.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_12 7
:8 9
AbstractTestCase: J
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

(
 
IO 
. $
StaticReturnsTrueOrFalse &
(& '
)' (
)( )
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

())
 
IO)) 
.)) $
StaticReturnsTrueOrFalse)) &
())& '
)))' (
)))( )
{** 	
if++ 
(++ 
data++ 
<++ 
$num++ 
)++ 
{,, 
ulong.. 
result.. 
=.. 
(..  
ulong..  %
)..% &
(..& '
data..' +
*.., -
$num... /
)../ 0
;..0 1
IO// 
.// 
	WriteLine// 
(// 
$str// '
+//( )
result//* 0
)//0 1
;//1 2
}00 
}11 	
else22 
{33 	
if44 
(44 
data44 
<44 
$num44 
)44 
{55 
if77 
(77 
data77 
>77 
(77 
ulong77 !
.77! "
MinValue77" *
/77* +
$num77+ ,
)77, -
)77- .
{88 
ulong99 
result99  
=99! "
(99# $
ulong99$ )
)99) *
(99* +
data99+ /
*990 1
$num992 3
)993 4
;994 5
IO:: 
.:: 
	WriteLine::  
(::  !
$str::! +
+::, -
result::. 4
)::4 5
;::5 6
};; 
else<< 
{== 
IO>> 
.>> 
	WriteLine>>  
(>>  !
$str>>! U
)>>U V
;>>V W
}?? 
}@@ 
}AA 	
}BB 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
ulongII 
dataII 
;II 
ifJJ 

(JJ
 
IOJJ 
.JJ $
StaticReturnsTrueOrFalseJJ &
(JJ& '
)JJ' (
)JJ( )
{KK 	
dataMM 
=MM 
$numMM 
;MM 
}NN 	
elseOO 
{PP 	
dataRR 
=RR 
$numRR 
;RR 
}SS 	
ifTT 

(TT
 
IOTT 
.TT $
StaticReturnsTrueOrFalseTT &
(TT& '
)TT' (
)TT( )
{UU 	
ifVV 
(VV 
dataVV 
<VV 
$numVV 
)VV 
{WW 
ulongYY 
resultYY 
=YY 
(YY  
ulongYY  %
)YY% &
(YY& '
dataYY' +
*YY, -
$numYY. /
)YY/ 0
;YY0 1
IOZZ 
.ZZ 
	WriteLineZZ 
(ZZ 
$strZZ '
+ZZ( )
resultZZ* 0
)ZZ0 1
;ZZ1 2
}[[ 
}\\ 	
else]] 
{^^ 	
if__ 
(__ 
data__ 
<__ 
$num__ 
)__ 
{`` 
ulongbb 
resultbb 
=bb 
(bb  
ulongbb  %
)bb% &
(bb& '
databb' +
*bb, -
$numbb. /
)bb/ 0
;bb0 1
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc '
+cc( )
resultcc* 0
)cc0 1
;cc1 2
}dd 
}ee 	
}ff 
privatejj 
voidjj 
GoodB2Gjj 
(jj 
)jj 
{kk 
ulongll 
datall 
;ll 
ifmm 

(mm
 
IOmm 
.mm $
StaticReturnsTrueOrFalsemm &
(mm& '
)mm' (
)mm( )
{nn 	
datapp 
=pp 
IOpp 
.pp 
GetRandomULongpp $
(pp$ %
)pp% &
;pp& '
}qq 	
elserr 
{ss 	
datauu 
=uu 
IOuu 
.uu 
GetRandomULonguu $
(uu$ %
)uu% &
;uu& '
}vv 	
ifww 

(ww
 
IOww 
.ww $
StaticReturnsTrueOrFalseww &
(ww& '
)ww' (
)ww( )
{xx 	
ifyy 
(yy 
datayy 
<yy 
$numyy 
)yy 
{zz 
if|| 
(|| 
data|| 
>|| 
(|| 
ulong|| !
.||! "
MinValue||" *
/||* +
$num||+ ,
)||, -
)||- .
{}} 
ulong~~ 
result~~  
=~~! "
(~~# $
ulong~~$ )
)~~) *
(~~* +
data~~+ /
*~~0 1
$num~~2 3
)~~3 4
;~~4 5
IO 
. 
	WriteLine  
(  !
$str! +
+, -
result. 4
)4 5
;5 6
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
	WriteLine
ÉÉ  
(
ÉÉ  !
$str
ÉÉ! U
)
ÉÉU V
;
ÉÉV W
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 	
else
áá 
{
àà 	
if
ââ 
(
ââ 
data
ââ 
<
ââ 
$num
ââ 
)
ââ 
{
ää 
if
åå 
(
åå 
data
åå 
>
åå 
(
åå 
ulong
åå !
.
åå! "
MinValue
åå" *
/
åå* +
$num
åå+ ,
)
åå, -
)
åå- .
{
çç 
ulong
éé 
result
éé  
=
éé! "
(
éé# $
ulong
éé$ )
)
éé) *
(
éé* +
data
éé+ /
*
éé0 1
$num
éé2 3
)
éé3 4
;
éé4 5
IO
èè 
.
èè 
	WriteLine
èè  
(
èè  !
$str
èè! +
+
èè, -
result
èè. 4
)
èè4 5
;
èè5 6
}
êê 
else
ëë 
{
íí 
IO
ìì 
.
ìì 
	WriteLine
ìì  
(
ìì  !
$str
ìì! U
)
ììU V
;
ììV W
}
îî 
}
ïï 
}
ññ 	
}
óó 
public
ôô 

override
ôô 
void
ôô 
Good
ôô 
(
ôô 
)
ôô 
{
õõ 
GoodG2B
úú 
(
úú 
)
úú 
;
úú 
GoodB2G
ùù 
(
ùù 
)
ùù 
;
ùù 
}
ûû 
}†† 
}°° Î@
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_13.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_13 7
:8 9
AbstractTestCase: J
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_FIVE #
==# %
$num% &
)& '
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.**  
STATIC_READONLY_FIVE** #
==**# %
$num**% &
)**& '
{++ 	
if,, 
(,, 
data,, 
<,, 
$num,, 
),, 
{-- 
ulong// 
result// 
=// 
(//  
ulong//  %
)//% &
(//& '
data//' +
*//, -
$num//. /
)/// 0
;//0 1
IO00 
.00 
	WriteLine00 
(00 
$str00 '
+00( )
result00* 0
)000 1
;001 2
}11 
}22 	
}33 
private77 
void77 
GoodG2B177 
(77 
)77 
{88 
ulong99 
data99 
;99 
if:: 

(:: 
IO:: 
.::  
STATIC_READONLY_FIVE:: #
!=::# %
$num::% &
)::& '
{;; 	
data>> 
=>> 
$num>> 
;>> 
}?? 	
else@@ 
{AA 	
dataCC 
=CC 
$numCC 
;CC 
}DD 	
ifEE 

(EE 
IOEE 
.EE  
STATIC_READONLY_FIVEEE #
==EE# %
$numEE% &
)EE& '
{FF 	
ifGG 
(GG 
dataGG 
<GG 
$numGG 
)GG 
{HH 
ulongJJ 
resultJJ 
=JJ 
(JJ  
ulongJJ  %
)JJ% &
(JJ& '
dataJJ' +
*JJ, -
$numJJ. /
)JJ/ 0
;JJ0 1
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK '
+KK( )
resultKK* 0
)KK0 1
;KK1 2
}LL 
}MM 	
}NN 
privateQQ 
voidQQ 
GoodG2B2QQ 
(QQ 
)QQ 
{RR 
ulongSS 
dataSS 
;SS 
ifTT 

(TT 
IOTT 
.TT  
STATIC_READONLY_FIVETT #
==TT# %
$numTT% &
)TT& '
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
IO__ 
.__  
STATIC_READONLY_FIVE__ #
==__# %
$num__% &
)__& '
{`` 	
ifaa 
(aa 
dataaa 
<aa 
$numaa 
)aa 
{bb 
ulongdd 
resultdd 
=dd 
(dd  
ulongdd  %
)dd% &
(dd& '
datadd' +
*dd, -
$numdd. /
)dd/ 0
;dd0 1
IOee 
.ee 
	WriteLineee 
(ee 
$stree '
+ee( )
resultee* 0
)ee0 1
;ee1 2
}ff 
}gg 	
}hh 
privatekk 
voidkk 
GoodB2G1kk 
(kk 
)kk 
{ll 
ulongmm 
datamm 
;mm 
ifnn 

(nn 
IOnn 
.nn  
STATIC_READONLY_FIVEnn #
==nn# %
$numnn% &
)nn& '
{oo 	
dataqq 
=qq 
IOqq 
.qq 
GetRandomULongqq $
(qq$ %
)qq% &
;qq& '
}rr 	
elsess 
{tt 	
dataww 
=ww 
$numww 
;ww 
}xx 	
ifyy 

(yy 
IOyy 
.yy  
STATIC_READONLY_FIVEyy #
!=yy# %
$numyy% &
)yy& '
{zz 	
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| /
)||/ 0
;||0 1
}}} 	
else~~ 
{ 	
if
ÄÄ 
(
ÄÄ 
data
ÄÄ 
<
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
{
ÅÅ 
if
ÉÉ 
(
ÉÉ 
data
ÉÉ 
>
ÉÉ 
(
ÉÉ 
ulong
ÉÉ !
.
ÉÉ! "
MinValue
ÉÉ" *
/
ÉÉ* +
$num
ÉÉ+ ,
)
ÉÉ, -
)
ÉÉ- .
{
ÑÑ 
ulong
ÖÖ 
result
ÖÖ  
=
ÖÖ! "
(
ÖÖ# $
ulong
ÖÖ$ )
)
ÖÖ) *
(
ÖÖ* +
data
ÖÖ+ /
*
ÖÖ0 1
$num
ÖÖ2 3
)
ÖÖ3 4
;
ÖÖ4 5
IO
ÜÜ 
.
ÜÜ 
	WriteLine
ÜÜ  
(
ÜÜ  !
$str
ÜÜ! +
+
ÜÜ, -
result
ÜÜ. 4
)
ÜÜ4 5
;
ÜÜ5 6
}
áá 
else
àà 
{
ââ 
IO
ää 
.
ää 
	WriteLine
ää  
(
ää  !
$str
ää! U
)
ääU V
;
ääV W
}
ãã 
}
åå 
}
çç 	
}
éé 
private
ëë 
void
ëë 
GoodB2G2
ëë 
(
ëë 
)
ëë 
{
íí 
ulong
ìì 
data
ìì 
;
ìì 
if
îî 

(
îî 
IO
îî 
.
îî "
STATIC_READONLY_FIVE
îî #
==
îî# %
$num
îî% &
)
îî& '
{
ïï 	
data
óó 
=
óó 
IO
óó 
.
óó 
GetRandomULong
óó $
(
óó$ %
)
óó% &
;
óó& '
}
òò 	
else
ôô 
{
öö 	
data
ùù 
=
ùù 
$num
ùù 
;
ùù 
}
ûû 	
if
üü 

(
üü 
IO
üü 
.
üü "
STATIC_READONLY_FIVE
üü #
==
üü# %
$num
üü% &
)
üü& '
{
†† 	
if
°° 
(
°° 
data
°° 
<
°° 
$num
°° 
)
°° 
{
¢¢ 
if
§§ 
(
§§ 
data
§§ 
>
§§ 
(
§§ 
ulong
§§ !
.
§§! "
MinValue
§§" *
/
§§* +
$num
§§+ ,
)
§§, -
)
§§- .
{
•• 
ulong
¶¶ 
result
¶¶  
=
¶¶! "
(
¶¶# $
ulong
¶¶$ )
)
¶¶) *
(
¶¶* +
data
¶¶+ /
*
¶¶0 1
$num
¶¶2 3
)
¶¶3 4
;
¶¶4 5
IO
ßß 
.
ßß 
	WriteLine
ßß  
(
ßß  !
$str
ßß! +
+
ßß, -
result
ßß. 4
)
ßß4 5
;
ßß5 6
}
®® 
else
©© 
{
™™ 
IO
´´ 
.
´´ 
	WriteLine
´´  
(
´´  !
$str
´´! U
)
´´U V
;
´´V W
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
}
ØØ 
public
±± 

override
±± 
void
±± 
Good
±± 
(
±± 
)
±± 
{
≤≤ 
GoodG2B1
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
GoodG2B2
¥¥ 
(
¥¥ 
)
¥¥ 
;
¥¥ 
GoodB2G1
µµ 
(
µµ 
)
µµ 
;
µµ 
GoodB2G2
∂∂ 
(
∂∂ 
)
∂∂ 
;
∂∂ 
}
∑∑ 
}ππ 
}∫∫ á@
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_14.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_14 7
:8 9
AbstractTestCase: J
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
IO 
. 

staticFive 
== 
$num 
) 
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.** 

staticFive** 
==** 
$num** 
)** 
{++ 	
if,, 
(,, 
data,, 
<,, 
$num,, 
),, 
{-- 
ulong// 
result// 
=// 
(//  
ulong//  %
)//% &
(//& '
data//' +
*//, -
$num//. /
)/// 0
;//0 1
IO00 
.00 
	WriteLine00 
(00 
$str00 '
+00( )
result00* 0
)000 1
;001 2
}11 
}22 	
}33 
private77 
void77 
GoodG2B177 
(77 
)77 
{88 
ulong99 
data99 
;99 
if:: 

(:: 
IO:: 
.:: 

staticFive:: 
!=:: 
$num:: 
):: 
{;; 	
data>> 
=>> 
$num>> 
;>> 
}?? 	
else@@ 
{AA 	
dataCC 
=CC 
$numCC 
;CC 
}DD 	
ifEE 

(EE 
IOEE 
.EE 

staticFiveEE 
==EE 
$numEE 
)EE 
{FF 	
ifGG 
(GG 
dataGG 
<GG 
$numGG 
)GG 
{HH 
ulongJJ 
resultJJ 
=JJ 
(JJ  
ulongJJ  %
)JJ% &
(JJ& '
dataJJ' +
*JJ, -
$numJJ. /
)JJ/ 0
;JJ0 1
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK '
+KK( )
resultKK* 0
)KK0 1
;KK1 2
}LL 
}MM 	
}NN 
privateQQ 
voidQQ 
GoodG2B2QQ 
(QQ 
)QQ 
{RR 
ulongSS 
dataSS 
;SS 
ifTT 

(TT 
IOTT 
.TT 

staticFiveTT 
==TT 
$numTT 
)TT 
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
IO__ 
.__ 

staticFive__ 
==__ 
$num__ 
)__ 
{`` 	
ifaa 
(aa 
dataaa 
<aa 
$numaa 
)aa 
{bb 
ulongdd 
resultdd 
=dd 
(dd  
ulongdd  %
)dd% &
(dd& '
datadd' +
*dd, -
$numdd. /
)dd/ 0
;dd0 1
IOee 
.ee 
	WriteLineee 
(ee 
$stree '
+ee( )
resultee* 0
)ee0 1
;ee1 2
}ff 
}gg 	
}hh 
privatekk 
voidkk 
GoodB2G1kk 
(kk 
)kk 
{ll 
ulongmm 
datamm 
;mm 
ifnn 

(nn 
IOnn 
.nn 

staticFivenn 
==nn 
$numnn 
)nn 
{oo 	
dataqq 
=qq 
IOqq 
.qq 
GetRandomULongqq $
(qq$ %
)qq% &
;qq& '
}rr 	
elsess 
{tt 	
dataww 
=ww 
$numww 
;ww 
}xx 	
ifyy 

(yy 
IOyy 
.yy 

staticFiveyy 
!=yy 
$numyy 
)yy 
{zz 	
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| /
)||/ 0
;||0 1
}}} 	
else~~ 
{ 	
if
ÄÄ 
(
ÄÄ 
data
ÄÄ 
<
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
{
ÅÅ 
if
ÉÉ 
(
ÉÉ 
data
ÉÉ 
>
ÉÉ 
(
ÉÉ 
ulong
ÉÉ !
.
ÉÉ! "
MinValue
ÉÉ" *
/
ÉÉ* +
$num
ÉÉ+ ,
)
ÉÉ, -
)
ÉÉ- .
{
ÑÑ 
ulong
ÖÖ 
result
ÖÖ  
=
ÖÖ! "
(
ÖÖ# $
ulong
ÖÖ$ )
)
ÖÖ) *
(
ÖÖ* +
data
ÖÖ+ /
*
ÖÖ0 1
$num
ÖÖ2 3
)
ÖÖ3 4
;
ÖÖ4 5
IO
ÜÜ 
.
ÜÜ 
	WriteLine
ÜÜ  
(
ÜÜ  !
$str
ÜÜ! +
+
ÜÜ, -
result
ÜÜ. 4
)
ÜÜ4 5
;
ÜÜ5 6
}
áá 
else
àà 
{
ââ 
IO
ää 
.
ää 
	WriteLine
ää  
(
ää  !
$str
ää! U
)
ääU V
;
ääV W
}
ãã 
}
åå 
}
çç 	
}
éé 
private
ëë 
void
ëë 
GoodB2G2
ëë 
(
ëë 
)
ëë 
{
íí 
ulong
ìì 
data
ìì 
;
ìì 
if
îî 

(
îî 
IO
îî 
.
îî 

staticFive
îî 
==
îî 
$num
îî 
)
îî 
{
ïï 	
data
óó 
=
óó 
IO
óó 
.
óó 
GetRandomULong
óó $
(
óó$ %
)
óó% &
;
óó& '
}
òò 	
else
ôô 
{
öö 	
data
ùù 
=
ùù 
$num
ùù 
;
ùù 
}
ûû 	
if
üü 

(
üü 
IO
üü 
.
üü 

staticFive
üü 
==
üü 
$num
üü 
)
üü 
{
†† 	
if
°° 
(
°° 
data
°° 
<
°° 
$num
°° 
)
°° 
{
¢¢ 
if
§§ 
(
§§ 
data
§§ 
>
§§ 
(
§§ 
ulong
§§ !
.
§§! "
MinValue
§§" *
/
§§* +
$num
§§+ ,
)
§§, -
)
§§- .
{
•• 
ulong
¶¶ 
result
¶¶  
=
¶¶! "
(
¶¶# $
ulong
¶¶$ )
)
¶¶) *
(
¶¶* +
data
¶¶+ /
*
¶¶0 1
$num
¶¶2 3
)
¶¶3 4
;
¶¶4 5
IO
ßß 
.
ßß 
	WriteLine
ßß  
(
ßß  !
$str
ßß! +
+
ßß, -
result
ßß. 4
)
ßß4 5
;
ßß5 6
}
®® 
else
©© 
{
™™ 
IO
´´ 
.
´´ 
	WriteLine
´´  
(
´´  !
$str
´´! U
)
´´U V
;
´´V W
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
}
ØØ 
public
±± 

override
±± 
void
±± 
Good
±± 
(
±± 
)
±± 
{
≤≤ 
GoodG2B1
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
GoodG2B2
¥¥ 
(
¥¥ 
)
¥¥ 
;
¥¥ 
GoodB2G1
µµ 
(
µµ 
)
µµ 
;
µµ 
GoodB2G2
∂∂ 
(
∂∂ 
)
∂∂ 
;
∂∂ 
}
∑∑ 
}ππ 
}∫∫ πI
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_15.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_15 7
:8 9
AbstractTestCase: J
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
switch 
( 
$num 
) 
{   	
case!! 
$num!! 
:!! 
data## 
=## 
IO## 
.## 
GetRandomULong## $
(##$ %
)##% &
;##& '
break$$ 
;$$ 
default%% 
:%% 
data(( 
=(( 
$num(( 
;(( 
break)) 
;)) 
}** 	
switch++ 
(++ 
$num++ 
)++ 
{,, 	
case-- 
$num-- 
:-- 
if.. 
(.. 
data.. 
<.. 
$num.. 
).. 
{// 
ulong11 
result11 
=11 
(11  
ulong11  %
)11% &
(11& '
data11' +
*11, -
$num11. /
)11/ 0
;110 1
IO22 
.22 
	WriteLine22 
(22 
$str22 '
+22( )
result22* 0
)220 1
;221 2
}33 
break44 
;44 
default55 
:55 
IO77 
.77 
	WriteLine77 
(77 
$str77 /
)77/ 0
;770 1
break88 
;88 
}99 	
}:: 
private>> 
void>> 
GoodG2B1>> 
(>> 
)>> 
{?? 
ulong@@ 
data@@ 
;@@ 
switchAA 
(AA 
$numAA 
)AA 
{BB 	
caseCC 
$numCC 
:CC 
dataFF 
=FF 
$numFF 
;FF 
breakGG 
;GG 
defaultHH 
:HH 
dataJJ 
=JJ 
$numJJ 
;JJ 
breakKK 
;KK 
}LL 	
switchMM 
(MM 
$numMM 
)MM 
{NN 	
caseOO 
$numOO 
:OO 
ifPP 
(PP 
dataPP 
<PP 
$numPP 
)PP 
{QQ 
ulongSS 
resultSS 
=SS 
(SS  
ulongSS  %
)SS% &
(SS& '
dataSS' +
*SS, -
$numSS. /
)SS/ 0
;SS0 1
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT '
+TT( )
resultTT* 0
)TT0 1
;TT1 2
}UU 
breakVV 
;VV 
defaultWW 
:WW 
IOYY 
.YY 
	WriteLineYY 
(YY 
$strYY /
)YY/ 0
;YY0 1
breakZZ 
;ZZ 
}[[ 	
}\\ 
private__ 
void__ 
GoodG2B2__ 
(__ 
)__ 
{`` 
ulongaa 
dataaa 
;aa 
switchbb 
(bb 
$numbb 
)bb 
{cc 	
casedd 
$numdd 
:dd 
dataff 
=ff 
$numff 
;ff 
breakgg 
;gg 
defaulthh 
:hh 
datakk 
=kk 
$numkk 
;kk 
breakll 
;ll 
}mm 	
switchnn 
(nn 
$numnn 
)nn 
{oo 	
casepp 
$numpp 
:pp 
ifqq 
(qq 
dataqq 
<qq 
$numqq 
)qq 
{rr 
ulongtt 
resulttt 
=tt 
(tt  
ulongtt  %
)tt% &
(tt& '
datatt' +
*tt, -
$numtt. /
)tt/ 0
;tt0 1
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu '
+uu( )
resultuu* 0
)uu0 1
;uu1 2
}vv 
breakww 
;ww 
defaultxx 
:xx 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz /
)zz/ 0
;zz0 1
break{{ 
;{{ 
}|| 	
}}} 
private
ÄÄ 
void
ÄÄ 
GoodB2G1
ÄÄ 
(
ÄÄ 
)
ÄÄ 
{
ÅÅ 
ulong
ÇÇ 
data
ÇÇ 
;
ÇÇ 
switch
ÉÉ 
(
ÉÉ 
$num
ÉÉ 
)
ÉÉ 
{
ÑÑ 	
case
ÖÖ 
$num
ÖÖ 
:
ÖÖ 
data
áá 
=
áá 
IO
áá 
.
áá 
GetRandomULong
áá $
(
áá$ %
)
áá% &
;
áá& '
break
àà 
;
àà 
default
ââ 
:
ââ 
data
åå 
=
åå 
$num
åå 
;
åå 
break
çç 
;
çç 
}
éé 	
switch
èè 
(
èè 
$num
èè 
)
èè 
{
êê 	
case
ëë 
$num
ëë 
:
ëë 
IO
ìì 
.
ìì 
	WriteLine
ìì 
(
ìì 
$str
ìì /
)
ìì/ 0
;
ìì0 1
break
îî 
;
îî 
default
ïï 
:
ïï 
if
ññ 
(
ññ 
data
ññ 
<
ññ 
$num
ññ 
)
ññ 
{
óó 
if
ôô 
(
ôô 
data
ôô 
>
ôô 
(
ôô 
ulong
ôô !
.
ôô! "
MinValue
ôô" *
/
ôô* +
$num
ôô+ ,
)
ôô, -
)
ôô- .
{
öö 
ulong
õõ 
result
õõ  
=
õõ! "
(
õõ# $
ulong
õõ$ )
)
õõ) *
(
õõ* +
data
õõ+ /
*
õõ0 1
$num
õõ2 3
)
õõ3 4
;
õõ4 5
IO
úú 
.
úú 
	WriteLine
úú  
(
úú  !
$str
úú! +
+
úú, -
result
úú. 4
)
úú4 5
;
úú5 6
}
ùù 
else
ûû 
{
üü 
IO
†† 
.
†† 
	WriteLine
††  
(
††  !
$str
††! U
)
††U V
;
††V W
}
°° 
}
¢¢ 
break
££ 
;
££ 
}
§§ 	
}
•• 
private
®® 
void
®® 
GoodB2G2
®® 
(
®® 
)
®® 
{
©© 
ulong
™™ 
data
™™ 
;
™™ 
switch
´´ 
(
´´ 
$num
´´ 
)
´´ 
{
¨¨ 	
case
≠≠ 
$num
≠≠ 
:
≠≠ 
data
ØØ 
=
ØØ 
IO
ØØ 
.
ØØ 
GetRandomULong
ØØ $
(
ØØ$ %
)
ØØ% &
;
ØØ& '
break
∞∞ 
;
∞∞ 
default
±± 
:
±± 
data
¥¥ 
=
¥¥ 
$num
¥¥ 
;
¥¥ 
break
µµ 
;
µµ 
}
∂∂ 	
switch
∑∑ 
(
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 	
case
ππ 
$num
ππ 
:
ππ 
if
∫∫ 
(
∫∫ 
data
∫∫ 
<
∫∫ 
$num
∫∫ 
)
∫∫ 
{
ªª 
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
>
ΩΩ 
(
ΩΩ 
ulong
ΩΩ !
.
ΩΩ! "
MinValue
ΩΩ" *
/
ΩΩ* +
$num
ΩΩ+ ,
)
ΩΩ, -
)
ΩΩ- .
{
ææ 
ulong
øø 
result
øø  
=
øø! "
(
øø# $
ulong
øø$ )
)
øø) *
(
øø* +
data
øø+ /
*
øø0 1
$num
øø2 3
)
øø3 4
;
øø4 5
IO
¿¿ 
.
¿¿ 
	WriteLine
¿¿  
(
¿¿  !
$str
¿¿! +
+
¿¿, -
result
¿¿. 4
)
¿¿4 5
;
¿¿5 6
}
¡¡ 
else
¬¬ 
{
√√ 
IO
ƒƒ 
.
ƒƒ 
	WriteLine
ƒƒ  
(
ƒƒ  !
$str
ƒƒ! U
)
ƒƒU V
;
ƒƒV W
}
≈≈ 
}
∆∆ 
break
«« 
;
«« 
default
»» 
:
»» 
IO
   
.
   
	WriteLine
   
(
   
$str
   /
)
  / 0
;
  0 1
break
ÀÀ 
;
ÀÀ 
}
ÃÃ 	
}
ÕÕ 
public
œœ 

override
œœ 
void
œœ 
Good
œœ 
(
œœ 
)
œœ 
{
–– 
GoodG2B1
—— 
(
—— 
)
—— 
;
—— 
GoodG2B2
““ 
(
““ 
)
““ 
;
““ 
GoodB2G1
”” 
(
”” 
)
”” 
;
”” 
GoodB2G2
‘‘ 
(
‘‘ 
)
‘‘ 
;
‘‘ 
}
’’ 
}◊◊ 
}ÿÿ Ó 
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_16.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_16 7
:8 9
AbstractTestCase: J
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
while 
( 
true 
) 
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
break## 
;## 
}$$ 	
while%% 
(%% 
true%% 
)%% 
{&& 	
if'' 
('' 
data'' 
<'' 
$num'' 
)'' 
{(( 
ulong** 
result** 
=** 
(**  
ulong**  %
)**% &
(**& '
data**' +
***, -
$num**. /
)**/ 0
;**0 1
IO++ 
.++ 
	WriteLine++ 
(++ 
$str++ '
+++( )
result++* 0
)++0 1
;++1 2
},, 
break-- 
;-- 
}.. 	
}// 
private33 
void33 
GoodG2B33 
(33 
)33 
{44 
ulong55 
data55 
;55 
while66 
(66 
true66 
)66 
{77 	
data99 
=99 
$num99 
;99 
break:: 
;:: 
};; 	
while<< 
(<< 
true<< 
)<< 
{== 	
if>> 
(>> 
data>> 
<>> 
$num>> 
)>> 
{?? 
ulongAA 
resultAA 
=AA 
(AA  
ulongAA  %
)AA% &
(AA& '
dataAA' +
*AA, -
$numAA. /
)AA/ 0
;AA0 1
IOBB 
.BB 
	WriteLineBB 
(BB 
$strBB '
+BB( )
resultBB* 0
)BB0 1
;BB1 2
}CC 
breakDD 
;DD 
}EE 	
}FF 
privateII 
voidII 
GoodB2GII 
(II 
)II 
{JJ 
ulongKK 
dataKK 
;KK 
whileLL 
(LL 
trueLL 
)LL 
{MM 	
dataOO 
=OO 
IOOO 
.OO 
GetRandomULongOO $
(OO$ %
)OO% &
;OO& '
breakPP 
;PP 
}QQ 	
whileRR 
(RR 
trueRR 
)RR 
{SS 	
ifTT 
(TT 
dataTT 
<TT 
$numTT 
)TT 
{UU 
ifWW 
(WW 
dataWW 
>WW 
(WW 
ulongWW !
.WW! "
MinValueWW" *
/WW* +
$numWW+ ,
)WW, -
)WW- .
{XX 
ulongYY 
resultYY  
=YY! "
(YY# $
ulongYY$ )
)YY) *
(YY* +
dataYY+ /
*YY0 1
$numYY2 3
)YY3 4
;YY4 5
IOZZ 
.ZZ 
	WriteLineZZ  
(ZZ  !
$strZZ! +
+ZZ, -
resultZZ. 4
)ZZ4 5
;ZZ5 6
}[[ 
else\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^  
(^^  !
$str^^! U
)^^U V
;^^V W
}__ 
}`` 
breakaa 
;aa 
}bb 	
}cc 
publicee 

overrideee 
voidee 
Goodee 
(ee 
)ee 
{ff 
GoodG2Bgg 
(gg 
)gg 
;gg 
GoodB2Ghh 
(hh 
)hh 
;hh 
}ii 
}kk 
}ll Õ 
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_17.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_17 7
:8 9
AbstractTestCase: J
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data$$ 
=$$ 
IO$$ 
.$$ 
GetRandomULong$$  
($$  !
)$$! "
;$$" #
for%% 
(%% 
int%% 
j%% 
=%% 
$num%% 
;%% 
j%% 
<%% 
$num%% 
;%% 
j%%  
++%%  "
)%%" #
{&& 	
if'' 
('' 
data'' 
<'' 
$num'' 
)'' 
{(( 
ulong** 
result** 
=** 
(**  
ulong**  %
)**% &
(**& '
data**' +
***, -
$num**. /
)**/ 0
;**0 1
IO++ 
.++ 
	WriteLine++ 
(++ 
$str++ '
+++( )
result++* 0
)++0 1
;++1 2
},, 
}-- 	
}.. 
private22 
void22 
GoodG2B22 
(22 
)22 
{33 
ulong44 
data44 
;44 
data66 
=66 
$num66 
;66 
for77 
(77 
int77 
j77 
=77 
$num77 
;77 
j77 
<77 
$num77 
;77 
j77  
++77  "
)77" #
{88 	
if99 
(99 
data99 
<99 
$num99 
)99 
{:: 
ulong<< 
result<< 
=<< 
(<<  
ulong<<  %
)<<% &
(<<& '
data<<' +
*<<, -
$num<<. /
)<</ 0
;<<0 1
IO== 
.== 
	WriteLine== 
(== 
$str== '
+==( )
result==* 0
)==0 1
;==1 2
}>> 
}?? 	
}@@ 
privateCC 
voidCC 
GoodB2GCC 
(CC 
)CC 
{DD 
ulongEE 
dataEE 
;EE 
dataGG 
=GG 
IOGG 
.GG 
GetRandomULongGG  
(GG  !
)GG! "
;GG" #
forHH 
(HH 
intHH 
kHH 
=HH 
$numHH 
;HH 
kHH 
<HH 
$numHH 
;HH 
kHH  
++HH  "
)HH" #
{II 	
ifJJ 
(JJ 
dataJJ 
<JJ 
$numJJ 
)JJ 
{KK 
ifMM 
(MM 
dataMM 
>MM 
(MM 
ulongMM !
.MM! "
MinValueMM" *
/MM* +
$numMM+ ,
)MM, -
)MM- .
{NN 
ulongOO 
resultOO  
=OO! "
(OO# $
ulongOO$ )
)OO) *
(OO* +
dataOO+ /
*OO0 1
$numOO2 3
)OO3 4
;OO4 5
IOPP 
.PP 
	WriteLinePP  
(PP  !
$strPP! +
+PP, -
resultPP. 4
)PP4 5
;PP5 6
}QQ 
elseRR 
{SS 
IOTT 
.TT 
	WriteLineTT  
(TT  !
$strTT! U
)TTU V
;TTV W
}UU 
}VV 
}WW 	
}XX 
publicZZ 

overrideZZ 
voidZZ 
GoodZZ 
(ZZ 
)ZZ 
{[[ 
GoodG2B\\ 
(\\ 
)\\ 
;\\ 
GoodB2G]] 
(]] 
)]] 
;]] 
}^^ 
}`` 
}aa Í7
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_21.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_21 7
:8 9
AbstractTestCase: J
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public 

override 
void 
Bad 
( 
) 
{   
ulong!! 
data!! 
;!! 
data## 
=## 
IO## 
.## 
GetRandomULong##  
(##  !
)##! "
;##" #

badPrivate$$ 
=$$ 
true$$ 
;$$ 
BadSink%% 
(%% 
data%% 
)%% 
;%% 
}&& 
private(( 
void(( 
BadSink(( 
((( 
ulong(( 
data(( #
)(($ %
{)) 
if** 

(** 

badPrivate** 
)** 
{++ 	
if,, 
(,, 
data,, 
<,, 
$num,, 
),, 
{-- 
ulong// 
result// 
=// 
(//  
ulong//  %
)//% &
(//& '
data//' +
*//, -
$num//. /
)/// 0
;//0 1
IO00 
.00 
	WriteLine00 
(00 
$str00 '
+00( )
result00* 0
)000 1
;001 2
}11 
}22 	
}33 
private66 
bool66 
goodB2G1Private66  
=66! "
false66# (
;66( )
private77 
bool77 
goodB2G2Private77  
=77! "
false77# (
;77( )
private88 
bool88 
goodG2BPrivate88 
=88  !
false88" '
;88' (
public:: 

override:: 
void:: 
Good:: 
(:: 
):: 
{;; 
GoodB2G1<< 
(<< 
)<< 
;<< 
GoodB2G2== 
(== 
)== 
;== 
GoodG2B>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodB2G1BB 
(BB 
)BB 
{CC 
ulongDD 
dataDD 
;DD 
dataFF 
=FF 
IOFF 
.FF 
GetRandomULongFF  
(FF  !
)FF! "
;FF" #
goodB2G1PrivateGG 
=GG 
falseGG 
;GG  
GoodB2G1SinkHH 
(HH 
dataHH 
)HH 
;HH 
}II 
privateKK 
voidKK 
GoodB2G1SinkKK 
(KK 
ulongKK #
dataKK$ (
)KK) *
{LL 
ifMM 

(MM 
goodB2G1PrivateMM 
)MM 
{NN 	
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP /
)PP/ 0
;PP0 1
}QQ 	
elseRR 
{SS 	
ifTT 
(TT 
dataTT 
<TT 
$numTT 
)TT 
{UU 
ifWW 
(WW 
dataWW 
>WW 
(WW 
ulongWW !
.WW! "
MinValueWW" *
/WW* +
$numWW+ ,
)WW, -
)WW- .
{XX 
ulongYY 
resultYY  
=YY! "
(YY# $
ulongYY$ )
)YY) *
(YY* +
dataYY+ /
*YY0 1
$numYY2 3
)YY3 4
;YY4 5
IOZZ 
.ZZ 
	WriteLineZZ  
(ZZ  !
$strZZ! +
+ZZ, -
resultZZ. 4
)ZZ4 5
;ZZ5 6
}[[ 
else\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^  
(^^  !
$str^^! U
)^^U V
;^^V W
}__ 
}`` 
}aa 	
}bb 
privateee 
voidee 
GoodB2G2ee 
(ee 
)ee 
{ff 
ulonggg 
datagg 
;gg 
dataii 
=ii 
IOii 
.ii 
GetRandomULongii  
(ii  !
)ii! "
;ii" #
goodB2G2Privatejj 
=jj 
truejj 
;jj 
GoodB2G2Sinkkk 
(kk 
datakk 
)kk 
;kk 
}ll 
privatenn 
voidnn 
GoodB2G2Sinknn 
(nn 
ulongnn #
datann$ (
)nn) *
{oo 
ifpp 

(pp 
goodB2G2Privatepp 
)pp 
{qq 	
ifrr 
(rr 
datarr 
<rr 
$numrr 
)rr 
{ss 
ifuu 
(uu 
datauu 
>uu 
(uu 
ulonguu !
.uu! "
MinValueuu" *
/uu* +
$numuu+ ,
)uu, -
)uu- .
{vv 
ulongww 
resultww  
=ww! "
(ww# $
ulongww$ )
)ww) *
(ww* +
dataww+ /
*ww0 1
$numww2 3
)ww3 4
;ww4 5
IOxx 
.xx 
	WriteLinexx  
(xx  !
$strxx! +
+xx, -
resultxx. 4
)xx4 5
;xx5 6
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine||  
(||  !
$str||! U
)||U V
;||V W
}}} 
}~~ 
} 	
}
ÄÄ 
private
ÉÉ 
void
ÉÉ 
GoodG2B
ÉÉ 
(
ÉÉ 
)
ÉÉ 
{
ÑÑ 
ulong
ÖÖ 
data
ÖÖ 
;
ÖÖ 
data
áá 
=
áá 
$num
áá 
;
áá 
goodG2BPrivate
àà 
=
àà 
true
àà 
;
àà 
GoodG2BSink
ââ 
(
ââ 
data
ââ 
)
ââ 
;
ââ 
}
ää 
private
åå 
void
åå 
GoodG2BSink
åå 
(
åå 
ulong
åå "
data
åå# '
)
åå( )
{
çç 
if
éé 

(
éé 
goodG2BPrivate
éé 
)
éé 
{
èè 	
if
êê 
(
êê 
data
êê 
<
êê 
$num
êê 
)
êê 
{
ëë 
ulong
ìì 
result
ìì 
=
ìì 
(
ìì  
ulong
ìì  %
)
ìì% &
(
ìì& '
data
ìì' +
*
ìì, -
$num
ìì. /
)
ìì/ 0
;
ìì0 1
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî '
+
îî( )
result
îî* 0
)
îî0 1
;
îî1 2
}
ïï 
}
ññ 	
}
óó 
}ôô 
}öö ≈
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_22a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_22a 8
:9 :
AbstractTestCase; K
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
= 
$num 
; 
data!! 
=!! 
IO!! 
.!! 
GetRandomULong!!  
(!!  !
)!!! "
;!!" #
badPublicStatic"" 
="" 
true"" 
;"" >
2CWE191_Integer_Underflow__UInt64_rand_multiply_22b## :
.##: ;
BadSink##; B
(##B C
data##C G
)##H I
;##I J
}$$ 
public'' 

static'' 
bool''  
goodB2G1PublicStatic'' +
='', -
false''. 3
;''3 4
public(( 

static(( 
bool((  
goodB2G2PublicStatic(( +
=((, -
false((. 3
;((3 4
public)) 

static)) 
bool)) 
goodG2BPublicStatic)) *
=))+ ,
false))- 2
;))2 3
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodB2G1-- 
(-- 
)-- 
;-- 
GoodB2G2.. 
(.. 
).. 
;.. 
GoodG2B// 
(// 
)// 
;// 
}00 
private33 
void33 
GoodB2G133 
(33 
)33 
{44 
ulong55 
data55 
=55 
$num55 
;55 
data77 
=77 
IO77 
.77 
GetRandomULong77  
(77  !
)77! "
;77" # 
goodB2G1PublicStatic88 
=88 
false88 $
;88$ %>
2CWE191_Integer_Underflow__UInt64_rand_multiply_22b99 :
.99: ;
GoodB2G1Sink99; G
(99G H
data99H L
)99M N
;99N O
}:: 
private== 
void== 
GoodB2G2== 
(== 
)== 
{>> 
ulong?? 
data?? 
=?? 
$num?? 
;?? 
dataAA 
=AA 
IOAA 
.AA 
GetRandomULongAA  
(AA  !
)AA! "
;AA" # 
goodB2G2PublicStaticBB 
=BB 
trueBB #
;BB# $>
2CWE191_Integer_Underflow__UInt64_rand_multiply_22bCC :
.CC: ;
GoodB2G2SinkCC; G
(CCG H
dataCCH L
)CCM N
;CCN O
}DD 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
ulongII 
dataII 
=II 
$numII 
;II 
dataKK 
=KK 
$numKK 
;KK 
goodG2BPublicStaticLL 
=LL 
trueLL "
;LL" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_22bMM :
.MM: ;
GoodG2BSinkMM; F
(MMF G
dataMMG K
)MML M
;MMM N
}NN 
}PP 
}QQ •'
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_22b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_22b 8
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 
if 

( >
2CWE191_Integer_Underflow__UInt64_rand_multiply_22a >
.> ?
badPublicStatic? N
)N O
{ 	
if   
(   
data   
<   
$num   
)   
{!! 
ulong## 
result## 
=## 
(##  
ulong##  %
)##% &
(##& '
data##' +
*##, -
$num##. /
)##/ 0
;##0 1
IO$$ 
.$$ 
	WriteLine$$ 
($$ 
$str$$ '
+$$( )
result$$* 0
)$$0 1
;$$1 2
}%% 
}&& 	
else'' 
{(( 	
data++ 
=++ 
$num++ 
;++ 
},, 	
}-- 
public22 

static22 
void22 
GoodB2G1Sink22 #
(22# $
ulong22$ )
data22* .
)22/ 0
{33 
if44 

(44 >
2CWE191_Integer_Underflow__UInt64_rand_multiply_22a44 >
.44> ? 
goodB2G1PublicStatic44? S
)44S T
{55 	
data88 
=88 
$num88 
;88 
}99 	
else:: 
{;; 	
if<< 
(<< 
data<< 
<<< 
$num<< 
)<< 
{== 
if?? 
(?? 
data?? 
>?? 
(?? 
ulong?? !
.??! "
MinValue??" *
/??* +
$num??+ ,
)??, -
)??- .
{@@ 
ulongAA 
resultAA  
=AA! "
(AA# $
ulongAA$ )
)AA) *
(AA* +
dataAA+ /
*AA0 1
$numAA2 3
)AA3 4
;AA4 5
IOBB 
.BB 
	WriteLineBB  
(BB  !
$strBB! +
+BB, -
resultBB. 4
)BB4 5
;BB5 6
}CC 
elseDD 
{EE 
IOFF 
.FF 
	WriteLineFF  
(FF  !
$strFF! U
)FFU V
;FFV W
}GG 
}HH 
}II 	
}JJ 
publicMM 

staticMM 
voidMM 
GoodB2G2SinkMM #
(MM# $
ulongMM$ )
dataMM* .
)MM/ 0
{NN 
ifOO 

(OO >
2CWE191_Integer_Underflow__UInt64_rand_multiply_22aOO >
.OO> ? 
goodB2G2PublicStaticOO? S
)OOS T
{PP 	
ifQQ 
(QQ 
dataQQ 
<QQ 
$numQQ 
)QQ 
{RR 
ifTT 
(TT 
dataTT 
>TT 
(TT 
ulongTT !
.TT! "
MinValueTT" *
/TT* +
$numTT+ ,
)TT, -
)TT- .
{UU 
ulongVV 
resultVV  
=VV! "
(VV# $
ulongVV$ )
)VV) *
(VV* +
dataVV+ /
*VV0 1
$numVV2 3
)VV3 4
;VV4 5
IOWW 
.WW 
	WriteLineWW  
(WW  !
$strWW! +
+WW, -
resultWW. 4
)WW4 5
;WW5 6
}XX 
elseYY 
{ZZ 
IO[[ 
.[[ 
	WriteLine[[  
([[  !
$str[[! U
)[[U V
;[[V W
}\\ 
}]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
}ee 
publichh 

statichh 
voidhh 
GoodG2BSinkhh "
(hh" #
ulonghh# (
datahh) -
)hh. /
{ii 
ifjj 

(jj >
2CWE191_Integer_Underflow__UInt64_rand_multiply_22ajj >
.jj> ?
goodG2BPublicStaticjj? R
)jjR S
{kk 	
ifll 
(ll 
datall 
<ll 
$numll 
)ll 
{mm 
ulongoo 
resultoo 
=oo 
(oo  
ulongoo  %
)oo% &
(oo& '
dataoo' +
*oo, -
$numoo. /
)oo/ 0
;oo0 1
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp '
+pp( )
resultpp* 0
)pp0 1
;pp1 2
}qq 
}rr 	
elsess 
{tt 	
dataww 
=ww 
$numww 
;ww 
}xx 	
}yy 
}{{ 
}|| ï!
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_31.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_31 7
:8 9
AbstractTestCase: J
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
dataCopy 
; 
{ 	
ulong   
data   
;   
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
dataCopy## 
=## 
data## 
;## 
}$$ 	
{%% 	
ulong&& 
data&& 
=&& 
dataCopy&& !
;&&! "
if'' 
('' 
data'' 
<'' 
$num'' 
)'' 
{(( 
ulong** 
result** 
=** 
(**  
ulong**  %
)**% &
(**& '
data**' +
***, -
$num**. /
)**/ 0
;**0 1
IO++ 
.++ 
	WriteLine++ 
(++ 
$str++ '
+++( )
result++* 0
)++0 1
;++1 2
},, 
}-- 	
}.. 
public11 

override11 
void11 
Good11 
(11 
)11 
{22 
GoodG2B33 
(33 
)33 
;33 
GoodB2G44 
(44 
)44 
;44 
}55 
private88 
void88 
GoodG2B88 
(88 
)88 
{99 
ulong:: 
dataCopy:: 
;:: 
{;; 	
ulong<< 
data<< 
;<< 
data>> 
=>> 
$num>> 
;>> 
dataCopy?? 
=?? 
data?? 
;?? 
}@@ 	
{AA 	
ulongBB 
dataBB 
=BB 
dataCopyBB !
;BB! "
ifCC 
(CC 
dataCC 
<CC 
$numCC 
)CC 
{DD 
ulongFF 
resultFF 
=FF 
(FF  
ulongFF  %
)FF% &
(FF& '
dataFF' +
*FF, -
$numFF. /
)FF/ 0
;FF0 1
IOGG 
.GG 
	WriteLineGG 
(GG 
$strGG '
+GG( )
resultGG* 0
)GG0 1
;GG1 2
}HH 
}II 	
}JJ 
privateMM 
voidMM 
GoodB2GMM 
(MM 
)MM 
{NN 
ulongOO 
dataCopyOO 
;OO 
{PP 	
ulongQQ 
dataQQ 
;QQ 
dataSS 
=SS 
IOSS 
.SS 
GetRandomULongSS $
(SS$ %
)SS% &
;SS& '
dataCopyTT 
=TT 
dataTT 
;TT 
}UU 	
{VV 	
ulongWW 
dataWW 
=WW 
dataCopyWW !
;WW! "
ifXX 
(XX 
dataXX 
<XX 
$numXX 
)XX 
{YY 
if[[ 
([[ 
data[[ 
>[[ 
([[ 
ulong[[ !
.[[! "
MinValue[[" *
/[[* +
$num[[+ ,
)[[, -
)[[- .
{\\ 
ulong]] 
result]]  
=]]! "
(]]# $
ulong]]$ )
)]]) *
(]]* +
data]]+ /
*]]0 1
$num]]2 3
)]]3 4
;]]4 5
IO^^ 
.^^ 
	WriteLine^^  
(^^  !
$str^^! +
+^^, -
result^^. 4
)^^4 5
;^^5 6
}__ 
else`` 
{aa 
IObb 
.bb 
	WriteLinebb  
(bb  !
$strbb! U
)bbU V
;bbV W
}cc 
}dd 
}ee 	
}ff 
}hh 
}ii £!
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_41.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_41 7
:8 9
AbstractTestCase: J
{ 
private 
static 
void 
BadSink 
(  
ulong  %
data& *
)+ ,
{ 
if 

(
 
data 
< 
$num 
) 
{ 	
ulong!! 
result!! 
=!! 
(!! 
ulong!! !
)!!! "
(!!" #
data!!# '
*!!( )
$num!!* +
)!!+ ,
;!!, -
IO"" 
."" 
	WriteLine"" 
("" 
$str"" #
+""$ %
result""& ,
)"", -
;""- .
}## 	
}$$ 
public&& 

override&& 
void&& 
Bad&& 
(&& 
)&& 
{'' 
ulong(( 
data(( 
;(( 
data** 
=** 
IO** 
.** 
GetRandomULong**  
(**  !
)**! "
;**" #
BadSink++ 
(++ 
data++ 
)++ 
;++ 
},, 
public// 

override// 
void// 
Good// 
(// 
)// 
{00 
GoodG2B11 
(11 
)11 
;11 
GoodB2G22 
(22 
)22 
;22 
}33 
private55 
static55 
void55 
GoodG2BSink55 #
(55# $
ulong55$ )
data55* .
)55/ 0
{66 
if77 

(77
 
data77 
<77 
$num77 
)77 
{88 	
ulong:: 
result:: 
=:: 
(:: 
ulong:: !
)::! "
(::" #
data::# '
*::( )
$num::* +
)::+ ,
;::, -
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; #
+;;$ %
result;;& ,
);;, -
;;;- .
}<< 	
}== 
private@@ 
static@@ 
void@@ 
GoodG2B@@ 
(@@  
)@@  !
{AA 
ulongBB 
dataBB 
;BB 
dataDD 
=DD 
$numDD 
;DD 
GoodG2BSinkEE 
(EE 
dataEE 
)EE 
;EE 
}FF 
privateHH 
staticHH 
voidHH 
GoodB2GSinkHH #
(HH# $
ulongHH$ )
dataHH* .
)HH/ 0
{II 
ifJJ 

(JJ
 
dataJJ 
<JJ 
$numJJ 
)JJ 
{KK 	
ifMM 
(MM 
dataMM 
>MM 
(MM 
ulongMM 
.MM 
MinValueMM &
/MM& '
$numMM' (
)MM( )
)MM) *
{NN 
ulongOO 
resultOO 
=OO 
(OO  
ulongOO  %
)OO% &
(OO& '
dataOO' +
*OO, -
$numOO. /
)OO/ 0
;OO0 1
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP '
+PP( )
resultPP* 0
)PP0 1
;PP1 2
}QQ 
elseRR 
{SS 
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT Q
)TTQ R
;TTR S
}UU 
}VV 	
}WW 
privateZZ 
staticZZ 
voidZZ 
GoodB2GZZ 
(ZZ  
)ZZ  !
{[[ 
ulong\\ 
data\\ 
;\\ 
data^^ 
=^^ 
IO^^ 
.^^ 
GetRandomULong^^  
(^^  !
)^^! "
;^^" #
GoodB2GSink__ 
(__ 
data__ 
)__ 
;__ 
}`` 
}bb 
}cc »"
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_42.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_42 7
:8 9
AbstractTestCase: J
{ 
private 
static 
ulong 
	BadSource "
(" #
)# $
{ 
ulong 
data 
; 
data   
=   
IO   
.   
GetRandomULong    
(    !
)  ! "
;  " #
return!! 
data!! 
;!! 
}"" 
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
ulong&& 
data&& 
=&& 
	BadSource&& 
(&& 
)&&  
;&&  !
if'' 

(''
 
data'' 
<'' 
$num'' 
)'' 
{(( 	
ulong** 
result** 
=** 
(** 
ulong** !
)**! "
(**" #
data**# '
***( )
$num*** +
)**+ ,
;**, -
IO++ 
.++ 
	WriteLine++ 
(++ 
$str++ #
+++$ %
result++& ,
)++, -
;++- .
},, 	
}-- 
private11 
static11 
ulong11 
GoodG2BSource11 &
(11& '
)11' (
{22 
ulong33 
data33 
;33 
data55 
=55 
$num55 
;55 
return66 
data66 
;66 
}77 
private99 
static99 
void99 
GoodG2B99 
(99  
)99  !
{:: 
ulong;; 
data;; 
=;; 
GoodG2BSource;; "
(;;" #
);;# $
;;;$ %
if<< 

(<<
 
data<< 
<<< 
$num<< 
)<< 
{== 	
ulong?? 
result?? 
=?? 
(?? 
ulong?? !
)??! "
(??" #
data??# '
*??( )
$num??* +
)??+ ,
;??, -
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ #
+@@$ %
result@@& ,
)@@, -
;@@- .
}AA 	
}BB 
privateEE 
staticEE 
ulongEE 
GoodB2GSourceEE &
(EE& '
)EE' (
{FF 
ulongGG 
dataGG 
;GG 
dataII 
=II 
IOII 
.II 
GetRandomULongII  
(II  !
)II! "
;II" #
returnJJ 
dataJJ 
;JJ 
}KK 
privateMM 
staticMM 
voidMM 
GoodB2GMM 
(MM  
)MM  !
{NN 
ulongOO 
dataOO 
=OO 
GoodB2GSourceOO "
(OO" #
)OO# $
;OO$ %
ifPP 

(PP
 
dataPP 
<PP 
$numPP 
)PP 
{QQ 	
ifSS 
(SS 
dataSS 
>SS 
(SS 
ulongSS 
.SS 
MinValueSS &
/SS& '
$numSS' (
)SS( )
)SS) *
{TT 
ulongUU 
resultUU 
=UU 
(UU  
ulongUU  %
)UU% &
(UU& '
dataUU' +
*UU, -
$numUU. /
)UU/ 0
;UU0 1
IOVV 
.VV 
	WriteLineVV 
(VV 
$strVV '
+VV( )
resultVV* 0
)VV0 1
;VV1 2
}WW 
elseXX 
{YY 
IOZZ 
.ZZ 
	WriteLineZZ 
(ZZ 
$strZZ Q
)ZZQ R
;ZZR S
}[[ 
}\\ 	
}]] 
public__ 

override__ 
void__ 
Good__ 
(__ 
)__ 
{`` 
GoodG2Baa 
(aa 
)aa 
;aa 
GoodB2Gbb 
(bb 
)bb 
;bb 
}cc 
}ee 
}ff Ì$
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_45.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class =
1CWE191_Integer_Underflow__UInt64_rand_multiply_45 7
:8 9
AbstractTestCase: J
{ 
private 
ulong 
dataBad 
; 
private 
ulong 
dataGoodG2B 
; 
private 
ulong 
dataGoodB2G 
; 
private   
void   
BadSink   
(   
)   
{!! 
ulong"" 
data"" 
="" 
dataBad"" 
;"" 
if## 

(##
 
data## 
<## 
$num## 
)## 
{$$ 	
ulong&& 
result&& 
=&& 
(&& 
ulong&& !
)&&! "
(&&" #
data&&# '
*&&( )
$num&&* +
)&&+ ,
;&&, -
IO'' 
.'' 
	WriteLine'' 
('' 
$str'' #
+''$ %
result''& ,
)'', -
;''- .
}(( 	
})) 
public++ 

override++ 
void++ 
Bad++ 
(++ 
)++ 
{,, 
ulong-- 
data-- 
;-- 
data// 
=// 
IO// 
.// 
GetRandomULong//  
(//  !
)//! "
;//" #
dataBad00 
=00 
data00 
;00 
BadSink11 
(11 
)11 
;11 
}22 
public55 

override55 
void55 
Good55 
(55 
)55 
{66 
GoodG2B77 
(77 
)77 
;77 
GoodB2G88 
(88 
)88 
;88 
}99 
private;; 
void;; 
GoodG2BSink;; 
(;; 
);; 
{<< 
ulong== 
data== 
=== 
dataGoodG2B==  
;==  !
if>> 

(>>
 
data>> 
<>> 
$num>> 
)>> 
{?? 	
ulongAA 
resultAA 
=AA 
(AA 
ulongAA !
)AA! "
(AA" #
dataAA# '
*AA( )
$numAA* +
)AA+ ,
;AA, -
IOBB 
.BB 
	WriteLineBB 
(BB 
$strBB #
+BB$ %
resultBB& ,
)BB, -
;BB- .
}CC 	
}DD 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
ulongII 
dataII 
;II 
dataKK 
=KK 
$numKK 
;KK 
dataGoodG2BLL 
=LL 
dataLL 
;LL 
GoodG2BSinkMM 
(MM 
)MM 
;MM 
}NN 
privatePP 
voidPP 
GoodB2GSinkPP 
(PP 
)PP 
{QQ 
ulongRR 
dataRR 
=RR 
dataGoodB2GRR  
;RR  !
ifSS 

(SS
 
dataSS 
<SS 
$numSS 
)SS 
{TT 	
ifVV 
(VV 
dataVV 
>VV 
(VV 
ulongVV 
.VV 
MinValueVV &
/VV& '
$numVV' (
)VV( )
)VV) *
{WW 
ulongXX 
resultXX 
=XX 
(XX  
ulongXX  %
)XX% &
(XX& '
dataXX' +
*XX, -
$numXX. /
)XX/ 0
;XX0 1
IOYY 
.YY 
	WriteLineYY 
(YY 
$strYY '
+YY( )
resultYY* 0
)YY0 1
;YY1 2
}ZZ 
else[[ 
{\\ 
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] Q
)]]Q R
;]]R S
}^^ 
}__ 	
}`` 
privatecc 
voidcc 
GoodB2Gcc 
(cc 
)cc 
{dd 
ulongee 
dataee 
;ee 
datagg 
=gg 
IOgg 
.gg 
GetRandomULonggg  
(gg  !
)gg! "
;gg" #
dataGoodB2Ghh 
=hh 
datahh 
;hh 
GoodB2GSinkii 
(ii 
)ii 
;ii 
}jj 
}ll 
}mm ¨
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_51a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_51a 8
:9 :
AbstractTestCase; K
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_51b :
.: ;
BadSink; B
(B C
dataC G
)I J
;J K
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
ulong,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. >
2CWE191_Integer_Underflow__UInt64_rand_multiply_51b// :
.//: ;
GoodG2BSink//; F
(//F G
data//G K
)//M N
;//N O
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
ulong55 
data55 
;55 
data77 
=77 
IO77 
.77 
GetRandomULong77  
(77  !
)77! "
;77" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_51b88 :
.88: ;
GoodB2GSink88; F
(88F G
data88G K
)88M N
;88N O
}99 
};; 
}<< “
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_51b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_51b 8
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 
if 

(
 
data 
< 
$num 
) 
{ 	
ulong!! 
result!! 
=!! 
(!! 
ulong!! !
)!!! "
(!!" #
data!!# '
*!!( )
$num!!* +
)!!+ ,
;!!, -
IO"" 
."" 
	WriteLine"" 
("" 
$str"" #
+""$ %
result""& ,
)"", -
;""- .
}## 	
}$$ 
public)) 

static)) 
void)) 
GoodG2BSink)) "
())" #
ulong))# (
data))) -
))). /
{** 
if++ 

(++
 
data++ 
<++ 
$num++ 
)++ 
{,, 	
ulong.. 
result.. 
=.. 
(.. 
ulong.. !
)..! "
(.." #
data..# '
*..( )
$num..* +
)..+ ,
;.., -
IO// 
.// 
	WriteLine// 
(// 
$str// #
+//$ %
result//& ,
)//, -
;//- .
}00 	
}11 
public44 

static44 
void44 
GoodB2GSink44 "
(44" #
ulong44# (
data44) -
)44. /
{55 
if66 

(66
 
data66 
<66 
$num66 
)66 
{77 	
if99 
(99 
data99 
>99 
(99 
ulong99 
.99 
MinValue99 &
/99& '
$num99' (
)99( )
)99) *
{:: 
ulong;; 
result;; 
=;; 
(;;  
ulong;;  %
);;% &
(;;& '
data;;' +
*;;, -
$num;;. /
);;/ 0
;;;0 1
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< '
+<<( )
result<<* 0
)<<0 1
;<<1 2
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ Q
)@@Q R
;@@R S
}AA 
}BB 	
}CC 
}EE 
}FF ¨
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_52a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_52a 8
:9 :
AbstractTestCase; K
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_52b :
.: ;
BadSink; B
(B C
dataC G
)H I
;I J
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
ulong,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. >
2CWE191_Integer_Underflow__UInt64_rand_multiply_52b// :
.//: ;
GoodG2BSink//; F
(//F G
data//G K
)//L M
;//M N
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
ulong55 
data55 
;55 
data77 
=77 
IO77 
.77 
GetRandomULong77  
(77  !
)77! "
;77" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_52b88 :
.88: ;
GoodB2GSink88; F
(88F G
data88G K
)88L M
;88M N
}99 
};; 
}<< †
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_52b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_52b 8
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_52c :
.: ;
BadSink; B
(B C
dataC G
)H I
;I J
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
ulong$$# (
data$$) -
)$$. /
{%% >
2CWE191_Integer_Underflow__UInt64_rand_multiply_52c&& :
.&&: ;
GoodG2BSink&&; F
(&&F G
data&&G K
)&&L M
;&&M N
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
ulong**# (
data**) -
)**. /
{++ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_52c,, :
.,,: ;
GoodB2GSink,,; F
(,,F G
data,,G K
),,L M
;,,M N
}-- 
}// 
}00 “
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_52c.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_52c 8
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 
if 

(
 
data 
< 
$num 
) 
{ 	
ulong!! 
result!! 
=!! 
(!! 
ulong!! !
)!!! "
(!!" #
data!!# '
*!!( )
$num!!* +
)!!+ ,
;!!, -
IO"" 
."" 
	WriteLine"" 
("" 
$str"" #
+""$ %
result""& ,
)"", -
;""- .
}## 	
}$$ 
public)) 

static)) 
void)) 
GoodG2BSink)) "
())" #
ulong))# (
data))) -
))). /
{** 
if++ 

(++
 
data++ 
<++ 
$num++ 
)++ 
{,, 	
ulong.. 
result.. 
=.. 
(.. 
ulong.. !
)..! "
(.." #
data..# '
*..( )
$num..* +
)..+ ,
;.., -
IO// 
.// 
	WriteLine// 
(// 
$str// #
+//$ %
result//& ,
)//, -
;//- .
}00 	
}11 
public44 

static44 
void44 
GoodB2GSink44 "
(44" #
ulong44# (
data44) -
)44. /
{55 
if66 

(66
 
data66 
<66 
$num66 
)66 
{77 	
if99 
(99 
data99 
>99 
(99 
ulong99 
.99 
MinValue99 &
/99& '
$num99' (
)99( )
)99) *
{:: 
ulong;; 
result;; 
=;; 
(;;  
ulong;;  %
);;% &
(;;& '
data;;' +
*;;, -
$num;;. /
);;/ 0
;;;0 1
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< '
+<<( )
result<<* 0
)<<0 1
;<<1 2
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ Q
)@@Q R
;@@R S
}AA 
}BB 	
}CC 
}EE 
}FF ¨
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_53a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_53a 8
:9 :
AbstractTestCase; K
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_53b :
.: ;
BadSink; B
(B C
dataC G
)H I
;I J
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
ulong,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. >
2CWE191_Integer_Underflow__UInt64_rand_multiply_53b// :
.//: ;
GoodG2BSink//; F
(//F G
data//G K
)//L M
;//M N
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
ulong55 
data55 
;55 
data77 
=77 
IO77 
.77 
GetRandomULong77  
(77  !
)77! "
;77" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_53b88 :
.88: ;
GoodB2GSink88; F
(88F G
data88G K
)88L M
;88M N
}99 
};; 
}<< †
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_53b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_53b 8
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_53c :
.: ;
BadSink; B
(B C
dataC G
)H I
;I J
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
ulong$$# (
data$$) -
)$$. /
{%% >
2CWE191_Integer_Underflow__UInt64_rand_multiply_53c&& :
.&&: ;
GoodG2BSink&&; F
(&&F G
data&&G K
)&&L M
;&&M N
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
ulong**# (
data**) -
)**. /
{++ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_53c,, :
.,,: ;
GoodB2GSink,,; F
(,,F G
data,,G K
),,L M
;,,M N
}-- 
}// 
}00 †
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_53c.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_53c 8
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_53d :
.: ;
BadSink; B
(B C
dataC G
)H I
;I J
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
ulong$$# (
data$$) -
)$$. /
{%% >
2CWE191_Integer_Underflow__UInt64_rand_multiply_53d&& :
.&&: ;
GoodG2BSink&&; F
(&&F G
data&&G K
)&&L M
;&&M N
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
ulong**# (
data**) -
)**. /
{++ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_53d,, :
.,,: ;
GoodB2GSink,,; F
(,,F G
data,,G K
),,L M
;,,M N
}-- 
}// 
}00 “
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_53d.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_53d 8
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 
if 

(
 
data 
< 
$num 
) 
{ 	
ulong!! 
result!! 
=!! 
(!! 
ulong!! !
)!!! "
(!!" #
data!!# '
*!!( )
$num!!* +
)!!+ ,
;!!, -
IO"" 
."" 
	WriteLine"" 
("" 
$str"" #
+""$ %
result""& ,
)"", -
;""- .
}## 	
}$$ 
public)) 

static)) 
void)) 
GoodG2BSink)) "
())" #
ulong))# (
data))) -
))). /
{** 
if++ 

(++
 
data++ 
<++ 
$num++ 
)++ 
{,, 	
ulong.. 
result.. 
=.. 
(.. 
ulong.. !
)..! "
(.." #
data..# '
*..( )
$num..* +
)..+ ,
;.., -
IO// 
.// 
	WriteLine// 
(// 
$str// #
+//$ %
result//& ,
)//, -
;//- .
}00 	
}11 
public44 

static44 
void44 
GoodB2GSink44 "
(44" #
ulong44# (
data44) -
)44. /
{55 
if66 

(66
 
data66 
<66 
$num66 
)66 
{77 	
if99 
(99 
data99 
>99 
(99 
ulong99 
.99 
MinValue99 &
/99& '
$num99' (
)99( )
)99) *
{:: 
ulong;; 
result;; 
=;; 
(;;  
ulong;;  %
);;% &
(;;& '
data;;' +
*;;, -
$num;;. /
);;/ 0
;;;0 1
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< '
+<<( )
result<<* 0
)<<0 1
;<<1 2
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ Q
)@@Q R
;@@R S
}AA 
}BB 	
}CC 
}EE 
}FF ¨
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_54a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54a 8
:9 :
AbstractTestCase; K
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_54b :
.: ;
BadSink; B
(B C
dataC G
)H I
;I J
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
ulong,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54b// :
.//: ;
GoodG2BSink//; F
(//F G
data//G K
)//L M
;//M N
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
ulong55 
data55 
;55 
data77 
=77 
IO77 
.77 
GetRandomULong77  
(77  !
)77! "
;77" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_54b88 :
.88: ;
GoodB2GSink88; F
(88F G
data88G K
)88L M
;88M N
}99 
};; 
}<< †
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_54b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54b 8
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54c :
.: ;
BadSink; B
(B C
dataC G
)H I
;I J
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
ulong$$# (
data$$) -
)$$. /
{%% >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54c&& :
.&&: ;
GoodG2BSink&&; F
(&&F G
data&&G K
)&&L M
;&&M N
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
ulong**# (
data**) -
)**. /
{++ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54c,, :
.,,: ;
GoodB2GSink,,; F
(,,F G
data,,G K
),,L M
;,,M N
}-- 
}// 
}00 †
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_54c.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54c 8
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54d :
.: ;
BadSink; B
(B C
dataC G
)H I
;I J
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
ulong$$# (
data$$) -
)$$. /
{%% >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54d&& :
.&&: ;
GoodG2BSink&&; F
(&&F G
data&&G K
)&&L M
;&&M N
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
ulong**# (
data**) -
)**. /
{++ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54d,, :
.,,: ;
GoodB2GSink,,; F
(,,F G
data,,G K
),,L M
;,,M N
}-- 
}// 
}00 †
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_54d.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54d 8
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54e :
.: ;
BadSink; B
(B C
dataC G
)H I
;I J
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
ulong$$# (
data$$) -
)$$. /
{%% >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54e&& :
.&&: ;
GoodG2BSink&&; F
(&&F G
data&&G K
)&&L M
;&&M N
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
ulong**# (
data**) -
)**. /
{++ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54e,, :
.,,: ;
GoodB2GSink,,; F
(,,F G
data,,G K
),,L M
;,,M N
}-- 
}// 
}00 “
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_54e.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54e 8
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 
if 

(
 
data 
< 
$num 
) 
{ 	
ulong!! 
result!! 
=!! 
(!! 
ulong!! !
)!!! "
(!!" #
data!!# '
*!!( )
$num!!* +
)!!+ ,
;!!, -
IO"" 
."" 
	WriteLine"" 
("" 
$str"" #
+""$ %
result""& ,
)"", -
;""- .
}## 	
}$$ 
public)) 

static)) 
void)) 
GoodG2BSink)) "
())" #
ulong))# (
data))) -
))). /
{** 
if++ 

(++
 
data++ 
<++ 
$num++ 
)++ 
{,, 	
ulong.. 
result.. 
=.. 
(.. 
ulong.. !
)..! "
(.." #
data..# '
*..( )
$num..* +
)..+ ,
;.., -
IO// 
.// 
	WriteLine// 
(// 
$str// #
+//$ %
result//& ,
)//, -
;//- .
}00 	
}11 
public44 

static44 
void44 
GoodB2GSink44 "
(44" #
ulong44# (
data44) -
)44. /
{55 
if66 

(66
 
data66 
<66 
$num66 
)66 
{77 	
if99 
(99 
data99 
>99 
(99 
ulong99 
.99 
MinValue99 &
/99& '
$num99' (
)99( )
)99) *
{:: 
ulong;; 
result;; 
=;; 
(;;  
ulong;;  %
);;% &
(;;& '
data;;' +
*;;, -
$num;;. /
);;/ 0
;;;0 1
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< '
+<<( )
result<<* 0
)<<0 1
;<<1 2
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ Q
)@@Q R
;@@R S
}AA 
}BB 	
}CC 
}EE 
}FF Û
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_61a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_61a 8
:9 :
AbstractTestCase; K
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
= >
2CWE191_Integer_Underflow__UInt64_rand_multiply_61b G
.G H
	BadSourceH Q
(Q R
)R S
;S T
if 

(
 
data 
< 
$num 
) 
{   	
ulong"" 
result"" 
="" 
("" 
ulong"" !
)""! "
(""" #
data""# '
*""( )
$num""* +
)""+ ,
;"", -
IO## 
.## 
	WriteLine## 
(## 
$str## #
+##$ %
result##& ,
)##, -
;##- .
}$$ 	
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
ulong11 
data11 
=11 >
2CWE191_Integer_Underflow__UInt64_rand_multiply_61b11 G
.11G H
GoodG2BSource11H U
(11U V
)11V W
;11W X
if22 

(22
 
data22 
<22 
$num22 
)22 
{33 	
ulong55 
result55 
=55 
(55 
ulong55 !
)55! "
(55" #
data55# '
*55( )
$num55* +
)55+ ,
;55, -
IO66 
.66 
	WriteLine66 
(66 
$str66 #
+66$ %
result66& ,
)66, -
;66- .
}77 	
}88 
private;; 
static;; 
void;; 
GoodB2G;; 
(;;  
);;  !
{<< 
ulong== 
data== 
=== >
2CWE191_Integer_Underflow__UInt64_rand_multiply_61b== G
.==G H
GoodB2GSource==H U
(==U V
)==V W
;==W X
if>> 

(>>
 
data>> 
<>> 
$num>> 
)>> 
{?? 	
ifAA 
(AA 
dataAA 
>AA 
(AA 
ulongAA 
.AA 
MinValueAA &
/AA& '
$numAA' (
)AA( )
)AA) *
{BB 
ulongCC 
resultCC 
=CC 
(CC  
ulongCC  %
)CC% &
(CC& '
dataCC' +
*CC, -
$numCC. /
)CC/ 0
;CC0 1
IODD 
.DD 
	WriteLineDD 
(DD 
$strDD '
+DD( )
resultDD* 0
)DD0 1
;DD1 2
}EE 
elseFF 
{GG 
IOHH 
.HH 
	WriteLineHH 
(HH 
$strHH Q
)HHQ R
;HHR S
}II 
}JJ 	
}KK 
}MM 
}NN ÿ
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_61b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_61b 8
{ 
public 

static 
ulong 
	BadSource !
(! "
)" #
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #
return 
data 
; 
}   
public%% 

static%% 
ulong%% 
GoodG2BSource%% %
(%%% &
)%%& '
{&& 
ulong'' 
data'' 
;'' 
data)) 
=)) 
$num)) 
;)) 
return** 
data** 
;** 
}++ 
public.. 

static.. 
ulong.. 
GoodB2GSource.. %
(..% &
)..& '
{// 
ulong00 
data00 
;00 
data22 
=22 
IO22 
.22 
GetRandomULong22  
(22  !
)22! "
;22" #
return33 
data33 
;33 
}44 
}66 
}77 ˆ
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_66a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_66a 8
:9 :
AbstractTestCase; K
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #
ulong 
[ 
] 
	dataArray 
= 
new 
ulong  %
[% &
$num& '
]' (
;( )
	dataArray   
[   
$num   
]   
=   
data   
;   >
2CWE191_Integer_Underflow__UInt64_rand_multiply_66b!! :
.!!: ;
BadSink!!; B
(!!B C
	dataArray!!C L
)!!N O
;!!O P
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
GoodB2G(( 
((( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
),,  !
{-- 
ulong.. 
data.. 
;.. 
data00 
=00 
$num00 
;00 
ulong11 
[11 
]11 
	dataArray11 
=11 
new11 
ulong11  %
[11% &
$num11& '
]11' (
;11( )
	dataArray22 
[22 
$num22 
]22 
=22 
data22 
;22 >
2CWE191_Integer_Underflow__UInt64_rand_multiply_66b33 :
.33: ;
GoodG2BSink33; F
(33F G
	dataArray33G P
)33R S
;33S T
}44 
private77 
static77 
void77 
GoodB2G77 
(77  
)77  !
{88 
ulong99 
data99 
;99 
data;; 
=;; 
IO;; 
.;; 
GetRandomULong;;  
(;;  !
);;! "
;;;" #
ulong<< 
[<< 
]<< 
	dataArray<< 
=<< 
new<< 
ulong<<  %
[<<% &
$num<<& '
]<<' (
;<<( )
	dataArray== 
[== 
$num== 
]== 
=== 
data== 
;== >
2CWE191_Integer_Underflow__UInt64_rand_multiply_66b>> :
.>>: ;
GoodB2GSink>>; F
(>>F G
	dataArray>>G P
)>>R S
;>>S T
}?? 
}AA 
}BB Ÿ
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_66b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_66b 8
{ 
public 

static 
void 
BadSink 
( 
ulong $
[$ %
]% &
	dataArray' 0
)1 2
{ 
ulong 
data 
= 
	dataArray 
[ 
$num  
]  !
;! "
if 

(
 
data 
< 
$num 
) 
{   	
ulong"" 
result"" 
="" 
("" 
ulong"" !
)""! "
(""" #
data""# '
*""( )
$num""* +
)""+ ,
;"", -
IO## 
.## 
	WriteLine## 
(## 
$str## #
+##$ %
result##& ,
)##, -
;##- .
}$$ 	
}%% 
public** 

static** 
void** 
GoodG2BSink** "
(**" #
ulong**# (
[**( )
]**) *
	dataArray**+ 4
)**5 6
{++ 
ulong,, 
data,, 
=,, 
	dataArray,, 
[,, 
$num,,  
],,  !
;,,! "
if-- 

(--
 
data-- 
<-- 
$num-- 
)-- 
{.. 	
ulong00 
result00 
=00 
(00 
ulong00 !
)00! "
(00" #
data00# '
*00( )
$num00* +
)00+ ,
;00, -
IO11 
.11 
	WriteLine11 
(11 
$str11 #
+11$ %
result11& ,
)11, -
;11- .
}22 	
}33 
public66 

static66 
void66 
GoodB2GSink66 "
(66" #
ulong66# (
[66( )
]66) *
	dataArray66+ 4
)665 6
{77 
ulong88 
data88 
=88 
	dataArray88 
[88 
$num88  
]88  !
;88! "
if99 

(99
 
data99 
<99 
$num99 
)99 
{:: 	
if<< 
(<< 
data<< 
><< 
(<< 
ulong<< 
.<< 
MinValue<< &
/<<& '
$num<<' (
)<<( )
)<<) *
{== 
ulong>> 
result>> 
=>> 
(>>  
ulong>>  %
)>>% &
(>>& '
data>>' +
*>>, -
$num>>. /
)>>/ 0
;>>0 1
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? '
+??( )
result??* 0
)??0 1
;??1 2
}@@ 
elseAA 
{BB 
IOCC 
.CC 
	WriteLineCC 
(CC 
$strCC Q
)CCQ R
;CCR S
}DD 
}EE 	
}FF 
}HH 
}II π
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_67a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_67a 8
:9 :
AbstractTestCase; K
{ 
public 

class 
	Container 
{ 
public 
ulong 
containerOne !
;! "
} 
public 

override 
void 
Bad 
( 
) 
{   
ulong!! 
data!! 
;!! 
data## 
=## 
IO## 
.## 
GetRandomULong##  
(##  !
)##! "
;##" #
	Container$$ 
dataContainer$$ 
=$$  !
new$$" %
	Container$$& /
($$/ 0
)$$0 1
;$$1 2
dataContainer%% 
.%% 
containerOne%% "
=%%# $
data%%% )
;%%) *>
2CWE191_Integer_Underflow__UInt64_rand_multiply_67b&& :
.&&: ;
BadSink&&; B
(&&B C
dataContainer&&C P
)&&R S
;&&S T
}'' 
public** 

override** 
void** 
Good** 
(** 
)** 
{++ 
GoodG2B,, 
(,, 
),, 
;,, 
GoodB2G-- 
(-- 
)-- 
;-- 
}.. 
private11 
static11 
void11 
GoodG2B11 
(11  
)11  !
{22 
ulong33 
data33 
;33 
data55 
=55 
$num55 
;55 
	Container66 
dataContainer66 
=66  !
new66" %
	Container66& /
(66/ 0
)660 1
;661 2
dataContainer77 
.77 
containerOne77 "
=77# $
data77% )
;77) *>
2CWE191_Integer_Underflow__UInt64_rand_multiply_67b88 :
.88: ;
GoodG2BSink88; F
(88F G
dataContainer88G T
)88V W
;88W X
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
ulong>> 
data>> 
;>> 
data@@ 
=@@ 
IO@@ 
.@@ 
GetRandomULong@@  
(@@  !
)@@! "
;@@" #
	ContainerAA 
dataContainerAA 
=AA  !
newAA" %
	ContainerAA& /
(AA/ 0
)AA0 1
;AA1 2
dataContainerBB 
.BB 
containerOneBB "
=BB# $
dataBB% )
;BB) *>
2CWE191_Integer_Underflow__UInt64_rand_multiply_67bCC :
.CC: ;
GoodB2GSinkCC; F
(CCF G
dataContainerCCG T
)CCV W
;CCW X
}DD 
}FF 
}GG ˚
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_67b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_67b 8
{ 
public 

static 
void 
BadSink 
( >
2CWE191_Integer_Underflow__UInt64_rand_multiply_67a Q
.Q R
	ContainerR [
dataContainer\ i
)j k
{ 
ulong 
data 
= 
dataContainer "
." #
containerOne# /
;/ 0
if 

(
 
data 
< 
$num 
) 
{   	
ulong"" 
result"" 
="" 
("" 
ulong"" !
)""! "
(""" #
data""# '
*""( )
$num""* +
)""+ ,
;"", -
IO## 
.## 
	WriteLine## 
(## 
$str## #
+##$ %
result##& ,
)##, -
;##- .
}$$ 	
}%% 
public** 

static** 
void** 
GoodG2BSink** "
(**" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_67a**# U
.**U V
	Container**V _
dataContainer**` m
)**n o
{++ 
ulong,, 
data,, 
=,, 
dataContainer,, "
.,," #
containerOne,,# /
;,,/ 0
if-- 

(--
 
data-- 
<-- 
$num-- 
)-- 
{.. 	
ulong00 
result00 
=00 
(00 
ulong00 !
)00! "
(00" #
data00# '
*00( )
$num00* +
)00+ ,
;00, -
IO11 
.11 
	WriteLine11 
(11 
$str11 #
+11$ %
result11& ,
)11, -
;11- .
}22 	
}33 
public66 

static66 
void66 
GoodB2GSink66 "
(66" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_67a66# U
.66U V
	Container66V _
dataContainer66` m
)66n o
{77 
ulong88 
data88 
=88 
dataContainer88 "
.88" #
containerOne88# /
;88/ 0
if99 

(99
 
data99 
<99 
$num99 
)99 
{:: 	
if<< 
(<< 
data<< 
><< 
(<< 
ulong<< 
.<< 
MinValue<< &
/<<& '
$num<<' (
)<<( )
)<<) *
{== 
ulong>> 
result>> 
=>> 
(>>  
ulong>>  %
)>>% &
(>>& '
data>>' +
*>>, -
$num>>. /
)>>/ 0
;>>0 1
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? '
+??( )
result??* 0
)??0 1
;??1 2
}@@ 
elseAA 
{BB 
IOCC 
.CC 
	WriteLineCC 
(CC 
$strCC Q
)CCQ R
;CCR S
}DD 
}EE 	
}FF 
}HH 
}II ﬁ
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_68a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_68a 8
:9 :
AbstractTestCase; K
{ 
public 

static 
ulong 
data 
; 
public 

override 
void 
Bad 
( 
) 
{ 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_68b   :
.  : ;
BadSink  ; B
(  B C
)  C D
;  D E
}!! 
public$$ 

override$$ 
void$$ 
Good$$ 
($$ 
)$$ 
{%% 
GoodG2B&& 
(&& 
)&& 
;&& 
GoodB2G'' 
('' 
)'' 
;'' 
}(( 
private++ 
static++ 
void++ 
GoodG2B++ 
(++  
)++  !
{,, 
data.. 
=.. 
$num.. 
;.. >
2CWE191_Integer_Underflow__UInt64_rand_multiply_68b// :
.//: ;
GoodG2BSink//; F
(//F G
)//G H
;//H I
}00 
private33 
static33 
void33 
GoodB2G33 
(33  
)33  !
{44 
data66 
=66 
IO66 
.66 
GetRandomULong66  
(66  !
)66! "
;66" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_68b77 :
.77: ;
GoodB2GSink77; F
(77F G
)77G H
;77H I
}88 
}:: 
};; œ
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_68b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_68b 8
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
ulong 
data 
= >
2CWE191_Integer_Underflow__UInt64_rand_multiply_68a G
.G H
dataH L
;L M
if 

(
 
data 
< 
$num 
) 
{   	
ulong"" 
result"" 
="" 
("" 
ulong"" !
)""! "
(""" #
data""# '
*""( )
$num""* +
)""+ ,
;"", -
IO## 
.## 
	WriteLine## 
(## 
$str## #
+##$ %
result##& ,
)##, -
;##- .
}$$ 	
}%% 
public** 

static** 
void** 
GoodG2BSink** "
(**" #
)**# $
{++ 
ulong,, 
data,, 
=,, >
2CWE191_Integer_Underflow__UInt64_rand_multiply_68a,, G
.,,G H
data,,H L
;,,L M
if-- 

(--
 
data-- 
<-- 
$num-- 
)-- 
{.. 	
ulong00 
result00 
=00 
(00 
ulong00 !
)00! "
(00" #
data00# '
*00( )
$num00* +
)00+ ,
;00, -
IO11 
.11 
	WriteLine11 
(11 
$str11 #
+11$ %
result11& ,
)11, -
;11- .
}22 	
}33 
public66 

static66 
void66 
GoodB2GSink66 "
(66" #
)66# $
{77 
ulong88 
data88 
=88 >
2CWE191_Integer_Underflow__UInt64_rand_multiply_68a88 G
.88G H
data88H L
;88L M
if99 

(99
 
data99 
<99 
$num99 
)99 
{:: 	
if<< 
(<< 
data<< 
><< 
(<< 
ulong<< 
.<< 
MinValue<< &
/<<& '
$num<<' (
)<<( )
)<<) *
{== 
ulong>> 
result>> 
=>> 
(>>  
ulong>>  %
)>>% &
(>>& '
data>>' +
*>>, -
$num>>. /
)>>/ 0
;>>0 1
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? '
+??( )
result??* 0
)??0 1
;??1 2
}@@ 
elseAA 
{BB 
IOCC 
.CC 
	WriteLineCC 
(CC 
$strCC Q
)CCQ R
;CCR S
}DD 
}EE 	
}FF 
}HH 
}II Í
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_71a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_71a 8
:9 :
AbstractTestCase; K
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_71b :
.: ;
BadSink; B
(B C
(C D
ObjectD J
)J K
dataK O
)Q R
;R S
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
static** 
void** 
GoodG2B** 
(**  
)**  !
{++ 
ulong,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. >
2CWE191_Integer_Underflow__UInt64_rand_multiply_71b// :
.//: ;
GoodG2BSink//; F
(//F G
(//G H
Object//H N
)//N O
data//O S
)//U V
;//V W
}00 
private33 
static33 
void33 
GoodB2G33 
(33  
)33  !
{44 
ulong55 
data55 
;55 
data77 
=77 
IO77 
.77 
GetRandomULong77  
(77  !
)77! "
;77" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_71b88 :
.88: ;
GoodB2GSink88; F
(88F G
(88G H
Object88H N
)88N O
data88O S
)88U V
;88V W
}99 
};; 
}<< ã
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_71b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_71b 8
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
ulong 
data 
= 
( 
ulong 
) 

dataObject &
;& '
if   

(  
 
data   
<   
$num   
)   
{!! 	
ulong## 
result## 
=## 
(## 
ulong## !
)##! "
(##" #
data### '
*##( )
$num##* +
)##+ ,
;##, -
IO$$ 
.$$ 
	WriteLine$$ 
($$ 
$str$$ #
+$$$ %
result$$& ,
)$$, -
;$$- .
}%% 	
}&& 
public++ 

static++ 
void++ 
GoodG2BSink++ "
(++" #
Object++# )

dataObject++* 4
)++5 6
{,, 
ulong-- 
data-- 
=-- 
(-- 
ulong-- 
)-- 

dataObject-- &
;--& '
if.. 

(..
 
data.. 
<.. 
$num.. 
).. 
{// 	
ulong11 
result11 
=11 
(11 
ulong11 !
)11! "
(11" #
data11# '
*11( )
$num11* +
)11+ ,
;11, -
IO22 
.22 
	WriteLine22 
(22 
$str22 #
+22$ %
result22& ,
)22, -
;22- .
}33 	
}44 
public77 

static77 
void77 
GoodB2GSink77 "
(77" #
Object77# )

dataObject77* 4
)775 6
{88 
ulong99 
data99 
=99 
(99 
ulong99 
)99 

dataObject99 &
;99& '
if:: 

(::
 
data:: 
<:: 
$num:: 
):: 
{;; 	
if== 
(== 
data== 
>== 
(== 
ulong== 
.== 
MinValue== &
/==& '
$num==' (
)==( )
)==) *
{>> 
ulong?? 
result?? 
=?? 
(??  
ulong??  %
)??% &
(??& '
data??' +
*??, -
$num??. /
)??/ 0
;??0 1
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ '
+@@( )
result@@* 0
)@@0 1
;@@1 2
}AA 
elseBB 
{CC 
IODD 
.DD 
	WriteLineDD 
(DD 
$strDD Q
)DDQ R
;DDR S
}EE 
}FF 	
}GG 
}II 
}JJ ⁄
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_72a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_72a 8
:9 :
AbstractTestCase; K
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #
	Hashtable   
dataHashtable   
=    !
new  " %
	Hashtable  & /
(  / 0
$num  0 1
)  1 2
;  2 3
dataHashtable!! 
.!! 
Add!! 
(!! 
$num!! 
,!! 
data!! !
)!!! "
;!!" #
dataHashtable"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" !
)""! "
;""" #
dataHashtable## 
.## 
Add## 
(## 
$num## 
,## 
data## !
)##! "
;##" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_72b$$ :
.$$: ;
BadSink$$; B
($$B C
dataHashtable$$C P
)$$R S
;$$S T
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
ulong11 
data11 
;11 
data33 
=33 
$num33 
;33 
	Hashtable44 
dataHashtable44 
=44  !
new44" %
	Hashtable44& /
(44/ 0
$num440 1
)441 2
;442 3
dataHashtable55 
.55 
Add55 
(55 
$num55 
,55 
data55 !
)55! "
;55" #
dataHashtable66 
.66 
Add66 
(66 
$num66 
,66 
data66 !
)66! "
;66" #
dataHashtable77 
.77 
Add77 
(77 
$num77 
,77 
data77 !
)77! "
;77" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_72b88 :
.88: ;
GoodG2BSink88; F
(88F G
dataHashtable88G T
)88V W
;88W X
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
ulong>> 
data>> 
;>> 
data@@ 
=@@ 
IO@@ 
.@@ 
GetRandomULong@@  
(@@  !
)@@! "
;@@" #
	HashtableAA 
dataHashtableAA 
=AA  !
newAA" %
	HashtableAA& /
(AA/ 0
$numAA0 1
)AA1 2
;AA2 3
dataHashtableBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB !
)BB! "
;BB" #
dataHashtableCC 
.CC 
AddCC 
(CC 
$numCC 
,CC 
dataCC !
)CC! "
;CC" #
dataHashtableDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD !
)DD! "
;DD" #>
2CWE191_Integer_Underflow__UInt64_rand_multiply_72bEE :
.EE: ;
GoodB2GSinkEE; F
(EEF G
dataHashtableEEG T
)EEV W
;EEW X
}FF 
}HH 
}II ∂
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_72b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_72b 8
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
ulong 
data 
= 
( 
ulong 
) 
dataHashtable *
[* +
$num+ ,
], -
;- .
if   

(  
 
data   
<   
$num   
)   
{!! 	
ulong## 
result## 
=## 
(## 
ulong## !
)##! "
(##" #
data### '
*##( )
$num##* +
)##+ ,
;##, -
IO$$ 
.$$ 
	WriteLine$$ 
($$ 
$str$$ #
+$$$ %
result$$& ,
)$$, -
;$$- .
}%% 	
}&& 
public++ 

static++ 
void++ 
GoodG2BSink++ "
(++" #
	Hashtable++# ,
dataHashtable++- :
)++; <
{,, 
ulong-- 
data-- 
=-- 
(-- 
ulong-- 
)-- 
dataHashtable-- *
[--* +
$num--+ ,
]--, -
;--- .
if.. 

(..
 
data.. 
<.. 
$num.. 
).. 
{// 	
ulong11 
result11 
=11 
(11 
ulong11 !
)11! "
(11" #
data11# '
*11( )
$num11* +
)11+ ,
;11, -
IO22 
.22 
	WriteLine22 
(22 
$str22 #
+22$ %
result22& ,
)22, -
;22- .
}33 	
}44 
public77 

static77 
void77 
GoodB2GSink77 "
(77" #
	Hashtable77# ,
dataHashtable77- :
)77; <
{88 
ulong99 
data99 
=99 
(99 
ulong99 
)99 
dataHashtable99 *
[99* +
$num99+ ,
]99, -
;99- .
if:: 

(::
 
data:: 
<:: 
$num:: 
):: 
{;; 	
if== 
(== 
data== 
>== 
(== 
ulong== 
.== 
MinValue== &
/==& '
$num==' (
)==( )
)==) *
{>> 
ulong?? 
result?? 
=?? 
(??  
ulong??  %
)??% &
(??& '
data??' +
*??, -
$num??. /
)??/ 0
;??0 1
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ '
+@@( )
result@@* 0
)@@0 1
;@@1 2
}AA 
elseBB 
{CC 
IODD 
.DD 
	WriteLineDD 
(DD 
$strDD Q
)DDQ R
;DDR S
}EE 
}FF 	
}GG 
}II 
}JJ ⁄
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_73a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_73a 8
:9 :
AbstractTestCase; K
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #

LinkedList   
<   
ulong   
>   
dataLinkedList   (
=  ) *
new  + .

LinkedList  / 9
<  9 :
ulong  : ?
>  ? @
(  @ A
)  A B
;  B C
dataLinkedList!! 
.!! 
AddLast!! 
(!! 
data!! #
)!!# $
;!!$ %
dataLinkedList"" 
."" 
AddLast"" 
("" 
data"" #
)""# $
;""$ %
dataLinkedList## 
.## 
AddLast## 
(## 
data## #
)### $
;##$ %>
2CWE191_Integer_Underflow__UInt64_rand_multiply_73b$$ :
.$$: ;
BadSink$$; B
($$B C
dataLinkedList$$C Q
)$$S T
;$$T U
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
ulong11 
data11 
;11 
data33 
=33 
$num33 
;33 

LinkedList44 
<44 
ulong44 
>44 
dataLinkedList44 (
=44) *
new44+ .

LinkedList44/ 9
<449 :
ulong44: ?
>44? @
(44@ A
)44A B
;44B C
dataLinkedList55 
.55 
AddLast55 
(55 
data55 #
)55# $
;55$ %
dataLinkedList66 
.66 
AddLast66 
(66 
data66 #
)66# $
;66$ %
dataLinkedList77 
.77 
AddLast77 
(77 
data77 #
)77# $
;77$ %>
2CWE191_Integer_Underflow__UInt64_rand_multiply_73b88 :
.88: ;
GoodG2BSink88; F
(88F G
dataLinkedList88G U
)88W X
;88X Y
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
ulong>> 
data>> 
;>> 
data@@ 
=@@ 
IO@@ 
.@@ 
GetRandomULong@@  
(@@  !
)@@! "
;@@" #

LinkedListAA 
<AA 
ulongAA 
>AA 
dataLinkedListAA (
=AA) *
newAA+ .

LinkedListAA/ 9
<AA9 :
ulongAA: ?
>AA? @
(AA@ A
)AAA B
;AAB C
dataLinkedListBB 
.BB 
AddLastBB 
(BB 
dataBB #
)BB# $
;BB$ %
dataLinkedListCC 
.CC 
AddLastCC 
(CC 
dataCC #
)CC# $
;CC$ %
dataLinkedListDD 
.DD 
AddLastDD 
(DD 
dataDD #
)DD# $
;DD$ %>
2CWE191_Integer_Underflow__UInt64_rand_multiply_73bEE :
.EE: ;
GoodB2GSinkEE; F
(EEF G
dataLinkedListEEG U
)EEW X
;EEX Y
}FF 
}HH 
}II ¯
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_73b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_73b 8
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
ulong* /
>/ 0
dataLinkedList1 ?
)@ A
{ 
ulong 
data 
= 
dataLinkedList #
.# $
Last$ (
.( )
Value) .
;. /
if   

(  
 
data   
<   
$num   
)   
{!! 	
ulong## 
result## 
=## 
(## 
ulong## !
)##! "
(##" #
data### '
*##( )
$num##* +
)##+ ,
;##, -
IO$$ 
.$$ 
	WriteLine$$ 
($$ 
$str$$ #
+$$$ %
result$$& ,
)$$, -
;$$- .
}%% 	
}&& 
public++ 

static++ 
void++ 
GoodG2BSink++ "
(++" #

LinkedList++# -
<++- .
ulong++. 3
>++3 4
dataLinkedList++5 C
)++D E
{,, 
ulong-- 
data-- 
=-- 
dataLinkedList-- #
.--# $
Last--$ (
.--( )
Value--) .
;--. /
if.. 

(..
 
data.. 
<.. 
$num.. 
).. 
{// 	
ulong11 
result11 
=11 
(11 
ulong11 !
)11! "
(11" #
data11# '
*11( )
$num11* +
)11+ ,
;11, -
IO22 
.22 
	WriteLine22 
(22 
$str22 #
+22$ %
result22& ,
)22, -
;22- .
}33 	
}44 
public77 

static77 
void77 
GoodB2GSink77 "
(77" #

LinkedList77# -
<77- .
ulong77. 3
>773 4
dataLinkedList775 C
)77D E
{88 
ulong99 
data99 
=99 
dataLinkedList99 #
.99# $
Last99$ (
.99( )
Value99) .
;99. /
if:: 

(::
 
data:: 
<:: 
$num:: 
):: 
{;; 	
if== 
(== 
data== 
>== 
(== 
ulong== 
.== 
MinValue== &
/==& '
$num==' (
)==( )
)==) *
{>> 
ulong?? 
result?? 
=?? 
(??  
ulong??  %
)??% &
(??& '
data??' +
*??, -
$num??. /
)??/ 0
;??0 1
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ '
+@@( )
result@@* 0
)@@0 1
;@@1 2
}AA 
elseBB 
{CC 
IODD 
.DD 
	WriteLineDD 
(DD 
$strDD Q
)DDQ R
;DDR S
}EE 
}FF 	
}GG 
}II 
}JJ ü#
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_74a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_74a 8
:9 :
AbstractTestCase; K
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #

Dictionary   
<   
int   
,   
ulong   
>   
dataDictionary   ,
=  - .
new  / 2

Dictionary  3 =
<  = >
int  > A
,  A B
ulong  B G
>  G H
(  H I
)  I J
;  J K
dataDictionary!! 
.!! 
Add!! 
(!! 
$num!! 
,!! 
data!! "
)!!" #
;!!# $
dataDictionary"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" "
)""" #
;""# $
dataDictionary## 
.## 
Add## 
(## 
$num## 
,## 
data## "
)##" #
;### $>
2CWE191_Integer_Underflow__UInt64_rand_multiply_74b$$ :
.$$: ;
BadSink$$; B
($$B C
dataDictionary$$C Q
)$$S T
;$$T U
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
ulong11 
data11 
;11 
data33 
=33 
$num33 
;33 

Dictionary44 
<44 
int44 
,44 
ulong44 
>44 
dataDictionary44 ,
=44- .
new44/ 2

Dictionary443 =
<44= >
int44> A
,44A B
ulong44B G
>44G H
(44H I
)44I J
;44J K
dataDictionary55 
.55 
Add55 
(55 
$num55 
,55 
data55 "
)55" #
;55# $
dataDictionary66 
.66 
Add66 
(66 
$num66 
,66 
data66 "
)66" #
;66# $
dataDictionary77 
.77 
Add77 
(77 
$num77 
,77 
data77 "
)77" #
;77# $>
2CWE191_Integer_Underflow__UInt64_rand_multiply_74b88 :
.88: ;
GoodG2BSink88; F
(88F G
dataDictionary88G U
)88W X
;88X Y
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
ulong>> 
data>> 
;>> 
data@@ 
=@@ 
IO@@ 
.@@ 
GetRandomULong@@  
(@@  !
)@@! "
;@@" #

DictionaryAA 
<AA 
intAA 
,AA 
ulongAA 
>AA 
dataDictionaryAA ,
=AA- .
newAA/ 2

DictionaryAA3 =
<AA= >
intAA> A
,AAA B
ulongAAB G
>AAG H
(AAH I
)AAI J
;AAJ K
dataDictionaryBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB "
)BB" #
;BB# $
dataDictionaryCC 
.CC 
AddCC 
(CC 
$numCC 
,CC 
dataCC "
)CC" #
;CC# $
dataDictionaryDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD "
)DD" #
;DD# $>
2CWE191_Integer_Underflow__UInt64_rand_multiply_74bEE :
.EE: ;
GoodB2GSinkEE; F
(EEF G
dataDictionaryEEG U
)EEW X
;EEX Y
}FF 
}HH 
}II ü
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_74b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_74b 8
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
ulong. 3
>3 4
dataDictionary5 C
)D E
{ 
ulong 
data 
= 
dataDictionary #
[# $
$num$ %
]% &
;& '
if   

(  
 
data   
<   
$num   
)   
{!! 	
ulong## 
result## 
=## 
(## 
ulong## !
)##! "
(##" #
data### '
*##( )
$num##* +
)##+ ,
;##, -
IO$$ 
.$$ 
	WriteLine$$ 
($$ 
$str$$ #
+$$$ %
result$$& ,
)$$, -
;$$- .
}%% 	
}&& 
public++ 

static++ 
void++ 
GoodG2BSink++ #
(++# $

Dictionary++$ .
<++. /
int++/ 2
,++2 3
ulong++3 8
>++8 9
dataDictionary++: H
)++I J
{,, 
ulong-- 
data-- 
=-- 
dataDictionary-- #
[--# $
$num--$ %
]--% &
;--& '
if.. 

(..
 
data.. 
<.. 
$num.. 
).. 
{// 	
ulong11 
result11 
=11 
(11 
ulong11 !
)11! "
(11" #
data11# '
*11( )
$num11* +
)11+ ,
;11, -
IO22 
.22 
	WriteLine22 
(22 
$str22 #
+22$ %
result22& ,
)22, -
;22- .
}33 	
}44 
public77 

static77 
void77 
GoodB2GSink77 "
(77" #

Dictionary77# -
<77- .
int77. 1
,771 2
ulong772 7
>777 8
dataDictionary779 G
)77H I
{88 
ulong99 
data99 
=99 
dataDictionary99 #
[99# $
$num99$ %
]99% &
;99& '
if:: 

(::
 
data:: 
<:: 
$num:: 
):: 
{;; 	
if== 
(== 
data== 
>== 
(== 
ulong== 
.== 
MinValue== &
/==& '
$num==' (
)==( )
)==) *
{>> 
ulong?? 
result?? 
=?? 
(??  
ulong??  %
)??% &
(??& '
data??' +
*??, -
$num??. /
)??/ 0
;??0 1
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ '
+@@( )
result@@* 0
)@@0 1
;@@1 2
}AA 
elseBB 
{CC 
IODD 
.DD 
	WriteLineDD 
(DD 
$strDD Q
)DDQ R
;DDR S
}EE 
}FF 	
}GG 
}II 
}JJ ÷.
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_75a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_75a 8
:9 :
AbstractTestCase; K
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data!! 
=!! 
IO!! 
.!! 
GetRandomULong!!  
(!!  !
)!!! "
;!!" #
byte## 
[## 
]## 
dataSerialized## 
=## 
null##  $
;##$ %
try$$ 
{%% 	
BinaryFormatter&& 
bf&& 
=&&  
new&&! $
BinaryFormatter&&% 4
(&&4 5
)&&5 6
;&&6 7
using'' 
('' 
var'' 
ms'' 
='' 
new'' 
MemoryStream''  ,
('', -
)''- .
)''. /
{(( 
bf)) 
.)) 
	Serialize)) 
()) 
ms)) 
,))  
data))! %
)))% &
;))& '
dataSerialized** 
=**  
ms**! #
.**# $
ToArray**$ +
(**+ ,
)**, -
;**- .
}++ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_75b,, >
.,,> ?
BadSink,,? F
(,,F G
dataSerialized,,G U
),,W X
;,,X Y
}-- 	
catch.. 
(.. "
SerializationException.. %
exceptSerialize..& 5
)..5 6
{// 	
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 
.00 
LogLevel00 '
.00' (
Warn00( ,
,00, -
$str00. X
,00X Y
exceptSerialize00Z i
)00i j
;00j k
}11 	
}22 
public55 

override55 
void55 
Good55 
(55 
)55 
{66 
GoodG2B77 
(77 
)77 
;77 
GoodB2G88 
(88 
)88 
;88 
}99 
private<< 
static<< 
void<< 
GoodG2B<< 
(<<  
)<<  !
{== 
ulong>> 
data>> 
;>> 
data@@ 
=@@ 
IO@@ 
.@@ 
GetRandomULong@@  
(@@  !
)@@! "
;@@" #
byteBB 
[BB 
]BB 
dataSerializedBB 
=BB 
nullBB  $
;BB$ %
tryCC 
{DD 	
BinaryFormatterEE 
bfEE 
=EE  
newEE! $
BinaryFormatterEE% 4
(EE4 5
)EE5 6
;EE6 7
usingFF 
(FF 
varFF 
msFF 
=FF 
newFF 
MemoryStreamFF  ,
(FF, -
)FF- .
)FF. /
{GG 
bfHH 
.HH 
	SerializeHH 
(HH 
msHH 
,HH  
dataHH! %
)HH% &
;HH& '
dataSerializedII 
=II  
msII! #
.II# $
ToArrayII$ +
(II+ ,
)II, -
;II- .
}JJ >
2CWE191_Integer_Underflow__UInt64_rand_multiply_75bKK >
.KK> ?
GoodG2BSinkKK? J
(KKJ K
dataSerializedKKK Y
)KK[ \
;KK\ ]
}LL 	
catchMM 
(MM "
SerializationExceptionMM %
exceptSerializeMM& 5
)MM5 6
{NN 	
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO 
.OO 
LogLevelOO '
.OO' (
WarnOO( ,
,OO, -
$strOO. X
,OOX Y
exceptSerializeOOZ i
)OOi j
;OOj k
}PP 	
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
ulongVV 
dataVV 
;VV 
dataXX 
=XX 
IOXX 
.XX 
GetRandomULongXX  
(XX  !
)XX! "
;XX" #
byteZZ 
[ZZ 
]ZZ 
dataSerializedZZ 
=ZZ 
nullZZ  $
;ZZ$ %
try[[ 
{\\ 	
BinaryFormatter]] 
bf]] 
=]]  
new]]! $
BinaryFormatter]]% 4
(]]4 5
)]]5 6
;]]6 7
using^^ 
(^^ 
var^^ 
ms^^ 
=^^ 
new^^ 
MemoryStream^^  ,
(^^, -
)^^- .
)^^. /
{__ 
bf`` 
.`` 
	Serialize`` 
(`` 
ms`` 
,``  
data``! %
)``% &
;``& '
dataSerializedaa 
=aa  
msaa! #
.aa# $
ToArrayaa$ +
(aa+ ,
)aa, -
;aa- .
}bb >
2CWE191_Integer_Underflow__UInt64_rand_multiply_75bcc >
.cc> ?
GoodB2GSinkcc? J
(ccJ K
dataSerializedccK Y
)cc[ \
;cc\ ]
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. X
,ggX Y
exceptSerializeggZ i
)ggi j
;ggj k
}hh 	
}ii 
}kk 
}ll ∏:
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_75b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_75b 8
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
ulong## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
ulong)) 
))) 
binForm)) %
.))% &
Deserialize))& 1
())1 2
	memStream))2 ;
))); <
;))< =
}** 
if++ 
(++ 
data++ 
<++ 
$num++ 
)++ 
{,, 
ulong.. 
result.. 
=.. 
(..  
ulong..  %
)..% &
(..& '
data..' +
*.., -
$num... /
)../ 0
;..0 1
IO// 
.// 
	WriteLine// 
(// 
$str// '
+//( )
result//* 0
)//0 1
;//1 2
}00 
}11 	
catch22 
(22 "
SerializationException22 %
exceptSerialize22& 5
)225 6
{33 	
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 
.44 
LogLevel44 '
.44' (
Warn44( ,
,44, -
$str44. Y
,44Y Z
exceptSerialize44[ j
)44j k
;44k l
}55 	
}66 
public;; 

static;; 
void;; 
GoodG2BSink;; "
(;;" #
byte;;# '
[;;' (
];;( )
dataSerialized;;* 8
);;9 :
{<< 
try== 
{>> 	
ulong?? 
data?? 
;?? 
var@@ 
binForm@@ 
=@@ 
new@@ 
BinaryFormatter@@ -
(@@- .
)@@. /
;@@/ 0
usingAA 
(AA 
varAA 
	memStreamAA  
=AA! "
newAA# &
MemoryStreamAA' 3
(AA3 4
)AA4 5
)AA5 6
{BB 
	memStreamCC 
.CC 
WriteCC 
(CC  
dataSerializedCC  .
,CC. /
$numCC0 1
,CC1 2
dataSerializedCC3 A
.CCA B
LengthCCB H
)CCH I
;CCI J
	memStreamDD 
.DD 
SeekDD 
(DD 
$numDD  
,DD  !

SeekOriginDD" ,
.DD, -
BeginDD- 2
)DD2 3
;DD3 4
dataEE 
=EE 
(EE 
ulongEE 
)EE 
binFormEE %
.EE% &
DeserializeEE& 1
(EE1 2
	memStreamEE2 ;
)EE; <
;EE< =
}FF 
ifGG 
(GG 
dataGG 
<GG 
$numGG 
)GG 
{HH 
ulongJJ 
resultJJ 
=JJ 
(JJ  
ulongJJ  %
)JJ% &
(JJ& '
dataJJ' +
*JJ, -
$numJJ. /
)JJ/ 0
;JJ0 1
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK '
+KK( )
resultKK* 0
)KK0 1
;KK1 2
}LL 
}MM 	
catchNN 
(NN "
SerializationExceptionNN %
exceptSerializeNN& 5
)NN5 6
{OO 	
IOPP 
.PP 
LoggerPP 
.PP 
LogPP 
(PP 
NLogPP 
.PP 
LogLevelPP '
.PP' (
WarnPP( ,
,PP, -
$strPP. Y
,PPY Z
exceptSerializePP[ j
)PPj k
;PPk l
}QQ 	
}RR 
publicUU 

staticUU 
voidUU 
GoodB2GSinkUU "
(UU" #
byteUU# '
[UU' (
]UU( )
dataSerializedUU* 8
)UU9 :
{VV 
tryWW 
{XX 	
ulongYY 
dataYY 
;YY 
varZZ 
binFormZZ 
=ZZ 
newZZ 
BinaryFormatterZZ -
(ZZ- .
)ZZ. /
;ZZ/ 0
using[[ 
([[ 
var[[ 
	memStream[[  
=[[! "
new[[# &
MemoryStream[[' 3
([[3 4
)[[4 5
)[[5 6
{\\ 
	memStream]] 
.]] 
Write]] 
(]]  
dataSerialized]]  .
,]]. /
$num]]0 1
,]]1 2
dataSerialized]]3 A
.]]A B
Length]]B H
)]]H I
;]]I J
	memStream^^ 
.^^ 
Seek^^ 
(^^ 
$num^^  
,^^  !

SeekOrigin^^" ,
.^^, -
Begin^^- 2
)^^2 3
;^^3 4
data__ 
=__ 
(__ 
ulong__ 
)__ 
binForm__ %
.__% &
Deserialize__& 1
(__1 2
	memStream__2 ;
)__; <
;__< =
}`` 
ifaa 
(aa 
dataaa 
<aa 
$numaa 
)aa 
{bb 
ifdd 
(dd 
datadd 
>dd 
(dd 
ulongdd !
.dd! "
MinValuedd" *
/dd* +
$numdd+ ,
)dd, -
)dd- .
{ee 
ulongff 
resultff  
=ff! "
(ff# $
ulongff$ )
)ff) *
(ff* +
dataff+ /
*ff0 1
$numff2 3
)ff3 4
;ff4 5
IOgg 
.gg 
	WriteLinegg  
(gg  !
$strgg! +
+gg, -
resultgg. 4
)gg4 5
;gg5 6
}hh 
elseii 
{jj 
IOkk 
.kk 
	WriteLinekk  
(kk  !
$strkk! U
)kkU V
;kkV W
}ll 
}mm 
}nn 	
catchoo 
(oo "
SerializationExceptionoo %
exceptSerializeoo& 5
)oo5 6
{pp 	
IOqq 
.qq 
Loggerqq 
.qq 
Logqq 
(qq 
NLogqq 
.qq 
LogLevelqq '
.qq' (
Warnqq( ,
,qq, -
$strqq. Y
,qqY Z
exceptSerializeqq[ j
)qqj k
;qqk l
}rr 	
}ss 
}uu 
}vv ä
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_81a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class >
2CWE191_Integer_Underflow__UInt64_rand_multiply_81a 8
:9 :
AbstractTestCase; K
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #B
6CWE191_Integer_Underflow__UInt64_rand_multiply_81_base >

baseObject? I
=J K
newL OB
5CWE191_Integer_Underflow__UInt64_rand_multiply_81_bad	P Ö
(
Ö Ü
)
Ü á
;
á à

baseObject   
.   
Action   
(   
data   
)    
;    !
}!! 
public$$ 

override$$ 
void$$ 
Good$$ 
($$ 
)$$ 
{%% 
GoodG2B&& 
(&& 
)&& 
;&& 
GoodB2G'' 
('' 
)'' 
;'' 
}(( 
private++ 
void++ 
GoodG2B++ 
(++ 
)++ 
{,, 
ulong-- 
data-- 
;-- 
data// 
=// 
$num// 
;// B
6CWE191_Integer_Underflow__UInt64_rand_multiply_81_base00 >

baseObject00? I
=00J K
new00L OF
9CWE191_Integer_Underflow__UInt64_rand_multiply_81_goodG2B	00P â
(
00â ä
)
00ä ã
;
00ã å

baseObject11 
.11 
Action11 
(11 
data11 
)11  
;11  !
}22 
private55 
void55 
GoodB2G55 
(55 
)55 
{66 
ulong77 
data77 
;77 
data99 
=99 
IO99 
.99 
GetRandomULong99  
(99  !
)99! "
;99" #B
6CWE191_Integer_Underflow__UInt64_rand_multiply_81_base:: >

baseObject::? I
=::J K
new::L OF
9CWE191_Integer_Underflow__UInt64_rand_multiply_81_goodB2G	::P â
(
::â ä
)
::ä ã
;
::ã å

baseObject;; 
.;; 
Action;; 
(;; 
data;; 
);;  
;;;  !
}<< 
}>> 
}?? ˇ
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_81_bad.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class A
5CWE191_Integer_Underflow__UInt64_rand_multiply_81_bad ;
:< =B
6CWE191_Integer_Underflow__UInt64_rand_multiply_81_base> t
{ 
public 

override 
void 
Action 
(  
ulong  %
data& *
)+ ,
{ 
if 

(
 
data 
< 
$num 
) 
{ 	
ulong!! 
result!! 
=!! 
(!! 
ulong!! !
)!!! "
(!!" #
data!!# '
*!!( )
$num!!* +
)!!+ ,
;!!, -
IO"" 
."" 
	WriteLine"" 
("" 
$str"" #
+""$ %
result""& ,
)"", -
;""- .
}## 	
}$$ 
}%% 
}&& ◊
≤C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_81_base.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
abstract 
class	 B
6CWE191_Integer_Underflow__UInt64_rand_multiply_81_base E
{ 
public 

abstract 
void 
Action 
(  
ulong  %
data& *
)+ ,
;, -
} 
} ê
µC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_81_goodB2G.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class E
9CWE191_Integer_Underflow__UInt64_rand_multiply_81_goodB2G ?
:@ AB
6CWE191_Integer_Underflow__UInt64_rand_multiply_81_baseB x
{ 
public 

override 
void 
Action 
(  
ulong  %
data& *
)+ ,
{ 
if 

(
 
data 
< 
$num 
) 
{   	
if"" 
("" 
data"" 
>"" 
("" 
ulong"" 
."" 
MinValue"" &
/""& '
$num""' (
)""( )
)"") *
{## 
ulong$$ 
result$$ 
=$$ 
($$  
ulong$$  %
)$$% &
($$& '
data$$' +
*$$, -
$num$$. /
)$$/ 0
;$$0 1
IO%% 
.%% 
	WriteLine%% 
(%% 
$str%% '
+%%( )
result%%* 0
)%%0 1
;%%1 2
}&& 
else'' 
{(( 
IO)) 
.)) 
	WriteLine)) 
()) 
$str)) Q
)))Q R
;))R S
}** 
}++ 	
},, 
}-- 
}.. á	
µC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_multiply_81_goodG2B.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class E
9CWE191_Integer_Underflow__UInt64_rand_multiply_81_goodG2B ?
:@ AB
6CWE191_Integer_Underflow__UInt64_rand_multiply_81_baseB x
{ 
public 

override 
void 
Action 
(  
ulong  %
data& *
)+ ,
{ 
if 

(
 
data 
< 
$num 
) 
{   	
ulong"" 
result"" 
="" 
("" 
ulong"" !
)""! "
(""" #
data""# '
*""( )
$num""* +
)""+ ,
;"", -
IO## 
.## 
	WriteLine## 
(## 
$str## #
+##$ %
result##& ,
)##, -
;##- .
}$$ 	
}%% 
}&& 
}'' ñ
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_01.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_01 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data   
=   
IO   
.   
GetRandomULong    
(    !
)  ! "
;  " #
ulong"" 
result"" 
="" 
("" 
ulong"" 
)"" 
("" 
data"" #
-""$ %
$num""& '
)""' (
;""( )
IO## 

.##
 
	WriteLine## 
(## 
$str## 
+##  !
result##" (
)##( )
;##) *
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
)'' 
{(( 
GoodG2B)) 
()) 
))) 
;)) 
GoodB2G** 
(** 
)** 
;** 
}++ 
private.. 
void.. 
GoodG2B.. 
(.. 
).. 
{// 
ulong00 
data00 
;00 
data22 
=22 
$num22 
;22 
ulong44 
result44 
=44 
(44 
ulong44 
)44 
(44 
data44 #
-44$ %
$num44& '
)44' (
;44( )
IO55 

.55
 
	WriteLine55 
(55 
$str55 
+55  !
result55" (
)55( )
;55) *
}66 
private99 
void99 
GoodB2G99 
(99 
)99 
{:: 
ulong;; 
data;; 
;;; 
data== 
=== 
IO== 
.== 
GetRandomULong==  
(==  !
)==! "
;==" #
if?? 

(?? 
data?? 
>?? 
ulong?? 
.?? 
MinValue?? !
)??! "
{@@ 	
ulongAA 
resultAA 
=AA 
(AA 
ulongAA !
)AA! "
(AA" #
dataAA# '
-AA( )
$numAA* +
)AA+ ,
;AA, -
IOBB 
.BB 
	WriteLineBB 
(BB 
$strBB #
+BB$ %
resultBB& ,
)BB, -
;BB- .
}CC 	
elseDD 
{EE 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF J
)FFJ K
;FFK L
}GG 	
}HH 
}JJ 
}KK ∞3
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_02.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_02 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
true 
) 
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
true** 
)** 
{++ 	
ulong-- 
result-- 
=-- 
(-- 
ulong-- !
)--! "
(--" #
data--# '
---( )
$num--* +
)--+ ,
;--, -
IO.. 
... 
	WriteLine.. 
(.. 
$str.. #
+..$ %
result..& ,
).., -
;..- .
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
ulong66 
data66 
;66 
if77 

(77 
false77 
)77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
trueBB 
)BB 
{CC 	
ulongEE 
resultEE 
=EE 
(EE 
ulongEE !
)EE! "
(EE" #
dataEE# '
-EE( )
$numEE* +
)EE+ ,
;EE, -
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF #
+FF$ %
resultFF& ,
)FF, -
;FF- .
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
ulongMM 
dataMM 
;MM 
ifNN 

(NN 
trueNN 
)NN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
trueYY 
)YY 
{ZZ 	
ulong\\ 
result\\ 
=\\ 
(\\ 
ulong\\ !
)\\! "
(\\" #
data\\# '
-\\( )
$num\\* +
)\\+ ,
;\\, -
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] #
+]]$ %
result]]& ,
)]], -
;]]- .
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
ulongdd 
datadd 
;dd 
ifee 

(ee 
trueee 
)ee 
{ff 	
datahh 
=hh 
IOhh 
.hh 
GetRandomULonghh $
(hh$ %
)hh% &
;hh& '
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
falsepp 
)pp 
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
>xx 
ulongxx 
.xx 
MinValuexx %
)xx% &
{yy 
ulongzz 
resultzz 
=zz 
(zz  
ulongzz  %
)zz% &
(zz& '
datazz' +
-zz, -
$numzz. /
)zz/ 0
;zz0 1
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ '
+{{( )
result{{* 0
){{0 1
;{{1 2
}|| 
else}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str N
)N O
;O P
}
ÄÄ 
}
ÅÅ 	
}
ÇÇ 
private
ÖÖ 
void
ÖÖ 
GoodB2G2
ÖÖ 
(
ÖÖ 
)
ÖÖ 
{
ÜÜ 
ulong
áá 
data
áá 
;
áá 
if
àà 

(
àà 
true
àà 
)
àà 
{
ââ 	
data
ãã 
=
ãã 
IO
ãã 
.
ãã 
GetRandomULong
ãã $
(
ãã$ %
)
ãã% &
;
ãã& '
}
åå 	
else
çç 
{
éé 	
data
ëë 
=
ëë 
$num
ëë 
;
ëë 
}
íí 	
if
ìì 

(
ìì 
true
ìì 
)
ìì 
{
îî 	
if
ññ 
(
ññ 
data
ññ 
>
ññ 
ulong
ññ 
.
ññ 
MinValue
ññ %
)
ññ% &
{
óó 
ulong
òò 
result
òò 
=
òò 
(
òò  
ulong
òò  %
)
òò% &
(
òò& '
data
òò' +
-
òò, -
$num
òò. /
)
òò/ 0
;
òò0 1
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô '
+
ôô( )
result
ôô* 0
)
ôô0 1
;
ôô1 2
}
öö 
else
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù N
)
ùùN O
;
ùùO P
}
ûû 
}
üü 	
}
†† 
public
¢¢ 

override
¢¢ 
void
¢¢ 
Good
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
GoodG2B1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodG2B2
•• 
(
•• 
)
•• 
;
•• 
GoodB2G1
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G2
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 
}™™ 
}´´ ä6
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_03.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_03 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
$num 
== 
$num 
) 
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
$num** 
==** 
$num** 
)** 
{++ 	
ulong-- 
result-- 
=-- 
(-- 
ulong-- !
)--! "
(--" #
data--# '
---( )
$num--* +
)--+ ,
;--, -
IO.. 
... 
	WriteLine.. 
(.. 
$str.. #
+..$ %
result..& ,
).., -
;..- .
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
ulong66 
data66 
;66 
if77 

(77 
$num77 
!=77 
$num77 
)77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
$numBB 
==BB 
$numBB 
)BB 
{CC 	
ulongEE 
resultEE 
=EE 
(EE 
ulongEE !
)EE! "
(EE" #
dataEE# '
-EE( )
$numEE* +
)EE+ ,
;EE, -
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF #
+FF$ %
resultFF& ,
)FF, -
;FF- .
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
ulongMM 
dataMM 
;MM 
ifNN 

(NN 
$numNN 
==NN 
$numNN 
)NN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
$numYY 
==YY 
$numYY 
)YY 
{ZZ 	
ulong\\ 
result\\ 
=\\ 
(\\ 
ulong\\ !
)\\! "
(\\" #
data\\# '
-\\( )
$num\\* +
)\\+ ,
;\\, -
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] #
+]]$ %
result]]& ,
)]], -
;]]- .
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
ulongdd 
datadd 
;dd 
ifee 

(ee 
$numee 
==ee 
$numee 
)ee 
{ff 	
datahh 
=hh 
IOhh 
.hh 
GetRandomULonghh $
(hh$ %
)hh% &
;hh& '
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
$numpp 
!=pp 
$numpp 
)pp 
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
>xx 
ulongxx 
.xx 
MinValuexx %
)xx% &
{yy 
ulongzz 
resultzz 
=zz 
(zz  
ulongzz  %
)zz% &
(zz& '
datazz' +
-zz, -
$numzz. /
)zz/ 0
;zz0 1
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ '
+{{( )
result{{* 0
){{0 1
;{{1 2
}|| 
else}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str N
)N O
;O P
}
ÄÄ 
}
ÅÅ 	
}
ÇÇ 
private
ÖÖ 
void
ÖÖ 
GoodB2G2
ÖÖ 
(
ÖÖ 
)
ÖÖ 
{
ÜÜ 
ulong
áá 
data
áá 
;
áá 
if
àà 

(
àà 
$num
àà 
==
àà 
$num
àà 
)
àà 
{
ââ 	
data
ãã 
=
ãã 
IO
ãã 
.
ãã 
GetRandomULong
ãã $
(
ãã$ %
)
ãã% &
;
ãã& '
}
åå 	
else
çç 
{
éé 	
data
ëë 
=
ëë 
$num
ëë 
;
ëë 
}
íí 	
if
ìì 

(
ìì 
$num
ìì 
==
ìì 
$num
ìì 
)
ìì 
{
îî 	
if
ññ 
(
ññ 
data
ññ 
>
ññ 
ulong
ññ 
.
ññ 
MinValue
ññ %
)
ññ% &
{
óó 
ulong
òò 
result
òò 
=
òò 
(
òò  
ulong
òò  %
)
òò% &
(
òò& '
data
òò' +
-
òò, -
$num
òò. /
)
òò/ 0
;
òò0 1
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô '
+
ôô( )
result
ôô* 0
)
ôô0 1
;
ôô1 2
}
öö 
else
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù N
)
ùùN O
;
ùùO P
}
ûû 
}
üü 	
}
†† 
public
¢¢ 

override
¢¢ 
void
¢¢ 
Good
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
GoodG2B1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodG2B2
•• 
(
•• 
)
•• 
;
•• 
GoodB2G1
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G2
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 
}™™ 
}´´ í7
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_04.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_04 2
:3 4
AbstractTestCase5 E
{ 
private   
const   
bool   
PRIVATE_CONST_TRUE   )
=  * +
true  , 0
;  0 1
private!! 
const!! 
bool!! 
PRIVATE_CONST_FALSE!! *
=!!+ ,
false!!- 2
;!!2 3
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
ulong%% 
data%% 
;%% 
if&& 

(&& 
PRIVATE_CONST_TRUE&& 
)&& 
{'' 	
data)) 
=)) 
IO)) 
.)) 
GetRandomULong)) $
())$ %
)))% &
;))& '
}** 	
else++ 
{,, 	
data// 
=// 
$num// 
;// 
}00 	
if11 

(11 
PRIVATE_CONST_TRUE11 
)11 
{22 	
ulong44 
result44 
=44 
(44 
ulong44 !
)44! "
(44" #
data44# '
-44( )
$num44* +
)44+ ,
;44, -
IO55 
.55 
	WriteLine55 
(55 
$str55 #
+55$ %
result55& ,
)55, -
;55- .
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
);; 
{<< 
ulong== 
data== 
;== 
if>> 

(>> 
PRIVATE_CONST_FALSE>> 
)>>  
{?? 	
dataBB 
=BB 
$numBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
ifII 

(II 
PRIVATE_CONST_TRUEII 
)II 
{JJ 	
ulongLL 
resultLL 
=LL 
(LL 
ulongLL !
)LL! "
(LL" #
dataLL# '
-LL( )
$numLL* +
)LL+ ,
;LL, -
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM #
+MM$ %
resultMM& ,
)MM, -
;MM- .
}NN 	
}OO 
privateRR 
voidRR 
GoodG2B2RR 
(RR 
)RR 
{SS 
ulongTT 
dataTT 
;TT 
ifUU 

(UU 
PRIVATE_CONST_TRUEUU 
)UU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
elseZZ 
{[[ 	
data^^ 
=^^ 
$num^^ 
;^^ 
}__ 	
if`` 

(`` 
PRIVATE_CONST_TRUE`` 
)`` 
{aa 	
ulongcc 
resultcc 
=cc 
(cc 
ulongcc !
)cc! "
(cc" #
datacc# '
-cc( )
$numcc* +
)cc+ ,
;cc, -
IOdd 
.dd 
	WriteLinedd 
(dd 
$strdd #
+dd$ %
resultdd& ,
)dd, -
;dd- .
}ee 	
}ff 
privateii 
voidii 
GoodB2G1ii 
(ii 
)ii 
{jj 
ulongkk 
datakk 
;kk 
ifll 

(ll 
PRIVATE_CONST_TRUEll 
)ll 
{mm 	
dataoo 
=oo 
IOoo 
.oo 
GetRandomULongoo $
(oo$ %
)oo% &
;oo& '
}pp 	
elseqq 
{rr 	
datauu 
=uu 
$numuu 
;uu 
}vv 	
ifww 

(ww 
PRIVATE_CONST_FALSEww 
)ww  
{xx 	
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz /
)zz/ 0
;zz0 1
}{{ 	
else|| 
{}} 	
if 
( 
data 
> 
ulong 
. 
MinValue %
)% &
{
ÄÄ 
ulong
ÅÅ 
result
ÅÅ 
=
ÅÅ 
(
ÅÅ  
ulong
ÅÅ  %
)
ÅÅ% &
(
ÅÅ& '
data
ÅÅ' +
-
ÅÅ, -
$num
ÅÅ. /
)
ÅÅ/ 0
;
ÅÅ0 1
IO
ÇÇ 
.
ÇÇ 
	WriteLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ '
+
ÇÇ( )
result
ÇÇ* 0
)
ÇÇ0 1
;
ÇÇ1 2
}
ÉÉ 
else
ÑÑ 
{
ÖÖ 
IO
ÜÜ 
.
ÜÜ 
	WriteLine
ÜÜ 
(
ÜÜ 
$str
ÜÜ N
)
ÜÜN O
;
ÜÜO P
}
áá 
}
àà 	
}
ââ 
private
åå 
void
åå 
GoodB2G2
åå 
(
åå 
)
åå 
{
çç 
ulong
éé 
data
éé 
;
éé 
if
èè 

(
èè  
PRIVATE_CONST_TRUE
èè 
)
èè 
{
êê 	
data
íí 
=
íí 
IO
íí 
.
íí 
GetRandomULong
íí $
(
íí$ %
)
íí% &
;
íí& '
}
ìì 	
else
îî 
{
ïï 	
data
òò 
=
òò 
$num
òò 
;
òò 
}
ôô 	
if
öö 

(
öö  
PRIVATE_CONST_TRUE
öö 
)
öö 
{
õõ 	
if
ùù 
(
ùù 
data
ùù 
>
ùù 
ulong
ùù 
.
ùù 
MinValue
ùù %
)
ùù% &
{
ûû 
ulong
üü 
result
üü 
=
üü 
(
üü  
ulong
üü  %
)
üü% &
(
üü& '
data
üü' +
-
üü, -
$num
üü. /
)
üü/ 0
;
üü0 1
IO
†† 
.
†† 
	WriteLine
†† 
(
†† 
$str
†† '
+
††( )
result
††* 0
)
††0 1
;
††1 2
}
°° 
else
¢¢ 
{
££ 
IO
§§ 
.
§§ 
	WriteLine
§§ 
(
§§ 
$str
§§ N
)
§§N O
;
§§O P
}
•• 
}
¶¶ 	
}
ßß 
public
©© 

override
©© 
void
©© 
Good
©© 
(
©© 
)
©© 
{
™™ 
GoodG2B1
´´ 
(
´´ 
)
´´ 
;
´´ 
GoodG2B2
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
GoodB2G1
≠≠ 
(
≠≠ 
)
≠≠ 
;
≠≠ 
GoodB2G2
ÆÆ 
(
ÆÆ 
)
ÆÆ 
;
ÆÆ 
}
ØØ 
}±± 
}≤≤ ñ6
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_05.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_05 2
:3 4
AbstractTestCase5 E
{ 
private 
bool 
privateTrue 
= 
true #
;# $
private   
bool   
privateFalse   
=   
false    %
;  % &
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
ulong$$ 
data$$ 
;$$ 
if%% 

(%% 
privateTrue%% 
)%% 
{&& 	
data(( 
=(( 
IO(( 
.(( 
GetRandomULong(( $
((($ %
)((% &
;((& '
})) 	
else** 
{++ 	
data.. 
=.. 
$num.. 
;.. 
}// 	
if00 

(00 
privateTrue00 
)00 
{11 	
ulong33 
result33 
=33 
(33 
ulong33 !
)33! "
(33" #
data33# '
-33( )
$num33* +
)33+ ,
;33, -
IO44 
.44 
	WriteLine44 
(44 
$str44 #
+44$ %
result44& ,
)44, -
;44- .
}55 	
}66 
private:: 
void:: 
GoodG2B1:: 
(:: 
):: 
{;; 
ulong<< 
data<< 
;<< 
if== 

(== 
privateFalse== 
)== 
{>> 	
dataAA 
=AA 
$numAA 
;AA 
}BB 	
elseCC 
{DD 	
dataFF 
=FF 
$numFF 
;FF 
}GG 	
ifHH 

(HH 
privateTrueHH 
)HH 
{II 	
ulongKK 
resultKK 
=KK 
(KK 
ulongKK !
)KK! "
(KK" #
dataKK# '
-KK( )
$numKK* +
)KK+ ,
;KK, -
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL #
+LL$ %
resultLL& ,
)LL, -
;LL- .
}MM 	
}NN 
privateQQ 
voidQQ 
GoodG2B2QQ 
(QQ 
)QQ 
{RR 
ulongSS 
dataSS 
;SS 
ifTT 

(TT 
privateTrueTT 
)TT 
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
privateTrue__ 
)__ 
{`` 	
ulongbb 
resultbb 
=bb 
(bb 
ulongbb !
)bb! "
(bb" #
databb# '
-bb( )
$numbb* +
)bb+ ,
;bb, -
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc #
+cc$ %
resultcc& ,
)cc, -
;cc- .
}dd 	
}ee 
privatehh 
voidhh 
GoodB2G1hh 
(hh 
)hh 
{ii 
ulongjj 
datajj 
;jj 
ifkk 

(kk 
privateTruekk 
)kk 
{ll 	
datann 
=nn 
IOnn 
.nn 
GetRandomULongnn $
(nn$ %
)nn% &
;nn& '
}oo 	
elsepp 
{qq 	
datatt 
=tt 
$numtt 
;tt 
}uu 	
ifvv 

(vv 
privateFalsevv 
)vv 
{ww 	
IOyy 
.yy 
	WriteLineyy 
(yy 
$stryy /
)yy/ 0
;yy0 1
}zz 	
else{{ 
{|| 	
if~~ 
(~~ 
data~~ 
>~~ 
ulong~~ 
.~~ 
MinValue~~ %
)~~% &
{ 
ulong
ÄÄ 
result
ÄÄ 
=
ÄÄ 
(
ÄÄ  
ulong
ÄÄ  %
)
ÄÄ% &
(
ÄÄ& '
data
ÄÄ' +
-
ÄÄ, -
$num
ÄÄ. /
)
ÄÄ/ 0
;
ÄÄ0 1
IO
ÅÅ 
.
ÅÅ 
	WriteLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ '
+
ÅÅ( )
result
ÅÅ* 0
)
ÅÅ0 1
;
ÅÅ1 2
}
ÇÇ 
else
ÉÉ 
{
ÑÑ 
IO
ÖÖ 
.
ÖÖ 
	WriteLine
ÖÖ 
(
ÖÖ 
$str
ÖÖ N
)
ÖÖN O
;
ÖÖO P
}
ÜÜ 
}
áá 	
}
àà 
private
ãã 
void
ãã 
GoodB2G2
ãã 
(
ãã 
)
ãã 
{
åå 
ulong
çç 
data
çç 
;
çç 
if
éé 

(
éé 
privateTrue
éé 
)
éé 
{
èè 	
data
ëë 
=
ëë 
IO
ëë 
.
ëë 
GetRandomULong
ëë $
(
ëë$ %
)
ëë% &
;
ëë& '
}
íí 	
else
ìì 
{
îî 	
data
óó 
=
óó 
$num
óó 
;
óó 
}
òò 	
if
ôô 

(
ôô 
privateTrue
ôô 
)
ôô 
{
öö 	
if
úú 
(
úú 
data
úú 
>
úú 
ulong
úú 
.
úú 
MinValue
úú %
)
úú% &
{
ùù 
ulong
ûû 
result
ûû 
=
ûû 
(
ûû  
ulong
ûû  %
)
ûû% &
(
ûû& '
data
ûû' +
-
ûû, -
$num
ûû. /
)
ûû/ 0
;
ûû0 1
IO
üü 
.
üü 
	WriteLine
üü 
(
üü 
$str
üü '
+
üü( )
result
üü* 0
)
üü0 1
;
üü1 2
}
†† 
else
°° 
{
¢¢ 
IO
££ 
.
££ 
	WriteLine
££ 
(
££ 
$str
££ N
)
££N O
;
££O P
}
§§ 
}
•• 	
}
¶¶ 
public
®® 

override
®® 
void
®® 
Good
®® 
(
®® 
)
®® 
{
©© 
GoodG2B1
™™ 
(
™™ 
)
™™ 
;
™™ 
GoodG2B2
´´ 
(
´´ 
)
´´ 
;
´´ 
GoodB2G1
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
GoodB2G2
≠≠ 
(
≠≠ 
)
≠≠ 
;
≠≠ 
}
ÆÆ 
}∞∞ 
}±± ≈8
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_06.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_06 2
:3 4
AbstractTestCase5 E
{ 
private 
const 
int 
PRIVATE_CONST_FIVE (
=) *
$num+ ,
;, -
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
ulong## 
data## 
;## 
if$$ 

($$ 
PRIVATE_CONST_FIVE$$ 
==$$  
$num$$  !
)$$! "
{%% 	
data'' 
='' 
IO'' 
.'' 
GetRandomULong'' $
(''$ %
)''% &
;''& '
}(( 	
else)) 
{** 	
data-- 
=-- 
$num-- 
;-- 
}.. 	
if// 

(// 
PRIVATE_CONST_FIVE// 
==//  
$num//  !
)//! "
{00 	
ulong22 
result22 
=22 
(22 
ulong22 !
)22! "
(22" #
data22# '
-22( )
$num22* +
)22+ ,
;22, -
IO33 
.33 
	WriteLine33 
(33 
$str33 #
+33$ %
result33& ,
)33, -
;33- .
}44 	
}55 
private99 
void99 
GoodG2B199 
(99 
)99 
{:: 
ulong;; 
data;; 
;;; 
if<< 

(<< 
PRIVATE_CONST_FIVE<< 
!=<<  
$num<<  !
)<<! "
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
elseBB 
{CC 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
ifGG 

(GG 
PRIVATE_CONST_FIVEGG 
==GG  
$numGG  !
)GG! "
{HH 	
ulongJJ 
resultJJ 
=JJ 
(JJ 
ulongJJ !
)JJ! "
(JJ" #
dataJJ# '
-JJ( )
$numJJ* +
)JJ+ ,
;JJ, -
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK #
+KK$ %
resultKK& ,
)KK, -
;KK- .
}LL 	
}MM 
privatePP 
voidPP 
GoodG2B2PP 
(PP 
)PP 
{QQ 
ulongRR 
dataRR 
;RR 
ifSS 

(SS 
PRIVATE_CONST_FIVESS 
==SS  
$numSS  !
)SS! "
{TT 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
elseXX 
{YY 	
data\\ 
=\\ 
$num\\ 
;\\ 
}]] 	
if^^ 

(^^ 
PRIVATE_CONST_FIVE^^ 
==^^  
$num^^  !
)^^! "
{__ 	
ulongaa 
resultaa 
=aa 
(aa 
ulongaa !
)aa! "
(aa" #
dataaa# '
-aa( )
$numaa* +
)aa+ ,
;aa, -
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb #
+bb$ %
resultbb& ,
)bb, -
;bb- .
}cc 	
}dd 
privategg 
voidgg 
GoodB2G1gg 
(gg 
)gg 
{hh 
ulongii 
dataii 
;ii 
ifjj 

(jj 
PRIVATE_CONST_FIVEjj 
==jj  
$numjj  !
)jj! "
{kk 	
datamm 
=mm 
IOmm 
.mm 
GetRandomULongmm $
(mm$ %
)mm% &
;mm& '
}nn 	
elseoo 
{pp 	
datass 
=ss 
$numss 
;ss 
}tt 	
ifuu 

(uu 
PRIVATE_CONST_FIVEuu 
!=uu  
$numuu  !
)uu! "
{vv 	
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx /
)xx/ 0
;xx0 1
}yy 	
elsezz 
{{{ 	
if}} 
(}} 
data}} 
>}} 
ulong}} 
.}} 
MinValue}} %
)}}% &
{~~ 
ulong 
result 
= 
(  
ulong  %
)% &
(& '
data' +
-, -
$num. /
)/ 0
;0 1
IO
ÄÄ 
.
ÄÄ 
	WriteLine
ÄÄ 
(
ÄÄ 
$str
ÄÄ '
+
ÄÄ( )
result
ÄÄ* 0
)
ÄÄ0 1
;
ÄÄ1 2
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
	WriteLine
ÑÑ 
(
ÑÑ 
$str
ÑÑ N
)
ÑÑN O
;
ÑÑO P
}
ÖÖ 
}
ÜÜ 	
}
áá 
private
ää 
void
ää 
GoodB2G2
ää 
(
ää 
)
ää 
{
ãã 
ulong
åå 
data
åå 
;
åå 
if
çç 

(
çç  
PRIVATE_CONST_FIVE
çç 
==
çç  
$num
çç  !
)
çç! "
{
éé 	
data
êê 
=
êê 
IO
êê 
.
êê 
GetRandomULong
êê $
(
êê$ %
)
êê% &
;
êê& '
}
ëë 	
else
íí 
{
ìì 	
data
ññ 
=
ññ 
$num
ññ 
;
ññ 
}
óó 	
if
òò 

(
òò  
PRIVATE_CONST_FIVE
òò 
==
òò  
$num
òò  !
)
òò! "
{
ôô 	
if
õõ 
(
õõ 
data
õõ 
>
õõ 
ulong
õõ 
.
õõ 
MinValue
õõ %
)
õõ% &
{
úú 
ulong
ùù 
result
ùù 
=
ùù 
(
ùù  
ulong
ùù  %
)
ùù% &
(
ùù& '
data
ùù' +
-
ùù, -
$num
ùù. /
)
ùù/ 0
;
ùù0 1
IO
ûû 
.
ûû 
	WriteLine
ûû 
(
ûû 
$str
ûû '
+
ûû( )
result
ûû* 0
)
ûû0 1
;
ûû1 2
}
üü 
else
†† 
{
°° 
IO
¢¢ 
.
¢¢ 
	WriteLine
¢¢ 
(
¢¢ 
$str
¢¢ N
)
¢¢N O
;
¢¢O P
}
££ 
}
§§ 	
}
•• 
public
ßß 

override
ßß 
void
ßß 
Good
ßß 
(
ßß 
)
ßß 
{
®® 
GoodG2B1
©© 
(
©© 
)
©© 
;
©© 
GoodG2B2
™™ 
(
™™ 
)
™™ 
;
™™ 
GoodB2G1
´´ 
(
´´ 
)
´´ 
;
´´ 
GoodB2G2
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
}
≠≠ 
}ØØ 
}∞∞ Â7
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_07.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_07 2
:3 4
AbstractTestCase5 E
{ 
private 
int 
privateFive 
= 
$num 
;  
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
ulong## 
data## 
;## 
if$$ 

($$ 
privateFive$$ 
==$$ 
$num$$ 
)$$ 
{%% 	
data'' 
='' 
IO'' 
.'' 
GetRandomULong'' $
(''$ %
)''% &
;''& '
}(( 	
else)) 
{** 	
data-- 
=-- 
$num-- 
;-- 
}.. 	
if// 

(// 
privateFive// 
==// 
$num// 
)// 
{00 	
ulong22 
result22 
=22 
(22 
ulong22 !
)22! "
(22" #
data22# '
-22( )
$num22* +
)22+ ,
;22, -
IO33 
.33 
	WriteLine33 
(33 
$str33 #
+33$ %
result33& ,
)33, -
;33- .
}44 	
}55 
private99 
void99 
GoodG2B199 
(99 
)99 
{:: 
ulong;; 
data;; 
;;; 
if<< 

(<< 
privateFive<< 
!=<< 
$num<< 
)<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
elseBB 
{CC 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
ifGG 

(GG 
privateFiveGG 
==GG 
$numGG 
)GG 
{HH 	
ulongJJ 
resultJJ 
=JJ 
(JJ 
ulongJJ !
)JJ! "
(JJ" #
dataJJ# '
-JJ( )
$numJJ* +
)JJ+ ,
;JJ, -
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK #
+KK$ %
resultKK& ,
)KK, -
;KK- .
}LL 	
}MM 
privatePP 
voidPP 
GoodG2B2PP 
(PP 
)PP 
{QQ 
ulongRR 
dataRR 
;RR 
ifSS 

(SS 
privateFiveSS 
==SS 
$numSS 
)SS 
{TT 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
elseXX 
{YY 	
data\\ 
=\\ 
$num\\ 
;\\ 
}]] 	
if^^ 

(^^ 
privateFive^^ 
==^^ 
$num^^ 
)^^ 
{__ 	
ulongaa 
resultaa 
=aa 
(aa 
ulongaa !
)aa! "
(aa" #
dataaa# '
-aa( )
$numaa* +
)aa+ ,
;aa, -
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb #
+bb$ %
resultbb& ,
)bb, -
;bb- .
}cc 	
}dd 
privategg 
voidgg 
GoodB2G1gg 
(gg 
)gg 
{hh 
ulongii 
dataii 
;ii 
ifjj 

(jj 
privateFivejj 
==jj 
$numjj 
)jj 
{kk 	
datamm 
=mm 
IOmm 
.mm 
GetRandomULongmm $
(mm$ %
)mm% &
;mm& '
}nn 	
elseoo 
{pp 	
datass 
=ss 
$numss 
;ss 
}tt 	
ifuu 

(uu 
privateFiveuu 
!=uu 
$numuu 
)uu 
{vv 	
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx /
)xx/ 0
;xx0 1
}yy 	
elsezz 
{{{ 	
if}} 
(}} 
data}} 
>}} 
ulong}} 
.}} 
MinValue}} %
)}}% &
{~~ 
ulong 
result 
= 
(  
ulong  %
)% &
(& '
data' +
-, -
$num. /
)/ 0
;0 1
IO
ÄÄ 
.
ÄÄ 
	WriteLine
ÄÄ 
(
ÄÄ 
$str
ÄÄ '
+
ÄÄ( )
result
ÄÄ* 0
)
ÄÄ0 1
;
ÄÄ1 2
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
	WriteLine
ÑÑ 
(
ÑÑ 
$str
ÑÑ N
)
ÑÑN O
;
ÑÑO P
}
ÖÖ 
}
ÜÜ 	
}
áá 
private
ää 
void
ää 
GoodB2G2
ää 
(
ää 
)
ää 
{
ãã 
ulong
åå 
data
åå 
;
åå 
if
çç 

(
çç 
privateFive
çç 
==
çç 
$num
çç 
)
çç 
{
éé 	
data
êê 
=
êê 
IO
êê 
.
êê 
GetRandomULong
êê $
(
êê$ %
)
êê% &
;
êê& '
}
ëë 	
else
íí 
{
ìì 	
data
ññ 
=
ññ 
$num
ññ 
;
ññ 
}
óó 	
if
òò 

(
òò 
privateFive
òò 
==
òò 
$num
òò 
)
òò 
{
ôô 	
if
õõ 
(
õõ 
data
õõ 
>
õõ 
ulong
õõ 
.
õõ 
MinValue
õõ %
)
õõ% &
{
úú 
ulong
ùù 
result
ùù 
=
ùù 
(
ùù  
ulong
ùù  %
)
ùù% &
(
ùù& '
data
ùù' +
-
ùù, -
$num
ùù. /
)
ùù/ 0
;
ùù0 1
IO
ûû 
.
ûû 
	WriteLine
ûû 
(
ûû 
$str
ûû '
+
ûû( )
result
ûû* 0
)
ûû0 1
;
ûû1 2
}
üü 
else
†† 
{
°° 
IO
¢¢ 
.
¢¢ 
	WriteLine
¢¢ 
(
¢¢ 
$str
¢¢ N
)
¢¢N O
;
¢¢O P
}
££ 
}
§§ 	
}
•• 
public
ßß 

override
ßß 
void
ßß 
Good
ßß 
(
ßß 
)
ßß 
{
®® 
GoodG2B1
©© 
(
©© 
)
©© 
;
©© 
GoodG2B2
™™ 
(
™™ 
)
™™ 
;
™™ 
GoodB2G1
´´ 
(
´´ 
)
´´ 
;
´´ 
GoodB2G2
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
}
≠≠ 
}ØØ 
}∞∞ Ó:
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_08.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_08 2
:3 4
AbstractTestCase5 E
{ 
private 
static 
bool 
PrivateReturnsTrue *
(* +
)+ ,
{   
return!! 
true!! 
;!! 
}"" 
private$$ 
static$$ 
bool$$ 
PrivateReturnsFalse$$ +
($$+ ,
)$$, -
{%% 
return&& 
false&& 
;&& 
}'' 
public)) 

override)) 
void)) 
Bad)) 
()) 
))) 
{** 
ulong++ 
data++ 
;++ 
if,, 

(,, 
PrivateReturnsTrue,, 
(,, 
),,  
),,  !
{-- 	
data// 
=// 
IO// 
.// 
GetRandomULong// $
(//$ %
)//% &
;//& '
}00 	
else11 
{22 	
data55 
=55 
$num55 
;55 
}66 	
if77 

(77 
PrivateReturnsTrue77 
(77 
)77  
)77  !
{88 	
ulong:: 
result:: 
=:: 
(:: 
ulong:: !
)::! "
(::" #
data::# '
-::( )
$num::* +
)::+ ,
;::, -
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; #
+;;$ %
result;;& ,
);;, -
;;;- .
}<< 	
}== 
privateAA 
voidAA 
GoodG2B1AA 
(AA 
)AA 
{BB 
ulongCC 
dataCC 
;CC 
ifDD 

(DD 
PrivateReturnsFalseDD 
(DD  
)DD  !
)DD! "
{EE 	
dataHH 
=HH 
$numHH 
;HH 
}II 	
elseJJ 
{KK 	
dataMM 
=MM 
$numMM 
;MM 
}NN 	
ifOO 

(OO 
PrivateReturnsTrueOO 
(OO 
)OO  
)OO  !
{PP 	
ulongRR 
resultRR 
=RR 
(RR 
ulongRR !
)RR! "
(RR" #
dataRR# '
-RR( )
$numRR* +
)RR+ ,
;RR, -
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS #
+SS$ %
resultSS& ,
)SS, -
;SS- .
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
)XX 
{YY 
ulongZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
PrivateReturnsTrue[[ 
([[ 
)[[  
)[[  !
{\\ 	
data^^ 
=^^ 
$num^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
$numdd 
;dd 
}ee 	
ifff 

(ff 
PrivateReturnsTrueff 
(ff 
)ff  
)ff  !
{gg 	
ulongii 
resultii 
=ii 
(ii 
ulongii !
)ii! "
(ii" #
dataii# '
-ii( )
$numii* +
)ii+ ,
;ii, -
IOjj 
.jj 
	WriteLinejj 
(jj 
$strjj #
+jj$ %
resultjj& ,
)jj, -
;jj- .
}kk 	
}ll 
privateoo 
voidoo 
GoodB2G1oo 
(oo 
)oo 
{pp 
ulongqq 
dataqq 
;qq 
ifrr 

(rr 
PrivateReturnsTruerr 
(rr 
)rr  
)rr  !
{ss 	
datauu 
=uu 
IOuu 
.uu 
GetRandomULonguu $
(uu$ %
)uu% &
;uu& '
}vv 	
elseww 
{xx 	
data{{ 
={{ 
$num{{ 
;{{ 
}|| 	
if}} 

(}} 
PrivateReturnsFalse}} 
(}}  
)}}  !
)}}! "
{~~ 	
IO
ÄÄ 
.
ÄÄ 
	WriteLine
ÄÄ 
(
ÄÄ 
$str
ÄÄ /
)
ÄÄ/ 0
;
ÄÄ0 1
}
ÅÅ 	
else
ÇÇ 
{
ÉÉ 	
if
ÖÖ 
(
ÖÖ 
data
ÖÖ 
>
ÖÖ 
ulong
ÖÖ 
.
ÖÖ 
MinValue
ÖÖ %
)
ÖÖ% &
{
ÜÜ 
ulong
áá 
result
áá 
=
áá 
(
áá  
ulong
áá  %
)
áá% &
(
áá& '
data
áá' +
-
áá, -
$num
áá. /
)
áá/ 0
;
áá0 1
IO
àà 
.
àà 
	WriteLine
àà 
(
àà 
$str
àà '
+
àà( )
result
àà* 0
)
àà0 1
;
àà1 2
}
ââ 
else
ää 
{
ãã 
IO
åå 
.
åå 
	WriteLine
åå 
(
åå 
$str
åå N
)
ååN O
;
ååO P
}
çç 
}
éé 	
}
èè 
private
íí 
void
íí 
GoodB2G2
íí 
(
íí 
)
íí 
{
ìì 
ulong
îî 
data
îî 
;
îî 
if
ïï 

(
ïï  
PrivateReturnsTrue
ïï 
(
ïï 
)
ïï  
)
ïï  !
{
ññ 	
data
òò 
=
òò 
IO
òò 
.
òò 
GetRandomULong
òò $
(
òò$ %
)
òò% &
;
òò& '
}
ôô 	
else
öö 
{
õõ 	
data
ûû 
=
ûû 
$num
ûû 
;
ûû 
}
üü 	
if
†† 

(
††  
PrivateReturnsTrue
†† 
(
†† 
)
††  
)
††  !
{
°° 	
if
££ 
(
££ 
data
££ 
>
££ 
ulong
££ 
.
££ 
MinValue
££ %
)
££% &
{
§§ 
ulong
•• 
result
•• 
=
•• 
(
••  
ulong
••  %
)
••% &
(
••& '
data
••' +
-
••, -
$num
••. /
)
••/ 0
;
••0 1
IO
¶¶ 
.
¶¶ 
	WriteLine
¶¶ 
(
¶¶ 
$str
¶¶ '
+
¶¶( )
result
¶¶* 0
)
¶¶0 1
;
¶¶1 2
}
ßß 
else
®® 
{
©© 
IO
™™ 
.
™™ 
	WriteLine
™™ 
(
™™ 
$str
™™ N
)
™™N O
;
™™O P
}
´´ 
}
¨¨ 	
}
≠≠ 
public
ØØ 

override
ØØ 
void
ØØ 
Good
ØØ 
(
ØØ 
)
ØØ 
{
∞∞ 
GoodG2B1
±± 
(
±± 
)
±± 
;
±± 
GoodG2B2
≤≤ 
(
≤≤ 
)
≤≤ 
;
≤≤ 
GoodB2G1
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
GoodB2G2
¥¥ 
(
¥¥ 
)
¥¥ 
;
¥¥ 
}
µµ 
}∑∑ 
}∏∏ é7
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_09.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_09 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_TRUE #
)# $
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.**  
STATIC_READONLY_TRUE** #
)**# $
{++ 	
ulong-- 
result-- 
=-- 
(-- 
ulong-- !
)--! "
(--" #
data--# '
---( )
$num--* +
)--+ ,
;--, -
IO.. 
... 
	WriteLine.. 
(.. 
$str.. #
+..$ %
result..& ,
).., -
;..- .
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
ulong66 
data66 
;66 
if77 

(77 
IO77 
.77 !
STATIC_READONLY_FALSE77 $
)77$ %
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB  
STATIC_READONLY_TRUEBB #
)BB# $
{CC 	
ulongEE 
resultEE 
=EE 
(EE 
ulongEE !
)EE! "
(EE" #
dataEE# '
-EE( )
$numEE* +
)EE+ ,
;EE, -
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF #
+FF$ %
resultFF& ,
)FF, -
;FF- .
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
ulongMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN  
STATIC_READONLY_TRUENN #
)NN# $
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY  
STATIC_READONLY_TRUEYY #
)YY# $
{ZZ 	
ulong\\ 
result\\ 
=\\ 
(\\ 
ulong\\ !
)\\! "
(\\" #
data\\# '
-\\( )
$num\\* +
)\\+ ,
;\\, -
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] #
+]]$ %
result]]& ,
)]], -
;]]- .
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
ulongdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee  
STATIC_READONLY_TRUEee #
)ee# $
{ff 	
datahh 
=hh 
IOhh 
.hh 
GetRandomULonghh $
(hh$ %
)hh% &
;hh& '
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp !
STATIC_READONLY_FALSEpp $
)pp$ %
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
>xx 
ulongxx 
.xx 
MinValuexx %
)xx% &
{yy 
ulongzz 
resultzz 
=zz 
(zz  
ulongzz  %
)zz% &
(zz& '
datazz' +
-zz, -
$numzz. /
)zz/ 0
;zz0 1
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ '
+{{( )
result{{* 0
){{0 1
;{{1 2
}|| 
else}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str N
)N O
;O P
}
ÄÄ 
}
ÅÅ 	
}
ÇÇ 
private
ÖÖ 
void
ÖÖ 
GoodB2G2
ÖÖ 
(
ÖÖ 
)
ÖÖ 
{
ÜÜ 
ulong
áá 
data
áá 
;
áá 
if
àà 

(
àà 
IO
àà 
.
àà "
STATIC_READONLY_TRUE
àà #
)
àà# $
{
ââ 	
data
ãã 
=
ãã 
IO
ãã 
.
ãã 
GetRandomULong
ãã $
(
ãã$ %
)
ãã% &
;
ãã& '
}
åå 	
else
çç 
{
éé 	
data
ëë 
=
ëë 
$num
ëë 
;
ëë 
}
íí 	
if
ìì 

(
ìì 
IO
ìì 
.
ìì "
STATIC_READONLY_TRUE
ìì #
)
ìì# $
{
îî 	
if
ññ 
(
ññ 
data
ññ 
>
ññ 
ulong
ññ 
.
ññ 
MinValue
ññ %
)
ññ% &
{
óó 
ulong
òò 
result
òò 
=
òò 
(
òò  
ulong
òò  %
)
òò% &
(
òò& '
data
òò' +
-
òò, -
$num
òò. /
)
òò/ 0
;
òò0 1
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô '
+
ôô( )
result
ôô* 0
)
ôô0 1
;
ôô1 2
}
öö 
else
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù N
)
ùùN O
;
ùùO P
}
ûû 
}
üü 	
}
†† 
public
¢¢ 

override
¢¢ 
void
¢¢ 
Good
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
GoodG2B1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodG2B2
•• 
(
•• 
)
•• 
;
•• 
GoodB2G1
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G2
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 
}™™ 
}´´ ™6
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_10.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_10 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
IO 
. 

staticTrue 
) 
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.** 

staticTrue** 
)** 
{++ 	
ulong-- 
result-- 
=-- 
(-- 
ulong-- !
)--! "
(--" #
data--# '
---( )
$num--* +
)--+ ,
;--, -
IO.. 
... 
	WriteLine.. 
(.. 
$str.. #
+..$ %
result..& ,
).., -
;..- .
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
ulong66 
data66 
;66 
if77 

(77 
IO77 
.77 
staticFalse77 
)77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB 

staticTrueBB 
)BB 
{CC 	
ulongEE 
resultEE 
=EE 
(EE 
ulongEE !
)EE! "
(EE" #
dataEE# '
-EE( )
$numEE* +
)EE+ ,
;EE, -
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF #
+FF$ %
resultFF& ,
)FF, -
;FF- .
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
ulongMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN 

staticTrueNN 
)NN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY 

staticTrueYY 
)YY 
{ZZ 	
ulong\\ 
result\\ 
=\\ 
(\\ 
ulong\\ !
)\\! "
(\\" #
data\\# '
-\\( )
$num\\* +
)\\+ ,
;\\, -
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] #
+]]$ %
result]]& ,
)]], -
;]]- .
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
ulongdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee 

staticTrueee 
)ee 
{ff 	
datahh 
=hh 
IOhh 
.hh 
GetRandomULonghh $
(hh$ %
)hh% &
;hh& '
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp 
staticFalsepp 
)pp 
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
>xx 
ulongxx 
.xx 
MinValuexx %
)xx% &
{yy 
ulongzz 
resultzz 
=zz 
(zz  
ulongzz  %
)zz% &
(zz& '
datazz' +
-zz, -
$numzz. /
)zz/ 0
;zz0 1
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ '
+{{( )
result{{* 0
){{0 1
;{{1 2
}|| 
else}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str N
)N O
;O P
}
ÄÄ 
}
ÅÅ 	
}
ÇÇ 
private
ÖÖ 
void
ÖÖ 
GoodB2G2
ÖÖ 
(
ÖÖ 
)
ÖÖ 
{
ÜÜ 
ulong
áá 
data
áá 
;
áá 
if
àà 

(
àà 
IO
àà 
.
àà 

staticTrue
àà 
)
àà 
{
ââ 	
data
ãã 
=
ãã 
IO
ãã 
.
ãã 
GetRandomULong
ãã $
(
ãã$ %
)
ãã% &
;
ãã& '
}
åå 	
else
çç 
{
éé 	
data
ëë 
=
ëë 
$num
ëë 
;
ëë 
}
íí 	
if
ìì 

(
ìì 
IO
ìì 
.
ìì 

staticTrue
ìì 
)
ìì 
{
îî 	
if
ññ 
(
ññ 
data
ññ 
>
ññ 
ulong
ññ 
.
ññ 
MinValue
ññ %
)
ññ% &
{
óó 
ulong
òò 
result
òò 
=
òò 
(
òò  
ulong
òò  %
)
òò% &
(
òò& '
data
òò' +
-
òò, -
$num
òò. /
)
òò/ 0
;
òò0 1
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô '
+
ôô( )
result
ôô* 0
)
ôô0 1
;
ôô1 2
}
öö 
else
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù N
)
ùùN O
;
ùùO P
}
ûû 
}
üü 	
}
†† 
public
¢¢ 

override
¢¢ 
void
¢¢ 
Good
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
GoodG2B1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodG2B2
•• 
(
•• 
)
•• 
;
•• 
GoodB2G1
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G2
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 
}™™ 
}´´ §9
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_11.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_11 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
IO 
. 
StaticReturnsTrue  
(  !
)! "
)" #
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(**
 
IO** 
.** 
StaticReturnsTrue** 
(**  
)**  !
)**! "
{++ 	
ulong-- 
result-- 
=-- 
(-- 
ulong-- !
)--! "
(--" #
data--# '
---( )
$num--* +
)--+ ,
;--, -
IO.. 
... 
	WriteLine.. 
(.. 
$str.. #
+..$ %
result..& ,
).., -
;..- .
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
ulong66 
data66 
;66 
if77 

(77 
IO77 
.77 
StaticReturnsFalse77 !
(77! "
)77" #
)77# $
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB 
StaticReturnsTrueBB  
(BB  !
)BB! "
)BB" #
{CC 	
ulongEE 
resultEE 
=EE 
(EE 
ulongEE !
)EE! "
(EE" #
dataEE# '
-EE( )
$numEE* +
)EE+ ,
;EE, -
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF #
+FF$ %
resultFF& ,
)FF, -
;FF- .
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
ulongMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN 
StaticReturnsTrueNN  
(NN  !
)NN! "
)NN" #
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY 
StaticReturnsTrueYY  
(YY  !
)YY! "
)YY" #
{ZZ 	
ulong\\ 
result\\ 
=\\ 
(\\ 
ulong\\ !
)\\! "
(\\" #
data\\# '
-\\( )
$num\\* +
)\\+ ,
;\\, -
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] #
+]]$ %
result]]& ,
)]], -
;]]- .
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
ulongdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee 
StaticReturnsTrueee  
(ee  !
)ee! "
)ee" #
{ff 	
datahh 
=hh 
IOhh 
.hh 
GetRandomULonghh $
(hh$ %
)hh% &
;hh& '
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp 
StaticReturnsFalsepp !
(pp! "
)pp" #
)pp# $
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
>xx 
ulongxx 
.xx 
MinValuexx %
)xx% &
{yy 
ulongzz 
resultzz 
=zz 
(zz  
ulongzz  %
)zz% &
(zz& '
datazz' +
-zz, -
$numzz. /
)zz/ 0
;zz0 1
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ '
+{{( )
result{{* 0
){{0 1
;{{1 2
}|| 
else}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str N
)N O
;O P
}
ÄÄ 
}
ÅÅ 	
}
ÇÇ 
private
ÖÖ 
void
ÖÖ 
GoodB2G2
ÖÖ 
(
ÖÖ 
)
ÖÖ 
{
ÜÜ 
ulong
áá 
data
áá 
;
áá 
if
àà 

(
àà 
IO
àà 
.
àà 
StaticReturnsTrue
àà  
(
àà  !
)
àà! "
)
àà" #
{
ââ 	
data
ãã 
=
ãã 
IO
ãã 
.
ãã 
GetRandomULong
ãã $
(
ãã$ %
)
ãã% &
;
ãã& '
}
åå 	
else
çç 
{
éé 	
data
ëë 
=
ëë 
$num
ëë 
;
ëë 
}
íí 	
if
ìì 

(
ìì 
IO
ìì 
.
ìì 
StaticReturnsTrue
ìì  
(
ìì  !
)
ìì! "
)
ìì" #
{
îî 	
if
ññ 
(
ññ 
data
ññ 
>
ññ 
ulong
ññ 
.
ññ 
MinValue
ññ %
)
ññ% &
{
óó 
ulong
òò 
result
òò 
=
òò 
(
òò  
ulong
òò  %
)
òò% &
(
òò& '
data
òò' +
-
òò, -
$num
òò. /
)
òò/ 0
;
òò0 1
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô '
+
ôô( )
result
ôô* 0
)
ôô0 1
;
ôô1 2
}
öö 
else
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù N
)
ùùN O
;
ùùO P
}
ûû 
}
üü 	
}
†† 
public
¢¢ 

override
¢¢ 
void
¢¢ 
Good
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
GoodG2B1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodG2B2
•• 
(
•• 
)
•• 
;
•• 
GoodB2G1
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G2
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 
}™™ 
}´´  1
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_12.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_12 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

(
 
IO 
. $
StaticReturnsTrueOrFalse &
(& '
)' (
)( )
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

())
 
IO)) 
.)) $
StaticReturnsTrueOrFalse)) &
())& '
)))' (
)))( )
{** 	
ulong,, 
result,, 
=,, 
(,, 
ulong,, !
),,! "
(,," #
data,,# '
-,,( )
$num,,* +
),,+ ,
;,,, -
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- #
+--$ %
result--& ,
)--, -
;--- .
}.. 	
else// 
{00 	
if22 
(22 
data22 
>22 
ulong22 
.22 
MinValue22 %
)22% &
{33 
ulong44 
result44 
=44 
(44  
ulong44  %
)44% &
(44& '
data44' +
-44, -
$num44. /
)44/ 0
;440 1
IO55 
.55 
	WriteLine55 
(55 
$str55 '
+55( )
result55* 0
)550 1
;551 2
}66 
else77 
{88 
IO99 
.99 
	WriteLine99 
(99 
$str99 N
)99N O
;99O P
}:: 
};; 	
}<< 
privateAA 
voidAA 
GoodG2BAA 
(AA 
)AA 
{BB 
ulongCC 
dataCC 
;CC 
ifDD 

(DD
 
IODD 
.DD $
StaticReturnsTrueOrFalseDD &
(DD& '
)DD' (
)DD( )
{EE 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN
 
IONN 
.NN $
StaticReturnsTrueOrFalseNN &
(NN& '
)NN' (
)NN( )
{OO 	
ulongQQ 
resultQQ 
=QQ 
(QQ 
ulongQQ !
)QQ! "
(QQ" #
dataQQ# '
-QQ( )
$numQQ* +
)QQ+ ,
;QQ, -
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR #
+RR$ %
resultRR& ,
)RR, -
;RR- .
}SS 	
elseTT 
{UU 	
ulongWW 
resultWW 
=WW 
(WW 
ulongWW !
)WW! "
(WW" #
dataWW# '
-WW( )
$numWW* +
)WW+ ,
;WW, -
IOXX 
.XX 
	WriteLineXX 
(XX 
$strXX #
+XX$ %
resultXX& ,
)XX, -
;XX- .
}YY 	
}ZZ 
private^^ 
void^^ 
GoodB2G^^ 
(^^ 
)^^ 
{__ 
ulong`` 
data`` 
;`` 
ifaa 

(aa
 
IOaa 
.aa $
StaticReturnsTrueOrFalseaa &
(aa& '
)aa' (
)aa( )
{bb 	
datadd 
=dd 
IOdd 
.dd 
GetRandomULongdd $
(dd$ %
)dd% &
;dd& '
}ee 	
elseff 
{gg 	
dataii 
=ii 
IOii 
.ii 
GetRandomULongii $
(ii$ %
)ii% &
;ii& '
}jj 	
ifkk 

(kk
 
IOkk 
.kk $
StaticReturnsTrueOrFalsekk &
(kk& '
)kk' (
)kk( )
{ll 	
ifnn 
(nn 
datann 
>nn 
ulongnn 
.nn 
MinValuenn %
)nn% &
{oo 
ulongpp 
resultpp 
=pp 
(pp  
ulongpp  %
)pp% &
(pp& '
datapp' +
-pp, -
$numpp. /
)pp/ 0
;pp0 1
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq '
+qq( )
resultqq* 0
)qq0 1
;qq1 2
}rr 
elsess 
{tt 
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu N
)uuN O
;uuO P
}vv 
}ww 	
elsexx 
{yy 	
if{{ 
({{ 
data{{ 
>{{ 
ulong{{ 
.{{ 
MinValue{{ %
){{% &
{|| 
ulong}} 
result}} 
=}} 
(}}  
ulong}}  %
)}}% &
(}}& '
data}}' +
-}}, -
$num}}. /
)}}/ 0
;}}0 1
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ '
+~~( )
result~~* 0
)~~0 1
;~~1 2
} 
else
ÄÄ 
{
ÅÅ 
IO
ÇÇ 
.
ÇÇ 
	WriteLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ N
)
ÇÇN O
;
ÇÇO P
}
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
public
áá 

override
áá 
void
áá 
Good
áá 
(
áá 
)
áá 
{
ââ 
GoodG2B
ää 
(
ää 
)
ää 
;
ää 
GoodB2G
ãã 
(
ãã 
)
ãã 
;
ãã 
}
åå 
}éé 
}èè Ë9
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_13.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_13 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_FIVE #
==# %
$num% &
)& '
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.**  
STATIC_READONLY_FIVE** #
==**# %
$num**% &
)**& '
{++ 	
ulong-- 
result-- 
=-- 
(-- 
ulong-- !
)--! "
(--" #
data--# '
---( )
$num--* +
)--+ ,
;--, -
IO.. 
... 
	WriteLine.. 
(.. 
$str.. #
+..$ %
result..& ,
).., -
;..- .
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
ulong66 
data66 
;66 
if77 

(77 
IO77 
.77  
STATIC_READONLY_FIVE77 #
!=77# %
$num77% &
)77& '
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB  
STATIC_READONLY_FIVEBB #
==BB# %
$numBB% &
)BB& '
{CC 	
ulongEE 
resultEE 
=EE 
(EE 
ulongEE !
)EE! "
(EE" #
dataEE# '
-EE( )
$numEE* +
)EE+ ,
;EE, -
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF #
+FF$ %
resultFF& ,
)FF, -
;FF- .
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
ulongMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN  
STATIC_READONLY_FIVENN #
==NN# %
$numNN% &
)NN& '
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY  
STATIC_READONLY_FIVEYY #
==YY# %
$numYY% &
)YY& '
{ZZ 	
ulong\\ 
result\\ 
=\\ 
(\\ 
ulong\\ !
)\\! "
(\\" #
data\\# '
-\\( )
$num\\* +
)\\+ ,
;\\, -
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] #
+]]$ %
result]]& ,
)]], -
;]]- .
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
ulongdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee  
STATIC_READONLY_FIVEee #
==ee# %
$numee% &
)ee& '
{ff 	
datahh 
=hh 
IOhh 
.hh 
GetRandomULonghh $
(hh$ %
)hh% &
;hh& '
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp  
STATIC_READONLY_FIVEpp #
!=pp# %
$numpp% &
)pp& '
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
>xx 
ulongxx 
.xx 
MinValuexx %
)xx% &
{yy 
ulongzz 
resultzz 
=zz 
(zz  
ulongzz  %
)zz% &
(zz& '
datazz' +
-zz, -
$numzz. /
)zz/ 0
;zz0 1
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ '
+{{( )
result{{* 0
){{0 1
;{{1 2
}|| 
else}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str N
)N O
;O P
}
ÄÄ 
}
ÅÅ 	
}
ÇÇ 
private
ÖÖ 
void
ÖÖ 
GoodB2G2
ÖÖ 
(
ÖÖ 
)
ÖÖ 
{
ÜÜ 
ulong
áá 
data
áá 
;
áá 
if
àà 

(
àà 
IO
àà 
.
àà "
STATIC_READONLY_FIVE
àà #
==
àà# %
$num
àà% &
)
àà& '
{
ââ 	
data
ãã 
=
ãã 
IO
ãã 
.
ãã 
GetRandomULong
ãã $
(
ãã$ %
)
ãã% &
;
ãã& '
}
åå 	
else
çç 
{
éé 	
data
ëë 
=
ëë 
$num
ëë 
;
ëë 
}
íí 	
if
ìì 

(
ìì 
IO
ìì 
.
ìì "
STATIC_READONLY_FIVE
ìì #
==
ìì# %
$num
ìì% &
)
ìì& '
{
îî 	
if
ññ 
(
ññ 
data
ññ 
>
ññ 
ulong
ññ 
.
ññ 
MinValue
ññ %
)
ññ% &
{
óó 
ulong
òò 
result
òò 
=
òò 
(
òò  
ulong
òò  %
)
òò% &
(
òò& '
data
òò' +
-
òò, -
$num
òò. /
)
òò/ 0
;
òò0 1
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô '
+
ôô( )
result
ôô* 0
)
ôô0 1
;
ôô1 2
}
öö 
else
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù N
)
ùùN O
;
ùùO P
}
ûû 
}
üü 	
}
†† 
public
¢¢ 

override
¢¢ 
void
¢¢ 
Good
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
GoodG2B1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodG2B2
•• 
(
•• 
)
•• 
;
•• 
GoodB2G1
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G2
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 
}™™ 
}´´ Ñ9
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_14.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_14 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
if 

( 
IO 
. 

staticFive 
== 
$num 
) 
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.** 

staticFive** 
==** 
$num** 
)** 
{++ 	
ulong-- 
result-- 
=-- 
(-- 
ulong-- !
)--! "
(--" #
data--# '
---( )
$num--* +
)--+ ,
;--, -
IO.. 
... 
	WriteLine.. 
(.. 
$str.. #
+..$ %
result..& ,
).., -
;..- .
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
ulong66 
data66 
;66 
if77 

(77 
IO77 
.77 

staticFive77 
!=77 
$num77 
)77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB 

staticFiveBB 
==BB 
$numBB 
)BB 
{CC 	
ulongEE 
resultEE 
=EE 
(EE 
ulongEE !
)EE! "
(EE" #
dataEE# '
-EE( )
$numEE* +
)EE+ ,
;EE, -
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF #
+FF$ %
resultFF& ,
)FF, -
;FF- .
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
ulongMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN 

staticFiveNN 
==NN 
$numNN 
)NN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY 

staticFiveYY 
==YY 
$numYY 
)YY 
{ZZ 	
ulong\\ 
result\\ 
=\\ 
(\\ 
ulong\\ !
)\\! "
(\\" #
data\\# '
-\\( )
$num\\* +
)\\+ ,
;\\, -
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] #
+]]$ %
result]]& ,
)]], -
;]]- .
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
ulongdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee 

staticFiveee 
==ee 
$numee 
)ee 
{ff 	
datahh 
=hh 
IOhh 
.hh 
GetRandomULonghh $
(hh$ %
)hh% &
;hh& '
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp 

staticFivepp 
!=pp 
$numpp 
)pp 
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
>xx 
ulongxx 
.xx 
MinValuexx %
)xx% &
{yy 
ulongzz 
resultzz 
=zz 
(zz  
ulongzz  %
)zz% &
(zz& '
datazz' +
-zz, -
$numzz. /
)zz/ 0
;zz0 1
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ '
+{{( )
result{{* 0
){{0 1
;{{1 2
}|| 
else}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str N
)N O
;O P
}
ÄÄ 
}
ÅÅ 	
}
ÇÇ 
private
ÖÖ 
void
ÖÖ 
GoodB2G2
ÖÖ 
(
ÖÖ 
)
ÖÖ 
{
ÜÜ 
ulong
áá 
data
áá 
;
áá 
if
àà 

(
àà 
IO
àà 
.
àà 

staticFive
àà 
==
àà 
$num
àà 
)
àà 
{
ââ 	
data
ãã 
=
ãã 
IO
ãã 
.
ãã 
GetRandomULong
ãã $
(
ãã$ %
)
ãã% &
;
ãã& '
}
åå 	
else
çç 
{
éé 	
data
ëë 
=
ëë 
$num
ëë 
;
ëë 
}
íí 	
if
ìì 

(
ìì 
IO
ìì 
.
ìì 

staticFive
ìì 
==
ìì 
$num
ìì 
)
ìì 
{
îî 	
if
ññ 
(
ññ 
data
ññ 
>
ññ 
ulong
ññ 
.
ññ 
MinValue
ññ %
)
ññ% &
{
óó 
ulong
òò 
result
òò 
=
òò 
(
òò  
ulong
òò  %
)
òò% &
(
òò& '
data
òò' +
-
òò, -
$num
òò. /
)
òò/ 0
;
òò0 1
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô '
+
ôô( )
result
ôô* 0
)
ôô0 1
;
ôô1 2
}
öö 
else
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù N
)
ùùN O
;
ùùO P
}
ûû 
}
üü 	
}
†† 
public
¢¢ 

override
¢¢ 
void
¢¢ 
Good
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
GoodG2B1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodG2B2
•• 
(
•• 
)
•• 
;
•• 
GoodB2G1
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G2
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 
}™™ 
}´´ –B
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_15.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_15 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
switch 
( 
$num 
) 
{   	
case!! 
$num!! 
:!! 
data## 
=## 
IO## 
.## 
GetRandomULong## $
(##$ %
)##% &
;##& '
break$$ 
;$$ 
default%% 
:%% 
data(( 
=(( 
$num(( 
;(( 
break)) 
;)) 
}** 	
switch++ 
(++ 
$num++ 
)++ 
{,, 	
case-- 
$num-- 
:-- 
ulong// 
result// 
=// 
(// 
ulong// !
)//! "
(//" #
data//# '
-//( )
$num//* +
)//+ ,
;//, -
IO00 
.00 
	WriteLine00 
(00 
$str00 #
+00$ %
result00& ,
)00, -
;00- .
break11 
;11 
default22 
:22 
IO44 
.44 
	WriteLine44 
(44 
$str44 /
)44/ 0
;440 1
break55 
;55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
);; 
{<< 
ulong== 
data== 
;== 
switch>> 
(>> 
$num>> 
)>> 
{?? 	
case@@ 
$num@@ 
:@@ 
dataCC 
=CC 
$numCC 
;CC 
breakDD 
;DD 
defaultEE 
:EE 
dataGG 
=GG 
$numGG 
;GG 
breakHH 
;HH 
}II 	
switchJJ 
(JJ 
$numJJ 
)JJ 
{KK 	
caseLL 
$numLL 
:LL 
ulongNN 
resultNN 
=NN 
(NN 
ulongNN !
)NN! "
(NN" #
dataNN# '
-NN( )
$numNN* +
)NN+ ,
;NN, -
IOOO 
.OO 
	WriteLineOO 
(OO 
$strOO #
+OO$ %
resultOO& ,
)OO, -
;OO- .
breakPP 
;PP 
defaultQQ 
:QQ 
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS /
)SS/ 0
;SS0 1
breakTT 
;TT 
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
)YY 
{ZZ 
ulong[[ 
data[[ 
;[[ 
switch\\ 
(\\ 
$num\\ 
)\\ 
{]] 	
case^^ 
$num^^ 
:^^ 
data`` 
=`` 
$num`` 
;`` 
breakaa 
;aa 
defaultbb 
:bb 
dataee 
=ee 
$numee 
;ee 
breakff 
;ff 
}gg 	
switchhh 
(hh 
$numhh 
)hh 
{ii 	
casejj 
$numjj 
:jj 
ulongll 
resultll 
=ll 
(ll 
ulongll !
)ll! "
(ll" #
datall# '
-ll( )
$numll* +
)ll+ ,
;ll, -
IOmm 
.mm 
	WriteLinemm 
(mm 
$strmm #
+mm$ %
resultmm& ,
)mm, -
;mm- .
breaknn 
;nn 
defaultoo 
:oo 
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
breakrr 
;rr 
}ss 	
}tt 
privateww 
voidww 
GoodB2G1ww 
(ww 
)ww 
{xx 
ulongyy 
datayy 
;yy 
switchzz 
(zz 
$numzz 
)zz 
{{{ 	
case|| 
$num|| 
:|| 
data~~ 
=~~ 
IO~~ 
.~~ 
GetRandomULong~~ $
(~~$ %
)~~% &
;~~& '
break 
; 
default
ÄÄ 
:
ÄÄ 
data
ÉÉ 
=
ÉÉ 
$num
ÉÉ 
;
ÉÉ 
break
ÑÑ 
;
ÑÑ 
}
ÖÖ 	
switch
ÜÜ 
(
ÜÜ 
$num
ÜÜ 
)
ÜÜ 
{
áá 	
case
àà 
$num
àà 
:
àà 
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
break
ãã 
;
ãã 
default
åå 
:
åå 
if
éé 
(
éé 
data
éé 
>
éé 
ulong
éé 
.
éé 
MinValue
éé %
)
éé% &
{
èè 
ulong
êê 
result
êê 
=
êê 
(
êê  
ulong
êê  %
)
êê% &
(
êê& '
data
êê' +
-
êê, -
$num
êê. /
)
êê/ 0
;
êê0 1
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë '
+
ëë( )
result
ëë* 0
)
ëë0 1
;
ëë1 2
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï N
)
ïïN O
;
ïïO P
}
ññ 
break
óó 
;
óó 
}
òò 	
}
ôô 
private
úú 
void
úú 
GoodB2G2
úú 
(
úú 
)
úú 
{
ùù 
ulong
ûû 
data
ûû 
;
ûû 
switch
üü 
(
üü 
$num
üü 
)
üü 
{
†† 	
case
°° 
$num
°° 
:
°° 
data
££ 
=
££ 
IO
££ 
.
££ 
GetRandomULong
££ $
(
££$ %
)
££% &
;
££& '
break
§§ 
;
§§ 
default
•• 
:
•• 
data
®® 
=
®® 
$num
®® 
;
®® 
break
©© 
;
©© 
}
™™ 	
switch
´´ 
(
´´ 
$num
´´ 
)
´´ 
{
¨¨ 	
case
≠≠ 
$num
≠≠ 
:
≠≠ 
if
ØØ 
(
ØØ 
data
ØØ 
>
ØØ 
ulong
ØØ 
.
ØØ 
MinValue
ØØ %
)
ØØ% &
{
∞∞ 
ulong
±± 
result
±± 
=
±± 
(
±±  
ulong
±±  %
)
±±% &
(
±±& '
data
±±' +
-
±±, -
$num
±±. /
)
±±/ 0
;
±±0 1
IO
≤≤ 
.
≤≤ 
	WriteLine
≤≤ 
(
≤≤ 
$str
≤≤ '
+
≤≤( )
result
≤≤* 0
)
≤≤0 1
;
≤≤1 2
}
≥≥ 
else
¥¥ 
{
µµ 
IO
∂∂ 
.
∂∂ 
	WriteLine
∂∂ 
(
∂∂ 
$str
∂∂ N
)
∂∂N O
;
∂∂O P
}
∑∑ 
break
∏∏ 
;
∏∏ 
default
ππ 
:
ππ 
IO
ªª 
.
ªª 
	WriteLine
ªª 
(
ªª 
$str
ªª /
)
ªª/ 0
;
ªª0 1
break
ºº 
;
ºº 
}
ΩΩ 	
}
ææ 
public
¿¿ 

override
¿¿ 
void
¿¿ 
Good
¿¿ 
(
¿¿ 
)
¿¿ 
{
¡¡ 
GoodG2B1
¬¬ 
(
¬¬ 
)
¬¬ 
;
¬¬ 
GoodG2B2
√√ 
(
√√ 
)
√√ 
;
√√ 
GoodB2G1
ƒƒ 
(
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodB2G2
≈≈ 
(
≈≈ 
)
≈≈ 
;
≈≈ 
}
∆∆ 
}»» 
}…… ®
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_16.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_16 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
while 
( 
true 
) 
{   	
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
break## 
;## 
}$$ 	
while%% 
(%% 
true%% 
)%% 
{&& 	
ulong(( 
result(( 
=(( 
((( 
ulong(( !
)((! "
(((" #
data((# '
-((( )
$num((* +
)((+ ,
;((, -
IO)) 
.)) 
	WriteLine)) 
()) 
$str)) #
+))$ %
result))& ,
))), -
;))- .
break** 
;** 
}++ 	
},, 
private00 
void00 
GoodG2B00 
(00 
)00 
{11 
ulong22 
data22 
;22 
while33 
(33 
true33 
)33 
{44 	
data66 
=66 
$num66 
;66 
break77 
;77 
}88 	
while99 
(99 
true99 
)99 
{:: 	
ulong<< 
result<< 
=<< 
(<< 
ulong<< !
)<<! "
(<<" #
data<<# '
-<<( )
$num<<* +
)<<+ ,
;<<, -
IO== 
.== 
	WriteLine== 
(== 
$str== #
+==$ %
result==& ,
)==, -
;==- .
break>> 
;>> 
}?? 	
}@@ 
privateCC 
voidCC 
GoodB2GCC 
(CC 
)CC 
{DD 
ulongEE 
dataEE 
;EE 
whileFF 
(FF 
trueFF 
)FF 
{GG 	
dataII 
=II 
IOII 
.II 
GetRandomULongII $
(II$ %
)II% &
;II& '
breakJJ 
;JJ 
}KK 	
whileLL 
(LL 
trueLL 
)LL 
{MM 	
ifOO 
(OO 
dataOO 
>OO 
ulongOO 
.OO 
MinValueOO %
)OO% &
{PP 
ulongQQ 
resultQQ 
=QQ 
(QQ  
ulongQQ  %
)QQ% &
(QQ& '
dataQQ' +
-QQ, -
$numQQ. /
)QQ/ 0
;QQ0 1
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR '
+RR( )
resultRR* 0
)RR0 1
;RR1 2
}SS 
elseTT 
{UU 
IOVV 
.VV 
	WriteLineVV 
(VV 
$strVV N
)VVN O
;VVO P
}WW 
breakXX 
;XX 
}YY 	
}ZZ 
public\\ 

override\\ 
void\\ 
Good\\ 
(\\ 
)\\ 
{]] 
GoodG2B^^ 
(^^ 
)^^ 
;^^ 
GoodB2G__ 
(__ 
)__ 
;__ 
}`` 
}bb 
}cc á
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_17.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_17 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data$$ 
=$$ 
IO$$ 
.$$ 
GetRandomULong$$  
($$  !
)$$! "
;$$" #
for%% 
(%% 
int%% 
j%% 
=%% 
$num%% 
;%% 
j%% 
<%% 
$num%% 
;%% 
j%%  
++%%  "
)%%" #
{&& 	
ulong(( 
result(( 
=(( 
((( 
ulong(( !
)((! "
(((" #
data((# '
-((( )
$num((* +
)((+ ,
;((, -
IO)) 
.)) 
	WriteLine)) 
()) 
$str)) #
+))$ %
result))& ,
))), -
;))- .
}** 	
}++ 
private// 
void// 
GoodG2B// 
(// 
)// 
{00 
ulong11 
data11 
;11 
data33 
=33 
$num33 
;33 
for44 
(44 
int44 
j44 
=44 
$num44 
;44 
j44 
<44 
$num44 
;44 
j44  
++44  "
)44" #
{55 	
ulong77 
result77 
=77 
(77 
ulong77 !
)77! "
(77" #
data77# '
-77( )
$num77* +
)77+ ,
;77, -
IO88 
.88 
	WriteLine88 
(88 
$str88 #
+88$ %
result88& ,
)88, -
;88- .
}99 	
}:: 
private== 
void== 
GoodB2G== 
(== 
)== 
{>> 
ulong?? 
data?? 
;?? 
dataAA 
=AA 
IOAA 
.AA 
GetRandomULongAA  
(AA  !
)AA! "
;AA" #
forBB 
(BB 
intBB 
kBB 
=BB 
$numBB 
;BB 
kBB 
<BB 
$numBB 
;BB 
kBB  
++BB  "
)BB" #
{CC 	
ifEE 
(EE 
dataEE 
>EE 
ulongEE 
.EE 
MinValueEE %
)EE% &
{FF 
ulongGG 
resultGG 
=GG 
(GG  
ulongGG  %
)GG% &
(GG& '
dataGG' +
-GG, -
$numGG. /
)GG/ 0
;GG0 1
IOHH 
.HH 
	WriteLineHH 
(HH 
$strHH '
+HH( )
resultHH* 0
)HH0 1
;HH1 2
}II 
elseJJ 
{KK 
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL N
)LLN O
;LLO P
}MM 
}NN 	
}OO 
publicQQ 

overrideQQ 
voidQQ 
GoodQQ 
(QQ 
)QQ 
{RR 
GoodG2BSS 
(SS 
)SS 
;SS 
GoodB2GTT 
(TT 
)TT 
;TT 
}UU 
}WW 
}XX ≤2
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_21.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_21 2
:3 4
AbstractTestCase5 E
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public 

override 
void 
Bad 
( 
) 
{   
ulong!! 
data!! 
;!! 
data## 
=## 
IO## 
.## 
GetRandomULong##  
(##  !
)##! "
;##" #

badPrivate$$ 
=$$ 
true$$ 
;$$ 
BadSink%% 
(%% 
data%% 
)%% 
;%% 
}&& 
private(( 
void(( 
BadSink(( 
((( 
ulong(( 
data(( #
)(($ %
{)) 
if** 

(** 

badPrivate** 
)** 
{++ 	
ulong-- 
result-- 
=-- 
(-- 
ulong-- !
)--! "
(--" #
data--# '
---( )
$num--* +
)--+ ,
;--, -
IO.. 
... 
	WriteLine.. 
(.. 
$str.. #
+..$ %
result..& ,
).., -
;..- .
}// 	
}00 
private33 
bool33 
goodB2G1Private33  
=33! "
false33# (
;33( )
private44 
bool44 
goodB2G2Private44  
=44! "
false44# (
;44( )
private55 
bool55 
goodG2BPrivate55 
=55  !
false55" '
;55' (
public77 

override77 
void77 
Good77 
(77 
)77 
{88 
GoodB2G199 
(99 
)99 
;99 
GoodB2G2:: 
(:: 
):: 
;:: 
GoodG2B;; 
(;; 
);; 
;;; 
}<< 
private?? 
void?? 
GoodB2G1?? 
(?? 
)?? 
{@@ 
ulongAA 
dataAA 
;AA 
dataCC 
=CC 
IOCC 
.CC 
GetRandomULongCC  
(CC  !
)CC! "
;CC" #
goodB2G1PrivateDD 
=DD 
falseDD 
;DD  
GoodB2G1SinkEE 
(EE 
dataEE 
)EE 
;EE 
}FF 
privateHH 
voidHH 
GoodB2G1SinkHH 
(HH 
ulongHH #
dataHH$ (
)HH) *
{II 
ifJJ 

(JJ 
goodB2G1PrivateJJ 
)JJ 
{KK 	
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM /
)MM/ 0
;MM0 1
}NN 	
elseOO 
{PP 	
ifRR 
(RR 
dataRR 
>RR 
ulongRR 
.RR 
MinValueRR %
)RR% &
{SS 
ulongTT 
resultTT 
=TT 
(TT  
ulongTT  %
)TT% &
(TT& '
dataTT' +
-TT, -
$numTT. /
)TT/ 0
;TT0 1
IOUU 
.UU 
	WriteLineUU 
(UU 
$strUU '
+UU( )
resultUU* 0
)UU0 1
;UU1 2
}VV 
elseWW 
{XX 
IOYY 
.YY 
	WriteLineYY 
(YY 
$strYY N
)YYN O
;YYO P
}ZZ 
}[[ 	
}\\ 
private__ 
void__ 
GoodB2G2__ 
(__ 
)__ 
{`` 
ulongaa 
dataaa 
;aa 
datacc 
=cc 
IOcc 
.cc 
GetRandomULongcc  
(cc  !
)cc! "
;cc" #
goodB2G2Privatedd 
=dd 
truedd 
;dd 
GoodB2G2Sinkee 
(ee 
dataee 
)ee 
;ee 
}ff 
privatehh 
voidhh 
GoodB2G2Sinkhh 
(hh 
ulonghh #
datahh$ (
)hh) *
{ii 
ifjj 

(jj 
goodB2G2Privatejj 
)jj 
{kk 	
ifmm 
(mm 
datamm 
>mm 
ulongmm 
.mm 
MinValuemm %
)mm% &
{nn 
ulongoo 
resultoo 
=oo 
(oo  
ulongoo  %
)oo% &
(oo& '
dataoo' +
-oo, -
$numoo. /
)oo/ 0
;oo0 1
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp '
+pp( )
resultpp* 0
)pp0 1
;pp1 2
}qq 
elserr 
{ss 
IOtt 
.tt 
	WriteLinett 
(tt 
$strtt N
)ttN O
;ttO P
}uu 
}vv 	
}ww 
privatezz 
voidzz 
GoodG2Bzz 
(zz 
)zz 
{{{ 
ulong|| 
data|| 
;|| 
data~~ 
=~~ 
$num~~ 
;~~ 
goodG2BPrivate 
= 
true 
; 
GoodG2BSink
ÄÄ 
(
ÄÄ 
data
ÄÄ 
)
ÄÄ 
;
ÄÄ 
}
ÅÅ 
private
ÉÉ 
void
ÉÉ 
GoodG2BSink
ÉÉ 
(
ÉÉ 
ulong
ÉÉ "
data
ÉÉ# '
)
ÉÉ( )
{
ÑÑ 
if
ÖÖ 

(
ÖÖ 
goodG2BPrivate
ÖÖ 
)
ÖÖ 
{
ÜÜ 	
ulong
àà 
result
àà 
=
àà 
(
àà 
ulong
àà !
)
àà! "
(
àà" #
data
àà# '
-
àà( )
$num
àà* +
)
àà+ ,
;
àà, -
IO
ââ 
.
ââ 
	WriteLine
ââ 
(
ââ 
$str
ââ #
+
ââ$ %
result
ââ& ,
)
ââ, -
;
ââ- .
}
ää 	
}
ãã 
}çç 
}éé ß
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_22a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_22a 3
:4 5
AbstractTestCase6 F
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
= 
$num 
; 
data!! 
=!! 
IO!! 
.!! 
GetRandomULong!!  
(!!  !
)!!! "
;!!" #
badPublicStatic"" 
="" 
true"" 
;"" 9
-CWE191_Integer_Underflow__UInt64_rand_sub_22b## 5
.##5 6
BadSink##6 =
(##= >
data##> B
)##C D
;##D E
}$$ 
public'' 

static'' 
bool''  
goodB2G1PublicStatic'' +
='', -
false''. 3
;''3 4
public(( 

static(( 
bool((  
goodB2G2PublicStatic(( +
=((, -
false((. 3
;((3 4
public)) 

static)) 
bool)) 
goodG2BPublicStatic)) *
=))+ ,
false))- 2
;))2 3
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodB2G1-- 
(-- 
)-- 
;-- 
GoodB2G2.. 
(.. 
).. 
;.. 
GoodG2B// 
(// 
)// 
;// 
}00 
private33 
void33 
GoodB2G133 
(33 
)33 
{44 
ulong55 
data55 
=55 
$num55 
;55 
data77 
=77 
IO77 
.77 
GetRandomULong77  
(77  !
)77! "
;77" # 
goodB2G1PublicStatic88 
=88 
false88 $
;88$ %9
-CWE191_Integer_Underflow__UInt64_rand_sub_22b99 5
.995 6
GoodB2G1Sink996 B
(99B C
data99C G
)99H I
;99I J
}:: 
private== 
void== 
GoodB2G2== 
(== 
)== 
{>> 
ulong?? 
data?? 
=?? 
$num?? 
;?? 
dataAA 
=AA 
IOAA 
.AA 
GetRandomULongAA  
(AA  !
)AA! "
;AA" # 
goodB2G2PublicStaticBB 
=BB 
trueBB #
;BB# $9
-CWE191_Integer_Underflow__UInt64_rand_sub_22bCC 5
.CC5 6
GoodB2G2SinkCC6 B
(CCB C
dataCCC G
)CCH I
;CCI J
}DD 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
ulongII 
dataII 
=II 
$numII 
;II 
dataKK 
=KK 
$numKK 
;KK 
goodG2BPublicStaticLL 
=LL 
trueLL "
;LL" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_22bMM 5
.MM5 6
GoodG2BSinkMM6 A
(MMA B
dataMMB F
)MMG H
;MMH I
}NN 
}PP 
}QQ ç"
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_22b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_22b 3
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 
if 

( 9
-CWE191_Integer_Underflow__UInt64_rand_sub_22a 9
.9 :
badPublicStatic: I
)I J
{ 	
ulong!! 
result!! 
=!! 
(!! 
ulong!! !
)!!! "
(!!" #
data!!# '
-!!( )
$num!!* +
)!!+ ,
;!!, -
IO"" 
."" 
	WriteLine"" 
("" 
$str"" #
+""$ %
result""& ,
)"", -
;""- .
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
}** 
public// 

static// 
void// 
GoodB2G1Sink// #
(//# $
ulong//$ )
data//* .
)/// 0
{00 
if11 

(11 9
-CWE191_Integer_Underflow__UInt64_rand_sub_22a11 9
.119 : 
goodB2G1PublicStatic11: N
)11N O
{22 	
data55 
=55 
$num55 
;55 
}66 	
else77 
{88 	
if:: 
(:: 
data:: 
>:: 
ulong:: 
.:: 
MinValue:: %
)::% &
{;; 
ulong<< 
result<< 
=<< 
(<<  
ulong<<  %
)<<% &
(<<& '
data<<' +
-<<, -
$num<<. /
)<</ 0
;<<0 1
IO== 
.== 
	WriteLine== 
(== 
$str== '
+==( )
result==* 0
)==0 1
;==1 2
}>> 
else?? 
{@@ 
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA N
)AAN O
;AAO P
}BB 
}CC 	
}DD 
publicGG 

staticGG 
voidGG 
GoodB2G2SinkGG #
(GG# $
ulongGG$ )
dataGG* .
)GG/ 0
{HH 
ifII 

(II 9
-CWE191_Integer_Underflow__UInt64_rand_sub_22aII 9
.II9 : 
goodB2G2PublicStaticII: N
)IIN O
{JJ 	
ifLL 
(LL 
dataLL 
>LL 
ulongLL 
.LL 
MinValueLL %
)LL% &
{MM 
ulongNN 
resultNN 
=NN 
(NN  
ulongNN  %
)NN% &
(NN& '
dataNN' +
-NN, -
$numNN. /
)NN/ 0
;NN0 1
IOOO 
.OO 
	WriteLineOO 
(OO 
$strOO '
+OO( )
resultOO* 0
)OO0 1
;OO1 2
}PP 
elseQQ 
{RR 
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS N
)SSN O
;SSO P
}TT 
}UU 	
elseVV 
{WW 	
dataZZ 
=ZZ 
$numZZ 
;ZZ 
}[[ 	
}\\ 
public__ 

static__ 
void__ 
GoodG2BSink__ "
(__" #
ulong__# (
data__) -
)__. /
{`` 
ifaa 

(aa 9
-CWE191_Integer_Underflow__UInt64_rand_sub_22aaa 9
.aa9 :
goodG2BPublicStaticaa: M
)aaM N
{bb 	
ulongdd 
resultdd 
=dd 
(dd 
ulongdd !
)dd! "
(dd" #
datadd# '
-dd( )
$numdd* +
)dd+ ,
;dd, -
IOee 
.ee 
	WriteLineee 
(ee 
$stree #
+ee$ %
resultee& ,
)ee, -
;ee- .
}ff 	
elsegg 
{hh 	
datakk 
=kk 
$numkk 
;kk 
}ll 	
}mm 
}oo 
}pp œ
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_31.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_31 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
dataCopy 
; 
{ 	
ulong   
data   
;   
data"" 
="" 
IO"" 
."" 
GetRandomULong"" $
(""$ %
)""% &
;""& '
dataCopy## 
=## 
data## 
;## 
}$$ 	
{%% 	
ulong&& 
data&& 
=&& 
dataCopy&& !
;&&! "
ulong(( 
result(( 
=(( 
((( 
ulong(( !
)((! "
(((" #
data((# '
-((( )
$num((* +
)((+ ,
;((, -
IO)) 
.)) 
	WriteLine)) 
()) 
$str)) #
+))$ %
result))& ,
))), -
;))- .
}** 	
}++ 
public.. 

override.. 
void.. 
Good.. 
(.. 
).. 
{// 
GoodG2B00 
(00 
)00 
;00 
GoodB2G11 
(11 
)11 
;11 
}22 
private55 
void55 
GoodG2B55 
(55 
)55 
{66 
ulong77 
dataCopy77 
;77 
{88 	
ulong99 
data99 
;99 
data;; 
=;; 
$num;; 
;;; 
dataCopy<< 
=<< 
data<< 
;<< 
}== 	
{>> 	
ulong?? 
data?? 
=?? 
dataCopy?? !
;??! "
ulongAA 
resultAA 
=AA 
(AA 
ulongAA !
)AA! "
(AA" #
dataAA# '
-AA( )
$numAA* +
)AA+ ,
;AA, -
IOBB 
.BB 
	WriteLineBB 
(BB 
$strBB #
+BB$ %
resultBB& ,
)BB, -
;BB- .
}CC 	
}DD 
privateGG 
voidGG 
GoodB2GGG 
(GG 
)GG 
{HH 
ulongII 
dataCopyII 
;II 
{JJ 	
ulongKK 
dataKK 
;KK 
dataMM 
=MM 
IOMM 
.MM 
GetRandomULongMM $
(MM$ %
)MM% &
;MM& '
dataCopyNN 
=NN 
dataNN 
;NN 
}OO 	
{PP 	
ulongQQ 
dataQQ 
=QQ 
dataCopyQQ !
;QQ! "
ifSS 
(SS 
dataSS 
>SS 
ulongSS 
.SS 
MinValueSS %
)SS% &
{TT 
ulongUU 
resultUU 
=UU 
(UU  
ulongUU  %
)UU% &
(UU& '
dataUU' +
-UU, -
$numUU. /
)UU/ 0
;UU0 1
IOVV 
.VV 
	WriteLineVV 
(VV 
$strVV '
+VV( )
resultVV* 0
)VV0 1
;VV1 2
}WW 
elseXX 
{YY 
IOZZ 
.ZZ 
	WriteLineZZ 
(ZZ 
$strZZ N
)ZZN O
;ZZO P
}[[ 
}\\ 	
}]] 
}__ 
}`` ›
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_41.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_41 2
:3 4
AbstractTestCase5 E
{ 
private 
static 
void 
BadSink 
(  
ulong  %
data& *
)+ ,
{ 
ulong 
result 
= 
( 
ulong 
) 
( 
data #
-$ %
$num& '
)' (
;( )
IO   

.  
 
	WriteLine   
(   
$str   
+    !
result  " (
)  ( )
;  ) *
}!! 
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
ulong%% 
data%% 
;%% 
data'' 
='' 
IO'' 
.'' 
GetRandomULong''  
(''  !
)''! "
;''" #
BadSink(( 
((( 
data(( 
)(( 
;(( 
})) 
public,, 

override,, 
void,, 
Good,, 
(,, 
),, 
{-- 
GoodG2B.. 
(.. 
).. 
;.. 
GoodB2G// 
(// 
)// 
;// 
}00 
private22 
static22 
void22 
GoodG2BSink22 #
(22# $
ulong22$ )
data22* .
)22/ 0
{33 
ulong55 
result55 
=55 
(55 
ulong55 
)55 
(55 
data55 #
-55$ %
$num55& '
)55' (
;55( )
IO66 

.66
 
	WriteLine66 
(66 
$str66 
+66  !
result66" (
)66( )
;66) *
}77 
private:: 
static:: 
void:: 
GoodG2B:: 
(::  
)::  !
{;; 
ulong<< 
data<< 
;<< 
data>> 
=>> 
$num>> 
;>> 
GoodG2BSink?? 
(?? 
data?? 
)?? 
;?? 
}@@ 
privateBB 
staticBB 
voidBB 
GoodB2GSinkBB #
(BB# $
ulongBB$ )
dataBB* .
)BB/ 0
{CC 
ifEE 

(EE 
dataEE 
>EE 
ulongEE 
.EE 
MinValueEE !
)EE! "
{FF 	
ulongGG 
resultGG 
=GG 
(GG 
ulongGG !
)GG! "
(GG" #
dataGG# '
-GG( )
$numGG* +
)GG+ ,
;GG, -
IOHH 
.HH 
	WriteLineHH 
(HH 
$strHH #
+HH$ %
resultHH& ,
)HH, -
;HH- .
}II 	
elseJJ 
{KK 	
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL J
)LLJ K
;LLK L
}MM 	
}NN 
privateQQ 
staticQQ 
voidQQ 
GoodB2GQQ 
(QQ  
)QQ  !
{RR 
ulongSS 
dataSS 
;SS 
dataUU 
=UU 
IOUU 
.UU 
GetRandomULongUU  
(UU  !
)UU! "
;UU" #
GoodB2GSinkVV 
(VV 
dataVV 
)VV 
;VV 
}WW 
}YY 
}ZZ Ç
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_42.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_42 2
:3 4
AbstractTestCase5 E
{ 
private 
static 
ulong 
	BadSource "
(" #
)# $
{ 
ulong 
data 
; 
data   
=   
IO   
.   
GetRandomULong    
(    !
)  ! "
;  " #
return!! 
data!! 
;!! 
}"" 
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
ulong&& 
data&& 
=&& 
	BadSource&& 
(&& 
)&&  
;&&  !
ulong(( 
result(( 
=(( 
((( 
ulong(( 
)(( 
((( 
data(( #
-(($ %
$num((& '
)((' (
;((( )
IO)) 

.))
 
	WriteLine)) 
()) 
$str)) 
+))  !
result))" (
)))( )
;))) *
}** 
private.. 
static.. 
ulong.. 
GoodG2BSource.. &
(..& '
)..' (
{// 
ulong00 
data00 
;00 
data22 
=22 
$num22 
;22 
return33 
data33 
;33 
}44 
private66 
static66 
void66 
GoodG2B66 
(66  
)66  !
{77 
ulong88 
data88 
=88 
GoodG2BSource88 "
(88" #
)88# $
;88$ %
ulong:: 
result:: 
=:: 
(:: 
ulong:: 
):: 
(:: 
data:: #
-::$ %
$num::& '
)::' (
;::( )
IO;; 

.;;
 
	WriteLine;; 
(;; 
$str;; 
+;;  !
result;;" (
);;( )
;;;) *
}<< 
private?? 
static?? 
ulong?? 
GoodB2GSource?? &
(??& '
)??' (
{@@ 
ulongAA 
dataAA 
;AA 
dataCC 
=CC 
IOCC 
.CC 
GetRandomULongCC  
(CC  !
)CC! "
;CC" #
returnDD 
dataDD 
;DD 
}EE 
privateGG 
staticGG 
voidGG 
GoodB2GGG 
(GG  
)GG  !
{HH 
ulongII 
dataII 
=II 
GoodB2GSourceII "
(II" #
)II# $
;II$ %
ifKK 

(KK 
dataKK 
>KK 
ulongKK 
.KK 
MinValueKK !
)KK! "
{LL 	
ulongMM 
resultMM 
=MM 
(MM 
ulongMM !
)MM! "
(MM" #
dataMM# '
-MM( )
$numMM* +
)MM+ ,
;MM, -
IONN 
.NN 
	WriteLineNN 
(NN 
$strNN #
+NN$ %
resultNN& ,
)NN, -
;NN- .
}OO 	
elsePP 
{QQ 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR J
)RRJ K
;RRK L
}SS 	
}TT 
publicVV 

overrideVV 
voidVV 
GoodVV 
(VV 
)VV 
{WW 
GoodG2BXX 
(XX 
)XX 
;XX 
GoodB2GYY 
(YY 
)YY 
;YY 
}ZZ 
}\\ 
}]] ß!
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_45.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 8
,CWE191_Integer_Underflow__UInt64_rand_sub_45 2
:3 4
AbstractTestCase5 E
{ 
private 
ulong 
dataBad 
; 
private 
ulong 
dataGoodG2B 
; 
private 
ulong 
dataGoodB2G 
; 
private   
void   
BadSink   
(   
)   
{!! 
ulong"" 
data"" 
="" 
dataBad"" 
;"" 
ulong$$ 
result$$ 
=$$ 
($$ 
ulong$$ 
)$$ 
($$ 
data$$ #
-$$$ %
$num$$& '
)$$' (
;$$( )
IO%% 

.%%
 
	WriteLine%% 
(%% 
$str%% 
+%%  !
result%%" (
)%%( )
;%%) *
}&& 
public(( 

override(( 
void(( 
Bad(( 
((( 
)(( 
{)) 
ulong** 
data** 
;** 
data,, 
=,, 
IO,, 
.,, 
GetRandomULong,,  
(,,  !
),,! "
;,," #
dataBad-- 
=-- 
data-- 
;-- 
BadSink.. 
(.. 
).. 
;.. 
}// 
public22 

override22 
void22 
Good22 
(22 
)22 
{33 
GoodG2B44 
(44 
)44 
;44 
GoodB2G55 
(55 
)55 
;55 
}66 
private88 
void88 
GoodG2BSink88 
(88 
)88 
{99 
ulong:: 
data:: 
=:: 
dataGoodG2B::  
;::  !
ulong<< 
result<< 
=<< 
(<< 
ulong<< 
)<< 
(<< 
data<< #
-<<$ %
$num<<& '
)<<' (
;<<( )
IO== 

.==
 
	WriteLine== 
(== 
$str== 
+==  !
result==" (
)==( )
;==) *
}>> 
privateAA 
voidAA 
GoodG2BAA 
(AA 
)AA 
{BB 
ulongCC 
dataCC 
;CC 
dataEE 
=EE 
$numEE 
;EE 
dataGoodG2BFF 
=FF 
dataFF 
;FF 
GoodG2BSinkGG 
(GG 
)GG 
;GG 
}HH 
privateJJ 
voidJJ 
GoodB2GSinkJJ 
(JJ 
)JJ 
{KK 
ulongLL 
dataLL 
=LL 
dataGoodB2GLL  
;LL  !
ifNN 

(NN 
dataNN 
>NN 
ulongNN 
.NN 
MinValueNN !
)NN! "
{OO 	
ulongPP 
resultPP 
=PP 
(PP 
ulongPP !
)PP! "
(PP" #
dataPP# '
-PP( )
$numPP* +
)PP+ ,
;PP, -
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ #
+QQ$ %
resultQQ& ,
)QQ, -
;QQ- .
}RR 	
elseSS 
{TT 	
IOUU 
.UU 
	WriteLineUU 
(UU 
$strUU J
)UUJ K
;UUK L
}VV 	
}WW 
privateZZ 
voidZZ 
GoodB2GZZ 
(ZZ 
)ZZ 
{[[ 
ulong\\ 
data\\ 
;\\ 
data^^ 
=^^ 
IO^^ 
.^^ 
GetRandomULong^^  
(^^  !
)^^! "
;^^" #
dataGoodB2G__ 
=__ 
data__ 
;__ 
GoodB2GSink`` 
(`` 
)`` 
;`` 
}aa 
}cc 
}dd ì
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_51a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_51a 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_51b 5
.5 6
BadSink6 =
(= >
data> B
)D E
;E F
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
ulong,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 9
-CWE191_Integer_Underflow__UInt64_rand_sub_51b// 5
.//5 6
GoodG2BSink//6 A
(//A B
data//B F
)//H I
;//I J
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
ulong55 
data55 
;55 
data77 
=77 
IO77 
.77 
GetRandomULong77  
(77  !
)77! "
;77" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_51b88 5
.885 6
GoodB2GSink886 A
(88A B
data88B F
)88H I
;88I J
}99 
};; 
}<< å
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_51b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_51b 3
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 
ulong 
result 
= 
( 
ulong 
) 
( 
data #
-$ %
$num& '
)' (
;( )
IO   

.  
 
	WriteLine   
(   
$str   
+    !
result  " (
)  ( )
;  ) *
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
ulong&&# (
data&&) -
)&&. /
{'' 
ulong)) 
result)) 
=)) 
()) 
ulong)) 
))) 
()) 
data)) #
-))$ %
$num))& '
)))' (
;))( )
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+**  !
result**" (
)**( )
;**) *
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
ulong..# (
data..) -
)... /
{// 
if11 

(11 
data11 
>11 
ulong11 
.11 
MinValue11 !
)11! "
{22 	
ulong33 
result33 
=33 
(33 
ulong33 !
)33! "
(33" #
data33# '
-33( )
$num33* +
)33+ ,
;33, -
IO44 
.44 
	WriteLine44 
(44 
$str44 #
+44$ %
result44& ,
)44, -
;44- .
}55 	
else66 
{77 	
IO88 
.88 
	WriteLine88 
(88 
$str88 J
)88J K
;88K L
}99 	
}:: 
}<< 
}== ì
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_52a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_52a 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_52b 5
.5 6
BadSink6 =
(= >
data> B
)C D
;D E
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
ulong,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 9
-CWE191_Integer_Underflow__UInt64_rand_sub_52b// 5
.//5 6
GoodG2BSink//6 A
(//A B
data//B F
)//G H
;//H I
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
ulong55 
data55 
;55 
data77 
=77 
IO77 
.77 
GetRandomULong77  
(77  !
)77! "
;77" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_52b88 5
.885 6
GoodB2GSink886 A
(88A B
data88B F
)88G H
;88H I
}99 
};; 
}<< á
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_52b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_52b 3
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_52c 5
.5 6
BadSink6 =
(= >
data> B
)C D
;D E
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
ulong$$# (
data$$) -
)$$. /
{%% 9
-CWE191_Integer_Underflow__UInt64_rand_sub_52c&& 5
.&&5 6
GoodG2BSink&&6 A
(&&A B
data&&B F
)&&G H
;&&H I
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
ulong**# (
data**) -
)**. /
{++ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_52c,, 5
.,,5 6
GoodB2GSink,,6 A
(,,A B
data,,B F
),,G H
;,,H I
}-- 
}// 
}00 å
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_52c.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_52c 3
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 
ulong 
result 
= 
( 
ulong 
) 
( 
data #
-$ %
$num& '
)' (
;( )
IO   

.  
 
	WriteLine   
(   
$str   
+    !
result  " (
)  ( )
;  ) *
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
ulong&&# (
data&&) -
)&&. /
{'' 
ulong)) 
result)) 
=)) 
()) 
ulong)) 
))) 
()) 
data)) #
-))$ %
$num))& '
)))' (
;))( )
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+**  !
result**" (
)**( )
;**) *
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
ulong..# (
data..) -
)... /
{// 
if11 

(11 
data11 
>11 
ulong11 
.11 
MinValue11 !
)11! "
{22 	
ulong33 
result33 
=33 
(33 
ulong33 !
)33! "
(33" #
data33# '
-33( )
$num33* +
)33+ ,
;33, -
IO44 
.44 
	WriteLine44 
(44 
$str44 #
+44$ %
result44& ,
)44, -
;44- .
}55 	
else66 
{77 	
IO88 
.88 
	WriteLine88 
(88 
$str88 J
)88J K
;88K L
}99 	
}:: 
}<< 
}== ì
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_53a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_53a 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_53b 5
.5 6
BadSink6 =
(= >
data> B
)C D
;D E
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
ulong,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 9
-CWE191_Integer_Underflow__UInt64_rand_sub_53b// 5
.//5 6
GoodG2BSink//6 A
(//A B
data//B F
)//G H
;//H I
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
ulong55 
data55 
;55 
data77 
=77 
IO77 
.77 
GetRandomULong77  
(77  !
)77! "
;77" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_53b88 5
.885 6
GoodB2GSink886 A
(88A B
data88B F
)88G H
;88H I
}99 
};; 
}<< á
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_53b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_53b 3
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_53c 5
.5 6
BadSink6 =
(= >
data> B
)C D
;D E
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
ulong$$# (
data$$) -
)$$. /
{%% 9
-CWE191_Integer_Underflow__UInt64_rand_sub_53c&& 5
.&&5 6
GoodG2BSink&&6 A
(&&A B
data&&B F
)&&G H
;&&H I
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
ulong**# (
data**) -
)**. /
{++ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_53c,, 5
.,,5 6
GoodB2GSink,,6 A
(,,A B
data,,B F
),,G H
;,,H I
}-- 
}// 
}00 á
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_53c.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_53c 3
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_53d 5
.5 6
BadSink6 =
(= >
data> B
)C D
;D E
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
ulong$$# (
data$$) -
)$$. /
{%% 9
-CWE191_Integer_Underflow__UInt64_rand_sub_53d&& 5
.&&5 6
GoodG2BSink&&6 A
(&&A B
data&&B F
)&&G H
;&&H I
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
ulong**# (
data**) -
)**. /
{++ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_53d,, 5
.,,5 6
GoodB2GSink,,6 A
(,,A B
data,,B F
),,G H
;,,H I
}-- 
}// 
}00 å
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_53d.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_53d 3
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 
ulong 
result 
= 
( 
ulong 
) 
( 
data #
-$ %
$num& '
)' (
;( )
IO   

.  
 
	WriteLine   
(   
$str   
+    !
result  " (
)  ( )
;  ) *
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
ulong&&# (
data&&) -
)&&. /
{'' 
ulong)) 
result)) 
=)) 
()) 
ulong)) 
))) 
()) 
data)) #
-))$ %
$num))& '
)))' (
;))( )
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+**  !
result**" (
)**( )
;**) *
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
ulong..# (
data..) -
)... /
{// 
if11 

(11 
data11 
>11 
ulong11 
.11 
MinValue11 !
)11! "
{22 	
ulong33 
result33 
=33 
(33 
ulong33 !
)33! "
(33" #
data33# '
-33( )
$num33* +
)33+ ,
;33, -
IO44 
.44 
	WriteLine44 
(44 
$str44 #
+44$ %
result44& ,
)44, -
;44- .
}55 	
else66 
{77 	
IO88 
.88 
	WriteLine88 
(88 
$str88 J
)88J K
;88K L
}99 	
}:: 
}<< 
}== ì
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_54a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54a 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_54b 5
.5 6
BadSink6 =
(= >
data> B
)C D
;D E
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
ulong,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54b// 5
.//5 6
GoodG2BSink//6 A
(//A B
data//B F
)//G H
;//H I
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
ulong55 
data55 
;55 
data77 
=77 
IO77 
.77 
GetRandomULong77  
(77  !
)77! "
;77" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_54b88 5
.885 6
GoodB2GSink886 A
(88A B
data88B F
)88G H
;88H I
}99 
};; 
}<< á
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_54b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54b 3
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54c 5
.5 6
BadSink6 =
(= >
data> B
)C D
;D E
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
ulong$$# (
data$$) -
)$$. /
{%% 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54c&& 5
.&&5 6
GoodG2BSink&&6 A
(&&A B
data&&B F
)&&G H
;&&H I
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
ulong**# (
data**) -
)**. /
{++ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54c,, 5
.,,5 6
GoodB2GSink,,6 A
(,,A B
data,,B F
),,G H
;,,H I
}-- 
}// 
}00 á
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_54c.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54c 3
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54d 5
.5 6
BadSink6 =
(= >
data> B
)C D
;D E
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
ulong$$# (
data$$) -
)$$. /
{%% 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54d&& 5
.&&5 6
GoodG2BSink&&6 A
(&&A B
data&&B F
)&&G H
;&&H I
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
ulong**# (
data**) -
)**. /
{++ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54d,, 5
.,,5 6
GoodB2GSink,,6 A
(,,A B
data,,B F
),,G H
;,,H I
}-- 
}// 
}00 á
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_54d.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54d 3
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54e 5
.5 6
BadSink6 =
(= >
data> B
)C D
;D E
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
ulong$$# (
data$$) -
)$$. /
{%% 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54e&& 5
.&&5 6
GoodG2BSink&&6 A
(&&A B
data&&B F
)&&G H
;&&H I
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
ulong**# (
data**) -
)**. /
{++ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54e,, 5
.,,5 6
GoodB2GSink,,6 A
(,,A B
data,,B F
),,G H
;,,H I
}-- 
}// 
}00 å
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_54e.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_54e 3
{ 
public 

static 
void 
BadSink 
( 
ulong $
data% )
)* +
{ 
ulong 
result 
= 
( 
ulong 
) 
( 
data #
-$ %
$num& '
)' (
;( )
IO   

.  
 
	WriteLine   
(   
$str   
+    !
result  " (
)  ( )
;  ) *
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
ulong&&# (
data&&) -
)&&. /
{'' 
ulong)) 
result)) 
=)) 
()) 
ulong)) 
))) 
()) 
data)) #
-))$ %
$num))& '
)))' (
;))( )
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+**  !
result**" (
)**( )
;**) *
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
ulong..# (
data..) -
)... /
{// 
if11 

(11 
data11 
>11 
ulong11 
.11 
MinValue11 !
)11! "
{22 	
ulong33 
result33 
=33 
(33 
ulong33 !
)33! "
(33" #
data33# '
-33( )
$num33* +
)33+ ,
;33, -
IO44 
.44 
	WriteLine44 
(44 
$str44 #
+44$ %
result44& ,
)44, -
;44- .
}55 	
else66 
{77 	
IO88 
.88 
	WriteLine88 
(88 
$str88 J
)88J K
;88K L
}99 	
}:: 
}<< 
}== û
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_61a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_61a 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
= 9
-CWE191_Integer_Underflow__UInt64_rand_sub_61b B
.B C
	BadSourceC L
(L M
)M N
;N O
ulong   
result   
=   
(   
ulong   
)   
(   
data   #
-  $ %
$num  & '
)  ' (
;  ( )
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!!  !
result!!" (
)!!( )
;!!) *
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
GoodB2G(( 
((( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
),,  !
{-- 
ulong.. 
data.. 
=.. 9
-CWE191_Integer_Underflow__UInt64_rand_sub_61b.. B
...B C
GoodG2BSource..C P
(..P Q
)..Q R
;..R S
ulong00 
result00 
=00 
(00 
ulong00 
)00 
(00 
data00 #
-00$ %
$num00& '
)00' (
;00( )
IO11 

.11
 
	WriteLine11 
(11 
$str11 
+11  !
result11" (
)11( )
;11) *
}22 
private55 
static55 
void55 
GoodB2G55 
(55  
)55  !
{66 
ulong77 
data77 
=77 9
-CWE191_Integer_Underflow__UInt64_rand_sub_61b77 B
.77B C
GoodB2GSource77C P
(77P Q
)77Q R
;77R S
if99 

(99 
data99 
>99 
ulong99 
.99 
MinValue99 !
)99! "
{:: 	
ulong;; 
result;; 
=;; 
(;; 
ulong;; !
);;! "
(;;" #
data;;# '
-;;( )
$num;;* +
);;+ ,
;;;, -
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< #
+<<$ %
result<<& ,
)<<, -
;<<- .
}== 	
else>> 
{?? 	
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ J
)@@J K
;@@K L
}AA 	
}BB 
}DD 
}EE Œ
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_61b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_61b 3
{ 
public 

static 
ulong 
	BadSource !
(! "
)" #
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #
return 
data 
; 
}   
public%% 

static%% 
ulong%% 
GoodG2BSource%% %
(%%% &
)%%& '
{&& 
ulong'' 
data'' 
;'' 
data)) 
=)) 
$num)) 
;)) 
return** 
data** 
;** 
}++ 
public.. 

static.. 
ulong.. 
GoodB2GSource.. %
(..% &
)..& '
{// 
ulong00 
data00 
;00 
data22 
=22 
IO22 
.22 
GetRandomULong22  
(22  !
)22! "
;22" #
return33 
data33 
;33 
}44 
}66 
}77 ›
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_66a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_66a 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #
ulong 
[ 
] 
	dataArray 
= 
new 
ulong  %
[% &
$num& '
]' (
;( )
	dataArray   
[   
$num   
]   
=   
data   
;   9
-CWE191_Integer_Underflow__UInt64_rand_sub_66b!! 5
.!!5 6
BadSink!!6 =
(!!= >
	dataArray!!> G
)!!I J
;!!J K
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
GoodB2G(( 
((( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
),,  !
{-- 
ulong.. 
data.. 
;.. 
data00 
=00 
$num00 
;00 
ulong11 
[11 
]11 
	dataArray11 
=11 
new11 
ulong11  %
[11% &
$num11& '
]11' (
;11( )
	dataArray22 
[22 
$num22 
]22 
=22 
data22 
;22 9
-CWE191_Integer_Underflow__UInt64_rand_sub_66b33 5
.335 6
GoodG2BSink336 A
(33A B
	dataArray33B K
)33M N
;33N O
}44 
private77 
static77 
void77 
GoodB2G77 
(77  
)77  !
{88 
ulong99 
data99 
;99 
data;; 
=;; 
IO;; 
.;; 
GetRandomULong;;  
(;;  !
);;! "
;;;" #
ulong<< 
[<< 
]<< 
	dataArray<< 
=<< 
new<< 
ulong<<  %
[<<% &
$num<<& '
]<<' (
;<<( )
	dataArray== 
[== 
$num== 
]== 
=== 
data== 
;== 9
-CWE191_Integer_Underflow__UInt64_rand_sub_66b>> 5
.>>5 6
GoodB2GSink>>6 A
(>>A B
	dataArray>>B K
)>>M N
;>>N O
}?? 
}AA 
}BB ì
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_66b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_66b 3
{ 
public 

static 
void 
BadSink 
( 
ulong $
[$ %
]% &
	dataArray' 0
)1 2
{ 
ulong 
data 
= 
	dataArray 
[ 
$num  
]  !
;! "
ulong   
result   
=   
(   
ulong   
)   
(   
data   #
-  $ %
$num  & '
)  ' (
;  ( )
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!!  !
result!!" (
)!!( )
;!!) *
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
ulong''# (
[''( )
]'') *
	dataArray''+ 4
)''5 6
{(( 
ulong)) 
data)) 
=)) 
	dataArray)) 
[)) 
$num))  
]))  !
;))! "
ulong++ 
result++ 
=++ 
(++ 
ulong++ 
)++ 
(++ 
data++ #
-++$ %
$num++& '
)++' (
;++( )
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,,  !
result,," (
),,( )
;,,) *
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
ulong00# (
[00( )
]00) *
	dataArray00+ 4
)005 6
{11 
ulong22 
data22 
=22 
	dataArray22 
[22 
$num22  
]22  !
;22! "
if44 

(44 
data44 
>44 
ulong44 
.44 
MinValue44 !
)44! "
{55 	
ulong66 
result66 
=66 
(66 
ulong66 !
)66! "
(66" #
data66# '
-66( )
$num66* +
)66+ ,
;66, -
IO77 
.77 
	WriteLine77 
(77 
$str77 #
+77$ %
result77& ,
)77, -
;77- .
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; J
);;J K
;;;K L
}<< 	
}== 
}?? 
}@@ †
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_67a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_67a 3
:4 5
AbstractTestCase6 F
{ 
public 

class 
	Container 
{ 
public 
ulong 
containerOne !
;! "
} 
public 

override 
void 
Bad 
( 
) 
{   
ulong!! 
data!! 
;!! 
data## 
=## 
IO## 
.## 
GetRandomULong##  
(##  !
)##! "
;##" #
	Container$$ 
dataContainer$$ 
=$$  !
new$$" %
	Container$$& /
($$/ 0
)$$0 1
;$$1 2
dataContainer%% 
.%% 
containerOne%% "
=%%# $
data%%% )
;%%) *9
-CWE191_Integer_Underflow__UInt64_rand_sub_67b&& 5
.&&5 6
BadSink&&6 =
(&&= >
dataContainer&&> K
)&&M N
;&&N O
}'' 
public** 

override** 
void** 
Good** 
(** 
)** 
{++ 
GoodG2B,, 
(,, 
),, 
;,, 
GoodB2G-- 
(-- 
)-- 
;-- 
}.. 
private11 
static11 
void11 
GoodG2B11 
(11  
)11  !
{22 
ulong33 
data33 
;33 
data55 
=55 
$num55 
;55 
	Container66 
dataContainer66 
=66  !
new66" %
	Container66& /
(66/ 0
)660 1
;661 2
dataContainer77 
.77 
containerOne77 "
=77# $
data77% )
;77) *9
-CWE191_Integer_Underflow__UInt64_rand_sub_67b88 5
.885 6
GoodG2BSink886 A
(88A B
dataContainer88B O
)88Q R
;88R S
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
ulong>> 
data>> 
;>> 
data@@ 
=@@ 
IO@@ 
.@@ 
GetRandomULong@@  
(@@  !
)@@! "
;@@" #
	ContainerAA 
dataContainerAA 
=AA  !
newAA" %
	ContainerAA& /
(AA/ 0
)AA0 1
;AA1 2
dataContainerBB 
.BB 
containerOneBB "
=BB# $
dataBB% )
;BB) *9
-CWE191_Integer_Underflow__UInt64_rand_sub_67bCC 5
.CC5 6
GoodB2GSinkCC6 A
(CCA B
dataContainerCCB O
)CCQ R
;CCR S
}DD 
}FF 
}GG ¶
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_67b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_67b 3
{ 
public 

static 
void 
BadSink 
( 9
-CWE191_Integer_Underflow__UInt64_rand_sub_67a L
.L M
	ContainerM V
dataContainerW d
)e f
{ 
ulong 
data 
= 
dataContainer "
." #
containerOne# /
;/ 0
ulong   
result   
=   
(   
ulong   
)   
(   
data   #
-  $ %
$num  & '
)  ' (
;  ( )
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!!  !
result!!" (
)!!( )
;!!) *
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_67a''# P
.''P Q
	Container''Q Z
dataContainer''[ h
)''i j
{(( 
ulong)) 
data)) 
=)) 
dataContainer)) "
.))" #
containerOne))# /
;))/ 0
ulong++ 
result++ 
=++ 
(++ 
ulong++ 
)++ 
(++ 
data++ #
-++$ %
$num++& '
)++' (
;++( )
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,,  !
result,," (
),,( )
;,,) *
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_67a00# P
.00P Q
	Container00Q Z
dataContainer00[ h
)00i j
{11 
ulong22 
data22 
=22 
dataContainer22 "
.22" #
containerOne22# /
;22/ 0
if44 

(44 
data44 
>44 
ulong44 
.44 
MinValue44 !
)44! "
{55 	
ulong66 
result66 
=66 
(66 
ulong66 !
)66! "
(66" #
data66# '
-66( )
$num66* +
)66+ ,
;66, -
IO77 
.77 
	WriteLine77 
(77 
$str77 #
+77$ %
result77& ,
)77, -
;77- .
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; J
);;J K
;;;K L
}<< 	
}== 
}?? 
}@@ ≈
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_68a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_68a 3
:4 5
AbstractTestCase6 F
{ 
public 

static 
ulong 
data 
; 
public 

override 
void 
Bad 
( 
) 
{ 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_68b   5
.  5 6
BadSink  6 =
(  = >
)  > ?
;  ? @
}!! 
public$$ 

override$$ 
void$$ 
Good$$ 
($$ 
)$$ 
{%% 
GoodG2B&& 
(&& 
)&& 
;&& 
GoodB2G'' 
('' 
)'' 
;'' 
}(( 
private++ 
static++ 
void++ 
GoodG2B++ 
(++  
)++  !
{,, 
data.. 
=.. 
$num.. 
;.. 9
-CWE191_Integer_Underflow__UInt64_rand_sub_68b// 5
.//5 6
GoodG2BSink//6 A
(//A B
)//B C
;//C D
}00 
private33 
static33 
void33 
GoodB2G33 
(33  
)33  !
{44 
data66 
=66 
IO66 
.66 
GetRandomULong66  
(66  !
)66! "
;66" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_68b77 5
.775 6
GoodB2GSink776 A
(77A B
)77B C
;77C D
}88 
}:: 
};; ˙
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_68b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_68b 3
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
ulong 
data 
= 9
-CWE191_Integer_Underflow__UInt64_rand_sub_68a B
.B C
dataC G
;G H
ulong   
result   
=   
(   
ulong   
)   
(   
data   #
-  $ %
$num  & '
)  ' (
;  ( )
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!!  !
result!!" (
)!!( )
;!!) *
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
)''# $
{(( 
ulong)) 
data)) 
=)) 9
-CWE191_Integer_Underflow__UInt64_rand_sub_68a)) B
.))B C
data))C G
;))G H
ulong++ 
result++ 
=++ 
(++ 
ulong++ 
)++ 
(++ 
data++ #
-++$ %
$num++& '
)++' (
;++( )
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,,  !
result,," (
),,( )
;,,) *
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
)00# $
{11 
ulong22 
data22 
=22 9
-CWE191_Integer_Underflow__UInt64_rand_sub_68a22 B
.22B C
data22C G
;22G H
if44 

(44 
data44 
>44 
ulong44 
.44 
MinValue44 !
)44! "
{55 	
ulong66 
result66 
=66 
(66 
ulong66 !
)66! "
(66" #
data66# '
-66( )
$num66* +
)66+ ,
;66, -
IO77 
.77 
	WriteLine77 
(77 
$str77 #
+77$ %
result77& ,
)77, -
;77- .
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; J
);;J K
;;;K L
}<< 	
}== 
}?? 
}@@ —
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_71a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_71a 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_71b 5
.5 6
BadSink6 =
(= >
(> ?
Object? E
)E F
dataF J
)L M
;M N
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
static** 
void** 
GoodG2B** 
(**  
)**  !
{++ 
ulong,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 9
-CWE191_Integer_Underflow__UInt64_rand_sub_71b// 5
.//5 6
GoodG2BSink//6 A
(//A B
(//B C
Object//C I
)//I J
data//J N
)//P Q
;//Q R
}00 
private33 
static33 
void33 
GoodB2G33 
(33  
)33  !
{44 
ulong55 
data55 
;55 
data77 
=77 
IO77 
.77 
GetRandomULong77  
(77  !
)77! "
;77" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_71b88 5
.885 6
GoodB2GSink886 A
(88A B
(88B C
Object88C I
)88I J
data88J N
)88P Q
;88Q R
}99 
};; 
}<< ≈
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_71b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_71b 3
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
ulong 
data 
= 
( 
ulong 
) 

dataObject &
;& '
ulong!! 
result!! 
=!! 
(!! 
ulong!! 
)!! 
(!! 
data!! #
-!!$ %
$num!!& '
)!!' (
;!!( )
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+""  !
result""" (
)""( )
;"") *
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
Object((# )

dataObject((* 4
)((5 6
{)) 
ulong** 
data** 
=** 
(** 
ulong** 
)** 

dataObject** &
;**& '
ulong,, 
result,, 
=,, 
(,, 
ulong,, 
),, 
(,, 
data,, #
-,,$ %
$num,,& '
),,' (
;,,( )
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+--  !
result--" (
)--( )
;--) *
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
Object11# )

dataObject11* 4
)115 6
{22 
ulong33 
data33 
=33 
(33 
ulong33 
)33 

dataObject33 &
;33& '
if55 

(55 
data55 
>55 
ulong55 
.55 
MinValue55 !
)55! "
{66 	
ulong77 
result77 
=77 
(77 
ulong77 !
)77! "
(77" #
data77# '
-77( )
$num77* +
)77+ ,
;77, -
IO88 
.88 
	WriteLine88 
(88 
$str88 #
+88$ %
result88& ,
)88, -
;88- .
}99 	
else:: 
{;; 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< J
)<<J K
;<<K L
}== 	
}>> 
}@@ 
}AA ¡
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_72a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_72a 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #
	Hashtable   
dataHashtable   
=    !
new  " %
	Hashtable  & /
(  / 0
$num  0 1
)  1 2
;  2 3
dataHashtable!! 
.!! 
Add!! 
(!! 
$num!! 
,!! 
data!! !
)!!! "
;!!" #
dataHashtable"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" !
)""! "
;""" #
dataHashtable## 
.## 
Add## 
(## 
$num## 
,## 
data## !
)##! "
;##" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_72b$$ 5
.$$5 6
BadSink$$6 =
($$= >
dataHashtable$$> K
)$$M N
;$$N O
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
ulong11 
data11 
;11 
data33 
=33 
$num33 
;33 
	Hashtable44 
dataHashtable44 
=44  !
new44" %
	Hashtable44& /
(44/ 0
$num440 1
)441 2
;442 3
dataHashtable55 
.55 
Add55 
(55 
$num55 
,55 
data55 !
)55! "
;55" #
dataHashtable66 
.66 
Add66 
(66 
$num66 
,66 
data66 !
)66! "
;66" #
dataHashtable77 
.77 
Add77 
(77 
$num77 
,77 
data77 !
)77! "
;77" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_72b88 5
.885 6
GoodG2BSink886 A
(88A B
dataHashtable88B O
)88Q R
;88R S
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
ulong>> 
data>> 
;>> 
data@@ 
=@@ 
IO@@ 
.@@ 
GetRandomULong@@  
(@@  !
)@@! "
;@@" #
	HashtableAA 
dataHashtableAA 
=AA  !
newAA" %
	HashtableAA& /
(AA/ 0
$numAA0 1
)AA1 2
;AA2 3
dataHashtableBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB !
)BB! "
;BB" #
dataHashtableCC 
.CC 
AddCC 
(CC 
$numCC 
,CC 
dataCC !
)CC! "
;CC" #
dataHashtableDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD !
)DD! "
;DD" #9
-CWE191_Integer_Underflow__UInt64_rand_sub_72bEE 5
.EE5 6
GoodB2GSinkEE6 A
(EEA B
dataHashtableEEB O
)EEQ R
;EER S
}FF 
}HH 
}II 
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_72b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_72b 3
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
ulong 
data 
= 
( 
ulong 
) 
dataHashtable *
[* +
$num+ ,
], -
;- .
ulong!! 
result!! 
=!! 
(!! 
ulong!! 
)!! 
(!! 
data!! #
-!!$ %
$num!!& '
)!!' (
;!!( )
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+""  !
result""" (
)""( )
;"") *
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
	Hashtable((# ,
dataHashtable((- :
)((; <
{)) 
ulong** 
data** 
=** 
(** 
ulong** 
)** 
dataHashtable** *
[*** +
$num**+ ,
]**, -
;**- .
ulong,, 
result,, 
=,, 
(,, 
ulong,, 
),, 
(,, 
data,, #
-,,$ %
$num,,& '
),,' (
;,,( )
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+--  !
result--" (
)--( )
;--) *
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
	Hashtable11# ,
dataHashtable11- :
)11; <
{22 
ulong33 
data33 
=33 
(33 
ulong33 
)33 
dataHashtable33 *
[33* +
$num33+ ,
]33, -
;33- .
if55 

(55 
data55 
>55 
ulong55 
.55 
MinValue55 !
)55! "
{66 	
ulong77 
result77 
=77 
(77 
ulong77 !
)77! "
(77" #
data77# '
-77( )
$num77* +
)77+ ,
;77, -
IO88 
.88 
	WriteLine88 
(88 
$str88 #
+88$ %
result88& ,
)88, -
;88- .
}99 	
else:: 
{;; 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< J
)<<J K
;<<K L
}== 	
}>> 
}@@ 
}AA ¡
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_73a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_73a 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #

LinkedList   
<   
ulong   
>   
dataLinkedList   (
=  ) *
new  + .

LinkedList  / 9
<  9 :
ulong  : ?
>  ? @
(  @ A
)  A B
;  B C
dataLinkedList!! 
.!! 
AddLast!! 
(!! 
data!! #
)!!# $
;!!$ %
dataLinkedList"" 
."" 
AddLast"" 
("" 
data"" #
)""# $
;""$ %
dataLinkedList## 
.## 
AddLast## 
(## 
data## #
)### $
;##$ %9
-CWE191_Integer_Underflow__UInt64_rand_sub_73b$$ 5
.$$5 6
BadSink$$6 =
($$= >
dataLinkedList$$> L
)$$N O
;$$O P
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
ulong11 
data11 
;11 
data33 
=33 
$num33 
;33 

LinkedList44 
<44 
ulong44 
>44 
dataLinkedList44 (
=44) *
new44+ .

LinkedList44/ 9
<449 :
ulong44: ?
>44? @
(44@ A
)44A B
;44B C
dataLinkedList55 
.55 
AddLast55 
(55 
data55 #
)55# $
;55$ %
dataLinkedList66 
.66 
AddLast66 
(66 
data66 #
)66# $
;66$ %
dataLinkedList77 
.77 
AddLast77 
(77 
data77 #
)77# $
;77$ %9
-CWE191_Integer_Underflow__UInt64_rand_sub_73b88 5
.885 6
GoodG2BSink886 A
(88A B
dataLinkedList88B P
)88R S
;88S T
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
ulong>> 
data>> 
;>> 
data@@ 
=@@ 
IO@@ 
.@@ 
GetRandomULong@@  
(@@  !
)@@! "
;@@" #

LinkedListAA 
<AA 
ulongAA 
>AA 
dataLinkedListAA (
=AA) *
newAA+ .

LinkedListAA/ 9
<AA9 :
ulongAA: ?
>AA? @
(AA@ A
)AAA B
;AAB C
dataLinkedListBB 
.BB 
AddLastBB 
(BB 
dataBB #
)BB# $
;BB$ %
dataLinkedListCC 
.CC 
AddLastCC 
(CC 
dataCC #
)CC# $
;CC$ %
dataLinkedListDD 
.DD 
AddLastDD 
(DD 
dataDD #
)DD# $
;DD$ %9
-CWE191_Integer_Underflow__UInt64_rand_sub_73bEE 5
.EE5 6
GoodB2GSinkEE6 A
(EEA B
dataLinkedListEEB P
)EER S
;EES T
}FF 
}HH 
}II ≤
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_73b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_73b 3
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
ulong* /
>/ 0
dataLinkedList1 ?
)@ A
{ 
ulong 
data 
= 
dataLinkedList #
.# $
Last$ (
.( )
Value) .
;. /
ulong!! 
result!! 
=!! 
(!! 
ulong!! 
)!! 
(!! 
data!! #
-!!$ %
$num!!& '
)!!' (
;!!( )
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+""  !
result""" (
)""( )
;"") *
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #

LinkedList((# -
<((- .
ulong((. 3
>((3 4
dataLinkedList((5 C
)((D E
{)) 
ulong** 
data** 
=** 
dataLinkedList** #
.**# $
Last**$ (
.**( )
Value**) .
;**. /
ulong,, 
result,, 
=,, 
(,, 
ulong,, 
),, 
(,, 
data,, #
-,,$ %
$num,,& '
),,' (
;,,( )
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+--  !
result--" (
)--( )
;--) *
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

LinkedList11# -
<11- .
ulong11. 3
>113 4
dataLinkedList115 C
)11D E
{22 
ulong33 
data33 
=33 
dataLinkedList33 #
.33# $
Last33$ (
.33( )
Value33) .
;33. /
if55 

(55 
data55 
>55 
ulong55 
.55 
MinValue55 !
)55! "
{66 	
ulong77 
result77 
=77 
(77 
ulong77 !
)77! "
(77" #
data77# '
-77( )
$num77* +
)77+ ,
;77, -
IO88 
.88 
	WriteLine88 
(88 
$str88 #
+88$ %
result88& ,
)88, -
;88- .
}99 	
else:: 
{;; 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< J
)<<J K
;<<K L
}== 	
}>> 
}@@ 
}AA Ü#
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_74a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_74a 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #

Dictionary   
<   
int   
,   
ulong   
>   
dataDictionary   ,
=  - .
new  / 2

Dictionary  3 =
<  = >
int  > A
,  A B
ulong  B G
>  G H
(  H I
)  I J
;  J K
dataDictionary!! 
.!! 
Add!! 
(!! 
$num!! 
,!! 
data!! "
)!!" #
;!!# $
dataDictionary"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" "
)""" #
;""# $
dataDictionary## 
.## 
Add## 
(## 
$num## 
,## 
data## "
)##" #
;### $9
-CWE191_Integer_Underflow__UInt64_rand_sub_74b$$ 5
.$$5 6
BadSink$$6 =
($$= >
dataDictionary$$> L
)$$N O
;$$O P
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
ulong11 
data11 
;11 
data33 
=33 
$num33 
;33 

Dictionary44 
<44 
int44 
,44 
ulong44 
>44 
dataDictionary44 ,
=44- .
new44/ 2

Dictionary443 =
<44= >
int44> A
,44A B
ulong44B G
>44G H
(44H I
)44I J
;44J K
dataDictionary55 
.55 
Add55 
(55 
$num55 
,55 
data55 "
)55" #
;55# $
dataDictionary66 
.66 
Add66 
(66 
$num66 
,66 
data66 "
)66" #
;66# $
dataDictionary77 
.77 
Add77 
(77 
$num77 
,77 
data77 "
)77" #
;77# $9
-CWE191_Integer_Underflow__UInt64_rand_sub_74b88 5
.885 6
GoodG2BSink886 A
(88A B
dataDictionary88B P
)88R S
;88S T
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
ulong>> 
data>> 
;>> 
data@@ 
=@@ 
IO@@ 
.@@ 
GetRandomULong@@  
(@@  !
)@@! "
;@@" #

DictionaryAA 
<AA 
intAA 
,AA 
ulongAA 
>AA 
dataDictionaryAA ,
=AA- .
newAA/ 2

DictionaryAA3 =
<AA= >
intAA> A
,AAA B
ulongAAB G
>AAG H
(AAH I
)AAI J
;AAJ K
dataDictionaryBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB "
)BB" #
;BB# $
dataDictionaryCC 
.CC 
AddCC 
(CC 
$numCC 
,CC 
dataCC "
)CC" #
;CC# $
dataDictionaryDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD "
)DD" #
;DD# $9
-CWE191_Integer_Underflow__UInt64_rand_sub_74bEE 5
.EE5 6
GoodB2GSinkEE6 A
(EEA B
dataDictionaryEEB P
)EER S
;EES T
}FF 
}HH 
}II Ÿ
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_74b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_74b 3
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
ulong. 3
>3 4
dataDictionary5 C
)D E
{ 
ulong 
data 
= 
dataDictionary #
[# $
$num$ %
]% &
;& '
ulong!! 
result!! 
=!! 
(!! 
ulong!! 
)!! 
(!! 
data!! #
-!!$ %
$num!!& '
)!!' (
;!!( )
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+""  !
result""" (
)""( )
;"") *
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( #
(((# $

Dictionary(($ .
<((. /
int((/ 2
,((2 3
ulong((3 8
>((8 9
dataDictionary((: H
)((I J
{)) 
ulong** 
data** 
=** 
dataDictionary** #
[**# $
$num**$ %
]**% &
;**& '
ulong,, 
result,, 
=,, 
(,, 
ulong,, 
),, 
(,, 
data,, #
-,,$ %
$num,,& '
),,' (
;,,( )
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+--  !
result--" (
)--( )
;--) *
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

Dictionary11# -
<11- .
int11. 1
,111 2
ulong112 7
>117 8
dataDictionary119 G
)11H I
{22 
ulong33 
data33 
=33 
dataDictionary33 #
[33# $
$num33$ %
]33% &
;33& '
if55 

(55 
data55 
>55 
ulong55 
.55 
MinValue55 !
)55! "
{66 	
ulong77 
result77 
=77 
(77 
ulong77 !
)77! "
(77" #
data77# '
-77( )
$num77* +
)77+ ,
;77, -
IO88 
.88 
	WriteLine88 
(88 
$str88 #
+88$ %
result88& ,
)88, -
;88- .
}99 	
else:: 
{;; 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< J
)<<J K
;<<K L
}== 	
}>> 
}@@ 
}AA Ω.
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_75a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_75a 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data!! 
=!! 
IO!! 
.!! 
GetRandomULong!!  
(!!  !
)!!! "
;!!" #
byte## 
[## 
]## 
dataSerialized## 
=## 
null##  $
;##$ %
try$$ 
{%% 	
BinaryFormatter&& 
bf&& 
=&&  
new&&! $
BinaryFormatter&&% 4
(&&4 5
)&&5 6
;&&6 7
using'' 
('' 
var'' 
ms'' 
='' 
new'' 
MemoryStream''  ,
('', -
)''- .
)''. /
{(( 
bf)) 
.)) 
	Serialize)) 
()) 
ms)) 
,))  
data))! %
)))% &
;))& '
dataSerialized** 
=**  
ms**! #
.**# $
ToArray**$ +
(**+ ,
)**, -
;**- .
}++ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_75b,, 9
.,,9 :
BadSink,,: A
(,,A B
dataSerialized,,B P
),,R S
;,,S T
}-- 	
catch.. 
(.. "
SerializationException.. %
exceptSerialize..& 5
)..5 6
{// 	
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 
.00 
LogLevel00 '
.00' (
Warn00( ,
,00, -
$str00. X
,00X Y
exceptSerialize00Z i
)00i j
;00j k
}11 	
}22 
public55 

override55 
void55 
Good55 
(55 
)55 
{66 
GoodG2B77 
(77 
)77 
;77 
GoodB2G88 
(88 
)88 
;88 
}99 
private<< 
static<< 
void<< 
GoodG2B<< 
(<<  
)<<  !
{== 
ulong>> 
data>> 
;>> 
data@@ 
=@@ 
IO@@ 
.@@ 
GetRandomULong@@  
(@@  !
)@@! "
;@@" #
byteBB 
[BB 
]BB 
dataSerializedBB 
=BB 
nullBB  $
;BB$ %
tryCC 
{DD 	
BinaryFormatterEE 
bfEE 
=EE  
newEE! $
BinaryFormatterEE% 4
(EE4 5
)EE5 6
;EE6 7
usingFF 
(FF 
varFF 
msFF 
=FF 
newFF 
MemoryStreamFF  ,
(FF, -
)FF- .
)FF. /
{GG 
bfHH 
.HH 
	SerializeHH 
(HH 
msHH 
,HH  
dataHH! %
)HH% &
;HH& '
dataSerializedII 
=II  
msII! #
.II# $
ToArrayII$ +
(II+ ,
)II, -
;II- .
}JJ 9
-CWE191_Integer_Underflow__UInt64_rand_sub_75bKK 9
.KK9 :
GoodG2BSinkKK: E
(KKE F
dataSerializedKKF T
)KKV W
;KKW X
}LL 	
catchMM 
(MM "
SerializationExceptionMM %
exceptSerializeMM& 5
)MM5 6
{NN 	
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO 
.OO 
LogLevelOO '
.OO' (
WarnOO( ,
,OO, -
$strOO. X
,OOX Y
exceptSerializeOOZ i
)OOi j
;OOj k
}PP 	
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
ulongVV 
dataVV 
;VV 
dataXX 
=XX 
IOXX 
.XX 
GetRandomULongXX  
(XX  !
)XX! "
;XX" #
byteZZ 
[ZZ 
]ZZ 
dataSerializedZZ 
=ZZ 
nullZZ  $
;ZZ$ %
try[[ 
{\\ 	
BinaryFormatter]] 
bf]] 
=]]  
new]]! $
BinaryFormatter]]% 4
(]]4 5
)]]5 6
;]]6 7
using^^ 
(^^ 
var^^ 
ms^^ 
=^^ 
new^^ 
MemoryStream^^  ,
(^^, -
)^^- .
)^^. /
{__ 
bf`` 
.`` 
	Serialize`` 
(`` 
ms`` 
,``  
data``! %
)``% &
;``& '
dataSerializedaa 
=aa  
msaa! #
.aa# $
ToArrayaa$ +
(aa+ ,
)aa, -
;aa- .
}bb 9
-CWE191_Integer_Underflow__UInt64_rand_sub_75bcc 9
.cc9 :
GoodB2GSinkcc: E
(ccE F
dataSerializedccF T
)ccV W
;ccW X
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. X
,ggX Y
exceptSerializeggZ i
)ggi j
;ggj k
}hh 	
}ii 
}kk 
}ll Ú6
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_75b.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_75b 3
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
ulong## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
ulong)) 
))) 
binForm)) %
.))% &
Deserialize))& 1
())1 2
	memStream))2 ;
))); <
;))< =
}** 
ulong,, 
result,, 
=,, 
(,, 
ulong,, !
),,! "
(,," #
data,,# '
-,,( )
$num,,* +
),,+ ,
;,,, -
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- #
+--$ %
result--& ,
)--, -
;--- .
}.. 	
catch// 
(// "
SerializationException// %
exceptSerialize//& 5
)//5 6
{00 	
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 
.11 
LogLevel11 '
.11' (
Warn11( ,
,11, -
$str11. Y
,11Y Z
exceptSerialize11[ j
)11j k
;11k l
}22 	
}33 
public88 

static88 
void88 
GoodG2BSink88 "
(88" #
byte88# '
[88' (
]88( )
dataSerialized88* 8
)889 :
{99 
try:: 
{;; 	
ulong<< 
data<< 
;<< 
var== 
binForm== 
=== 
new== 
BinaryFormatter== -
(==- .
)==. /
;==/ 0
using>> 
(>> 
var>> 
	memStream>>  
=>>! "
new>># &
MemoryStream>>' 3
(>>3 4
)>>4 5
)>>5 6
{?? 
	memStream@@ 
.@@ 
Write@@ 
(@@  
dataSerialized@@  .
,@@. /
$num@@0 1
,@@1 2
dataSerialized@@3 A
.@@A B
Length@@B H
)@@H I
;@@I J
	memStreamAA 
.AA 
SeekAA 
(AA 
$numAA  
,AA  !

SeekOriginAA" ,
.AA, -
BeginAA- 2
)AA2 3
;AA3 4
dataBB 
=BB 
(BB 
ulongBB 
)BB 
binFormBB %
.BB% &
DeserializeBB& 1
(BB1 2
	memStreamBB2 ;
)BB; <
;BB< =
}CC 
ulongEE 
resultEE 
=EE 
(EE 
ulongEE !
)EE! "
(EE" #
dataEE# '
-EE( )
$numEE* +
)EE+ ,
;EE, -
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF #
+FF$ %
resultFF& ,
)FF, -
;FF- .
}GG 	
catchHH 
(HH "
SerializationExceptionHH %
exceptSerializeHH& 5
)HH5 6
{II 	
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ 
.JJ 
LogLevelJJ '
.JJ' (
WarnJJ( ,
,JJ, -
$strJJ. Y
,JJY Z
exceptSerializeJJ[ j
)JJj k
;JJk l
}KK 	
}LL 
publicOO 

staticOO 
voidOO 
GoodB2GSinkOO "
(OO" #
byteOO# '
[OO' (
]OO( )
dataSerializedOO* 8
)OO9 :
{PP 
tryQQ 
{RR 	
ulongSS 
dataSS 
;SS 
varTT 
binFormTT 
=TT 
newTT 
BinaryFormatterTT -
(TT- .
)TT. /
;TT/ 0
usingUU 
(UU 
varUU 
	memStreamUU  
=UU! "
newUU# &
MemoryStreamUU' 3
(UU3 4
)UU4 5
)UU5 6
{VV 
	memStreamWW 
.WW 
WriteWW 
(WW  
dataSerializedWW  .
,WW. /
$numWW0 1
,WW1 2
dataSerializedWW3 A
.WWA B
LengthWWB H
)WWH I
;WWI J
	memStreamXX 
.XX 
SeekXX 
(XX 
$numXX  
,XX  !

SeekOriginXX" ,
.XX, -
BeginXX- 2
)XX2 3
;XX3 4
dataYY 
=YY 
(YY 
ulongYY 
)YY 
binFormYY %
.YY% &
DeserializeYY& 1
(YY1 2
	memStreamYY2 ;
)YY; <
;YY< =
}ZZ 
if\\ 
(\\ 
data\\ 
>\\ 
ulong\\ 
.\\ 
MinValue\\ %
)\\% &
{]] 
ulong^^ 
result^^ 
=^^ 
(^^  
ulong^^  %
)^^% &
(^^& '
data^^' +
-^^, -
$num^^. /
)^^/ 0
;^^0 1
IO__ 
.__ 
	WriteLine__ 
(__ 
$str__ '
+__( )
result__* 0
)__0 1
;__1 2
}`` 
elseaa 
{bb 
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc N
)ccN O
;ccO P
}dd 
}ee 	
catchff 
(ff "
SerializationExceptionff %
exceptSerializeff& 5
)ff5 6
{gg 	
IOhh 
.hh 
Loggerhh 
.hh 
Loghh 
(hh 
NLoghh 
.hh 
LogLevelhh '
.hh' (
Warnhh( ,
,hh, -
$strhh. Y
,hhY Z
exceptSerializehh[ j
)hhj k
;hhk l
}ii 	
}jj 
}ll 
}mm ◊
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_81a.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class 9
-CWE191_Integer_Underflow__UInt64_rand_sub_81a 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
ulong 
data 
; 
data 
= 
IO 
. 
GetRandomULong  
(  !
)! "
;" #=
1CWE191_Integer_Underflow__UInt64_rand_sub_81_base 9

baseObject: D
=E F
newG J<
0CWE191_Integer_Underflow__UInt64_rand_sub_81_badK {
({ |
)| }
;} ~

baseObject   
.   
Action   
(   
data   
)    
;    !
}!! 
public$$ 

override$$ 
void$$ 
Good$$ 
($$ 
)$$ 
{%% 
GoodG2B&& 
(&& 
)&& 
;&& 
GoodB2G'' 
('' 
)'' 
;'' 
}(( 
private++ 
void++ 
GoodG2B++ 
(++ 
)++ 
{,, 
ulong-- 
data-- 
;-- 
data// 
=// 
$num// 
;// =
1CWE191_Integer_Underflow__UInt64_rand_sub_81_base00 9

baseObject00: D
=00E F
new00G J@
4CWE191_Integer_Underflow__UInt64_rand_sub_81_goodG2B00K 
(	00 Ä
)
00Ä Å
;
00Å Ç

baseObject11 
.11 
Action11 
(11 
data11 
)11  
;11  !
}22 
private55 
void55 
GoodB2G55 
(55 
)55 
{66 
ulong77 
data77 
;77 
data99 
=99 
IO99 
.99 
GetRandomULong99  
(99  !
)99! "
;99" #=
1CWE191_Integer_Underflow__UInt64_rand_sub_81_base:: 9

baseObject::: D
=::E F
new::G J@
4CWE191_Integer_Underflow__UInt64_rand_sub_81_goodB2G::K 
(	:: Ä
)
::Ä Å
;
::Å Ç

baseObject;; 
.;; 
Action;; 
(;; 
data;; 
);;  
;;;  !
}<< 
}>> 
}?? Ò
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_81_bad.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class <
0CWE191_Integer_Underflow__UInt64_rand_sub_81_bad 6
:7 8=
1CWE191_Integer_Underflow__UInt64_rand_sub_81_base9 j
{ 
public 

override 
void 
Action 
(  
ulong  %
data& *
)+ ,
{ 
ulong 
result 
= 
( 
ulong 
) 
( 
data #
-$ %
$num& '
)' (
;( )
IO   

.  
 
	WriteLine   
(   
$str   
+    !
result  " (
)  ( )
;  ) *
}!! 
}"" 
}## Õ
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_81_base.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
abstract 
class	 =
1CWE191_Integer_Underflow__UInt64_rand_sub_81_base @
{ 
public 

abstract 
void 
Action 
(  
ulong  %
data& *
)+ ,
;, -
} 
} √

∞C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_81_goodB2G.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class @
4CWE191_Integer_Underflow__UInt64_rand_sub_81_goodB2G :
:; <=
1CWE191_Integer_Underflow__UInt64_rand_sub_81_base= n
{ 
public 

override 
void 
Action 
(  
ulong  %
data& *
)+ ,
{ 
if   

(   
data   
>   
ulong   
.   
MinValue   !
)  ! "
{!! 	
ulong"" 
result"" 
="" 
("" 
ulong"" !
)""! "
(""" #
data""# '
-""( )
$num""* +
)""+ ,
;"", -
IO## 
.## 
	WriteLine## 
(## 
$str## #
+##$ %
result##& ,
)##, -
;##- .
}$$ 	
else%% 
{&& 	
IO'' 
.'' 
	WriteLine'' 
('' 
$str'' J
)''J K
;''K L
}(( 	
})) 
}** 
}++ ˘
∞C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\CWE191_Integer_Underflow__UInt64_rand_sub_81_goodG2B.cs
	namespace 	
	testcases
 
. $
CWE191_Integer_Underflow ,
{ 
class @
4CWE191_Integer_Underflow__UInt64_rand_sub_81_goodG2B :
:; <=
1CWE191_Integer_Underflow__UInt64_rand_sub_81_base= n
{ 
public 

override 
void 
Action 
(  
ulong  %
data& *
)+ ,
{ 
ulong   
result   
=   
(   
ulong   
)   
(   
data   #
-  $ %
$num  & '
)  ' (
;  ( )
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!!  !
result!!" (
)!!( )
;!!) *
}"" 
}## 
}$$ Í∑
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\Program.cs
	namespace		 	
	testcases		
 
.		 $
CWE191_Integer_Underflow		 ,
{

 
class 
Program 
{ 
static 
void	 
Main 
( 
string 
[ 
] 
args  
)  !
{" #
if 
( 
args 

.
 
Any 
( 
) 
) 
{ 
if 
( 
args 
[ 
$num 
] 
. 
Equals 
( 
$str 
, 
StringComparison ,
., -
OrdinalIgnoreCase- >
)> ?
||@ B
args 
[ 
$num 
] 
. 
Equals !
(! "
$str" *
,* +
StringComparison, <
.< =
OrdinalIgnoreCase= N
)N O
)O P
{Q R
Console 
. 
	WriteLine 
( 
$str R
+S T
$str b
)b c
;c d
System 
. 
Environment 
. 
Exit 
( 
$num 
) 
;  
} 
foreach"" 
("" 
string"" 
	className"" 
in""  
args""! %
)""% &
{""' (
try$$ 
{$$	 

Type** 

myClass** 
=** 
Type** 
.** 
GetType** !
(**! "
	className**" +
)**+ ,
;**, -
object++ 
myObject++ 
=++ 
	Activator++ !
.++! "
CreateInstance++" 0
(++0 1
myClass++1 8
)++8 9
;++9 :
myClass,, 
.,, 
InvokeMember,, 
(,, 
$str,, $
,,,$ %
BindingFlags-- 
.-- 
InvokeMethod--  
|--! "
BindingFlags--# /
.--/ 0
Instance--0 8
|--9 :
BindingFlags--; G
.--G H
Public--H N
,--N O
null.. 
,.. 
myObject// 
,// 
new00 

object00 
[00 
]00 
{00 
	className00 
}00  !
)00! "
;00" #
}22 
catch22 
(22 
	Exception22 
ex22 
)22 
{22 
Console44 
.44 
	WriteLine44 
(44 
$str44 7
+448 9
	className44: C
)44C D
;44D E
Console55 
.55 
	WriteLine55 
(55 
ex55 
.55 

StackTrace55 %
)55% &
;55& '
}77 
Console99 
.99 
	WriteLine99 
(99 
$str99 
)99 
;99 
};; 
}== 
else== 	
{==
 
RunTestCWE1CC 
(CC 
)CC 
;CC 
RunTestCWE2DD 
(DD 
)DD 
;DD 
RunTestCWE3EE 
(EE 
)EE 
;EE 
RunTestCWE4FF 
(FF 
)FF 
;FF 
RunTestCWE5GG 
(GG 
)GG 
;GG 
RunTestCWE6HH 
(HH 
)HH 
;HH 
RunTestCWE7II 
(II 
)II 
;II 
RunTestCWE8JJ 
(JJ 
)JJ 
;JJ 
RunTestCWE9KK 
(KK 
)KK 
;KK 
}LL 
}MM 
privateOO 
staticOO	 
voidOO 
RunTestCWE1OO  
(OO  !
)OO! "
{OO# $
(QQ 
newQQ =
1CWE191_Integer_Underflow__UInt64_rand_multiply_01QQ 9
(QQ9 :
)QQ: ;
)QQ; <
.QQ< =
RunTestQQ= D
(QQD E
$strQQE x
)QQx y
;QQy z
(RR 
newRR =
1CWE191_Integer_Underflow__UInt64_rand_multiply_02RR 9
(RR9 :
)RR: ;
)RR; <
.RR< =
RunTestRR= D
(RRD E
$strRRE x
)RRx y
;RRy z
(SS 
newSS =
1CWE191_Integer_Underflow__UInt64_rand_multiply_03SS 9
(SS9 :
)SS: ;
)SS; <
.SS< =
RunTestSS= D
(SSD E
$strSSE x
)SSx y
;SSy z
(TT 
newTT =
1CWE191_Integer_Underflow__UInt64_rand_multiply_04TT 9
(TT9 :
)TT: ;
)TT; <
.TT< =
RunTestTT= D
(TTD E
$strTTE x
)TTx y
;TTy z
(UU 
newUU =
1CWE191_Integer_Underflow__UInt64_rand_multiply_05UU 9
(UU9 :
)UU: ;
)UU; <
.UU< =
RunTestUU= D
(UUD E
$strUUE x
)UUx y
;UUy z
(VV 
newVV =
1CWE191_Integer_Underflow__UInt64_rand_multiply_06VV 9
(VV9 :
)VV: ;
)VV; <
.VV< =
RunTestVV= D
(VVD E
$strVVE x
)VVx y
;VVy z
(WW 
newWW =
1CWE191_Integer_Underflow__UInt64_rand_multiply_07WW 9
(WW9 :
)WW: ;
)WW; <
.WW< =
RunTestWW= D
(WWD E
$strWWE x
)WWx y
;WWy z
(XX 
newXX =
1CWE191_Integer_Underflow__UInt64_rand_multiply_08XX 9
(XX9 :
)XX: ;
)XX; <
.XX< =
RunTestXX= D
(XXD E
$strXXE x
)XXx y
;XXy z
(YY 
newYY =
1CWE191_Integer_Underflow__UInt64_rand_multiply_09YY 9
(YY9 :
)YY: ;
)YY; <
.YY< =
RunTestYY= D
(YYD E
$strYYE x
)YYx y
;YYy z
(ZZ 
newZZ =
1CWE191_Integer_Underflow__UInt64_rand_multiply_10ZZ 9
(ZZ9 :
)ZZ: ;
)ZZ; <
.ZZ< =
RunTestZZ= D
(ZZD E
$strZZE x
)ZZx y
;ZZy z
([[ 
new[[ =
1CWE191_Integer_Underflow__UInt64_rand_multiply_11[[ 9
([[9 :
)[[: ;
)[[; <
.[[< =
RunTest[[= D
([[D E
$str[[E x
)[[x y
;[[y z
(\\ 
new\\ =
1CWE191_Integer_Underflow__UInt64_rand_multiply_12\\ 9
(\\9 :
)\\: ;
)\\; <
.\\< =
RunTest\\= D
(\\D E
$str\\E x
)\\x y
;\\y z
(]] 
new]] =
1CWE191_Integer_Underflow__UInt64_rand_multiply_13]] 9
(]]9 :
)]]: ;
)]]; <
.]]< =
RunTest]]= D
(]]D E
$str]]E x
)]]x y
;]]y z
(^^ 
new^^ =
1CWE191_Integer_Underflow__UInt64_rand_multiply_14^^ 9
(^^9 :
)^^: ;
)^^; <
.^^< =
RunTest^^= D
(^^D E
$str^^E x
)^^x y
;^^y z
(__ 
new__ =
1CWE191_Integer_Underflow__UInt64_rand_multiply_15__ 9
(__9 :
)__: ;
)__; <
.__< =
RunTest__= D
(__D E
$str__E x
)__x y
;__y z
(`` 
new`` =
1CWE191_Integer_Underflow__UInt64_rand_multiply_16`` 9
(``9 :
)``: ;
)``; <
.``< =
RunTest``= D
(``D E
$str``E x
)``x y
;``y z
(aa 
newaa =
1CWE191_Integer_Underflow__UInt64_rand_multiply_17aa 9
(aa9 :
)aa: ;
)aa; <
.aa< =
RunTestaa= D
(aaD E
$straaE x
)aax y
;aay z
(bb 
newbb =
1CWE191_Integer_Underflow__UInt64_rand_multiply_21bb 9
(bb9 :
)bb: ;
)bb; <
.bb< =
RunTestbb= D
(bbD E
$strbbE x
)bbx y
;bby z
(cc 
newcc >
2CWE191_Integer_Underflow__UInt64_rand_multiply_22acc :
(cc: ;
)cc; <
)cc< =
.cc= >
RunTestcc> E
(ccE F
$strccF z
)ccz {
;cc{ |
(dd 
newdd =
1CWE191_Integer_Underflow__UInt64_rand_multiply_31dd 9
(dd9 :
)dd: ;
)dd; <
.dd< =
RunTestdd= D
(ddD E
$strddE x
)ddx y
;ddy z
(ee 
newee =
1CWE191_Integer_Underflow__UInt64_rand_multiply_41ee 9
(ee9 :
)ee: ;
)ee; <
.ee< =
RunTestee= D
(eeD E
$streeE x
)eex y
;eey z
(ff 
newff =
1CWE191_Integer_Underflow__UInt64_rand_multiply_42ff 9
(ff9 :
)ff: ;
)ff; <
.ff< =
RunTestff= D
(ffD E
$strffE x
)ffx y
;ffy z
(gg 
newgg =
1CWE191_Integer_Underflow__UInt64_rand_multiply_45gg 9
(gg9 :
)gg: ;
)gg; <
.gg< =
RunTestgg= D
(ggD E
$strggE x
)ggx y
;ggy z
(hh 
newhh >
2CWE191_Integer_Underflow__UInt64_rand_multiply_51ahh :
(hh: ;
)hh; <
)hh< =
.hh= >
RunTesthh> E
(hhE F
$strhhF z
)hhz {
;hh{ |
(ii 
newii >
2CWE191_Integer_Underflow__UInt64_rand_multiply_52aii :
(ii: ;
)ii; <
)ii< =
.ii= >
RunTestii> E
(iiE F
$striiF z
)iiz {
;ii{ |
(jj 
newjj >
2CWE191_Integer_Underflow__UInt64_rand_multiply_53ajj :
(jj: ;
)jj; <
)jj< =
.jj= >
RunTestjj> E
(jjE F
$strjjF z
)jjz {
;jj{ |
(kk 
newkk >
2CWE191_Integer_Underflow__UInt64_rand_multiply_54akk :
(kk: ;
)kk; <
)kk< =
.kk= >
RunTestkk> E
(kkE F
$strkkF z
)kkz {
;kk{ |
(ll 
newll >
2CWE191_Integer_Underflow__UInt64_rand_multiply_61all :
(ll: ;
)ll; <
)ll< =
.ll= >
RunTestll> E
(llE F
$strllF z
)llz {
;ll{ |
(mm 
newmm >
2CWE191_Integer_Underflow__UInt64_rand_multiply_66amm :
(mm: ;
)mm; <
)mm< =
.mm= >
RunTestmm> E
(mmE F
$strmmF z
)mmz {
;mm{ |
(nn 
newnn >
2CWE191_Integer_Underflow__UInt64_rand_multiply_67ann :
(nn: ;
)nn; <
)nn< =
.nn= >
RunTestnn> E
(nnE F
$strnnF z
)nnz {
;nn{ |
(oo 
newoo >
2CWE191_Integer_Underflow__UInt64_rand_multiply_68aoo :
(oo: ;
)oo; <
)oo< =
.oo= >
RunTestoo> E
(ooE F
$strooF z
)ooz {
;oo{ |
(pp 
newpp >
2CWE191_Integer_Underflow__UInt64_rand_multiply_71app :
(pp: ;
)pp; <
)pp< =
.pp= >
RunTestpp> E
(ppE F
$strppF z
)ppz {
;pp{ |
(qq 
newqq >
2CWE191_Integer_Underflow__UInt64_rand_multiply_72aqq :
(qq: ;
)qq; <
)qq< =
.qq= >
RunTestqq> E
(qqE F
$strqqF z
)qqz {
;qq{ |
(rr 
newrr >
2CWE191_Integer_Underflow__UInt64_rand_multiply_73arr :
(rr: ;
)rr; <
)rr< =
.rr= >
RunTestrr> E
(rrE F
$strrrF z
)rrz {
;rr{ |
(ss 
newss >
2CWE191_Integer_Underflow__UInt64_rand_multiply_74ass :
(ss: ;
)ss; <
)ss< =
.ss= >
RunTestss> E
(ssE F
$strssF z
)ssz {
;ss{ |
(tt 
newtt >
2CWE191_Integer_Underflow__UInt64_rand_multiply_75att :
(tt: ;
)tt; <
)tt< =
.tt= >
RunTesttt> E
(ttE F
$strttF z
)ttz {
;tt{ |
(uu 
newuu >
2CWE191_Integer_Underflow__UInt64_rand_multiply_81auu :
(uu: ;
)uu; <
)uu< =
.uu= >
RunTestuu> E
(uuE F
$struuF z
)uuz {
;uu{ |
(vv 
newvv 8
,CWE191_Integer_Underflow__UInt64_rand_sub_01vv 4
(vv4 5
)vv5 6
)vv6 7
.vv7 8
RunTestvv8 ?
(vv? @
$strvv@ n
)vvn o
;vvo p
(ww 
newww 8
,CWE191_Integer_Underflow__UInt64_rand_sub_02ww 4
(ww4 5
)ww5 6
)ww6 7
.ww7 8
RunTestww8 ?
(ww? @
$strww@ n
)wwn o
;wwo p
(xx 
newxx 8
,CWE191_Integer_Underflow__UInt64_rand_sub_03xx 4
(xx4 5
)xx5 6
)xx6 7
.xx7 8
RunTestxx8 ?
(xx? @
$strxx@ n
)xxn o
;xxo p
(yy 
newyy 8
,CWE191_Integer_Underflow__UInt64_rand_sub_04yy 4
(yy4 5
)yy5 6
)yy6 7
.yy7 8
RunTestyy8 ?
(yy? @
$stryy@ n
)yyn o
;yyo p
(zz 
newzz 8
,CWE191_Integer_Underflow__UInt64_rand_sub_05zz 4
(zz4 5
)zz5 6
)zz6 7
.zz7 8
RunTestzz8 ?
(zz? @
$strzz@ n
)zzn o
;zzo p
({{ 
new{{ 8
,CWE191_Integer_Underflow__UInt64_rand_sub_06{{ 4
({{4 5
){{5 6
){{6 7
.{{7 8
RunTest{{8 ?
({{? @
$str{{@ n
){{n o
;{{o p
(|| 
new|| 8
,CWE191_Integer_Underflow__UInt64_rand_sub_07|| 4
(||4 5
)||5 6
)||6 7
.||7 8
RunTest||8 ?
(||? @
$str||@ n
)||n o
;||o p
(}} 
new}} 8
,CWE191_Integer_Underflow__UInt64_rand_sub_08}} 4
(}}4 5
)}}5 6
)}}6 7
.}}7 8
RunTest}}8 ?
(}}? @
$str}}@ n
)}}n o
;}}o p
(~~ 
new~~ 8
,CWE191_Integer_Underflow__UInt64_rand_sub_09~~ 4
(~~4 5
)~~5 6
)~~6 7
.~~7 8
RunTest~~8 ?
(~~? @
$str~~@ n
)~~n o
;~~o p
( 
new 8
,CWE191_Integer_Underflow__UInt64_rand_sub_10 4
(4 5
)5 6
)6 7
.7 8
RunTest8 ?
(? @
$str@ n
)n o
;o p
(
ÄÄ 
new
ÄÄ :
,CWE191_Integer_Underflow__UInt64_rand_sub_11
ÄÄ 4
(
ÄÄ4 5
)
ÄÄ5 6
)
ÄÄ6 7
.
ÄÄ7 8
RunTest
ÄÄ8 ?
(
ÄÄ? @
$str
ÄÄ@ n
)
ÄÄn o
;
ÄÄo p
(
ÅÅ 
new
ÅÅ :
,CWE191_Integer_Underflow__UInt64_rand_sub_12
ÅÅ 4
(
ÅÅ4 5
)
ÅÅ5 6
)
ÅÅ6 7
.
ÅÅ7 8
RunTest
ÅÅ8 ?
(
ÅÅ? @
$str
ÅÅ@ n
)
ÅÅn o
;
ÅÅo p
(
ÇÇ 
new
ÇÇ :
,CWE191_Integer_Underflow__UInt64_rand_sub_13
ÇÇ 4
(
ÇÇ4 5
)
ÇÇ5 6
)
ÇÇ6 7
.
ÇÇ7 8
RunTest
ÇÇ8 ?
(
ÇÇ? @
$str
ÇÇ@ n
)
ÇÇn o
;
ÇÇo p
(
ÉÉ 
new
ÉÉ :
,CWE191_Integer_Underflow__UInt64_rand_sub_14
ÉÉ 4
(
ÉÉ4 5
)
ÉÉ5 6
)
ÉÉ6 7
.
ÉÉ7 8
RunTest
ÉÉ8 ?
(
ÉÉ? @
$str
ÉÉ@ n
)
ÉÉn o
;
ÉÉo p
(
ÑÑ 
new
ÑÑ :
,CWE191_Integer_Underflow__UInt64_rand_sub_15
ÑÑ 4
(
ÑÑ4 5
)
ÑÑ5 6
)
ÑÑ6 7
.
ÑÑ7 8
RunTest
ÑÑ8 ?
(
ÑÑ? @
$str
ÑÑ@ n
)
ÑÑn o
;
ÑÑo p
(
ÖÖ 
new
ÖÖ :
,CWE191_Integer_Underflow__UInt64_rand_sub_16
ÖÖ 4
(
ÖÖ4 5
)
ÖÖ5 6
)
ÖÖ6 7
.
ÖÖ7 8
RunTest
ÖÖ8 ?
(
ÖÖ? @
$str
ÖÖ@ n
)
ÖÖn o
;
ÖÖo p
(
ÜÜ 
new
ÜÜ :
,CWE191_Integer_Underflow__UInt64_rand_sub_17
ÜÜ 4
(
ÜÜ4 5
)
ÜÜ5 6
)
ÜÜ6 7
.
ÜÜ7 8
RunTest
ÜÜ8 ?
(
ÜÜ? @
$str
ÜÜ@ n
)
ÜÜn o
;
ÜÜo p
(
áá 
new
áá :
,CWE191_Integer_Underflow__UInt64_rand_sub_21
áá 4
(
áá4 5
)
áá5 6
)
áá6 7
.
áá7 8
RunTest
áá8 ?
(
áá? @
$str
áá@ n
)
áán o
;
ááo p
(
àà 
new
àà ;
-CWE191_Integer_Underflow__UInt64_rand_sub_22a
àà 5
(
àà5 6
)
àà6 7
)
àà7 8
.
àà8 9
RunTest
àà9 @
(
àà@ A
$str
ààA p
)
ààp q
;
ààq r
(
ââ 
new
ââ :
,CWE191_Integer_Underflow__UInt64_rand_sub_31
ââ 4
(
ââ4 5
)
ââ5 6
)
ââ6 7
.
ââ7 8
RunTest
ââ8 ?
(
ââ? @
$str
ââ@ n
)
âân o
;
ââo p
(
ää 
new
ää :
,CWE191_Integer_Underflow__UInt64_rand_sub_41
ää 4
(
ää4 5
)
ää5 6
)
ää6 7
.
ää7 8
RunTest
ää8 ?
(
ää? @
$str
ää@ n
)
ään o
;
ääo p
(
ãã 
new
ãã :
,CWE191_Integer_Underflow__UInt64_rand_sub_42
ãã 4
(
ãã4 5
)
ãã5 6
)
ãã6 7
.
ãã7 8
RunTest
ãã8 ?
(
ãã? @
$str
ãã@ n
)
ããn o
;
ãão p
(
åå 
new
åå :
,CWE191_Integer_Underflow__UInt64_rand_sub_45
åå 4
(
åå4 5
)
åå5 6
)
åå6 7
.
åå7 8
RunTest
åå8 ?
(
åå? @
$str
åå@ n
)
åån o
;
ååo p
(
çç 
new
çç ;
-CWE191_Integer_Underflow__UInt64_rand_sub_51a
çç 5
(
çç5 6
)
çç6 7
)
çç7 8
.
çç8 9
RunTest
çç9 @
(
çç@ A
$str
ççA p
)
ççp q
;
ççq r
(
éé 
new
éé ;
-CWE191_Integer_Underflow__UInt64_rand_sub_52a
éé 5
(
éé5 6
)
éé6 7
)
éé7 8
.
éé8 9
RunTest
éé9 @
(
éé@ A
$str
ééA p
)
éép q
;
ééq r
(
èè 
new
èè ;
-CWE191_Integer_Underflow__UInt64_rand_sub_53a
èè 5
(
èè5 6
)
èè6 7
)
èè7 8
.
èè8 9
RunTest
èè9 @
(
èè@ A
$str
èèA p
)
èèp q
;
èèq r
(
êê 
new
êê ;
-CWE191_Integer_Underflow__UInt64_rand_sub_54a
êê 5
(
êê5 6
)
êê6 7
)
êê7 8
.
êê8 9
RunTest
êê9 @
(
êê@ A
$str
êêA p
)
êêp q
;
êêq r
(
ëë 
new
ëë ;
-CWE191_Integer_Underflow__UInt64_rand_sub_61a
ëë 5
(
ëë5 6
)
ëë6 7
)
ëë7 8
.
ëë8 9
RunTest
ëë9 @
(
ëë@ A
$str
ëëA p
)
ëëp q
;
ëëq r
(
íí 
new
íí ;
-CWE191_Integer_Underflow__UInt64_rand_sub_66a
íí 5
(
íí5 6
)
íí6 7
)
íí7 8
.
íí8 9
RunTest
íí9 @
(
íí@ A
$str
ííA p
)
ííp q
;
ííq r
(
ìì 
new
ìì ;
-CWE191_Integer_Underflow__UInt64_rand_sub_67a
ìì 5
(
ìì5 6
)
ìì6 7
)
ìì7 8
.
ìì8 9
RunTest
ìì9 @
(
ìì@ A
$str
ììA p
)
ììp q
;
ììq r
(
îî 
new
îî ;
-CWE191_Integer_Underflow__UInt64_rand_sub_68a
îî 5
(
îî5 6
)
îî6 7
)
îî7 8
.
îî8 9
RunTest
îî9 @
(
îî@ A
$str
îîA p
)
îîp q
;
îîq r
(
ïï 
new
ïï ;
-CWE191_Integer_Underflow__UInt64_rand_sub_71a
ïï 5
(
ïï5 6
)
ïï6 7
)
ïï7 8
.
ïï8 9
RunTest
ïï9 @
(
ïï@ A
$str
ïïA p
)
ïïp q
;
ïïq r
(
ññ 
new
ññ ;
-CWE191_Integer_Underflow__UInt64_rand_sub_72a
ññ 5
(
ññ5 6
)
ññ6 7
)
ññ7 8
.
ññ8 9
RunTest
ññ9 @
(
ññ@ A
$str
ññA p
)
ññp q
;
ññq r
(
óó 
new
óó ;
-CWE191_Integer_Underflow__UInt64_rand_sub_73a
óó 5
(
óó5 6
)
óó6 7
)
óó7 8
.
óó8 9
RunTest
óó9 @
(
óó@ A
$str
óóA p
)
óóp q
;
óóq r
(
òò 
new
òò ;
-CWE191_Integer_Underflow__UInt64_rand_sub_74a
òò 5
(
òò5 6
)
òò6 7
)
òò7 8
.
òò8 9
RunTest
òò9 @
(
òò@ A
$str
òòA p
)
òòp q
;
òòq r
(
ôô 
new
ôô ;
-CWE191_Integer_Underflow__UInt64_rand_sub_75a
ôô 5
(
ôô5 6
)
ôô6 7
)
ôô7 8
.
ôô8 9
RunTest
ôô9 @
(
ôô@ A
$str
ôôA p
)
ôôp q
;
ôôq r
(
öö 
new
öö ;
-CWE191_Integer_Underflow__UInt64_rand_sub_81a
öö 5
(
öö5 6
)
öö6 7
)
öö7 8
.
öö8 9
RunTest
öö9 @
(
öö@ A
$str
ööA p
)
ööp q
;
ööq r
}
úú 
private
ûû 
static
ûû	 
void
ûû 
RunTestCWE2
ûû  
(
ûû  !
)
ûû! "
{
ûû# $
}
¢¢ 
private
§§ 
static
§§	 
void
§§ 
RunTestCWE3
§§  
(
§§  !
)
§§! "
{
§§# $
}
®® 
private
™™ 
static
™™	 
void
™™ 
RunTestCWE4
™™  
(
™™  !
)
™™! "
{
™™# $
}
ÆÆ 
private
∞∞ 
static
∞∞	 
void
∞∞ 
RunTestCWE5
∞∞  
(
∞∞  !
)
∞∞! "
{
∞∞# $
}
¥¥ 
private
∂∂ 
static
∂∂	 
void
∂∂ 
RunTestCWE6
∂∂  
(
∂∂  !
)
∂∂! "
{
∂∂# $
}
∫∫ 
private
ºº 
static
ºº	 
void
ºº 
RunTestCWE7
ºº  
(
ºº  !
)
ºº! "
{
ºº# $
}
¿¿ 
private
¬¬ 
static
¬¬	 
void
¬¬ 
RunTestCWE8
¬¬  
(
¬¬  !
)
¬¬! "
{
¬¬# $
}
∆∆ 
private
»» 
static
»»	 
void
»» 
RunTestCWE9
»»  
(
»»  !
)
»»! "
{
»»# $
}
ÃÃ 
}ÕÕ 
}ŒŒ ø
ìC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE191_Integer_Underflow\s05\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str 7
)7 8
]8 9
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str 9
)9 :
]: ;
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *