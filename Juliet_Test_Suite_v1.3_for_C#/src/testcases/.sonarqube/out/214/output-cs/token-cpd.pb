”
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE674_Uncontrolled_Recursion\CWE674_Uncontrolled_Recursion__long_01.cs
	namespace		 	
	testcases		
 
.		 )
CWE674_Uncontrolled_Recursion		 1
{

 
class 	2
&CWE674_Uncontrolled_Recursion__long_01
 0
:1 2
AbstractTestCase3 C
{ 
private 
static 
readonly 
long  $
RECURSION_LONG_MAX% 7
=8 9
$num: <
;< =
private 
static 
void 
	helperBad %
(% &
long& *
level+ 0
)0 1
{ 	
if 
( 
level 
== 
$num 
) 
{ 
return 
; 
} 
	helperBad 
( 
level 
- 
$num 
)  
;  !
} 	
public 
override 
void 
Bad  
(  !
)! "
{ 	
long 
longMax 
= 
long 
.  
MaxValue  (
;( )
	helperBad   
(   
longMax   
)   
;   
}!! 	
private%% 
static%% 
void%% 
helperGood1%% '
(%%' (
long%%( ,
level%%- 2
)%%2 3
{&& 	
if(( 
((( 
level(( 
>(( 
RECURSION_LONG_MAX(( *
)((* +
{)) 
IO** 
.** 
	WriteLine** 
(** 
$str** 1
)**1 2
;**2 3
return++ 
;++ 
},, 
if.. 
(.. 
level.. 
==.. 
$num.. 
).. 
{// 
return00 
;00 
}11 
helperGood133 
(33 
level33 
-33 
$num33  !
)33! "
;33" #
}44 	
private66 
void66 
Good166 
(66 
)66 
{77 	
long88 
longMax88 
=88 
long88 
.88  
MaxValue88  (
;88( )
helperGood1:: 
(:: 
longMax:: 
)::  
;::  !
};; 	
public== 
override== 
void== 
Good== !
(==! "
)==" #
{>> 	
Good1?? 
(?? 
)?? 
;?? 
}@@ 	
}CC 
}DD ”
«C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE674_Uncontrolled_Recursion\CWE674_Uncontrolled_Recursion__missing_base_01.cs
	namespace

 	
	testcases


 
.

 )
CWE674_Uncontrolled_Recursion

 1
{ 
class 	:
.CWE674_Uncontrolled_Recursion__missing_base_01
 8
:9 :
AbstractTestCase; K
{ 
private 
static 
long 
	helperBad %
(% &
long& *
level+ 0
)0 1
{ 	
long 
longSum 
= 
level  
+! "
	helperBad# ,
(, -
level- 2
-3 4
$num5 6
)6 7
;7 8
return 
longSum 
; 
} 	
public 
override 
void 
Bad  
(  !
)! "
{ 	
long 

longRandom 
= 
( 
new "
Random# )
() *
)* +
)+ ,
., -
Next- 1
(1 2
$num2 5
)5 6
;6 7
IO 
. 
	WriteLine 
( 
	helperBad "
(" #

longRandom# -
)- .
). /
;/ 0
} 	
private 
static 
long 
helperGood1 '
(' (
long( ,
level- 2
)2 3
{   	
if"" 
("" 
level"" 
<"" 
$num"" 
)"" 
{## 
return$$ 
$num$$ 
;$$ 
}%% 
long'' 
longSum'' 
='' 
level''  
+''! "
helperGood1''# .
(''. /
level''/ 4
-''5 6
$num''7 8
)''8 9
;''9 :
return(( 
longSum(( 
;(( 
})) 	
private++ 
void++ 
Good1++ 
(++ 
)++ 
{,, 	
long-- 

longRandom-- 
=-- 
(-- 
new-- "
Random--# )
(--) *
)--* +
)--+ ,
.--, -
Next--- 1
(--1 2
$num--2 5
)--5 6
;--6 7
IO// 
.// 
	WriteLine// 
(// 
helperGood1// $
(//$ %

longRandom//% /
)/// 0
)//0 1
;//1 2
}00 	
public22 
override22 
void22 
Good22 !
(22! "
)22" #
{33 	
Good144 
(44 
)44 
;44 
}55 	
}88 
}99 Ë,
„C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE674_Uncontrolled_Recursion\Program.cs
	namespace		 	
	testcases		
 
.		 )
CWE674_Uncontrolled_Recursion		 1
{

 
class 
Program 
{ 
static 
void	 
Main 
( 
string 
[ 
] 
args  
)  !
{" #
if 
( 
args 

.
 
Any 
( 
) 
) 
{ 
if 
( 
args 
[ 
$num 
] 
. 
Equals 
( 
$str 
, 
StringComparison ,
., -
OrdinalIgnoreCase- >
)> ?
||@ B
args 
[ 
$num 
] 
. 
Equals !
(! "
$str" *
,* +
StringComparison, <
.< =
OrdinalIgnoreCase= N
)N O
)O P
{Q R
Console 
. 
	WriteLine 
( 
$str R
+S T
$str b
)b c
;c d
System 
. 
Environment 
. 
Exit 
( 
$num 
) 
;  
} 
foreach"" 
("" 
string"" 
	className"" 
in""  
args""! %
)""% &
{""' (
try$$ 
{$$	 

Type** 

myClass** 
=** 
Type** 
.** 
GetType** !
(**! "
	className**" +
)**+ ,
;**, -
object++ 
myObject++ 
=++ 
	Activator++ !
.++! "
CreateInstance++" 0
(++0 1
myClass++1 8
)++8 9
;++9 :
myClass,, 
.,, 
InvokeMember,, 
(,, 
$str,, $
,,,$ %
BindingFlags-- 
.-- 
InvokeMethod--  
|--! "
BindingFlags--# /
.--/ 0
Instance--0 8
|--9 :
BindingFlags--; G
.--G H
Public--H N
,--N O
null.. 
,.. 
myObject// 
,// 
new00 

object00 
[00 
]00 
{00 
	className00 
}00  !
)00! "
;00" #
}22 
catch22 
(22 
	Exception22 
ex22 
)22 
{22 
Console44 
.44 
	WriteLine44 
(44 
$str44 7
+448 9
	className44: C
)44C D
;44D E
Console55 
.55 
	WriteLine55 
(55 
ex55 
.55 

StackTrace55 %
)55% &
;55& '
}77 
Console99 
.99 
	WriteLine99 
(99 
$str99 
)99 
;99 
};; 
}== 
else== 	
{==
 
RunTestCWE1CC 
(CC 
)CC 
;CC 
RunTestCWE2DD 
(DD 
)DD 
;DD 
RunTestCWE3EE 
(EE 
)EE 
;EE 
RunTestCWE4FF 
(FF 
)FF 
;FF 
RunTestCWE5GG 
(GG 
)GG 
;GG 
RunTestCWE6HH 
(HH 
)HH 
;HH 
RunTestCWE7II 
(II 
)II 
;II 
RunTestCWE8JJ 
(JJ 
)JJ 
;JJ 
RunTestCWE9KK 
(KK 
)KK 
;KK 
}LL 
}MM 
privateOO 
staticOO	 
voidOO 
RunTestCWE1OO  
(OO  !
)OO! "
{OO# $
}SS 
privateUU 
staticUU	 
voidUU 
RunTestCWE2UU  
(UU  !
)UU! "
{UU# $
}YY 
private[[ 
static[[	 
void[[ 
RunTestCWE3[[  
([[  !
)[[! "
{[[# $
}__ 
privateaa 
staticaa	 
voidaa 
RunTestCWE4aa  
(aa  !
)aa! "
{aa# $
}ee 
privategg 
staticgg	 
voidgg 
RunTestCWE5gg  
(gg  !
)gg! "
{gg# $
}kk 
privatemm 
staticmm	 
voidmm 
RunTestCWE6mm  
(mm  !
)mm! "
{mm# $
(oo 
newoo 2
&CWE674_Uncontrolled_Recursion__long_01oo .
(oo. /
)oo/ 0
)oo0 1
.oo1 2
RunTestoo2 9
(oo9 :
$stroo: b
)oob c
;ooc d
(pp 
newpp :
.CWE674_Uncontrolled_Recursion__missing_base_01pp 6
(pp6 7
)pp7 8
)pp8 9
.pp9 :
RunTestpp: A
(ppA B
$strppB r
)ppr s
;pps t
}rr 
privatett 
statictt	 
voidtt 
RunTestCWE7tt  
(tt  !
)tt! "
{tt# $
}xx 
privatezz 
staticzz	 
voidzz 
RunTestCWE8zz  
(zz  !
)zz! "
{zz# $
}~~ 
private
€€ 
static
€€	 
void
€€ 
RunTestCWE9
€€  
(
€€  !
)
€€! "
{
€€# $
}
„„ 
}…… 
}†† À
”C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE674_Uncontrolled_Recursion\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str 8
)8 9
]9 :
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str :
): ;
]; <
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *