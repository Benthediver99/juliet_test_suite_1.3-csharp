∞T
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_01.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_01 9
:: ;
AbstractTestCase< L
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
password"" 
="" 
$str"" 
;"" 
try$$ 
{%% 	
password&& 
=&& 
Encoding&& 
.&&  
UTF8&&  $
.&&$ %
	GetString&&% .
(&&. /
File&&/ 3
.&&3 4
ReadAllBytes&&4 @
(&&@ A
$str&&A k
)&&k l
)&&l m
;&&m n
}'' 	
catch(( 
((( 
IOException(( 
exceptIO(( #
)((# $
{)) 	
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** 
.** 
LogLevel** '
.**' (
Warn**( ,
,**, -
$str**. G
,**G H
exceptIO**I Q
)**Q R
;**R S
}++ 	
using.. 
(.. 
SqlConnection.. 
dBConnection.. )
=..* +
new.., /
SqlConnection..0 =
(..= >
$str..> t
+..u v
$str..w {
+..| }
$str	..~ ä
+
..ã å
password
..ç ï
)
..ï ñ
)
..ñ ó
{// 	
try00 
{11 
dBConnection22 
.22 
Open22 !
(22! "
)22" #
;22# $
}33 
catch44 
(44 
SqlException44 
	exceptSql44  )
)44) *
{55 
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 "
.66" #
LogLevel66# +
.66+ ,
Warn66, 0
,660 1
$str662 R
,66R S
	exceptSql66T ]
)66] ^
;66^ _
}77 
}88 	
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
)<< 
{== 
GoodG2B>> 
(>> 
)>> 
;>> 
GoodB2G?? 
(?? 
)?? 
;?? 
}@@ 
privateCC 
voidCC 
GoodG2BCC 
(CC 
)CC 
{DD 
stringEE 
passwordEE 
;EE 
passwordFF 
=FF 
$strFF 
;FF 
tryHH 
{II 	
passwordJJ 
=JJ 
EncodingJJ 
.JJ  
UTF8JJ  $
.JJ$ %
	GetStringJJ% .
(JJ. /
FileJJ/ 3
.JJ3 4
ReadAllBytesJJ4 @
(JJ@ A
$strJJA k
)JJk l
)JJl m
;JJm n
}KK 	
catchLL 
(LL 
IOExceptionLL 
exceptIOLL #
)LL# $
{MM 	
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN 
.NN 
LogLevelNN '
.NN' (
WarnNN( ,
,NN, -
$strNN. G
,NNG H
exceptIONNI Q
)NNQ R
;NNR S
}OO 	
{QQ 	
usingRR 
(RR $
AesCryptoServiceProviderRR +
aesAlgRR, 2
=RR3 4
newRR5 8$
AesCryptoServiceProviderRR9 Q
(RRQ R
)RRR S
)RRS T
{SS 
aesAlgTT 
.TT 
KeyTT 
=TT 
EncodingTT %
.TT% &
UTF8TT& *
.TT* +
GetBytesTT+ 3
(TT3 4
$strTT4 F
)TTF G
;TTG H
aesAlgUU 
.UU 
IVUU 
=UU 
newUU 
byteUU  $
[UU$ %
$numUU% '
]UU' (
;UU( )
ICryptoTransformWW  
	decryptorWW! *
=WW+ ,
aesAlgWW- 3
.WW3 4
CreateDecryptorWW4 C
(WWC D
aesAlgWWD J
.WWJ K
KeyWWK N
,WWN O
aesAlgWWP V
.WWV W
IVWWW Y
)WWY Z
;WWZ [
usingYY 
(YY 
MemoryStreamYY #
	msDecryptYY$ -
=YY. /
newYY0 3
MemoryStreamYY4 @
(YY@ A
FileYYA E
.YYE F
ReadAllBytesYYF R
(YYR S
$strYYS }
)YY} ~
)YY~ 
)	YY Ä
{ZZ 
using[[ 
([[ 
CryptoStream[[ '
	csDecrypt[[( 1
=[[2 3
new[[4 7
CryptoStream[[8 D
([[D E
	msDecrypt[[E N
,[[N O
	decryptor[[P Y
,[[Y Z
CryptoStreamMode[[[ k
.[[k l
Read[[l p
)[[p q
)[[q r
{\\ 
using]] 
(]] 
StreamReader]] +
	srDecrypt]], 5
=]]6 7
new]]8 ;
StreamReader]]< H
(]]H I
	csDecrypt]]I R
)]]R S
)]]S T
{^^ 
passwordaa $
=aa% &
	srDecryptaa' 0
.aa0 1
	ReadToEndaa1 :
(aa: ;
)aa; <
;aa< =
}bb 
}cc 
}dd 
}ee 
}ff 	
usinghh 
(hh 
SqlConnectionhh 
dBConnectionhh )
=hh* +
newhh, /
SqlConnectionhh0 =
(hh= >
$strhh> t
+hhu v
$strhhw {
+hh| }
$str	hh~ ä
+
hhã å
password
hhç ï
)
hhï ñ
)
hhñ ó
{ii 	
tryjj 
{kk 
dBConnectionll 
.ll 
Openll !
(ll! "
)ll" #
;ll# $
}mm 
catchnn 
(nn 
SqlExceptionnn 
	exceptSqlnn  )
)nn) *
{oo 
IOpp 
.pp 
Loggerpp 
.pp 
Logpp 
(pp 
NLogpp "
.pp" #
LogLevelpp# +
.pp+ ,
Warnpp, 0
,pp0 1
$strpp2 R
,ppR S
	exceptSqlppT ]
)pp] ^
;pp^ _
}qq 
}rr 	
}ss 
privatevv 
voidvv 
GoodB2Gvv 
(vv 
)vv 
{ww 
stringxx 
passwordxx 
;xx 
passwordyy 
=yy 
$stryy 
;yy 
try{{ 
{|| 	
password}} 
=}} 
Encoding}} 
.}}  
UTF8}}  $
.}}$ %
	GetString}}% .
(}}. /
File}}/ 3
.}}3 4
ReadAllBytes}}4 @
(}}@ A
$str}}A k
)}}k l
)}}l m
;}}m n
}~~ 	
catch 
( 
IOException 
exceptIO #
)# $
{
ÄÄ 	
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ 
.
ÅÅ 
Log
ÅÅ 
(
ÅÅ 
NLog
ÅÅ 
.
ÅÅ 
LogLevel
ÅÅ '
.
ÅÅ' (
Warn
ÅÅ( ,
,
ÅÅ, -
$str
ÅÅ. G
,
ÅÅG H
exceptIO
ÅÅI Q
)
ÅÅQ R
;
ÅÅR S
}
ÇÇ 	
{
ÖÖ 	
using
ÜÜ 
(
ÜÜ &
AesCryptoServiceProvider
ÜÜ +
aesAlg
ÜÜ, 2
=
ÜÜ3 4
new
ÜÜ5 8&
AesCryptoServiceProvider
ÜÜ9 Q
(
ÜÜQ R
)
ÜÜR S
)
ÜÜS T
{
áá 
aesAlg
àà 
.
àà 
Key
àà 
=
àà 
Encoding
àà %
.
àà% &
UTF8
àà& *
.
àà* +
GetBytes
àà+ 3
(
àà3 4
$str
àà4 F
)
ààF G
;
ààG H
aesAlg
ââ 
.
ââ 
IV
ââ 
=
ââ 
new
ââ 
byte
ââ  $
[
ââ$ %
$num
ââ% '
]
ââ' (
;
ââ( )
ICryptoTransform
ãã  
	decryptor
ãã! *
=
ãã+ ,
aesAlg
ãã- 3
.
ãã3 4
CreateDecryptor
ãã4 C
(
ããC D
aesAlg
ããD J
.
ããJ K
Key
ããK N
,
ããN O
aesAlg
ããP V
.
ããV W
IV
ããW Y
)
ããY Z
;
ããZ [
using
çç 
(
çç 
MemoryStream
çç #
	msDecrypt
çç$ -
=
çç. /
new
çç0 3
MemoryStream
çç4 @
(
çç@ A
File
ççA E
.
ççE F
ReadAllBytes
ççF R
(
ççR S
$str
ççS }
)
çç} ~
)
çç~ 
)çç Ä
{
éé 
using
èè 
(
èè 
CryptoStream
èè '
	csDecrypt
èè( 1
=
èè2 3
new
èè4 7
CryptoStream
èè8 D
(
èèD E
	msDecrypt
èèE N
,
èèN O
	decryptor
èèP Y
,
èèY Z
CryptoStreamMode
èè[ k
.
èèk l
Read
èèl p
)
èèp q
)
èèq r
{
êê 
using
ëë 
(
ëë 
StreamReader
ëë +
	srDecrypt
ëë, 5
=
ëë6 7
new
ëë8 ;
StreamReader
ëë< H
(
ëëH I
	csDecrypt
ëëI R
)
ëëR S
)
ëëS T
{
íí 
password
ïï $
=
ïï% &
	srDecrypt
ïï' 0
.
ïï0 1
	ReadToEnd
ïï1 :
(
ïï: ;
)
ïï; <
;
ïï< =
}
ññ 
}
óó 
}
òò 
}
ôô 
}
öö 	
using
õõ 
(
õõ 
SqlConnection
õõ 
dBConnection
õõ )
=
õõ* +
new
õõ, /
SqlConnection
õõ0 =
(
õõ= >
$strõõ> Ä
+õõÅ Ç
passwordõõÉ ã
)õõã å
)õõå ç
{
úú 	
try
ùù 
{
ûû 
dBConnection
üü 
.
üü 
Open
üü !
(
üü! "
)
üü" #
;
üü# $
}
†† 
catch
°° 
(
°° 
SqlException
°° 
	exceptSql
°°  )
)
°°) *
{
¢¢ 
IO
££ 
.
££ 
Logger
££ 
.
££ 
Log
££ 
(
££ 
NLog
££ "
.
££" #
LogLevel
££# +
.
££+ ,
Warn
££, 0
,
££0 1
$str
££2 R
,
££R S
	exceptSql
££T ]
)
££] ^
;
££^ _
}
§§ 
}
•• 	
}
¶¶ 
}®® 
}©© ‰®
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_02.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_02 9
:: ;
AbstractTestCase< L
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
if"" 

("" 
true"" 
)"" 
{## 	
password$$ 
=$$ 
$str$$ 
;$$ 
try&& 
{'' 
password(( 
=(( 
Encoding(( #
.((# $
UTF8(($ (
.((( )
	GetString(() 2
(((2 3
File((3 7
.((7 8
ReadAllBytes((8 D
(((D E
$str((E o
)((o p
)((p q
;((q r
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 K
,,,K L
exceptIO,,M U
),,U V
;,,V W
}-- 
}// 	
else00 
{11 	
password44 
=44 
null44 
;44 
}55 	
if66 

(66 
true66 
)66 
{77 	
using99 
(99 
SqlConnection99  
dBConnection99! -
=99. /
new990 3
SqlConnection994 A
(99A B
$str99B x
+99y z
$str99{ 
+
99Ä Å
$str
99Ç é
+
99è ê
password
99ë ô
)
99ô ö
)
99ö õ
{:: 
try;; 
{<< 
dBConnection==  
.==  !
Open==! %
(==% &
)==& '
;==' (
}>> 
catch?? 
(?? 
SqlException?? #
	exceptSql??$ -
)??- .
{@@ 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA !
(AA! "
NLogAA" &
.AA& '
LogLevelAA' /
.AA/ 0
WarnAA0 4
,AA4 5
$strAA6 V
,AAV W
	exceptSqlAAX a
)AAa b
;AAb c
}BB 
}CC 
}DD 	
}EE 
privateII 
voidII 
GoodG2B1II 
(II 
)II 
{JJ 
stringKK 
passwordKK 
;KK 
ifLL 

(LL 
falseLL 
)LL 
{MM 	
passwordPP 
=PP 
nullPP 
;PP 
}QQ 	
elseRR 
{SS 	
passwordTT 
=TT 
$strTT 
;TT 
tryVV 
{WW 
passwordXX 
=XX 
EncodingXX #
.XX# $
UTF8XX$ (
.XX( )
	GetStringXX) 2
(XX2 3
FileXX3 7
.XX7 8
ReadAllBytesXX8 D
(XXD E
$strXXE o
)XXo p
)XXp q
;XXq r
}YY 
catchZZ 
(ZZ 
IOExceptionZZ 
exceptIOZZ '
)ZZ' (
{[[ 
IO\\ 
.\\ 
Logger\\ 
.\\ 
Log\\ 
(\\ 
NLog\\ "
.\\" #
LogLevel\\# +
.\\+ ,
Warn\\, 0
,\\0 1
$str\\2 K
,\\K L
exceptIO\\M U
)\\U V
;\\V W
}]] 
{__ 
using`` 
(`` $
AesCryptoServiceProvider`` /
aesAlg``0 6
=``7 8
new``9 <$
AesCryptoServiceProvider``= U
(``U V
)``V W
)``W X
{aa 
aesAlgbb 
.bb 
Keybb 
=bb  
Encodingbb! )
.bb) *
UTF8bb* .
.bb. /
GetBytesbb/ 7
(bb7 8
$strbb8 J
)bbJ K
;bbK L
aesAlgcc 
.cc 
IVcc 
=cc 
newcc  #
bytecc$ (
[cc( )
$numcc) +
]cc+ ,
;cc, -
ICryptoTransformee $
	decryptoree% .
=ee/ 0
aesAlgee1 7
.ee7 8
CreateDecryptoree8 G
(eeG H
aesAlgeeH N
.eeN O
KeyeeO R
,eeR S
aesAlgeeT Z
.eeZ [
IVee[ ]
)ee] ^
;ee^ _
usinggg 
(gg 
MemoryStreamgg '
	msDecryptgg( 1
=gg2 3
newgg4 7
MemoryStreamgg8 D
(ggD E
FileggE I
.ggI J
ReadAllBytesggJ V
(ggV W
$str	ggW Å
)
ggÅ Ç
)
ggÇ É
)
ggÉ Ñ
{hh 
usingii 
(ii 
CryptoStreamii +
	csDecryptii, 5
=ii6 7
newii8 ;
CryptoStreamii< H
(iiH I
	msDecryptiiI R
,iiR S
	decryptoriiT ]
,ii] ^
CryptoStreamModeii_ o
.iio p
Readiip t
)iit u
)iiu v
{jj 
usingkk !
(kk" #
StreamReaderkk# /
	srDecryptkk0 9
=kk: ;
newkk< ?
StreamReaderkk@ L
(kkL M
	csDecryptkkM V
)kkV W
)kkW X
{ll 
passwordoo  (
=oo) *
	srDecryptoo+ 4
.oo4 5
	ReadToEndoo5 >
(oo> ?
)oo? @
;oo@ A
}pp 
}qq 
}rr 
}ss 
}tt 
}uu 	
ifvv 

(vv 
truevv 
)vv 
{ww 	
usingyy 
(yy 
SqlConnectionyy  
dBConnectionyy! -
=yy. /
newyy0 3
SqlConnectionyy4 A
(yyA B
$stryyB x
+yyy z
$stryy{ 
+
yyÄ Å
$str
yyÇ é
+
yyè ê
password
yyë ô
)
yyô ö
)
yyö õ
{zz 
try{{ 
{|| 
dBConnection}}  
.}}  !
Open}}! %
(}}% &
)}}& '
;}}' (
}~~ 
catch 
( 
SqlException #
	exceptSql$ -
)- .
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ 
.
ÅÅ 
Log
ÅÅ !
(
ÅÅ! "
NLog
ÅÅ" &
.
ÅÅ& '
LogLevel
ÅÅ' /
.
ÅÅ/ 0
Warn
ÅÅ0 4
,
ÅÅ4 5
$str
ÅÅ6 V
,
ÅÅV W
	exceptSql
ÅÅX a
)
ÅÅa b
;
ÅÅb c
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
private
àà 
void
àà 
GoodG2B2
àà 
(
àà 
)
àà 
{
ââ 
string
ää 
password
ää 
;
ää 
if
ãã 

(
ãã 
true
ãã 
)
ãã 
{
åå 	
password
çç 
=
çç 
$str
çç 
;
çç 
try
èè 
{
êê 
password
ëë 
=
ëë 
Encoding
ëë #
.
ëë# $
UTF8
ëë$ (
.
ëë( )
	GetString
ëë) 2
(
ëë2 3
File
ëë3 7
.
ëë7 8
ReadAllBytes
ëë8 D
(
ëëD E
$str
ëëE o
)
ëëo p
)
ëëp q
;
ëëq r
}
íí 
catch
ìì 
(
ìì 
IOException
ìì 
exceptIO
ìì '
)
ìì' (
{
îî 
IO
ïï 
.
ïï 
Logger
ïï 
.
ïï 
Log
ïï 
(
ïï 
NLog
ïï "
.
ïï" #
LogLevel
ïï# +
.
ïï+ ,
Warn
ïï, 0
,
ïï0 1
$str
ïï2 K
,
ïïK L
exceptIO
ïïM U
)
ïïU V
;
ïïV W
}
ññ 
{
òò 
using
ôô 
(
ôô &
AesCryptoServiceProvider
ôô /
aesAlg
ôô0 6
=
ôô7 8
new
ôô9 <&
AesCryptoServiceProvider
ôô= U
(
ôôU V
)
ôôV W
)
ôôW X
{
öö 
aesAlg
õõ 
.
õõ 
Key
õõ 
=
õõ  
Encoding
õõ! )
.
õõ) *
UTF8
õõ* .
.
õõ. /
GetBytes
õõ/ 7
(
õõ7 8
$str
õõ8 J
)
õõJ K
;
õõK L
aesAlg
úú 
.
úú 
IV
úú 
=
úú 
new
úú  #
byte
úú$ (
[
úú( )
$num
úú) +
]
úú+ ,
;
úú, -
ICryptoTransform
ûû $
	decryptor
ûû% .
=
ûû/ 0
aesAlg
ûû1 7
.
ûû7 8
CreateDecryptor
ûû8 G
(
ûûG H
aesAlg
ûûH N
.
ûûN O
Key
ûûO R
,
ûûR S
aesAlg
ûûT Z
.
ûûZ [
IV
ûû[ ]
)
ûû] ^
;
ûû^ _
using
†† 
(
†† 
MemoryStream
†† '
	msDecrypt
††( 1
=
††2 3
new
††4 7
MemoryStream
††8 D
(
††D E
File
††E I
.
††I J
ReadAllBytes
††J V
(
††V W
$str††W Å
)††Å Ç
)††Ç É
)††É Ñ
{
°° 
using
¢¢ 
(
¢¢ 
CryptoStream
¢¢ +
	csDecrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
CryptoStream
¢¢< H
(
¢¢H I
	msDecrypt
¢¢I R
,
¢¢R S
	decryptor
¢¢T ]
,
¢¢] ^
CryptoStreamMode
¢¢_ o
.
¢¢o p
Read
¢¢p t
)
¢¢t u
)
¢¢u v
{
££ 
using
§§ !
(
§§" #
StreamReader
§§# /
	srDecrypt
§§0 9
=
§§: ;
new
§§< ?
StreamReader
§§@ L
(
§§L M
	csDecrypt
§§M V
)
§§V W
)
§§W X
{
•• 
password
®®  (
=
®®) *
	srDecrypt
®®+ 4
.
®®4 5
	ReadToEnd
®®5 >
(
®®> ?
)
®®? @
;
®®@ A
}
©© 
}
™™ 
}
´´ 
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
else
ØØ 
{
∞∞ 	
password
≥≥ 
=
≥≥ 
null
≥≥ 
;
≥≥ 
}
¥¥ 	
if
µµ 

(
µµ 
true
µµ 
)
µµ 
{
∂∂ 	
using
∏∏ 
(
∏∏ 
SqlConnection
∏∏  
dBConnection
∏∏! -
=
∏∏. /
new
∏∏0 3
SqlConnection
∏∏4 A
(
∏∏A B
$str
∏∏B x
+
∏∏y z
$str
∏∏{ 
+∏∏Ä Å
$str∏∏Ç é
+∏∏è ê
password∏∏ë ô
)∏∏ô ö
)∏∏ö õ
{
ππ 
try
∫∫ 
{
ªª 
dBConnection
ºº  
.
ºº  !
Open
ºº! %
(
ºº% &
)
ºº& '
;
ºº' (
}
ΩΩ 
catch
ææ 
(
ææ 
SqlException
ææ #
	exceptSql
ææ$ -
)
ææ- .
{
øø 
IO
¿¿ 
.
¿¿ 
Logger
¿¿ 
.
¿¿ 
Log
¿¿ !
(
¿¿! "
NLog
¿¿" &
.
¿¿& '
LogLevel
¿¿' /
.
¿¿/ 0
Warn
¿¿0 4
,
¿¿4 5
$str
¿¿6 V
,
¿¿V W
	exceptSql
¿¿X a
)
¿¿a b
;
¿¿b c
}
¡¡ 
}
¬¬ 
}
√√ 	
}
ƒƒ 
private
«« 
void
«« 
GoodB2G1
«« 
(
«« 
)
«« 
{
»» 
string
…… 
password
…… 
;
…… 
if
   

(
   
true
   
)
   
{
ÀÀ 	
password
ÃÃ 
=
ÃÃ 
$str
ÃÃ 
;
ÃÃ 
try
ŒŒ 
{
œœ 
password
–– 
=
–– 
Encoding
–– #
.
––# $
UTF8
––$ (
.
––( )
	GetString
––) 2
(
––2 3
File
––3 7
.
––7 8
ReadAllBytes
––8 D
(
––D E
$str
––E o
)
––o p
)
––p q
;
––q r
}
—— 
catch
““ 
(
““ 
IOException
““ 
exceptIO
““ '
)
““' (
{
”” 
IO
‘‘ 
.
‘‘ 
Logger
‘‘ 
.
‘‘ 
Log
‘‘ 
(
‘‘ 
NLog
‘‘ "
.
‘‘" #
LogLevel
‘‘# +
.
‘‘+ ,
Warn
‘‘, 0
,
‘‘0 1
$str
‘‘2 K
,
‘‘K L
exceptIO
‘‘M U
)
‘‘U V
;
‘‘V W
}
’’ 
}
◊◊ 	
else
ÿÿ 
{
ŸŸ 	
password
‹‹ 
=
‹‹ 
null
‹‹ 
;
‹‹ 
}
›› 	
if
ﬁﬁ 

(
ﬁﬁ 
false
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 	
IO
·· 
.
·· 
	WriteLine
·· 
(
·· 
$str
·· /
)
··/ 0
;
··0 1
}
‚‚ 	
else
„„ 
{
‰‰ 	
{
ÊÊ 
using
ÁÁ 
(
ÁÁ &
AesCryptoServiceProvider
ÁÁ /
aesAlg
ÁÁ0 6
=
ÁÁ7 8
new
ÁÁ9 <&
AesCryptoServiceProvider
ÁÁ= U
(
ÁÁU V
)
ÁÁV W
)
ÁÁW X
{
ËË 
aesAlg
ÈÈ 
.
ÈÈ 
Key
ÈÈ 
=
ÈÈ  
Encoding
ÈÈ! )
.
ÈÈ) *
UTF8
ÈÈ* .
.
ÈÈ. /
GetBytes
ÈÈ/ 7
(
ÈÈ7 8
$str
ÈÈ8 J
)
ÈÈJ K
;
ÈÈK L
aesAlg
ÍÍ 
.
ÍÍ 
IV
ÍÍ 
=
ÍÍ 
new
ÍÍ  #
byte
ÍÍ$ (
[
ÍÍ( )
$num
ÍÍ) +
]
ÍÍ+ ,
;
ÍÍ, -
ICryptoTransform
ÏÏ $
	decryptor
ÏÏ% .
=
ÏÏ/ 0
aesAlg
ÏÏ1 7
.
ÏÏ7 8
CreateDecryptor
ÏÏ8 G
(
ÏÏG H
aesAlg
ÏÏH N
.
ÏÏN O
Key
ÏÏO R
,
ÏÏR S
aesAlg
ÏÏT Z
.
ÏÏZ [
IV
ÏÏ[ ]
)
ÏÏ] ^
;
ÏÏ^ _
using
ÓÓ 
(
ÓÓ 
MemoryStream
ÓÓ '
	msDecrypt
ÓÓ( 1
=
ÓÓ2 3
new
ÓÓ4 7
MemoryStream
ÓÓ8 D
(
ÓÓD E
File
ÓÓE I
.
ÓÓI J
ReadAllBytes
ÓÓJ V
(
ÓÓV W
$strÓÓW Å
)ÓÓÅ Ç
)ÓÓÇ É
)ÓÓÉ Ñ
{
ÔÔ 
using
 
(
 
CryptoStream
 +
	csDecrypt
, 5
=
6 7
new
8 ;
CryptoStream
< H
(
H I
	msDecrypt
I R
,
R S
	decryptor
T ]
,
] ^
CryptoStreamMode
_ o
.
o p
Read
p t
)
t u
)
u v
{
ÒÒ 
using
ÚÚ !
(
ÚÚ" #
StreamReader
ÚÚ# /
	srDecrypt
ÚÚ0 9
=
ÚÚ: ;
new
ÚÚ< ?
StreamReader
ÚÚ@ L
(
ÚÚL M
	csDecrypt
ÚÚM V
)
ÚÚV W
)
ÚÚW X
{
ÛÛ 
password
ˆˆ  (
=
ˆˆ) *
	srDecrypt
ˆˆ+ 4
.
ˆˆ4 5
	ReadToEnd
ˆˆ5 >
(
ˆˆ> ?
)
ˆˆ? @
;
ˆˆ@ A
}
˜˜ 
}
¯¯ 
}
˘˘ 
}
˙˙ 
}
˚˚ 
using
¸¸ 
(
¸¸ 
SqlConnection
¸¸  
dBConnection
¸¸! -
=
¸¸. /
new
¸¸0 3
SqlConnection
¸¸4 A
(
¸¸A B
$str¸¸B Ñ
+¸¸Ö Ü
password¸¸á è
)¸¸è ê
)¸¸ê ë
{
˝˝ 
try
˛˛ 
{
ˇˇ 
dBConnection
ÄÄ  
.
ÄÄ  !
Open
ÄÄ! %
(
ÄÄ% &
)
ÄÄ& '
;
ÄÄ' (
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
SqlException
ÇÇ #
	exceptSql
ÇÇ$ -
)
ÇÇ- .
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ 
.
ÑÑ 
Log
ÑÑ !
(
ÑÑ! "
NLog
ÑÑ" &
.
ÑÑ& '
LogLevel
ÑÑ' /
.
ÑÑ/ 0
Warn
ÑÑ0 4
,
ÑÑ4 5
$str
ÑÑ6 V
,
ÑÑV W
	exceptSql
ÑÑX a
)
ÑÑa b
;
ÑÑb c
}
ÖÖ 
}
ÜÜ 
}
áá 	
}
àà 
private
ãã 
void
ãã 
GoodB2G2
ãã 
(
ãã 
)
ãã 
{
åå 
string
çç 
password
çç 
;
çç 
if
éé 

(
éé 
true
éé 
)
éé 
{
èè 	
password
êê 
=
êê 
$str
êê 
;
êê 
try
íí 
{
ìì 
password
îî 
=
îî 
Encoding
îî #
.
îî# $
UTF8
îî$ (
.
îî( )
	GetString
îî) 2
(
îî2 3
File
îî3 7
.
îî7 8
ReadAllBytes
îî8 D
(
îîD E
$str
îîE o
)
îîo p
)
îîp q
;
îîq r
}
ïï 
catch
ññ 
(
ññ 
IOException
ññ 
exceptIO
ññ '
)
ññ' (
{
óó 
IO
òò 
.
òò 
Logger
òò 
.
òò 
Log
òò 
(
òò 
NLog
òò "
.
òò" #
LogLevel
òò# +
.
òò+ ,
Warn
òò, 0
,
òò0 1
$str
òò2 K
,
òòK L
exceptIO
òòM U
)
òòU V
;
òòV W
}
ôô 
}
õõ 	
else
úú 
{
ùù 	
password
†† 
=
†† 
null
†† 
;
†† 
}
°° 	
if
¢¢ 

(
¢¢ 
true
¢¢ 
)
¢¢ 
{
££ 	
{
•• 
using
¶¶ 
(
¶¶ &
AesCryptoServiceProvider
¶¶ /
aesAlg
¶¶0 6
=
¶¶7 8
new
¶¶9 <&
AesCryptoServiceProvider
¶¶= U
(
¶¶U V
)
¶¶V W
)
¶¶W X
{
ßß 
aesAlg
®® 
.
®® 
Key
®® 
=
®®  
Encoding
®®! )
.
®®) *
UTF8
®®* .
.
®®. /
GetBytes
®®/ 7
(
®®7 8
$str
®®8 J
)
®®J K
;
®®K L
aesAlg
©© 
.
©© 
IV
©© 
=
©© 
new
©©  #
byte
©©$ (
[
©©( )
$num
©©) +
]
©©+ ,
;
©©, -
ICryptoTransform
´´ $
	decryptor
´´% .
=
´´/ 0
aesAlg
´´1 7
.
´´7 8
CreateDecryptor
´´8 G
(
´´G H
aesAlg
´´H N
.
´´N O
Key
´´O R
,
´´R S
aesAlg
´´T Z
.
´´Z [
IV
´´[ ]
)
´´] ^
;
´´^ _
using
≠≠ 
(
≠≠ 
MemoryStream
≠≠ '
	msDecrypt
≠≠( 1
=
≠≠2 3
new
≠≠4 7
MemoryStream
≠≠8 D
(
≠≠D E
File
≠≠E I
.
≠≠I J
ReadAllBytes
≠≠J V
(
≠≠V W
$str≠≠W Å
)≠≠Å Ç
)≠≠Ç É
)≠≠É Ñ
{
ÆÆ 
using
ØØ 
(
ØØ 
CryptoStream
ØØ +
	csDecrypt
ØØ, 5
=
ØØ6 7
new
ØØ8 ;
CryptoStream
ØØ< H
(
ØØH I
	msDecrypt
ØØI R
,
ØØR S
	decryptor
ØØT ]
,
ØØ] ^
CryptoStreamMode
ØØ_ o
.
ØØo p
Read
ØØp t
)
ØØt u
)
ØØu v
{
∞∞ 
using
±± !
(
±±" #
StreamReader
±±# /
	srDecrypt
±±0 9
=
±±: ;
new
±±< ?
StreamReader
±±@ L
(
±±L M
	csDecrypt
±±M V
)
±±V W
)
±±W X
{
≤≤ 
password
µµ  (
=
µµ) *
	srDecrypt
µµ+ 4
.
µµ4 5
	ReadToEnd
µµ5 >
(
µµ> ?
)
µµ? @
;
µµ@ A
}
∂∂ 
}
∑∑ 
}
∏∏ 
}
ππ 
}
∫∫ 
using
ªª 
(
ªª 
SqlConnection
ªª  
dBConnection
ªª! -
=
ªª. /
new
ªª0 3
SqlConnection
ªª4 A
(
ªªA B
$strªªB Ñ
+ªªÖ Ü
passwordªªá è
)ªªè ê
)ªªê ë
{
ºº 
try
ΩΩ 
{
ææ 
dBConnection
øø  
.
øø  !
Open
øø! %
(
øø% &
)
øø& '
;
øø' (
}
¿¿ 
catch
¡¡ 
(
¡¡ 
SqlException
¡¡ #
	exceptSql
¡¡$ -
)
¡¡- .
{
¬¬ 
IO
√√ 
.
√√ 
Logger
√√ 
.
√√ 
Log
√√ !
(
√√! "
NLog
√√" &
.
√√& '
LogLevel
√√' /
.
√√/ 0
Warn
√√0 4
,
√√4 5
$str
√√6 V
,
√√V W
	exceptSql
√√X a
)
√√a b
;
√√b c
}
ƒƒ 
}
≈≈ 
}
∆∆ 	
}
«« 
public
…… 

override
…… 
void
…… 
Good
…… 
(
…… 
)
…… 
{
   
GoodG2B1
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodG2B2
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G1
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G2
ŒŒ 
(
ŒŒ 
)
ŒŒ 
;
ŒŒ 
}
œœ 
}—— 
}““ Œ´
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_03.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_03 9
:: ;
AbstractTestCase< L
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
if"" 

("" 
$num"" 
=="" 
$num"" 
)"" 
{## 	
password$$ 
=$$ 
$str$$ 
;$$ 
try&& 
{'' 
password(( 
=(( 
Encoding(( #
.((# $
UTF8(($ (
.((( )
	GetString(() 2
(((2 3
File((3 7
.((7 8
ReadAllBytes((8 D
(((D E
$str((E o
)((o p
)((p q
;((q r
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 K
,,,K L
exceptIO,,M U
),,U V
;,,V W
}-- 
}// 	
else00 
{11 	
password44 
=44 
null44 
;44 
}55 	
if66 

(66 
$num66 
==66 
$num66 
)66 
{77 	
using99 
(99 
SqlConnection99  
dBConnection99! -
=99. /
new990 3
SqlConnection994 A
(99A B
$str99B x
+99y z
$str99{ 
+
99Ä Å
$str
99Ç é
+
99è ê
password
99ë ô
)
99ô ö
)
99ö õ
{:: 
try;; 
{<< 
dBConnection==  
.==  !
Open==! %
(==% &
)==& '
;==' (
}>> 
catch?? 
(?? 
SqlException?? #
	exceptSql??$ -
)??- .
{@@ 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA !
(AA! "
NLogAA" &
.AA& '
LogLevelAA' /
.AA/ 0
WarnAA0 4
,AA4 5
$strAA6 V
,AAV W
	exceptSqlAAX a
)AAa b
;AAb c
}BB 
}CC 
}DD 	
}EE 
privateII 
voidII 
GoodG2B1II 
(II 
)II 
{JJ 
stringKK 
passwordKK 
;KK 
ifLL 

(LL 
$numLL 
!=LL 
$numLL 
)LL 
{MM 	
passwordPP 
=PP 
nullPP 
;PP 
}QQ 	
elseRR 
{SS 	
passwordTT 
=TT 
$strTT 
;TT 
tryVV 
{WW 
passwordXX 
=XX 
EncodingXX #
.XX# $
UTF8XX$ (
.XX( )
	GetStringXX) 2
(XX2 3
FileXX3 7
.XX7 8
ReadAllBytesXX8 D
(XXD E
$strXXE o
)XXo p
)XXp q
;XXq r
}YY 
catchZZ 
(ZZ 
IOExceptionZZ 
exceptIOZZ '
)ZZ' (
{[[ 
IO\\ 
.\\ 
Logger\\ 
.\\ 
Log\\ 
(\\ 
NLog\\ "
.\\" #
LogLevel\\# +
.\\+ ,
Warn\\, 0
,\\0 1
$str\\2 K
,\\K L
exceptIO\\M U
)\\U V
;\\V W
}]] 
{__ 
using`` 
(`` $
AesCryptoServiceProvider`` /
aesAlg``0 6
=``7 8
new``9 <$
AesCryptoServiceProvider``= U
(``U V
)``V W
)``W X
{aa 
aesAlgbb 
.bb 
Keybb 
=bb  
Encodingbb! )
.bb) *
UTF8bb* .
.bb. /
GetBytesbb/ 7
(bb7 8
$strbb8 J
)bbJ K
;bbK L
aesAlgcc 
.cc 
IVcc 
=cc 
newcc  #
bytecc$ (
[cc( )
$numcc) +
]cc+ ,
;cc, -
ICryptoTransformee $
	decryptoree% .
=ee/ 0
aesAlgee1 7
.ee7 8
CreateDecryptoree8 G
(eeG H
aesAlgeeH N
.eeN O
KeyeeO R
,eeR S
aesAlgeeT Z
.eeZ [
IVee[ ]
)ee] ^
;ee^ _
usinggg 
(gg 
MemoryStreamgg '
	msDecryptgg( 1
=gg2 3
newgg4 7
MemoryStreamgg8 D
(ggD E
FileggE I
.ggI J
ReadAllBytesggJ V
(ggV W
$str	ggW Å
)
ggÅ Ç
)
ggÇ É
)
ggÉ Ñ
{hh 
usingii 
(ii 
CryptoStreamii +
	csDecryptii, 5
=ii6 7
newii8 ;
CryptoStreamii< H
(iiH I
	msDecryptiiI R
,iiR S
	decryptoriiT ]
,ii] ^
CryptoStreamModeii_ o
.iio p
Readiip t
)iit u
)iiu v
{jj 
usingkk !
(kk" #
StreamReaderkk# /
	srDecryptkk0 9
=kk: ;
newkk< ?
StreamReaderkk@ L
(kkL M
	csDecryptkkM V
)kkV W
)kkW X
{ll 
passwordoo  (
=oo) *
	srDecryptoo+ 4
.oo4 5
	ReadToEndoo5 >
(oo> ?
)oo? @
;oo@ A
}pp 
}qq 
}rr 
}ss 
}tt 
}uu 	
ifvv 

(vv 
$numvv 
==vv 
$numvv 
)vv 
{ww 	
usingyy 
(yy 
SqlConnectionyy  
dBConnectionyy! -
=yy. /
newyy0 3
SqlConnectionyy4 A
(yyA B
$stryyB x
+yyy z
$stryy{ 
+
yyÄ Å
$str
yyÇ é
+
yyè ê
password
yyë ô
)
yyô ö
)
yyö õ
{zz 
try{{ 
{|| 
dBConnection}}  
.}}  !
Open}}! %
(}}% &
)}}& '
;}}' (
}~~ 
catch 
( 
SqlException #
	exceptSql$ -
)- .
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ 
.
ÅÅ 
Log
ÅÅ !
(
ÅÅ! "
NLog
ÅÅ" &
.
ÅÅ& '
LogLevel
ÅÅ' /
.
ÅÅ/ 0
Warn
ÅÅ0 4
,
ÅÅ4 5
$str
ÅÅ6 V
,
ÅÅV W
	exceptSql
ÅÅX a
)
ÅÅa b
;
ÅÅb c
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
private
àà 
void
àà 
GoodG2B2
àà 
(
àà 
)
àà 
{
ââ 
string
ää 
password
ää 
;
ää 
if
ãã 

(
ãã 
$num
ãã 
==
ãã 
$num
ãã 
)
ãã 
{
åå 	
password
çç 
=
çç 
$str
çç 
;
çç 
try
èè 
{
êê 
password
ëë 
=
ëë 
Encoding
ëë #
.
ëë# $
UTF8
ëë$ (
.
ëë( )
	GetString
ëë) 2
(
ëë2 3
File
ëë3 7
.
ëë7 8
ReadAllBytes
ëë8 D
(
ëëD E
$str
ëëE o
)
ëëo p
)
ëëp q
;
ëëq r
}
íí 
catch
ìì 
(
ìì 
IOException
ìì 
exceptIO
ìì '
)
ìì' (
{
îî 
IO
ïï 
.
ïï 
Logger
ïï 
.
ïï 
Log
ïï 
(
ïï 
NLog
ïï "
.
ïï" #
LogLevel
ïï# +
.
ïï+ ,
Warn
ïï, 0
,
ïï0 1
$str
ïï2 K
,
ïïK L
exceptIO
ïïM U
)
ïïU V
;
ïïV W
}
ññ 
{
òò 
using
ôô 
(
ôô &
AesCryptoServiceProvider
ôô /
aesAlg
ôô0 6
=
ôô7 8
new
ôô9 <&
AesCryptoServiceProvider
ôô= U
(
ôôU V
)
ôôV W
)
ôôW X
{
öö 
aesAlg
õõ 
.
õõ 
Key
õõ 
=
õõ  
Encoding
õõ! )
.
õõ) *
UTF8
õõ* .
.
õõ. /
GetBytes
õõ/ 7
(
õõ7 8
$str
õõ8 J
)
õõJ K
;
õõK L
aesAlg
úú 
.
úú 
IV
úú 
=
úú 
new
úú  #
byte
úú$ (
[
úú( )
$num
úú) +
]
úú+ ,
;
úú, -
ICryptoTransform
ûû $
	decryptor
ûû% .
=
ûû/ 0
aesAlg
ûû1 7
.
ûû7 8
CreateDecryptor
ûû8 G
(
ûûG H
aesAlg
ûûH N
.
ûûN O
Key
ûûO R
,
ûûR S
aesAlg
ûûT Z
.
ûûZ [
IV
ûû[ ]
)
ûû] ^
;
ûû^ _
using
†† 
(
†† 
MemoryStream
†† '
	msDecrypt
††( 1
=
††2 3
new
††4 7
MemoryStream
††8 D
(
††D E
File
††E I
.
††I J
ReadAllBytes
††J V
(
††V W
$str††W Å
)††Å Ç
)††Ç É
)††É Ñ
{
°° 
using
¢¢ 
(
¢¢ 
CryptoStream
¢¢ +
	csDecrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
CryptoStream
¢¢< H
(
¢¢H I
	msDecrypt
¢¢I R
,
¢¢R S
	decryptor
¢¢T ]
,
¢¢] ^
CryptoStreamMode
¢¢_ o
.
¢¢o p
Read
¢¢p t
)
¢¢t u
)
¢¢u v
{
££ 
using
§§ !
(
§§" #
StreamReader
§§# /
	srDecrypt
§§0 9
=
§§: ;
new
§§< ?
StreamReader
§§@ L
(
§§L M
	csDecrypt
§§M V
)
§§V W
)
§§W X
{
•• 
password
®®  (
=
®®) *
	srDecrypt
®®+ 4
.
®®4 5
	ReadToEnd
®®5 >
(
®®> ?
)
®®? @
;
®®@ A
}
©© 
}
™™ 
}
´´ 
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
else
ØØ 
{
∞∞ 	
password
≥≥ 
=
≥≥ 
null
≥≥ 
;
≥≥ 
}
¥¥ 	
if
µµ 

(
µµ 
$num
µµ 
==
µµ 
$num
µµ 
)
µµ 
{
∂∂ 	
using
∏∏ 
(
∏∏ 
SqlConnection
∏∏  
dBConnection
∏∏! -
=
∏∏. /
new
∏∏0 3
SqlConnection
∏∏4 A
(
∏∏A B
$str
∏∏B x
+
∏∏y z
$str
∏∏{ 
+∏∏Ä Å
$str∏∏Ç é
+∏∏è ê
password∏∏ë ô
)∏∏ô ö
)∏∏ö õ
{
ππ 
try
∫∫ 
{
ªª 
dBConnection
ºº  
.
ºº  !
Open
ºº! %
(
ºº% &
)
ºº& '
;
ºº' (
}
ΩΩ 
catch
ææ 
(
ææ 
SqlException
ææ #
	exceptSql
ææ$ -
)
ææ- .
{
øø 
IO
¿¿ 
.
¿¿ 
Logger
¿¿ 
.
¿¿ 
Log
¿¿ !
(
¿¿! "
NLog
¿¿" &
.
¿¿& '
LogLevel
¿¿' /
.
¿¿/ 0
Warn
¿¿0 4
,
¿¿4 5
$str
¿¿6 V
,
¿¿V W
	exceptSql
¿¿X a
)
¿¿a b
;
¿¿b c
}
¡¡ 
}
¬¬ 
}
√√ 	
}
ƒƒ 
private
«« 
void
«« 
GoodB2G1
«« 
(
«« 
)
«« 
{
»» 
string
…… 
password
…… 
;
…… 
if
   

(
   
$num
   
==
   
$num
   
)
   
{
ÀÀ 	
password
ÃÃ 
=
ÃÃ 
$str
ÃÃ 
;
ÃÃ 
try
ŒŒ 
{
œœ 
password
–– 
=
–– 
Encoding
–– #
.
––# $
UTF8
––$ (
.
––( )
	GetString
––) 2
(
––2 3
File
––3 7
.
––7 8
ReadAllBytes
––8 D
(
––D E
$str
––E o
)
––o p
)
––p q
;
––q r
}
—— 
catch
““ 
(
““ 
IOException
““ 
exceptIO
““ '
)
““' (
{
”” 
IO
‘‘ 
.
‘‘ 
Logger
‘‘ 
.
‘‘ 
Log
‘‘ 
(
‘‘ 
NLog
‘‘ "
.
‘‘" #
LogLevel
‘‘# +
.
‘‘+ ,
Warn
‘‘, 0
,
‘‘0 1
$str
‘‘2 K
,
‘‘K L
exceptIO
‘‘M U
)
‘‘U V
;
‘‘V W
}
’’ 
}
◊◊ 	
else
ÿÿ 
{
ŸŸ 	
password
‹‹ 
=
‹‹ 
null
‹‹ 
;
‹‹ 
}
›› 	
if
ﬁﬁ 

(
ﬁﬁ 
$num
ﬁﬁ 
!=
ﬁﬁ 
$num
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 	
IO
·· 
.
·· 
	WriteLine
·· 
(
·· 
$str
·· /
)
··/ 0
;
··0 1
}
‚‚ 	
else
„„ 
{
‰‰ 	
{
ÊÊ 
using
ÁÁ 
(
ÁÁ &
AesCryptoServiceProvider
ÁÁ /
aesAlg
ÁÁ0 6
=
ÁÁ7 8
new
ÁÁ9 <&
AesCryptoServiceProvider
ÁÁ= U
(
ÁÁU V
)
ÁÁV W
)
ÁÁW X
{
ËË 
aesAlg
ÈÈ 
.
ÈÈ 
Key
ÈÈ 
=
ÈÈ  
Encoding
ÈÈ! )
.
ÈÈ) *
UTF8
ÈÈ* .
.
ÈÈ. /
GetBytes
ÈÈ/ 7
(
ÈÈ7 8
$str
ÈÈ8 J
)
ÈÈJ K
;
ÈÈK L
aesAlg
ÍÍ 
.
ÍÍ 
IV
ÍÍ 
=
ÍÍ 
new
ÍÍ  #
byte
ÍÍ$ (
[
ÍÍ( )
$num
ÍÍ) +
]
ÍÍ+ ,
;
ÍÍ, -
ICryptoTransform
ÏÏ $
	decryptor
ÏÏ% .
=
ÏÏ/ 0
aesAlg
ÏÏ1 7
.
ÏÏ7 8
CreateDecryptor
ÏÏ8 G
(
ÏÏG H
aesAlg
ÏÏH N
.
ÏÏN O
Key
ÏÏO R
,
ÏÏR S
aesAlg
ÏÏT Z
.
ÏÏZ [
IV
ÏÏ[ ]
)
ÏÏ] ^
;
ÏÏ^ _
using
ÓÓ 
(
ÓÓ 
MemoryStream
ÓÓ '
	msDecrypt
ÓÓ( 1
=
ÓÓ2 3
new
ÓÓ4 7
MemoryStream
ÓÓ8 D
(
ÓÓD E
File
ÓÓE I
.
ÓÓI J
ReadAllBytes
ÓÓJ V
(
ÓÓV W
$strÓÓW Å
)ÓÓÅ Ç
)ÓÓÇ É
)ÓÓÉ Ñ
{
ÔÔ 
using
 
(
 
CryptoStream
 +
	csDecrypt
, 5
=
6 7
new
8 ;
CryptoStream
< H
(
H I
	msDecrypt
I R
,
R S
	decryptor
T ]
,
] ^
CryptoStreamMode
_ o
.
o p
Read
p t
)
t u
)
u v
{
ÒÒ 
using
ÚÚ !
(
ÚÚ" #
StreamReader
ÚÚ# /
	srDecrypt
ÚÚ0 9
=
ÚÚ: ;
new
ÚÚ< ?
StreamReader
ÚÚ@ L
(
ÚÚL M
	csDecrypt
ÚÚM V
)
ÚÚV W
)
ÚÚW X
{
ÛÛ 
password
ˆˆ  (
=
ˆˆ) *
	srDecrypt
ˆˆ+ 4
.
ˆˆ4 5
	ReadToEnd
ˆˆ5 >
(
ˆˆ> ?
)
ˆˆ? @
;
ˆˆ@ A
}
˜˜ 
}
¯¯ 
}
˘˘ 
}
˙˙ 
}
˚˚ 
using
¸¸ 
(
¸¸ 
SqlConnection
¸¸  
dBConnection
¸¸! -
=
¸¸. /
new
¸¸0 3
SqlConnection
¸¸4 A
(
¸¸A B
$str¸¸B Ñ
+¸¸Ö Ü
password¸¸á è
)¸¸è ê
)¸¸ê ë
{
˝˝ 
try
˛˛ 
{
ˇˇ 
dBConnection
ÄÄ  
.
ÄÄ  !
Open
ÄÄ! %
(
ÄÄ% &
)
ÄÄ& '
;
ÄÄ' (
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
SqlException
ÇÇ #
	exceptSql
ÇÇ$ -
)
ÇÇ- .
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ 
.
ÑÑ 
Log
ÑÑ !
(
ÑÑ! "
NLog
ÑÑ" &
.
ÑÑ& '
LogLevel
ÑÑ' /
.
ÑÑ/ 0
Warn
ÑÑ0 4
,
ÑÑ4 5
$str
ÑÑ6 V
,
ÑÑV W
	exceptSql
ÑÑX a
)
ÑÑa b
;
ÑÑb c
}
ÖÖ 
}
ÜÜ 
}
áá 	
}
àà 
private
ãã 
void
ãã 
GoodB2G2
ãã 
(
ãã 
)
ãã 
{
åå 
string
çç 
password
çç 
;
çç 
if
éé 

(
éé 
$num
éé 
==
éé 
$num
éé 
)
éé 
{
èè 	
password
êê 
=
êê 
$str
êê 
;
êê 
try
íí 
{
ìì 
password
îî 
=
îî 
Encoding
îî #
.
îî# $
UTF8
îî$ (
.
îî( )
	GetString
îî) 2
(
îî2 3
File
îî3 7
.
îî7 8
ReadAllBytes
îî8 D
(
îîD E
$str
îîE o
)
îîo p
)
îîp q
;
îîq r
}
ïï 
catch
ññ 
(
ññ 
IOException
ññ 
exceptIO
ññ '
)
ññ' (
{
óó 
IO
òò 
.
òò 
Logger
òò 
.
òò 
Log
òò 
(
òò 
NLog
òò "
.
òò" #
LogLevel
òò# +
.
òò+ ,
Warn
òò, 0
,
òò0 1
$str
òò2 K
,
òòK L
exceptIO
òòM U
)
òòU V
;
òòV W
}
ôô 
}
õõ 	
else
úú 
{
ùù 	
password
†† 
=
†† 
null
†† 
;
†† 
}
°° 	
if
¢¢ 

(
¢¢ 
$num
¢¢ 
==
¢¢ 
$num
¢¢ 
)
¢¢ 
{
££ 	
{
•• 
using
¶¶ 
(
¶¶ &
AesCryptoServiceProvider
¶¶ /
aesAlg
¶¶0 6
=
¶¶7 8
new
¶¶9 <&
AesCryptoServiceProvider
¶¶= U
(
¶¶U V
)
¶¶V W
)
¶¶W X
{
ßß 
aesAlg
®® 
.
®® 
Key
®® 
=
®®  
Encoding
®®! )
.
®®) *
UTF8
®®* .
.
®®. /
GetBytes
®®/ 7
(
®®7 8
$str
®®8 J
)
®®J K
;
®®K L
aesAlg
©© 
.
©© 
IV
©© 
=
©© 
new
©©  #
byte
©©$ (
[
©©( )
$num
©©) +
]
©©+ ,
;
©©, -
ICryptoTransform
´´ $
	decryptor
´´% .
=
´´/ 0
aesAlg
´´1 7
.
´´7 8
CreateDecryptor
´´8 G
(
´´G H
aesAlg
´´H N
.
´´N O
Key
´´O R
,
´´R S
aesAlg
´´T Z
.
´´Z [
IV
´´[ ]
)
´´] ^
;
´´^ _
using
≠≠ 
(
≠≠ 
MemoryStream
≠≠ '
	msDecrypt
≠≠( 1
=
≠≠2 3
new
≠≠4 7
MemoryStream
≠≠8 D
(
≠≠D E
File
≠≠E I
.
≠≠I J
ReadAllBytes
≠≠J V
(
≠≠V W
$str≠≠W Å
)≠≠Å Ç
)≠≠Ç É
)≠≠É Ñ
{
ÆÆ 
using
ØØ 
(
ØØ 
CryptoStream
ØØ +
	csDecrypt
ØØ, 5
=
ØØ6 7
new
ØØ8 ;
CryptoStream
ØØ< H
(
ØØH I
	msDecrypt
ØØI R
,
ØØR S
	decryptor
ØØT ]
,
ØØ] ^
CryptoStreamMode
ØØ_ o
.
ØØo p
Read
ØØp t
)
ØØt u
)
ØØu v
{
∞∞ 
using
±± !
(
±±" #
StreamReader
±±# /
	srDecrypt
±±0 9
=
±±: ;
new
±±< ?
StreamReader
±±@ L
(
±±L M
	csDecrypt
±±M V
)
±±V W
)
±±W X
{
≤≤ 
password
µµ  (
=
µµ) *
	srDecrypt
µµ+ 4
.
µµ4 5
	ReadToEnd
µµ5 >
(
µµ> ?
)
µµ? @
;
µµ@ A
}
∂∂ 
}
∑∑ 
}
∏∏ 
}
ππ 
}
∫∫ 
using
ªª 
(
ªª 
SqlConnection
ªª  
dBConnection
ªª! -
=
ªª. /
new
ªª0 3
SqlConnection
ªª4 A
(
ªªA B
$strªªB Ñ
+ªªÖ Ü
passwordªªá è
)ªªè ê
)ªªê ë
{
ºº 
try
ΩΩ 
{
ææ 
dBConnection
øø  
.
øø  !
Open
øø! %
(
øø% &
)
øø& '
;
øø' (
}
¿¿ 
catch
¡¡ 
(
¡¡ 
SqlException
¡¡ #
	exceptSql
¡¡$ -
)
¡¡- .
{
¬¬ 
IO
√√ 
.
√√ 
Logger
√√ 
.
√√ 
Log
√√ !
(
√√! "
NLog
√√" &
.
√√& '
LogLevel
√√' /
.
√√/ 0
Warn
√√0 4
,
√√4 5
$str
√√6 V
,
√√V W
	exceptSql
√√X a
)
√√a b
;
√√b c
}
ƒƒ 
}
≈≈ 
}
∆∆ 	
}
«« 
public
…… 

override
…… 
void
…… 
Good
…… 
(
…… 
)
…… 
{
   
GoodG2B1
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodG2B2
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G1
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G2
ŒŒ 
(
ŒŒ 
)
ŒŒ 
;
ŒŒ 
}
œœ 
}—— 
}““ ∆¨
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_04.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_04 9
:: ;
AbstractTestCase< L
{ 
private## 
const## 
bool## 
PRIVATE_CONST_TRUE## )
=##* +
true##, 0
;##0 1
private$$ 
const$$ 
bool$$ 
PRIVATE_CONST_FALSE$$ *
=$$+ ,
false$$- 2
;$$2 3
public&& 

override&& 
void&& 
Bad&& 
(&& 
)&& 
{'' 
string(( 
password(( 
;(( 
if)) 

()) 
PRIVATE_CONST_TRUE)) 
))) 
{** 	
password++ 
=++ 
$str++ 
;++ 
try-- 
{.. 
password// 
=// 
Encoding// #
.//# $
UTF8//$ (
.//( )
	GetString//) 2
(//2 3
File//3 7
.//7 8
ReadAllBytes//8 D
(//D E
$str//E o
)//o p
)//p q
;//q r
}00 
catch11 
(11 
IOException11 
exceptIO11 '
)11' (
{22 
IO33 
.33 
Logger33 
.33 
Log33 
(33 
NLog33 "
.33" #
LogLevel33# +
.33+ ,
Warn33, 0
,330 1
$str332 K
,33K L
exceptIO33M U
)33U V
;33V W
}44 
}66 	
else77 
{88 	
password;; 
=;; 
null;; 
;;; 
}<< 	
if== 

(== 
PRIVATE_CONST_TRUE== 
)== 
{>> 	
using@@ 
(@@ 
SqlConnection@@  
dBConnection@@! -
=@@. /
new@@0 3
SqlConnection@@4 A
(@@A B
$str@@B x
+@@y z
$str@@{ 
+
@@Ä Å
$str
@@Ç é
+
@@è ê
password
@@ë ô
)
@@ô ö
)
@@ö õ
{AA 
tryBB 
{CC 
dBConnectionDD  
.DD  !
OpenDD! %
(DD% &
)DD& '
;DD' (
}EE 
catchFF 
(FF 
SqlExceptionFF #
	exceptSqlFF$ -
)FF- .
{GG 
IOHH 
.HH 
LoggerHH 
.HH 
LogHH !
(HH! "
NLogHH" &
.HH& '
LogLevelHH' /
.HH/ 0
WarnHH0 4
,HH4 5
$strHH6 V
,HHV W
	exceptSqlHHX a
)HHa b
;HHb c
}II 
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
passwordRR 
;RR 
ifSS 

(SS 
PRIVATE_CONST_FALSESS 
)SS  
{TT 	
passwordWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
password[[ 
=[[ 
$str[[ 
;[[ 
try]] 
{^^ 
password__ 
=__ 
Encoding__ #
.__# $
UTF8__$ (
.__( )
	GetString__) 2
(__2 3
File__3 7
.__7 8
ReadAllBytes__8 D
(__D E
$str__E o
)__o p
)__p q
;__q r
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
$strcc2 K
,ccK L
exceptIOccM U
)ccU V
;ccV W
}dd 
{ff 
usinggg 
(gg $
AesCryptoServiceProvidergg /
aesAlggg0 6
=gg7 8
newgg9 <$
AesCryptoServiceProvidergg= U
(ggU V
)ggV W
)ggW X
{hh 
aesAlgii 
.ii 
Keyii 
=ii  
Encodingii! )
.ii) *
UTF8ii* .
.ii. /
GetBytesii/ 7
(ii7 8
$strii8 J
)iiJ K
;iiK L
aesAlgjj 
.jj 
IVjj 
=jj 
newjj  #
bytejj$ (
[jj( )
$numjj) +
]jj+ ,
;jj, -
ICryptoTransformll $
	decryptorll% .
=ll/ 0
aesAlgll1 7
.ll7 8
CreateDecryptorll8 G
(llG H
aesAlgllH N
.llN O
KeyllO R
,llR S
aesAlgllT Z
.llZ [
IVll[ ]
)ll] ^
;ll^ _
usingnn 
(nn 
MemoryStreamnn '
	msDecryptnn( 1
=nn2 3
newnn4 7
MemoryStreamnn8 D
(nnD E
FilennE I
.nnI J
ReadAllBytesnnJ V
(nnV W
$str	nnW Å
)
nnÅ Ç
)
nnÇ É
)
nnÉ Ñ
{oo 
usingpp 
(pp 
CryptoStreampp +
	csDecryptpp, 5
=pp6 7
newpp8 ;
CryptoStreampp< H
(ppH I
	msDecryptppI R
,ppR S
	decryptorppT ]
,pp] ^
CryptoStreamModepp_ o
.ppo p
Readppp t
)ppt u
)ppu v
{qq 
usingrr !
(rr" #
StreamReaderrr# /
	srDecryptrr0 9
=rr: ;
newrr< ?
StreamReaderrr@ L
(rrL M
	csDecryptrrM V
)rrV W
)rrW X
{ss 
passwordvv  (
=vv) *
	srDecryptvv+ 4
.vv4 5
	ReadToEndvv5 >
(vv> ?
)vv? @
;vv@ A
}ww 
}xx 
}yy 
}zz 
}{{ 
}|| 	
if}} 

(}} 
PRIVATE_CONST_TRUE}} 
)}} 
{~~ 	
using
ÄÄ 
(
ÄÄ 
SqlConnection
ÄÄ  
dBConnection
ÄÄ! -
=
ÄÄ. /
new
ÄÄ0 3
SqlConnection
ÄÄ4 A
(
ÄÄA B
$str
ÄÄB x
+
ÄÄy z
$str
ÄÄ{ 
+ÄÄÄ Å
$strÄÄÇ é
+ÄÄè ê
passwordÄÄë ô
)ÄÄô ö
)ÄÄö õ
{
ÅÅ 
try
ÇÇ 
{
ÉÉ 
dBConnection
ÑÑ  
.
ÑÑ  !
Open
ÑÑ! %
(
ÑÑ% &
)
ÑÑ& '
;
ÑÑ' (
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
SqlException
ÜÜ #
	exceptSql
ÜÜ$ -
)
ÜÜ- .
{
áá 
IO
àà 
.
àà 
Logger
àà 
.
àà 
Log
àà !
(
àà! "
NLog
àà" &
.
àà& '
LogLevel
àà' /
.
àà/ 0
Warn
àà0 4
,
àà4 5
$str
àà6 V
,
ààV W
	exceptSql
ààX a
)
ààa b
;
ààb c
}
ââ 
}
ää 
}
ãã 	
}
åå 
private
èè 
void
èè 
GoodG2B2
èè 
(
èè 
)
èè 
{
êê 
string
ëë 
password
ëë 
;
ëë 
if
íí 

(
íí  
PRIVATE_CONST_TRUE
íí 
)
íí 
{
ìì 	
password
îî 
=
îî 
$str
îî 
;
îî 
try
ññ 
{
óó 
password
òò 
=
òò 
Encoding
òò #
.
òò# $
UTF8
òò$ (
.
òò( )
	GetString
òò) 2
(
òò2 3
File
òò3 7
.
òò7 8
ReadAllBytes
òò8 D
(
òòD E
$str
òòE o
)
òòo p
)
òòp q
;
òòq r
}
ôô 
catch
öö 
(
öö 
IOException
öö 
exceptIO
öö '
)
öö' (
{
õõ 
IO
úú 
.
úú 
Logger
úú 
.
úú 
Log
úú 
(
úú 
NLog
úú "
.
úú" #
LogLevel
úú# +
.
úú+ ,
Warn
úú, 0
,
úú0 1
$str
úú2 K
,
úúK L
exceptIO
úúM U
)
úúU V
;
úúV W
}
ùù 
{
üü 
using
†† 
(
†† &
AesCryptoServiceProvider
†† /
aesAlg
††0 6
=
††7 8
new
††9 <&
AesCryptoServiceProvider
††= U
(
††U V
)
††V W
)
††W X
{
°° 
aesAlg
¢¢ 
.
¢¢ 
Key
¢¢ 
=
¢¢  
Encoding
¢¢! )
.
¢¢) *
UTF8
¢¢* .
.
¢¢. /
GetBytes
¢¢/ 7
(
¢¢7 8
$str
¢¢8 J
)
¢¢J K
;
¢¢K L
aesAlg
££ 
.
££ 
IV
££ 
=
££ 
new
££  #
byte
££$ (
[
££( )
$num
££) +
]
££+ ,
;
££, -
ICryptoTransform
•• $
	decryptor
••% .
=
••/ 0
aesAlg
••1 7
.
••7 8
CreateDecryptor
••8 G
(
••G H
aesAlg
••H N
.
••N O
Key
••O R
,
••R S
aesAlg
••T Z
.
••Z [
IV
••[ ]
)
••] ^
;
••^ _
using
ßß 
(
ßß 
MemoryStream
ßß '
	msDecrypt
ßß( 1
=
ßß2 3
new
ßß4 7
MemoryStream
ßß8 D
(
ßßD E
File
ßßE I
.
ßßI J
ReadAllBytes
ßßJ V
(
ßßV W
$strßßW Å
)ßßÅ Ç
)ßßÇ É
)ßßÉ Ñ
{
®® 
using
©© 
(
©© 
CryptoStream
©© +
	csDecrypt
©©, 5
=
©©6 7
new
©©8 ;
CryptoStream
©©< H
(
©©H I
	msDecrypt
©©I R
,
©©R S
	decryptor
©©T ]
,
©©] ^
CryptoStreamMode
©©_ o
.
©©o p
Read
©©p t
)
©©t u
)
©©u v
{
™™ 
using
´´ !
(
´´" #
StreamReader
´´# /
	srDecrypt
´´0 9
=
´´: ;
new
´´< ?
StreamReader
´´@ L
(
´´L M
	csDecrypt
´´M V
)
´´V W
)
´´W X
{
¨¨ 
password
ØØ  (
=
ØØ) *
	srDecrypt
ØØ+ 4
.
ØØ4 5
	ReadToEnd
ØØ5 >
(
ØØ> ?
)
ØØ? @
;
ØØ@ A
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 
}
¥¥ 
}
µµ 	
else
∂∂ 
{
∑∑ 	
password
∫∫ 
=
∫∫ 
null
∫∫ 
;
∫∫ 
}
ªª 	
if
ºº 

(
ºº  
PRIVATE_CONST_TRUE
ºº 
)
ºº 
{
ΩΩ 	
using
øø 
(
øø 
SqlConnection
øø  
dBConnection
øø! -
=
øø. /
new
øø0 3
SqlConnection
øø4 A
(
øøA B
$str
øøB x
+
øøy z
$str
øø{ 
+øøÄ Å
$strøøÇ é
+øøè ê
passwordøøë ô
)øøô ö
)øøö õ
{
¿¿ 
try
¡¡ 
{
¬¬ 
dBConnection
√√  
.
√√  !
Open
√√! %
(
√√% &
)
√√& '
;
√√' (
}
ƒƒ 
catch
≈≈ 
(
≈≈ 
SqlException
≈≈ #
	exceptSql
≈≈$ -
)
≈≈- .
{
∆∆ 
IO
«« 
.
«« 
Logger
«« 
.
«« 
Log
«« !
(
««! "
NLog
««" &
.
««& '
LogLevel
««' /
.
««/ 0
Warn
««0 4
,
««4 5
$str
««6 V
,
««V W
	exceptSql
««X a
)
««a b
;
««b c
}
»» 
}
…… 
}
   	
}
ÀÀ 
private
ŒŒ 
void
ŒŒ 
GoodB2G1
ŒŒ 
(
ŒŒ 
)
ŒŒ 
{
œœ 
string
–– 
password
–– 
;
–– 
if
—— 

(
——  
PRIVATE_CONST_TRUE
—— 
)
—— 
{
““ 	
password
”” 
=
”” 
$str
”” 
;
”” 
try
’’ 
{
÷÷ 
password
◊◊ 
=
◊◊ 
Encoding
◊◊ #
.
◊◊# $
UTF8
◊◊$ (
.
◊◊( )
	GetString
◊◊) 2
(
◊◊2 3
File
◊◊3 7
.
◊◊7 8
ReadAllBytes
◊◊8 D
(
◊◊D E
$str
◊◊E o
)
◊◊o p
)
◊◊p q
;
◊◊q r
}
ÿÿ 
catch
ŸŸ 
(
ŸŸ 
IOException
ŸŸ 
exceptIO
ŸŸ '
)
ŸŸ' (
{
⁄⁄ 
IO
€€ 
.
€€ 
Logger
€€ 
.
€€ 
Log
€€ 
(
€€ 
NLog
€€ "
.
€€" #
LogLevel
€€# +
.
€€+ ,
Warn
€€, 0
,
€€0 1
$str
€€2 K
,
€€K L
exceptIO
€€M U
)
€€U V
;
€€V W
}
‹‹ 
}
ﬁﬁ 	
else
ﬂﬂ 
{
‡‡ 	
password
„„ 
=
„„ 
null
„„ 
;
„„ 
}
‰‰ 	
if
ÂÂ 

(
ÂÂ !
PRIVATE_CONST_FALSE
ÂÂ 
)
ÂÂ  
{
ÊÊ 	
IO
ËË 
.
ËË 
	WriteLine
ËË 
(
ËË 
$str
ËË /
)
ËË/ 0
;
ËË0 1
}
ÈÈ 	
else
ÍÍ 
{
ÎÎ 	
{
ÌÌ 
using
ÓÓ 
(
ÓÓ &
AesCryptoServiceProvider
ÓÓ /
aesAlg
ÓÓ0 6
=
ÓÓ7 8
new
ÓÓ9 <&
AesCryptoServiceProvider
ÓÓ= U
(
ÓÓU V
)
ÓÓV W
)
ÓÓW X
{
ÔÔ 
aesAlg
 
.
 
Key
 
=
  
Encoding
! )
.
) *
UTF8
* .
.
. /
GetBytes
/ 7
(
7 8
$str
8 J
)
J K
;
K L
aesAlg
ÒÒ 
.
ÒÒ 
IV
ÒÒ 
=
ÒÒ 
new
ÒÒ  #
byte
ÒÒ$ (
[
ÒÒ( )
$num
ÒÒ) +
]
ÒÒ+ ,
;
ÒÒ, -
ICryptoTransform
ÛÛ $
	decryptor
ÛÛ% .
=
ÛÛ/ 0
aesAlg
ÛÛ1 7
.
ÛÛ7 8
CreateDecryptor
ÛÛ8 G
(
ÛÛG H
aesAlg
ÛÛH N
.
ÛÛN O
Key
ÛÛO R
,
ÛÛR S
aesAlg
ÛÛT Z
.
ÛÛZ [
IV
ÛÛ[ ]
)
ÛÛ] ^
;
ÛÛ^ _
using
ıı 
(
ıı 
MemoryStream
ıı '
	msDecrypt
ıı( 1
=
ıı2 3
new
ıı4 7
MemoryStream
ıı8 D
(
ııD E
File
ııE I
.
ııI J
ReadAllBytes
ııJ V
(
ııV W
$strııW Å
)ııÅ Ç
)ııÇ É
)ııÉ Ñ
{
ˆˆ 
using
˜˜ 
(
˜˜ 
CryptoStream
˜˜ +
	csDecrypt
˜˜, 5
=
˜˜6 7
new
˜˜8 ;
CryptoStream
˜˜< H
(
˜˜H I
	msDecrypt
˜˜I R
,
˜˜R S
	decryptor
˜˜T ]
,
˜˜] ^
CryptoStreamMode
˜˜_ o
.
˜˜o p
Read
˜˜p t
)
˜˜t u
)
˜˜u v
{
¯¯ 
using
˘˘ !
(
˘˘" #
StreamReader
˘˘# /
	srDecrypt
˘˘0 9
=
˘˘: ;
new
˘˘< ?
StreamReader
˘˘@ L
(
˘˘L M
	csDecrypt
˘˘M V
)
˘˘V W
)
˘˘W X
{
˙˙ 
password
˝˝  (
=
˝˝) *
	srDecrypt
˝˝+ 4
.
˝˝4 5
	ReadToEnd
˝˝5 >
(
˝˝> ?
)
˝˝? @
;
˝˝@ A
}
˛˛ 
}
ˇˇ 
}
ÄÄ 
}
ÅÅ 
}
ÇÇ 
using
ÉÉ 
(
ÉÉ 
SqlConnection
ÉÉ  
dBConnection
ÉÉ! -
=
ÉÉ. /
new
ÉÉ0 3
SqlConnection
ÉÉ4 A
(
ÉÉA B
$strÉÉB Ñ
+ÉÉÖ Ü
passwordÉÉá è
)ÉÉè ê
)ÉÉê ë
{
ÑÑ 
try
ÖÖ 
{
ÜÜ 
dBConnection
áá  
.
áá  !
Open
áá! %
(
áá% &
)
áá& '
;
áá' (
}
àà 
catch
ââ 
(
ââ 
SqlException
ââ #
	exceptSql
ââ$ -
)
ââ- .
{
ää 
IO
ãã 
.
ãã 
Logger
ãã 
.
ãã 
Log
ãã !
(
ãã! "
NLog
ãã" &
.
ãã& '
LogLevel
ãã' /
.
ãã/ 0
Warn
ãã0 4
,
ãã4 5
$str
ãã6 V
,
ããV W
	exceptSql
ããX a
)
ããa b
;
ããb c
}
åå 
}
çç 
}
éé 	
}
èè 
private
íí 
void
íí 
GoodB2G2
íí 
(
íí 
)
íí 
{
ìì 
string
îî 
password
îî 
;
îî 
if
ïï 

(
ïï  
PRIVATE_CONST_TRUE
ïï 
)
ïï 
{
ññ 	
password
óó 
=
óó 
$str
óó 
;
óó 
try
ôô 
{
öö 
password
õõ 
=
õõ 
Encoding
õõ #
.
õõ# $
UTF8
õõ$ (
.
õõ( )
	GetString
õõ) 2
(
õõ2 3
File
õõ3 7
.
õõ7 8
ReadAllBytes
õõ8 D
(
õõD E
$str
õõE o
)
õõo p
)
õõp q
;
õõq r
}
úú 
catch
ùù 
(
ùù 
IOException
ùù 
exceptIO
ùù '
)
ùù' (
{
ûû 
IO
üü 
.
üü 
Logger
üü 
.
üü 
Log
üü 
(
üü 
NLog
üü "
.
üü" #
LogLevel
üü# +
.
üü+ ,
Warn
üü, 0
,
üü0 1
$str
üü2 K
,
üüK L
exceptIO
üüM U
)
üüU V
;
üüV W
}
†† 
}
¢¢ 	
else
££ 
{
§§ 	
password
ßß 
=
ßß 
null
ßß 
;
ßß 
}
®® 	
if
©© 

(
©©  
PRIVATE_CONST_TRUE
©© 
)
©© 
{
™™ 	
{
¨¨ 
using
≠≠ 
(
≠≠ &
AesCryptoServiceProvider
≠≠ /
aesAlg
≠≠0 6
=
≠≠7 8
new
≠≠9 <&
AesCryptoServiceProvider
≠≠= U
(
≠≠U V
)
≠≠V W
)
≠≠W X
{
ÆÆ 
aesAlg
ØØ 
.
ØØ 
Key
ØØ 
=
ØØ  
Encoding
ØØ! )
.
ØØ) *
UTF8
ØØ* .
.
ØØ. /
GetBytes
ØØ/ 7
(
ØØ7 8
$str
ØØ8 J
)
ØØJ K
;
ØØK L
aesAlg
∞∞ 
.
∞∞ 
IV
∞∞ 
=
∞∞ 
new
∞∞  #
byte
∞∞$ (
[
∞∞( )
$num
∞∞) +
]
∞∞+ ,
;
∞∞, -
ICryptoTransform
≤≤ $
	decryptor
≤≤% .
=
≤≤/ 0
aesAlg
≤≤1 7
.
≤≤7 8
CreateDecryptor
≤≤8 G
(
≤≤G H
aesAlg
≤≤H N
.
≤≤N O
Key
≤≤O R
,
≤≤R S
aesAlg
≤≤T Z
.
≤≤Z [
IV
≤≤[ ]
)
≤≤] ^
;
≤≤^ _
using
¥¥ 
(
¥¥ 
MemoryStream
¥¥ '
	msDecrypt
¥¥( 1
=
¥¥2 3
new
¥¥4 7
MemoryStream
¥¥8 D
(
¥¥D E
File
¥¥E I
.
¥¥I J
ReadAllBytes
¥¥J V
(
¥¥V W
$str¥¥W Å
)¥¥Å Ç
)¥¥Ç É
)¥¥É Ñ
{
µµ 
using
∂∂ 
(
∂∂ 
CryptoStream
∂∂ +
	csDecrypt
∂∂, 5
=
∂∂6 7
new
∂∂8 ;
CryptoStream
∂∂< H
(
∂∂H I
	msDecrypt
∂∂I R
,
∂∂R S
	decryptor
∂∂T ]
,
∂∂] ^
CryptoStreamMode
∂∂_ o
.
∂∂o p
Read
∂∂p t
)
∂∂t u
)
∂∂u v
{
∑∑ 
using
∏∏ !
(
∏∏" #
StreamReader
∏∏# /
	srDecrypt
∏∏0 9
=
∏∏: ;
new
∏∏< ?
StreamReader
∏∏@ L
(
∏∏L M
	csDecrypt
∏∏M V
)
∏∏V W
)
∏∏W X
{
ππ 
password
ºº  (
=
ºº) *
	srDecrypt
ºº+ 4
.
ºº4 5
	ReadToEnd
ºº5 >
(
ºº> ?
)
ºº? @
;
ºº@ A
}
ΩΩ 
}
ææ 
}
øø 
}
¿¿ 
}
¡¡ 
using
¬¬ 
(
¬¬ 
SqlConnection
¬¬  
dBConnection
¬¬! -
=
¬¬. /
new
¬¬0 3
SqlConnection
¬¬4 A
(
¬¬A B
$str¬¬B Ñ
+¬¬Ö Ü
password¬¬á è
)¬¬è ê
)¬¬ê ë
{
√√ 
try
ƒƒ 
{
≈≈ 
dBConnection
∆∆  
.
∆∆  !
Open
∆∆! %
(
∆∆% &
)
∆∆& '
;
∆∆' (
}
«« 
catch
»» 
(
»» 
SqlException
»» #
	exceptSql
»»$ -
)
»»- .
{
…… 
IO
   
.
   
Logger
   
.
   
Log
   !
(
  ! "
NLog
  " &
.
  & '
LogLevel
  ' /
.
  / 0
Warn
  0 4
,
  4 5
$str
  6 V
,
  V W
	exceptSql
  X a
)
  a b
;
  b c
}
ÀÀ 
}
ÃÃ 
}
ÕÕ 	
}
ŒŒ 
public
–– 

override
–– 
void
–– 
Good
–– 
(
–– 
)
–– 
{
—— 
GoodG2B1
““ 
(
““ 
)
““ 
;
““ 
GoodG2B2
”” 
(
”” 
)
”” 
;
”” 
GoodB2G1
‘‘ 
(
‘‘ 
)
‘‘ 
;
‘‘ 
GoodB2G2
’’ 
(
’’ 
)
’’ 
;
’’ 
}
÷÷ 
}ÿÿ 
}ŸŸ ™´
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_05.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_05 9
:: ;
AbstractTestCase< L
{ 
private"" 
bool"" 
privateTrue"" 
="" 
true"" #
;""# $
private## 
bool## 
privateFalse## 
=## 
false##  %
;##% &
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
string'' 
password'' 
;'' 
if(( 

((( 
privateTrue(( 
)(( 
{)) 	
password** 
=** 
$str** 
;** 
try,, 
{-- 
password.. 
=.. 
Encoding.. #
...# $
UTF8..$ (
...( )
	GetString..) 2
(..2 3
File..3 7
...7 8
ReadAllBytes..8 D
(..D E
$str..E o
)..o p
)..p q
;..q r
}// 
catch00 
(00 
IOException00 
exceptIO00 '
)00' (
{11 
IO22 
.22 
Logger22 
.22 
Log22 
(22 
NLog22 "
.22" #
LogLevel22# +
.22+ ,
Warn22, 0
,220 1
$str222 K
,22K L
exceptIO22M U
)22U V
;22V W
}33 
}55 	
else66 
{77 	
password:: 
=:: 
null:: 
;:: 
};; 	
if<< 

(<< 
privateTrue<< 
)<< 
{== 	
using?? 
(?? 
SqlConnection??  
dBConnection??! -
=??. /
new??0 3
SqlConnection??4 A
(??A B
$str??B x
+??y z
$str??{ 
+
??Ä Å
$str
??Ç é
+
??è ê
password
??ë ô
)
??ô ö
)
??ö õ
{@@ 
tryAA 
{BB 
dBConnectionCC  
.CC  !
OpenCC! %
(CC% &
)CC& '
;CC' (
}DD 
catchEE 
(EE 
SqlExceptionEE #
	exceptSqlEE$ -
)EE- .
{FF 
IOGG 
.GG 
LoggerGG 
.GG 
LogGG !
(GG! "
NLogGG" &
.GG& '
LogLevelGG' /
.GG/ 0
WarnGG0 4
,GG4 5
$strGG6 V
,GGV W
	exceptSqlGGX a
)GGa b
;GGb c
}HH 
}II 
}JJ 	
}KK 
privateOO 
voidOO 
GoodG2B1OO 
(OO 
)OO 
{PP 
stringQQ 
passwordQQ 
;QQ 
ifRR 

(RR 
privateFalseRR 
)RR 
{SS 	
passwordVV 
=VV 
nullVV 
;VV 
}WW 	
elseXX 
{YY 	
passwordZZ 
=ZZ 
$strZZ 
;ZZ 
try\\ 
{]] 
password^^ 
=^^ 
Encoding^^ #
.^^# $
UTF8^^$ (
.^^( )
	GetString^^) 2
(^^2 3
File^^3 7
.^^7 8
ReadAllBytes^^8 D
(^^D E
$str^^E o
)^^o p
)^^p q
;^^q r
}__ 
catch`` 
(`` 
IOException`` 
exceptIO`` '
)``' (
{aa 
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb "
.bb" #
LogLevelbb# +
.bb+ ,
Warnbb, 0
,bb0 1
$strbb2 K
,bbK L
exceptIObbM U
)bbU V
;bbV W
}cc 
{ee 
usingff 
(ff $
AesCryptoServiceProviderff /
aesAlgff0 6
=ff7 8
newff9 <$
AesCryptoServiceProviderff= U
(ffU V
)ffV W
)ffW X
{gg 
aesAlghh 
.hh 
Keyhh 
=hh  
Encodinghh! )
.hh) *
UTF8hh* .
.hh. /
GetByteshh/ 7
(hh7 8
$strhh8 J
)hhJ K
;hhK L
aesAlgii 
.ii 
IVii 
=ii 
newii  #
byteii$ (
[ii( )
$numii) +
]ii+ ,
;ii, -
ICryptoTransformkk $
	decryptorkk% .
=kk/ 0
aesAlgkk1 7
.kk7 8
CreateDecryptorkk8 G
(kkG H
aesAlgkkH N
.kkN O
KeykkO R
,kkR S
aesAlgkkT Z
.kkZ [
IVkk[ ]
)kk] ^
;kk^ _
usingmm 
(mm 
MemoryStreammm '
	msDecryptmm( 1
=mm2 3
newmm4 7
MemoryStreammm8 D
(mmD E
FilemmE I
.mmI J
ReadAllBytesmmJ V
(mmV W
$str	mmW Å
)
mmÅ Ç
)
mmÇ É
)
mmÉ Ñ
{nn 
usingoo 
(oo 
CryptoStreamoo +
	csDecryptoo, 5
=oo6 7
newoo8 ;
CryptoStreamoo< H
(ooH I
	msDecryptooI R
,ooR S
	decryptorooT ]
,oo] ^
CryptoStreamModeoo_ o
.ooo p
Readoop t
)oot u
)oou v
{pp 
usingqq !
(qq" #
StreamReaderqq# /
	srDecryptqq0 9
=qq: ;
newqq< ?
StreamReaderqq@ L
(qqL M
	csDecryptqqM V
)qqV W
)qqW X
{rr 
passworduu  (
=uu) *
	srDecryptuu+ 4
.uu4 5
	ReadToEnduu5 >
(uu> ?
)uu? @
;uu@ A
}vv 
}ww 
}xx 
}yy 
}zz 
}{{ 	
if|| 

(|| 
privateTrue|| 
)|| 
{}} 	
using 
( 
SqlConnection  
dBConnection! -
=. /
new0 3
SqlConnection4 A
(A B
$strB x
+y z
$str{ 
+
Ä Å
$str
Ç é
+
è ê
password
ë ô
)
ô ö
)
ö õ
{
ÄÄ 
try
ÅÅ 
{
ÇÇ 
dBConnection
ÉÉ  
.
ÉÉ  !
Open
ÉÉ! %
(
ÉÉ% &
)
ÉÉ& '
;
ÉÉ' (
}
ÑÑ 
catch
ÖÖ 
(
ÖÖ 
SqlException
ÖÖ #
	exceptSql
ÖÖ$ -
)
ÖÖ- .
{
ÜÜ 
IO
áá 
.
áá 
Logger
áá 
.
áá 
Log
áá !
(
áá! "
NLog
áá" &
.
áá& '
LogLevel
áá' /
.
áá/ 0
Warn
áá0 4
,
áá4 5
$str
áá6 V
,
ááV W
	exceptSql
ááX a
)
ááa b
;
ááb c
}
àà 
}
ââ 
}
ää 	
}
ãã 
private
éé 
void
éé 
GoodG2B2
éé 
(
éé 
)
éé 
{
èè 
string
êê 
password
êê 
;
êê 
if
ëë 

(
ëë 
privateTrue
ëë 
)
ëë 
{
íí 	
password
ìì 
=
ìì 
$str
ìì 
;
ìì 
try
ïï 
{
ññ 
password
óó 
=
óó 
Encoding
óó #
.
óó# $
UTF8
óó$ (
.
óó( )
	GetString
óó) 2
(
óó2 3
File
óó3 7
.
óó7 8
ReadAllBytes
óó8 D
(
óóD E
$str
óóE o
)
óóo p
)
óóp q
;
óóq r
}
òò 
catch
ôô 
(
ôô 
IOException
ôô 
exceptIO
ôô '
)
ôô' (
{
öö 
IO
õõ 
.
õõ 
Logger
õõ 
.
õõ 
Log
õõ 
(
õõ 
NLog
õõ "
.
õõ" #
LogLevel
õõ# +
.
õõ+ ,
Warn
õõ, 0
,
õõ0 1
$str
õõ2 K
,
õõK L
exceptIO
õõM U
)
õõU V
;
õõV W
}
úú 
{
ûû 
using
üü 
(
üü &
AesCryptoServiceProvider
üü /
aesAlg
üü0 6
=
üü7 8
new
üü9 <&
AesCryptoServiceProvider
üü= U
(
üüU V
)
üüV W
)
üüW X
{
†† 
aesAlg
°° 
.
°° 
Key
°° 
=
°°  
Encoding
°°! )
.
°°) *
UTF8
°°* .
.
°°. /
GetBytes
°°/ 7
(
°°7 8
$str
°°8 J
)
°°J K
;
°°K L
aesAlg
¢¢ 
.
¢¢ 
IV
¢¢ 
=
¢¢ 
new
¢¢  #
byte
¢¢$ (
[
¢¢( )
$num
¢¢) +
]
¢¢+ ,
;
¢¢, -
ICryptoTransform
§§ $
	decryptor
§§% .
=
§§/ 0
aesAlg
§§1 7
.
§§7 8
CreateDecryptor
§§8 G
(
§§G H
aesAlg
§§H N
.
§§N O
Key
§§O R
,
§§R S
aesAlg
§§T Z
.
§§Z [
IV
§§[ ]
)
§§] ^
;
§§^ _
using
¶¶ 
(
¶¶ 
MemoryStream
¶¶ '
	msDecrypt
¶¶( 1
=
¶¶2 3
new
¶¶4 7
MemoryStream
¶¶8 D
(
¶¶D E
File
¶¶E I
.
¶¶I J
ReadAllBytes
¶¶J V
(
¶¶V W
$str¶¶W Å
)¶¶Å Ç
)¶¶Ç É
)¶¶É Ñ
{
ßß 
using
®® 
(
®® 
CryptoStream
®® +
	csDecrypt
®®, 5
=
®®6 7
new
®®8 ;
CryptoStream
®®< H
(
®®H I
	msDecrypt
®®I R
,
®®R S
	decryptor
®®T ]
,
®®] ^
CryptoStreamMode
®®_ o
.
®®o p
Read
®®p t
)
®®t u
)
®®u v
{
©© 
using
™™ !
(
™™" #
StreamReader
™™# /
	srDecrypt
™™0 9
=
™™: ;
new
™™< ?
StreamReader
™™@ L
(
™™L M
	csDecrypt
™™M V
)
™™V W
)
™™W X
{
´´ 
password
ÆÆ  (
=
ÆÆ) *
	srDecrypt
ÆÆ+ 4
.
ÆÆ4 5
	ReadToEnd
ÆÆ5 >
(
ÆÆ> ?
)
ÆÆ? @
;
ÆÆ@ A
}
ØØ 
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 
}
¥¥ 	
else
µµ 
{
∂∂ 	
password
ππ 
=
ππ 
null
ππ 
;
ππ 
}
∫∫ 	
if
ªª 

(
ªª 
privateTrue
ªª 
)
ªª 
{
ºº 	
using
ææ 
(
ææ 
SqlConnection
ææ  
dBConnection
ææ! -
=
ææ. /
new
ææ0 3
SqlConnection
ææ4 A
(
ææA B
$str
ææB x
+
ææy z
$str
ææ{ 
+ææÄ Å
$strææÇ é
+ææè ê
passwordææë ô
)ææô ö
)ææö õ
{
øø 
try
¿¿ 
{
¡¡ 
dBConnection
¬¬  
.
¬¬  !
Open
¬¬! %
(
¬¬% &
)
¬¬& '
;
¬¬' (
}
√√ 
catch
ƒƒ 
(
ƒƒ 
SqlException
ƒƒ #
	exceptSql
ƒƒ$ -
)
ƒƒ- .
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ 
.
∆∆ 
Log
∆∆ !
(
∆∆! "
NLog
∆∆" &
.
∆∆& '
LogLevel
∆∆' /
.
∆∆/ 0
Warn
∆∆0 4
,
∆∆4 5
$str
∆∆6 V
,
∆∆V W
	exceptSql
∆∆X a
)
∆∆a b
;
∆∆b c
}
«« 
}
»» 
}
…… 	
}
   
private
ÕÕ 
void
ÕÕ 
GoodB2G1
ÕÕ 
(
ÕÕ 
)
ÕÕ 
{
ŒŒ 
string
œœ 
password
œœ 
;
œœ 
if
–– 

(
–– 
privateTrue
–– 
)
–– 
{
—— 	
password
““ 
=
““ 
$str
““ 
;
““ 
try
‘‘ 
{
’’ 
password
÷÷ 
=
÷÷ 
Encoding
÷÷ #
.
÷÷# $
UTF8
÷÷$ (
.
÷÷( )
	GetString
÷÷) 2
(
÷÷2 3
File
÷÷3 7
.
÷÷7 8
ReadAllBytes
÷÷8 D
(
÷÷D E
$str
÷÷E o
)
÷÷o p
)
÷÷p q
;
÷÷q r
}
◊◊ 
catch
ÿÿ 
(
ÿÿ 
IOException
ÿÿ 
exceptIO
ÿÿ '
)
ÿÿ' (
{
ŸŸ 
IO
⁄⁄ 
.
⁄⁄ 
Logger
⁄⁄ 
.
⁄⁄ 
Log
⁄⁄ 
(
⁄⁄ 
NLog
⁄⁄ "
.
⁄⁄" #
LogLevel
⁄⁄# +
.
⁄⁄+ ,
Warn
⁄⁄, 0
,
⁄⁄0 1
$str
⁄⁄2 K
,
⁄⁄K L
exceptIO
⁄⁄M U
)
⁄⁄U V
;
⁄⁄V W
}
€€ 
}
›› 	
else
ﬁﬁ 
{
ﬂﬂ 	
password
‚‚ 
=
‚‚ 
null
‚‚ 
;
‚‚ 
}
„„ 	
if
‰‰ 

(
‰‰ 
privateFalse
‰‰ 
)
‰‰ 
{
ÂÂ 	
IO
ÁÁ 
.
ÁÁ 
	WriteLine
ÁÁ 
(
ÁÁ 
$str
ÁÁ /
)
ÁÁ/ 0
;
ÁÁ0 1
}
ËË 	
else
ÈÈ 
{
ÍÍ 	
{
ÏÏ 
using
ÌÌ 
(
ÌÌ &
AesCryptoServiceProvider
ÌÌ /
aesAlg
ÌÌ0 6
=
ÌÌ7 8
new
ÌÌ9 <&
AesCryptoServiceProvider
ÌÌ= U
(
ÌÌU V
)
ÌÌV W
)
ÌÌW X
{
ÓÓ 
aesAlg
ÔÔ 
.
ÔÔ 
Key
ÔÔ 
=
ÔÔ  
Encoding
ÔÔ! )
.
ÔÔ) *
UTF8
ÔÔ* .
.
ÔÔ. /
GetBytes
ÔÔ/ 7
(
ÔÔ7 8
$str
ÔÔ8 J
)
ÔÔJ K
;
ÔÔK L
aesAlg
 
.
 
IV
 
=
 
new
  #
byte
$ (
[
( )
$num
) +
]
+ ,
;
, -
ICryptoTransform
ÚÚ $
	decryptor
ÚÚ% .
=
ÚÚ/ 0
aesAlg
ÚÚ1 7
.
ÚÚ7 8
CreateDecryptor
ÚÚ8 G
(
ÚÚG H
aesAlg
ÚÚH N
.
ÚÚN O
Key
ÚÚO R
,
ÚÚR S
aesAlg
ÚÚT Z
.
ÚÚZ [
IV
ÚÚ[ ]
)
ÚÚ] ^
;
ÚÚ^ _
using
ÙÙ 
(
ÙÙ 
MemoryStream
ÙÙ '
	msDecrypt
ÙÙ( 1
=
ÙÙ2 3
new
ÙÙ4 7
MemoryStream
ÙÙ8 D
(
ÙÙD E
File
ÙÙE I
.
ÙÙI J
ReadAllBytes
ÙÙJ V
(
ÙÙV W
$strÙÙW Å
)ÙÙÅ Ç
)ÙÙÇ É
)ÙÙÉ Ñ
{
ıı 
using
ˆˆ 
(
ˆˆ 
CryptoStream
ˆˆ +
	csDecrypt
ˆˆ, 5
=
ˆˆ6 7
new
ˆˆ8 ;
CryptoStream
ˆˆ< H
(
ˆˆH I
	msDecrypt
ˆˆI R
,
ˆˆR S
	decryptor
ˆˆT ]
,
ˆˆ] ^
CryptoStreamMode
ˆˆ_ o
.
ˆˆo p
Read
ˆˆp t
)
ˆˆt u
)
ˆˆu v
{
˜˜ 
using
¯¯ !
(
¯¯" #
StreamReader
¯¯# /
	srDecrypt
¯¯0 9
=
¯¯: ;
new
¯¯< ?
StreamReader
¯¯@ L
(
¯¯L M
	csDecrypt
¯¯M V
)
¯¯V W
)
¯¯W X
{
˘˘ 
password
¸¸  (
=
¸¸) *
	srDecrypt
¸¸+ 4
.
¸¸4 5
	ReadToEnd
¸¸5 >
(
¸¸> ?
)
¸¸? @
;
¸¸@ A
}
˝˝ 
}
˛˛ 
}
ˇˇ 
}
ÄÄ 
}
ÅÅ 
using
ÇÇ 
(
ÇÇ 
SqlConnection
ÇÇ  
dBConnection
ÇÇ! -
=
ÇÇ. /
new
ÇÇ0 3
SqlConnection
ÇÇ4 A
(
ÇÇA B
$strÇÇB Ñ
+ÇÇÖ Ü
passwordÇÇá è
)ÇÇè ê
)ÇÇê ë
{
ÉÉ 
try
ÑÑ 
{
ÖÖ 
dBConnection
ÜÜ  
.
ÜÜ  !
Open
ÜÜ! %
(
ÜÜ% &
)
ÜÜ& '
;
ÜÜ' (
}
áá 
catch
àà 
(
àà 
SqlException
àà #
	exceptSql
àà$ -
)
àà- .
{
ââ 
IO
ää 
.
ää 
Logger
ää 
.
ää 
Log
ää !
(
ää! "
NLog
ää" &
.
ää& '
LogLevel
ää' /
.
ää/ 0
Warn
ää0 4
,
ää4 5
$str
ää6 V
,
ääV W
	exceptSql
ääX a
)
ääa b
;
ääb c
}
ãã 
}
åå 
}
çç 	
}
éé 
private
ëë 
void
ëë 
GoodB2G2
ëë 
(
ëë 
)
ëë 
{
íí 
string
ìì 
password
ìì 
;
ìì 
if
îî 

(
îî 
privateTrue
îî 
)
îî 
{
ïï 	
password
ññ 
=
ññ 
$str
ññ 
;
ññ 
try
òò 
{
ôô 
password
öö 
=
öö 
Encoding
öö #
.
öö# $
UTF8
öö$ (
.
öö( )
	GetString
öö) 2
(
öö2 3
File
öö3 7
.
öö7 8
ReadAllBytes
öö8 D
(
ööD E
$str
ööE o
)
ööo p
)
ööp q
;
ööq r
}
õõ 
catch
úú 
(
úú 
IOException
úú 
exceptIO
úú '
)
úú' (
{
ùù 
IO
ûû 
.
ûû 
Logger
ûû 
.
ûû 
Log
ûû 
(
ûû 
NLog
ûû "
.
ûû" #
LogLevel
ûû# +
.
ûû+ ,
Warn
ûû, 0
,
ûû0 1
$str
ûû2 K
,
ûûK L
exceptIO
ûûM U
)
ûûU V
;
ûûV W
}
üü 
}
°° 	
else
¢¢ 
{
££ 	
password
¶¶ 
=
¶¶ 
null
¶¶ 
;
¶¶ 
}
ßß 	
if
®® 

(
®® 
privateTrue
®® 
)
®® 
{
©© 	
{
´´ 
using
¨¨ 
(
¨¨ &
AesCryptoServiceProvider
¨¨ /
aesAlg
¨¨0 6
=
¨¨7 8
new
¨¨9 <&
AesCryptoServiceProvider
¨¨= U
(
¨¨U V
)
¨¨V W
)
¨¨W X
{
≠≠ 
aesAlg
ÆÆ 
.
ÆÆ 
Key
ÆÆ 
=
ÆÆ  
Encoding
ÆÆ! )
.
ÆÆ) *
UTF8
ÆÆ* .
.
ÆÆ. /
GetBytes
ÆÆ/ 7
(
ÆÆ7 8
$str
ÆÆ8 J
)
ÆÆJ K
;
ÆÆK L
aesAlg
ØØ 
.
ØØ 
IV
ØØ 
=
ØØ 
new
ØØ  #
byte
ØØ$ (
[
ØØ( )
$num
ØØ) +
]
ØØ+ ,
;
ØØ, -
ICryptoTransform
±± $
	decryptor
±±% .
=
±±/ 0
aesAlg
±±1 7
.
±±7 8
CreateDecryptor
±±8 G
(
±±G H
aesAlg
±±H N
.
±±N O
Key
±±O R
,
±±R S
aesAlg
±±T Z
.
±±Z [
IV
±±[ ]
)
±±] ^
;
±±^ _
using
≥≥ 
(
≥≥ 
MemoryStream
≥≥ '
	msDecrypt
≥≥( 1
=
≥≥2 3
new
≥≥4 7
MemoryStream
≥≥8 D
(
≥≥D E
File
≥≥E I
.
≥≥I J
ReadAllBytes
≥≥J V
(
≥≥V W
$str≥≥W Å
)≥≥Å Ç
)≥≥Ç É
)≥≥É Ñ
{
¥¥ 
using
µµ 
(
µµ 
CryptoStream
µµ +
	csDecrypt
µµ, 5
=
µµ6 7
new
µµ8 ;
CryptoStream
µµ< H
(
µµH I
	msDecrypt
µµI R
,
µµR S
	decryptor
µµT ]
,
µµ] ^
CryptoStreamMode
µµ_ o
.
µµo p
Read
µµp t
)
µµt u
)
µµu v
{
∂∂ 
using
∑∑ !
(
∑∑" #
StreamReader
∑∑# /
	srDecrypt
∑∑0 9
=
∑∑: ;
new
∑∑< ?
StreamReader
∑∑@ L
(
∑∑L M
	csDecrypt
∑∑M V
)
∑∑V W
)
∑∑W X
{
∏∏ 
password
ªª  (
=
ªª) *
	srDecrypt
ªª+ 4
.
ªª4 5
	ReadToEnd
ªª5 >
(
ªª> ?
)
ªª? @
;
ªª@ A
}
ºº 
}
ΩΩ 
}
ææ 
}
øø 
}
¿¿ 
using
¡¡ 
(
¡¡ 
SqlConnection
¡¡  
dBConnection
¡¡! -
=
¡¡. /
new
¡¡0 3
SqlConnection
¡¡4 A
(
¡¡A B
$str¡¡B Ñ
+¡¡Ö Ü
password¡¡á è
)¡¡è ê
)¡¡ê ë
{
¬¬ 
try
√√ 
{
ƒƒ 
dBConnection
≈≈  
.
≈≈  !
Open
≈≈! %
(
≈≈% &
)
≈≈& '
;
≈≈' (
}
∆∆ 
catch
«« 
(
«« 
SqlException
«« #
	exceptSql
««$ -
)
««- .
{
»» 
IO
…… 
.
…… 
Logger
…… 
.
…… 
Log
…… !
(
……! "
NLog
……" &
.
……& '
LogLevel
……' /
.
……/ 0
Warn
……0 4
,
……4 5
$str
……6 V
,
……V W
	exceptSql
……X a
)
……a b
;
……b c
}
   
}
ÀÀ 
}
ÃÃ 	
}
ÕÕ 
public
œœ 

override
œœ 
void
œœ 
Good
œœ 
(
œœ 
)
œœ 
{
–– 
GoodG2B1
—— 
(
—— 
)
—— 
;
—— 
GoodG2B2
““ 
(
““ 
)
““ 
;
““ 
GoodB2G1
”” 
(
”” 
)
”” 
;
”” 
GoodB2G2
‘‘ 
(
‘‘ 
)
‘‘ 
;
‘‘ 
}
’’ 
}◊◊ 
}ÿÿ ˇ≠
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_06.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_06 9
:: ;
AbstractTestCase< L
{ 
private"" 
const"" 
int"" 
PRIVATE_CONST_FIVE"" (
="") *
$num""+ ,
;"", -
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
string&& 
password&& 
;&& 
if'' 

('' 
PRIVATE_CONST_FIVE'' 
==''  
$num''  !
)''! "
{(( 	
password)) 
=)) 
$str)) 
;)) 
try++ 
{,, 
password-- 
=-- 
Encoding-- #
.--# $
UTF8--$ (
.--( )
	GetString--) 2
(--2 3
File--3 7
.--7 8
ReadAllBytes--8 D
(--D E
$str--E o
)--o p
)--p q
;--q r
}.. 
catch// 
(// 
IOException// 
exceptIO// '
)//' (
{00 
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 "
.11" #
LogLevel11# +
.11+ ,
Warn11, 0
,110 1
$str112 K
,11K L
exceptIO11M U
)11U V
;11V W
}22 
}44 	
else55 
{66 	
password99 
=99 
null99 
;99 
}:: 	
if;; 

(;; 
PRIVATE_CONST_FIVE;; 
==;;  
$num;;  !
);;! "
{<< 	
using>> 
(>> 
SqlConnection>>  
dBConnection>>! -
=>>. /
new>>0 3
SqlConnection>>4 A
(>>A B
$str>>B x
+>>y z
$str>>{ 
+
>>Ä Å
$str
>>Ç é
+
>>è ê
password
>>ë ô
)
>>ô ö
)
>>ö õ
{?? 
try@@ 
{AA 
dBConnectionBB  
.BB  !
OpenBB! %
(BB% &
)BB& '
;BB' (
}CC 
catchDD 
(DD 
SqlExceptionDD #
	exceptSqlDD$ -
)DD- .
{EE 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF !
(FF! "
NLogFF" &
.FF& '
LogLevelFF' /
.FF/ 0
WarnFF0 4
,FF4 5
$strFF6 V
,FFV W
	exceptSqlFFX a
)FFa b
;FFb c
}GG 
}HH 
}II 	
}JJ 
privateNN 
voidNN 
GoodG2B1NN 
(NN 
)NN 
{OO 
stringPP 
passwordPP 
;PP 
ifQQ 

(QQ 
PRIVATE_CONST_FIVEQQ 
!=QQ  
$numQQ  !
)QQ! "
{RR 	
passwordUU 
=UU 
nullUU 
;UU 
}VV 	
elseWW 
{XX 	
passwordYY 
=YY 
$strYY 
;YY 
try[[ 
{\\ 
password]] 
=]] 
Encoding]] #
.]]# $
UTF8]]$ (
.]]( )
	GetString]]) 2
(]]2 3
File]]3 7
.]]7 8
ReadAllBytes]]8 D
(]]D E
$str]]E o
)]]o p
)]]p q
;]]q r
}^^ 
catch__ 
(__ 
IOException__ 
exceptIO__ '
)__' (
{`` 
IOaa 
.aa 
Loggeraa 
.aa 
Logaa 
(aa 
NLogaa "
.aa" #
LogLevelaa# +
.aa+ ,
Warnaa, 0
,aa0 1
$straa2 K
,aaK L
exceptIOaaM U
)aaU V
;aaV W
}bb 
{dd 
usingee 
(ee $
AesCryptoServiceProvideree /
aesAlgee0 6
=ee7 8
newee9 <$
AesCryptoServiceProvideree= U
(eeU V
)eeV W
)eeW X
{ff 
aesAlggg 
.gg 
Keygg 
=gg  
Encodinggg! )
.gg) *
UTF8gg* .
.gg. /
GetBytesgg/ 7
(gg7 8
$strgg8 J
)ggJ K
;ggK L
aesAlghh 
.hh 
IVhh 
=hh 
newhh  #
bytehh$ (
[hh( )
$numhh) +
]hh+ ,
;hh, -
ICryptoTransformjj $
	decryptorjj% .
=jj/ 0
aesAlgjj1 7
.jj7 8
CreateDecryptorjj8 G
(jjG H
aesAlgjjH N
.jjN O
KeyjjO R
,jjR S
aesAlgjjT Z
.jjZ [
IVjj[ ]
)jj] ^
;jj^ _
usingll 
(ll 
MemoryStreamll '
	msDecryptll( 1
=ll2 3
newll4 7
MemoryStreamll8 D
(llD E
FilellE I
.llI J
ReadAllBytesllJ V
(llV W
$str	llW Å
)
llÅ Ç
)
llÇ É
)
llÉ Ñ
{mm 
usingnn 
(nn 
CryptoStreamnn +
	csDecryptnn, 5
=nn6 7
newnn8 ;
CryptoStreamnn< H
(nnH I
	msDecryptnnI R
,nnR S
	decryptornnT ]
,nn] ^
CryptoStreamModenn_ o
.nno p
Readnnp t
)nnt u
)nnu v
{oo 
usingpp !
(pp" #
StreamReaderpp# /
	srDecryptpp0 9
=pp: ;
newpp< ?
StreamReaderpp@ L
(ppL M
	csDecryptppM V
)ppV W
)ppW X
{qq 
passwordtt  (
=tt) *
	srDecrypttt+ 4
.tt4 5
	ReadToEndtt5 >
(tt> ?
)tt? @
;tt@ A
}uu 
}vv 
}ww 
}xx 
}yy 
}zz 	
if{{ 

({{ 
PRIVATE_CONST_FIVE{{ 
=={{  
$num{{  !
){{! "
{|| 	
using~~ 
(~~ 
SqlConnection~~  
dBConnection~~! -
=~~. /
new~~0 3
SqlConnection~~4 A
(~~A B
$str~~B x
+~~y z
$str~~{ 
+
~~Ä Å
$str
~~Ç é
+
~~è ê
password
~~ë ô
)
~~ô ö
)
~~ö õ
{ 
try
ÄÄ 
{
ÅÅ 
dBConnection
ÇÇ  
.
ÇÇ  !
Open
ÇÇ! %
(
ÇÇ% &
)
ÇÇ& '
;
ÇÇ' (
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
SqlException
ÑÑ #
	exceptSql
ÑÑ$ -
)
ÑÑ- .
{
ÖÖ 
IO
ÜÜ 
.
ÜÜ 
Logger
ÜÜ 
.
ÜÜ 
Log
ÜÜ !
(
ÜÜ! "
NLog
ÜÜ" &
.
ÜÜ& '
LogLevel
ÜÜ' /
.
ÜÜ/ 0
Warn
ÜÜ0 4
,
ÜÜ4 5
$str
ÜÜ6 V
,
ÜÜV W
	exceptSql
ÜÜX a
)
ÜÜa b
;
ÜÜb c
}
áá 
}
àà 
}
ââ 	
}
ää 
private
çç 
void
çç 
GoodG2B2
çç 
(
çç 
)
çç 
{
éé 
string
èè 
password
èè 
;
èè 
if
êê 

(
êê  
PRIVATE_CONST_FIVE
êê 
==
êê  
$num
êê  !
)
êê! "
{
ëë 	
password
íí 
=
íí 
$str
íí 
;
íí 
try
îî 
{
ïï 
password
ññ 
=
ññ 
Encoding
ññ #
.
ññ# $
UTF8
ññ$ (
.
ññ( )
	GetString
ññ) 2
(
ññ2 3
File
ññ3 7
.
ññ7 8
ReadAllBytes
ññ8 D
(
ññD E
$str
ññE o
)
ñño p
)
ññp q
;
ññq r
}
óó 
catch
òò 
(
òò 
IOException
òò 
exceptIO
òò '
)
òò' (
{
ôô 
IO
öö 
.
öö 
Logger
öö 
.
öö 
Log
öö 
(
öö 
NLog
öö "
.
öö" #
LogLevel
öö# +
.
öö+ ,
Warn
öö, 0
,
öö0 1
$str
öö2 K
,
ööK L
exceptIO
ööM U
)
ööU V
;
ööV W
}
õõ 
{
ùù 
using
ûû 
(
ûû &
AesCryptoServiceProvider
ûû /
aesAlg
ûû0 6
=
ûû7 8
new
ûû9 <&
AesCryptoServiceProvider
ûû= U
(
ûûU V
)
ûûV W
)
ûûW X
{
üü 
aesAlg
†† 
.
†† 
Key
†† 
=
††  
Encoding
††! )
.
††) *
UTF8
††* .
.
††. /
GetBytes
††/ 7
(
††7 8
$str
††8 J
)
††J K
;
††K L
aesAlg
°° 
.
°° 
IV
°° 
=
°° 
new
°°  #
byte
°°$ (
[
°°( )
$num
°°) +
]
°°+ ,
;
°°, -
ICryptoTransform
££ $
	decryptor
££% .
=
££/ 0
aesAlg
££1 7
.
££7 8
CreateDecryptor
££8 G
(
££G H
aesAlg
££H N
.
££N O
Key
££O R
,
££R S
aesAlg
££T Z
.
££Z [
IV
££[ ]
)
££] ^
;
££^ _
using
•• 
(
•• 
MemoryStream
•• '
	msDecrypt
••( 1
=
••2 3
new
••4 7
MemoryStream
••8 D
(
••D E
File
••E I
.
••I J
ReadAllBytes
••J V
(
••V W
$str••W Å
)••Å Ç
)••Ç É
)••É Ñ
{
¶¶ 
using
ßß 
(
ßß 
CryptoStream
ßß +
	csDecrypt
ßß, 5
=
ßß6 7
new
ßß8 ;
CryptoStream
ßß< H
(
ßßH I
	msDecrypt
ßßI R
,
ßßR S
	decryptor
ßßT ]
,
ßß] ^
CryptoStreamMode
ßß_ o
.
ßßo p
Read
ßßp t
)
ßßt u
)
ßßu v
{
®® 
using
©© !
(
©©" #
StreamReader
©©# /
	srDecrypt
©©0 9
=
©©: ;
new
©©< ?
StreamReader
©©@ L
(
©©L M
	csDecrypt
©©M V
)
©©V W
)
©©W X
{
™™ 
password
≠≠  (
=
≠≠) *
	srDecrypt
≠≠+ 4
.
≠≠4 5
	ReadToEnd
≠≠5 >
(
≠≠> ?
)
≠≠? @
;
≠≠@ A
}
ÆÆ 
}
ØØ 
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
password
∏∏ 
=
∏∏ 
null
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫  
PRIVATE_CONST_FIVE
∫∫ 
==
∫∫  
$num
∫∫  !
)
∫∫! "
{
ªª 	
using
ΩΩ 
(
ΩΩ 
SqlConnection
ΩΩ  
dBConnection
ΩΩ! -
=
ΩΩ. /
new
ΩΩ0 3
SqlConnection
ΩΩ4 A
(
ΩΩA B
$str
ΩΩB x
+
ΩΩy z
$str
ΩΩ{ 
+ΩΩÄ Å
$strΩΩÇ é
+ΩΩè ê
passwordΩΩë ô
)ΩΩô ö
)ΩΩö õ
{
ææ 
try
øø 
{
¿¿ 
dBConnection
¡¡  
.
¡¡  !
Open
¡¡! %
(
¡¡% &
)
¡¡& '
;
¡¡' (
}
¬¬ 
catch
√√ 
(
√√ 
SqlException
√√ #
	exceptSql
√√$ -
)
√√- .
{
ƒƒ 
IO
≈≈ 
.
≈≈ 
Logger
≈≈ 
.
≈≈ 
Log
≈≈ !
(
≈≈! "
NLog
≈≈" &
.
≈≈& '
LogLevel
≈≈' /
.
≈≈/ 0
Warn
≈≈0 4
,
≈≈4 5
$str
≈≈6 V
,
≈≈V W
	exceptSql
≈≈X a
)
≈≈a b
;
≈≈b c
}
∆∆ 
}
«« 
}
»» 	
}
…… 
private
ÃÃ 
void
ÃÃ 
GoodB2G1
ÃÃ 
(
ÃÃ 
)
ÃÃ 
{
ÕÕ 
string
ŒŒ 
password
ŒŒ 
;
ŒŒ 
if
œœ 

(
œœ  
PRIVATE_CONST_FIVE
œœ 
==
œœ  
$num
œœ  !
)
œœ! "
{
–– 	
password
—— 
=
—— 
$str
—— 
;
—— 
try
”” 
{
‘‘ 
password
’’ 
=
’’ 
Encoding
’’ #
.
’’# $
UTF8
’’$ (
.
’’( )
	GetString
’’) 2
(
’’2 3
File
’’3 7
.
’’7 8
ReadAllBytes
’’8 D
(
’’D E
$str
’’E o
)
’’o p
)
’’p q
;
’’q r
}
÷÷ 
catch
◊◊ 
(
◊◊ 
IOException
◊◊ 
exceptIO
◊◊ '
)
◊◊' (
{
ÿÿ 
IO
ŸŸ 
.
ŸŸ 
Logger
ŸŸ 
.
ŸŸ 
Log
ŸŸ 
(
ŸŸ 
NLog
ŸŸ "
.
ŸŸ" #
LogLevel
ŸŸ# +
.
ŸŸ+ ,
Warn
ŸŸ, 0
,
ŸŸ0 1
$str
ŸŸ2 K
,
ŸŸK L
exceptIO
ŸŸM U
)
ŸŸU V
;
ŸŸV W
}
⁄⁄ 
}
‹‹ 	
else
›› 
{
ﬁﬁ 	
password
·· 
=
·· 
null
·· 
;
·· 
}
‚‚ 	
if
„„ 

(
„„  
PRIVATE_CONST_FIVE
„„ 
!=
„„  
$num
„„  !
)
„„! "
{
‰‰ 	
IO
ÊÊ 
.
ÊÊ 
	WriteLine
ÊÊ 
(
ÊÊ 
$str
ÊÊ /
)
ÊÊ/ 0
;
ÊÊ0 1
}
ÁÁ 	
else
ËË 
{
ÈÈ 	
{
ÎÎ 
using
ÏÏ 
(
ÏÏ &
AesCryptoServiceProvider
ÏÏ /
aesAlg
ÏÏ0 6
=
ÏÏ7 8
new
ÏÏ9 <&
AesCryptoServiceProvider
ÏÏ= U
(
ÏÏU V
)
ÏÏV W
)
ÏÏW X
{
ÌÌ 
aesAlg
ÓÓ 
.
ÓÓ 
Key
ÓÓ 
=
ÓÓ  
Encoding
ÓÓ! )
.
ÓÓ) *
UTF8
ÓÓ* .
.
ÓÓ. /
GetBytes
ÓÓ/ 7
(
ÓÓ7 8
$str
ÓÓ8 J
)
ÓÓJ K
;
ÓÓK L
aesAlg
ÔÔ 
.
ÔÔ 
IV
ÔÔ 
=
ÔÔ 
new
ÔÔ  #
byte
ÔÔ$ (
[
ÔÔ( )
$num
ÔÔ) +
]
ÔÔ+ ,
;
ÔÔ, -
ICryptoTransform
ÒÒ $
	decryptor
ÒÒ% .
=
ÒÒ/ 0
aesAlg
ÒÒ1 7
.
ÒÒ7 8
CreateDecryptor
ÒÒ8 G
(
ÒÒG H
aesAlg
ÒÒH N
.
ÒÒN O
Key
ÒÒO R
,
ÒÒR S
aesAlg
ÒÒT Z
.
ÒÒZ [
IV
ÒÒ[ ]
)
ÒÒ] ^
;
ÒÒ^ _
using
ÛÛ 
(
ÛÛ 
MemoryStream
ÛÛ '
	msDecrypt
ÛÛ( 1
=
ÛÛ2 3
new
ÛÛ4 7
MemoryStream
ÛÛ8 D
(
ÛÛD E
File
ÛÛE I
.
ÛÛI J
ReadAllBytes
ÛÛJ V
(
ÛÛV W
$strÛÛW Å
)ÛÛÅ Ç
)ÛÛÇ É
)ÛÛÉ Ñ
{
ÙÙ 
using
ıı 
(
ıı 
CryptoStream
ıı +
	csDecrypt
ıı, 5
=
ıı6 7
new
ıı8 ;
CryptoStream
ıı< H
(
ııH I
	msDecrypt
ııI R
,
ııR S
	decryptor
ııT ]
,
ıı] ^
CryptoStreamMode
ıı_ o
.
ııo p
Read
ııp t
)
ııt u
)
ııu v
{
ˆˆ 
using
˜˜ !
(
˜˜" #
StreamReader
˜˜# /
	srDecrypt
˜˜0 9
=
˜˜: ;
new
˜˜< ?
StreamReader
˜˜@ L
(
˜˜L M
	csDecrypt
˜˜M V
)
˜˜V W
)
˜˜W X
{
¯¯ 
password
˚˚  (
=
˚˚) *
	srDecrypt
˚˚+ 4
.
˚˚4 5
	ReadToEnd
˚˚5 >
(
˚˚> ?
)
˚˚? @
;
˚˚@ A
}
¸¸ 
}
˝˝ 
}
˛˛ 
}
ˇˇ 
}
ÄÄ 
using
ÅÅ 
(
ÅÅ 
SqlConnection
ÅÅ  
dBConnection
ÅÅ! -
=
ÅÅ. /
new
ÅÅ0 3
SqlConnection
ÅÅ4 A
(
ÅÅA B
$strÅÅB Ñ
+ÅÅÖ Ü
passwordÅÅá è
)ÅÅè ê
)ÅÅê ë
{
ÇÇ 
try
ÉÉ 
{
ÑÑ 
dBConnection
ÖÖ  
.
ÖÖ  !
Open
ÖÖ! %
(
ÖÖ% &
)
ÖÖ& '
;
ÖÖ' (
}
ÜÜ 
catch
áá 
(
áá 
SqlException
áá #
	exceptSql
áá$ -
)
áá- .
{
àà 
IO
ââ 
.
ââ 
Logger
ââ 
.
ââ 
Log
ââ !
(
ââ! "
NLog
ââ" &
.
ââ& '
LogLevel
ââ' /
.
ââ/ 0
Warn
ââ0 4
,
ââ4 5
$str
ââ6 V
,
ââV W
	exceptSql
ââX a
)
ââa b
;
ââb c
}
ää 
}
ãã 
}
åå 	
}
çç 
private
êê 
void
êê 
GoodB2G2
êê 
(
êê 
)
êê 
{
ëë 
string
íí 
password
íí 
;
íí 
if
ìì 

(
ìì  
PRIVATE_CONST_FIVE
ìì 
==
ìì  
$num
ìì  !
)
ìì! "
{
îî 	
password
ïï 
=
ïï 
$str
ïï 
;
ïï 
try
óó 
{
òò 
password
ôô 
=
ôô 
Encoding
ôô #
.
ôô# $
UTF8
ôô$ (
.
ôô( )
	GetString
ôô) 2
(
ôô2 3
File
ôô3 7
.
ôô7 8
ReadAllBytes
ôô8 D
(
ôôD E
$str
ôôE o
)
ôôo p
)
ôôp q
;
ôôq r
}
öö 
catch
õõ 
(
õõ 
IOException
õõ 
exceptIO
õõ '
)
õõ' (
{
úú 
IO
ùù 
.
ùù 
Logger
ùù 
.
ùù 
Log
ùù 
(
ùù 
NLog
ùù "
.
ùù" #
LogLevel
ùù# +
.
ùù+ ,
Warn
ùù, 0
,
ùù0 1
$str
ùù2 K
,
ùùK L
exceptIO
ùùM U
)
ùùU V
;
ùùV W
}
ûû 
}
†† 	
else
°° 
{
¢¢ 	
password
•• 
=
•• 
null
•• 
;
•• 
}
¶¶ 	
if
ßß 

(
ßß  
PRIVATE_CONST_FIVE
ßß 
==
ßß  
$num
ßß  !
)
ßß! "
{
®® 	
{
™™ 
using
´´ 
(
´´ &
AesCryptoServiceProvider
´´ /
aesAlg
´´0 6
=
´´7 8
new
´´9 <&
AesCryptoServiceProvider
´´= U
(
´´U V
)
´´V W
)
´´W X
{
¨¨ 
aesAlg
≠≠ 
.
≠≠ 
Key
≠≠ 
=
≠≠  
Encoding
≠≠! )
.
≠≠) *
UTF8
≠≠* .
.
≠≠. /
GetBytes
≠≠/ 7
(
≠≠7 8
$str
≠≠8 J
)
≠≠J K
;
≠≠K L
aesAlg
ÆÆ 
.
ÆÆ 
IV
ÆÆ 
=
ÆÆ 
new
ÆÆ  #
byte
ÆÆ$ (
[
ÆÆ( )
$num
ÆÆ) +
]
ÆÆ+ ,
;
ÆÆ, -
ICryptoTransform
∞∞ $
	decryptor
∞∞% .
=
∞∞/ 0
aesAlg
∞∞1 7
.
∞∞7 8
CreateDecryptor
∞∞8 G
(
∞∞G H
aesAlg
∞∞H N
.
∞∞N O
Key
∞∞O R
,
∞∞R S
aesAlg
∞∞T Z
.
∞∞Z [
IV
∞∞[ ]
)
∞∞] ^
;
∞∞^ _
using
≤≤ 
(
≤≤ 
MemoryStream
≤≤ '
	msDecrypt
≤≤( 1
=
≤≤2 3
new
≤≤4 7
MemoryStream
≤≤8 D
(
≤≤D E
File
≤≤E I
.
≤≤I J
ReadAllBytes
≤≤J V
(
≤≤V W
$str≤≤W Å
)≤≤Å Ç
)≤≤Ç É
)≤≤É Ñ
{
≥≥ 
using
¥¥ 
(
¥¥ 
CryptoStream
¥¥ +
	csDecrypt
¥¥, 5
=
¥¥6 7
new
¥¥8 ;
CryptoStream
¥¥< H
(
¥¥H I
	msDecrypt
¥¥I R
,
¥¥R S
	decryptor
¥¥T ]
,
¥¥] ^
CryptoStreamMode
¥¥_ o
.
¥¥o p
Read
¥¥p t
)
¥¥t u
)
¥¥u v
{
µµ 
using
∂∂ !
(
∂∂" #
StreamReader
∂∂# /
	srDecrypt
∂∂0 9
=
∂∂: ;
new
∂∂< ?
StreamReader
∂∂@ L
(
∂∂L M
	csDecrypt
∂∂M V
)
∂∂V W
)
∂∂W X
{
∑∑ 
password
∫∫  (
=
∫∫) *
	srDecrypt
∫∫+ 4
.
∫∫4 5
	ReadToEnd
∫∫5 >
(
∫∫> ?
)
∫∫? @
;
∫∫@ A
}
ªª 
}
ºº 
}
ΩΩ 
}
ææ 
}
øø 
using
¿¿ 
(
¿¿ 
SqlConnection
¿¿  
dBConnection
¿¿! -
=
¿¿. /
new
¿¿0 3
SqlConnection
¿¿4 A
(
¿¿A B
$str¿¿B Ñ
+¿¿Ö Ü
password¿¿á è
)¿¿è ê
)¿¿ê ë
{
¡¡ 
try
¬¬ 
{
√√ 
dBConnection
ƒƒ  
.
ƒƒ  !
Open
ƒƒ! %
(
ƒƒ% &
)
ƒƒ& '
;
ƒƒ' (
}
≈≈ 
catch
∆∆ 
(
∆∆ 
SqlException
∆∆ #
	exceptSql
∆∆$ -
)
∆∆- .
{
«« 
IO
»» 
.
»» 
Logger
»» 
.
»» 
Log
»» !
(
»»! "
NLog
»»" &
.
»»& '
LogLevel
»»' /
.
»»/ 0
Warn
»»0 4
,
»»4 5
$str
»»6 V
,
»»V W
	exceptSql
»»X a
)
»»a b
;
»»b c
}
…… 
}
   
}
ÀÀ 	
}
ÃÃ 
public
ŒŒ 

override
ŒŒ 
void
ŒŒ 
Good
ŒŒ 
(
ŒŒ 
)
ŒŒ 
{
œœ 
GoodG2B1
–– 
(
–– 
)
–– 
;
–– 
GoodG2B2
—— 
(
—— 
)
—— 
;
—— 
GoodB2G1
““ 
(
““ 
)
““ 
;
““ 
GoodB2G2
”” 
(
”” 
)
”” 
;
”” 
}
‘‘ 
}÷÷ 
}◊◊ ü≠
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_07.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_07 9
:: ;
AbstractTestCase< L
{ 
private"" 
int"" 
privateFive"" 
="" 
$num"" 
;""  
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
string&& 
password&& 
;&& 
if'' 

('' 
privateFive'' 
=='' 
$num'' 
)'' 
{(( 	
password)) 
=)) 
$str)) 
;)) 
try++ 
{,, 
password-- 
=-- 
Encoding-- #
.--# $
UTF8--$ (
.--( )
	GetString--) 2
(--2 3
File--3 7
.--7 8
ReadAllBytes--8 D
(--D E
$str--E o
)--o p
)--p q
;--q r
}.. 
catch// 
(// 
IOException// 
exceptIO// '
)//' (
{00 
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 "
.11" #
LogLevel11# +
.11+ ,
Warn11, 0
,110 1
$str112 K
,11K L
exceptIO11M U
)11U V
;11V W
}22 
}44 	
else55 
{66 	
password99 
=99 
null99 
;99 
}:: 	
if;; 

(;; 
privateFive;; 
==;; 
$num;; 
);; 
{<< 	
using>> 
(>> 
SqlConnection>>  
dBConnection>>! -
=>>. /
new>>0 3
SqlConnection>>4 A
(>>A B
$str>>B x
+>>y z
$str>>{ 
+
>>Ä Å
$str
>>Ç é
+
>>è ê
password
>>ë ô
)
>>ô ö
)
>>ö õ
{?? 
try@@ 
{AA 
dBConnectionBB  
.BB  !
OpenBB! %
(BB% &
)BB& '
;BB' (
}CC 
catchDD 
(DD 
SqlExceptionDD #
	exceptSqlDD$ -
)DD- .
{EE 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF !
(FF! "
NLogFF" &
.FF& '
LogLevelFF' /
.FF/ 0
WarnFF0 4
,FF4 5
$strFF6 V
,FFV W
	exceptSqlFFX a
)FFa b
;FFb c
}GG 
}HH 
}II 	
}JJ 
privateNN 
voidNN 
GoodG2B1NN 
(NN 
)NN 
{OO 
stringPP 
passwordPP 
;PP 
ifQQ 

(QQ 
privateFiveQQ 
!=QQ 
$numQQ 
)QQ 
{RR 	
passwordUU 
=UU 
nullUU 
;UU 
}VV 	
elseWW 
{XX 	
passwordYY 
=YY 
$strYY 
;YY 
try[[ 
{\\ 
password]] 
=]] 
Encoding]] #
.]]# $
UTF8]]$ (
.]]( )
	GetString]]) 2
(]]2 3
File]]3 7
.]]7 8
ReadAllBytes]]8 D
(]]D E
$str]]E o
)]]o p
)]]p q
;]]q r
}^^ 
catch__ 
(__ 
IOException__ 
exceptIO__ '
)__' (
{`` 
IOaa 
.aa 
Loggeraa 
.aa 
Logaa 
(aa 
NLogaa "
.aa" #
LogLevelaa# +
.aa+ ,
Warnaa, 0
,aa0 1
$straa2 K
,aaK L
exceptIOaaM U
)aaU V
;aaV W
}bb 
{dd 
usingee 
(ee $
AesCryptoServiceProvideree /
aesAlgee0 6
=ee7 8
newee9 <$
AesCryptoServiceProvideree= U
(eeU V
)eeV W
)eeW X
{ff 
aesAlggg 
.gg 
Keygg 
=gg  
Encodinggg! )
.gg) *
UTF8gg* .
.gg. /
GetBytesgg/ 7
(gg7 8
$strgg8 J
)ggJ K
;ggK L
aesAlghh 
.hh 
IVhh 
=hh 
newhh  #
bytehh$ (
[hh( )
$numhh) +
]hh+ ,
;hh, -
ICryptoTransformjj $
	decryptorjj% .
=jj/ 0
aesAlgjj1 7
.jj7 8
CreateDecryptorjj8 G
(jjG H
aesAlgjjH N
.jjN O
KeyjjO R
,jjR S
aesAlgjjT Z
.jjZ [
IVjj[ ]
)jj] ^
;jj^ _
usingll 
(ll 
MemoryStreamll '
	msDecryptll( 1
=ll2 3
newll4 7
MemoryStreamll8 D
(llD E
FilellE I
.llI J
ReadAllBytesllJ V
(llV W
$str	llW Å
)
llÅ Ç
)
llÇ É
)
llÉ Ñ
{mm 
usingnn 
(nn 
CryptoStreamnn +
	csDecryptnn, 5
=nn6 7
newnn8 ;
CryptoStreamnn< H
(nnH I
	msDecryptnnI R
,nnR S
	decryptornnT ]
,nn] ^
CryptoStreamModenn_ o
.nno p
Readnnp t
)nnt u
)nnu v
{oo 
usingpp !
(pp" #
StreamReaderpp# /
	srDecryptpp0 9
=pp: ;
newpp< ?
StreamReaderpp@ L
(ppL M
	csDecryptppM V
)ppV W
)ppW X
{qq 
passwordtt  (
=tt) *
	srDecrypttt+ 4
.tt4 5
	ReadToEndtt5 >
(tt> ?
)tt? @
;tt@ A
}uu 
}vv 
}ww 
}xx 
}yy 
}zz 	
if{{ 

({{ 
privateFive{{ 
=={{ 
$num{{ 
){{ 
{|| 	
using~~ 
(~~ 
SqlConnection~~  
dBConnection~~! -
=~~. /
new~~0 3
SqlConnection~~4 A
(~~A B
$str~~B x
+~~y z
$str~~{ 
+
~~Ä Å
$str
~~Ç é
+
~~è ê
password
~~ë ô
)
~~ô ö
)
~~ö õ
{ 
try
ÄÄ 
{
ÅÅ 
dBConnection
ÇÇ  
.
ÇÇ  !
Open
ÇÇ! %
(
ÇÇ% &
)
ÇÇ& '
;
ÇÇ' (
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
SqlException
ÑÑ #
	exceptSql
ÑÑ$ -
)
ÑÑ- .
{
ÖÖ 
IO
ÜÜ 
.
ÜÜ 
Logger
ÜÜ 
.
ÜÜ 
Log
ÜÜ !
(
ÜÜ! "
NLog
ÜÜ" &
.
ÜÜ& '
LogLevel
ÜÜ' /
.
ÜÜ/ 0
Warn
ÜÜ0 4
,
ÜÜ4 5
$str
ÜÜ6 V
,
ÜÜV W
	exceptSql
ÜÜX a
)
ÜÜa b
;
ÜÜb c
}
áá 
}
àà 
}
ââ 	
}
ää 
private
çç 
void
çç 
GoodG2B2
çç 
(
çç 
)
çç 
{
éé 
string
èè 
password
èè 
;
èè 
if
êê 

(
êê 
privateFive
êê 
==
êê 
$num
êê 
)
êê 
{
ëë 	
password
íí 
=
íí 
$str
íí 
;
íí 
try
îî 
{
ïï 
password
ññ 
=
ññ 
Encoding
ññ #
.
ññ# $
UTF8
ññ$ (
.
ññ( )
	GetString
ññ) 2
(
ññ2 3
File
ññ3 7
.
ññ7 8
ReadAllBytes
ññ8 D
(
ññD E
$str
ññE o
)
ñño p
)
ññp q
;
ññq r
}
óó 
catch
òò 
(
òò 
IOException
òò 
exceptIO
òò '
)
òò' (
{
ôô 
IO
öö 
.
öö 
Logger
öö 
.
öö 
Log
öö 
(
öö 
NLog
öö "
.
öö" #
LogLevel
öö# +
.
öö+ ,
Warn
öö, 0
,
öö0 1
$str
öö2 K
,
ööK L
exceptIO
ööM U
)
ööU V
;
ööV W
}
õõ 
{
ùù 
using
ûû 
(
ûû &
AesCryptoServiceProvider
ûû /
aesAlg
ûû0 6
=
ûû7 8
new
ûû9 <&
AesCryptoServiceProvider
ûû= U
(
ûûU V
)
ûûV W
)
ûûW X
{
üü 
aesAlg
†† 
.
†† 
Key
†† 
=
††  
Encoding
††! )
.
††) *
UTF8
††* .
.
††. /
GetBytes
††/ 7
(
††7 8
$str
††8 J
)
††J K
;
††K L
aesAlg
°° 
.
°° 
IV
°° 
=
°° 
new
°°  #
byte
°°$ (
[
°°( )
$num
°°) +
]
°°+ ,
;
°°, -
ICryptoTransform
££ $
	decryptor
££% .
=
££/ 0
aesAlg
££1 7
.
££7 8
CreateDecryptor
££8 G
(
££G H
aesAlg
££H N
.
££N O
Key
££O R
,
££R S
aesAlg
££T Z
.
££Z [
IV
££[ ]
)
££] ^
;
££^ _
using
•• 
(
•• 
MemoryStream
•• '
	msDecrypt
••( 1
=
••2 3
new
••4 7
MemoryStream
••8 D
(
••D E
File
••E I
.
••I J
ReadAllBytes
••J V
(
••V W
$str••W Å
)••Å Ç
)••Ç É
)••É Ñ
{
¶¶ 
using
ßß 
(
ßß 
CryptoStream
ßß +
	csDecrypt
ßß, 5
=
ßß6 7
new
ßß8 ;
CryptoStream
ßß< H
(
ßßH I
	msDecrypt
ßßI R
,
ßßR S
	decryptor
ßßT ]
,
ßß] ^
CryptoStreamMode
ßß_ o
.
ßßo p
Read
ßßp t
)
ßßt u
)
ßßu v
{
®® 
using
©© !
(
©©" #
StreamReader
©©# /
	srDecrypt
©©0 9
=
©©: ;
new
©©< ?
StreamReader
©©@ L
(
©©L M
	csDecrypt
©©M V
)
©©V W
)
©©W X
{
™™ 
password
≠≠  (
=
≠≠) *
	srDecrypt
≠≠+ 4
.
≠≠4 5
	ReadToEnd
≠≠5 >
(
≠≠> ?
)
≠≠? @
;
≠≠@ A
}
ÆÆ 
}
ØØ 
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
password
∏∏ 
=
∏∏ 
null
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
privateFive
∫∫ 
==
∫∫ 
$num
∫∫ 
)
∫∫ 
{
ªª 	
using
ΩΩ 
(
ΩΩ 
SqlConnection
ΩΩ  
dBConnection
ΩΩ! -
=
ΩΩ. /
new
ΩΩ0 3
SqlConnection
ΩΩ4 A
(
ΩΩA B
$str
ΩΩB x
+
ΩΩy z
$str
ΩΩ{ 
+ΩΩÄ Å
$strΩΩÇ é
+ΩΩè ê
passwordΩΩë ô
)ΩΩô ö
)ΩΩö õ
{
ææ 
try
øø 
{
¿¿ 
dBConnection
¡¡  
.
¡¡  !
Open
¡¡! %
(
¡¡% &
)
¡¡& '
;
¡¡' (
}
¬¬ 
catch
√√ 
(
√√ 
SqlException
√√ #
	exceptSql
√√$ -
)
√√- .
{
ƒƒ 
IO
≈≈ 
.
≈≈ 
Logger
≈≈ 
.
≈≈ 
Log
≈≈ !
(
≈≈! "
NLog
≈≈" &
.
≈≈& '
LogLevel
≈≈' /
.
≈≈/ 0
Warn
≈≈0 4
,
≈≈4 5
$str
≈≈6 V
,
≈≈V W
	exceptSql
≈≈X a
)
≈≈a b
;
≈≈b c
}
∆∆ 
}
«« 
}
»» 	
}
…… 
private
ÃÃ 
void
ÃÃ 
GoodB2G1
ÃÃ 
(
ÃÃ 
)
ÃÃ 
{
ÕÕ 
string
ŒŒ 
password
ŒŒ 
;
ŒŒ 
if
œœ 

(
œœ 
privateFive
œœ 
==
œœ 
$num
œœ 
)
œœ 
{
–– 	
password
—— 
=
—— 
$str
—— 
;
—— 
try
”” 
{
‘‘ 
password
’’ 
=
’’ 
Encoding
’’ #
.
’’# $
UTF8
’’$ (
.
’’( )
	GetString
’’) 2
(
’’2 3
File
’’3 7
.
’’7 8
ReadAllBytes
’’8 D
(
’’D E
$str
’’E o
)
’’o p
)
’’p q
;
’’q r
}
÷÷ 
catch
◊◊ 
(
◊◊ 
IOException
◊◊ 
exceptIO
◊◊ '
)
◊◊' (
{
ÿÿ 
IO
ŸŸ 
.
ŸŸ 
Logger
ŸŸ 
.
ŸŸ 
Log
ŸŸ 
(
ŸŸ 
NLog
ŸŸ "
.
ŸŸ" #
LogLevel
ŸŸ# +
.
ŸŸ+ ,
Warn
ŸŸ, 0
,
ŸŸ0 1
$str
ŸŸ2 K
,
ŸŸK L
exceptIO
ŸŸM U
)
ŸŸU V
;
ŸŸV W
}
⁄⁄ 
}
‹‹ 	
else
›› 
{
ﬁﬁ 	
password
·· 
=
·· 
null
·· 
;
·· 
}
‚‚ 	
if
„„ 

(
„„ 
privateFive
„„ 
!=
„„ 
$num
„„ 
)
„„ 
{
‰‰ 	
IO
ÊÊ 
.
ÊÊ 
	WriteLine
ÊÊ 
(
ÊÊ 
$str
ÊÊ /
)
ÊÊ/ 0
;
ÊÊ0 1
}
ÁÁ 	
else
ËË 
{
ÈÈ 	
{
ÎÎ 
using
ÏÏ 
(
ÏÏ &
AesCryptoServiceProvider
ÏÏ /
aesAlg
ÏÏ0 6
=
ÏÏ7 8
new
ÏÏ9 <&
AesCryptoServiceProvider
ÏÏ= U
(
ÏÏU V
)
ÏÏV W
)
ÏÏW X
{
ÌÌ 
aesAlg
ÓÓ 
.
ÓÓ 
Key
ÓÓ 
=
ÓÓ  
Encoding
ÓÓ! )
.
ÓÓ) *
UTF8
ÓÓ* .
.
ÓÓ. /
GetBytes
ÓÓ/ 7
(
ÓÓ7 8
$str
ÓÓ8 J
)
ÓÓJ K
;
ÓÓK L
aesAlg
ÔÔ 
.
ÔÔ 
IV
ÔÔ 
=
ÔÔ 
new
ÔÔ  #
byte
ÔÔ$ (
[
ÔÔ( )
$num
ÔÔ) +
]
ÔÔ+ ,
;
ÔÔ, -
ICryptoTransform
ÒÒ $
	decryptor
ÒÒ% .
=
ÒÒ/ 0
aesAlg
ÒÒ1 7
.
ÒÒ7 8
CreateDecryptor
ÒÒ8 G
(
ÒÒG H
aesAlg
ÒÒH N
.
ÒÒN O
Key
ÒÒO R
,
ÒÒR S
aesAlg
ÒÒT Z
.
ÒÒZ [
IV
ÒÒ[ ]
)
ÒÒ] ^
;
ÒÒ^ _
using
ÛÛ 
(
ÛÛ 
MemoryStream
ÛÛ '
	msDecrypt
ÛÛ( 1
=
ÛÛ2 3
new
ÛÛ4 7
MemoryStream
ÛÛ8 D
(
ÛÛD E
File
ÛÛE I
.
ÛÛI J
ReadAllBytes
ÛÛJ V
(
ÛÛV W
$strÛÛW Å
)ÛÛÅ Ç
)ÛÛÇ É
)ÛÛÉ Ñ
{
ÙÙ 
using
ıı 
(
ıı 
CryptoStream
ıı +
	csDecrypt
ıı, 5
=
ıı6 7
new
ıı8 ;
CryptoStream
ıı< H
(
ııH I
	msDecrypt
ııI R
,
ııR S
	decryptor
ııT ]
,
ıı] ^
CryptoStreamMode
ıı_ o
.
ııo p
Read
ııp t
)
ııt u
)
ııu v
{
ˆˆ 
using
˜˜ !
(
˜˜" #
StreamReader
˜˜# /
	srDecrypt
˜˜0 9
=
˜˜: ;
new
˜˜< ?
StreamReader
˜˜@ L
(
˜˜L M
	csDecrypt
˜˜M V
)
˜˜V W
)
˜˜W X
{
¯¯ 
password
˚˚  (
=
˚˚) *
	srDecrypt
˚˚+ 4
.
˚˚4 5
	ReadToEnd
˚˚5 >
(
˚˚> ?
)
˚˚? @
;
˚˚@ A
}
¸¸ 
}
˝˝ 
}
˛˛ 
}
ˇˇ 
}
ÄÄ 
using
ÅÅ 
(
ÅÅ 
SqlConnection
ÅÅ  
dBConnection
ÅÅ! -
=
ÅÅ. /
new
ÅÅ0 3
SqlConnection
ÅÅ4 A
(
ÅÅA B
$strÅÅB Ñ
+ÅÅÖ Ü
passwordÅÅá è
)ÅÅè ê
)ÅÅê ë
{
ÇÇ 
try
ÉÉ 
{
ÑÑ 
dBConnection
ÖÖ  
.
ÖÖ  !
Open
ÖÖ! %
(
ÖÖ% &
)
ÖÖ& '
;
ÖÖ' (
}
ÜÜ 
catch
áá 
(
áá 
SqlException
áá #
	exceptSql
áá$ -
)
áá- .
{
àà 
IO
ââ 
.
ââ 
Logger
ââ 
.
ââ 
Log
ââ !
(
ââ! "
NLog
ââ" &
.
ââ& '
LogLevel
ââ' /
.
ââ/ 0
Warn
ââ0 4
,
ââ4 5
$str
ââ6 V
,
ââV W
	exceptSql
ââX a
)
ââa b
;
ââb c
}
ää 
}
ãã 
}
åå 	
}
çç 
private
êê 
void
êê 
GoodB2G2
êê 
(
êê 
)
êê 
{
ëë 
string
íí 
password
íí 
;
íí 
if
ìì 

(
ìì 
privateFive
ìì 
==
ìì 
$num
ìì 
)
ìì 
{
îî 	
password
ïï 
=
ïï 
$str
ïï 
;
ïï 
try
óó 
{
òò 
password
ôô 
=
ôô 
Encoding
ôô #
.
ôô# $
UTF8
ôô$ (
.
ôô( )
	GetString
ôô) 2
(
ôô2 3
File
ôô3 7
.
ôô7 8
ReadAllBytes
ôô8 D
(
ôôD E
$str
ôôE o
)
ôôo p
)
ôôp q
;
ôôq r
}
öö 
catch
õõ 
(
õõ 
IOException
õõ 
exceptIO
õõ '
)
õõ' (
{
úú 
IO
ùù 
.
ùù 
Logger
ùù 
.
ùù 
Log
ùù 
(
ùù 
NLog
ùù "
.
ùù" #
LogLevel
ùù# +
.
ùù+ ,
Warn
ùù, 0
,
ùù0 1
$str
ùù2 K
,
ùùK L
exceptIO
ùùM U
)
ùùU V
;
ùùV W
}
ûû 
}
†† 	
else
°° 
{
¢¢ 	
password
•• 
=
•• 
null
•• 
;
•• 
}
¶¶ 	
if
ßß 

(
ßß 
privateFive
ßß 
==
ßß 
$num
ßß 
)
ßß 
{
®® 	
{
™™ 
using
´´ 
(
´´ &
AesCryptoServiceProvider
´´ /
aesAlg
´´0 6
=
´´7 8
new
´´9 <&
AesCryptoServiceProvider
´´= U
(
´´U V
)
´´V W
)
´´W X
{
¨¨ 
aesAlg
≠≠ 
.
≠≠ 
Key
≠≠ 
=
≠≠  
Encoding
≠≠! )
.
≠≠) *
UTF8
≠≠* .
.
≠≠. /
GetBytes
≠≠/ 7
(
≠≠7 8
$str
≠≠8 J
)
≠≠J K
;
≠≠K L
aesAlg
ÆÆ 
.
ÆÆ 
IV
ÆÆ 
=
ÆÆ 
new
ÆÆ  #
byte
ÆÆ$ (
[
ÆÆ( )
$num
ÆÆ) +
]
ÆÆ+ ,
;
ÆÆ, -
ICryptoTransform
∞∞ $
	decryptor
∞∞% .
=
∞∞/ 0
aesAlg
∞∞1 7
.
∞∞7 8
CreateDecryptor
∞∞8 G
(
∞∞G H
aesAlg
∞∞H N
.
∞∞N O
Key
∞∞O R
,
∞∞R S
aesAlg
∞∞T Z
.
∞∞Z [
IV
∞∞[ ]
)
∞∞] ^
;
∞∞^ _
using
≤≤ 
(
≤≤ 
MemoryStream
≤≤ '
	msDecrypt
≤≤( 1
=
≤≤2 3
new
≤≤4 7
MemoryStream
≤≤8 D
(
≤≤D E
File
≤≤E I
.
≤≤I J
ReadAllBytes
≤≤J V
(
≤≤V W
$str≤≤W Å
)≤≤Å Ç
)≤≤Ç É
)≤≤É Ñ
{
≥≥ 
using
¥¥ 
(
¥¥ 
CryptoStream
¥¥ +
	csDecrypt
¥¥, 5
=
¥¥6 7
new
¥¥8 ;
CryptoStream
¥¥< H
(
¥¥H I
	msDecrypt
¥¥I R
,
¥¥R S
	decryptor
¥¥T ]
,
¥¥] ^
CryptoStreamMode
¥¥_ o
.
¥¥o p
Read
¥¥p t
)
¥¥t u
)
¥¥u v
{
µµ 
using
∂∂ !
(
∂∂" #
StreamReader
∂∂# /
	srDecrypt
∂∂0 9
=
∂∂: ;
new
∂∂< ?
StreamReader
∂∂@ L
(
∂∂L M
	csDecrypt
∂∂M V
)
∂∂V W
)
∂∂W X
{
∑∑ 
password
∫∫  (
=
∫∫) *
	srDecrypt
∫∫+ 4
.
∫∫4 5
	ReadToEnd
∫∫5 >
(
∫∫> ?
)
∫∫? @
;
∫∫@ A
}
ªª 
}
ºº 
}
ΩΩ 
}
ææ 
}
øø 
using
¿¿ 
(
¿¿ 
SqlConnection
¿¿  
dBConnection
¿¿! -
=
¿¿. /
new
¿¿0 3
SqlConnection
¿¿4 A
(
¿¿A B
$str¿¿B Ñ
+¿¿Ö Ü
password¿¿á è
)¿¿è ê
)¿¿ê ë
{
¡¡ 
try
¬¬ 
{
√√ 
dBConnection
ƒƒ  
.
ƒƒ  !
Open
ƒƒ! %
(
ƒƒ% &
)
ƒƒ& '
;
ƒƒ' (
}
≈≈ 
catch
∆∆ 
(
∆∆ 
SqlException
∆∆ #
	exceptSql
∆∆$ -
)
∆∆- .
{
«« 
IO
»» 
.
»» 
Logger
»» 
.
»» 
Log
»» !
(
»»! "
NLog
»»" &
.
»»& '
LogLevel
»»' /
.
»»/ 0
Warn
»»0 4
,
»»4 5
$str
»»6 V
,
»»V W
	exceptSql
»»X a
)
»»a b
;
»»b c
}
…… 
}
   
}
ÀÀ 	
}
ÃÃ 
public
ŒŒ 

override
ŒŒ 
void
ŒŒ 
Good
ŒŒ 
(
ŒŒ 
)
ŒŒ 
{
œœ 
GoodG2B1
–– 
(
–– 
)
–– 
;
–– 
GoodG2B2
—— 
(
—— 
)
—— 
;
—— 
GoodB2G1
““ 
(
““ 
)
““ 
;
““ 
GoodB2G2
”” 
(
”” 
)
”” 
;
”” 
}
‘‘ 
}÷÷ 
}◊◊ ¢∞
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_08.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_08 9
:: ;
AbstractTestCase< L
{ 
private"" 
static"" 
bool"" 
PrivateReturnsTrue"" *
(""* +
)""+ ,
{## 
return$$ 
true$$ 
;$$ 
}%% 
private'' 
static'' 
bool'' 
PrivateReturnsFalse'' +
(''+ ,
)'', -
{(( 
return)) 
false)) 
;)) 
}** 
public,, 

override,, 
void,, 
Bad,, 
(,, 
),, 
{-- 
string.. 
password.. 
;.. 
if// 

(// 
PrivateReturnsTrue// 
(// 
)//  
)//  !
{00 	
password11 
=11 
$str11 
;11 
try33 
{44 
password55 
=55 
Encoding55 #
.55# $
UTF855$ (
.55( )
	GetString55) 2
(552 3
File553 7
.557 8
ReadAllBytes558 D
(55D E
$str55E o
)55o p
)55p q
;55q r
}66 
catch77 
(77 
IOException77 
exceptIO77 '
)77' (
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
$str992 K
,99K L
exceptIO99M U
)99U V
;99V W
}:: 
}<< 	
else== 
{>> 	
passwordAA 
=AA 
nullAA 
;AA 
}BB 	
ifCC 

(CC 
PrivateReturnsTrueCC 
(CC 
)CC  
)CC  !
{DD 	
usingFF 
(FF 
SqlConnectionFF  
dBConnectionFF! -
=FF. /
newFF0 3
SqlConnectionFF4 A
(FFA B
$strFFB x
+FFy z
$strFF{ 
+
FFÄ Å
$str
FFÇ é
+
FFè ê
password
FFë ô
)
FFô ö
)
FFö õ
{GG 
tryHH 
{II 
dBConnectionJJ  
.JJ  !
OpenJJ! %
(JJ% &
)JJ& '
;JJ' (
}KK 
catchLL 
(LL 
SqlExceptionLL #
	exceptSqlLL$ -
)LL- .
{MM 
IONN 
.NN 
LoggerNN 
.NN 
LogNN !
(NN! "
NLogNN" &
.NN& '
LogLevelNN' /
.NN/ 0
WarnNN0 4
,NN4 5
$strNN6 V
,NNV W
	exceptSqlNNX a
)NNa b
;NNb c
}OO 
}PP 
}QQ 	
}RR 
privateVV 
voidVV 
GoodG2B1VV 
(VV 
)VV 
{WW 
stringXX 
passwordXX 
;XX 
ifYY 

(YY 
PrivateReturnsFalseYY 
(YY  
)YY  !
)YY! "
{ZZ 	
password]] 
=]] 
null]] 
;]] 
}^^ 	
else__ 
{`` 	
passwordaa 
=aa 
$straa 
;aa 
trycc 
{dd 
passwordee 
=ee 
Encodingee #
.ee# $
UTF8ee$ (
.ee( )
	GetStringee) 2
(ee2 3
Fileee3 7
.ee7 8
ReadAllBytesee8 D
(eeD E
$streeE o
)eeo p
)eep q
;eeq r
}ff 
catchgg 
(gg 
IOExceptiongg 
exceptIOgg '
)gg' (
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
$strii2 K
,iiK L
exceptIOiiM U
)iiU V
;iiV W
}jj 
{ll 
usingmm 
(mm $
AesCryptoServiceProvidermm /
aesAlgmm0 6
=mm7 8
newmm9 <$
AesCryptoServiceProvidermm= U
(mmU V
)mmV W
)mmW X
{nn 
aesAlgoo 
.oo 
Keyoo 
=oo  
Encodingoo! )
.oo) *
UTF8oo* .
.oo. /
GetBytesoo/ 7
(oo7 8
$stroo8 J
)ooJ K
;ooK L
aesAlgpp 
.pp 
IVpp 
=pp 
newpp  #
bytepp$ (
[pp( )
$numpp) +
]pp+ ,
;pp, -
ICryptoTransformrr $
	decryptorrr% .
=rr/ 0
aesAlgrr1 7
.rr7 8
CreateDecryptorrr8 G
(rrG H
aesAlgrrH N
.rrN O
KeyrrO R
,rrR S
aesAlgrrT Z
.rrZ [
IVrr[ ]
)rr] ^
;rr^ _
usingtt 
(tt 
MemoryStreamtt '
	msDecrypttt( 1
=tt2 3
newtt4 7
MemoryStreamtt8 D
(ttD E
FilettE I
.ttI J
ReadAllBytesttJ V
(ttV W
$str	ttW Å
)
ttÅ Ç
)
ttÇ É
)
ttÉ Ñ
{uu 
usingvv 
(vv 
CryptoStreamvv +
	csDecryptvv, 5
=vv6 7
newvv8 ;
CryptoStreamvv< H
(vvH I
	msDecryptvvI R
,vvR S
	decryptorvvT ]
,vv] ^
CryptoStreamModevv_ o
.vvo p
Readvvp t
)vvt u
)vvu v
{ww 
usingxx !
(xx" #
StreamReaderxx# /
	srDecryptxx0 9
=xx: ;
newxx< ?
StreamReaderxx@ L
(xxL M
	csDecryptxxM V
)xxV W
)xxW X
{yy 
password||  (
=||) *
	srDecrypt||+ 4
.||4 5
	ReadToEnd||5 >
(||> ?
)||? @
;||@ A
}}} 
}~~ 
} 
}
ÄÄ 
}
ÅÅ 
}
ÇÇ 	
if
ÉÉ 

(
ÉÉ  
PrivateReturnsTrue
ÉÉ 
(
ÉÉ 
)
ÉÉ  
)
ÉÉ  !
{
ÑÑ 	
using
ÜÜ 
(
ÜÜ 
SqlConnection
ÜÜ  
dBConnection
ÜÜ! -
=
ÜÜ. /
new
ÜÜ0 3
SqlConnection
ÜÜ4 A
(
ÜÜA B
$str
ÜÜB x
+
ÜÜy z
$str
ÜÜ{ 
+ÜÜÄ Å
$strÜÜÇ é
+ÜÜè ê
passwordÜÜë ô
)ÜÜô ö
)ÜÜö õ
{
áá 
try
àà 
{
ââ 
dBConnection
ää  
.
ää  !
Open
ää! %
(
ää% &
)
ää& '
;
ää' (
}
ãã 
catch
åå 
(
åå 
SqlException
åå #
	exceptSql
åå$ -
)
åå- .
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé !
(
éé! "
NLog
éé" &
.
éé& '
LogLevel
éé' /
.
éé/ 0
Warn
éé0 4
,
éé4 5
$str
éé6 V
,
ééV W
	exceptSql
ééX a
)
ééa b
;
ééb c
}
èè 
}
êê 
}
ëë 	
}
íí 
private
ïï 
void
ïï 
GoodG2B2
ïï 
(
ïï 
)
ïï 
{
ññ 
string
óó 
password
óó 
;
óó 
if
òò 

(
òò  
PrivateReturnsTrue
òò 
(
òò 
)
òò  
)
òò  !
{
ôô 	
password
öö 
=
öö 
$str
öö 
;
öö 
try
úú 
{
ùù 
password
ûû 
=
ûû 
Encoding
ûû #
.
ûû# $
UTF8
ûû$ (
.
ûû( )
	GetString
ûû) 2
(
ûû2 3
File
ûû3 7
.
ûû7 8
ReadAllBytes
ûû8 D
(
ûûD E
$str
ûûE o
)
ûûo p
)
ûûp q
;
ûûq r
}
üü 
catch
†† 
(
†† 
IOException
†† 
exceptIO
†† '
)
††' (
{
°° 
IO
¢¢ 
.
¢¢ 
Logger
¢¢ 
.
¢¢ 
Log
¢¢ 
(
¢¢ 
NLog
¢¢ "
.
¢¢" #
LogLevel
¢¢# +
.
¢¢+ ,
Warn
¢¢, 0
,
¢¢0 1
$str
¢¢2 K
,
¢¢K L
exceptIO
¢¢M U
)
¢¢U V
;
¢¢V W
}
££ 
{
•• 
using
¶¶ 
(
¶¶ &
AesCryptoServiceProvider
¶¶ /
aesAlg
¶¶0 6
=
¶¶7 8
new
¶¶9 <&
AesCryptoServiceProvider
¶¶= U
(
¶¶U V
)
¶¶V W
)
¶¶W X
{
ßß 
aesAlg
®® 
.
®® 
Key
®® 
=
®®  
Encoding
®®! )
.
®®) *
UTF8
®®* .
.
®®. /
GetBytes
®®/ 7
(
®®7 8
$str
®®8 J
)
®®J K
;
®®K L
aesAlg
©© 
.
©© 
IV
©© 
=
©© 
new
©©  #
byte
©©$ (
[
©©( )
$num
©©) +
]
©©+ ,
;
©©, -
ICryptoTransform
´´ $
	decryptor
´´% .
=
´´/ 0
aesAlg
´´1 7
.
´´7 8
CreateDecryptor
´´8 G
(
´´G H
aesAlg
´´H N
.
´´N O
Key
´´O R
,
´´R S
aesAlg
´´T Z
.
´´Z [
IV
´´[ ]
)
´´] ^
;
´´^ _
using
≠≠ 
(
≠≠ 
MemoryStream
≠≠ '
	msDecrypt
≠≠( 1
=
≠≠2 3
new
≠≠4 7
MemoryStream
≠≠8 D
(
≠≠D E
File
≠≠E I
.
≠≠I J
ReadAllBytes
≠≠J V
(
≠≠V W
$str≠≠W Å
)≠≠Å Ç
)≠≠Ç É
)≠≠É Ñ
{
ÆÆ 
using
ØØ 
(
ØØ 
CryptoStream
ØØ +
	csDecrypt
ØØ, 5
=
ØØ6 7
new
ØØ8 ;
CryptoStream
ØØ< H
(
ØØH I
	msDecrypt
ØØI R
,
ØØR S
	decryptor
ØØT ]
,
ØØ] ^
CryptoStreamMode
ØØ_ o
.
ØØo p
Read
ØØp t
)
ØØt u
)
ØØu v
{
∞∞ 
using
±± !
(
±±" #
StreamReader
±±# /
	srDecrypt
±±0 9
=
±±: ;
new
±±< ?
StreamReader
±±@ L
(
±±L M
	csDecrypt
±±M V
)
±±V W
)
±±W X
{
≤≤ 
password
µµ  (
=
µµ) *
	srDecrypt
µµ+ 4
.
µµ4 5
	ReadToEnd
µµ5 >
(
µµ> ?
)
µµ? @
;
µµ@ A
}
∂∂ 
}
∑∑ 
}
∏∏ 
}
ππ 
}
∫∫ 
}
ªª 	
else
ºº 
{
ΩΩ 	
password
¿¿ 
=
¿¿ 
null
¿¿ 
;
¿¿ 
}
¡¡ 	
if
¬¬ 

(
¬¬  
PrivateReturnsTrue
¬¬ 
(
¬¬ 
)
¬¬  
)
¬¬  !
{
√√ 	
using
≈≈ 
(
≈≈ 
SqlConnection
≈≈  
dBConnection
≈≈! -
=
≈≈. /
new
≈≈0 3
SqlConnection
≈≈4 A
(
≈≈A B
$str
≈≈B x
+
≈≈y z
$str
≈≈{ 
+≈≈Ä Å
$str≈≈Ç é
+≈≈è ê
password≈≈ë ô
)≈≈ô ö
)≈≈ö õ
{
∆∆ 
try
«« 
{
»» 
dBConnection
……  
.
……  !
Open
……! %
(
……% &
)
……& '
;
……' (
}
   
catch
ÀÀ 
(
ÀÀ 
SqlException
ÀÀ #
	exceptSql
ÀÀ$ -
)
ÀÀ- .
{
ÃÃ 
IO
ÕÕ 
.
ÕÕ 
Logger
ÕÕ 
.
ÕÕ 
Log
ÕÕ !
(
ÕÕ! "
NLog
ÕÕ" &
.
ÕÕ& '
LogLevel
ÕÕ' /
.
ÕÕ/ 0
Warn
ÕÕ0 4
,
ÕÕ4 5
$str
ÕÕ6 V
,
ÕÕV W
	exceptSql
ÕÕX a
)
ÕÕa b
;
ÕÕb c
}
ŒŒ 
}
œœ 
}
–– 	
}
—— 
private
‘‘ 
void
‘‘ 
GoodB2G1
‘‘ 
(
‘‘ 
)
‘‘ 
{
’’ 
string
÷÷ 
password
÷÷ 
;
÷÷ 
if
◊◊ 

(
◊◊  
PrivateReturnsTrue
◊◊ 
(
◊◊ 
)
◊◊  
)
◊◊  !
{
ÿÿ 	
password
ŸŸ 
=
ŸŸ 
$str
ŸŸ 
;
ŸŸ 
try
€€ 
{
‹‹ 
password
›› 
=
›› 
Encoding
›› #
.
››# $
UTF8
››$ (
.
››( )
	GetString
››) 2
(
››2 3
File
››3 7
.
››7 8
ReadAllBytes
››8 D
(
››D E
$str
››E o
)
››o p
)
››p q
;
››q r
}
ﬁﬁ 
catch
ﬂﬂ 
(
ﬂﬂ 
IOException
ﬂﬂ 
exceptIO
ﬂﬂ '
)
ﬂﬂ' (
{
‡‡ 
IO
·· 
.
·· 
Logger
·· 
.
·· 
Log
·· 
(
·· 
NLog
·· "
.
··" #
LogLevel
··# +
.
··+ ,
Warn
··, 0
,
··0 1
$str
··2 K
,
··K L
exceptIO
··M U
)
··U V
;
··V W
}
‚‚ 
}
‰‰ 	
else
ÂÂ 
{
ÊÊ 	
password
ÈÈ 
=
ÈÈ 
null
ÈÈ 
;
ÈÈ 
}
ÍÍ 	
if
ÎÎ 

(
ÎÎ !
PrivateReturnsFalse
ÎÎ 
(
ÎÎ  
)
ÎÎ  !
)
ÎÎ! "
{
ÏÏ 	
IO
ÓÓ 
.
ÓÓ 
	WriteLine
ÓÓ 
(
ÓÓ 
$str
ÓÓ /
)
ÓÓ/ 0
;
ÓÓ0 1
}
ÔÔ 	
else
 
{
ÒÒ 	
{
ÛÛ 
using
ÙÙ 
(
ÙÙ &
AesCryptoServiceProvider
ÙÙ /
aesAlg
ÙÙ0 6
=
ÙÙ7 8
new
ÙÙ9 <&
AesCryptoServiceProvider
ÙÙ= U
(
ÙÙU V
)
ÙÙV W
)
ÙÙW X
{
ıı 
aesAlg
ˆˆ 
.
ˆˆ 
Key
ˆˆ 
=
ˆˆ  
Encoding
ˆˆ! )
.
ˆˆ) *
UTF8
ˆˆ* .
.
ˆˆ. /
GetBytes
ˆˆ/ 7
(
ˆˆ7 8
$str
ˆˆ8 J
)
ˆˆJ K
;
ˆˆK L
aesAlg
˜˜ 
.
˜˜ 
IV
˜˜ 
=
˜˜ 
new
˜˜  #
byte
˜˜$ (
[
˜˜( )
$num
˜˜) +
]
˜˜+ ,
;
˜˜, -
ICryptoTransform
˘˘ $
	decryptor
˘˘% .
=
˘˘/ 0
aesAlg
˘˘1 7
.
˘˘7 8
CreateDecryptor
˘˘8 G
(
˘˘G H
aesAlg
˘˘H N
.
˘˘N O
Key
˘˘O R
,
˘˘R S
aesAlg
˘˘T Z
.
˘˘Z [
IV
˘˘[ ]
)
˘˘] ^
;
˘˘^ _
using
˚˚ 
(
˚˚ 
MemoryStream
˚˚ '
	msDecrypt
˚˚( 1
=
˚˚2 3
new
˚˚4 7
MemoryStream
˚˚8 D
(
˚˚D E
File
˚˚E I
.
˚˚I J
ReadAllBytes
˚˚J V
(
˚˚V W
$str˚˚W Å
)˚˚Å Ç
)˚˚Ç É
)˚˚É Ñ
{
¸¸ 
using
˝˝ 
(
˝˝ 
CryptoStream
˝˝ +
	csDecrypt
˝˝, 5
=
˝˝6 7
new
˝˝8 ;
CryptoStream
˝˝< H
(
˝˝H I
	msDecrypt
˝˝I R
,
˝˝R S
	decryptor
˝˝T ]
,
˝˝] ^
CryptoStreamMode
˝˝_ o
.
˝˝o p
Read
˝˝p t
)
˝˝t u
)
˝˝u v
{
˛˛ 
using
ˇˇ !
(
ˇˇ" #
StreamReader
ˇˇ# /
	srDecrypt
ˇˇ0 9
=
ˇˇ: ;
new
ˇˇ< ?
StreamReader
ˇˇ@ L
(
ˇˇL M
	csDecrypt
ˇˇM V
)
ˇˇV W
)
ˇˇW X
{
ÄÄ 
password
ÉÉ  (
=
ÉÉ) *
	srDecrypt
ÉÉ+ 4
.
ÉÉ4 5
	ReadToEnd
ÉÉ5 >
(
ÉÉ> ?
)
ÉÉ? @
;
ÉÉ@ A
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 
}
áá 
}
àà 
using
ââ 
(
ââ 
SqlConnection
ââ  
dBConnection
ââ! -
=
ââ. /
new
ââ0 3
SqlConnection
ââ4 A
(
ââA B
$strââB Ñ
+ââÖ Ü
passwordââá è
)ââè ê
)ââê ë
{
ää 
try
ãã 
{
åå 
dBConnection
çç  
.
çç  !
Open
çç! %
(
çç% &
)
çç& '
;
çç' (
}
éé 
catch
èè 
(
èè 
SqlException
èè #
	exceptSql
èè$ -
)
èè- .
{
êê 
IO
ëë 
.
ëë 
Logger
ëë 
.
ëë 
Log
ëë !
(
ëë! "
NLog
ëë" &
.
ëë& '
LogLevel
ëë' /
.
ëë/ 0
Warn
ëë0 4
,
ëë4 5
$str
ëë6 V
,
ëëV W
	exceptSql
ëëX a
)
ëëa b
;
ëëb c
}
íí 
}
ìì 
}
îî 	
}
ïï 
private
òò 
void
òò 
GoodB2G2
òò 
(
òò 
)
òò 
{
ôô 
string
öö 
password
öö 
;
öö 
if
õõ 

(
õõ  
PrivateReturnsTrue
õõ 
(
õõ 
)
õõ  
)
õõ  !
{
úú 	
password
ùù 
=
ùù 
$str
ùù 
;
ùù 
try
üü 
{
†† 
password
°° 
=
°° 
Encoding
°° #
.
°°# $
UTF8
°°$ (
.
°°( )
	GetString
°°) 2
(
°°2 3
File
°°3 7
.
°°7 8
ReadAllBytes
°°8 D
(
°°D E
$str
°°E o
)
°°o p
)
°°p q
;
°°q r
}
¢¢ 
catch
££ 
(
££ 
IOException
££ 
exceptIO
££ '
)
££' (
{
§§ 
IO
•• 
.
•• 
Logger
•• 
.
•• 
Log
•• 
(
•• 
NLog
•• "
.
••" #
LogLevel
••# +
.
••+ ,
Warn
••, 0
,
••0 1
$str
••2 K
,
••K L
exceptIO
••M U
)
••U V
;
••V W
}
¶¶ 
}
®® 	
else
©© 
{
™™ 	
password
≠≠ 
=
≠≠ 
null
≠≠ 
;
≠≠ 
}
ÆÆ 	
if
ØØ 

(
ØØ  
PrivateReturnsTrue
ØØ 
(
ØØ 
)
ØØ  
)
ØØ  !
{
∞∞ 	
{
≤≤ 
using
≥≥ 
(
≥≥ &
AesCryptoServiceProvider
≥≥ /
aesAlg
≥≥0 6
=
≥≥7 8
new
≥≥9 <&
AesCryptoServiceProvider
≥≥= U
(
≥≥U V
)
≥≥V W
)
≥≥W X
{
¥¥ 
aesAlg
µµ 
.
µµ 
Key
µµ 
=
µµ  
Encoding
µµ! )
.
µµ) *
UTF8
µµ* .
.
µµ. /
GetBytes
µµ/ 7
(
µµ7 8
$str
µµ8 J
)
µµJ K
;
µµK L
aesAlg
∂∂ 
.
∂∂ 
IV
∂∂ 
=
∂∂ 
new
∂∂  #
byte
∂∂$ (
[
∂∂( )
$num
∂∂) +
]
∂∂+ ,
;
∂∂, -
ICryptoTransform
∏∏ $
	decryptor
∏∏% .
=
∏∏/ 0
aesAlg
∏∏1 7
.
∏∏7 8
CreateDecryptor
∏∏8 G
(
∏∏G H
aesAlg
∏∏H N
.
∏∏N O
Key
∏∏O R
,
∏∏R S
aesAlg
∏∏T Z
.
∏∏Z [
IV
∏∏[ ]
)
∏∏] ^
;
∏∏^ _
using
∫∫ 
(
∫∫ 
MemoryStream
∫∫ '
	msDecrypt
∫∫( 1
=
∫∫2 3
new
∫∫4 7
MemoryStream
∫∫8 D
(
∫∫D E
File
∫∫E I
.
∫∫I J
ReadAllBytes
∫∫J V
(
∫∫V W
$str∫∫W Å
)∫∫Å Ç
)∫∫Ç É
)∫∫É Ñ
{
ªª 
using
ºº 
(
ºº 
CryptoStream
ºº +
	csDecrypt
ºº, 5
=
ºº6 7
new
ºº8 ;
CryptoStream
ºº< H
(
ººH I
	msDecrypt
ººI R
,
ººR S
	decryptor
ººT ]
,
ºº] ^
CryptoStreamMode
ºº_ o
.
ººo p
Read
ººp t
)
ººt u
)
ººu v
{
ΩΩ 
using
ææ !
(
ææ" #
StreamReader
ææ# /
	srDecrypt
ææ0 9
=
ææ: ;
new
ææ< ?
StreamReader
ææ@ L
(
ææL M
	csDecrypt
ææM V
)
ææV W
)
ææW X
{
øø 
password
¬¬  (
=
¬¬) *
	srDecrypt
¬¬+ 4
.
¬¬4 5
	ReadToEnd
¬¬5 >
(
¬¬> ?
)
¬¬? @
;
¬¬@ A
}
√√ 
}
ƒƒ 
}
≈≈ 
}
∆∆ 
}
«« 
using
»» 
(
»» 
SqlConnection
»»  
dBConnection
»»! -
=
»». /
new
»»0 3
SqlConnection
»»4 A
(
»»A B
$str»»B Ñ
+»»Ö Ü
password»»á è
)»»è ê
)»»ê ë
{
…… 
try
   
{
ÀÀ 
dBConnection
ÃÃ  
.
ÃÃ  !
Open
ÃÃ! %
(
ÃÃ% &
)
ÃÃ& '
;
ÃÃ' (
}
ÕÕ 
catch
ŒŒ 
(
ŒŒ 
SqlException
ŒŒ #
	exceptSql
ŒŒ$ -
)
ŒŒ- .
{
œœ 
IO
–– 
.
–– 
Logger
–– 
.
–– 
Log
–– !
(
––! "
NLog
––" &
.
––& '
LogLevel
––' /
.
––/ 0
Warn
––0 4
,
––4 5
$str
––6 V
,
––V W
	exceptSql
––X a
)
––a b
;
––b c
}
—— 
}
““ 
}
”” 	
}
‘‘ 
public
÷÷ 

override
÷÷ 
void
÷÷ 
Good
÷÷ 
(
÷÷ 
)
÷÷ 
{
◊◊ 
GoodG2B1
ÿÿ 
(
ÿÿ 
)
ÿÿ 
;
ÿÿ 
GoodG2B2
ŸŸ 
(
ŸŸ 
)
ŸŸ 
;
ŸŸ 
GoodB2G1
⁄⁄ 
(
⁄⁄ 
)
⁄⁄ 
;
⁄⁄ 
GoodB2G2
€€ 
(
€€ 
)
€€ 
;
€€ 
}
‹‹ 
}ﬁﬁ 
}ﬂﬂ “¨
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_09.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_09 9
:: ;
AbstractTestCase< L
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
if"" 

("" 
IO"" 
.""  
STATIC_READONLY_TRUE"" #
)""# $
{## 	
password$$ 
=$$ 
$str$$ 
;$$ 
try&& 
{'' 
password(( 
=(( 
Encoding(( #
.((# $
UTF8(($ (
.((( )
	GetString(() 2
(((2 3
File((3 7
.((7 8
ReadAllBytes((8 D
(((D E
$str((E o
)((o p
)((p q
;((q r
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 K
,,,K L
exceptIO,,M U
),,U V
;,,V W
}-- 
}// 	
else00 
{11 	
password44 
=44 
null44 
;44 
}55 	
if66 

(66 
IO66 
.66  
STATIC_READONLY_TRUE66 #
)66# $
{77 	
using99 
(99 
SqlConnection99  
dBConnection99! -
=99. /
new990 3
SqlConnection994 A
(99A B
$str99B x
+99y z
$str99{ 
+
99Ä Å
$str
99Ç é
+
99è ê
password
99ë ô
)
99ô ö
)
99ö õ
{:: 
try;; 
{<< 
dBConnection==  
.==  !
Open==! %
(==% &
)==& '
;==' (
}>> 
catch?? 
(?? 
SqlException?? #
	exceptSql??$ -
)??- .
{@@ 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA !
(AA! "
NLogAA" &
.AA& '
LogLevelAA' /
.AA/ 0
WarnAA0 4
,AA4 5
$strAA6 V
,AAV W
	exceptSqlAAX a
)AAa b
;AAb c
}BB 
}CC 
}DD 	
}EE 
privateII 
voidII 
GoodG2B1II 
(II 
)II 
{JJ 
stringKK 
passwordKK 
;KK 
ifLL 

(LL 
IOLL 
.LL !
STATIC_READONLY_FALSELL $
)LL$ %
{MM 	
passwordPP 
=PP 
nullPP 
;PP 
}QQ 	
elseRR 
{SS 	
passwordTT 
=TT 
$strTT 
;TT 
tryVV 
{WW 
passwordXX 
=XX 
EncodingXX #
.XX# $
UTF8XX$ (
.XX( )
	GetStringXX) 2
(XX2 3
FileXX3 7
.XX7 8
ReadAllBytesXX8 D
(XXD E
$strXXE o
)XXo p
)XXp q
;XXq r
}YY 
catchZZ 
(ZZ 
IOExceptionZZ 
exceptIOZZ '
)ZZ' (
{[[ 
IO\\ 
.\\ 
Logger\\ 
.\\ 
Log\\ 
(\\ 
NLog\\ "
.\\" #
LogLevel\\# +
.\\+ ,
Warn\\, 0
,\\0 1
$str\\2 K
,\\K L
exceptIO\\M U
)\\U V
;\\V W
}]] 
{__ 
using`` 
(`` $
AesCryptoServiceProvider`` /
aesAlg``0 6
=``7 8
new``9 <$
AesCryptoServiceProvider``= U
(``U V
)``V W
)``W X
{aa 
aesAlgbb 
.bb 
Keybb 
=bb  
Encodingbb! )
.bb) *
UTF8bb* .
.bb. /
GetBytesbb/ 7
(bb7 8
$strbb8 J
)bbJ K
;bbK L
aesAlgcc 
.cc 
IVcc 
=cc 
newcc  #
bytecc$ (
[cc( )
$numcc) +
]cc+ ,
;cc, -
ICryptoTransformee $
	decryptoree% .
=ee/ 0
aesAlgee1 7
.ee7 8
CreateDecryptoree8 G
(eeG H
aesAlgeeH N
.eeN O
KeyeeO R
,eeR S
aesAlgeeT Z
.eeZ [
IVee[ ]
)ee] ^
;ee^ _
usinggg 
(gg 
MemoryStreamgg '
	msDecryptgg( 1
=gg2 3
newgg4 7
MemoryStreamgg8 D
(ggD E
FileggE I
.ggI J
ReadAllBytesggJ V
(ggV W
$str	ggW Å
)
ggÅ Ç
)
ggÇ É
)
ggÉ Ñ
{hh 
usingii 
(ii 
CryptoStreamii +
	csDecryptii, 5
=ii6 7
newii8 ;
CryptoStreamii< H
(iiH I
	msDecryptiiI R
,iiR S
	decryptoriiT ]
,ii] ^
CryptoStreamModeii_ o
.iio p
Readiip t
)iit u
)iiu v
{jj 
usingkk !
(kk" #
StreamReaderkk# /
	srDecryptkk0 9
=kk: ;
newkk< ?
StreamReaderkk@ L
(kkL M
	csDecryptkkM V
)kkV W
)kkW X
{ll 
passwordoo  (
=oo) *
	srDecryptoo+ 4
.oo4 5
	ReadToEndoo5 >
(oo> ?
)oo? @
;oo@ A
}pp 
}qq 
}rr 
}ss 
}tt 
}uu 	
ifvv 

(vv 
IOvv 
.vv  
STATIC_READONLY_TRUEvv #
)vv# $
{ww 	
usingyy 
(yy 
SqlConnectionyy  
dBConnectionyy! -
=yy. /
newyy0 3
SqlConnectionyy4 A
(yyA B
$stryyB x
+yyy z
$stryy{ 
+
yyÄ Å
$str
yyÇ é
+
yyè ê
password
yyë ô
)
yyô ö
)
yyö õ
{zz 
try{{ 
{|| 
dBConnection}}  
.}}  !
Open}}! %
(}}% &
)}}& '
;}}' (
}~~ 
catch 
( 
SqlException #
	exceptSql$ -
)- .
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ 
.
ÅÅ 
Log
ÅÅ !
(
ÅÅ! "
NLog
ÅÅ" &
.
ÅÅ& '
LogLevel
ÅÅ' /
.
ÅÅ/ 0
Warn
ÅÅ0 4
,
ÅÅ4 5
$str
ÅÅ6 V
,
ÅÅV W
	exceptSql
ÅÅX a
)
ÅÅa b
;
ÅÅb c
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
private
àà 
void
àà 
GoodG2B2
àà 
(
àà 
)
àà 
{
ââ 
string
ää 
password
ää 
;
ää 
if
ãã 

(
ãã 
IO
ãã 
.
ãã "
STATIC_READONLY_TRUE
ãã #
)
ãã# $
{
åå 	
password
çç 
=
çç 
$str
çç 
;
çç 
try
èè 
{
êê 
password
ëë 
=
ëë 
Encoding
ëë #
.
ëë# $
UTF8
ëë$ (
.
ëë( )
	GetString
ëë) 2
(
ëë2 3
File
ëë3 7
.
ëë7 8
ReadAllBytes
ëë8 D
(
ëëD E
$str
ëëE o
)
ëëo p
)
ëëp q
;
ëëq r
}
íí 
catch
ìì 
(
ìì 
IOException
ìì 
exceptIO
ìì '
)
ìì' (
{
îî 
IO
ïï 
.
ïï 
Logger
ïï 
.
ïï 
Log
ïï 
(
ïï 
NLog
ïï "
.
ïï" #
LogLevel
ïï# +
.
ïï+ ,
Warn
ïï, 0
,
ïï0 1
$str
ïï2 K
,
ïïK L
exceptIO
ïïM U
)
ïïU V
;
ïïV W
}
ññ 
{
òò 
using
ôô 
(
ôô &
AesCryptoServiceProvider
ôô /
aesAlg
ôô0 6
=
ôô7 8
new
ôô9 <&
AesCryptoServiceProvider
ôô= U
(
ôôU V
)
ôôV W
)
ôôW X
{
öö 
aesAlg
õõ 
.
õõ 
Key
õõ 
=
õõ  
Encoding
õõ! )
.
õõ) *
UTF8
õõ* .
.
õõ. /
GetBytes
õõ/ 7
(
õõ7 8
$str
õõ8 J
)
õõJ K
;
õõK L
aesAlg
úú 
.
úú 
IV
úú 
=
úú 
new
úú  #
byte
úú$ (
[
úú( )
$num
úú) +
]
úú+ ,
;
úú, -
ICryptoTransform
ûû $
	decryptor
ûû% .
=
ûû/ 0
aesAlg
ûû1 7
.
ûû7 8
CreateDecryptor
ûû8 G
(
ûûG H
aesAlg
ûûH N
.
ûûN O
Key
ûûO R
,
ûûR S
aesAlg
ûûT Z
.
ûûZ [
IV
ûû[ ]
)
ûû] ^
;
ûû^ _
using
†† 
(
†† 
MemoryStream
†† '
	msDecrypt
††( 1
=
††2 3
new
††4 7
MemoryStream
††8 D
(
††D E
File
††E I
.
††I J
ReadAllBytes
††J V
(
††V W
$str††W Å
)††Å Ç
)††Ç É
)††É Ñ
{
°° 
using
¢¢ 
(
¢¢ 
CryptoStream
¢¢ +
	csDecrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
CryptoStream
¢¢< H
(
¢¢H I
	msDecrypt
¢¢I R
,
¢¢R S
	decryptor
¢¢T ]
,
¢¢] ^
CryptoStreamMode
¢¢_ o
.
¢¢o p
Read
¢¢p t
)
¢¢t u
)
¢¢u v
{
££ 
using
§§ !
(
§§" #
StreamReader
§§# /
	srDecrypt
§§0 9
=
§§: ;
new
§§< ?
StreamReader
§§@ L
(
§§L M
	csDecrypt
§§M V
)
§§V W
)
§§W X
{
•• 
password
®®  (
=
®®) *
	srDecrypt
®®+ 4
.
®®4 5
	ReadToEnd
®®5 >
(
®®> ?
)
®®? @
;
®®@ A
}
©© 
}
™™ 
}
´´ 
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
else
ØØ 
{
∞∞ 	
password
≥≥ 
=
≥≥ 
null
≥≥ 
;
≥≥ 
}
¥¥ 	
if
µµ 

(
µµ 
IO
µµ 
.
µµ "
STATIC_READONLY_TRUE
µµ #
)
µµ# $
{
∂∂ 	
using
∏∏ 
(
∏∏ 
SqlConnection
∏∏  
dBConnection
∏∏! -
=
∏∏. /
new
∏∏0 3
SqlConnection
∏∏4 A
(
∏∏A B
$str
∏∏B x
+
∏∏y z
$str
∏∏{ 
+∏∏Ä Å
$str∏∏Ç é
+∏∏è ê
password∏∏ë ô
)∏∏ô ö
)∏∏ö õ
{
ππ 
try
∫∫ 
{
ªª 
dBConnection
ºº  
.
ºº  !
Open
ºº! %
(
ºº% &
)
ºº& '
;
ºº' (
}
ΩΩ 
catch
ææ 
(
ææ 
SqlException
ææ #
	exceptSql
ææ$ -
)
ææ- .
{
øø 
IO
¿¿ 
.
¿¿ 
Logger
¿¿ 
.
¿¿ 
Log
¿¿ !
(
¿¿! "
NLog
¿¿" &
.
¿¿& '
LogLevel
¿¿' /
.
¿¿/ 0
Warn
¿¿0 4
,
¿¿4 5
$str
¿¿6 V
,
¿¿V W
	exceptSql
¿¿X a
)
¿¿a b
;
¿¿b c
}
¡¡ 
}
¬¬ 
}
√√ 	
}
ƒƒ 
private
«« 
void
«« 
GoodB2G1
«« 
(
«« 
)
«« 
{
»» 
string
…… 
password
…… 
;
…… 
if
   

(
   
IO
   
.
   "
STATIC_READONLY_TRUE
   #
)
  # $
{
ÀÀ 	
password
ÃÃ 
=
ÃÃ 
$str
ÃÃ 
;
ÃÃ 
try
ŒŒ 
{
œœ 
password
–– 
=
–– 
Encoding
–– #
.
––# $
UTF8
––$ (
.
––( )
	GetString
––) 2
(
––2 3
File
––3 7
.
––7 8
ReadAllBytes
––8 D
(
––D E
$str
––E o
)
––o p
)
––p q
;
––q r
}
—— 
catch
““ 
(
““ 
IOException
““ 
exceptIO
““ '
)
““' (
{
”” 
IO
‘‘ 
.
‘‘ 
Logger
‘‘ 
.
‘‘ 
Log
‘‘ 
(
‘‘ 
NLog
‘‘ "
.
‘‘" #
LogLevel
‘‘# +
.
‘‘+ ,
Warn
‘‘, 0
,
‘‘0 1
$str
‘‘2 K
,
‘‘K L
exceptIO
‘‘M U
)
‘‘U V
;
‘‘V W
}
’’ 
}
◊◊ 	
else
ÿÿ 
{
ŸŸ 	
password
‹‹ 
=
‹‹ 
null
‹‹ 
;
‹‹ 
}
›› 	
if
ﬁﬁ 

(
ﬁﬁ 
IO
ﬁﬁ 
.
ﬁﬁ #
STATIC_READONLY_FALSE
ﬁﬁ $
)
ﬁﬁ$ %
{
ﬂﬂ 	
IO
·· 
.
·· 
	WriteLine
·· 
(
·· 
$str
·· /
)
··/ 0
;
··0 1
}
‚‚ 	
else
„„ 
{
‰‰ 	
{
ÊÊ 
using
ÁÁ 
(
ÁÁ &
AesCryptoServiceProvider
ÁÁ /
aesAlg
ÁÁ0 6
=
ÁÁ7 8
new
ÁÁ9 <&
AesCryptoServiceProvider
ÁÁ= U
(
ÁÁU V
)
ÁÁV W
)
ÁÁW X
{
ËË 
aesAlg
ÈÈ 
.
ÈÈ 
Key
ÈÈ 
=
ÈÈ  
Encoding
ÈÈ! )
.
ÈÈ) *
UTF8
ÈÈ* .
.
ÈÈ. /
GetBytes
ÈÈ/ 7
(
ÈÈ7 8
$str
ÈÈ8 J
)
ÈÈJ K
;
ÈÈK L
aesAlg
ÍÍ 
.
ÍÍ 
IV
ÍÍ 
=
ÍÍ 
new
ÍÍ  #
byte
ÍÍ$ (
[
ÍÍ( )
$num
ÍÍ) +
]
ÍÍ+ ,
;
ÍÍ, -
ICryptoTransform
ÏÏ $
	decryptor
ÏÏ% .
=
ÏÏ/ 0
aesAlg
ÏÏ1 7
.
ÏÏ7 8
CreateDecryptor
ÏÏ8 G
(
ÏÏG H
aesAlg
ÏÏH N
.
ÏÏN O
Key
ÏÏO R
,
ÏÏR S
aesAlg
ÏÏT Z
.
ÏÏZ [
IV
ÏÏ[ ]
)
ÏÏ] ^
;
ÏÏ^ _
using
ÓÓ 
(
ÓÓ 
MemoryStream
ÓÓ '
	msDecrypt
ÓÓ( 1
=
ÓÓ2 3
new
ÓÓ4 7
MemoryStream
ÓÓ8 D
(
ÓÓD E
File
ÓÓE I
.
ÓÓI J
ReadAllBytes
ÓÓJ V
(
ÓÓV W
$strÓÓW Å
)ÓÓÅ Ç
)ÓÓÇ É
)ÓÓÉ Ñ
{
ÔÔ 
using
 
(
 
CryptoStream
 +
	csDecrypt
, 5
=
6 7
new
8 ;
CryptoStream
< H
(
H I
	msDecrypt
I R
,
R S
	decryptor
T ]
,
] ^
CryptoStreamMode
_ o
.
o p
Read
p t
)
t u
)
u v
{
ÒÒ 
using
ÚÚ !
(
ÚÚ" #
StreamReader
ÚÚ# /
	srDecrypt
ÚÚ0 9
=
ÚÚ: ;
new
ÚÚ< ?
StreamReader
ÚÚ@ L
(
ÚÚL M
	csDecrypt
ÚÚM V
)
ÚÚV W
)
ÚÚW X
{
ÛÛ 
password
ˆˆ  (
=
ˆˆ) *
	srDecrypt
ˆˆ+ 4
.
ˆˆ4 5
	ReadToEnd
ˆˆ5 >
(
ˆˆ> ?
)
ˆˆ? @
;
ˆˆ@ A
}
˜˜ 
}
¯¯ 
}
˘˘ 
}
˙˙ 
}
˚˚ 
using
¸¸ 
(
¸¸ 
SqlConnection
¸¸  
dBConnection
¸¸! -
=
¸¸. /
new
¸¸0 3
SqlConnection
¸¸4 A
(
¸¸A B
$str¸¸B Ñ
+¸¸Ö Ü
password¸¸á è
)¸¸è ê
)¸¸ê ë
{
˝˝ 
try
˛˛ 
{
ˇˇ 
dBConnection
ÄÄ  
.
ÄÄ  !
Open
ÄÄ! %
(
ÄÄ% &
)
ÄÄ& '
;
ÄÄ' (
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
SqlException
ÇÇ #
	exceptSql
ÇÇ$ -
)
ÇÇ- .
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ 
.
ÑÑ 
Log
ÑÑ !
(
ÑÑ! "
NLog
ÑÑ" &
.
ÑÑ& '
LogLevel
ÑÑ' /
.
ÑÑ/ 0
Warn
ÑÑ0 4
,
ÑÑ4 5
$str
ÑÑ6 V
,
ÑÑV W
	exceptSql
ÑÑX a
)
ÑÑa b
;
ÑÑb c
}
ÖÖ 
}
ÜÜ 
}
áá 	
}
àà 
private
ãã 
void
ãã 
GoodB2G2
ãã 
(
ãã 
)
ãã 
{
åå 
string
çç 
password
çç 
;
çç 
if
éé 

(
éé 
IO
éé 
.
éé "
STATIC_READONLY_TRUE
éé #
)
éé# $
{
èè 	
password
êê 
=
êê 
$str
êê 
;
êê 
try
íí 
{
ìì 
password
îî 
=
îî 
Encoding
îî #
.
îî# $
UTF8
îî$ (
.
îî( )
	GetString
îî) 2
(
îî2 3
File
îî3 7
.
îî7 8
ReadAllBytes
îî8 D
(
îîD E
$str
îîE o
)
îîo p
)
îîp q
;
îîq r
}
ïï 
catch
ññ 
(
ññ 
IOException
ññ 
exceptIO
ññ '
)
ññ' (
{
óó 
IO
òò 
.
òò 
Logger
òò 
.
òò 
Log
òò 
(
òò 
NLog
òò "
.
òò" #
LogLevel
òò# +
.
òò+ ,
Warn
òò, 0
,
òò0 1
$str
òò2 K
,
òòK L
exceptIO
òòM U
)
òòU V
;
òòV W
}
ôô 
}
õõ 	
else
úú 
{
ùù 	
password
†† 
=
†† 
null
†† 
;
†† 
}
°° 	
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ "
STATIC_READONLY_TRUE
¢¢ #
)
¢¢# $
{
££ 	
{
•• 
using
¶¶ 
(
¶¶ &
AesCryptoServiceProvider
¶¶ /
aesAlg
¶¶0 6
=
¶¶7 8
new
¶¶9 <&
AesCryptoServiceProvider
¶¶= U
(
¶¶U V
)
¶¶V W
)
¶¶W X
{
ßß 
aesAlg
®® 
.
®® 
Key
®® 
=
®®  
Encoding
®®! )
.
®®) *
UTF8
®®* .
.
®®. /
GetBytes
®®/ 7
(
®®7 8
$str
®®8 J
)
®®J K
;
®®K L
aesAlg
©© 
.
©© 
IV
©© 
=
©© 
new
©©  #
byte
©©$ (
[
©©( )
$num
©©) +
]
©©+ ,
;
©©, -
ICryptoTransform
´´ $
	decryptor
´´% .
=
´´/ 0
aesAlg
´´1 7
.
´´7 8
CreateDecryptor
´´8 G
(
´´G H
aesAlg
´´H N
.
´´N O
Key
´´O R
,
´´R S
aesAlg
´´T Z
.
´´Z [
IV
´´[ ]
)
´´] ^
;
´´^ _
using
≠≠ 
(
≠≠ 
MemoryStream
≠≠ '
	msDecrypt
≠≠( 1
=
≠≠2 3
new
≠≠4 7
MemoryStream
≠≠8 D
(
≠≠D E
File
≠≠E I
.
≠≠I J
ReadAllBytes
≠≠J V
(
≠≠V W
$str≠≠W Å
)≠≠Å Ç
)≠≠Ç É
)≠≠É Ñ
{
ÆÆ 
using
ØØ 
(
ØØ 
CryptoStream
ØØ +
	csDecrypt
ØØ, 5
=
ØØ6 7
new
ØØ8 ;
CryptoStream
ØØ< H
(
ØØH I
	msDecrypt
ØØI R
,
ØØR S
	decryptor
ØØT ]
,
ØØ] ^
CryptoStreamMode
ØØ_ o
.
ØØo p
Read
ØØp t
)
ØØt u
)
ØØu v
{
∞∞ 
using
±± !
(
±±" #
StreamReader
±±# /
	srDecrypt
±±0 9
=
±±: ;
new
±±< ?
StreamReader
±±@ L
(
±±L M
	csDecrypt
±±M V
)
±±V W
)
±±W X
{
≤≤ 
password
µµ  (
=
µµ) *
	srDecrypt
µµ+ 4
.
µµ4 5
	ReadToEnd
µµ5 >
(
µµ> ?
)
µµ? @
;
µµ@ A
}
∂∂ 
}
∑∑ 
}
∏∏ 
}
ππ 
}
∫∫ 
using
ªª 
(
ªª 
SqlConnection
ªª  
dBConnection
ªª! -
=
ªª. /
new
ªª0 3
SqlConnection
ªª4 A
(
ªªA B
$strªªB Ñ
+ªªÖ Ü
passwordªªá è
)ªªè ê
)ªªê ë
{
ºº 
try
ΩΩ 
{
ææ 
dBConnection
øø  
.
øø  !
Open
øø! %
(
øø% &
)
øø& '
;
øø' (
}
¿¿ 
catch
¡¡ 
(
¡¡ 
SqlException
¡¡ #
	exceptSql
¡¡$ -
)
¡¡- .
{
¬¬ 
IO
√√ 
.
√√ 
Logger
√√ 
.
√√ 
Log
√√ !
(
√√! "
NLog
√√" &
.
√√& '
LogLevel
√√' /
.
√√/ 0
Warn
√√0 4
,
√√4 5
$str
√√6 V
,
√√V W
	exceptSql
√√X a
)
√√a b
;
√√b c
}
ƒƒ 
}
≈≈ 
}
∆∆ 	
}
«« 
public
…… 

override
…… 
void
…… 
Good
…… 
(
…… 
)
…… 
{
   
GoodG2B1
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodG2B2
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G1
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G2
ŒŒ 
(
ŒŒ 
)
ŒŒ 
;
ŒŒ 
}
œœ 
}—— 
}““ Ó´
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_10.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_10 9
:: ;
AbstractTestCase< L
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
if"" 

("" 
IO"" 
."" 

staticTrue"" 
)"" 
{## 	
password$$ 
=$$ 
$str$$ 
;$$ 
try&& 
{'' 
password(( 
=(( 
Encoding(( #
.((# $
UTF8(($ (
.((( )
	GetString(() 2
(((2 3
File((3 7
.((7 8
ReadAllBytes((8 D
(((D E
$str((E o
)((o p
)((p q
;((q r
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 K
,,,K L
exceptIO,,M U
),,U V
;,,V W
}-- 
}// 	
else00 
{11 	
password44 
=44 
null44 
;44 
}55 	
if66 

(66 
IO66 
.66 

staticTrue66 
)66 
{77 	
using99 
(99 
SqlConnection99  
dBConnection99! -
=99. /
new990 3
SqlConnection994 A
(99A B
$str99B x
+99y z
$str99{ 
+
99Ä Å
$str
99Ç é
+
99è ê
password
99ë ô
)
99ô ö
)
99ö õ
{:: 
try;; 
{<< 
dBConnection==  
.==  !
Open==! %
(==% &
)==& '
;==' (
}>> 
catch?? 
(?? 
SqlException?? #
	exceptSql??$ -
)??- .
{@@ 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA !
(AA! "
NLogAA" &
.AA& '
LogLevelAA' /
.AA/ 0
WarnAA0 4
,AA4 5
$strAA6 V
,AAV W
	exceptSqlAAX a
)AAa b
;AAb c
}BB 
}CC 
}DD 	
}EE 
privateII 
voidII 
GoodG2B1II 
(II 
)II 
{JJ 
stringKK 
passwordKK 
;KK 
ifLL 

(LL 
IOLL 
.LL 
staticFalseLL 
)LL 
{MM 	
passwordPP 
=PP 
nullPP 
;PP 
}QQ 	
elseRR 
{SS 	
passwordTT 
=TT 
$strTT 
;TT 
tryVV 
{WW 
passwordXX 
=XX 
EncodingXX #
.XX# $
UTF8XX$ (
.XX( )
	GetStringXX) 2
(XX2 3
FileXX3 7
.XX7 8
ReadAllBytesXX8 D
(XXD E
$strXXE o
)XXo p
)XXp q
;XXq r
}YY 
catchZZ 
(ZZ 
IOExceptionZZ 
exceptIOZZ '
)ZZ' (
{[[ 
IO\\ 
.\\ 
Logger\\ 
.\\ 
Log\\ 
(\\ 
NLog\\ "
.\\" #
LogLevel\\# +
.\\+ ,
Warn\\, 0
,\\0 1
$str\\2 K
,\\K L
exceptIO\\M U
)\\U V
;\\V W
}]] 
{__ 
using`` 
(`` $
AesCryptoServiceProvider`` /
aesAlg``0 6
=``7 8
new``9 <$
AesCryptoServiceProvider``= U
(``U V
)``V W
)``W X
{aa 
aesAlgbb 
.bb 
Keybb 
=bb  
Encodingbb! )
.bb) *
UTF8bb* .
.bb. /
GetBytesbb/ 7
(bb7 8
$strbb8 J
)bbJ K
;bbK L
aesAlgcc 
.cc 
IVcc 
=cc 
newcc  #
bytecc$ (
[cc( )
$numcc) +
]cc+ ,
;cc, -
ICryptoTransformee $
	decryptoree% .
=ee/ 0
aesAlgee1 7
.ee7 8
CreateDecryptoree8 G
(eeG H
aesAlgeeH N
.eeN O
KeyeeO R
,eeR S
aesAlgeeT Z
.eeZ [
IVee[ ]
)ee] ^
;ee^ _
usinggg 
(gg 
MemoryStreamgg '
	msDecryptgg( 1
=gg2 3
newgg4 7
MemoryStreamgg8 D
(ggD E
FileggE I
.ggI J
ReadAllBytesggJ V
(ggV W
$str	ggW Å
)
ggÅ Ç
)
ggÇ É
)
ggÉ Ñ
{hh 
usingii 
(ii 
CryptoStreamii +
	csDecryptii, 5
=ii6 7
newii8 ;
CryptoStreamii< H
(iiH I
	msDecryptiiI R
,iiR S
	decryptoriiT ]
,ii] ^
CryptoStreamModeii_ o
.iio p
Readiip t
)iit u
)iiu v
{jj 
usingkk !
(kk" #
StreamReaderkk# /
	srDecryptkk0 9
=kk: ;
newkk< ?
StreamReaderkk@ L
(kkL M
	csDecryptkkM V
)kkV W
)kkW X
{ll 
passwordoo  (
=oo) *
	srDecryptoo+ 4
.oo4 5
	ReadToEndoo5 >
(oo> ?
)oo? @
;oo@ A
}pp 
}qq 
}rr 
}ss 
}tt 
}uu 	
ifvv 

(vv 
IOvv 
.vv 

staticTruevv 
)vv 
{ww 	
usingyy 
(yy 
SqlConnectionyy  
dBConnectionyy! -
=yy. /
newyy0 3
SqlConnectionyy4 A
(yyA B
$stryyB x
+yyy z
$stryy{ 
+
yyÄ Å
$str
yyÇ é
+
yyè ê
password
yyë ô
)
yyô ö
)
yyö õ
{zz 
try{{ 
{|| 
dBConnection}}  
.}}  !
Open}}! %
(}}% &
)}}& '
;}}' (
}~~ 
catch 
( 
SqlException #
	exceptSql$ -
)- .
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ 
.
ÅÅ 
Log
ÅÅ !
(
ÅÅ! "
NLog
ÅÅ" &
.
ÅÅ& '
LogLevel
ÅÅ' /
.
ÅÅ/ 0
Warn
ÅÅ0 4
,
ÅÅ4 5
$str
ÅÅ6 V
,
ÅÅV W
	exceptSql
ÅÅX a
)
ÅÅa b
;
ÅÅb c
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
private
àà 
void
àà 
GoodG2B2
àà 
(
àà 
)
àà 
{
ââ 
string
ää 
password
ää 
;
ää 
if
ãã 

(
ãã 
IO
ãã 
.
ãã 

staticTrue
ãã 
)
ãã 
{
åå 	
password
çç 
=
çç 
$str
çç 
;
çç 
try
èè 
{
êê 
password
ëë 
=
ëë 
Encoding
ëë #
.
ëë# $
UTF8
ëë$ (
.
ëë( )
	GetString
ëë) 2
(
ëë2 3
File
ëë3 7
.
ëë7 8
ReadAllBytes
ëë8 D
(
ëëD E
$str
ëëE o
)
ëëo p
)
ëëp q
;
ëëq r
}
íí 
catch
ìì 
(
ìì 
IOException
ìì 
exceptIO
ìì '
)
ìì' (
{
îî 
IO
ïï 
.
ïï 
Logger
ïï 
.
ïï 
Log
ïï 
(
ïï 
NLog
ïï "
.
ïï" #
LogLevel
ïï# +
.
ïï+ ,
Warn
ïï, 0
,
ïï0 1
$str
ïï2 K
,
ïïK L
exceptIO
ïïM U
)
ïïU V
;
ïïV W
}
ññ 
{
òò 
using
ôô 
(
ôô &
AesCryptoServiceProvider
ôô /
aesAlg
ôô0 6
=
ôô7 8
new
ôô9 <&
AesCryptoServiceProvider
ôô= U
(
ôôU V
)
ôôV W
)
ôôW X
{
öö 
aesAlg
õõ 
.
õõ 
Key
õõ 
=
õõ  
Encoding
õõ! )
.
õõ) *
UTF8
õõ* .
.
õõ. /
GetBytes
õõ/ 7
(
õõ7 8
$str
õõ8 J
)
õõJ K
;
õõK L
aesAlg
úú 
.
úú 
IV
úú 
=
úú 
new
úú  #
byte
úú$ (
[
úú( )
$num
úú) +
]
úú+ ,
;
úú, -
ICryptoTransform
ûû $
	decryptor
ûû% .
=
ûû/ 0
aesAlg
ûû1 7
.
ûû7 8
CreateDecryptor
ûû8 G
(
ûûG H
aesAlg
ûûH N
.
ûûN O
Key
ûûO R
,
ûûR S
aesAlg
ûûT Z
.
ûûZ [
IV
ûû[ ]
)
ûû] ^
;
ûû^ _
using
†† 
(
†† 
MemoryStream
†† '
	msDecrypt
††( 1
=
††2 3
new
††4 7
MemoryStream
††8 D
(
††D E
File
††E I
.
††I J
ReadAllBytes
††J V
(
††V W
$str††W Å
)††Å Ç
)††Ç É
)††É Ñ
{
°° 
using
¢¢ 
(
¢¢ 
CryptoStream
¢¢ +
	csDecrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
CryptoStream
¢¢< H
(
¢¢H I
	msDecrypt
¢¢I R
,
¢¢R S
	decryptor
¢¢T ]
,
¢¢] ^
CryptoStreamMode
¢¢_ o
.
¢¢o p
Read
¢¢p t
)
¢¢t u
)
¢¢u v
{
££ 
using
§§ !
(
§§" #
StreamReader
§§# /
	srDecrypt
§§0 9
=
§§: ;
new
§§< ?
StreamReader
§§@ L
(
§§L M
	csDecrypt
§§M V
)
§§V W
)
§§W X
{
•• 
password
®®  (
=
®®) *
	srDecrypt
®®+ 4
.
®®4 5
	ReadToEnd
®®5 >
(
®®> ?
)
®®? @
;
®®@ A
}
©© 
}
™™ 
}
´´ 
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
else
ØØ 
{
∞∞ 	
password
≥≥ 
=
≥≥ 
null
≥≥ 
;
≥≥ 
}
¥¥ 	
if
µµ 

(
µµ 
IO
µµ 
.
µµ 

staticTrue
µµ 
)
µµ 
{
∂∂ 	
using
∏∏ 
(
∏∏ 
SqlConnection
∏∏  
dBConnection
∏∏! -
=
∏∏. /
new
∏∏0 3
SqlConnection
∏∏4 A
(
∏∏A B
$str
∏∏B x
+
∏∏y z
$str
∏∏{ 
+∏∏Ä Å
$str∏∏Ç é
+∏∏è ê
password∏∏ë ô
)∏∏ô ö
)∏∏ö õ
{
ππ 
try
∫∫ 
{
ªª 
dBConnection
ºº  
.
ºº  !
Open
ºº! %
(
ºº% &
)
ºº& '
;
ºº' (
}
ΩΩ 
catch
ææ 
(
ææ 
SqlException
ææ #
	exceptSql
ææ$ -
)
ææ- .
{
øø 
IO
¿¿ 
.
¿¿ 
Logger
¿¿ 
.
¿¿ 
Log
¿¿ !
(
¿¿! "
NLog
¿¿" &
.
¿¿& '
LogLevel
¿¿' /
.
¿¿/ 0
Warn
¿¿0 4
,
¿¿4 5
$str
¿¿6 V
,
¿¿V W
	exceptSql
¿¿X a
)
¿¿a b
;
¿¿b c
}
¡¡ 
}
¬¬ 
}
√√ 	
}
ƒƒ 
private
«« 
void
«« 
GoodB2G1
«« 
(
«« 
)
«« 
{
»» 
string
…… 
password
…… 
;
…… 
if
   

(
   
IO
   
.
   

staticTrue
   
)
   
{
ÀÀ 	
password
ÃÃ 
=
ÃÃ 
$str
ÃÃ 
;
ÃÃ 
try
ŒŒ 
{
œœ 
password
–– 
=
–– 
Encoding
–– #
.
––# $
UTF8
––$ (
.
––( )
	GetString
––) 2
(
––2 3
File
––3 7
.
––7 8
ReadAllBytes
––8 D
(
––D E
$str
––E o
)
––o p
)
––p q
;
––q r
}
—— 
catch
““ 
(
““ 
IOException
““ 
exceptIO
““ '
)
““' (
{
”” 
IO
‘‘ 
.
‘‘ 
Logger
‘‘ 
.
‘‘ 
Log
‘‘ 
(
‘‘ 
NLog
‘‘ "
.
‘‘" #
LogLevel
‘‘# +
.
‘‘+ ,
Warn
‘‘, 0
,
‘‘0 1
$str
‘‘2 K
,
‘‘K L
exceptIO
‘‘M U
)
‘‘U V
;
‘‘V W
}
’’ 
}
◊◊ 	
else
ÿÿ 
{
ŸŸ 	
password
‹‹ 
=
‹‹ 
null
‹‹ 
;
‹‹ 
}
›› 	
if
ﬁﬁ 

(
ﬁﬁ 
IO
ﬁﬁ 
.
ﬁﬁ 
staticFalse
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 	
IO
·· 
.
·· 
	WriteLine
·· 
(
·· 
$str
·· /
)
··/ 0
;
··0 1
}
‚‚ 	
else
„„ 
{
‰‰ 	
{
ÊÊ 
using
ÁÁ 
(
ÁÁ &
AesCryptoServiceProvider
ÁÁ /
aesAlg
ÁÁ0 6
=
ÁÁ7 8
new
ÁÁ9 <&
AesCryptoServiceProvider
ÁÁ= U
(
ÁÁU V
)
ÁÁV W
)
ÁÁW X
{
ËË 
aesAlg
ÈÈ 
.
ÈÈ 
Key
ÈÈ 
=
ÈÈ  
Encoding
ÈÈ! )
.
ÈÈ) *
UTF8
ÈÈ* .
.
ÈÈ. /
GetBytes
ÈÈ/ 7
(
ÈÈ7 8
$str
ÈÈ8 J
)
ÈÈJ K
;
ÈÈK L
aesAlg
ÍÍ 
.
ÍÍ 
IV
ÍÍ 
=
ÍÍ 
new
ÍÍ  #
byte
ÍÍ$ (
[
ÍÍ( )
$num
ÍÍ) +
]
ÍÍ+ ,
;
ÍÍ, -
ICryptoTransform
ÏÏ $
	decryptor
ÏÏ% .
=
ÏÏ/ 0
aesAlg
ÏÏ1 7
.
ÏÏ7 8
CreateDecryptor
ÏÏ8 G
(
ÏÏG H
aesAlg
ÏÏH N
.
ÏÏN O
Key
ÏÏO R
,
ÏÏR S
aesAlg
ÏÏT Z
.
ÏÏZ [
IV
ÏÏ[ ]
)
ÏÏ] ^
;
ÏÏ^ _
using
ÓÓ 
(
ÓÓ 
MemoryStream
ÓÓ '
	msDecrypt
ÓÓ( 1
=
ÓÓ2 3
new
ÓÓ4 7
MemoryStream
ÓÓ8 D
(
ÓÓD E
File
ÓÓE I
.
ÓÓI J
ReadAllBytes
ÓÓJ V
(
ÓÓV W
$strÓÓW Å
)ÓÓÅ Ç
)ÓÓÇ É
)ÓÓÉ Ñ
{
ÔÔ 
using
 
(
 
CryptoStream
 +
	csDecrypt
, 5
=
6 7
new
8 ;
CryptoStream
< H
(
H I
	msDecrypt
I R
,
R S
	decryptor
T ]
,
] ^
CryptoStreamMode
_ o
.
o p
Read
p t
)
t u
)
u v
{
ÒÒ 
using
ÚÚ !
(
ÚÚ" #
StreamReader
ÚÚ# /
	srDecrypt
ÚÚ0 9
=
ÚÚ: ;
new
ÚÚ< ?
StreamReader
ÚÚ@ L
(
ÚÚL M
	csDecrypt
ÚÚM V
)
ÚÚV W
)
ÚÚW X
{
ÛÛ 
password
ˆˆ  (
=
ˆˆ) *
	srDecrypt
ˆˆ+ 4
.
ˆˆ4 5
	ReadToEnd
ˆˆ5 >
(
ˆˆ> ?
)
ˆˆ? @
;
ˆˆ@ A
}
˜˜ 
}
¯¯ 
}
˘˘ 
}
˙˙ 
}
˚˚ 
using
¸¸ 
(
¸¸ 
SqlConnection
¸¸  
dBConnection
¸¸! -
=
¸¸. /
new
¸¸0 3
SqlConnection
¸¸4 A
(
¸¸A B
$str¸¸B Ñ
+¸¸Ö Ü
password¸¸á è
)¸¸è ê
)¸¸ê ë
{
˝˝ 
try
˛˛ 
{
ˇˇ 
dBConnection
ÄÄ  
.
ÄÄ  !
Open
ÄÄ! %
(
ÄÄ% &
)
ÄÄ& '
;
ÄÄ' (
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
SqlException
ÇÇ #
	exceptSql
ÇÇ$ -
)
ÇÇ- .
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ 
.
ÑÑ 
Log
ÑÑ !
(
ÑÑ! "
NLog
ÑÑ" &
.
ÑÑ& '
LogLevel
ÑÑ' /
.
ÑÑ/ 0
Warn
ÑÑ0 4
,
ÑÑ4 5
$str
ÑÑ6 V
,
ÑÑV W
	exceptSql
ÑÑX a
)
ÑÑa b
;
ÑÑb c
}
ÖÖ 
}
ÜÜ 
}
áá 	
}
àà 
private
ãã 
void
ãã 
GoodB2G2
ãã 
(
ãã 
)
ãã 
{
åå 
string
çç 
password
çç 
;
çç 
if
éé 

(
éé 
IO
éé 
.
éé 

staticTrue
éé 
)
éé 
{
èè 	
password
êê 
=
êê 
$str
êê 
;
êê 
try
íí 
{
ìì 
password
îî 
=
îî 
Encoding
îî #
.
îî# $
UTF8
îî$ (
.
îî( )
	GetString
îî) 2
(
îî2 3
File
îî3 7
.
îî7 8
ReadAllBytes
îî8 D
(
îîD E
$str
îîE o
)
îîo p
)
îîp q
;
îîq r
}
ïï 
catch
ññ 
(
ññ 
IOException
ññ 
exceptIO
ññ '
)
ññ' (
{
óó 
IO
òò 
.
òò 
Logger
òò 
.
òò 
Log
òò 
(
òò 
NLog
òò "
.
òò" #
LogLevel
òò# +
.
òò+ ,
Warn
òò, 0
,
òò0 1
$str
òò2 K
,
òòK L
exceptIO
òòM U
)
òòU V
;
òòV W
}
ôô 
}
õõ 	
else
úú 
{
ùù 	
password
†† 
=
†† 
null
†† 
;
†† 
}
°° 	
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ 

staticTrue
¢¢ 
)
¢¢ 
{
££ 	
{
•• 
using
¶¶ 
(
¶¶ &
AesCryptoServiceProvider
¶¶ /
aesAlg
¶¶0 6
=
¶¶7 8
new
¶¶9 <&
AesCryptoServiceProvider
¶¶= U
(
¶¶U V
)
¶¶V W
)
¶¶W X
{
ßß 
aesAlg
®® 
.
®® 
Key
®® 
=
®®  
Encoding
®®! )
.
®®) *
UTF8
®®* .
.
®®. /
GetBytes
®®/ 7
(
®®7 8
$str
®®8 J
)
®®J K
;
®®K L
aesAlg
©© 
.
©© 
IV
©© 
=
©© 
new
©©  #
byte
©©$ (
[
©©( )
$num
©©) +
]
©©+ ,
;
©©, -
ICryptoTransform
´´ $
	decryptor
´´% .
=
´´/ 0
aesAlg
´´1 7
.
´´7 8
CreateDecryptor
´´8 G
(
´´G H
aesAlg
´´H N
.
´´N O
Key
´´O R
,
´´R S
aesAlg
´´T Z
.
´´Z [
IV
´´[ ]
)
´´] ^
;
´´^ _
using
≠≠ 
(
≠≠ 
MemoryStream
≠≠ '
	msDecrypt
≠≠( 1
=
≠≠2 3
new
≠≠4 7
MemoryStream
≠≠8 D
(
≠≠D E
File
≠≠E I
.
≠≠I J
ReadAllBytes
≠≠J V
(
≠≠V W
$str≠≠W Å
)≠≠Å Ç
)≠≠Ç É
)≠≠É Ñ
{
ÆÆ 
using
ØØ 
(
ØØ 
CryptoStream
ØØ +
	csDecrypt
ØØ, 5
=
ØØ6 7
new
ØØ8 ;
CryptoStream
ØØ< H
(
ØØH I
	msDecrypt
ØØI R
,
ØØR S
	decryptor
ØØT ]
,
ØØ] ^
CryptoStreamMode
ØØ_ o
.
ØØo p
Read
ØØp t
)
ØØt u
)
ØØu v
{
∞∞ 
using
±± !
(
±±" #
StreamReader
±±# /
	srDecrypt
±±0 9
=
±±: ;
new
±±< ?
StreamReader
±±@ L
(
±±L M
	csDecrypt
±±M V
)
±±V W
)
±±W X
{
≤≤ 
password
µµ  (
=
µµ) *
	srDecrypt
µµ+ 4
.
µµ4 5
	ReadToEnd
µµ5 >
(
µµ> ?
)
µµ? @
;
µµ@ A
}
∂∂ 
}
∑∑ 
}
∏∏ 
}
ππ 
}
∫∫ 
using
ªª 
(
ªª 
SqlConnection
ªª  
dBConnection
ªª! -
=
ªª. /
new
ªª0 3
SqlConnection
ªª4 A
(
ªªA B
$strªªB Ñ
+ªªÖ Ü
passwordªªá è
)ªªè ê
)ªªê ë
{
ºº 
try
ΩΩ 
{
ææ 
dBConnection
øø  
.
øø  !
Open
øø! %
(
øø% &
)
øø& '
;
øø' (
}
¿¿ 
catch
¡¡ 
(
¡¡ 
SqlException
¡¡ #
	exceptSql
¡¡$ -
)
¡¡- .
{
¬¬ 
IO
√√ 
.
√√ 
Logger
√√ 
.
√√ 
Log
√√ !
(
√√! "
NLog
√√" &
.
√√& '
LogLevel
√√' /
.
√√/ 0
Warn
√√0 4
,
√√4 5
$str
√√6 V
,
√√V W
	exceptSql
√√X a
)
√√a b
;
√√b c
}
ƒƒ 
}
≈≈ 
}
∆∆ 	
}
«« 
public
…… 

override
…… 
void
…… 
Good
…… 
(
…… 
)
…… 
{
   
GoodG2B1
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodG2B2
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G1
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G2
ŒŒ 
(
ŒŒ 
)
ŒŒ 
;
ŒŒ 
}
œœ 
}—— 
}““ ¯Æ
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_11.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_11 9
:: ;
AbstractTestCase< L
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
if"" 

("" 
IO"" 
."" 
StaticReturnsTrue""  
(""  !
)""! "
)""" #
{## 	
password$$ 
=$$ 
$str$$ 
;$$ 
try&& 
{'' 
password(( 
=(( 
Encoding(( #
.((# $
UTF8(($ (
.((( )
	GetString(() 2
(((2 3
File((3 7
.((7 8
ReadAllBytes((8 D
(((D E
$str((E o
)((o p
)((p q
;((q r
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 K
,,,K L
exceptIO,,M U
),,U V
;,,V W
}-- 
}// 	
else00 
{11 	
password44 
=44 
null44 
;44 
}55 	
if66 

(66
 
IO66 
.66 
StaticReturnsTrue66 
(66  
)66  !
)66! "
{77 	
using99 
(99 
SqlConnection99  
dBConnection99! -
=99. /
new990 3
SqlConnection994 A
(99A B
$str99B x
+99y z
$str99{ 
+
99Ä Å
$str
99Ç é
+
99è ê
password
99ë ô
)
99ô ö
)
99ö õ
{:: 
try;; 
{<< 
dBConnection==  
.==  !
Open==! %
(==% &
)==& '
;==' (
}>> 
catch?? 
(?? 
SqlException?? #
	exceptSql??$ -
)??- .
{@@ 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA !
(AA! "
NLogAA" &
.AA& '
LogLevelAA' /
.AA/ 0
WarnAA0 4
,AA4 5
$strAA6 V
,AAV W
	exceptSqlAAX a
)AAa b
;AAb c
}BB 
}CC 
}DD 	
}EE 
privateII 
voidII 
GoodG2B1II 
(II 
)II 
{JJ 
stringKK 
passwordKK 
;KK 
ifLL 

(LL 
IOLL 
.LL 
StaticReturnsFalseLL !
(LL! "
)LL" #
)LL# $
{MM 	
passwordPP 
=PP 
nullPP 
;PP 
}QQ 	
elseRR 
{SS 	
passwordTT 
=TT 
$strTT 
;TT 
tryVV 
{WW 
passwordXX 
=XX 
EncodingXX #
.XX# $
UTF8XX$ (
.XX( )
	GetStringXX) 2
(XX2 3
FileXX3 7
.XX7 8
ReadAllBytesXX8 D
(XXD E
$strXXE o
)XXo p
)XXp q
;XXq r
}YY 
catchZZ 
(ZZ 
IOExceptionZZ 
exceptIOZZ '
)ZZ' (
{[[ 
IO\\ 
.\\ 
Logger\\ 
.\\ 
Log\\ 
(\\ 
NLog\\ "
.\\" #
LogLevel\\# +
.\\+ ,
Warn\\, 0
,\\0 1
$str\\2 K
,\\K L
exceptIO\\M U
)\\U V
;\\V W
}]] 
{__ 
using`` 
(`` $
AesCryptoServiceProvider`` /
aesAlg``0 6
=``7 8
new``9 <$
AesCryptoServiceProvider``= U
(``U V
)``V W
)``W X
{aa 
aesAlgbb 
.bb 
Keybb 
=bb  
Encodingbb! )
.bb) *
UTF8bb* .
.bb. /
GetBytesbb/ 7
(bb7 8
$strbb8 J
)bbJ K
;bbK L
aesAlgcc 
.cc 
IVcc 
=cc 
newcc  #
bytecc$ (
[cc( )
$numcc) +
]cc+ ,
;cc, -
ICryptoTransformee $
	decryptoree% .
=ee/ 0
aesAlgee1 7
.ee7 8
CreateDecryptoree8 G
(eeG H
aesAlgeeH N
.eeN O
KeyeeO R
,eeR S
aesAlgeeT Z
.eeZ [
IVee[ ]
)ee] ^
;ee^ _
usinggg 
(gg 
MemoryStreamgg '
	msDecryptgg( 1
=gg2 3
newgg4 7
MemoryStreamgg8 D
(ggD E
FileggE I
.ggI J
ReadAllBytesggJ V
(ggV W
$str	ggW Å
)
ggÅ Ç
)
ggÇ É
)
ggÉ Ñ
{hh 
usingii 
(ii 
CryptoStreamii +
	csDecryptii, 5
=ii6 7
newii8 ;
CryptoStreamii< H
(iiH I
	msDecryptiiI R
,iiR S
	decryptoriiT ]
,ii] ^
CryptoStreamModeii_ o
.iio p
Readiip t
)iit u
)iiu v
{jj 
usingkk !
(kk" #
StreamReaderkk# /
	srDecryptkk0 9
=kk: ;
newkk< ?
StreamReaderkk@ L
(kkL M
	csDecryptkkM V
)kkV W
)kkW X
{ll 
passwordoo  (
=oo) *
	srDecryptoo+ 4
.oo4 5
	ReadToEndoo5 >
(oo> ?
)oo? @
;oo@ A
}pp 
}qq 
}rr 
}ss 
}tt 
}uu 	
ifvv 

(vv 
IOvv 
.vv 
StaticReturnsTruevv  
(vv  !
)vv! "
)vv" #
{ww 	
usingyy 
(yy 
SqlConnectionyy  
dBConnectionyy! -
=yy. /
newyy0 3
SqlConnectionyy4 A
(yyA B
$stryyB x
+yyy z
$stryy{ 
+
yyÄ Å
$str
yyÇ é
+
yyè ê
password
yyë ô
)
yyô ö
)
yyö õ
{zz 
try{{ 
{|| 
dBConnection}}  
.}}  !
Open}}! %
(}}% &
)}}& '
;}}' (
}~~ 
catch 
( 
SqlException #
	exceptSql$ -
)- .
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ 
.
ÅÅ 
Log
ÅÅ !
(
ÅÅ! "
NLog
ÅÅ" &
.
ÅÅ& '
LogLevel
ÅÅ' /
.
ÅÅ/ 0
Warn
ÅÅ0 4
,
ÅÅ4 5
$str
ÅÅ6 V
,
ÅÅV W
	exceptSql
ÅÅX a
)
ÅÅa b
;
ÅÅb c
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
private
àà 
void
àà 
GoodG2B2
àà 
(
àà 
)
àà 
{
ââ 
string
ää 
password
ää 
;
ää 
if
ãã 

(
ãã 
IO
ãã 
.
ãã 
StaticReturnsTrue
ãã  
(
ãã  !
)
ãã! "
)
ãã" #
{
åå 	
password
çç 
=
çç 
$str
çç 
;
çç 
try
èè 
{
êê 
password
ëë 
=
ëë 
Encoding
ëë #
.
ëë# $
UTF8
ëë$ (
.
ëë( )
	GetString
ëë) 2
(
ëë2 3
File
ëë3 7
.
ëë7 8
ReadAllBytes
ëë8 D
(
ëëD E
$str
ëëE o
)
ëëo p
)
ëëp q
;
ëëq r
}
íí 
catch
ìì 
(
ìì 
IOException
ìì 
exceptIO
ìì '
)
ìì' (
{
îî 
IO
ïï 
.
ïï 
Logger
ïï 
.
ïï 
Log
ïï 
(
ïï 
NLog
ïï "
.
ïï" #
LogLevel
ïï# +
.
ïï+ ,
Warn
ïï, 0
,
ïï0 1
$str
ïï2 K
,
ïïK L
exceptIO
ïïM U
)
ïïU V
;
ïïV W
}
ññ 
{
òò 
using
ôô 
(
ôô &
AesCryptoServiceProvider
ôô /
aesAlg
ôô0 6
=
ôô7 8
new
ôô9 <&
AesCryptoServiceProvider
ôô= U
(
ôôU V
)
ôôV W
)
ôôW X
{
öö 
aesAlg
õõ 
.
õõ 
Key
õõ 
=
õõ  
Encoding
õõ! )
.
õõ) *
UTF8
õõ* .
.
õõ. /
GetBytes
õõ/ 7
(
õõ7 8
$str
õõ8 J
)
õõJ K
;
õõK L
aesAlg
úú 
.
úú 
IV
úú 
=
úú 
new
úú  #
byte
úú$ (
[
úú( )
$num
úú) +
]
úú+ ,
;
úú, -
ICryptoTransform
ûû $
	decryptor
ûû% .
=
ûû/ 0
aesAlg
ûû1 7
.
ûû7 8
CreateDecryptor
ûû8 G
(
ûûG H
aesAlg
ûûH N
.
ûûN O
Key
ûûO R
,
ûûR S
aesAlg
ûûT Z
.
ûûZ [
IV
ûû[ ]
)
ûû] ^
;
ûû^ _
using
†† 
(
†† 
MemoryStream
†† '
	msDecrypt
††( 1
=
††2 3
new
††4 7
MemoryStream
††8 D
(
††D E
File
††E I
.
††I J
ReadAllBytes
††J V
(
††V W
$str††W Å
)††Å Ç
)††Ç É
)††É Ñ
{
°° 
using
¢¢ 
(
¢¢ 
CryptoStream
¢¢ +
	csDecrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
CryptoStream
¢¢< H
(
¢¢H I
	msDecrypt
¢¢I R
,
¢¢R S
	decryptor
¢¢T ]
,
¢¢] ^
CryptoStreamMode
¢¢_ o
.
¢¢o p
Read
¢¢p t
)
¢¢t u
)
¢¢u v
{
££ 
using
§§ !
(
§§" #
StreamReader
§§# /
	srDecrypt
§§0 9
=
§§: ;
new
§§< ?
StreamReader
§§@ L
(
§§L M
	csDecrypt
§§M V
)
§§V W
)
§§W X
{
•• 
password
®®  (
=
®®) *
	srDecrypt
®®+ 4
.
®®4 5
	ReadToEnd
®®5 >
(
®®> ?
)
®®? @
;
®®@ A
}
©© 
}
™™ 
}
´´ 
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
else
ØØ 
{
∞∞ 	
password
≥≥ 
=
≥≥ 
null
≥≥ 
;
≥≥ 
}
¥¥ 	
if
µµ 

(
µµ 
IO
µµ 
.
µµ 
StaticReturnsTrue
µµ  
(
µµ  !
)
µµ! "
)
µµ" #
{
∂∂ 	
using
∏∏ 
(
∏∏ 
SqlConnection
∏∏  
dBConnection
∏∏! -
=
∏∏. /
new
∏∏0 3
SqlConnection
∏∏4 A
(
∏∏A B
$str
∏∏B x
+
∏∏y z
$str
∏∏{ 
+∏∏Ä Å
$str∏∏Ç é
+∏∏è ê
password∏∏ë ô
)∏∏ô ö
)∏∏ö õ
{
ππ 
try
∫∫ 
{
ªª 
dBConnection
ºº  
.
ºº  !
Open
ºº! %
(
ºº% &
)
ºº& '
;
ºº' (
}
ΩΩ 
catch
ææ 
(
ææ 
SqlException
ææ #
	exceptSql
ææ$ -
)
ææ- .
{
øø 
IO
¿¿ 
.
¿¿ 
Logger
¿¿ 
.
¿¿ 
Log
¿¿ !
(
¿¿! "
NLog
¿¿" &
.
¿¿& '
LogLevel
¿¿' /
.
¿¿/ 0
Warn
¿¿0 4
,
¿¿4 5
$str
¿¿6 V
,
¿¿V W
	exceptSql
¿¿X a
)
¿¿a b
;
¿¿b c
}
¡¡ 
}
¬¬ 
}
√√ 	
}
ƒƒ 
private
«« 
void
«« 
GoodB2G1
«« 
(
«« 
)
«« 
{
»» 
string
…… 
password
…… 
;
…… 
if
   

(
   
IO
   
.
   
StaticReturnsTrue
    
(
    !
)
  ! "
)
  " #
{
ÀÀ 	
password
ÃÃ 
=
ÃÃ 
$str
ÃÃ 
;
ÃÃ 
try
ŒŒ 
{
œœ 
password
–– 
=
–– 
Encoding
–– #
.
––# $
UTF8
––$ (
.
––( )
	GetString
––) 2
(
––2 3
File
––3 7
.
––7 8
ReadAllBytes
––8 D
(
––D E
$str
––E o
)
––o p
)
––p q
;
––q r
}
—— 
catch
““ 
(
““ 
IOException
““ 
exceptIO
““ '
)
““' (
{
”” 
IO
‘‘ 
.
‘‘ 
Logger
‘‘ 
.
‘‘ 
Log
‘‘ 
(
‘‘ 
NLog
‘‘ "
.
‘‘" #
LogLevel
‘‘# +
.
‘‘+ ,
Warn
‘‘, 0
,
‘‘0 1
$str
‘‘2 K
,
‘‘K L
exceptIO
‘‘M U
)
‘‘U V
;
‘‘V W
}
’’ 
}
◊◊ 	
else
ÿÿ 
{
ŸŸ 	
password
‹‹ 
=
‹‹ 
null
‹‹ 
;
‹‹ 
}
›› 	
if
ﬁﬁ 

(
ﬁﬁ 
IO
ﬁﬁ 
.
ﬁﬁ  
StaticReturnsFalse
ﬁﬁ !
(
ﬁﬁ! "
)
ﬁﬁ" #
)
ﬁﬁ# $
{
ﬂﬂ 	
IO
·· 
.
·· 
	WriteLine
·· 
(
·· 
$str
·· /
)
··/ 0
;
··0 1
}
‚‚ 	
else
„„ 
{
‰‰ 	
{
ÊÊ 
using
ÁÁ 
(
ÁÁ &
AesCryptoServiceProvider
ÁÁ /
aesAlg
ÁÁ0 6
=
ÁÁ7 8
new
ÁÁ9 <&
AesCryptoServiceProvider
ÁÁ= U
(
ÁÁU V
)
ÁÁV W
)
ÁÁW X
{
ËË 
aesAlg
ÈÈ 
.
ÈÈ 
Key
ÈÈ 
=
ÈÈ  
Encoding
ÈÈ! )
.
ÈÈ) *
UTF8
ÈÈ* .
.
ÈÈ. /
GetBytes
ÈÈ/ 7
(
ÈÈ7 8
$str
ÈÈ8 J
)
ÈÈJ K
;
ÈÈK L
aesAlg
ÍÍ 
.
ÍÍ 
IV
ÍÍ 
=
ÍÍ 
new
ÍÍ  #
byte
ÍÍ$ (
[
ÍÍ( )
$num
ÍÍ) +
]
ÍÍ+ ,
;
ÍÍ, -
ICryptoTransform
ÏÏ $
	decryptor
ÏÏ% .
=
ÏÏ/ 0
aesAlg
ÏÏ1 7
.
ÏÏ7 8
CreateDecryptor
ÏÏ8 G
(
ÏÏG H
aesAlg
ÏÏH N
.
ÏÏN O
Key
ÏÏO R
,
ÏÏR S
aesAlg
ÏÏT Z
.
ÏÏZ [
IV
ÏÏ[ ]
)
ÏÏ] ^
;
ÏÏ^ _
using
ÓÓ 
(
ÓÓ 
MemoryStream
ÓÓ '
	msDecrypt
ÓÓ( 1
=
ÓÓ2 3
new
ÓÓ4 7
MemoryStream
ÓÓ8 D
(
ÓÓD E
File
ÓÓE I
.
ÓÓI J
ReadAllBytes
ÓÓJ V
(
ÓÓV W
$strÓÓW Å
)ÓÓÅ Ç
)ÓÓÇ É
)ÓÓÉ Ñ
{
ÔÔ 
using
 
(
 
CryptoStream
 +
	csDecrypt
, 5
=
6 7
new
8 ;
CryptoStream
< H
(
H I
	msDecrypt
I R
,
R S
	decryptor
T ]
,
] ^
CryptoStreamMode
_ o
.
o p
Read
p t
)
t u
)
u v
{
ÒÒ 
using
ÚÚ !
(
ÚÚ" #
StreamReader
ÚÚ# /
	srDecrypt
ÚÚ0 9
=
ÚÚ: ;
new
ÚÚ< ?
StreamReader
ÚÚ@ L
(
ÚÚL M
	csDecrypt
ÚÚM V
)
ÚÚV W
)
ÚÚW X
{
ÛÛ 
password
ˆˆ  (
=
ˆˆ) *
	srDecrypt
ˆˆ+ 4
.
ˆˆ4 5
	ReadToEnd
ˆˆ5 >
(
ˆˆ> ?
)
ˆˆ? @
;
ˆˆ@ A
}
˜˜ 
}
¯¯ 
}
˘˘ 
}
˙˙ 
}
˚˚ 
using
¸¸ 
(
¸¸ 
SqlConnection
¸¸  
dBConnection
¸¸! -
=
¸¸. /
new
¸¸0 3
SqlConnection
¸¸4 A
(
¸¸A B
$str¸¸B Ñ
+¸¸Ö Ü
password¸¸á è
)¸¸è ê
)¸¸ê ë
{
˝˝ 
try
˛˛ 
{
ˇˇ 
dBConnection
ÄÄ  
.
ÄÄ  !
Open
ÄÄ! %
(
ÄÄ% &
)
ÄÄ& '
;
ÄÄ' (
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
SqlException
ÇÇ #
	exceptSql
ÇÇ$ -
)
ÇÇ- .
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ 
.
ÑÑ 
Log
ÑÑ !
(
ÑÑ! "
NLog
ÑÑ" &
.
ÑÑ& '
LogLevel
ÑÑ' /
.
ÑÑ/ 0
Warn
ÑÑ0 4
,
ÑÑ4 5
$str
ÑÑ6 V
,
ÑÑV W
	exceptSql
ÑÑX a
)
ÑÑa b
;
ÑÑb c
}
ÖÖ 
}
ÜÜ 
}
áá 	
}
àà 
private
ãã 
void
ãã 
GoodB2G2
ãã 
(
ãã 
)
ãã 
{
åå 
string
çç 
password
çç 
;
çç 
if
éé 

(
éé 
IO
éé 
.
éé 
StaticReturnsTrue
éé  
(
éé  !
)
éé! "
)
éé" #
{
èè 	
password
êê 
=
êê 
$str
êê 
;
êê 
try
íí 
{
ìì 
password
îî 
=
îî 
Encoding
îî #
.
îî# $
UTF8
îî$ (
.
îî( )
	GetString
îî) 2
(
îî2 3
File
îî3 7
.
îî7 8
ReadAllBytes
îî8 D
(
îîD E
$str
îîE o
)
îîo p
)
îîp q
;
îîq r
}
ïï 
catch
ññ 
(
ññ 
IOException
ññ 
exceptIO
ññ '
)
ññ' (
{
óó 
IO
òò 
.
òò 
Logger
òò 
.
òò 
Log
òò 
(
òò 
NLog
òò "
.
òò" #
LogLevel
òò# +
.
òò+ ,
Warn
òò, 0
,
òò0 1
$str
òò2 K
,
òòK L
exceptIO
òòM U
)
òòU V
;
òòV W
}
ôô 
}
õõ 	
else
úú 
{
ùù 	
password
†† 
=
†† 
null
†† 
;
†† 
}
°° 	
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ 
StaticReturnsTrue
¢¢  
(
¢¢  !
)
¢¢! "
)
¢¢" #
{
££ 	
{
•• 
using
¶¶ 
(
¶¶ &
AesCryptoServiceProvider
¶¶ /
aesAlg
¶¶0 6
=
¶¶7 8
new
¶¶9 <&
AesCryptoServiceProvider
¶¶= U
(
¶¶U V
)
¶¶V W
)
¶¶W X
{
ßß 
aesAlg
®® 
.
®® 
Key
®® 
=
®®  
Encoding
®®! )
.
®®) *
UTF8
®®* .
.
®®. /
GetBytes
®®/ 7
(
®®7 8
$str
®®8 J
)
®®J K
;
®®K L
aesAlg
©© 
.
©© 
IV
©© 
=
©© 
new
©©  #
byte
©©$ (
[
©©( )
$num
©©) +
]
©©+ ,
;
©©, -
ICryptoTransform
´´ $
	decryptor
´´% .
=
´´/ 0
aesAlg
´´1 7
.
´´7 8
CreateDecryptor
´´8 G
(
´´G H
aesAlg
´´H N
.
´´N O
Key
´´O R
,
´´R S
aesAlg
´´T Z
.
´´Z [
IV
´´[ ]
)
´´] ^
;
´´^ _
using
≠≠ 
(
≠≠ 
MemoryStream
≠≠ '
	msDecrypt
≠≠( 1
=
≠≠2 3
new
≠≠4 7
MemoryStream
≠≠8 D
(
≠≠D E
File
≠≠E I
.
≠≠I J
ReadAllBytes
≠≠J V
(
≠≠V W
$str≠≠W Å
)≠≠Å Ç
)≠≠Ç É
)≠≠É Ñ
{
ÆÆ 
using
ØØ 
(
ØØ 
CryptoStream
ØØ +
	csDecrypt
ØØ, 5
=
ØØ6 7
new
ØØ8 ;
CryptoStream
ØØ< H
(
ØØH I
	msDecrypt
ØØI R
,
ØØR S
	decryptor
ØØT ]
,
ØØ] ^
CryptoStreamMode
ØØ_ o
.
ØØo p
Read
ØØp t
)
ØØt u
)
ØØu v
{
∞∞ 
using
±± !
(
±±" #
StreamReader
±±# /
	srDecrypt
±±0 9
=
±±: ;
new
±±< ?
StreamReader
±±@ L
(
±±L M
	csDecrypt
±±M V
)
±±V W
)
±±W X
{
≤≤ 
password
µµ  (
=
µµ) *
	srDecrypt
µµ+ 4
.
µµ4 5
	ReadToEnd
µµ5 >
(
µµ> ?
)
µµ? @
;
µµ@ A
}
∂∂ 
}
∑∑ 
}
∏∏ 
}
ππ 
}
∫∫ 
using
ªª 
(
ªª 
SqlConnection
ªª  
dBConnection
ªª! -
=
ªª. /
new
ªª0 3
SqlConnection
ªª4 A
(
ªªA B
$strªªB Ñ
+ªªÖ Ü
passwordªªá è
)ªªè ê
)ªªê ë
{
ºº 
try
ΩΩ 
{
ææ 
dBConnection
øø  
.
øø  !
Open
øø! %
(
øø% &
)
øø& '
;
øø' (
}
¿¿ 
catch
¡¡ 
(
¡¡ 
SqlException
¡¡ #
	exceptSql
¡¡$ -
)
¡¡- .
{
¬¬ 
IO
√√ 
.
√√ 
Logger
√√ 
.
√√ 
Log
√√ !
(
√√! "
NLog
√√" &
.
√√& '
LogLevel
√√' /
.
√√/ 0
Warn
√√0 4
,
√√4 5
$str
√√6 V
,
√√V W
	exceptSql
√√X a
)
√√a b
;
√√b c
}
ƒƒ 
}
≈≈ 
}
∆∆ 	
}
«« 
public
…… 

override
…… 
void
…… 
Good
…… 
(
…… 
)
…… 
{
   
GoodG2B1
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodG2B2
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G1
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G2
ŒŒ 
(
ŒŒ 
)
ŒŒ 
;
ŒŒ 
}
œœ 
}—— 
}““ ≈—
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_12.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_12 9
:: ;
AbstractTestCase< L
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
if"" 

(""
 
IO"" 
."" $
StaticReturnsTrueOrFalse"" &
(""& '
)""' (
)""( )
{## 	
password$$ 
=$$ 
$str$$ 
;$$ 
try&& 
{'' 
password(( 
=(( 
Encoding(( #
.((# $
UTF8(($ (
.((( )
	GetString(() 2
(((2 3
File((3 7
.((7 8
ReadAllBytes((8 D
(((D E
$str((E o
)((o p
)((p q
;((q r
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 K
,,,K L
exceptIO,,M U
),,U V
;,,V W
}-- 
}// 	
else00 
{11 	
password22 
=22 
$str22 
;22 
try44 
{55 
password66 
=66 
Encoding66 #
.66# $
UTF866$ (
.66( )
	GetString66) 2
(662 3
File663 7
.667 8
ReadAllBytes668 D
(66D E
$str66E o
)66o p
)66p q
;66q r
}77 
catch88 
(88 
IOException88 
exceptIO88 '
)88' (
{99 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
$str::2 K
,::K L
exceptIO::M U
)::U V
;::V W
};; 
{== 
using>> 
(>> $
AesCryptoServiceProvider>> /
aesAlg>>0 6
=>>7 8
new>>9 <$
AesCryptoServiceProvider>>= U
(>>U V
)>>V W
)>>W X
{?? 
aesAlg@@ 
.@@ 
Key@@ 
=@@  
Encoding@@! )
.@@) *
UTF8@@* .
.@@. /
GetBytes@@/ 7
(@@7 8
$str@@8 J
)@@J K
;@@K L
aesAlgAA 
.AA 
IVAA 
=AA 
newAA  #
byteAA$ (
[AA( )
$numAA) +
]AA+ ,
;AA, -
ICryptoTransformCC $
	decryptorCC% .
=CC/ 0
aesAlgCC1 7
.CC7 8
CreateDecryptorCC8 G
(CCG H
aesAlgCCH N
.CCN O
KeyCCO R
,CCR S
aesAlgCCT Z
.CCZ [
IVCC[ ]
)CC] ^
;CC^ _
usingEE 
(EE 
MemoryStreamEE '
	msDecryptEE( 1
=EE2 3
newEE4 7
MemoryStreamEE8 D
(EED E
FileEEE I
.EEI J
ReadAllBytesEEJ V
(EEV W
$str	EEW Å
)
EEÅ Ç
)
EEÇ É
)
EEÉ Ñ
{FF 
usingGG 
(GG 
CryptoStreamGG +
	csDecryptGG, 5
=GG6 7
newGG8 ;
CryptoStreamGG< H
(GGH I
	msDecryptGGI R
,GGR S
	decryptorGGT ]
,GG] ^
CryptoStreamModeGG_ o
.GGo p
ReadGGp t
)GGt u
)GGu v
{HH 
usingII !
(II" #
StreamReaderII# /
	srDecryptII0 9
=II: ;
newII< ?
StreamReaderII@ L
(IIL M
	csDecryptIIM V
)IIV W
)IIW X
{JJ 
passwordMM  (
=MM) *
	srDecryptMM+ 4
.MM4 5
	ReadToEndMM5 >
(MM> ?
)MM? @
;MM@ A
}NN 
}OO 
}PP 
}QQ 
}RR 
}SS 	
ifTT 

(TT
 
IOTT 
.TT $
StaticReturnsTrueOrFalseTT &
(TT& '
)TT' (
)TT( )
{UU 	
usingWW 
(WW 
SqlConnectionWW  
dBConnectionWW! -
=WW. /
newWW0 3
SqlConnectionWW4 A
(WWA B
$strWWB x
+WWy z
$strWW{ 
+
WWÄ Å
$str
WWÇ é
+
WWè ê
password
WWë ô
)
WWô ö
)
WWö õ
{XX 
tryYY 
{ZZ 
dBConnection[[  
.[[  !
Open[[! %
([[% &
)[[& '
;[[' (
}\\ 
catch]] 
(]] 
SqlException]] #
	exceptSql]]$ -
)]]- .
{^^ 
IO__ 
.__ 
Logger__ 
.__ 
Log__ !
(__! "
NLog__" &
.__& '
LogLevel__' /
.__/ 0
Warn__0 4
,__4 5
$str__6 V
,__V W
	exceptSql__X a
)__a b
;__b c
}`` 
}aa 
}bb 	
elsecc 
{dd 	
{ff 
usinggg 
(gg $
AesCryptoServiceProvidergg /
aesAlggg0 6
=gg7 8
newgg9 <$
AesCryptoServiceProvidergg= U
(ggU V
)ggV W
)ggW X
{hh 
aesAlgii 
.ii 
Keyii 
=ii  
Encodingii! )
.ii) *
UTF8ii* .
.ii. /
GetBytesii/ 7
(ii7 8
$strii8 J
)iiJ K
;iiK L
aesAlgjj 
.jj 
IVjj 
=jj 
newjj  #
bytejj$ (
[jj( )
$numjj) +
]jj+ ,
;jj, -
ICryptoTransformll $
	decryptorll% .
=ll/ 0
aesAlgll1 7
.ll7 8
CreateDecryptorll8 G
(llG H
aesAlgllH N
.llN O
KeyllO R
,llR S
aesAlgllT Z
.llZ [
IVll[ ]
)ll] ^
;ll^ _
usingnn 
(nn 
MemoryStreamnn '
	msDecryptnn( 1
=nn2 3
newnn4 7
MemoryStreamnn8 D
(nnD E
FilennE I
.nnI J
ReadAllBytesnnJ V
(nnV W
$str	nnW Å
)
nnÅ Ç
)
nnÇ É
)
nnÉ Ñ
{oo 
usingpp 
(pp 
CryptoStreampp +
	csDecryptpp, 5
=pp6 7
newpp8 ;
CryptoStreampp< H
(ppH I
	msDecryptppI R
,ppR S
	decryptorppT ]
,pp] ^
CryptoStreamModepp_ o
.ppo p
Readppp t
)ppt u
)ppu v
{qq 
usingrr !
(rr" #
StreamReaderrr# /
	srDecryptrr0 9
=rr: ;
newrr< ?
StreamReaderrr@ L
(rrL M
	csDecryptrrM V
)rrV W
)rrW X
{ss 
passwordvv  (
=vv) *
	srDecryptvv+ 4
.vv4 5
	ReadToEndvv5 >
(vv> ?
)vv? @
;vv@ A
}ww 
}xx 
}yy 
}zz 
}{{ 
using|| 
(|| 
SqlConnection||  
dBConnection||! -
=||. /
new||0 3
SqlConnection||4 A
(||A B
$str	||B Ñ
+
||Ö Ü
password
||á è
)
||è ê
)
||ê ë
{}} 
try~~ 
{ 
dBConnection
ÄÄ  
.
ÄÄ  !
Open
ÄÄ! %
(
ÄÄ% &
)
ÄÄ& '
;
ÄÄ' (
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
SqlException
ÇÇ #
	exceptSql
ÇÇ$ -
)
ÇÇ- .
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ 
.
ÑÑ 
Log
ÑÑ !
(
ÑÑ! "
NLog
ÑÑ" &
.
ÑÑ& '
LogLevel
ÑÑ' /
.
ÑÑ/ 0
Warn
ÑÑ0 4
,
ÑÑ4 5
$str
ÑÑ6 V
,
ÑÑV W
	exceptSql
ÑÑX a
)
ÑÑa b
;
ÑÑb c
}
ÖÖ 
}
ÜÜ 
}
áá 	
}
àà 
private
çç 
void
çç 
GoodG2B
çç 
(
çç 
)
çç 
{
éé 
string
èè 
password
èè 
;
èè 
if
êê 

(
êê
 
IO
êê 
.
êê &
StaticReturnsTrueOrFalse
êê &
(
êê& '
)
êê' (
)
êê( )
{
ëë 	
password
íí 
=
íí 
$str
íí 
;
íí 
try
îî 
{
ïï 
password
ññ 
=
ññ 
Encoding
ññ #
.
ññ# $
UTF8
ññ$ (
.
ññ( )
	GetString
ññ) 2
(
ññ2 3
File
ññ3 7
.
ññ7 8
ReadAllBytes
ññ8 D
(
ññD E
$str
ññE o
)
ñño p
)
ññp q
;
ññq r
}
óó 
catch
òò 
(
òò 
IOException
òò 
exceptIO
òò '
)
òò' (
{
ôô 
IO
öö 
.
öö 
Logger
öö 
.
öö 
Log
öö 
(
öö 
NLog
öö "
.
öö" #
LogLevel
öö# +
.
öö+ ,
Warn
öö, 0
,
öö0 1
$str
öö2 K
,
ööK L
exceptIO
ööM U
)
ööU V
;
ööV W
}
õõ 
{
ùù 
using
ûû 
(
ûû &
AesCryptoServiceProvider
ûû /
aesAlg
ûû0 6
=
ûû7 8
new
ûû9 <&
AesCryptoServiceProvider
ûû= U
(
ûûU V
)
ûûV W
)
ûûW X
{
üü 
aesAlg
†† 
.
†† 
Key
†† 
=
††  
Encoding
††! )
.
††) *
UTF8
††* .
.
††. /
GetBytes
††/ 7
(
††7 8
$str
††8 J
)
††J K
;
††K L
aesAlg
°° 
.
°° 
IV
°° 
=
°° 
new
°°  #
byte
°°$ (
[
°°( )
$num
°°) +
]
°°+ ,
;
°°, -
ICryptoTransform
££ $
	decryptor
££% .
=
££/ 0
aesAlg
££1 7
.
££7 8
CreateDecryptor
££8 G
(
££G H
aesAlg
££H N
.
££N O
Key
££O R
,
££R S
aesAlg
££T Z
.
££Z [
IV
££[ ]
)
££] ^
;
££^ _
using
•• 
(
•• 
MemoryStream
•• '
	msDecrypt
••( 1
=
••2 3
new
••4 7
MemoryStream
••8 D
(
••D E
File
••E I
.
••I J
ReadAllBytes
••J V
(
••V W
$str••W Å
)••Å Ç
)••Ç É
)••É Ñ
{
¶¶ 
using
ßß 
(
ßß 
CryptoStream
ßß +
	csDecrypt
ßß, 5
=
ßß6 7
new
ßß8 ;
CryptoStream
ßß< H
(
ßßH I
	msDecrypt
ßßI R
,
ßßR S
	decryptor
ßßT ]
,
ßß] ^
CryptoStreamMode
ßß_ o
.
ßßo p
Read
ßßp t
)
ßßt u
)
ßßu v
{
®® 
using
©© !
(
©©" #
StreamReader
©©# /
	srDecrypt
©©0 9
=
©©: ;
new
©©< ?
StreamReader
©©@ L
(
©©L M
	csDecrypt
©©M V
)
©©V W
)
©©W X
{
™™ 
password
≠≠  (
=
≠≠) *
	srDecrypt
≠≠+ 4
.
≠≠4 5
	ReadToEnd
≠≠5 >
(
≠≠> ?
)
≠≠? @
;
≠≠@ A
}
ÆÆ 
}
ØØ 
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
password
∂∂ 
=
∂∂ 
$str
∂∂ 
;
∂∂ 
try
∏∏ 
{
ππ 
password
∫∫ 
=
∫∫ 
Encoding
∫∫ #
.
∫∫# $
UTF8
∫∫$ (
.
∫∫( )
	GetString
∫∫) 2
(
∫∫2 3
File
∫∫3 7
.
∫∫7 8
ReadAllBytes
∫∫8 D
(
∫∫D E
$str
∫∫E o
)
∫∫o p
)
∫∫p q
;
∫∫q r
}
ªª 
catch
ºº 
(
ºº 
IOException
ºº 
exceptIO
ºº '
)
ºº' (
{
ΩΩ 
IO
ææ 
.
ææ 
Logger
ææ 
.
ææ 
Log
ææ 
(
ææ 
NLog
ææ "
.
ææ" #
LogLevel
ææ# +
.
ææ+ ,
Warn
ææ, 0
,
ææ0 1
$str
ææ2 K
,
ææK L
exceptIO
ææM U
)
ææU V
;
ææV W
}
øø 
{
¡¡ 
using
¬¬ 
(
¬¬ &
AesCryptoServiceProvider
¬¬ /
aesAlg
¬¬0 6
=
¬¬7 8
new
¬¬9 <&
AesCryptoServiceProvider
¬¬= U
(
¬¬U V
)
¬¬V W
)
¬¬W X
{
√√ 
aesAlg
ƒƒ 
.
ƒƒ 
Key
ƒƒ 
=
ƒƒ  
Encoding
ƒƒ! )
.
ƒƒ) *
UTF8
ƒƒ* .
.
ƒƒ. /
GetBytes
ƒƒ/ 7
(
ƒƒ7 8
$str
ƒƒ8 J
)
ƒƒJ K
;
ƒƒK L
aesAlg
≈≈ 
.
≈≈ 
IV
≈≈ 
=
≈≈ 
new
≈≈  #
byte
≈≈$ (
[
≈≈( )
$num
≈≈) +
]
≈≈+ ,
;
≈≈, -
ICryptoTransform
«« $
	decryptor
««% .
=
««/ 0
aesAlg
««1 7
.
««7 8
CreateDecryptor
««8 G
(
««G H
aesAlg
««H N
.
««N O
Key
««O R
,
««R S
aesAlg
««T Z
.
««Z [
IV
««[ ]
)
««] ^
;
««^ _
using
…… 
(
…… 
MemoryStream
…… '
	msDecrypt
……( 1
=
……2 3
new
……4 7
MemoryStream
……8 D
(
……D E
File
……E I
.
……I J
ReadAllBytes
……J V
(
……V W
$str……W Å
)……Å Ç
)……Ç É
)……É Ñ
{
   
using
ÀÀ 
(
ÀÀ 
CryptoStream
ÀÀ +
	csDecrypt
ÀÀ, 5
=
ÀÀ6 7
new
ÀÀ8 ;
CryptoStream
ÀÀ< H
(
ÀÀH I
	msDecrypt
ÀÀI R
,
ÀÀR S
	decryptor
ÀÀT ]
,
ÀÀ] ^
CryptoStreamMode
ÀÀ_ o
.
ÀÀo p
Read
ÀÀp t
)
ÀÀt u
)
ÀÀu v
{
ÃÃ 
using
ÕÕ !
(
ÕÕ" #
StreamReader
ÕÕ# /
	srDecrypt
ÕÕ0 9
=
ÕÕ: ;
new
ÕÕ< ?
StreamReader
ÕÕ@ L
(
ÕÕL M
	csDecrypt
ÕÕM V
)
ÕÕV W
)
ÕÕW X
{
ŒŒ 
password
——  (
=
——) *
	srDecrypt
——+ 4
.
——4 5
	ReadToEnd
——5 >
(
——> ?
)
——? @
;
——@ A
}
““ 
}
”” 
}
‘‘ 
}
’’ 
}
÷÷ 
}
◊◊ 	
if
ÿÿ 

(
ÿÿ
 
IO
ÿÿ 
.
ÿÿ &
StaticReturnsTrueOrFalse
ÿÿ &
(
ÿÿ& '
)
ÿÿ' (
)
ÿÿ( )
{
ŸŸ 	
using
€€ 
(
€€ 
SqlConnection
€€  
dBConnection
€€! -
=
€€. /
new
€€0 3
SqlConnection
€€4 A
(
€€A B
$str
€€B x
+
€€y z
$str
€€{ 
+€€Ä Å
$str€€Ç é
+€€è ê
password€€ë ô
)€€ô ö
)€€ö õ
{
‹‹ 
try
›› 
{
ﬁﬁ 
dBConnection
ﬂﬂ  
.
ﬂﬂ  !
Open
ﬂﬂ! %
(
ﬂﬂ% &
)
ﬂﬂ& '
;
ﬂﬂ' (
}
‡‡ 
catch
·· 
(
·· 
SqlException
·· #
	exceptSql
··$ -
)
··- .
{
‚‚ 
IO
„„ 
.
„„ 
Logger
„„ 
.
„„ 
Log
„„ !
(
„„! "
NLog
„„" &
.
„„& '
LogLevel
„„' /
.
„„/ 0
Warn
„„0 4
,
„„4 5
$str
„„6 V
,
„„V W
	exceptSql
„„X a
)
„„a b
;
„„b c
}
‰‰ 
}
ÂÂ 
}
ÊÊ 	
else
ÁÁ 
{
ËË 	
using
ÍÍ 
(
ÍÍ 
SqlConnection
ÍÍ  
dBConnection
ÍÍ! -
=
ÍÍ. /
new
ÍÍ0 3
SqlConnection
ÍÍ4 A
(
ÍÍA B
$str
ÍÍB x
+
ÍÍy z
$str
ÍÍ{ 
+ÍÍÄ Å
$strÍÍÇ é
+ÍÍè ê
passwordÍÍë ô
)ÍÍô ö
)ÍÍö õ
{
ÎÎ 
try
ÏÏ 
{
ÌÌ 
dBConnection
ÓÓ  
.
ÓÓ  !
Open
ÓÓ! %
(
ÓÓ% &
)
ÓÓ& '
;
ÓÓ' (
}
ÔÔ 
catch
 
(
 
SqlException
 #
	exceptSql
$ -
)
- .
{
ÒÒ 
IO
ÚÚ 
.
ÚÚ 
Logger
ÚÚ 
.
ÚÚ 
Log
ÚÚ !
(
ÚÚ! "
NLog
ÚÚ" &
.
ÚÚ& '
LogLevel
ÚÚ' /
.
ÚÚ/ 0
Warn
ÚÚ0 4
,
ÚÚ4 5
$str
ÚÚ6 V
,
ÚÚV W
	exceptSql
ÚÚX a
)
ÚÚa b
;
ÚÚb c
}
ÛÛ 
}
ÙÙ 
}
ıı 	
}
ˆˆ 
private
˙˙ 
void
˙˙ 
GoodB2G
˙˙ 
(
˙˙ 
)
˙˙ 
{
˚˚ 
string
¸¸ 
password
¸¸ 
;
¸¸ 
if
˝˝ 

(
˝˝
 
IO
˝˝ 
.
˝˝ &
StaticReturnsTrueOrFalse
˝˝ &
(
˝˝& '
)
˝˝' (
)
˝˝( )
{
˛˛ 	
password
ˇˇ 
=
ˇˇ 
$str
ˇˇ 
;
ˇˇ 
try
ÅÅ 
{
ÇÇ 
password
ÉÉ 
=
ÉÉ 
Encoding
ÉÉ #
.
ÉÉ# $
UTF8
ÉÉ$ (
.
ÉÉ( )
	GetString
ÉÉ) 2
(
ÉÉ2 3
File
ÉÉ3 7
.
ÉÉ7 8
ReadAllBytes
ÉÉ8 D
(
ÉÉD E
$str
ÉÉE o
)
ÉÉo p
)
ÉÉp q
;
ÉÉq r
}
ÑÑ 
catch
ÖÖ 
(
ÖÖ 
IOException
ÖÖ 
exceptIO
ÖÖ '
)
ÖÖ' (
{
ÜÜ 
IO
áá 
.
áá 
Logger
áá 
.
áá 
Log
áá 
(
áá 
NLog
áá "
.
áá" #
LogLevel
áá# +
.
áá+ ,
Warn
áá, 0
,
áá0 1
$str
áá2 K
,
ááK L
exceptIO
ááM U
)
ááU V
;
ááV W
}
àà 
}
ää 	
else
ãã 
{
åå 	
password
çç 
=
çç 
$str
çç 
;
çç 
try
èè 
{
êê 
password
ëë 
=
ëë 
Encoding
ëë #
.
ëë# $
UTF8
ëë$ (
.
ëë( )
	GetString
ëë) 2
(
ëë2 3
File
ëë3 7
.
ëë7 8
ReadAllBytes
ëë8 D
(
ëëD E
$str
ëëE o
)
ëëo p
)
ëëp q
;
ëëq r
}
íí 
catch
ìì 
(
ìì 
IOException
ìì 
exceptIO
ìì '
)
ìì' (
{
îî 
IO
ïï 
.
ïï 
Logger
ïï 
.
ïï 
Log
ïï 
(
ïï 
NLog
ïï "
.
ïï" #
LogLevel
ïï# +
.
ïï+ ,
Warn
ïï, 0
,
ïï0 1
$str
ïï2 K
,
ïïK L
exceptIO
ïïM U
)
ïïU V
;
ïïV W
}
ññ 
}
òò 	
if
ôô 

(
ôô
 
IO
ôô 
.
ôô &
StaticReturnsTrueOrFalse
ôô &
(
ôô& '
)
ôô' (
)
ôô( )
{
öö 	
{
úú 
using
ùù 
(
ùù &
AesCryptoServiceProvider
ùù /
aesAlg
ùù0 6
=
ùù7 8
new
ùù9 <&
AesCryptoServiceProvider
ùù= U
(
ùùU V
)
ùùV W
)
ùùW X
{
ûû 
aesAlg
üü 
.
üü 
Key
üü 
=
üü  
Encoding
üü! )
.
üü) *
UTF8
üü* .
.
üü. /
GetBytes
üü/ 7
(
üü7 8
$str
üü8 J
)
üüJ K
;
üüK L
aesAlg
†† 
.
†† 
IV
†† 
=
†† 
new
††  #
byte
††$ (
[
††( )
$num
††) +
]
††+ ,
;
††, -
ICryptoTransform
¢¢ $
	decryptor
¢¢% .
=
¢¢/ 0
aesAlg
¢¢1 7
.
¢¢7 8
CreateDecryptor
¢¢8 G
(
¢¢G H
aesAlg
¢¢H N
.
¢¢N O
Key
¢¢O R
,
¢¢R S
aesAlg
¢¢T Z
.
¢¢Z [
IV
¢¢[ ]
)
¢¢] ^
;
¢¢^ _
using
§§ 
(
§§ 
MemoryStream
§§ '
	msDecrypt
§§( 1
=
§§2 3
new
§§4 7
MemoryStream
§§8 D
(
§§D E
File
§§E I
.
§§I J
ReadAllBytes
§§J V
(
§§V W
$str§§W Å
)§§Å Ç
)§§Ç É
)§§É Ñ
{
•• 
using
¶¶ 
(
¶¶ 
CryptoStream
¶¶ +
	csDecrypt
¶¶, 5
=
¶¶6 7
new
¶¶8 ;
CryptoStream
¶¶< H
(
¶¶H I
	msDecrypt
¶¶I R
,
¶¶R S
	decryptor
¶¶T ]
,
¶¶] ^
CryptoStreamMode
¶¶_ o
.
¶¶o p
Read
¶¶p t
)
¶¶t u
)
¶¶u v
{
ßß 
using
®® !
(
®®" #
StreamReader
®®# /
	srDecrypt
®®0 9
=
®®: ;
new
®®< ?
StreamReader
®®@ L
(
®®L M
	csDecrypt
®®M V
)
®®V W
)
®®W X
{
©© 
password
¨¨  (
=
¨¨) *
	srDecrypt
¨¨+ 4
.
¨¨4 5
	ReadToEnd
¨¨5 >
(
¨¨> ?
)
¨¨? @
;
¨¨@ A
}
≠≠ 
}
ÆÆ 
}
ØØ 
}
∞∞ 
}
±± 
using
≤≤ 
(
≤≤ 
SqlConnection
≤≤  
dBConnection
≤≤! -
=
≤≤. /
new
≤≤0 3
SqlConnection
≤≤4 A
(
≤≤A B
$str≤≤B Ñ
+≤≤Ö Ü
password≤≤á è
)≤≤è ê
)≤≤ê ë
{
≥≥ 
try
¥¥ 
{
µµ 
dBConnection
∂∂  
.
∂∂  !
Open
∂∂! %
(
∂∂% &
)
∂∂& '
;
∂∂' (
}
∑∑ 
catch
∏∏ 
(
∏∏ 
SqlException
∏∏ #
	exceptSql
∏∏$ -
)
∏∏- .
{
ππ 
IO
∫∫ 
.
∫∫ 
Logger
∫∫ 
.
∫∫ 
Log
∫∫ !
(
∫∫! "
NLog
∫∫" &
.
∫∫& '
LogLevel
∫∫' /
.
∫∫/ 0
Warn
∫∫0 4
,
∫∫4 5
$str
∫∫6 V
,
∫∫V W
	exceptSql
∫∫X a
)
∫∫a b
;
∫∫b c
}
ªª 
}
ºº 
}
ΩΩ 	
else
ææ 
{
øø 	
{
¡¡ 
using
¬¬ 
(
¬¬ &
AesCryptoServiceProvider
¬¬ /
aesAlg
¬¬0 6
=
¬¬7 8
new
¬¬9 <&
AesCryptoServiceProvider
¬¬= U
(
¬¬U V
)
¬¬V W
)
¬¬W X
{
√√ 
aesAlg
ƒƒ 
.
ƒƒ 
Key
ƒƒ 
=
ƒƒ  
Encoding
ƒƒ! )
.
ƒƒ) *
UTF8
ƒƒ* .
.
ƒƒ. /
GetBytes
ƒƒ/ 7
(
ƒƒ7 8
$str
ƒƒ8 J
)
ƒƒJ K
;
ƒƒK L
aesAlg
≈≈ 
.
≈≈ 
IV
≈≈ 
=
≈≈ 
new
≈≈  #
byte
≈≈$ (
[
≈≈( )
$num
≈≈) +
]
≈≈+ ,
;
≈≈, -
ICryptoTransform
«« $
	decryptor
««% .
=
««/ 0
aesAlg
««1 7
.
««7 8
CreateDecryptor
««8 G
(
««G H
aesAlg
««H N
.
««N O
Key
««O R
,
««R S
aesAlg
««T Z
.
««Z [
IV
««[ ]
)
««] ^
;
««^ _
using
…… 
(
…… 
MemoryStream
…… '
	msDecrypt
……( 1
=
……2 3
new
……4 7
MemoryStream
……8 D
(
……D E
File
……E I
.
……I J
ReadAllBytes
……J V
(
……V W
$str……W Å
)……Å Ç
)……Ç É
)……É Ñ
{
   
using
ÀÀ 
(
ÀÀ 
CryptoStream
ÀÀ +
	csDecrypt
ÀÀ, 5
=
ÀÀ6 7
new
ÀÀ8 ;
CryptoStream
ÀÀ< H
(
ÀÀH I
	msDecrypt
ÀÀI R
,
ÀÀR S
	decryptor
ÀÀT ]
,
ÀÀ] ^
CryptoStreamMode
ÀÀ_ o
.
ÀÀo p
Read
ÀÀp t
)
ÀÀt u
)
ÀÀu v
{
ÃÃ 
using
ÕÕ !
(
ÕÕ" #
StreamReader
ÕÕ# /
	srDecrypt
ÕÕ0 9
=
ÕÕ: ;
new
ÕÕ< ?
StreamReader
ÕÕ@ L
(
ÕÕL M
	csDecrypt
ÕÕM V
)
ÕÕV W
)
ÕÕW X
{
ŒŒ 
password
——  (
=
——) *
	srDecrypt
——+ 4
.
——4 5
	ReadToEnd
——5 >
(
——> ?
)
——? @
;
——@ A
}
““ 
}
”” 
}
‘‘ 
}
’’ 
}
÷÷ 
using
◊◊ 
(
◊◊ 
SqlConnection
◊◊  
dBConnection
◊◊! -
=
◊◊. /
new
◊◊0 3
SqlConnection
◊◊4 A
(
◊◊A B
$str◊◊B Ñ
+◊◊Ö Ü
password◊◊á è
)◊◊è ê
)◊◊ê ë
{
ÿÿ 
try
ŸŸ 
{
⁄⁄ 
dBConnection
€€  
.
€€  !
Open
€€! %
(
€€% &
)
€€& '
;
€€' (
}
‹‹ 
catch
›› 
(
›› 
SqlException
›› #
	exceptSql
››$ -
)
››- .
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
Logger
ﬂﬂ 
.
ﬂﬂ 
Log
ﬂﬂ !
(
ﬂﬂ! "
NLog
ﬂﬂ" &
.
ﬂﬂ& '
LogLevel
ﬂﬂ' /
.
ﬂﬂ/ 0
Warn
ﬂﬂ0 4
,
ﬂﬂ4 5
$str
ﬂﬂ6 V
,
ﬂﬂV W
	exceptSql
ﬂﬂX a
)
ﬂﬂa b
;
ﬂﬂb c
}
‡‡ 
}
·· 
}
‚‚ 	
}
„„ 
public
ÂÂ 

override
ÂÂ 
void
ÂÂ 
Good
ÂÂ 
(
ÂÂ 
)
ÂÂ 
{
ÁÁ 
GoodG2B
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ ºØ
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_13.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_13 9
:: ;
AbstractTestCase< L
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
if"" 

("" 
IO"" 
.""  
STATIC_READONLY_FIVE"" #
==""# %
$num""% &
)""& '
{## 	
password$$ 
=$$ 
$str$$ 
;$$ 
try&& 
{'' 
password(( 
=(( 
Encoding(( #
.((# $
UTF8(($ (
.((( )
	GetString(() 2
(((2 3
File((3 7
.((7 8
ReadAllBytes((8 D
(((D E
$str((E o
)((o p
)((p q
;((q r
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 K
,,,K L
exceptIO,,M U
),,U V
;,,V W
}-- 
}// 	
else00 
{11 	
password44 
=44 
null44 
;44 
}55 	
if66 

(66 
IO66 
.66  
STATIC_READONLY_FIVE66 #
==66# %
$num66% &
)66& '
{77 	
using99 
(99 
SqlConnection99  
dBConnection99! -
=99. /
new990 3
SqlConnection994 A
(99A B
$str99B x
+99y z
$str99{ 
+
99Ä Å
$str
99Ç é
+
99è ê
password
99ë ô
)
99ô ö
)
99ö õ
{:: 
try;; 
{<< 
dBConnection==  
.==  !
Open==! %
(==% &
)==& '
;==' (
}>> 
catch?? 
(?? 
SqlException?? #
	exceptSql??$ -
)??- .
{@@ 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA !
(AA! "
NLogAA" &
.AA& '
LogLevelAA' /
.AA/ 0
WarnAA0 4
,AA4 5
$strAA6 V
,AAV W
	exceptSqlAAX a
)AAa b
;AAb c
}BB 
}CC 
}DD 	
}EE 
privateII 
voidII 
GoodG2B1II 
(II 
)II 
{JJ 
stringKK 
passwordKK 
;KK 
ifLL 

(LL 
IOLL 
.LL  
STATIC_READONLY_FIVELL #
!=LL# %
$numLL% &
)LL& '
{MM 	
passwordPP 
=PP 
nullPP 
;PP 
}QQ 	
elseRR 
{SS 	
passwordTT 
=TT 
$strTT 
;TT 
tryVV 
{WW 
passwordXX 
=XX 
EncodingXX #
.XX# $
UTF8XX$ (
.XX( )
	GetStringXX) 2
(XX2 3
FileXX3 7
.XX7 8
ReadAllBytesXX8 D
(XXD E
$strXXE o
)XXo p
)XXp q
;XXq r
}YY 
catchZZ 
(ZZ 
IOExceptionZZ 
exceptIOZZ '
)ZZ' (
{[[ 
IO\\ 
.\\ 
Logger\\ 
.\\ 
Log\\ 
(\\ 
NLog\\ "
.\\" #
LogLevel\\# +
.\\+ ,
Warn\\, 0
,\\0 1
$str\\2 K
,\\K L
exceptIO\\M U
)\\U V
;\\V W
}]] 
{__ 
using`` 
(`` $
AesCryptoServiceProvider`` /
aesAlg``0 6
=``7 8
new``9 <$
AesCryptoServiceProvider``= U
(``U V
)``V W
)``W X
{aa 
aesAlgbb 
.bb 
Keybb 
=bb  
Encodingbb! )
.bb) *
UTF8bb* .
.bb. /
GetBytesbb/ 7
(bb7 8
$strbb8 J
)bbJ K
;bbK L
aesAlgcc 
.cc 
IVcc 
=cc 
newcc  #
bytecc$ (
[cc( )
$numcc) +
]cc+ ,
;cc, -
ICryptoTransformee $
	decryptoree% .
=ee/ 0
aesAlgee1 7
.ee7 8
CreateDecryptoree8 G
(eeG H
aesAlgeeH N
.eeN O
KeyeeO R
,eeR S
aesAlgeeT Z
.eeZ [
IVee[ ]
)ee] ^
;ee^ _
usinggg 
(gg 
MemoryStreamgg '
	msDecryptgg( 1
=gg2 3
newgg4 7
MemoryStreamgg8 D
(ggD E
FileggE I
.ggI J
ReadAllBytesggJ V
(ggV W
$str	ggW Å
)
ggÅ Ç
)
ggÇ É
)
ggÉ Ñ
{hh 
usingii 
(ii 
CryptoStreamii +
	csDecryptii, 5
=ii6 7
newii8 ;
CryptoStreamii< H
(iiH I
	msDecryptiiI R
,iiR S
	decryptoriiT ]
,ii] ^
CryptoStreamModeii_ o
.iio p
Readiip t
)iit u
)iiu v
{jj 
usingkk !
(kk" #
StreamReaderkk# /
	srDecryptkk0 9
=kk: ;
newkk< ?
StreamReaderkk@ L
(kkL M
	csDecryptkkM V
)kkV W
)kkW X
{ll 
passwordoo  (
=oo) *
	srDecryptoo+ 4
.oo4 5
	ReadToEndoo5 >
(oo> ?
)oo? @
;oo@ A
}pp 
}qq 
}rr 
}ss 
}tt 
}uu 	
ifvv 

(vv 
IOvv 
.vv  
STATIC_READONLY_FIVEvv #
==vv# %
$numvv% &
)vv& '
{ww 	
usingyy 
(yy 
SqlConnectionyy  
dBConnectionyy! -
=yy. /
newyy0 3
SqlConnectionyy4 A
(yyA B
$stryyB x
+yyy z
$stryy{ 
+
yyÄ Å
$str
yyÇ é
+
yyè ê
password
yyë ô
)
yyô ö
)
yyö õ
{zz 
try{{ 
{|| 
dBConnection}}  
.}}  !
Open}}! %
(}}% &
)}}& '
;}}' (
}~~ 
catch 
( 
SqlException #
	exceptSql$ -
)- .
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ 
.
ÅÅ 
Log
ÅÅ !
(
ÅÅ! "
NLog
ÅÅ" &
.
ÅÅ& '
LogLevel
ÅÅ' /
.
ÅÅ/ 0
Warn
ÅÅ0 4
,
ÅÅ4 5
$str
ÅÅ6 V
,
ÅÅV W
	exceptSql
ÅÅX a
)
ÅÅa b
;
ÅÅb c
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
private
àà 
void
àà 
GoodG2B2
àà 
(
àà 
)
àà 
{
ââ 
string
ää 
password
ää 
;
ää 
if
ãã 

(
ãã 
IO
ãã 
.
ãã "
STATIC_READONLY_FIVE
ãã #
==
ãã# %
$num
ãã% &
)
ãã& '
{
åå 	
password
çç 
=
çç 
$str
çç 
;
çç 
try
èè 
{
êê 
password
ëë 
=
ëë 
Encoding
ëë #
.
ëë# $
UTF8
ëë$ (
.
ëë( )
	GetString
ëë) 2
(
ëë2 3
File
ëë3 7
.
ëë7 8
ReadAllBytes
ëë8 D
(
ëëD E
$str
ëëE o
)
ëëo p
)
ëëp q
;
ëëq r
}
íí 
catch
ìì 
(
ìì 
IOException
ìì 
exceptIO
ìì '
)
ìì' (
{
îî 
IO
ïï 
.
ïï 
Logger
ïï 
.
ïï 
Log
ïï 
(
ïï 
NLog
ïï "
.
ïï" #
LogLevel
ïï# +
.
ïï+ ,
Warn
ïï, 0
,
ïï0 1
$str
ïï2 K
,
ïïK L
exceptIO
ïïM U
)
ïïU V
;
ïïV W
}
ññ 
{
òò 
using
ôô 
(
ôô &
AesCryptoServiceProvider
ôô /
aesAlg
ôô0 6
=
ôô7 8
new
ôô9 <&
AesCryptoServiceProvider
ôô= U
(
ôôU V
)
ôôV W
)
ôôW X
{
öö 
aesAlg
õõ 
.
õõ 
Key
õõ 
=
õõ  
Encoding
õõ! )
.
õõ) *
UTF8
õõ* .
.
õõ. /
GetBytes
õõ/ 7
(
õõ7 8
$str
õõ8 J
)
õõJ K
;
õõK L
aesAlg
úú 
.
úú 
IV
úú 
=
úú 
new
úú  #
byte
úú$ (
[
úú( )
$num
úú) +
]
úú+ ,
;
úú, -
ICryptoTransform
ûû $
	decryptor
ûû% .
=
ûû/ 0
aesAlg
ûû1 7
.
ûû7 8
CreateDecryptor
ûû8 G
(
ûûG H
aesAlg
ûûH N
.
ûûN O
Key
ûûO R
,
ûûR S
aesAlg
ûûT Z
.
ûûZ [
IV
ûû[ ]
)
ûû] ^
;
ûû^ _
using
†† 
(
†† 
MemoryStream
†† '
	msDecrypt
††( 1
=
††2 3
new
††4 7
MemoryStream
††8 D
(
††D E
File
††E I
.
††I J
ReadAllBytes
††J V
(
††V W
$str††W Å
)††Å Ç
)††Ç É
)††É Ñ
{
°° 
using
¢¢ 
(
¢¢ 
CryptoStream
¢¢ +
	csDecrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
CryptoStream
¢¢< H
(
¢¢H I
	msDecrypt
¢¢I R
,
¢¢R S
	decryptor
¢¢T ]
,
¢¢] ^
CryptoStreamMode
¢¢_ o
.
¢¢o p
Read
¢¢p t
)
¢¢t u
)
¢¢u v
{
££ 
using
§§ !
(
§§" #
StreamReader
§§# /
	srDecrypt
§§0 9
=
§§: ;
new
§§< ?
StreamReader
§§@ L
(
§§L M
	csDecrypt
§§M V
)
§§V W
)
§§W X
{
•• 
password
®®  (
=
®®) *
	srDecrypt
®®+ 4
.
®®4 5
	ReadToEnd
®®5 >
(
®®> ?
)
®®? @
;
®®@ A
}
©© 
}
™™ 
}
´´ 
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
else
ØØ 
{
∞∞ 	
password
≥≥ 
=
≥≥ 
null
≥≥ 
;
≥≥ 
}
¥¥ 	
if
µµ 

(
µµ 
IO
µµ 
.
µµ "
STATIC_READONLY_FIVE
µµ #
==
µµ# %
$num
µµ% &
)
µµ& '
{
∂∂ 	
using
∏∏ 
(
∏∏ 
SqlConnection
∏∏  
dBConnection
∏∏! -
=
∏∏. /
new
∏∏0 3
SqlConnection
∏∏4 A
(
∏∏A B
$str
∏∏B x
+
∏∏y z
$str
∏∏{ 
+∏∏Ä Å
$str∏∏Ç é
+∏∏è ê
password∏∏ë ô
)∏∏ô ö
)∏∏ö õ
{
ππ 
try
∫∫ 
{
ªª 
dBConnection
ºº  
.
ºº  !
Open
ºº! %
(
ºº% &
)
ºº& '
;
ºº' (
}
ΩΩ 
catch
ææ 
(
ææ 
SqlException
ææ #
	exceptSql
ææ$ -
)
ææ- .
{
øø 
IO
¿¿ 
.
¿¿ 
Logger
¿¿ 
.
¿¿ 
Log
¿¿ !
(
¿¿! "
NLog
¿¿" &
.
¿¿& '
LogLevel
¿¿' /
.
¿¿/ 0
Warn
¿¿0 4
,
¿¿4 5
$str
¿¿6 V
,
¿¿V W
	exceptSql
¿¿X a
)
¿¿a b
;
¿¿b c
}
¡¡ 
}
¬¬ 
}
√√ 	
}
ƒƒ 
private
«« 
void
«« 
GoodB2G1
«« 
(
«« 
)
«« 
{
»» 
string
…… 
password
…… 
;
…… 
if
   

(
   
IO
   
.
   "
STATIC_READONLY_FIVE
   #
==
  # %
$num
  % &
)
  & '
{
ÀÀ 	
password
ÃÃ 
=
ÃÃ 
$str
ÃÃ 
;
ÃÃ 
try
ŒŒ 
{
œœ 
password
–– 
=
–– 
Encoding
–– #
.
––# $
UTF8
––$ (
.
––( )
	GetString
––) 2
(
––2 3
File
––3 7
.
––7 8
ReadAllBytes
––8 D
(
––D E
$str
––E o
)
––o p
)
––p q
;
––q r
}
—— 
catch
““ 
(
““ 
IOException
““ 
exceptIO
““ '
)
““' (
{
”” 
IO
‘‘ 
.
‘‘ 
Logger
‘‘ 
.
‘‘ 
Log
‘‘ 
(
‘‘ 
NLog
‘‘ "
.
‘‘" #
LogLevel
‘‘# +
.
‘‘+ ,
Warn
‘‘, 0
,
‘‘0 1
$str
‘‘2 K
,
‘‘K L
exceptIO
‘‘M U
)
‘‘U V
;
‘‘V W
}
’’ 
}
◊◊ 	
else
ÿÿ 
{
ŸŸ 	
password
‹‹ 
=
‹‹ 
null
‹‹ 
;
‹‹ 
}
›› 	
if
ﬁﬁ 

(
ﬁﬁ 
IO
ﬁﬁ 
.
ﬁﬁ "
STATIC_READONLY_FIVE
ﬁﬁ #
!=
ﬁﬁ# %
$num
ﬁﬁ% &
)
ﬁﬁ& '
{
ﬂﬂ 	
IO
·· 
.
·· 
	WriteLine
·· 
(
·· 
$str
·· /
)
··/ 0
;
··0 1
}
‚‚ 	
else
„„ 
{
‰‰ 	
{
ÊÊ 
using
ÁÁ 
(
ÁÁ &
AesCryptoServiceProvider
ÁÁ /
aesAlg
ÁÁ0 6
=
ÁÁ7 8
new
ÁÁ9 <&
AesCryptoServiceProvider
ÁÁ= U
(
ÁÁU V
)
ÁÁV W
)
ÁÁW X
{
ËË 
aesAlg
ÈÈ 
.
ÈÈ 
Key
ÈÈ 
=
ÈÈ  
Encoding
ÈÈ! )
.
ÈÈ) *
UTF8
ÈÈ* .
.
ÈÈ. /
GetBytes
ÈÈ/ 7
(
ÈÈ7 8
$str
ÈÈ8 J
)
ÈÈJ K
;
ÈÈK L
aesAlg
ÍÍ 
.
ÍÍ 
IV
ÍÍ 
=
ÍÍ 
new
ÍÍ  #
byte
ÍÍ$ (
[
ÍÍ( )
$num
ÍÍ) +
]
ÍÍ+ ,
;
ÍÍ, -
ICryptoTransform
ÏÏ $
	decryptor
ÏÏ% .
=
ÏÏ/ 0
aesAlg
ÏÏ1 7
.
ÏÏ7 8
CreateDecryptor
ÏÏ8 G
(
ÏÏG H
aesAlg
ÏÏH N
.
ÏÏN O
Key
ÏÏO R
,
ÏÏR S
aesAlg
ÏÏT Z
.
ÏÏZ [
IV
ÏÏ[ ]
)
ÏÏ] ^
;
ÏÏ^ _
using
ÓÓ 
(
ÓÓ 
MemoryStream
ÓÓ '
	msDecrypt
ÓÓ( 1
=
ÓÓ2 3
new
ÓÓ4 7
MemoryStream
ÓÓ8 D
(
ÓÓD E
File
ÓÓE I
.
ÓÓI J
ReadAllBytes
ÓÓJ V
(
ÓÓV W
$strÓÓW Å
)ÓÓÅ Ç
)ÓÓÇ É
)ÓÓÉ Ñ
{
ÔÔ 
using
 
(
 
CryptoStream
 +
	csDecrypt
, 5
=
6 7
new
8 ;
CryptoStream
< H
(
H I
	msDecrypt
I R
,
R S
	decryptor
T ]
,
] ^
CryptoStreamMode
_ o
.
o p
Read
p t
)
t u
)
u v
{
ÒÒ 
using
ÚÚ !
(
ÚÚ" #
StreamReader
ÚÚ# /
	srDecrypt
ÚÚ0 9
=
ÚÚ: ;
new
ÚÚ< ?
StreamReader
ÚÚ@ L
(
ÚÚL M
	csDecrypt
ÚÚM V
)
ÚÚV W
)
ÚÚW X
{
ÛÛ 
password
ˆˆ  (
=
ˆˆ) *
	srDecrypt
ˆˆ+ 4
.
ˆˆ4 5
	ReadToEnd
ˆˆ5 >
(
ˆˆ> ?
)
ˆˆ? @
;
ˆˆ@ A
}
˜˜ 
}
¯¯ 
}
˘˘ 
}
˙˙ 
}
˚˚ 
using
¸¸ 
(
¸¸ 
SqlConnection
¸¸  
dBConnection
¸¸! -
=
¸¸. /
new
¸¸0 3
SqlConnection
¸¸4 A
(
¸¸A B
$str¸¸B Ñ
+¸¸Ö Ü
password¸¸á è
)¸¸è ê
)¸¸ê ë
{
˝˝ 
try
˛˛ 
{
ˇˇ 
dBConnection
ÄÄ  
.
ÄÄ  !
Open
ÄÄ! %
(
ÄÄ% &
)
ÄÄ& '
;
ÄÄ' (
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
SqlException
ÇÇ #
	exceptSql
ÇÇ$ -
)
ÇÇ- .
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ 
.
ÑÑ 
Log
ÑÑ !
(
ÑÑ! "
NLog
ÑÑ" &
.
ÑÑ& '
LogLevel
ÑÑ' /
.
ÑÑ/ 0
Warn
ÑÑ0 4
,
ÑÑ4 5
$str
ÑÑ6 V
,
ÑÑV W
	exceptSql
ÑÑX a
)
ÑÑa b
;
ÑÑb c
}
ÖÖ 
}
ÜÜ 
}
áá 	
}
àà 
private
ãã 
void
ãã 
GoodB2G2
ãã 
(
ãã 
)
ãã 
{
åå 
string
çç 
password
çç 
;
çç 
if
éé 

(
éé 
IO
éé 
.
éé "
STATIC_READONLY_FIVE
éé #
==
éé# %
$num
éé% &
)
éé& '
{
èè 	
password
êê 
=
êê 
$str
êê 
;
êê 
try
íí 
{
ìì 
password
îî 
=
îî 
Encoding
îî #
.
îî# $
UTF8
îî$ (
.
îî( )
	GetString
îî) 2
(
îî2 3
File
îî3 7
.
îî7 8
ReadAllBytes
îî8 D
(
îîD E
$str
îîE o
)
îîo p
)
îîp q
;
îîq r
}
ïï 
catch
ññ 
(
ññ 
IOException
ññ 
exceptIO
ññ '
)
ññ' (
{
óó 
IO
òò 
.
òò 
Logger
òò 
.
òò 
Log
òò 
(
òò 
NLog
òò "
.
òò" #
LogLevel
òò# +
.
òò+ ,
Warn
òò, 0
,
òò0 1
$str
òò2 K
,
òòK L
exceptIO
òòM U
)
òòU V
;
òòV W
}
ôô 
}
õõ 	
else
úú 
{
ùù 	
password
†† 
=
†† 
null
†† 
;
†† 
}
°° 	
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ "
STATIC_READONLY_FIVE
¢¢ #
==
¢¢# %
$num
¢¢% &
)
¢¢& '
{
££ 	
{
•• 
using
¶¶ 
(
¶¶ &
AesCryptoServiceProvider
¶¶ /
aesAlg
¶¶0 6
=
¶¶7 8
new
¶¶9 <&
AesCryptoServiceProvider
¶¶= U
(
¶¶U V
)
¶¶V W
)
¶¶W X
{
ßß 
aesAlg
®® 
.
®® 
Key
®® 
=
®®  
Encoding
®®! )
.
®®) *
UTF8
®®* .
.
®®. /
GetBytes
®®/ 7
(
®®7 8
$str
®®8 J
)
®®J K
;
®®K L
aesAlg
©© 
.
©© 
IV
©© 
=
©© 
new
©©  #
byte
©©$ (
[
©©( )
$num
©©) +
]
©©+ ,
;
©©, -
ICryptoTransform
´´ $
	decryptor
´´% .
=
´´/ 0
aesAlg
´´1 7
.
´´7 8
CreateDecryptor
´´8 G
(
´´G H
aesAlg
´´H N
.
´´N O
Key
´´O R
,
´´R S
aesAlg
´´T Z
.
´´Z [
IV
´´[ ]
)
´´] ^
;
´´^ _
using
≠≠ 
(
≠≠ 
MemoryStream
≠≠ '
	msDecrypt
≠≠( 1
=
≠≠2 3
new
≠≠4 7
MemoryStream
≠≠8 D
(
≠≠D E
File
≠≠E I
.
≠≠I J
ReadAllBytes
≠≠J V
(
≠≠V W
$str≠≠W Å
)≠≠Å Ç
)≠≠Ç É
)≠≠É Ñ
{
ÆÆ 
using
ØØ 
(
ØØ 
CryptoStream
ØØ +
	csDecrypt
ØØ, 5
=
ØØ6 7
new
ØØ8 ;
CryptoStream
ØØ< H
(
ØØH I
	msDecrypt
ØØI R
,
ØØR S
	decryptor
ØØT ]
,
ØØ] ^
CryptoStreamMode
ØØ_ o
.
ØØo p
Read
ØØp t
)
ØØt u
)
ØØu v
{
∞∞ 
using
±± !
(
±±" #
StreamReader
±±# /
	srDecrypt
±±0 9
=
±±: ;
new
±±< ?
StreamReader
±±@ L
(
±±L M
	csDecrypt
±±M V
)
±±V W
)
±±W X
{
≤≤ 
password
µµ  (
=
µµ) *
	srDecrypt
µµ+ 4
.
µµ4 5
	ReadToEnd
µµ5 >
(
µµ> ?
)
µµ? @
;
µµ@ A
}
∂∂ 
}
∑∑ 
}
∏∏ 
}
ππ 
}
∫∫ 
using
ªª 
(
ªª 
SqlConnection
ªª  
dBConnection
ªª! -
=
ªª. /
new
ªª0 3
SqlConnection
ªª4 A
(
ªªA B
$strªªB Ñ
+ªªÖ Ü
passwordªªá è
)ªªè ê
)ªªê ë
{
ºº 
try
ΩΩ 
{
ææ 
dBConnection
øø  
.
øø  !
Open
øø! %
(
øø% &
)
øø& '
;
øø' (
}
¿¿ 
catch
¡¡ 
(
¡¡ 
SqlException
¡¡ #
	exceptSql
¡¡$ -
)
¡¡- .
{
¬¬ 
IO
√√ 
.
√√ 
Logger
√√ 
.
√√ 
Log
√√ !
(
√√! "
NLog
√√" &
.
√√& '
LogLevel
√√' /
.
√√/ 0
Warn
√√0 4
,
√√4 5
$str
√√6 V
,
√√V W
	exceptSql
√√X a
)
√√a b
;
√√b c
}
ƒƒ 
}
≈≈ 
}
∆∆ 	
}
«« 
public
…… 

override
…… 
void
…… 
Good
…… 
(
…… 
)
…… 
{
   
GoodG2B1
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodG2B2
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G1
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G2
ŒŒ 
(
ŒŒ 
)
ŒŒ 
;
ŒŒ 
}
œœ 
}—— 
}““ ÿÆ
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_14.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_14 9
:: ;
AbstractTestCase< L
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
if"" 

("" 
IO"" 
."" 

staticFive"" 
=="" 
$num"" 
)"" 
{## 	
password$$ 
=$$ 
$str$$ 
;$$ 
try&& 
{'' 
password(( 
=(( 
Encoding(( #
.((# $
UTF8(($ (
.((( )
	GetString(() 2
(((2 3
File((3 7
.((7 8
ReadAllBytes((8 D
(((D E
$str((E o
)((o p
)((p q
;((q r
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 K
,,,K L
exceptIO,,M U
),,U V
;,,V W
}-- 
}// 	
else00 
{11 	
password44 
=44 
null44 
;44 
}55 	
if66 

(66 
IO66 
.66 

staticFive66 
==66 
$num66 
)66 
{77 	
using99 
(99 
SqlConnection99  
dBConnection99! -
=99. /
new990 3
SqlConnection994 A
(99A B
$str99B x
+99y z
$str99{ 
+
99Ä Å
$str
99Ç é
+
99è ê
password
99ë ô
)
99ô ö
)
99ö õ
{:: 
try;; 
{<< 
dBConnection==  
.==  !
Open==! %
(==% &
)==& '
;==' (
}>> 
catch?? 
(?? 
SqlException?? #
	exceptSql??$ -
)??- .
{@@ 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA !
(AA! "
NLogAA" &
.AA& '
LogLevelAA' /
.AA/ 0
WarnAA0 4
,AA4 5
$strAA6 V
,AAV W
	exceptSqlAAX a
)AAa b
;AAb c
}BB 
}CC 
}DD 	
}EE 
privateII 
voidII 
GoodG2B1II 
(II 
)II 
{JJ 
stringKK 
passwordKK 
;KK 
ifLL 

(LL 
IOLL 
.LL 

staticFiveLL 
!=LL 
$numLL 
)LL 
{MM 	
passwordPP 
=PP 
nullPP 
;PP 
}QQ 	
elseRR 
{SS 	
passwordTT 
=TT 
$strTT 
;TT 
tryVV 
{WW 
passwordXX 
=XX 
EncodingXX #
.XX# $
UTF8XX$ (
.XX( )
	GetStringXX) 2
(XX2 3
FileXX3 7
.XX7 8
ReadAllBytesXX8 D
(XXD E
$strXXE o
)XXo p
)XXp q
;XXq r
}YY 
catchZZ 
(ZZ 
IOExceptionZZ 
exceptIOZZ '
)ZZ' (
{[[ 
IO\\ 
.\\ 
Logger\\ 
.\\ 
Log\\ 
(\\ 
NLog\\ "
.\\" #
LogLevel\\# +
.\\+ ,
Warn\\, 0
,\\0 1
$str\\2 K
,\\K L
exceptIO\\M U
)\\U V
;\\V W
}]] 
{__ 
using`` 
(`` $
AesCryptoServiceProvider`` /
aesAlg``0 6
=``7 8
new``9 <$
AesCryptoServiceProvider``= U
(``U V
)``V W
)``W X
{aa 
aesAlgbb 
.bb 
Keybb 
=bb  
Encodingbb! )
.bb) *
UTF8bb* .
.bb. /
GetBytesbb/ 7
(bb7 8
$strbb8 J
)bbJ K
;bbK L
aesAlgcc 
.cc 
IVcc 
=cc 
newcc  #
bytecc$ (
[cc( )
$numcc) +
]cc+ ,
;cc, -
ICryptoTransformee $
	decryptoree% .
=ee/ 0
aesAlgee1 7
.ee7 8
CreateDecryptoree8 G
(eeG H
aesAlgeeH N
.eeN O
KeyeeO R
,eeR S
aesAlgeeT Z
.eeZ [
IVee[ ]
)ee] ^
;ee^ _
usinggg 
(gg 
MemoryStreamgg '
	msDecryptgg( 1
=gg2 3
newgg4 7
MemoryStreamgg8 D
(ggD E
FileggE I
.ggI J
ReadAllBytesggJ V
(ggV W
$str	ggW Å
)
ggÅ Ç
)
ggÇ É
)
ggÉ Ñ
{hh 
usingii 
(ii 
CryptoStreamii +
	csDecryptii, 5
=ii6 7
newii8 ;
CryptoStreamii< H
(iiH I
	msDecryptiiI R
,iiR S
	decryptoriiT ]
,ii] ^
CryptoStreamModeii_ o
.iio p
Readiip t
)iit u
)iiu v
{jj 
usingkk !
(kk" #
StreamReaderkk# /
	srDecryptkk0 9
=kk: ;
newkk< ?
StreamReaderkk@ L
(kkL M
	csDecryptkkM V
)kkV W
)kkW X
{ll 
passwordoo  (
=oo) *
	srDecryptoo+ 4
.oo4 5
	ReadToEndoo5 >
(oo> ?
)oo? @
;oo@ A
}pp 
}qq 
}rr 
}ss 
}tt 
}uu 	
ifvv 

(vv 
IOvv 
.vv 

staticFivevv 
==vv 
$numvv 
)vv 
{ww 	
usingyy 
(yy 
SqlConnectionyy  
dBConnectionyy! -
=yy. /
newyy0 3
SqlConnectionyy4 A
(yyA B
$stryyB x
+yyy z
$stryy{ 
+
yyÄ Å
$str
yyÇ é
+
yyè ê
password
yyë ô
)
yyô ö
)
yyö õ
{zz 
try{{ 
{|| 
dBConnection}}  
.}}  !
Open}}! %
(}}% &
)}}& '
;}}' (
}~~ 
catch 
( 
SqlException #
	exceptSql$ -
)- .
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ 
.
ÅÅ 
Log
ÅÅ !
(
ÅÅ! "
NLog
ÅÅ" &
.
ÅÅ& '
LogLevel
ÅÅ' /
.
ÅÅ/ 0
Warn
ÅÅ0 4
,
ÅÅ4 5
$str
ÅÅ6 V
,
ÅÅV W
	exceptSql
ÅÅX a
)
ÅÅa b
;
ÅÅb c
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
private
àà 
void
àà 
GoodG2B2
àà 
(
àà 
)
àà 
{
ââ 
string
ää 
password
ää 
;
ää 
if
ãã 

(
ãã 
IO
ãã 
.
ãã 

staticFive
ãã 
==
ãã 
$num
ãã 
)
ãã 
{
åå 	
password
çç 
=
çç 
$str
çç 
;
çç 
try
èè 
{
êê 
password
ëë 
=
ëë 
Encoding
ëë #
.
ëë# $
UTF8
ëë$ (
.
ëë( )
	GetString
ëë) 2
(
ëë2 3
File
ëë3 7
.
ëë7 8
ReadAllBytes
ëë8 D
(
ëëD E
$str
ëëE o
)
ëëo p
)
ëëp q
;
ëëq r
}
íí 
catch
ìì 
(
ìì 
IOException
ìì 
exceptIO
ìì '
)
ìì' (
{
îî 
IO
ïï 
.
ïï 
Logger
ïï 
.
ïï 
Log
ïï 
(
ïï 
NLog
ïï "
.
ïï" #
LogLevel
ïï# +
.
ïï+ ,
Warn
ïï, 0
,
ïï0 1
$str
ïï2 K
,
ïïK L
exceptIO
ïïM U
)
ïïU V
;
ïïV W
}
ññ 
{
òò 
using
ôô 
(
ôô &
AesCryptoServiceProvider
ôô /
aesAlg
ôô0 6
=
ôô7 8
new
ôô9 <&
AesCryptoServiceProvider
ôô= U
(
ôôU V
)
ôôV W
)
ôôW X
{
öö 
aesAlg
õõ 
.
õõ 
Key
õõ 
=
õõ  
Encoding
õõ! )
.
õõ) *
UTF8
õõ* .
.
õõ. /
GetBytes
õõ/ 7
(
õõ7 8
$str
õõ8 J
)
õõJ K
;
õõK L
aesAlg
úú 
.
úú 
IV
úú 
=
úú 
new
úú  #
byte
úú$ (
[
úú( )
$num
úú) +
]
úú+ ,
;
úú, -
ICryptoTransform
ûû $
	decryptor
ûû% .
=
ûû/ 0
aesAlg
ûû1 7
.
ûû7 8
CreateDecryptor
ûû8 G
(
ûûG H
aesAlg
ûûH N
.
ûûN O
Key
ûûO R
,
ûûR S
aesAlg
ûûT Z
.
ûûZ [
IV
ûû[ ]
)
ûû] ^
;
ûû^ _
using
†† 
(
†† 
MemoryStream
†† '
	msDecrypt
††( 1
=
††2 3
new
††4 7
MemoryStream
††8 D
(
††D E
File
††E I
.
††I J
ReadAllBytes
††J V
(
††V W
$str††W Å
)††Å Ç
)††Ç É
)††É Ñ
{
°° 
using
¢¢ 
(
¢¢ 
CryptoStream
¢¢ +
	csDecrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
CryptoStream
¢¢< H
(
¢¢H I
	msDecrypt
¢¢I R
,
¢¢R S
	decryptor
¢¢T ]
,
¢¢] ^
CryptoStreamMode
¢¢_ o
.
¢¢o p
Read
¢¢p t
)
¢¢t u
)
¢¢u v
{
££ 
using
§§ !
(
§§" #
StreamReader
§§# /
	srDecrypt
§§0 9
=
§§: ;
new
§§< ?
StreamReader
§§@ L
(
§§L M
	csDecrypt
§§M V
)
§§V W
)
§§W X
{
•• 
password
®®  (
=
®®) *
	srDecrypt
®®+ 4
.
®®4 5
	ReadToEnd
®®5 >
(
®®> ?
)
®®? @
;
®®@ A
}
©© 
}
™™ 
}
´´ 
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
else
ØØ 
{
∞∞ 	
password
≥≥ 
=
≥≥ 
null
≥≥ 
;
≥≥ 
}
¥¥ 	
if
µµ 

(
µµ 
IO
µµ 
.
µµ 

staticFive
µµ 
==
µµ 
$num
µµ 
)
µµ 
{
∂∂ 	
using
∏∏ 
(
∏∏ 
SqlConnection
∏∏  
dBConnection
∏∏! -
=
∏∏. /
new
∏∏0 3
SqlConnection
∏∏4 A
(
∏∏A B
$str
∏∏B x
+
∏∏y z
$str
∏∏{ 
+∏∏Ä Å
$str∏∏Ç é
+∏∏è ê
password∏∏ë ô
)∏∏ô ö
)∏∏ö õ
{
ππ 
try
∫∫ 
{
ªª 
dBConnection
ºº  
.
ºº  !
Open
ºº! %
(
ºº% &
)
ºº& '
;
ºº' (
}
ΩΩ 
catch
ææ 
(
ææ 
SqlException
ææ #
	exceptSql
ææ$ -
)
ææ- .
{
øø 
IO
¿¿ 
.
¿¿ 
Logger
¿¿ 
.
¿¿ 
Log
¿¿ !
(
¿¿! "
NLog
¿¿" &
.
¿¿& '
LogLevel
¿¿' /
.
¿¿/ 0
Warn
¿¿0 4
,
¿¿4 5
$str
¿¿6 V
,
¿¿V W
	exceptSql
¿¿X a
)
¿¿a b
;
¿¿b c
}
¡¡ 
}
¬¬ 
}
√√ 	
}
ƒƒ 
private
«« 
void
«« 
GoodB2G1
«« 
(
«« 
)
«« 
{
»» 
string
…… 
password
…… 
;
…… 
if
   

(
   
IO
   
.
   

staticFive
   
==
   
$num
   
)
   
{
ÀÀ 	
password
ÃÃ 
=
ÃÃ 
$str
ÃÃ 
;
ÃÃ 
try
ŒŒ 
{
œœ 
password
–– 
=
–– 
Encoding
–– #
.
––# $
UTF8
––$ (
.
––( )
	GetString
––) 2
(
––2 3
File
––3 7
.
––7 8
ReadAllBytes
––8 D
(
––D E
$str
––E o
)
––o p
)
––p q
;
––q r
}
—— 
catch
““ 
(
““ 
IOException
““ 
exceptIO
““ '
)
““' (
{
”” 
IO
‘‘ 
.
‘‘ 
Logger
‘‘ 
.
‘‘ 
Log
‘‘ 
(
‘‘ 
NLog
‘‘ "
.
‘‘" #
LogLevel
‘‘# +
.
‘‘+ ,
Warn
‘‘, 0
,
‘‘0 1
$str
‘‘2 K
,
‘‘K L
exceptIO
‘‘M U
)
‘‘U V
;
‘‘V W
}
’’ 
}
◊◊ 	
else
ÿÿ 
{
ŸŸ 	
password
‹‹ 
=
‹‹ 
null
‹‹ 
;
‹‹ 
}
›› 	
if
ﬁﬁ 

(
ﬁﬁ 
IO
ﬁﬁ 
.
ﬁﬁ 

staticFive
ﬁﬁ 
!=
ﬁﬁ 
$num
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 	
IO
·· 
.
·· 
	WriteLine
·· 
(
·· 
$str
·· /
)
··/ 0
;
··0 1
}
‚‚ 	
else
„„ 
{
‰‰ 	
{
ÊÊ 
using
ÁÁ 
(
ÁÁ &
AesCryptoServiceProvider
ÁÁ /
aesAlg
ÁÁ0 6
=
ÁÁ7 8
new
ÁÁ9 <&
AesCryptoServiceProvider
ÁÁ= U
(
ÁÁU V
)
ÁÁV W
)
ÁÁW X
{
ËË 
aesAlg
ÈÈ 
.
ÈÈ 
Key
ÈÈ 
=
ÈÈ  
Encoding
ÈÈ! )
.
ÈÈ) *
UTF8
ÈÈ* .
.
ÈÈ. /
GetBytes
ÈÈ/ 7
(
ÈÈ7 8
$str
ÈÈ8 J
)
ÈÈJ K
;
ÈÈK L
aesAlg
ÍÍ 
.
ÍÍ 
IV
ÍÍ 
=
ÍÍ 
new
ÍÍ  #
byte
ÍÍ$ (
[
ÍÍ( )
$num
ÍÍ) +
]
ÍÍ+ ,
;
ÍÍ, -
ICryptoTransform
ÏÏ $
	decryptor
ÏÏ% .
=
ÏÏ/ 0
aesAlg
ÏÏ1 7
.
ÏÏ7 8
CreateDecryptor
ÏÏ8 G
(
ÏÏG H
aesAlg
ÏÏH N
.
ÏÏN O
Key
ÏÏO R
,
ÏÏR S
aesAlg
ÏÏT Z
.
ÏÏZ [
IV
ÏÏ[ ]
)
ÏÏ] ^
;
ÏÏ^ _
using
ÓÓ 
(
ÓÓ 
MemoryStream
ÓÓ '
	msDecrypt
ÓÓ( 1
=
ÓÓ2 3
new
ÓÓ4 7
MemoryStream
ÓÓ8 D
(
ÓÓD E
File
ÓÓE I
.
ÓÓI J
ReadAllBytes
ÓÓJ V
(
ÓÓV W
$strÓÓW Å
)ÓÓÅ Ç
)ÓÓÇ É
)ÓÓÉ Ñ
{
ÔÔ 
using
 
(
 
CryptoStream
 +
	csDecrypt
, 5
=
6 7
new
8 ;
CryptoStream
< H
(
H I
	msDecrypt
I R
,
R S
	decryptor
T ]
,
] ^
CryptoStreamMode
_ o
.
o p
Read
p t
)
t u
)
u v
{
ÒÒ 
using
ÚÚ !
(
ÚÚ" #
StreamReader
ÚÚ# /
	srDecrypt
ÚÚ0 9
=
ÚÚ: ;
new
ÚÚ< ?
StreamReader
ÚÚ@ L
(
ÚÚL M
	csDecrypt
ÚÚM V
)
ÚÚV W
)
ÚÚW X
{
ÛÛ 
password
ˆˆ  (
=
ˆˆ) *
	srDecrypt
ˆˆ+ 4
.
ˆˆ4 5
	ReadToEnd
ˆˆ5 >
(
ˆˆ> ?
)
ˆˆ? @
;
ˆˆ@ A
}
˜˜ 
}
¯¯ 
}
˘˘ 
}
˙˙ 
}
˚˚ 
using
¸¸ 
(
¸¸ 
SqlConnection
¸¸  
dBConnection
¸¸! -
=
¸¸. /
new
¸¸0 3
SqlConnection
¸¸4 A
(
¸¸A B
$str¸¸B Ñ
+¸¸Ö Ü
password¸¸á è
)¸¸è ê
)¸¸ê ë
{
˝˝ 
try
˛˛ 
{
ˇˇ 
dBConnection
ÄÄ  
.
ÄÄ  !
Open
ÄÄ! %
(
ÄÄ% &
)
ÄÄ& '
;
ÄÄ' (
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
SqlException
ÇÇ #
	exceptSql
ÇÇ$ -
)
ÇÇ- .
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ 
.
ÑÑ 
Log
ÑÑ !
(
ÑÑ! "
NLog
ÑÑ" &
.
ÑÑ& '
LogLevel
ÑÑ' /
.
ÑÑ/ 0
Warn
ÑÑ0 4
,
ÑÑ4 5
$str
ÑÑ6 V
,
ÑÑV W
	exceptSql
ÑÑX a
)
ÑÑa b
;
ÑÑb c
}
ÖÖ 
}
ÜÜ 
}
áá 	
}
àà 
private
ãã 
void
ãã 
GoodB2G2
ãã 
(
ãã 
)
ãã 
{
åå 
string
çç 
password
çç 
;
çç 
if
éé 

(
éé 
IO
éé 
.
éé 

staticFive
éé 
==
éé 
$num
éé 
)
éé 
{
èè 	
password
êê 
=
êê 
$str
êê 
;
êê 
try
íí 
{
ìì 
password
îî 
=
îî 
Encoding
îî #
.
îî# $
UTF8
îî$ (
.
îî( )
	GetString
îî) 2
(
îî2 3
File
îî3 7
.
îî7 8
ReadAllBytes
îî8 D
(
îîD E
$str
îîE o
)
îîo p
)
îîp q
;
îîq r
}
ïï 
catch
ññ 
(
ññ 
IOException
ññ 
exceptIO
ññ '
)
ññ' (
{
óó 
IO
òò 
.
òò 
Logger
òò 
.
òò 
Log
òò 
(
òò 
NLog
òò "
.
òò" #
LogLevel
òò# +
.
òò+ ,
Warn
òò, 0
,
òò0 1
$str
òò2 K
,
òòK L
exceptIO
òòM U
)
òòU V
;
òòV W
}
ôô 
}
õõ 	
else
úú 
{
ùù 	
password
†† 
=
†† 
null
†† 
;
†† 
}
°° 	
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ 

staticFive
¢¢ 
==
¢¢ 
$num
¢¢ 
)
¢¢ 
{
££ 	
{
•• 
using
¶¶ 
(
¶¶ &
AesCryptoServiceProvider
¶¶ /
aesAlg
¶¶0 6
=
¶¶7 8
new
¶¶9 <&
AesCryptoServiceProvider
¶¶= U
(
¶¶U V
)
¶¶V W
)
¶¶W X
{
ßß 
aesAlg
®® 
.
®® 
Key
®® 
=
®®  
Encoding
®®! )
.
®®) *
UTF8
®®* .
.
®®. /
GetBytes
®®/ 7
(
®®7 8
$str
®®8 J
)
®®J K
;
®®K L
aesAlg
©© 
.
©© 
IV
©© 
=
©© 
new
©©  #
byte
©©$ (
[
©©( )
$num
©©) +
]
©©+ ,
;
©©, -
ICryptoTransform
´´ $
	decryptor
´´% .
=
´´/ 0
aesAlg
´´1 7
.
´´7 8
CreateDecryptor
´´8 G
(
´´G H
aesAlg
´´H N
.
´´N O
Key
´´O R
,
´´R S
aesAlg
´´T Z
.
´´Z [
IV
´´[ ]
)
´´] ^
;
´´^ _
using
≠≠ 
(
≠≠ 
MemoryStream
≠≠ '
	msDecrypt
≠≠( 1
=
≠≠2 3
new
≠≠4 7
MemoryStream
≠≠8 D
(
≠≠D E
File
≠≠E I
.
≠≠I J
ReadAllBytes
≠≠J V
(
≠≠V W
$str≠≠W Å
)≠≠Å Ç
)≠≠Ç É
)≠≠É Ñ
{
ÆÆ 
using
ØØ 
(
ØØ 
CryptoStream
ØØ +
	csDecrypt
ØØ, 5
=
ØØ6 7
new
ØØ8 ;
CryptoStream
ØØ< H
(
ØØH I
	msDecrypt
ØØI R
,
ØØR S
	decryptor
ØØT ]
,
ØØ] ^
CryptoStreamMode
ØØ_ o
.
ØØo p
Read
ØØp t
)
ØØt u
)
ØØu v
{
∞∞ 
using
±± !
(
±±" #
StreamReader
±±# /
	srDecrypt
±±0 9
=
±±: ;
new
±±< ?
StreamReader
±±@ L
(
±±L M
	csDecrypt
±±M V
)
±±V W
)
±±W X
{
≤≤ 
password
µµ  (
=
µµ) *
	srDecrypt
µµ+ 4
.
µµ4 5
	ReadToEnd
µµ5 >
(
µµ> ?
)
µµ? @
;
µµ@ A
}
∂∂ 
}
∑∑ 
}
∏∏ 
}
ππ 
}
∫∫ 
using
ªª 
(
ªª 
SqlConnection
ªª  
dBConnection
ªª! -
=
ªª. /
new
ªª0 3
SqlConnection
ªª4 A
(
ªªA B
$strªªB Ñ
+ªªÖ Ü
passwordªªá è
)ªªè ê
)ªªê ë
{
ºº 
try
ΩΩ 
{
ææ 
dBConnection
øø  
.
øø  !
Open
øø! %
(
øø% &
)
øø& '
;
øø' (
}
¿¿ 
catch
¡¡ 
(
¡¡ 
SqlException
¡¡ #
	exceptSql
¡¡$ -
)
¡¡- .
{
¬¬ 
IO
√√ 
.
√√ 
Logger
√√ 
.
√√ 
Log
√√ !
(
√√! "
NLog
√√" &
.
√√& '
LogLevel
√√' /
.
√√/ 0
Warn
√√0 4
,
√√4 5
$str
√√6 V
,
√√V W
	exceptSql
√√X a
)
√√a b
;
√√b c
}
ƒƒ 
}
≈≈ 
}
∆∆ 	
}
«« 
public
…… 

override
…… 
void
…… 
Good
…… 
(
…… 
)
…… 
{
   
GoodG2B1
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodG2B2
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G1
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G2
ŒŒ 
(
ŒŒ 
)
ŒŒ 
;
ŒŒ 
}
œœ 
}—— 
}““ ê∏
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_15.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_15 9
:: ;
AbstractTestCase< L
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
switch"" 
("" 
$num"" 
)"" 
{## 	
case$$ 
$num$$ 
:$$ 
password%% 
=%% 
$str%% 
;%% 
try'' 
{(( 
password)) 
=)) 
Encoding)) #
.))# $
UTF8))$ (
.))( )
	GetString))) 2
())2 3
File))3 7
.))7 8
ReadAllBytes))8 D
())D E
$str))E o
)))o p
)))p q
;))q r
}** 
catch++ 
(++ 
IOException++ 
exceptIO++ '
)++' (
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- 
(-- 
NLog-- "
.--" #
LogLevel--# +
.--+ ,
Warn--, 0
,--0 1
$str--2 K
,--K L
exceptIO--M U
)--U V
;--V W
}.. 
break00 
;00 
default11 
:11 
password44 
=44 
null44 
;44 
break55 
;55 
}66 	
switch77 
(77 
$num77 
)77 
{88 	
case99 
$num99 
:99 
using;; 
(;; 
SqlConnection;;  
dBConnection;;! -
=;;. /
new;;0 3
SqlConnection;;4 A
(;;A B
$str;;B x
+;;y z
$str;;{ 
+
;;Ä Å
$str
;;Ç é
+
;;è ê
password
;;ë ô
)
;;ô ö
)
;;ö õ
{<< 
try== 
{>> 
dBConnection??  
.??  !
Open??! %
(??% &
)??& '
;??' (
}@@ 
catchAA 
(AA 
SqlExceptionAA #
	exceptSqlAA$ -
)AA- .
{BB 
IOCC 
.CC 
LoggerCC 
.CC 
LogCC !
(CC! "
NLogCC" &
.CC& '
LogLevelCC' /
.CC/ 0
WarnCC0 4
,CC4 5
$strCC6 V
,CCV W
	exceptSqlCCX a
)CCa b
;CCb c
}DD 
}EE 
breakFF 
;FF 
defaultGG 
:GG 
IOII 
.II 
	WriteLineII 
(II 
$strII /
)II/ 0
;II0 1
breakJJ 
;JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
passwordRR 
;RR 
switchSS 
(SS 
$numSS 
)SS 
{TT 	
caseUU 
$numUU 
:UU 
passwordXX 
=XX 
nullXX 
;XX 
breakYY 
;YY 
defaultZZ 
:ZZ 
password[[ 
=[[ 
$str[[ 
;[[ 
try]] 
{^^ 
password__ 
=__ 
Encoding__ #
.__# $
UTF8__$ (
.__( )
	GetString__) 2
(__2 3
File__3 7
.__7 8
ReadAllBytes__8 D
(__D E
$str__E o
)__o p
)__p q
;__q r
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
$strcc2 K
,ccK L
exceptIOccM U
)ccU V
;ccV W
}dd 
{ff 
usinggg 
(gg $
AesCryptoServiceProvidergg /
aesAlggg0 6
=gg7 8
newgg9 <$
AesCryptoServiceProvidergg= U
(ggU V
)ggV W
)ggW X
{hh 
aesAlgii 
.ii 
Keyii 
=ii  
Encodingii! )
.ii) *
UTF8ii* .
.ii. /
GetBytesii/ 7
(ii7 8
$strii8 J
)iiJ K
;iiK L
aesAlgjj 
.jj 
IVjj 
=jj 
newjj  #
bytejj$ (
[jj( )
$numjj) +
]jj+ ,
;jj, -
ICryptoTransformll $
	decryptorll% .
=ll/ 0
aesAlgll1 7
.ll7 8
CreateDecryptorll8 G
(llG H
aesAlgllH N
.llN O
KeyllO R
,llR S
aesAlgllT Z
.llZ [
IVll[ ]
)ll] ^
;ll^ _
usingnn 
(nn 
MemoryStreamnn '
	msDecryptnn( 1
=nn2 3
newnn4 7
MemoryStreamnn8 D
(nnD E
FilennE I
.nnI J
ReadAllBytesnnJ V
(nnV W
$str	nnW Å
)
nnÅ Ç
)
nnÇ É
)
nnÉ Ñ
{oo 
usingpp 
(pp 
CryptoStreampp +
	csDecryptpp, 5
=pp6 7
newpp8 ;
CryptoStreampp< H
(ppH I
	msDecryptppI R
,ppR S
	decryptorppT ]
,pp] ^
CryptoStreamModepp_ o
.ppo p
Readppp t
)ppt u
)ppu v
{qq 
usingrr !
(rr" #
StreamReaderrr# /
	srDecryptrr0 9
=rr: ;
newrr< ?
StreamReaderrr@ L
(rrL M
	csDecryptrrM V
)rrV W
)rrW X
{ss 
passwordvv  (
=vv) *
	srDecryptvv+ 4
.vv4 5
	ReadToEndvv5 >
(vv> ?
)vv? @
;vv@ A
}ww 
}xx 
}yy 
}zz 
}{{ 
break|| 
;|| 
}}} 	
switch~~ 
(~~ 
$num~~ 
)~~ 
{ 	
case
ÄÄ 
$num
ÄÄ 
:
ÄÄ 
using
ÇÇ 
(
ÇÇ 
SqlConnection
ÇÇ  
dBConnection
ÇÇ! -
=
ÇÇ. /
new
ÇÇ0 3
SqlConnection
ÇÇ4 A
(
ÇÇA B
$str
ÇÇB x
+
ÇÇy z
$str
ÇÇ{ 
+ÇÇÄ Å
$strÇÇÇ é
+ÇÇè ê
passwordÇÇë ô
)ÇÇô ö
)ÇÇö õ
{
ÉÉ 
try
ÑÑ 
{
ÖÖ 
dBConnection
ÜÜ  
.
ÜÜ  !
Open
ÜÜ! %
(
ÜÜ% &
)
ÜÜ& '
;
ÜÜ' (
}
áá 
catch
àà 
(
àà 
SqlException
àà #
	exceptSql
àà$ -
)
àà- .
{
ââ 
IO
ää 
.
ää 
Logger
ää 
.
ää 
Log
ää !
(
ää! "
NLog
ää" &
.
ää& '
LogLevel
ää' /
.
ää/ 0
Warn
ää0 4
,
ää4 5
$str
ää6 V
,
ääV W
	exceptSql
ääX a
)
ääa b
;
ääb c
}
ãã 
}
åå 
break
çç 
;
çç 
default
éé 
:
éé 
IO
êê 
.
êê 
	WriteLine
êê 
(
êê 
$str
êê /
)
êê/ 0
;
êê0 1
break
ëë 
;
ëë 
}
íí 	
}
ìì 
private
ññ 
void
ññ 
GoodG2B2
ññ 
(
ññ 
)
ññ 
{
óó 
string
òò 
password
òò 
;
òò 
switch
ôô 
(
ôô 
$num
ôô 
)
ôô 
{
öö 	
case
õõ 
$num
õõ 
:
õõ 
password
úú 
=
úú 
$str
úú 
;
úú 
try
ûû 
{
üü 
password
†† 
=
†† 
Encoding
†† #
.
††# $
UTF8
††$ (
.
††( )
	GetString
††) 2
(
††2 3
File
††3 7
.
††7 8
ReadAllBytes
††8 D
(
††D E
$str
††E o
)
††o p
)
††p q
;
††q r
}
°° 
catch
¢¢ 
(
¢¢ 
IOException
¢¢ 
exceptIO
¢¢ '
)
¢¢' (
{
££ 
IO
§§ 
.
§§ 
Logger
§§ 
.
§§ 
Log
§§ 
(
§§ 
NLog
§§ "
.
§§" #
LogLevel
§§# +
.
§§+ ,
Warn
§§, 0
,
§§0 1
$str
§§2 K
,
§§K L
exceptIO
§§M U
)
§§U V
;
§§V W
}
•• 
{
ßß 
using
®® 
(
®® &
AesCryptoServiceProvider
®® /
aesAlg
®®0 6
=
®®7 8
new
®®9 <&
AesCryptoServiceProvider
®®= U
(
®®U V
)
®®V W
)
®®W X
{
©© 
aesAlg
™™ 
.
™™ 
Key
™™ 
=
™™  
Encoding
™™! )
.
™™) *
UTF8
™™* .
.
™™. /
GetBytes
™™/ 7
(
™™7 8
$str
™™8 J
)
™™J K
;
™™K L
aesAlg
´´ 
.
´´ 
IV
´´ 
=
´´ 
new
´´  #
byte
´´$ (
[
´´( )
$num
´´) +
]
´´+ ,
;
´´, -
ICryptoTransform
≠≠ $
	decryptor
≠≠% .
=
≠≠/ 0
aesAlg
≠≠1 7
.
≠≠7 8
CreateDecryptor
≠≠8 G
(
≠≠G H
aesAlg
≠≠H N
.
≠≠N O
Key
≠≠O R
,
≠≠R S
aesAlg
≠≠T Z
.
≠≠Z [
IV
≠≠[ ]
)
≠≠] ^
;
≠≠^ _
using
ØØ 
(
ØØ 
MemoryStream
ØØ '
	msDecrypt
ØØ( 1
=
ØØ2 3
new
ØØ4 7
MemoryStream
ØØ8 D
(
ØØD E
File
ØØE I
.
ØØI J
ReadAllBytes
ØØJ V
(
ØØV W
$strØØW Å
)ØØÅ Ç
)ØØÇ É
)ØØÉ Ñ
{
∞∞ 
using
±± 
(
±± 
CryptoStream
±± +
	csDecrypt
±±, 5
=
±±6 7
new
±±8 ;
CryptoStream
±±< H
(
±±H I
	msDecrypt
±±I R
,
±±R S
	decryptor
±±T ]
,
±±] ^
CryptoStreamMode
±±_ o
.
±±o p
Read
±±p t
)
±±t u
)
±±u v
{
≤≤ 
using
≥≥ !
(
≥≥" #
StreamReader
≥≥# /
	srDecrypt
≥≥0 9
=
≥≥: ;
new
≥≥< ?
StreamReader
≥≥@ L
(
≥≥L M
	csDecrypt
≥≥M V
)
≥≥V W
)
≥≥W X
{
¥¥ 
password
∑∑  (
=
∑∑) *
	srDecrypt
∑∑+ 4
.
∑∑4 5
	ReadToEnd
∑∑5 >
(
∑∑> ?
)
∑∑? @
;
∑∑@ A
}
∏∏ 
}
ππ 
}
∫∫ 
}
ªª 
}
ºº 
break
ΩΩ 
;
ΩΩ 
default
ææ 
:
ææ 
password
¡¡ 
=
¡¡ 
null
¡¡ 
;
¡¡ 
break
¬¬ 
;
¬¬ 
}
√√ 	
switch
ƒƒ 
(
ƒƒ 
$num
ƒƒ 
)
ƒƒ 
{
≈≈ 	
case
∆∆ 
$num
∆∆ 
:
∆∆ 
using
»» 
(
»» 
SqlConnection
»»  
dBConnection
»»! -
=
»». /
new
»»0 3
SqlConnection
»»4 A
(
»»A B
$str
»»B x
+
»»y z
$str
»»{ 
+»»Ä Å
$str»»Ç é
+»»è ê
password»»ë ô
)»»ô ö
)»»ö õ
{
…… 
try
   
{
ÀÀ 
dBConnection
ÃÃ  
.
ÃÃ  !
Open
ÃÃ! %
(
ÃÃ% &
)
ÃÃ& '
;
ÃÃ' (
}
ÕÕ 
catch
ŒŒ 
(
ŒŒ 
SqlException
ŒŒ #
	exceptSql
ŒŒ$ -
)
ŒŒ- .
{
œœ 
IO
–– 
.
–– 
Logger
–– 
.
–– 
Log
–– !
(
––! "
NLog
––" &
.
––& '
LogLevel
––' /
.
––/ 0
Warn
––0 4
,
––4 5
$str
––6 V
,
––V W
	exceptSql
––X a
)
––a b
;
––b c
}
—— 
}
““ 
break
”” 
;
”” 
default
‘‘ 
:
‘‘ 
IO
÷÷ 
.
÷÷ 
	WriteLine
÷÷ 
(
÷÷ 
$str
÷÷ /
)
÷÷/ 0
;
÷÷0 1
break
◊◊ 
;
◊◊ 
}
ÿÿ 	
}
ŸŸ 
private
‹‹ 
void
‹‹ 
GoodB2G1
‹‹ 
(
‹‹ 
)
‹‹ 
{
›› 
string
ﬁﬁ 
password
ﬁﬁ 
;
ﬁﬁ 
switch
ﬂﬂ 
(
ﬂﬂ 
$num
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 	
case
·· 
$num
·· 
:
·· 
password
‚‚ 
=
‚‚ 
$str
‚‚ 
;
‚‚ 
try
‰‰ 
{
ÂÂ 
password
ÊÊ 
=
ÊÊ 
Encoding
ÊÊ #
.
ÊÊ# $
UTF8
ÊÊ$ (
.
ÊÊ( )
	GetString
ÊÊ) 2
(
ÊÊ2 3
File
ÊÊ3 7
.
ÊÊ7 8
ReadAllBytes
ÊÊ8 D
(
ÊÊD E
$str
ÊÊE o
)
ÊÊo p
)
ÊÊp q
;
ÊÊq r
}
ÁÁ 
catch
ËË 
(
ËË 
IOException
ËË 
exceptIO
ËË '
)
ËË' (
{
ÈÈ 
IO
ÍÍ 
.
ÍÍ 
Logger
ÍÍ 
.
ÍÍ 
Log
ÍÍ 
(
ÍÍ 
NLog
ÍÍ "
.
ÍÍ" #
LogLevel
ÍÍ# +
.
ÍÍ+ ,
Warn
ÍÍ, 0
,
ÍÍ0 1
$str
ÍÍ2 K
,
ÍÍK L
exceptIO
ÍÍM U
)
ÍÍU V
;
ÍÍV W
}
ÎÎ 
break
ÌÌ 
;
ÌÌ 
default
ÓÓ 
:
ÓÓ 
password
ÒÒ 
=
ÒÒ 
null
ÒÒ 
;
ÒÒ 
break
ÚÚ 
;
ÚÚ 
}
ÛÛ 	
switch
ÙÙ 
(
ÙÙ 
$num
ÙÙ 
)
ÙÙ 
{
ıı 	
case
ˆˆ 
$num
ˆˆ 
:
ˆˆ 
IO
¯¯ 
.
¯¯ 
	WriteLine
¯¯ 
(
¯¯ 
$str
¯¯ /
)
¯¯/ 0
;
¯¯0 1
break
˘˘ 
;
˘˘ 
default
˙˙ 
:
˙˙ 
{
¸¸ 	
using
˝˝ 
(
˝˝ &
AesCryptoServiceProvider
˝˝ +
aesAlg
˝˝, 2
=
˝˝3 4
new
˝˝5 8&
AesCryptoServiceProvider
˝˝9 Q
(
˝˝Q R
)
˝˝R S
)
˝˝S T
{
˛˛ 
aesAlg
ˇˇ 
.
ˇˇ 
Key
ˇˇ 
=
ˇˇ 
Encoding
ˇˇ %
.
ˇˇ% &
UTF8
ˇˇ& *
.
ˇˇ* +
GetBytes
ˇˇ+ 3
(
ˇˇ3 4
$str
ˇˇ4 F
)
ˇˇF G
;
ˇˇG H
aesAlg
ÄÄ 
.
ÄÄ 
IV
ÄÄ 
=
ÄÄ 
new
ÄÄ 
byte
ÄÄ  $
[
ÄÄ$ %
$num
ÄÄ% '
]
ÄÄ' (
;
ÄÄ( )
ICryptoTransform
ÇÇ  
	decryptor
ÇÇ! *
=
ÇÇ+ ,
aesAlg
ÇÇ- 3
.
ÇÇ3 4
CreateDecryptor
ÇÇ4 C
(
ÇÇC D
aesAlg
ÇÇD J
.
ÇÇJ K
Key
ÇÇK N
,
ÇÇN O
aesAlg
ÇÇP V
.
ÇÇV W
IV
ÇÇW Y
)
ÇÇY Z
;
ÇÇZ [
using
ÑÑ 
(
ÑÑ 
MemoryStream
ÑÑ #
	msDecrypt
ÑÑ$ -
=
ÑÑ. /
new
ÑÑ0 3
MemoryStream
ÑÑ4 @
(
ÑÑ@ A
File
ÑÑA E
.
ÑÑE F
ReadAllBytes
ÑÑF R
(
ÑÑR S
$str
ÑÑS }
)
ÑÑ} ~
)
ÑÑ~ 
)ÑÑ Ä
{
ÖÖ 
using
ÜÜ 
(
ÜÜ 
CryptoStream
ÜÜ '
	csDecrypt
ÜÜ( 1
=
ÜÜ2 3
new
ÜÜ4 7
CryptoStream
ÜÜ8 D
(
ÜÜD E
	msDecrypt
ÜÜE N
,
ÜÜN O
	decryptor
ÜÜP Y
,
ÜÜY Z
CryptoStreamMode
ÜÜ[ k
.
ÜÜk l
Read
ÜÜl p
)
ÜÜp q
)
ÜÜq r
{
áá 
using
àà 
(
àà 
StreamReader
àà +
	srDecrypt
àà, 5
=
àà6 7
new
àà8 ;
StreamReader
àà< H
(
ààH I
	csDecrypt
ààI R
)
ààR S
)
ààS T
{
ââ 
password
åå $
=
åå% &
	srDecrypt
åå' 0
.
åå0 1
	ReadToEnd
åå1 :
(
åå: ;
)
åå; <
;
åå< =
}
çç 
}
éé 
}
èè 
}
êê 
}
ëë 	
using
íí 
(
íí 
SqlConnection
íí 
dBConnection
íí )
=
íí* +
new
íí, /
SqlConnection
íí0 =
(
íí= >
$stríí> Ä
+ííÅ Ç
passwordííÉ ã
)ííã å
)ííå ç
{
ìì 	
try
îî 
{
ïï 
dBConnection
ññ 
.
ññ 
Open
ññ !
(
ññ! "
)
ññ" #
;
ññ# $
}
óó 
catch
òò 
(
òò 
SqlException
òò 
	exceptSql
òò  )
)
òò) *
{
ôô 
IO
öö 
.
öö 
Logger
öö 
.
öö 
Log
öö 
(
öö 
NLog
öö "
.
öö" #
LogLevel
öö# +
.
öö+ ,
Warn
öö, 0
,
öö0 1
$str
öö2 R
,
ööR S
	exceptSql
ööT ]
)
öö] ^
;
öö^ _
}
õõ 
}
úú 	
break
ùù 
;
ùù 
}
ûû 	
}
üü 
private
¢¢ 
void
¢¢ 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
string
§§ 
password
§§ 
;
§§ 
switch
•• 
(
•• 
$num
•• 
)
•• 
{
¶¶ 	
case
ßß 
$num
ßß 
:
ßß 
password
®® 
=
®® 
$str
®® 
;
®® 
try
™™ 
{
´´ 
password
¨¨ 
=
¨¨ 
Encoding
¨¨ #
.
¨¨# $
UTF8
¨¨$ (
.
¨¨( )
	GetString
¨¨) 2
(
¨¨2 3
File
¨¨3 7
.
¨¨7 8
ReadAllBytes
¨¨8 D
(
¨¨D E
$str
¨¨E o
)
¨¨o p
)
¨¨p q
;
¨¨q r
}
≠≠ 
catch
ÆÆ 
(
ÆÆ 
IOException
ÆÆ 
exceptIO
ÆÆ '
)
ÆÆ' (
{
ØØ 
IO
∞∞ 
.
∞∞ 
Logger
∞∞ 
.
∞∞ 
Log
∞∞ 
(
∞∞ 
NLog
∞∞ "
.
∞∞" #
LogLevel
∞∞# +
.
∞∞+ ,
Warn
∞∞, 0
,
∞∞0 1
$str
∞∞2 K
,
∞∞K L
exceptIO
∞∞M U
)
∞∞U V
;
∞∞V W
}
±± 
break
≥≥ 
;
≥≥ 
default
¥¥ 
:
¥¥ 
password
∑∑ 
=
∑∑ 
null
∑∑ 
;
∑∑ 
break
∏∏ 
;
∏∏ 
}
ππ 	
switch
∫∫ 
(
∫∫ 
$num
∫∫ 
)
∫∫ 
{
ªª 	
case
ºº 
$num
ºº 
:
ºº 
{
ææ 	
using
øø 
(
øø &
AesCryptoServiceProvider
øø +
aesAlg
øø, 2
=
øø3 4
new
øø5 8&
AesCryptoServiceProvider
øø9 Q
(
øøQ R
)
øøR S
)
øøS T
{
¿¿ 
aesAlg
¡¡ 
.
¡¡ 
Key
¡¡ 
=
¡¡ 
Encoding
¡¡ %
.
¡¡% &
UTF8
¡¡& *
.
¡¡* +
GetBytes
¡¡+ 3
(
¡¡3 4
$str
¡¡4 F
)
¡¡F G
;
¡¡G H
aesAlg
¬¬ 
.
¬¬ 
IV
¬¬ 
=
¬¬ 
new
¬¬ 
byte
¬¬  $
[
¬¬$ %
$num
¬¬% '
]
¬¬' (
;
¬¬( )
ICryptoTransform
ƒƒ  
	decryptor
ƒƒ! *
=
ƒƒ+ ,
aesAlg
ƒƒ- 3
.
ƒƒ3 4
CreateDecryptor
ƒƒ4 C
(
ƒƒC D
aesAlg
ƒƒD J
.
ƒƒJ K
Key
ƒƒK N
,
ƒƒN O
aesAlg
ƒƒP V
.
ƒƒV W
IV
ƒƒW Y
)
ƒƒY Z
;
ƒƒZ [
using
∆∆ 
(
∆∆ 
MemoryStream
∆∆ #
	msDecrypt
∆∆$ -
=
∆∆. /
new
∆∆0 3
MemoryStream
∆∆4 @
(
∆∆@ A
File
∆∆A E
.
∆∆E F
ReadAllBytes
∆∆F R
(
∆∆R S
$str
∆∆S }
)
∆∆} ~
)
∆∆~ 
)∆∆ Ä
{
«« 
using
»» 
(
»» 
CryptoStream
»» '
	csDecrypt
»»( 1
=
»»2 3
new
»»4 7
CryptoStream
»»8 D
(
»»D E
	msDecrypt
»»E N
,
»»N O
	decryptor
»»P Y
,
»»Y Z
CryptoStreamMode
»»[ k
.
»»k l
Read
»»l p
)
»»p q
)
»»q r
{
…… 
using
   
(
   
StreamReader
   +
	srDecrypt
  , 5
=
  6 7
new
  8 ;
StreamReader
  < H
(
  H I
	csDecrypt
  I R
)
  R S
)
  S T
{
ÀÀ 
password
ŒŒ $
=
ŒŒ% &
	srDecrypt
ŒŒ' 0
.
ŒŒ0 1
	ReadToEnd
ŒŒ1 :
(
ŒŒ: ;
)
ŒŒ; <
;
ŒŒ< =
}
œœ 
}
–– 
}
—— 
}
““ 
}
”” 	
using
‘‘ 
(
‘‘ 
SqlConnection
‘‘ 
dBConnection
‘‘ )
=
‘‘* +
new
‘‘, /
SqlConnection
‘‘0 =
(
‘‘= >
$str‘‘> Ä
+‘‘Å Ç
password‘‘É ã
)‘‘ã å
)‘‘å ç
{
’’ 	
try
÷÷ 
{
◊◊ 
dBConnection
ÿÿ 
.
ÿÿ 
Open
ÿÿ !
(
ÿÿ! "
)
ÿÿ" #
;
ÿÿ# $
}
ŸŸ 
catch
⁄⁄ 
(
⁄⁄ 
SqlException
⁄⁄ 
	exceptSql
⁄⁄  )
)
⁄⁄) *
{
€€ 
IO
‹‹ 
.
‹‹ 
Logger
‹‹ 
.
‹‹ 
Log
‹‹ 
(
‹‹ 
NLog
‹‹ "
.
‹‹" #
LogLevel
‹‹# +
.
‹‹+ ,
Warn
‹‹, 0
,
‹‹0 1
$str
‹‹2 R
,
‹‹R S
	exceptSql
‹‹T ]
)
‹‹] ^
;
‹‹^ _
}
›› 
}
ﬁﬁ 	
break
ﬂﬂ 
;
ﬂﬂ 
default
‡‡ 
:
‡‡ 
IO
‚‚ 
.
‚‚ 
	WriteLine
‚‚ 
(
‚‚ 
$str
‚‚ /
)
‚‚/ 0
;
‚‚0 1
break
„„ 
;
„„ 
}
‰‰ 	
}
ÂÂ 
public
ÁÁ 

override
ÁÁ 
void
ÁÁ 
Good
ÁÁ 
(
ÁÁ 
)
ÁÁ 
{
ËË 
GoodG2B1
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
GoodG2B2
ÍÍ 
(
ÍÍ 
)
ÍÍ 
;
ÍÍ 
GoodB2G1
ÎÎ 
(
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodB2G2
ÏÏ 
(
ÏÏ 
)
ÏÏ 
;
ÏÏ 
}
ÌÌ 
}ÔÔ 
} ﬁ[
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_16.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_16 9
:: ;
AbstractTestCase< L
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
while"" 
("" 
true"" 
)"" 
{## 	
password$$ 
=$$ 
$str$$ 
;$$ 
try&& 
{'' 
password(( 
=(( 
Encoding(( #
.((# $
UTF8(($ (
.((( )
	GetString(() 2
(((2 3
File((3 7
.((7 8
ReadAllBytes((8 D
(((D E
$str((E o
)((o p
)((p q
;((q r
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 K
,,,K L
exceptIO,,M U
),,U V
;,,V W
}-- 
break// 
;// 
}00 	
while11 
(11 
true11 
)11 
{22 	
using44 
(44 
SqlConnection44  
dBConnection44! -
=44. /
new440 3
SqlConnection444 A
(44A B
$str44B x
+44y z
$str44{ 
+
44Ä Å
$str
44Ç é
+
44è ê
password
44ë ô
)
44ô ö
)
44ö õ
{55 
try66 
{77 
dBConnection88  
.88  !
Open88! %
(88% &
)88& '
;88' (
}99 
catch:: 
(:: 
SqlException:: #
	exceptSql::$ -
)::- .
{;; 
IO<< 
.<< 
Logger<< 
.<< 
Log<< !
(<<! "
NLog<<" &
.<<& '
LogLevel<<' /
.<</ 0
Warn<<0 4
,<<4 5
$str<<6 V
,<<V W
	exceptSql<<X a
)<<a b
;<<b c
}== 
}>> 
break?? 
;?? 
}@@ 	
}AA 
privateEE 
voidEE 
GoodG2BEE 
(EE 
)EE 
{FF 
stringGG 
passwordGG 
;GG 
whileHH 
(HH 
trueHH 
)HH 
{II 	
passwordJJ 
=JJ 
$strJJ 
;JJ 
tryLL 
{MM 
passwordNN 
=NN 
EncodingNN #
.NN# $
UTF8NN$ (
.NN( )
	GetStringNN) 2
(NN2 3
FileNN3 7
.NN7 8
ReadAllBytesNN8 D
(NND E
$strNNE o
)NNo p
)NNp q
;NNq r
}OO 
catchPP 
(PP 
IOExceptionPP 
exceptIOPP '
)PP' (
{QQ 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
$strRR2 K
,RRK L
exceptIORRM U
)RRU V
;RRV W
}SS 
{UU 
usingVV 
(VV $
AesCryptoServiceProviderVV /
aesAlgVV0 6
=VV7 8
newVV9 <$
AesCryptoServiceProviderVV= U
(VVU V
)VVV W
)VVW X
{WW 
aesAlgXX 
.XX 
KeyXX 
=XX  
EncodingXX! )
.XX) *
UTF8XX* .
.XX. /
GetBytesXX/ 7
(XX7 8
$strXX8 J
)XXJ K
;XXK L
aesAlgYY 
.YY 
IVYY 
=YY 
newYY  #
byteYY$ (
[YY( )
$numYY) +
]YY+ ,
;YY, -
ICryptoTransform[[ $
	decryptor[[% .
=[[/ 0
aesAlg[[1 7
.[[7 8
CreateDecryptor[[8 G
([[G H
aesAlg[[H N
.[[N O
Key[[O R
,[[R S
aesAlg[[T Z
.[[Z [
IV[[[ ]
)[[] ^
;[[^ _
using]] 
(]] 
MemoryStream]] '
	msDecrypt]]( 1
=]]2 3
new]]4 7
MemoryStream]]8 D
(]]D E
File]]E I
.]]I J
ReadAllBytes]]J V
(]]V W
$str	]]W Å
)
]]Å Ç
)
]]Ç É
)
]]É Ñ
{^^ 
using__ 
(__ 
CryptoStream__ +
	csDecrypt__, 5
=__6 7
new__8 ;
CryptoStream__< H
(__H I
	msDecrypt__I R
,__R S
	decryptor__T ]
,__] ^
CryptoStreamMode___ o
.__o p
Read__p t
)__t u
)__u v
{`` 
usingaa !
(aa" #
StreamReaderaa# /
	srDecryptaa0 9
=aa: ;
newaa< ?
StreamReaderaa@ L
(aaL M
	csDecryptaaM V
)aaV W
)aaW X
{bb 
passwordee  (
=ee) *
	srDecryptee+ 4
.ee4 5
	ReadToEndee5 >
(ee> ?
)ee? @
;ee@ A
}ff 
}gg 
}hh 
}ii 
}jj 
breakkk 
;kk 
}ll 	
whilemm 
(mm 
truemm 
)mm 
{nn 	
usingpp 
(pp 
SqlConnectionpp  
dBConnectionpp! -
=pp. /
newpp0 3
SqlConnectionpp4 A
(ppA B
$strppB x
+ppy z
$strpp{ 
+
ppÄ Å
$str
ppÇ é
+
ppè ê
password
ppë ô
)
ppô ö
)
ppö õ
{qq 
tryrr 
{ss 
dBConnectiontt  
.tt  !
Opentt! %
(tt% &
)tt& '
;tt' (
}uu 
catchvv 
(vv 
SqlExceptionvv #
	exceptSqlvv$ -
)vv- .
{ww 
IOxx 
.xx 
Loggerxx 
.xx 
Logxx !
(xx! "
NLogxx" &
.xx& '
LogLevelxx' /
.xx/ 0
Warnxx0 4
,xx4 5
$strxx6 V
,xxV W
	exceptSqlxxX a
)xxa b
;xxb c
}yy 
}zz 
break{{ 
;{{ 
}|| 	
}}} 
private
ÄÄ 
void
ÄÄ 
GoodB2G
ÄÄ 
(
ÄÄ 
)
ÄÄ 
{
ÅÅ 
string
ÇÇ 
password
ÇÇ 
;
ÇÇ 
while
ÉÉ 
(
ÉÉ 
true
ÉÉ 
)
ÉÉ 
{
ÑÑ 	
password
ÖÖ 
=
ÖÖ 
$str
ÖÖ 
;
ÖÖ 
try
áá 
{
àà 
password
ââ 
=
ââ 
Encoding
ââ #
.
ââ# $
UTF8
ââ$ (
.
ââ( )
	GetString
ââ) 2
(
ââ2 3
File
ââ3 7
.
ââ7 8
ReadAllBytes
ââ8 D
(
ââD E
$str
ââE o
)
ââo p
)
ââp q
;
ââq r
}
ää 
catch
ãã 
(
ãã 
IOException
ãã 
exceptIO
ãã '
)
ãã' (
{
åå 
IO
çç 
.
çç 
Logger
çç 
.
çç 
Log
çç 
(
çç 
NLog
çç "
.
çç" #
LogLevel
çç# +
.
çç+ ,
Warn
çç, 0
,
çç0 1
$str
çç2 K
,
ççK L
exceptIO
ççM U
)
ççU V
;
ççV W
}
éé 
break
êê 
;
êê 
}
ëë 	
while
íí 
(
íí 
true
íí 
)
íí 
{
ìì 	
{
ïï 
using
ññ 
(
ññ &
AesCryptoServiceProvider
ññ /
aesAlg
ññ0 6
=
ññ7 8
new
ññ9 <&
AesCryptoServiceProvider
ññ= U
(
ññU V
)
ññV W
)
ññW X
{
óó 
aesAlg
òò 
.
òò 
Key
òò 
=
òò  
Encoding
òò! )
.
òò) *
UTF8
òò* .
.
òò. /
GetBytes
òò/ 7
(
òò7 8
$str
òò8 J
)
òòJ K
;
òòK L
aesAlg
ôô 
.
ôô 
IV
ôô 
=
ôô 
new
ôô  #
byte
ôô$ (
[
ôô( )
$num
ôô) +
]
ôô+ ,
;
ôô, -
ICryptoTransform
õõ $
	decryptor
õõ% .
=
õõ/ 0
aesAlg
õõ1 7
.
õõ7 8
CreateDecryptor
õõ8 G
(
õõG H
aesAlg
õõH N
.
õõN O
Key
õõO R
,
õõR S
aesAlg
õõT Z
.
õõZ [
IV
õõ[ ]
)
õõ] ^
;
õõ^ _
using
ùù 
(
ùù 
MemoryStream
ùù '
	msDecrypt
ùù( 1
=
ùù2 3
new
ùù4 7
MemoryStream
ùù8 D
(
ùùD E
File
ùùE I
.
ùùI J
ReadAllBytes
ùùJ V
(
ùùV W
$strùùW Å
)ùùÅ Ç
)ùùÇ É
)ùùÉ Ñ
{
ûû 
using
üü 
(
üü 
CryptoStream
üü +
	csDecrypt
üü, 5
=
üü6 7
new
üü8 ;
CryptoStream
üü< H
(
üüH I
	msDecrypt
üüI R
,
üüR S
	decryptor
üüT ]
,
üü] ^
CryptoStreamMode
üü_ o
.
üüo p
Read
üüp t
)
üüt u
)
üüu v
{
†† 
using
°° !
(
°°" #
StreamReader
°°# /
	srDecrypt
°°0 9
=
°°: ;
new
°°< ?
StreamReader
°°@ L
(
°°L M
	csDecrypt
°°M V
)
°°V W
)
°°W X
{
¢¢ 
password
••  (
=
••) *
	srDecrypt
••+ 4
.
••4 5
	ReadToEnd
••5 >
(
••> ?
)
••? @
;
••@ A
}
¶¶ 
}
ßß 
}
®® 
}
©© 
}
™™ 
using
´´ 
(
´´ 
SqlConnection
´´  
dBConnection
´´! -
=
´´. /
new
´´0 3
SqlConnection
´´4 A
(
´´A B
$str´´B Ñ
+´´Ö Ü
password´´á è
)´´è ê
)´´ê ë
{
¨¨ 
try
≠≠ 
{
ÆÆ 
dBConnection
ØØ  
.
ØØ  !
Open
ØØ! %
(
ØØ% &
)
ØØ& '
;
ØØ' (
}
∞∞ 
catch
±± 
(
±± 
SqlException
±± #
	exceptSql
±±$ -
)
±±- .
{
≤≤ 
IO
≥≥ 
.
≥≥ 
Logger
≥≥ 
.
≥≥ 
Log
≥≥ !
(
≥≥! "
NLog
≥≥" &
.
≥≥& '
LogLevel
≥≥' /
.
≥≥/ 0
Warn
≥≥0 4
,
≥≥4 5
$str
≥≥6 V
,
≥≥V W
	exceptSql
≥≥X a
)
≥≥a b
;
≥≥b c
}
¥¥ 
}
µµ 
break
∂∂ 
;
∂∂ 
}
∑∑ 	
}
∏∏ 
public
∫∫ 

override
∫∫ 
void
∫∫ 
Good
∫∫ 
(
∫∫ 
)
∫∫ 
{
ªª 
GoodG2B
ºº 
(
ºº 
)
ºº 
;
ºº 
GoodB2G
ΩΩ 
(
ΩΩ 
)
ΩΩ 
;
ΩΩ 
}
ææ 
}¿¿ 
}¡¡ õ[
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_17.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_17 9
:: ;
AbstractTestCase< L
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
password&& 
=&& 
$str&& 
;&& 
try(( 
{)) 	
password** 
=** 
Encoding** 
.**  
UTF8**  $
.**$ %
	GetString**% .
(**. /
File**/ 3
.**3 4
ReadAllBytes**4 @
(**@ A
$str**A k
)**k l
)**l m
;**m n
}++ 	
catch,, 
(,, 
IOException,, 
exceptIO,, #
),,# $
{-- 	
IO.. 
... 
Logger.. 
... 
Log.. 
(.. 
NLog.. 
... 
LogLevel.. '
...' (
Warn..( ,
,.., -
$str... G
,..G H
exceptIO..I Q
)..Q R
;..R S
}// 	
for11 
(11 
int11 
j11 
=11 
$num11 
;11 
j11 
<11 
$num11 
;11 
j11  
++11  "
)11" #
{22 	
using44 
(44 
SqlConnection44  
dBConnection44! -
=44. /
new440 3
SqlConnection444 A
(44A B
$str44B x
+44y z
$str44{ 
+
44Ä Å
$str
44Ç é
+
44è ê
password
44ë ô
)
44ô ö
)
44ö õ
{55 
try66 
{77 
dBConnection88  
.88  !
Open88! %
(88% &
)88& '
;88' (
}99 
catch:: 
(:: 
SqlException:: #
	exceptSql::$ -
)::- .
{;; 
IO<< 
.<< 
Logger<< 
.<< 
Log<< !
(<<! "
NLog<<" &
.<<& '
LogLevel<<' /
.<</ 0
Warn<<0 4
,<<4 5
$str<<6 V
,<<V W
	exceptSql<<X a
)<<a b
;<<b c
}== 
}>> 
}?? 	
}@@ 
privateDD 
voidDD 
GoodG2BDD 
(DD 
)DD 
{EE 
stringFF 
passwordFF 
;FF 
passwordGG 
=GG 
$strGG 
;GG 
tryII 
{JJ 	
passwordKK 
=KK 
EncodingKK 
.KK  
UTF8KK  $
.KK$ %
	GetStringKK% .
(KK. /
FileKK/ 3
.KK3 4
ReadAllBytesKK4 @
(KK@ A
$strKKA k
)KKk l
)KKl m
;KKm n
}LL 	
catchMM 
(MM 
IOExceptionMM 
exceptIOMM #
)MM# $
{NN 	
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO 
.OO 
LogLevelOO '
.OO' (
WarnOO( ,
,OO, -
$strOO. G
,OOG H
exceptIOOOI Q
)OOQ R
;OOR S
}PP 	
{RR 	
usingSS 
(SS $
AesCryptoServiceProviderSS +
aesAlgSS, 2
=SS3 4
newSS5 8$
AesCryptoServiceProviderSS9 Q
(SSQ R
)SSR S
)SSS T
{TT 
aesAlgUU 
.UU 
KeyUU 
=UU 
EncodingUU %
.UU% &
UTF8UU& *
.UU* +
GetBytesUU+ 3
(UU3 4
$strUU4 F
)UUF G
;UUG H
aesAlgVV 
.VV 
IVVV 
=VV 
newVV 
byteVV  $
[VV$ %
$numVV% '
]VV' (
;VV( )
ICryptoTransformXX  
	decryptorXX! *
=XX+ ,
aesAlgXX- 3
.XX3 4
CreateDecryptorXX4 C
(XXC D
aesAlgXXD J
.XXJ K
KeyXXK N
,XXN O
aesAlgXXP V
.XXV W
IVXXW Y
)XXY Z
;XXZ [
usingZZ 
(ZZ 
MemoryStreamZZ #
	msDecryptZZ$ -
=ZZ. /
newZZ0 3
MemoryStreamZZ4 @
(ZZ@ A
FileZZA E
.ZZE F
ReadAllBytesZZF R
(ZZR S
$strZZS }
)ZZ} ~
)ZZ~ 
)	ZZ Ä
{[[ 
using\\ 
(\\ 
CryptoStream\\ '
	csDecrypt\\( 1
=\\2 3
new\\4 7
CryptoStream\\8 D
(\\D E
	msDecrypt\\E N
,\\N O
	decryptor\\P Y
,\\Y Z
CryptoStreamMode\\[ k
.\\k l
Read\\l p
)\\p q
)\\q r
{]] 
using^^ 
(^^ 
StreamReader^^ +
	srDecrypt^^, 5
=^^6 7
new^^8 ;
StreamReader^^< H
(^^H I
	csDecrypt^^I R
)^^R S
)^^S T
{__ 
passwordbb $
=bb% &
	srDecryptbb' 0
.bb0 1
	ReadToEndbb1 :
(bb: ;
)bb; <
;bb< =
}cc 
}dd 
}ee 
}ff 
}gg 	
forhh 
(hh 
inthh 
jhh 
=hh 
$numhh 
;hh 
jhh 
<hh 
$numhh 
;hh 
jhh  
++hh  "
)hh" #
{ii 	
usingkk 
(kk 
SqlConnectionkk  
dBConnectionkk! -
=kk. /
newkk0 3
SqlConnectionkk4 A
(kkA B
$strkkB x
+kky z
$strkk{ 
+
kkÄ Å
$str
kkÇ é
+
kkè ê
password
kkë ô
)
kkô ö
)
kkö õ
{ll 
trymm 
{nn 
dBConnectionoo  
.oo  !
Openoo! %
(oo% &
)oo& '
;oo' (
}pp 
catchqq 
(qq 
SqlExceptionqq #
	exceptSqlqq$ -
)qq- .
{rr 
IOss 
.ss 
Loggerss 
.ss 
Logss !
(ss! "
NLogss" &
.ss& '
LogLevelss' /
.ss/ 0
Warnss0 4
,ss4 5
$strss6 V
,ssV W
	exceptSqlssX a
)ssa b
;ssb c
}tt 
}uu 
}vv 	
}ww 
privatezz 
voidzz 
GoodB2Gzz 
(zz 
)zz 
{{{ 
string|| 
password|| 
;|| 
password}} 
=}} 
$str}} 
;}} 
try 
{
ÄÄ 	
password
ÅÅ 
=
ÅÅ 
Encoding
ÅÅ 
.
ÅÅ  
UTF8
ÅÅ  $
.
ÅÅ$ %
	GetString
ÅÅ% .
(
ÅÅ. /
File
ÅÅ/ 3
.
ÅÅ3 4
ReadAllBytes
ÅÅ4 @
(
ÅÅ@ A
$str
ÅÅA k
)
ÅÅk l
)
ÅÅl m
;
ÅÅm n
}
ÇÇ 	
catch
ÉÉ 
(
ÉÉ 
IOException
ÉÉ 
exceptIO
ÉÉ #
)
ÉÉ# $
{
ÑÑ 	
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ 
(
ÖÖ 
NLog
ÖÖ 
.
ÖÖ 
LogLevel
ÖÖ '
.
ÖÖ' (
Warn
ÖÖ( ,
,
ÖÖ, -
$str
ÖÖ. G
,
ÖÖG H
exceptIO
ÖÖI Q
)
ÖÖQ R
;
ÖÖR S
}
ÜÜ 	
for
àà 
(
àà 
int
àà 
k
àà 
=
àà 
$num
àà 
;
àà 
k
àà 
<
àà 
$num
àà 
;
àà 
k
àà  
++
àà  "
)
àà" #
{
ââ 	
{
ãã 
using
åå 
(
åå &
AesCryptoServiceProvider
åå /
aesAlg
åå0 6
=
åå7 8
new
åå9 <&
AesCryptoServiceProvider
åå= U
(
ååU V
)
ååV W
)
ååW X
{
çç 
aesAlg
éé 
.
éé 
Key
éé 
=
éé  
Encoding
éé! )
.
éé) *
UTF8
éé* .
.
éé. /
GetBytes
éé/ 7
(
éé7 8
$str
éé8 J
)
ééJ K
;
ééK L
aesAlg
èè 
.
èè 
IV
èè 
=
èè 
new
èè  #
byte
èè$ (
[
èè( )
$num
èè) +
]
èè+ ,
;
èè, -
ICryptoTransform
ëë $
	decryptor
ëë% .
=
ëë/ 0
aesAlg
ëë1 7
.
ëë7 8
CreateDecryptor
ëë8 G
(
ëëG H
aesAlg
ëëH N
.
ëëN O
Key
ëëO R
,
ëëR S
aesAlg
ëëT Z
.
ëëZ [
IV
ëë[ ]
)
ëë] ^
;
ëë^ _
using
ìì 
(
ìì 
MemoryStream
ìì '
	msDecrypt
ìì( 1
=
ìì2 3
new
ìì4 7
MemoryStream
ìì8 D
(
ììD E
File
ììE I
.
ììI J
ReadAllBytes
ììJ V
(
ììV W
$strììW Å
)ììÅ Ç
)ììÇ É
)ììÉ Ñ
{
îî 
using
ïï 
(
ïï 
CryptoStream
ïï +
	csDecrypt
ïï, 5
=
ïï6 7
new
ïï8 ;
CryptoStream
ïï< H
(
ïïH I
	msDecrypt
ïïI R
,
ïïR S
	decryptor
ïïT ]
,
ïï] ^
CryptoStreamMode
ïï_ o
.
ïïo p
Read
ïïp t
)
ïït u
)
ïïu v
{
ññ 
using
óó !
(
óó" #
StreamReader
óó# /
	srDecrypt
óó0 9
=
óó: ;
new
óó< ?
StreamReader
óó@ L
(
óóL M
	csDecrypt
óóM V
)
óóV W
)
óóW X
{
òò 
password
õõ  (
=
õõ) *
	srDecrypt
õõ+ 4
.
õõ4 5
	ReadToEnd
õõ5 >
(
õõ> ?
)
õõ? @
;
õõ@ A
}
úú 
}
ùù 
}
ûû 
}
üü 
}
†† 
using
°° 
(
°° 
SqlConnection
°°  
dBConnection
°°! -
=
°°. /
new
°°0 3
SqlConnection
°°4 A
(
°°A B
$str°°B Ñ
+°°Ö Ü
password°°á è
)°°è ê
)°°ê ë
{
¢¢ 
try
££ 
{
§§ 
dBConnection
••  
.
••  !
Open
••! %
(
••% &
)
••& '
;
••' (
}
¶¶ 
catch
ßß 
(
ßß 
SqlException
ßß #
	exceptSql
ßß$ -
)
ßß- .
{
®® 
IO
©© 
.
©© 
Logger
©© 
.
©© 
Log
©© !
(
©©! "
NLog
©©" &
.
©©& '
LogLevel
©©' /
.
©©/ 0
Warn
©©0 4
,
©©4 5
$str
©©6 V
,
©©V W
	exceptSql
©©X a
)
©©a b
;
©©b c
}
™™ 
}
´´ 
}
¨¨ 	
}
≠≠ 
public
ØØ 

override
ØØ 
void
ØØ 
Good
ØØ 
(
ØØ 
)
ØØ 
{
∞∞ 
GoodG2B
±± 
(
±± 
)
±± 
;
±± 
GoodB2G
≤≤ 
(
≤≤ 
)
≤≤ 
;
≤≤ 
}
≥≥ 
}µµ 
}∂∂ ¥ã
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_21.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_21 9
:: ;
AbstractTestCase< L
{ 
private   
bool   

badPrivate   
=   
false   #
;  # $
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
string$$ 
password$$ 
;$$ 
password%% 
=%% 
$str%% 
;%% 
try'' 
{(( 	
password)) 
=)) 
Encoding)) 
.))  
UTF8))  $
.))$ %
	GetString))% .
()). /
File))/ 3
.))3 4
ReadAllBytes))4 @
())@ A
$str))A k
)))k l
)))l m
;))m n
}** 	
catch++ 
(++ 
IOException++ 
exceptIO++ #
)++# $
{,, 	
IO-- 
.-- 
Logger-- 
.-- 
Log-- 
(-- 
NLog-- 
.-- 
LogLevel-- '
.--' (
Warn--( ,
,--, -
$str--. G
,--G H
exceptIO--I Q
)--Q R
;--R S
}.. 	

badPrivate00 
=00 
true00 
;00 
BadSink11 
(11 
password11 
)11 
;11 
}22 
private44 
void44 
BadSink44 
(44 
string44 
password44  (
)44) *
{55 
if66 

(66 

badPrivate66 
)66 
{77 	
using99 
(99 
SqlConnection99  
dBConnection99! -
=99. /
new990 3
SqlConnection994 A
(99A B
$str99B x
+99y z
$str99{ 
+
99Ä Å
$str
99Ç é
+
99è ê
password
99ë ô
)
99ô ö
)
99ö õ
{:: 
try;; 
{<< 
dBConnection==  
.==  !
Open==! %
(==% &
)==& '
;==' (
}>> 
catch?? 
(?? 
SqlException?? #
	exceptSql??$ -
)??- .
{@@ 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA !
(AA! "
NLogAA" &
.AA& '
LogLevelAA' /
.AA/ 0
WarnAA0 4
,AA4 5
$strAA6 V
,AAV W
	exceptSqlAAX a
)AAa b
;AAb c
}BB 
}CC 
}DD 	
}EE 
privateHH 
boolHH 
goodB2G1PrivateHH  
=HH! "
falseHH# (
;HH( )
privateII 
boolII 
goodB2G2PrivateII  
=II! "
falseII# (
;II( )
privateJJ 
boolJJ 
goodG2BPrivateJJ 
=JJ  !
falseJJ" '
;JJ' (
publicLL 

overrideLL 
voidLL 
GoodLL 
(LL 
)LL 
{MM 
GoodB2G1NN 
(NN 
)NN 
;NN 
GoodB2G2OO 
(OO 
)OO 
;OO 
GoodG2BPP 
(PP 
)PP 
;PP 
}QQ 
privateTT 
voidTT 
GoodB2G1TT 
(TT 
)TT 
{UU 
stringVV 
passwordVV 
;VV 
passwordWW 
=WW 
$strWW 
;WW 
tryYY 
{ZZ 	
password[[ 
=[[ 
Encoding[[ 
.[[  
UTF8[[  $
.[[$ %
	GetString[[% .
([[. /
File[[/ 3
.[[3 4
ReadAllBytes[[4 @
([[@ A
$str[[A k
)[[k l
)[[l m
;[[m n
}\\ 	
catch]] 
(]] 
IOException]] 
exceptIO]] #
)]]# $
{^^ 	
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ 
.__ 
LogLevel__ '
.__' (
Warn__( ,
,__, -
$str__. G
,__G H
exceptIO__I Q
)__Q R
;__R S
}`` 	
goodB2G1Privatebb 
=bb 
falsebb 
;bb  
GoodB2G1Sinkcc 
(cc 
passwordcc 
)cc 
;cc  
}dd 
privateff 
voidff 
GoodB2G1Sinkff 
(ff 
stringff $
passwordff% -
)ff. /
{gg 
ifhh 

(hh 
goodB2G1Privatehh 
)hh 
{ii 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk /
)kk/ 0
;kk0 1
}ll 	
elsemm 
{nn 	
{pp 
usingqq 
(qq $
AesCryptoServiceProviderqq /
aesAlgqq0 6
=qq7 8
newqq9 <$
AesCryptoServiceProviderqq= U
(qqU V
)qqV W
)qqW X
{rr 
aesAlgss 
.ss 
Keyss 
=ss  
Encodingss! )
.ss) *
UTF8ss* .
.ss. /
GetBytesss/ 7
(ss7 8
$strss8 J
)ssJ K
;ssK L
aesAlgtt 
.tt 
IVtt 
=tt 
newtt  #
bytett$ (
[tt( )
$numtt) +
]tt+ ,
;tt, -
ICryptoTransformvv $
	decryptorvv% .
=vv/ 0
aesAlgvv1 7
.vv7 8
CreateDecryptorvv8 G
(vvG H
aesAlgvvH N
.vvN O
KeyvvO R
,vvR S
aesAlgvvT Z
.vvZ [
IVvv[ ]
)vv] ^
;vv^ _
usingxx 
(xx 
MemoryStreamxx '
	msDecryptxx( 1
=xx2 3
newxx4 7
MemoryStreamxx8 D
(xxD E
FilexxE I
.xxI J
ReadAllBytesxxJ V
(xxV W
$str	xxW Å
)
xxÅ Ç
)
xxÇ É
)
xxÉ Ñ
{yy 
usingzz 
(zz 
CryptoStreamzz +
	csDecryptzz, 5
=zz6 7
newzz8 ;
CryptoStreamzz< H
(zzH I
	msDecryptzzI R
,zzR S
	decryptorzzT ]
,zz] ^
CryptoStreamModezz_ o
.zzo p
Readzzp t
)zzt u
)zzu v
{{{ 
using|| !
(||" #
StreamReader||# /
	srDecrypt||0 9
=||: ;
new||< ?
StreamReader||@ L
(||L M
	csDecrypt||M V
)||V W
)||W X
{}} 
password
ÄÄ  (
=
ÄÄ) *
	srDecrypt
ÄÄ+ 4
.
ÄÄ4 5
	ReadToEnd
ÄÄ5 >
(
ÄÄ> ?
)
ÄÄ? @
;
ÄÄ@ A
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 
using
ÜÜ 
(
ÜÜ 
SqlConnection
ÜÜ  
dBConnection
ÜÜ! -
=
ÜÜ. /
new
ÜÜ0 3
SqlConnection
ÜÜ4 A
(
ÜÜA B
$strÜÜB Ñ
+ÜÜÖ Ü
passwordÜÜá è
)ÜÜè ê
)ÜÜê ë
{
áá 
try
àà 
{
ââ 
dBConnection
ää  
.
ää  !
Open
ää! %
(
ää% &
)
ää& '
;
ää' (
}
ãã 
catch
åå 
(
åå 
SqlException
åå #
	exceptSql
åå$ -
)
åå- .
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé !
(
éé! "
NLog
éé" &
.
éé& '
LogLevel
éé' /
.
éé/ 0
Warn
éé0 4
,
éé4 5
$str
éé6 V
,
ééV W
	exceptSql
ééX a
)
ééa b
;
ééb c
}
èè 
}
êê 
}
ëë 	
}
íí 
private
ïï 
void
ïï 
GoodB2G2
ïï 
(
ïï 
)
ïï 
{
ññ 
string
óó 
password
óó 
;
óó 
password
òò 
=
òò 
$str
òò 
;
òò 
try
öö 
{
õõ 	
password
úú 
=
úú 
Encoding
úú 
.
úú  
UTF8
úú  $
.
úú$ %
	GetString
úú% .
(
úú. /
File
úú/ 3
.
úú3 4
ReadAllBytes
úú4 @
(
úú@ A
$str
úúA k
)
úúk l
)
úúl m
;
úúm n
}
ùù 	
catch
ûû 
(
ûû 
IOException
ûû 
exceptIO
ûû #
)
ûû# $
{
üü 	
IO
†† 
.
†† 
Logger
†† 
.
†† 
Log
†† 
(
†† 
NLog
†† 
.
†† 
LogLevel
†† '
.
††' (
Warn
††( ,
,
††, -
$str
††. G
,
††G H
exceptIO
††I Q
)
††Q R
;
††R S
}
°° 	
goodB2G2Private
££ 
=
££ 
true
££ 
;
££ 
GoodB2G2Sink
§§ 
(
§§ 
password
§§ 
)
§§ 
;
§§  
}
•• 
private
ßß 
void
ßß 
GoodB2G2Sink
ßß 
(
ßß 
string
ßß $
password
ßß% -
)
ßß. /
{
®® 
if
©© 

(
©© 
goodB2G2Private
©© 
)
©© 
{
™™ 	
{
¨¨ 
using
≠≠ 
(
≠≠ &
AesCryptoServiceProvider
≠≠ /
aesAlg
≠≠0 6
=
≠≠7 8
new
≠≠9 <&
AesCryptoServiceProvider
≠≠= U
(
≠≠U V
)
≠≠V W
)
≠≠W X
{
ÆÆ 
aesAlg
ØØ 
.
ØØ 
Key
ØØ 
=
ØØ  
Encoding
ØØ! )
.
ØØ) *
UTF8
ØØ* .
.
ØØ. /
GetBytes
ØØ/ 7
(
ØØ7 8
$str
ØØ8 J
)
ØØJ K
;
ØØK L
aesAlg
∞∞ 
.
∞∞ 
IV
∞∞ 
=
∞∞ 
new
∞∞  #
byte
∞∞$ (
[
∞∞( )
$num
∞∞) +
]
∞∞+ ,
;
∞∞, -
ICryptoTransform
≤≤ $
	decryptor
≤≤% .
=
≤≤/ 0
aesAlg
≤≤1 7
.
≤≤7 8
CreateDecryptor
≤≤8 G
(
≤≤G H
aesAlg
≤≤H N
.
≤≤N O
Key
≤≤O R
,
≤≤R S
aesAlg
≤≤T Z
.
≤≤Z [
IV
≤≤[ ]
)
≤≤] ^
;
≤≤^ _
using
¥¥ 
(
¥¥ 
MemoryStream
¥¥ '
	msDecrypt
¥¥( 1
=
¥¥2 3
new
¥¥4 7
MemoryStream
¥¥8 D
(
¥¥D E
File
¥¥E I
.
¥¥I J
ReadAllBytes
¥¥J V
(
¥¥V W
$str¥¥W Å
)¥¥Å Ç
)¥¥Ç É
)¥¥É Ñ
{
µµ 
using
∂∂ 
(
∂∂ 
CryptoStream
∂∂ +
	csDecrypt
∂∂, 5
=
∂∂6 7
new
∂∂8 ;
CryptoStream
∂∂< H
(
∂∂H I
	msDecrypt
∂∂I R
,
∂∂R S
	decryptor
∂∂T ]
,
∂∂] ^
CryptoStreamMode
∂∂_ o
.
∂∂o p
Read
∂∂p t
)
∂∂t u
)
∂∂u v
{
∑∑ 
using
∏∏ !
(
∏∏" #
StreamReader
∏∏# /
	srDecrypt
∏∏0 9
=
∏∏: ;
new
∏∏< ?
StreamReader
∏∏@ L
(
∏∏L M
	csDecrypt
∏∏M V
)
∏∏V W
)
∏∏W X
{
ππ 
password
ºº  (
=
ºº) *
	srDecrypt
ºº+ 4
.
ºº4 5
	ReadToEnd
ºº5 >
(
ºº> ?
)
ºº? @
;
ºº@ A
}
ΩΩ 
}
ææ 
}
øø 
}
¿¿ 
}
¡¡ 
using
¬¬ 
(
¬¬ 
SqlConnection
¬¬  
dBConnection
¬¬! -
=
¬¬. /
new
¬¬0 3
SqlConnection
¬¬4 A
(
¬¬A B
$str¬¬B Ñ
+¬¬Ö Ü
password¬¬á è
)¬¬è ê
)¬¬ê ë
{
√√ 
try
ƒƒ 
{
≈≈ 
dBConnection
∆∆  
.
∆∆  !
Open
∆∆! %
(
∆∆% &
)
∆∆& '
;
∆∆' (
}
«« 
catch
»» 
(
»» 
SqlException
»» #
	exceptSql
»»$ -
)
»»- .
{
…… 
IO
   
.
   
Logger
   
.
   
Log
   !
(
  ! "
NLog
  " &
.
  & '
LogLevel
  ' /
.
  / 0
Warn
  0 4
,
  4 5
$str
  6 V
,
  V W
	exceptSql
  X a
)
  a b
;
  b c
}
ÀÀ 
}
ÃÃ 
}
ÕÕ 	
}
ŒŒ 
private
—— 
void
—— 
GoodG2B
—— 
(
—— 
)
—— 
{
““ 
string
”” 
password
”” 
;
”” 
password
‘‘ 
=
‘‘ 
$str
‘‘ 
;
‘‘ 
try
÷÷ 
{
◊◊ 	
password
ÿÿ 
=
ÿÿ 
Encoding
ÿÿ 
.
ÿÿ  
UTF8
ÿÿ  $
.
ÿÿ$ %
	GetString
ÿÿ% .
(
ÿÿ. /
File
ÿÿ/ 3
.
ÿÿ3 4
ReadAllBytes
ÿÿ4 @
(
ÿÿ@ A
$str
ÿÿA k
)
ÿÿk l
)
ÿÿl m
;
ÿÿm n
}
ŸŸ 	
catch
⁄⁄ 
(
⁄⁄ 
IOException
⁄⁄ 
exceptIO
⁄⁄ #
)
⁄⁄# $
{
€€ 	
IO
‹‹ 
.
‹‹ 
Logger
‹‹ 
.
‹‹ 
Log
‹‹ 
(
‹‹ 
NLog
‹‹ 
.
‹‹ 
LogLevel
‹‹ '
.
‹‹' (
Warn
‹‹( ,
,
‹‹, -
$str
‹‹. G
,
‹‹G H
exceptIO
‹‹I Q
)
‹‹Q R
;
‹‹R S
}
›› 	
{
ﬂﬂ 	
using
‡‡ 
(
‡‡ &
AesCryptoServiceProvider
‡‡ +
aesAlg
‡‡, 2
=
‡‡3 4
new
‡‡5 8&
AesCryptoServiceProvider
‡‡9 Q
(
‡‡Q R
)
‡‡R S
)
‡‡S T
{
·· 
aesAlg
‚‚ 
.
‚‚ 
Key
‚‚ 
=
‚‚ 
Encoding
‚‚ %
.
‚‚% &
UTF8
‚‚& *
.
‚‚* +
GetBytes
‚‚+ 3
(
‚‚3 4
$str
‚‚4 F
)
‚‚F G
;
‚‚G H
aesAlg
„„ 
.
„„ 
IV
„„ 
=
„„ 
new
„„ 
byte
„„  $
[
„„$ %
$num
„„% '
]
„„' (
;
„„( )
ICryptoTransform
ÂÂ  
	decryptor
ÂÂ! *
=
ÂÂ+ ,
aesAlg
ÂÂ- 3
.
ÂÂ3 4
CreateDecryptor
ÂÂ4 C
(
ÂÂC D
aesAlg
ÂÂD J
.
ÂÂJ K
Key
ÂÂK N
,
ÂÂN O
aesAlg
ÂÂP V
.
ÂÂV W
IV
ÂÂW Y
)
ÂÂY Z
;
ÂÂZ [
using
ÁÁ 
(
ÁÁ 
MemoryStream
ÁÁ #
	msDecrypt
ÁÁ$ -
=
ÁÁ. /
new
ÁÁ0 3
MemoryStream
ÁÁ4 @
(
ÁÁ@ A
File
ÁÁA E
.
ÁÁE F
ReadAllBytes
ÁÁF R
(
ÁÁR S
$str
ÁÁS }
)
ÁÁ} ~
)
ÁÁ~ 
)ÁÁ Ä
{
ËË 
using
ÈÈ 
(
ÈÈ 
CryptoStream
ÈÈ '
	csDecrypt
ÈÈ( 1
=
ÈÈ2 3
new
ÈÈ4 7
CryptoStream
ÈÈ8 D
(
ÈÈD E
	msDecrypt
ÈÈE N
,
ÈÈN O
	decryptor
ÈÈP Y
,
ÈÈY Z
CryptoStreamMode
ÈÈ[ k
.
ÈÈk l
Read
ÈÈl p
)
ÈÈp q
)
ÈÈq r
{
ÍÍ 
using
ÎÎ 
(
ÎÎ 
StreamReader
ÎÎ +
	srDecrypt
ÎÎ, 5
=
ÎÎ6 7
new
ÎÎ8 ;
StreamReader
ÎÎ< H
(
ÎÎH I
	csDecrypt
ÎÎI R
)
ÎÎR S
)
ÎÎS T
{
ÏÏ 
password
ÔÔ $
=
ÔÔ% &
	srDecrypt
ÔÔ' 0
.
ÔÔ0 1
	ReadToEnd
ÔÔ1 :
(
ÔÔ: ;
)
ÔÔ; <
;
ÔÔ< =
}
 
}
ÒÒ 
}
ÚÚ 
}
ÛÛ 
}
ÙÙ 	
goodG2BPrivate
ıı 
=
ıı 
true
ıı 
;
ıı 
GoodG2BSink
ˆˆ 
(
ˆˆ 
password
ˆˆ 
)
ˆˆ 
;
ˆˆ 
}
˜˜ 
private
˘˘ 
void
˘˘ 
GoodG2BSink
˘˘ 
(
˘˘ 
string
˘˘ #
password
˘˘$ ,
)
˘˘- .
{
˙˙ 
if
˚˚ 

(
˚˚ 
goodG2BPrivate
˚˚ 
)
˚˚ 
{
¸¸ 	
using
˛˛ 
(
˛˛ 
SqlConnection
˛˛  
dBConnection
˛˛! -
=
˛˛. /
new
˛˛0 3
SqlConnection
˛˛4 A
(
˛˛A B
$str
˛˛B x
+
˛˛y z
$str
˛˛{ 
+˛˛Ä Å
$str˛˛Ç é
+˛˛è ê
password˛˛ë ô
)˛˛ô ö
)˛˛ö õ
{
ˇˇ 
try
ÄÄ 
{
ÅÅ 
dBConnection
ÇÇ  
.
ÇÇ  !
Open
ÇÇ! %
(
ÇÇ% &
)
ÇÇ& '
;
ÇÇ' (
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
SqlException
ÑÑ #
	exceptSql
ÑÑ$ -
)
ÑÑ- .
{
ÖÖ 
IO
ÜÜ 
.
ÜÜ 
Logger
ÜÜ 
.
ÜÜ 
Log
ÜÜ !
(
ÜÜ! "
NLog
ÜÜ" &
.
ÜÜ& '
LogLevel
ÜÜ' /
.
ÜÜ/ 0
Warn
ÜÜ0 4
,
ÜÜ4 5
$str
ÜÜ6 V
,
ÜÜV W
	exceptSql
ÜÜX a
)
ÜÜa b
;
ÜÜb c
}
áá 
}
àà 
}
ââ 	
}
ää 
}åå 
}çç ãC
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_22a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_22a :
:; <
AbstractTestCase= M
{ 
public   

static   
bool   
badPublicStatic   &
=  ' (
false  ) .
;  . /
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
string$$ 
password$$ 
=$$ 
null$$ 
;$$ 
password%% 
=%% 
$str%% 
;%% 
try'' 
{(( 	
password)) 
=)) 
Encoding)) 
.))  
UTF8))  $
.))$ %
	GetString))% .
()). /
File))/ 3
.))3 4
ReadAllBytes))4 @
())@ A
$str))A k
)))k l
)))l m
;))m n
}** 	
catch++ 
(++ 
IOException++ 
exceptIO++ #
)++# $
{,, 	
IO-- 
.-- 
Logger-- 
.-- 
Log-- 
(-- 
NLog-- 
.-- 
LogLevel-- '
.--' (
Warn--( ,
,--, -
$str--. G
,--G H
exceptIO--I Q
)--Q R
;--R S
}.. 	
badPublicStatic00 
=00 
true00 
;00 @
4CWE256_Unprotected_Storage_of_Credentials__basic_22b11 <
.11< =
BadSink11= D
(11D E
password11E M
)11N O
;11O P
}22 
public55 

static55 
bool55  
goodB2G1PublicStatic55 +
=55, -
false55. 3
;553 4
public66 

static66 
bool66  
goodB2G2PublicStatic66 +
=66, -
false66. 3
;663 4
public77 

static77 
bool77 
goodG2BPublicStatic77 *
=77+ ,
false77- 2
;772 3
public99 

override99 
void99 
Good99 
(99 
)99 
{:: 
GoodB2G1;; 
(;; 
);; 
;;; 
GoodB2G2<< 
(<< 
)<< 
;<< 
GoodG2B== 
(== 
)== 
;== 
}>> 
privateAA 
voidAA 
GoodB2G1AA 
(AA 
)AA 
{BB 
stringCC 
passwordCC 
=CC 
nullCC 
;CC 
passwordDD 
=DD 
$strDD 
;DD 
tryFF 
{GG 	
passwordHH 
=HH 
EncodingHH 
.HH  
UTF8HH  $
.HH$ %
	GetStringHH% .
(HH. /
FileHH/ 3
.HH3 4
ReadAllBytesHH4 @
(HH@ A
$strHHA k
)HHk l
)HHl m
;HHm n
}II 	
catchJJ 
(JJ 
IOExceptionJJ 
exceptIOJJ #
)JJ# $
{KK 	
IOLL 
.LL 
LoggerLL 
.LL 
LogLL 
(LL 
NLogLL 
.LL 
LogLevelLL '
.LL' (
WarnLL( ,
,LL, -
$strLL. G
,LLG H
exceptIOLLI Q
)LLQ R
;LLR S
}MM 	 
goodB2G1PublicStaticOO 
=OO 
falseOO $
;OO$ %@
4CWE256_Unprotected_Storage_of_Credentials__basic_22bPP <
.PP< =
GoodB2G1SinkPP= I
(PPI J
passwordPPJ R
)PPS T
;PPT U
}QQ 
privateTT 
voidTT 
GoodB2G2TT 
(TT 
)TT 
{UU 
stringVV 
passwordVV 
=VV 
nullVV 
;VV 
passwordWW 
=WW 
$strWW 
;WW 
tryYY 
{ZZ 	
password[[ 
=[[ 
Encoding[[ 
.[[  
UTF8[[  $
.[[$ %
	GetString[[% .
([[. /
File[[/ 3
.[[3 4
ReadAllBytes[[4 @
([[@ A
$str[[A k
)[[k l
)[[l m
;[[m n
}\\ 	
catch]] 
(]] 
IOException]] 
exceptIO]] #
)]]# $
{^^ 	
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ 
.__ 
LogLevel__ '
.__' (
Warn__( ,
,__, -
$str__. G
,__G H
exceptIO__I Q
)__Q R
;__R S
}`` 	 
goodB2G2PublicStaticbb 
=bb 
truebb #
;bb# $@
4CWE256_Unprotected_Storage_of_Credentials__basic_22bcc <
.cc< =
GoodB2G2Sinkcc= I
(ccI J
passwordccJ R
)ccS T
;ccT U
}dd 
privategg 
voidgg 
GoodG2Bgg 
(gg 
)gg 
{hh 
stringii 
passwordii 
=ii 
nullii 
;ii 
passwordjj 
=jj 
$strjj 
;jj 
tryll 
{mm 	
passwordnn 
=nn 
Encodingnn 
.nn  
UTF8nn  $
.nn$ %
	GetStringnn% .
(nn. /
Filenn/ 3
.nn3 4
ReadAllBytesnn4 @
(nn@ A
$strnnA k
)nnk l
)nnl m
;nnm n
}oo 	
catchpp 
(pp 
IOExceptionpp 
exceptIOpp #
)pp# $
{qq 	
IOrr 
.rr 
Loggerrr 
.rr 
Logrr 
(rr 
NLogrr 
.rr 
LogLevelrr '
.rr' (
Warnrr( ,
,rr, -
$strrr. G
,rrG H
exceptIOrrI Q
)rrQ R
;rrR S
}ss 	
{uu 	
usingvv 
(vv $
AesCryptoServiceProvidervv +
aesAlgvv, 2
=vv3 4
newvv5 8$
AesCryptoServiceProvidervv9 Q
(vvQ R
)vvR S
)vvS T
{ww 
aesAlgxx 
.xx 
Keyxx 
=xx 
Encodingxx %
.xx% &
UTF8xx& *
.xx* +
GetBytesxx+ 3
(xx3 4
$strxx4 F
)xxF G
;xxG H
aesAlgyy 
.yy 
IVyy 
=yy 
newyy 
byteyy  $
[yy$ %
$numyy% '
]yy' (
;yy( )
ICryptoTransform{{  
	decryptor{{! *
={{+ ,
aesAlg{{- 3
.{{3 4
CreateDecryptor{{4 C
({{C D
aesAlg{{D J
.{{J K
Key{{K N
,{{N O
aesAlg{{P V
.{{V W
IV{{W Y
){{Y Z
;{{Z [
using}} 
(}} 
MemoryStream}} #
	msDecrypt}}$ -
=}}. /
new}}0 3
MemoryStream}}4 @
(}}@ A
File}}A E
.}}E F
ReadAllBytes}}F R
(}}R S
$str}}S }
)}}} ~
)}}~ 
)	}} Ä
{~~ 
using 
( 
CryptoStream '
	csDecrypt( 1
=2 3
new4 7
CryptoStream8 D
(D E
	msDecryptE N
,N O
	decryptorP Y
,Y Z
CryptoStreamMode[ k
.k l
Readl p
)p q
)q r
{
ÄÄ 
using
ÅÅ 
(
ÅÅ 
StreamReader
ÅÅ +
	srDecrypt
ÅÅ, 5
=
ÅÅ6 7
new
ÅÅ8 ;
StreamReader
ÅÅ< H
(
ÅÅH I
	csDecrypt
ÅÅI R
)
ÅÅR S
)
ÅÅS T
{
ÇÇ 
password
ÖÖ $
=
ÖÖ% &
	srDecrypt
ÖÖ' 0
.
ÖÖ0 1
	ReadToEnd
ÖÖ1 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
}
ÜÜ 
}
áá 
}
àà 
}
ââ 
}
ää 	!
goodG2BPublicStatic
ãã 
=
ãã 
true
ãã "
;
ãã" #B
4CWE256_Unprotected_Storage_of_Credentials__basic_22b
åå <
.
åå< =
GoodG2BSink
åå= H
(
ååH I
password
ååI Q
)
ååR S
;
ååS T
}
çç 
}èè 
}êê ßP
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_22b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_22b :
{ 
public 

static 
void 
BadSink 
( 
string %
password& .
)/ 0
{   
if!! 

(!! @
4CWE256_Unprotected_Storage_of_Credentials__basic_22a!! @
.!!@ A
badPublicStatic!!A P
)!!P Q
{"" 	
using$$ 
($$ 
SqlConnection$$  
dBConnection$$! -
=$$. /
new$$0 3
SqlConnection$$4 A
($$A B
$str$$B x
+$$y z
$str$${ 
+
$$Ä Å
$str
$$Ç é
+
$$è ê
password
$$ë ô
)
$$ô ö
)
$$ö õ
{%% 
try&& 
{'' 
dBConnection((  
.((  !
Open((! %
(((% &
)((& '
;((' (
})) 
catch** 
(** 
SqlException** #
	exceptSql**$ -
)**- .
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
$str,,6 V
,,,V W
	exceptSql,,X a
),,a b
;,,b c
}-- 
}.. 
}// 	
else00 
{11 	
password44 
=44 
null44 
;44 
}55 	
}66 
public;; 

static;; 
void;; 
GoodB2G1Sink;; #
(;;# $
string;;$ *
password;;+ 3
);;4 5
{<< 
if== 

(== @
4CWE256_Unprotected_Storage_of_Credentials__basic_22a== @
.==@ A 
goodB2G1PublicStatic==A U
)==U V
{>> 	
passwordAA 
=AA 
nullAA 
;AA 
}BB 	
elseCC 
{DD 	
{FF 
usingGG 
(GG $
AesCryptoServiceProviderGG /
aesAlgGG0 6
=GG7 8
newGG9 <$
AesCryptoServiceProviderGG= U
(GGU V
)GGV W
)GGW X
{HH 
aesAlgII 
.II 
KeyII 
=II  
EncodingII! )
.II) *
UTF8II* .
.II. /
GetBytesII/ 7
(II7 8
$strII8 J
)IIJ K
;IIK L
aesAlgJJ 
.JJ 
IVJJ 
=JJ 
newJJ  #
byteJJ$ (
[JJ( )
$numJJ) +
]JJ+ ,
;JJ, -
ICryptoTransformLL $
	decryptorLL% .
=LL/ 0
aesAlgLL1 7
.LL7 8
CreateDecryptorLL8 G
(LLG H
aesAlgLLH N
.LLN O
KeyLLO R
,LLR S
aesAlgLLT Z
.LLZ [
IVLL[ ]
)LL] ^
;LL^ _
usingNN 
(NN 
MemoryStreamNN '
	msDecryptNN( 1
=NN2 3
newNN4 7
MemoryStreamNN8 D
(NND E
FileNNE I
.NNI J
ReadAllBytesNNJ V
(NNV W
$str	NNW Å
)
NNÅ Ç
)
NNÇ É
)
NNÉ Ñ
{OO 
usingPP 
(PP 
CryptoStreamPP +
	csDecryptPP, 5
=PP6 7
newPP8 ;
CryptoStreamPP< H
(PPH I
	msDecryptPPI R
,PPR S
	decryptorPPT ]
,PP] ^
CryptoStreamModePP_ o
.PPo p
ReadPPp t
)PPt u
)PPu v
{QQ 
usingRR !
(RR" #
StreamReaderRR# /
	srDecryptRR0 9
=RR: ;
newRR< ?
StreamReaderRR@ L
(RRL M
	csDecryptRRM V
)RRV W
)RRW X
{SS 
passwordVV  (
=VV) *
	srDecryptVV+ 4
.VV4 5
	ReadToEndVV5 >
(VV> ?
)VV? @
;VV@ A
}WW 
}XX 
}YY 
}ZZ 
}[[ 
using\\ 
(\\ 
SqlConnection\\  
dBConnection\\! -
=\\. /
new\\0 3
SqlConnection\\4 A
(\\A B
$str	\\B Ñ
+
\\Ö Ü
password
\\á è
)
\\è ê
)
\\ê ë
{]] 
try^^ 
{__ 
dBConnection``  
.``  !
Open``! %
(``% &
)``& '
;``' (
}aa 
catchbb 
(bb 
SqlExceptionbb #
	exceptSqlbb$ -
)bb- .
{cc 
IOdd 
.dd 
Loggerdd 
.dd 
Logdd !
(dd! "
NLogdd" &
.dd& '
LogLeveldd' /
.dd/ 0
Warndd0 4
,dd4 5
$strdd6 V
,ddV W
	exceptSqlddX a
)dda b
;ddb c
}ee 
}ff 
}gg 	
}hh 
publickk 

statickk 
voidkk 
GoodB2G2Sinkkk #
(kk# $
stringkk$ *
passwordkk+ 3
)kk4 5
{ll 
ifmm 

(mm @
4CWE256_Unprotected_Storage_of_Credentials__basic_22amm @
.mm@ A 
goodB2G2PublicStaticmmA U
)mmU V
{nn 	
{pp 
usingqq 
(qq $
AesCryptoServiceProviderqq /
aesAlgqq0 6
=qq7 8
newqq9 <$
AesCryptoServiceProviderqq= U
(qqU V
)qqV W
)qqW X
{rr 
aesAlgss 
.ss 
Keyss 
=ss  
Encodingss! )
.ss) *
UTF8ss* .
.ss. /
GetBytesss/ 7
(ss7 8
$strss8 J
)ssJ K
;ssK L
aesAlgtt 
.tt 
IVtt 
=tt 
newtt  #
bytett$ (
[tt( )
$numtt) +
]tt+ ,
;tt, -
ICryptoTransformvv $
	decryptorvv% .
=vv/ 0
aesAlgvv1 7
.vv7 8
CreateDecryptorvv8 G
(vvG H
aesAlgvvH N
.vvN O
KeyvvO R
,vvR S
aesAlgvvT Z
.vvZ [
IVvv[ ]
)vv] ^
;vv^ _
usingxx 
(xx 
MemoryStreamxx '
	msDecryptxx( 1
=xx2 3
newxx4 7
MemoryStreamxx8 D
(xxD E
FilexxE I
.xxI J
ReadAllBytesxxJ V
(xxV W
$str	xxW Å
)
xxÅ Ç
)
xxÇ É
)
xxÉ Ñ
{yy 
usingzz 
(zz 
CryptoStreamzz +
	csDecryptzz, 5
=zz6 7
newzz8 ;
CryptoStreamzz< H
(zzH I
	msDecryptzzI R
,zzR S
	decryptorzzT ]
,zz] ^
CryptoStreamModezz_ o
.zzo p
Readzzp t
)zzt u
)zzu v
{{{ 
using|| !
(||" #
StreamReader||# /
	srDecrypt||0 9
=||: ;
new||< ?
StreamReader||@ L
(||L M
	csDecrypt||M V
)||V W
)||W X
{}} 
password
ÄÄ  (
=
ÄÄ) *
	srDecrypt
ÄÄ+ 4
.
ÄÄ4 5
	ReadToEnd
ÄÄ5 >
(
ÄÄ> ?
)
ÄÄ? @
;
ÄÄ@ A
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 
using
ÜÜ 
(
ÜÜ 
SqlConnection
ÜÜ  
dBConnection
ÜÜ! -
=
ÜÜ. /
new
ÜÜ0 3
SqlConnection
ÜÜ4 A
(
ÜÜA B
$strÜÜB Ñ
+ÜÜÖ Ü
passwordÜÜá è
)ÜÜè ê
)ÜÜê ë
{
áá 
try
àà 
{
ââ 
dBConnection
ää  
.
ää  !
Open
ää! %
(
ää% &
)
ää& '
;
ää' (
}
ãã 
catch
åå 
(
åå 
SqlException
åå #
	exceptSql
åå$ -
)
åå- .
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé !
(
éé! "
NLog
éé" &
.
éé& '
LogLevel
éé' /
.
éé/ 0
Warn
éé0 4
,
éé4 5
$str
éé6 V
,
ééV W
	exceptSql
ééX a
)
ééa b
;
ééb c
}
èè 
}
êê 
}
ëë 	
else
íí 
{
ìì 	
password
ññ 
=
ññ 
null
ññ 
;
ññ 
}
óó 	
}
òò 
public
õõ 

static
õõ 
void
õõ 
GoodG2BSink
õõ "
(
õõ" #
string
õõ# )
password
õõ* 2
)
õõ3 4
{
úú 
if
ùù 

(
ùù B
4CWE256_Unprotected_Storage_of_Credentials__basic_22a
ùù @
.
ùù@ A!
goodG2BPublicStatic
ùùA T
)
ùùT U
{
ûû 	
using
†† 
(
†† 
SqlConnection
††  
dBConnection
††! -
=
††. /
new
††0 3
SqlConnection
††4 A
(
††A B
$str
††B x
+
††y z
$str
††{ 
+††Ä Å
$str††Ç é
+††è ê
password††ë ô
)††ô ö
)††ö õ
{
°° 
try
¢¢ 
{
££ 
dBConnection
§§  
.
§§  !
Open
§§! %
(
§§% &
)
§§& '
;
§§' (
}
•• 
catch
¶¶ 
(
¶¶ 
SqlException
¶¶ #
	exceptSql
¶¶$ -
)
¶¶- .
{
ßß 
IO
®® 
.
®® 
Logger
®® 
.
®® 
Log
®® !
(
®®! "
NLog
®®" &
.
®®& '
LogLevel
®®' /
.
®®/ 0
Warn
®®0 4
,
®®4 5
$str
®®6 V
,
®®V W
	exceptSql
®®X a
)
®®a b
;
®®b c
}
©© 
}
™™ 
}
´´ 	
else
¨¨ 
{
≠≠ 	
password
∞∞ 
=
∞∞ 
null
∞∞ 
;
∞∞ 
}
±± 	
}
≤≤ 
}¥¥ 
}µµ ´\
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_31.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_31 9
:: ;
AbstractTestCase< L
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
passwordCopy!! 
;!! 
{"" 	
string## 
password## 
;## 
password$$ 
=$$ 
$str$$ 
;$$ 
try&& 
{'' 
password(( 
=(( 
Encoding(( #
.((# $
UTF8(($ (
.((( )
	GetString(() 2
(((2 3
File((3 7
.((7 8
ReadAllBytes((8 D
(((D E
$str((E o
)((o p
)((p q
;((q r
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 K
,,,K L
exceptIO,,M U
),,U V
;,,V W
}-- 
passwordCopy// 
=// 
password// #
;//# $
}00 	
{11 	
string22 
password22 
=22 
passwordCopy22 *
;22* +
using44 
(44 
SqlConnection44  
dBConnection44! -
=44. /
new440 3
SqlConnection444 A
(44A B
$str44B x
+44y z
$str44{ 
+
44Ä Å
$str
44Ç é
+
44è ê
password
44ë ô
)
44ô ö
)
44ö õ
{55 
try66 
{77 
dBConnection88  
.88  !
Open88! %
(88% &
)88& '
;88' (
}99 
catch:: 
(:: 
SqlException:: #
	exceptSql::$ -
)::- .
{;; 
IO<< 
.<< 
Logger<< 
.<< 
Log<< !
(<<! "
NLog<<" &
.<<& '
LogLevel<<' /
.<</ 0
Warn<<0 4
,<<4 5
$str<<6 V
,<<V W
	exceptSql<<X a
)<<a b
;<<b c
}== 
}>> 
}?? 	
}@@ 
publicCC 

overrideCC 
voidCC 
GoodCC 
(CC 
)CC 
{DD 
GoodG2BEE 
(EE 
)EE 
;EE 
GoodB2GFF 
(FF 
)FF 
;FF 
}GG 
privateJJ 
voidJJ 
GoodG2BJJ 
(JJ 
)JJ 
{KK 
stringLL 
passwordCopyLL 
;LL 
{MM 	
stringNN 
passwordNN 
;NN 
passwordOO 
=OO 
$strOO 
;OO 
tryQQ 
{RR 
passwordSS 
=SS 
EncodingSS #
.SS# $
UTF8SS$ (
.SS( )
	GetStringSS) 2
(SS2 3
FileSS3 7
.SS7 8
ReadAllBytesSS8 D
(SSD E
$strSSE o
)SSo p
)SSp q
;SSq r
}TT 
catchUU 
(UU 
IOExceptionUU 
exceptIOUU '
)UU' (
{VV 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
$strWW2 K
,WWK L
exceptIOWWM U
)WWU V
;WWV W
}XX 
{ZZ 
using[[ 
([[ $
AesCryptoServiceProvider[[ /
aesAlg[[0 6
=[[7 8
new[[9 <$
AesCryptoServiceProvider[[= U
([[U V
)[[V W
)[[W X
{\\ 
aesAlg]] 
.]] 
Key]] 
=]]  
Encoding]]! )
.]]) *
UTF8]]* .
.]]. /
GetBytes]]/ 7
(]]7 8
$str]]8 J
)]]J K
;]]K L
aesAlg^^ 
.^^ 
IV^^ 
=^^ 
new^^  #
byte^^$ (
[^^( )
$num^^) +
]^^+ ,
;^^, -
ICryptoTransform`` $
	decryptor``% .
=``/ 0
aesAlg``1 7
.``7 8
CreateDecryptor``8 G
(``G H
aesAlg``H N
.``N O
Key``O R
,``R S
aesAlg``T Z
.``Z [
IV``[ ]
)``] ^
;``^ _
usingbb 
(bb 
MemoryStreambb '
	msDecryptbb( 1
=bb2 3
newbb4 7
MemoryStreambb8 D
(bbD E
FilebbE I
.bbI J
ReadAllBytesbbJ V
(bbV W
$str	bbW Å
)
bbÅ Ç
)
bbÇ É
)
bbÉ Ñ
{cc 
usingdd 
(dd 
CryptoStreamdd +
	csDecryptdd, 5
=dd6 7
newdd8 ;
CryptoStreamdd< H
(ddH I
	msDecryptddI R
,ddR S
	decryptorddT ]
,dd] ^
CryptoStreamModedd_ o
.ddo p
Readddp t
)ddt u
)ddu v
{ee 
usingff !
(ff" #
StreamReaderff# /
	srDecryptff0 9
=ff: ;
newff< ?
StreamReaderff@ L
(ffL M
	csDecryptffM V
)ffV W
)ffW X
{gg 
passwordjj  (
=jj) *
	srDecryptjj+ 4
.jj4 5
	ReadToEndjj5 >
(jj> ?
)jj? @
;jj@ A
}kk 
}ll 
}mm 
}nn 
}oo 
passwordCopypp 
=pp 
passwordpp #
;pp# $
}qq 	
{rr 	
stringss 
passwordss 
=ss 
passwordCopyss *
;ss* +
usinguu 
(uu 
SqlConnectionuu  
dBConnectionuu! -
=uu. /
newuu0 3
SqlConnectionuu4 A
(uuA B
$struuB x
+uuy z
$struu{ 
+
uuÄ Å
$str
uuÇ é
+
uuè ê
password
uuë ô
)
uuô ö
)
uuö õ
{vv 
tryww 
{xx 
dBConnectionyy  
.yy  !
Openyy! %
(yy% &
)yy& '
;yy' (
}zz 
catch{{ 
({{ 
SqlException{{ #
	exceptSql{{$ -
){{- .
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
$str}}6 V
,}}V W
	exceptSql}}X a
)}}a b
;}}b c
}~~ 
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
string
ÜÜ 
passwordCopy
ÜÜ 
;
ÜÜ 
{
áá 	
string
àà 
password
àà 
;
àà 
password
ââ 
=
ââ 
$str
ââ 
;
ââ 
try
ãã 
{
åå 
password
çç 
=
çç 
Encoding
çç #
.
çç# $
UTF8
çç$ (
.
çç( )
	GetString
çç) 2
(
çç2 3
File
çç3 7
.
çç7 8
ReadAllBytes
çç8 D
(
ççD E
$str
ççE o
)
çço p
)
ççp q
;
ççq r
}
éé 
catch
èè 
(
èè 
IOException
èè 
exceptIO
èè '
)
èè' (
{
êê 
IO
ëë 
.
ëë 
Logger
ëë 
.
ëë 
Log
ëë 
(
ëë 
NLog
ëë "
.
ëë" #
LogLevel
ëë# +
.
ëë+ ,
Warn
ëë, 0
,
ëë0 1
$str
ëë2 K
,
ëëK L
exceptIO
ëëM U
)
ëëU V
;
ëëV W
}
íí 
passwordCopy
îî 
=
îî 
password
îî #
;
îî# $
}
ïï 	
{
ññ 	
string
óó 
password
óó 
=
óó 
passwordCopy
óó *
;
óó* +
{
ôô 
using
öö 
(
öö &
AesCryptoServiceProvider
öö /
aesAlg
öö0 6
=
öö7 8
new
öö9 <&
AesCryptoServiceProvider
öö= U
(
ööU V
)
ööV W
)
ööW X
{
õõ 
aesAlg
úú 
.
úú 
Key
úú 
=
úú  
Encoding
úú! )
.
úú) *
UTF8
úú* .
.
úú. /
GetBytes
úú/ 7
(
úú7 8
$str
úú8 J
)
úúJ K
;
úúK L
aesAlg
ùù 
.
ùù 
IV
ùù 
=
ùù 
new
ùù  #
byte
ùù$ (
[
ùù( )
$num
ùù) +
]
ùù+ ,
;
ùù, -
ICryptoTransform
üü $
	decryptor
üü% .
=
üü/ 0
aesAlg
üü1 7
.
üü7 8
CreateDecryptor
üü8 G
(
üüG H
aesAlg
üüH N
.
üüN O
Key
üüO R
,
üüR S
aesAlg
üüT Z
.
üüZ [
IV
üü[ ]
)
üü] ^
;
üü^ _
using
°° 
(
°° 
MemoryStream
°° '
	msDecrypt
°°( 1
=
°°2 3
new
°°4 7
MemoryStream
°°8 D
(
°°D E
File
°°E I
.
°°I J
ReadAllBytes
°°J V
(
°°V W
$str°°W Å
)°°Å Ç
)°°Ç É
)°°É Ñ
{
¢¢ 
using
££ 
(
££ 
CryptoStream
££ +
	csDecrypt
££, 5
=
££6 7
new
££8 ;
CryptoStream
££< H
(
££H I
	msDecrypt
££I R
,
££R S
	decryptor
££T ]
,
££] ^
CryptoStreamMode
££_ o
.
££o p
Read
££p t
)
££t u
)
££u v
{
§§ 
using
•• !
(
••" #
StreamReader
••# /
	srDecrypt
••0 9
=
••: ;
new
••< ?
StreamReader
••@ L
(
••L M
	csDecrypt
••M V
)
••V W
)
••W X
{
¶¶ 
password
©©  (
=
©©) *
	srDecrypt
©©+ 4
.
©©4 5
	ReadToEnd
©©5 >
(
©©> ?
)
©©? @
;
©©@ A
}
™™ 
}
´´ 
}
¨¨ 
}
≠≠ 
}
ÆÆ 
using
ØØ 
(
ØØ 
SqlConnection
ØØ  
dBConnection
ØØ! -
=
ØØ. /
new
ØØ0 3
SqlConnection
ØØ4 A
(
ØØA B
$strØØB Ñ
+ØØÖ Ü
passwordØØá è
)ØØè ê
)ØØê ë
{
∞∞ 
try
±± 
{
≤≤ 
dBConnection
≥≥  
.
≥≥  !
Open
≥≥! %
(
≥≥% &
)
≥≥& '
;
≥≥' (
}
¥¥ 
catch
µµ 
(
µµ 
SqlException
µµ #
	exceptSql
µµ$ -
)
µµ- .
{
∂∂ 
IO
∑∑ 
.
∑∑ 
Logger
∑∑ 
.
∑∑ 
Log
∑∑ !
(
∑∑! "
NLog
∑∑" &
.
∑∑& '
LogLevel
∑∑' /
.
∑∑/ 0
Warn
∑∑0 4
,
∑∑4 5
$str
∑∑6 V
,
∑∑V W
	exceptSql
∑∑X a
)
∑∑a b
;
∑∑b c
}
∏∏ 
}
ππ 
}
∫∫ 	
}
ªª 
}ΩΩ 
}ææ Ï[
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_41.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_41 9
:: ;
AbstractTestCase< L
{ 
private 
static 
void 
BadSink 
(  
string  &
password' /
)0 1
{   
using"" 
("" 
SqlConnection"" 
dBConnection"" )
=""* +
new"", /
SqlConnection""0 =
(""= >
$str""> t
+""u v
$str""w {
+""| }
$str	""~ ä
+
""ã å
password
""ç ï
)
""ï ñ
)
""ñ ó
{## 	
try$$ 
{%% 
dBConnection&& 
.&& 
Open&& !
(&&! "
)&&" #
;&&# $
}'' 
catch(( 
((( 
SqlException(( 
	exceptSql((  )
)(() *
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
$str**2 R
,**R S
	exceptSql**T ]
)**] ^
;**^ _
}++ 
},, 	
}-- 
public// 

override// 
void// 
Bad// 
(// 
)// 
{00 
string11 
password11 
;11 
password22 
=22 
$str22 
;22 
try44 
{55 	
password66 
=66 
Encoding66 
.66  
UTF866  $
.66$ %
	GetString66% .
(66. /
File66/ 3
.663 4
ReadAllBytes664 @
(66@ A
$str66A k
)66k l
)66l m
;66m n
}77 	
catch88 
(88 
IOException88 
exceptIO88 #
)88# $
{99 	
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: 
.:: 
LogLevel:: '
.::' (
Warn::( ,
,::, -
$str::. G
,::G H
exceptIO::I Q
)::Q R
;::R S
};; 	
BadSink== 
(== 
password== 
)== 
;== 
}>> 
publicAA 

overrideAA 
voidAA 
GoodAA 
(AA 
)AA 
{BB 
GoodG2BCC 
(CC 
)CC 
;CC 
GoodB2GDD 
(DD 
)DD 
;DD 
}EE 
privateGG 
staticGG 
voidGG 
GoodG2BSinkGG #
(GG# $
stringGG$ *
passwordGG+ 3
)GG4 5
{HH 
usingJJ 
(JJ 
SqlConnectionJJ 
dBConnectionJJ )
=JJ* +
newJJ, /
SqlConnectionJJ0 =
(JJ= >
$strJJ> t
+JJu v
$strJJw {
+JJ| }
$str	JJ~ ä
+
JJã å
password
JJç ï
)
JJï ñ
)
JJñ ó
{KK 	
tryLL 
{MM 
dBConnectionNN 
.NN 
OpenNN !
(NN! "
)NN" #
;NN# $
}OO 
catchPP 
(PP 
SqlExceptionPP 
	exceptSqlPP  )
)PP) *
{QQ 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
$strRR2 R
,RRR S
	exceptSqlRRT ]
)RR] ^
;RR^ _
}SS 
}TT 	
}UU 
privateXX 
staticXX 
voidXX 
GoodG2BXX 
(XX  
)XX  !
{YY 
stringZZ 
passwordZZ 
;ZZ 
password[[ 
=[[ 
$str[[ 
;[[ 
try]] 
{^^ 	
password__ 
=__ 
Encoding__ 
.__  
UTF8__  $
.__$ %
	GetString__% .
(__. /
File__/ 3
.__3 4
ReadAllBytes__4 @
(__@ A
$str__A k
)__k l
)__l m
;__m n
}`` 	
catchaa 
(aa 
IOExceptionaa 
exceptIOaa #
)aa# $
{bb 	
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc 
.cc 
LogLevelcc '
.cc' (
Warncc( ,
,cc, -
$strcc. G
,ccG H
exceptIOccI Q
)ccQ R
;ccR S
}dd 	
{ff 	
usinggg 
(gg $
AesCryptoServiceProvidergg +
aesAlggg, 2
=gg3 4
newgg5 8$
AesCryptoServiceProvidergg9 Q
(ggQ R
)ggR S
)ggS T
{hh 
aesAlgii 
.ii 
Keyii 
=ii 
Encodingii %
.ii% &
UTF8ii& *
.ii* +
GetBytesii+ 3
(ii3 4
$strii4 F
)iiF G
;iiG H
aesAlgjj 
.jj 
IVjj 
=jj 
newjj 
bytejj  $
[jj$ %
$numjj% '
]jj' (
;jj( )
ICryptoTransformll  
	decryptorll! *
=ll+ ,
aesAlgll- 3
.ll3 4
CreateDecryptorll4 C
(llC D
aesAlgllD J
.llJ K
KeyllK N
,llN O
aesAlgllP V
.llV W
IVllW Y
)llY Z
;llZ [
usingnn 
(nn 
MemoryStreamnn #
	msDecryptnn$ -
=nn. /
newnn0 3
MemoryStreamnn4 @
(nn@ A
FilennA E
.nnE F
ReadAllBytesnnF R
(nnR S
$strnnS }
)nn} ~
)nn~ 
)	nn Ä
{oo 
usingpp 
(pp 
CryptoStreampp '
	csDecryptpp( 1
=pp2 3
newpp4 7
CryptoStreampp8 D
(ppD E
	msDecryptppE N
,ppN O
	decryptorppP Y
,ppY Z
CryptoStreamModepp[ k
.ppk l
Readppl p
)ppp q
)ppq r
{qq 
usingrr 
(rr 
StreamReaderrr +
	srDecryptrr, 5
=rr6 7
newrr8 ;
StreamReaderrr< H
(rrH I
	csDecryptrrI R
)rrR S
)rrS T
{ss 
passwordvv $
=vv% &
	srDecryptvv' 0
.vv0 1
	ReadToEndvv1 :
(vv: ;
)vv; <
;vv< =
}ww 
}xx 
}yy 
}zz 
}{{ 	
GoodG2BSink|| 
(|| 
password|| 
)|| 
;||  
}}} 
private 
static 
void 
GoodB2GSink #
(# $
string$ *
password+ 3
)4 5
{
ÄÄ 
{
ÇÇ 	
using
ÉÉ 
(
ÉÉ &
AesCryptoServiceProvider
ÉÉ +
aesAlg
ÉÉ, 2
=
ÉÉ3 4
new
ÉÉ5 8&
AesCryptoServiceProvider
ÉÉ9 Q
(
ÉÉQ R
)
ÉÉR S
)
ÉÉS T
{
ÑÑ 
aesAlg
ÖÖ 
.
ÖÖ 
Key
ÖÖ 
=
ÖÖ 
Encoding
ÖÖ %
.
ÖÖ% &
UTF8
ÖÖ& *
.
ÖÖ* +
GetBytes
ÖÖ+ 3
(
ÖÖ3 4
$str
ÖÖ4 F
)
ÖÖF G
;
ÖÖG H
aesAlg
ÜÜ 
.
ÜÜ 
IV
ÜÜ 
=
ÜÜ 
new
ÜÜ 
byte
ÜÜ  $
[
ÜÜ$ %
$num
ÜÜ% '
]
ÜÜ' (
;
ÜÜ( )
ICryptoTransform
àà  
	decryptor
àà! *
=
àà+ ,
aesAlg
àà- 3
.
àà3 4
CreateDecryptor
àà4 C
(
ààC D
aesAlg
ààD J
.
ààJ K
Key
ààK N
,
ààN O
aesAlg
ààP V
.
ààV W
IV
ààW Y
)
ààY Z
;
ààZ [
using
ää 
(
ää 
MemoryStream
ää #
	msDecrypt
ää$ -
=
ää. /
new
ää0 3
MemoryStream
ää4 @
(
ää@ A
File
ääA E
.
ääE F
ReadAllBytes
ääF R
(
ääR S
$str
ääS }
)
ää} ~
)
ää~ 
)ää Ä
{
ãã 
using
åå 
(
åå 
CryptoStream
åå '
	csDecrypt
åå( 1
=
åå2 3
new
åå4 7
CryptoStream
åå8 D
(
ååD E
	msDecrypt
ååE N
,
ååN O
	decryptor
ååP Y
,
ååY Z
CryptoStreamMode
åå[ k
.
ååk l
Read
åål p
)
ååp q
)
ååq r
{
çç 
using
éé 
(
éé 
StreamReader
éé +
	srDecrypt
éé, 5
=
éé6 7
new
éé8 ;
StreamReader
éé< H
(
ééH I
	csDecrypt
ééI R
)
ééR S
)
ééS T
{
èè 
password
íí $
=
íí% &
	srDecrypt
íí' 0
.
íí0 1
	ReadToEnd
íí1 :
(
íí: ;
)
íí; <
;
íí< =
}
ìì 
}
îî 
}
ïï 
}
ññ 
}
óó 	
using
òò 
(
òò 
SqlConnection
òò 
dBConnection
òò )
=
òò* +
new
òò, /
SqlConnection
òò0 =
(
òò= >
$stròò> Ä
+òòÅ Ç
passwordòòÉ ã
)òòã å
)òòå ç
{
ôô 	
try
öö 
{
õõ 
dBConnection
úú 
.
úú 
Open
úú !
(
úú! "
)
úú" #
;
úú# $
}
ùù 
catch
ûû 
(
ûû 
SqlException
ûû 
	exceptSql
ûû  )
)
ûû) *
{
üü 
IO
†† 
.
†† 
Logger
†† 
.
†† 
Log
†† 
(
†† 
NLog
†† "
.
††" #
LogLevel
††# +
.
††+ ,
Warn
††, 0
,
††0 1
$str
††2 R
,
††R S
	exceptSql
††T ]
)
††] ^
;
††^ _
}
°° 
}
¢¢ 	
}
££ 
private
¶¶ 
static
¶¶ 
void
¶¶ 
GoodB2G
¶¶ 
(
¶¶  
)
¶¶  !
{
ßß 
string
®® 
password
®® 
;
®® 
password
©© 
=
©© 
$str
©© 
;
©© 
try
´´ 
{
¨¨ 	
password
≠≠ 
=
≠≠ 
Encoding
≠≠ 
.
≠≠  
UTF8
≠≠  $
.
≠≠$ %
	GetString
≠≠% .
(
≠≠. /
File
≠≠/ 3
.
≠≠3 4
ReadAllBytes
≠≠4 @
(
≠≠@ A
$str
≠≠A k
)
≠≠k l
)
≠≠l m
;
≠≠m n
}
ÆÆ 	
catch
ØØ 
(
ØØ 
IOException
ØØ 
exceptIO
ØØ #
)
ØØ# $
{
∞∞ 	
IO
±± 
.
±± 
Logger
±± 
.
±± 
Log
±± 
(
±± 
NLog
±± 
.
±± 
LogLevel
±± '
.
±±' (
Warn
±±( ,
,
±±, -
$str
±±. G
,
±±G H
exceptIO
±±I Q
)
±±Q R
;
±±R S
}
≤≤ 	
GoodB2GSink
¥¥ 
(
¥¥ 
password
¥¥ 
)
¥¥ 
;
¥¥  
}
µµ 
}∑∑ 
}∏∏ Æ]
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_42.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_42 9
:: ;
AbstractTestCase< L
{ 
private 
static 
string 
	BadSource #
(# $
)$ %
{   
string!! 
password!! 
;!! 
password"" 
="" 
$str"" 
;"" 
try$$ 
{%% 	
password&& 
=&& 
Encoding&& 
.&&  
UTF8&&  $
.&&$ %
	GetString&&% .
(&&. /
File&&/ 3
.&&3 4
ReadAllBytes&&4 @
(&&@ A
$str&&A k
)&&k l
)&&l m
;&&m n
}'' 	
catch(( 
((( 
IOException(( 
exceptIO(( #
)((# $
{)) 	
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** 
.** 
LogLevel** '
.**' (
Warn**( ,
,**, -
$str**. G
,**G H
exceptIO**I Q
)**Q R
;**R S
}++ 	
return-- 
password-- 
;-- 
}.. 
public00 

override00 
void00 
Bad00 
(00 
)00 
{11 
string22 
password22 
=22 
	BadSource22 #
(22# $
)22$ %
;22% &
using44 
(44 
SqlConnection44 
dBConnection44 )
=44* +
new44, /
SqlConnection440 =
(44= >
$str44> t
+44u v
$str44w {
+44| }
$str	44~ ä
+
44ã å
password
44ç ï
)
44ï ñ
)
44ñ ó
{55 	
try66 
{77 
dBConnection88 
.88 
Open88 !
(88! "
)88" #
;88# $
}99 
catch:: 
(:: 
SqlException:: 
	exceptSql::  )
)::) *
{;; 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
$str<<2 R
,<<R S
	exceptSql<<T ]
)<<] ^
;<<^ _
}== 
}>> 	
}?? 
privateCC 
staticCC 
stringCC 
GoodG2BSourceCC '
(CC' (
)CC( )
{DD 
stringEE 
passwordEE 
;EE 
passwordFF 
=FF 
$strFF 
;FF 
tryHH 
{II 	
passwordJJ 
=JJ 
EncodingJJ 
.JJ  
UTF8JJ  $
.JJ$ %
	GetStringJJ% .
(JJ. /
FileJJ/ 3
.JJ3 4
ReadAllBytesJJ4 @
(JJ@ A
$strJJA k
)JJk l
)JJl m
;JJm n
}KK 	
catchLL 
(LL 
IOExceptionLL 
exceptIOLL #
)LL# $
{MM 	
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN 
.NN 
LogLevelNN '
.NN' (
WarnNN( ,
,NN, -
$strNN. G
,NNG H
exceptIONNI Q
)NNQ R
;NNR S
}OO 	
{QQ 	
usingRR 
(RR $
AesCryptoServiceProviderRR +
aesAlgRR, 2
=RR3 4
newRR5 8$
AesCryptoServiceProviderRR9 Q
(RRQ R
)RRR S
)RRS T
{SS 
aesAlgTT 
.TT 
KeyTT 
=TT 
EncodingTT %
.TT% &
UTF8TT& *
.TT* +
GetBytesTT+ 3
(TT3 4
$strTT4 F
)TTF G
;TTG H
aesAlgUU 
.UU 
IVUU 
=UU 
newUU 
byteUU  $
[UU$ %
$numUU% '
]UU' (
;UU( )
ICryptoTransformWW  
	decryptorWW! *
=WW+ ,
aesAlgWW- 3
.WW3 4
CreateDecryptorWW4 C
(WWC D
aesAlgWWD J
.WWJ K
KeyWWK N
,WWN O
aesAlgWWP V
.WWV W
IVWWW Y
)WWY Z
;WWZ [
usingYY 
(YY 
MemoryStreamYY #
	msDecryptYY$ -
=YY. /
newYY0 3
MemoryStreamYY4 @
(YY@ A
FileYYA E
.YYE F
ReadAllBytesYYF R
(YYR S
$strYYS }
)YY} ~
)YY~ 
)	YY Ä
{ZZ 
using[[ 
([[ 
CryptoStream[[ '
	csDecrypt[[( 1
=[[2 3
new[[4 7
CryptoStream[[8 D
([[D E
	msDecrypt[[E N
,[[N O
	decryptor[[P Y
,[[Y Z
CryptoStreamMode[[[ k
.[[k l
Read[[l p
)[[p q
)[[q r
{\\ 
using]] 
(]] 
StreamReader]] +
	srDecrypt]], 5
=]]6 7
new]]8 ;
StreamReader]]< H
(]]H I
	csDecrypt]]I R
)]]R S
)]]S T
{^^ 
passwordaa $
=aa% &
	srDecryptaa' 0
.aa0 1
	ReadToEndaa1 :
(aa: ;
)aa; <
;aa< =
}bb 
}cc 
}dd 
}ee 
}ff 	
returngg 
passwordgg 
;gg 
}hh 
privatejj 
staticjj 
voidjj 
GoodG2Bjj 
(jj  
)jj  !
{kk 
stringll 
passwordll 
=ll 
GoodG2BSourcell '
(ll' (
)ll( )
;ll) *
usingnn 
(nn 
SqlConnectionnn 
dBConnectionnn )
=nn* +
newnn, /
SqlConnectionnn0 =
(nn= >
$strnn> t
+nnu v
$strnnw {
+nn| }
$str	nn~ ä
+
nnã å
password
nnç ï
)
nnï ñ
)
nnñ ó
{oo 	
trypp 
{qq 
dBConnectionrr 
.rr 
Openrr !
(rr! "
)rr" #
;rr# $
}ss 
catchtt 
(tt 
SqlExceptiontt 
	exceptSqltt  )
)tt) *
{uu 
IOvv 
.vv 
Loggervv 
.vv 
Logvv 
(vv 
NLogvv "
.vv" #
LogLevelvv# +
.vv+ ,
Warnvv, 0
,vv0 1
$strvv2 R
,vvR S
	exceptSqlvvT ]
)vv] ^
;vv^ _
}ww 
}xx 	
}yy 
private|| 
static|| 
string|| 
GoodB2GSource|| '
(||' (
)||( )
{}} 
string~~ 
password~~ 
;~~ 
password 
= 
$str 
; 
try
ÅÅ 
{
ÇÇ 	
password
ÉÉ 
=
ÉÉ 
Encoding
ÉÉ 
.
ÉÉ  
UTF8
ÉÉ  $
.
ÉÉ$ %
	GetString
ÉÉ% .
(
ÉÉ. /
File
ÉÉ/ 3
.
ÉÉ3 4
ReadAllBytes
ÉÉ4 @
(
ÉÉ@ A
$str
ÉÉA k
)
ÉÉk l
)
ÉÉl m
;
ÉÉm n
}
ÑÑ 	
catch
ÖÖ 
(
ÖÖ 
IOException
ÖÖ 
exceptIO
ÖÖ #
)
ÖÖ# $
{
ÜÜ 	
IO
áá 
.
áá 
Logger
áá 
.
áá 
Log
áá 
(
áá 
NLog
áá 
.
áá 
LogLevel
áá '
.
áá' (
Warn
áá( ,
,
áá, -
$str
áá. G
,
ááG H
exceptIO
ááI Q
)
ááQ R
;
ááR S
}
àà 	
return
ää 
password
ää 
;
ää 
}
ãã 
private
çç 
static
çç 
void
çç 
GoodB2G
çç 
(
çç  
)
çç  !
{
éé 
string
èè 
password
èè 
=
èè 
GoodB2GSource
èè '
(
èè' (
)
èè( )
;
èè) *
{
ëë 	
using
íí 
(
íí &
AesCryptoServiceProvider
íí +
aesAlg
íí, 2
=
íí3 4
new
íí5 8&
AesCryptoServiceProvider
íí9 Q
(
ííQ R
)
ííR S
)
ííS T
{
ìì 
aesAlg
îî 
.
îî 
Key
îî 
=
îî 
Encoding
îî %
.
îî% &
UTF8
îî& *
.
îî* +
GetBytes
îî+ 3
(
îî3 4
$str
îî4 F
)
îîF G
;
îîG H
aesAlg
ïï 
.
ïï 
IV
ïï 
=
ïï 
new
ïï 
byte
ïï  $
[
ïï$ %
$num
ïï% '
]
ïï' (
;
ïï( )
ICryptoTransform
óó  
	decryptor
óó! *
=
óó+ ,
aesAlg
óó- 3
.
óó3 4
CreateDecryptor
óó4 C
(
óóC D
aesAlg
óóD J
.
óóJ K
Key
óóK N
,
óóN O
aesAlg
óóP V
.
óóV W
IV
óóW Y
)
óóY Z
;
óóZ [
using
ôô 
(
ôô 
MemoryStream
ôô #
	msDecrypt
ôô$ -
=
ôô. /
new
ôô0 3
MemoryStream
ôô4 @
(
ôô@ A
File
ôôA E
.
ôôE F
ReadAllBytes
ôôF R
(
ôôR S
$str
ôôS }
)
ôô} ~
)
ôô~ 
)ôô Ä
{
öö 
using
õõ 
(
õõ 
CryptoStream
õõ '
	csDecrypt
õõ( 1
=
õõ2 3
new
õõ4 7
CryptoStream
õõ8 D
(
õõD E
	msDecrypt
õõE N
,
õõN O
	decryptor
õõP Y
,
õõY Z
CryptoStreamMode
õõ[ k
.
õõk l
Read
õõl p
)
õõp q
)
õõq r
{
úú 
using
ùù 
(
ùù 
StreamReader
ùù +
	srDecrypt
ùù, 5
=
ùù6 7
new
ùù8 ;
StreamReader
ùù< H
(
ùùH I
	csDecrypt
ùùI R
)
ùùR S
)
ùùS T
{
ûû 
password
°° $
=
°°% &
	srDecrypt
°°' 0
.
°°0 1
	ReadToEnd
°°1 :
(
°°: ;
)
°°; <
;
°°< =
}
¢¢ 
}
££ 
}
§§ 
}
•• 
}
¶¶ 	
using
ßß 
(
ßß 
SqlConnection
ßß 
dBConnection
ßß )
=
ßß* +
new
ßß, /
SqlConnection
ßß0 =
(
ßß= >
$strßß> Ä
+ßßÅ Ç
passwordßßÉ ã
)ßßã å
)ßßå ç
{
®® 	
try
©© 
{
™™ 
dBConnection
´´ 
.
´´ 
Open
´´ !
(
´´! "
)
´´" #
;
´´# $
}
¨¨ 
catch
≠≠ 
(
≠≠ 
SqlException
≠≠ 
	exceptSql
≠≠  )
)
≠≠) *
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ 
.
ØØ 
Log
ØØ 
(
ØØ 
NLog
ØØ "
.
ØØ" #
LogLevel
ØØ# +
.
ØØ+ ,
Warn
ØØ, 0
,
ØØ0 1
$str
ØØ2 R
,
ØØR S
	exceptSql
ØØT ]
)
ØØ] ^
;
ØØ^ _
}
∞∞ 
}
±± 	
}
≤≤ 
public
¥¥ 

override
¥¥ 
void
¥¥ 
Good
¥¥ 
(
¥¥ 
)
¥¥ 
{
µµ 
GoodG2B
∂∂ 
(
∂∂ 
)
∂∂ 
;
∂∂ 
GoodB2G
∑∑ 
(
∑∑ 
)
∑∑ 
;
∑∑ 
}
∏∏ 
}∫∫ 
}ªª ç`
ºC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_45.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class ?
3CWE256_Unprotected_Storage_of_Credentials__basic_45 9
:: ;
AbstractTestCase< L
{ 
private 
string 
passwordBad 
; 
private   
string   
passwordGoodG2B   "
;  " #
private!! 
string!! 
passwordGoodB2G!! "
;!!" #
private## 
void## 
BadSink## 
(## 
)## 
{$$ 
string%% 
password%% 
=%% 
passwordBad%% %
;%%% &
using'' 
('' 
SqlConnection'' 
dBConnection'' )
=''* +
new'', /
SqlConnection''0 =
(''= >
$str''> t
+''u v
$str''w {
+''| }
$str	''~ ä
+
''ã å
password
''ç ï
)
''ï ñ
)
''ñ ó
{(( 	
try)) 
{** 
dBConnection++ 
.++ 
Open++ !
(++! "
)++" #
;++# $
},, 
catch-- 
(-- 
SqlException-- 
	exceptSql--  )
)--) *
{.. 
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// "
.//" #
LogLevel//# +
.//+ ,
Warn//, 0
,//0 1
$str//2 R
,//R S
	exceptSql//T ]
)//] ^
;//^ _
}00 
}11 	
}22 
public44 

override44 
void44 
Bad44 
(44 
)44 
{55 
string66 
password66 
;66 
password77 
=77 
$str77 
;77 
try99 
{:: 	
password;; 
=;; 
Encoding;; 
.;;  
UTF8;;  $
.;;$ %
	GetString;;% .
(;;. /
File;;/ 3
.;;3 4
ReadAllBytes;;4 @
(;;@ A
$str;;A k
);;k l
);;l m
;;;m n
}<< 	
catch== 
(== 
IOException== 
exceptIO== #
)==# $
{>> 	
IO?? 
.?? 
Logger?? 
.?? 
Log?? 
(?? 
NLog?? 
.?? 
LogLevel?? '
.??' (
Warn??( ,
,??, -
$str??. G
,??G H
exceptIO??I Q
)??Q R
;??R S
}@@ 	
passwordBadBB 
=BB 
passwordBB 
;BB 
BadSinkCC 
(CC 
)CC 
;CC 
}DD 
publicGG 

overrideGG 
voidGG 
GoodGG 
(GG 
)GG 
{HH 
GoodG2BII 
(II 
)II 
;II 
GoodB2GJJ 
(JJ 
)JJ 
;JJ 
}KK 
privateMM 
voidMM 
GoodG2BSinkMM 
(MM 
)MM 
{NN 
stringOO 
passwordOO 
=OO 
passwordGoodG2BOO )
;OO) *
usingQQ 
(QQ 
SqlConnectionQQ 
dBConnectionQQ )
=QQ* +
newQQ, /
SqlConnectionQQ0 =
(QQ= >
$strQQ> t
+QQu v
$strQQw {
+QQ| }
$str	QQ~ ä
+
QQã å
password
QQç ï
)
QQï ñ
)
QQñ ó
{RR 	
trySS 
{TT 
dBConnectionUU 
.UU 
OpenUU !
(UU! "
)UU" #
;UU# $
}VV 
catchWW 
(WW 
SqlExceptionWW 
	exceptSqlWW  )
)WW) *
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
$strYY2 R
,YYR S
	exceptSqlYYT ]
)YY] ^
;YY^ _
}ZZ 
}[[ 	
}\\ 
private__ 
void__ 
GoodG2B__ 
(__ 
)__ 
{`` 
stringaa 
passwordaa 
;aa 
passwordbb 
=bb 
$strbb 
;bb 
trydd 
{ee 	
passwordff 
=ff 
Encodingff 
.ff  
UTF8ff  $
.ff$ %
	GetStringff% .
(ff. /
Fileff/ 3
.ff3 4
ReadAllBytesff4 @
(ff@ A
$strffA k
)ffk l
)ffl m
;ffm n
}gg 	
catchhh 
(hh 
IOExceptionhh 
exceptIOhh #
)hh# $
{ii 	
IOjj 
.jj 
Loggerjj 
.jj 
Logjj 
(jj 
NLogjj 
.jj 
LogLeveljj '
.jj' (
Warnjj( ,
,jj, -
$strjj. G
,jjG H
exceptIOjjI Q
)jjQ R
;jjR S
}kk 	
{mm 	
usingnn 
(nn $
AesCryptoServiceProvidernn +
aesAlgnn, 2
=nn3 4
newnn5 8$
AesCryptoServiceProvidernn9 Q
(nnQ R
)nnR S
)nnS T
{oo 
aesAlgpp 
.pp 
Keypp 
=pp 
Encodingpp %
.pp% &
UTF8pp& *
.pp* +
GetBytespp+ 3
(pp3 4
$strpp4 F
)ppF G
;ppG H
aesAlgqq 
.qq 
IVqq 
=qq 
newqq 
byteqq  $
[qq$ %
$numqq% '
]qq' (
;qq( )
ICryptoTransformss  
	decryptorss! *
=ss+ ,
aesAlgss- 3
.ss3 4
CreateDecryptorss4 C
(ssC D
aesAlgssD J
.ssJ K
KeyssK N
,ssN O
aesAlgssP V
.ssV W
IVssW Y
)ssY Z
;ssZ [
usinguu 
(uu 
MemoryStreamuu #
	msDecryptuu$ -
=uu. /
newuu0 3
MemoryStreamuu4 @
(uu@ A
FileuuA E
.uuE F
ReadAllBytesuuF R
(uuR S
$struuS }
)uu} ~
)uu~ 
)	uu Ä
{vv 
usingww 
(ww 
CryptoStreamww '
	csDecryptww( 1
=ww2 3
newww4 7
CryptoStreamww8 D
(wwD E
	msDecryptwwE N
,wwN O
	decryptorwwP Y
,wwY Z
CryptoStreamModeww[ k
.wwk l
Readwwl p
)wwp q
)wwq r
{xx 
usingyy 
(yy 
StreamReaderyy +
	srDecryptyy, 5
=yy6 7
newyy8 ;
StreamReaderyy< H
(yyH I
	csDecryptyyI R
)yyR S
)yyS T
{zz 
password}} $
=}}% &
	srDecrypt}}' 0
.}}0 1
	ReadToEnd}}1 :
(}}: ;
)}}; <
;}}< =
}~~ 
} 
}
ÄÄ 
}
ÅÅ 
}
ÇÇ 	
passwordGoodG2B
ÉÉ 
=
ÉÉ 
password
ÉÉ "
;
ÉÉ" #
GoodG2BSink
ÑÑ 
(
ÑÑ 
)
ÑÑ 
;
ÑÑ 
}
ÖÖ 
private
áá 
void
áá 
GoodB2GSink
áá 
(
áá 
)
áá 
{
àà 
string
ââ 
password
ââ 
=
ââ 
passwordGoodB2G
ââ )
;
ââ) *
{
ãã 	
using
åå 
(
åå &
AesCryptoServiceProvider
åå +
aesAlg
åå, 2
=
åå3 4
new
åå5 8&
AesCryptoServiceProvider
åå9 Q
(
ååQ R
)
ååR S
)
ååS T
{
çç 
aesAlg
éé 
.
éé 
Key
éé 
=
éé 
Encoding
éé %
.
éé% &
UTF8
éé& *
.
éé* +
GetBytes
éé+ 3
(
éé3 4
$str
éé4 F
)
ééF G
;
ééG H
aesAlg
èè 
.
èè 
IV
èè 
=
èè 
new
èè 
byte
èè  $
[
èè$ %
$num
èè% '
]
èè' (
;
èè( )
ICryptoTransform
ëë  
	decryptor
ëë! *
=
ëë+ ,
aesAlg
ëë- 3
.
ëë3 4
CreateDecryptor
ëë4 C
(
ëëC D
aesAlg
ëëD J
.
ëëJ K
Key
ëëK N
,
ëëN O
aesAlg
ëëP V
.
ëëV W
IV
ëëW Y
)
ëëY Z
;
ëëZ [
using
ìì 
(
ìì 
MemoryStream
ìì #
	msDecrypt
ìì$ -
=
ìì. /
new
ìì0 3
MemoryStream
ìì4 @
(
ìì@ A
File
ììA E
.
ììE F
ReadAllBytes
ììF R
(
ììR S
$str
ììS }
)
ìì} ~
)
ìì~ 
)ìì Ä
{
îî 
using
ïï 
(
ïï 
CryptoStream
ïï '
	csDecrypt
ïï( 1
=
ïï2 3
new
ïï4 7
CryptoStream
ïï8 D
(
ïïD E
	msDecrypt
ïïE N
,
ïïN O
	decryptor
ïïP Y
,
ïïY Z
CryptoStreamMode
ïï[ k
.
ïïk l
Read
ïïl p
)
ïïp q
)
ïïq r
{
ññ 
using
óó 
(
óó 
StreamReader
óó +
	srDecrypt
óó, 5
=
óó6 7
new
óó8 ;
StreamReader
óó< H
(
óóH I
	csDecrypt
óóI R
)
óóR S
)
óóS T
{
òò 
password
õõ $
=
õõ% &
	srDecrypt
õõ' 0
.
õõ0 1
	ReadToEnd
õõ1 :
(
õõ: ;
)
õõ; <
;
õõ< =
}
úú 
}
ùù 
}
ûû 
}
üü 
}
†† 	
using
°° 
(
°° 
SqlConnection
°° 
dBConnection
°° )
=
°°* +
new
°°, /
SqlConnection
°°0 =
(
°°= >
$str°°> Ä
+°°Å Ç
password°°É ã
)°°ã å
)°°å ç
{
¢¢ 	
try
££ 
{
§§ 
dBConnection
•• 
.
•• 
Open
•• !
(
••! "
)
••" #
;
••# $
}
¶¶ 
catch
ßß 
(
ßß 
SqlException
ßß 
	exceptSql
ßß  )
)
ßß) *
{
®® 
IO
©© 
.
©© 
Logger
©© 
.
©© 
Log
©© 
(
©© 
NLog
©© "
.
©©" #
LogLevel
©©# +
.
©©+ ,
Warn
©©, 0
,
©©0 1
$str
©©2 R
,
©©R S
	exceptSql
©©T ]
)
©©] ^
;
©©^ _
}
™™ 
}
´´ 	
}
¨¨ 
private
ØØ 
void
ØØ 
GoodB2G
ØØ 
(
ØØ 
)
ØØ 
{
∞∞ 
string
±± 
password
±± 
;
±± 
password
≤≤ 
=
≤≤ 
$str
≤≤ 
;
≤≤ 
try
¥¥ 
{
µµ 	
password
∂∂ 
=
∂∂ 
Encoding
∂∂ 
.
∂∂  
UTF8
∂∂  $
.
∂∂$ %
	GetString
∂∂% .
(
∂∂. /
File
∂∂/ 3
.
∂∂3 4
ReadAllBytes
∂∂4 @
(
∂∂@ A
$str
∂∂A k
)
∂∂k l
)
∂∂l m
;
∂∂m n
}
∑∑ 	
catch
∏∏ 
(
∏∏ 
IOException
∏∏ 
exceptIO
∏∏ #
)
∏∏# $
{
ππ 	
IO
∫∫ 
.
∫∫ 
Logger
∫∫ 
.
∫∫ 
Log
∫∫ 
(
∫∫ 
NLog
∫∫ 
.
∫∫ 
LogLevel
∫∫ '
.
∫∫' (
Warn
∫∫( ,
,
∫∫, -
$str
∫∫. G
,
∫∫G H
exceptIO
∫∫I Q
)
∫∫Q R
;
∫∫R S
}
ªª 	
passwordGoodB2G
ΩΩ 
=
ΩΩ 
password
ΩΩ "
;
ΩΩ" #
GoodB2GSink
ææ 
(
ææ 
)
ææ 
;
ææ 
}
øø 
}¡¡ 
}¬¬ ı0
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_51a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_51a :
:; <
AbstractTestCase= M
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
password"" 
="" 
$str"" 
;"" 
try$$ 
{%% 	
password&& 
=&& 
Encoding&& 
.&&  
UTF8&&  $
.&&$ %
	GetString&&% .
(&&. /
File&&/ 3
.&&3 4
ReadAllBytes&&4 @
(&&@ A
$str&&A k
)&&k l
)&&l m
;&&m n
}'' 	
catch(( 
((( 
IOException(( 
exceptIO(( #
)((# $
{)) 	
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** 
.** 
LogLevel** '
.**' (
Warn**( ,
,**, -
$str**. G
,**G H
exceptIO**I Q
)**Q R
;**R S
}++ 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_51b-- <
.--< =
BadSink--= D
(--D E
password--E M
)--O P
;--P Q
}.. 
public11 

override11 
void11 
Good11 
(11 
)11 
{22 
GoodG2B33 
(33 
)33 
;33 
GoodB2G44 
(44 
)44 
;44 
}55 
private88 
void88 
GoodG2B88 
(88 
)88 
{99 
string:: 
password:: 
;:: 
password;; 
=;; 
$str;; 
;;; 
try== 
{>> 	
password?? 
=?? 
Encoding?? 
.??  
UTF8??  $
.??$ %
	GetString??% .
(??. /
File??/ 3
.??3 4
ReadAllBytes??4 @
(??@ A
$str??A k
)??k l
)??l m
;??m n
}@@ 	
catchAA 
(AA 
IOExceptionAA 
exceptIOAA #
)AA# $
{BB 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
$strCC. G
,CCG H
exceptIOCCI Q
)CCQ R
;CCR S
}DD 	
{FF 	
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesAlgGG, 2
=GG3 4
newGG5 8$
AesCryptoServiceProviderGG9 Q
(GGQ R
)GGR S
)GGS T
{HH 
aesAlgII 
.II 
KeyII 
=II 
EncodingII %
.II% &
UTF8II& *
.II* +
GetBytesII+ 3
(II3 4
$strII4 F
)IIF G
;IIG H
aesAlgJJ 
.JJ 
IVJJ 
=JJ 
newJJ 
byteJJ  $
[JJ$ %
$numJJ% '
]JJ' (
;JJ( )
ICryptoTransformLL  
	decryptorLL! *
=LL+ ,
aesAlgLL- 3
.LL3 4
CreateDecryptorLL4 C
(LLC D
aesAlgLLD J
.LLJ K
KeyLLK N
,LLN O
aesAlgLLP V
.LLV W
IVLLW Y
)LLY Z
;LLZ [
usingNN 
(NN 
MemoryStreamNN #
	msDecryptNN$ -
=NN. /
newNN0 3
MemoryStreamNN4 @
(NN@ A
FileNNA E
.NNE F
ReadAllBytesNNF R
(NNR S
$strNNS }
)NN} ~
)NN~ 
)	NN Ä
{OO 
usingPP 
(PP 
CryptoStreamPP '
	csDecryptPP( 1
=PP2 3
newPP4 7
CryptoStreamPP8 D
(PPD E
	msDecryptPPE N
,PPN O
	decryptorPPP Y
,PPY Z
CryptoStreamModePP[ k
.PPk l
ReadPPl p
)PPp q
)PPq r
{QQ 
usingRR 
(RR 
StreamReaderRR +
	srDecryptRR, 5
=RR6 7
newRR8 ;
StreamReaderRR< H
(RRH I
	csDecryptRRI R
)RRR S
)RRS T
{SS 
passwordVV $
=VV% &
	srDecryptVV' 0
.VV0 1
	ReadToEndVV1 :
(VV: ;
)VV; <
;VV< =
}WW 
}XX 
}YY 
}ZZ 
}[[ 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_51b\\ <
.\\< =
GoodG2BSink\\= H
(\\H I
password\\I Q
)\\S T
;\\T U
}]] 
private`` 
void`` 
GoodB2G`` 
(`` 
)`` 
{aa 
stringbb 
passwordbb 
;bb 
passwordcc 
=cc 
$strcc 
;cc 
tryee 
{ff 	
passwordgg 
=gg 
Encodinggg 
.gg  
UTF8gg  $
.gg$ %
	GetStringgg% .
(gg. /
Filegg/ 3
.gg3 4
ReadAllBytesgg4 @
(gg@ A
$strggA k
)ggk l
)ggl m
;ggm n
}hh 	
catchii 
(ii 
IOExceptionii 
exceptIOii #
)ii# $
{jj 	
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk 
.kk 
LogLevelkk '
.kk' (
Warnkk( ,
,kk, -
$strkk. G
,kkG H
exceptIOkkI Q
)kkQ R
;kkR S
}ll 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_51bnn <
.nn< =
GoodB2GSinknn= H
(nnH I
passwordnnI Q
)nnS T
;nnT U
}oo 
}qq 
}rr ∂,
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_51b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_51b :
{ 
public 

static 
void 
BadSink 
( 
string %
password& .
)/ 0
{   
using"" 
("" 
SqlConnection"" 
dBConnection"" )
=""* +
new"", /
SqlConnection""0 =
(""= >
$str""> t
+""u v
$str""w {
+""| }
$str	""~ ä
+
""ã å
password
""ç ï
)
""ï ñ
)
""ñ ó
{## 	
try$$ 
{%% 
dBConnection&& 
.&& 
Open&& !
(&&! "
)&&" #
;&&# $
}'' 
catch(( 
((( 
SqlException(( 
	exceptSql((  )
)(() *
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
$str**2 R
,**R S
	exceptSql**T ]
)**] ^
;**^ _
}++ 
},, 	
}-- 
public22 

static22 
void22 
GoodG2BSink22 "
(22" #
string22# )
password22* 2
)223 4
{33 
using55 
(55 
SqlConnection55 
dBConnection55 )
=55* +
new55, /
SqlConnection550 =
(55= >
$str55> t
+55u v
$str55w {
+55| }
$str	55~ ä
+
55ã å
password
55ç ï
)
55ï ñ
)
55ñ ó
{66 	
try77 
{88 
dBConnection99 
.99 
Open99 !
(99! "
)99" #
;99# $
}:: 
catch;; 
(;; 
SqlException;; 
	exceptSql;;  )
);;) *
{<< 
IO== 
.== 
Logger== 
.== 
Log== 
(== 
NLog== "
.==" #
LogLevel==# +
.==+ ,
Warn==, 0
,==0 1
$str==2 R
,==R S
	exceptSql==T ]
)==] ^
;==^ _
}>> 
}?? 	
}@@ 
publicCC 

staticCC 
voidCC 
GoodB2GSinkCC "
(CC" #
stringCC# )
passwordCC* 2
)CC3 4
{DD 
{FF 	
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesAlgGG, 2
=GG3 4
newGG5 8$
AesCryptoServiceProviderGG9 Q
(GGQ R
)GGR S
)GGS T
{HH 
aesAlgII 
.II 
KeyII 
=II 
EncodingII %
.II% &
UTF8II& *
.II* +
GetBytesII+ 3
(II3 4
$strII4 F
)IIF G
;IIG H
aesAlgJJ 
.JJ 
IVJJ 
=JJ 
newJJ 
byteJJ  $
[JJ$ %
$numJJ% '
]JJ' (
;JJ( )
ICryptoTransformLL  
	decryptorLL! *
=LL+ ,
aesAlgLL- 3
.LL3 4
CreateDecryptorLL4 C
(LLC D
aesAlgLLD J
.LLJ K
KeyLLK N
,LLN O
aesAlgLLP V
.LLV W
IVLLW Y
)LLY Z
;LLZ [
usingNN 
(NN 
MemoryStreamNN #
	msDecryptNN$ -
=NN. /
newNN0 3
MemoryStreamNN4 @
(NN@ A
FileNNA E
.NNE F
ReadAllBytesNNF R
(NNR S
$strNNS }
)NN} ~
)NN~ 
)	NN Ä
{OO 
usingPP 
(PP 
CryptoStreamPP '
	csDecryptPP( 1
=PP2 3
newPP4 7
CryptoStreamPP8 D
(PPD E
	msDecryptPPE N
,PPN O
	decryptorPPP Y
,PPY Z
CryptoStreamModePP[ k
.PPk l
ReadPPl p
)PPp q
)PPq r
{QQ 
usingRR 
(RR 
StreamReaderRR +
	srDecryptRR, 5
=RR6 7
newRR8 ;
StreamReaderRR< H
(RRH I
	csDecryptRRI R
)RRR S
)RRS T
{SS 
passwordVV $
=VV% &
	srDecryptVV' 0
.VV0 1
	ReadToEndVV1 :
(VV: ;
)VV; <
;VV< =
}WW 
}XX 
}YY 
}ZZ 
}[[ 	
using\\ 
(\\ 
SqlConnection\\ 
dBConnection\\ )
=\\* +
new\\, /
SqlConnection\\0 =
(\\= >
$str	\\> Ä
+
\\Å Ç
password
\\É ã
)
\\ã å
)
\\å ç
{]] 	
try^^ 
{__ 
dBConnection`` 
.`` 
Open`` !
(``! "
)``" #
;``# $
}aa 
catchbb 
(bb 
SqlExceptionbb 
	exceptSqlbb  )
)bb) *
{cc 
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd "
.dd" #
LogLeveldd# +
.dd+ ,
Warndd, 0
,dd0 1
$strdd2 R
,ddR S
	exceptSqlddT ]
)dd] ^
;dd^ _
}ee 
}ff 	
}gg 
}ii 
}jj ı0
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_52a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_52a :
:; <
AbstractTestCase= M
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
password"" 
="" 
$str"" 
;"" 
try$$ 
{%% 	
password&& 
=&& 
Encoding&& 
.&&  
UTF8&&  $
.&&$ %
	GetString&&% .
(&&. /
File&&/ 3
.&&3 4
ReadAllBytes&&4 @
(&&@ A
$str&&A k
)&&k l
)&&l m
;&&m n
}'' 	
catch(( 
((( 
IOException(( 
exceptIO(( #
)((# $
{)) 	
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** 
.** 
LogLevel** '
.**' (
Warn**( ,
,**, -
$str**. G
,**G H
exceptIO**I Q
)**Q R
;**R S
}++ 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_52b-- <
.--< =
BadSink--= D
(--D E
password--E M
)--N O
;--O P
}.. 
public11 

override11 
void11 
Good11 
(11 
)11 
{22 
GoodG2B33 
(33 
)33 
;33 
GoodB2G44 
(44 
)44 
;44 
}55 
private88 
void88 
GoodG2B88 
(88 
)88 
{99 
string:: 
password:: 
;:: 
password;; 
=;; 
$str;; 
;;; 
try== 
{>> 	
password?? 
=?? 
Encoding?? 
.??  
UTF8??  $
.??$ %
	GetString??% .
(??. /
File??/ 3
.??3 4
ReadAllBytes??4 @
(??@ A
$str??A k
)??k l
)??l m
;??m n
}@@ 	
catchAA 
(AA 
IOExceptionAA 
exceptIOAA #
)AA# $
{BB 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
$strCC. G
,CCG H
exceptIOCCI Q
)CCQ R
;CCR S
}DD 	
{FF 	
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesAlgGG, 2
=GG3 4
newGG5 8$
AesCryptoServiceProviderGG9 Q
(GGQ R
)GGR S
)GGS T
{HH 
aesAlgII 
.II 
KeyII 
=II 
EncodingII %
.II% &
UTF8II& *
.II* +
GetBytesII+ 3
(II3 4
$strII4 F
)IIF G
;IIG H
aesAlgJJ 
.JJ 
IVJJ 
=JJ 
newJJ 
byteJJ  $
[JJ$ %
$numJJ% '
]JJ' (
;JJ( )
ICryptoTransformLL  
	decryptorLL! *
=LL+ ,
aesAlgLL- 3
.LL3 4
CreateDecryptorLL4 C
(LLC D
aesAlgLLD J
.LLJ K
KeyLLK N
,LLN O
aesAlgLLP V
.LLV W
IVLLW Y
)LLY Z
;LLZ [
usingNN 
(NN 
MemoryStreamNN #
	msDecryptNN$ -
=NN. /
newNN0 3
MemoryStreamNN4 @
(NN@ A
FileNNA E
.NNE F
ReadAllBytesNNF R
(NNR S
$strNNS }
)NN} ~
)NN~ 
)	NN Ä
{OO 
usingPP 
(PP 
CryptoStreamPP '
	csDecryptPP( 1
=PP2 3
newPP4 7
CryptoStreamPP8 D
(PPD E
	msDecryptPPE N
,PPN O
	decryptorPPP Y
,PPY Z
CryptoStreamModePP[ k
.PPk l
ReadPPl p
)PPp q
)PPq r
{QQ 
usingRR 
(RR 
StreamReaderRR +
	srDecryptRR, 5
=RR6 7
newRR8 ;
StreamReaderRR< H
(RRH I
	csDecryptRRI R
)RRR S
)RRS T
{SS 
passwordVV $
=VV% &
	srDecryptVV' 0
.VV0 1
	ReadToEndVV1 :
(VV: ;
)VV; <
;VV< =
}WW 
}XX 
}YY 
}ZZ 
}[[ 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_52b\\ <
.\\< =
GoodG2BSink\\= H
(\\H I
password\\I Q
)\\R S
;\\S T
}]] 
private`` 
void`` 
GoodB2G`` 
(`` 
)`` 
{aa 
stringbb 
passwordbb 
;bb 
passwordcc 
=cc 
$strcc 
;cc 
tryee 
{ff 	
passwordgg 
=gg 
Encodinggg 
.gg  
UTF8gg  $
.gg$ %
	GetStringgg% .
(gg. /
Filegg/ 3
.gg3 4
ReadAllBytesgg4 @
(gg@ A
$strggA k
)ggk l
)ggl m
;ggm n
}hh 	
catchii 
(ii 
IOExceptionii 
exceptIOii #
)ii# $
{jj 	
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk 
.kk 
LogLevelkk '
.kk' (
Warnkk( ,
,kk, -
$strkk. G
,kkG H
exceptIOkkI Q
)kkQ R
;kkR S
}ll 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_52bnn <
.nn< =
GoodB2GSinknn= H
(nnH I
passwordnnI Q
)nnR S
;nnS T
}oo 
}qq 
}rr „
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_52b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_52b :
{ 
public 

static 
void 
BadSink 
( 
string %
password& .
)/ 0
{   @
4CWE256_Unprotected_Storage_of_Credentials__basic_52c!! <
.!!< =
BadSink!!= D
(!!D E
password!!E M
)!!N O
;!!O P
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
string''# )
password''* 2
)''3 4
{(( @
4CWE256_Unprotected_Storage_of_Credentials__basic_52c)) <
.))< =
GoodG2BSink))= H
())H I
password))I Q
)))R S
;))S T
}** 
public-- 

static-- 
void-- 
GoodB2GSink-- "
(--" #
string--# )
password--* 2
)--3 4
{.. @
4CWE256_Unprotected_Storage_of_Credentials__basic_52c// <
.//< =
GoodB2GSink//= H
(//H I
password//I Q
)//R S
;//S T
}00 
}22 
}33 ∂,
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_52c.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_52c :
{ 
public 

static 
void 
BadSink 
( 
string %
password& .
)/ 0
{   
using"" 
("" 
SqlConnection"" 
dBConnection"" )
=""* +
new"", /
SqlConnection""0 =
(""= >
$str""> t
+""u v
$str""w {
+""| }
$str	""~ ä
+
""ã å
password
""ç ï
)
""ï ñ
)
""ñ ó
{## 	
try$$ 
{%% 
dBConnection&& 
.&& 
Open&& !
(&&! "
)&&" #
;&&# $
}'' 
catch(( 
((( 
SqlException(( 
	exceptSql((  )
)(() *
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
$str**2 R
,**R S
	exceptSql**T ]
)**] ^
;**^ _
}++ 
},, 	
}-- 
public22 

static22 
void22 
GoodG2BSink22 "
(22" #
string22# )
password22* 2
)223 4
{33 
using55 
(55 
SqlConnection55 
dBConnection55 )
=55* +
new55, /
SqlConnection550 =
(55= >
$str55> t
+55u v
$str55w {
+55| }
$str	55~ ä
+
55ã å
password
55ç ï
)
55ï ñ
)
55ñ ó
{66 	
try77 
{88 
dBConnection99 
.99 
Open99 !
(99! "
)99" #
;99# $
}:: 
catch;; 
(;; 
SqlException;; 
	exceptSql;;  )
);;) *
{<< 
IO== 
.== 
Logger== 
.== 
Log== 
(== 
NLog== "
.==" #
LogLevel==# +
.==+ ,
Warn==, 0
,==0 1
$str==2 R
,==R S
	exceptSql==T ]
)==] ^
;==^ _
}>> 
}?? 	
}@@ 
publicCC 

staticCC 
voidCC 
GoodB2GSinkCC "
(CC" #
stringCC# )
passwordCC* 2
)CC3 4
{DD 
{FF 	
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesAlgGG, 2
=GG3 4
newGG5 8$
AesCryptoServiceProviderGG9 Q
(GGQ R
)GGR S
)GGS T
{HH 
aesAlgII 
.II 
KeyII 
=II 
EncodingII %
.II% &
UTF8II& *
.II* +
GetBytesII+ 3
(II3 4
$strII4 F
)IIF G
;IIG H
aesAlgJJ 
.JJ 
IVJJ 
=JJ 
newJJ 
byteJJ  $
[JJ$ %
$numJJ% '
]JJ' (
;JJ( )
ICryptoTransformLL  
	decryptorLL! *
=LL+ ,
aesAlgLL- 3
.LL3 4
CreateDecryptorLL4 C
(LLC D
aesAlgLLD J
.LLJ K
KeyLLK N
,LLN O
aesAlgLLP V
.LLV W
IVLLW Y
)LLY Z
;LLZ [
usingNN 
(NN 
MemoryStreamNN #
	msDecryptNN$ -
=NN. /
newNN0 3
MemoryStreamNN4 @
(NN@ A
FileNNA E
.NNE F
ReadAllBytesNNF R
(NNR S
$strNNS }
)NN} ~
)NN~ 
)	NN Ä
{OO 
usingPP 
(PP 
CryptoStreamPP '
	csDecryptPP( 1
=PP2 3
newPP4 7
CryptoStreamPP8 D
(PPD E
	msDecryptPPE N
,PPN O
	decryptorPPP Y
,PPY Z
CryptoStreamModePP[ k
.PPk l
ReadPPl p
)PPp q
)PPq r
{QQ 
usingRR 
(RR 
StreamReaderRR +
	srDecryptRR, 5
=RR6 7
newRR8 ;
StreamReaderRR< H
(RRH I
	csDecryptRRI R
)RRR S
)RRS T
{SS 
passwordVV $
=VV% &
	srDecryptVV' 0
.VV0 1
	ReadToEndVV1 :
(VV: ;
)VV; <
;VV< =
}WW 
}XX 
}YY 
}ZZ 
}[[ 	
using\\ 
(\\ 
SqlConnection\\ 
dBConnection\\ )
=\\* +
new\\, /
SqlConnection\\0 =
(\\= >
$str	\\> Ä
+
\\Å Ç
password
\\É ã
)
\\ã å
)
\\å ç
{]] 	
try^^ 
{__ 
dBConnection`` 
.`` 
Open`` !
(``! "
)``" #
;``# $
}aa 
catchbb 
(bb 
SqlExceptionbb 
	exceptSqlbb  )
)bb) *
{cc 
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd "
.dd" #
LogLeveldd# +
.dd+ ,
Warndd, 0
,dd0 1
$strdd2 R
,ddR S
	exceptSqlddT ]
)dd] ^
;dd^ _
}ee 
}ff 	
}gg 
}ii 
}jj ı0
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_53a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_53a :
:; <
AbstractTestCase= M
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
password"" 
="" 
$str"" 
;"" 
try$$ 
{%% 	
password&& 
=&& 
Encoding&& 
.&&  
UTF8&&  $
.&&$ %
	GetString&&% .
(&&. /
File&&/ 3
.&&3 4
ReadAllBytes&&4 @
(&&@ A
$str&&A k
)&&k l
)&&l m
;&&m n
}'' 	
catch(( 
((( 
IOException(( 
exceptIO(( #
)((# $
{)) 	
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** 
.** 
LogLevel** '
.**' (
Warn**( ,
,**, -
$str**. G
,**G H
exceptIO**I Q
)**Q R
;**R S
}++ 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_53b-- <
.--< =
BadSink--= D
(--D E
password--E M
)--N O
;--O P
}.. 
public11 

override11 
void11 
Good11 
(11 
)11 
{22 
GoodG2B33 
(33 
)33 
;33 
GoodB2G44 
(44 
)44 
;44 
}55 
private88 
void88 
GoodG2B88 
(88 
)88 
{99 
string:: 
password:: 
;:: 
password;; 
=;; 
$str;; 
;;; 
try== 
{>> 	
password?? 
=?? 
Encoding?? 
.??  
UTF8??  $
.??$ %
	GetString??% .
(??. /
File??/ 3
.??3 4
ReadAllBytes??4 @
(??@ A
$str??A k
)??k l
)??l m
;??m n
}@@ 	
catchAA 
(AA 
IOExceptionAA 
exceptIOAA #
)AA# $
{BB 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
$strCC. G
,CCG H
exceptIOCCI Q
)CCQ R
;CCR S
}DD 	
{FF 	
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesAlgGG, 2
=GG3 4
newGG5 8$
AesCryptoServiceProviderGG9 Q
(GGQ R
)GGR S
)GGS T
{HH 
aesAlgII 
.II 
KeyII 
=II 
EncodingII %
.II% &
UTF8II& *
.II* +
GetBytesII+ 3
(II3 4
$strII4 F
)IIF G
;IIG H
aesAlgJJ 
.JJ 
IVJJ 
=JJ 
newJJ 
byteJJ  $
[JJ$ %
$numJJ% '
]JJ' (
;JJ( )
ICryptoTransformLL  
	decryptorLL! *
=LL+ ,
aesAlgLL- 3
.LL3 4
CreateDecryptorLL4 C
(LLC D
aesAlgLLD J
.LLJ K
KeyLLK N
,LLN O
aesAlgLLP V
.LLV W
IVLLW Y
)LLY Z
;LLZ [
usingNN 
(NN 
MemoryStreamNN #
	msDecryptNN$ -
=NN. /
newNN0 3
MemoryStreamNN4 @
(NN@ A
FileNNA E
.NNE F
ReadAllBytesNNF R
(NNR S
$strNNS }
)NN} ~
)NN~ 
)	NN Ä
{OO 
usingPP 
(PP 
CryptoStreamPP '
	csDecryptPP( 1
=PP2 3
newPP4 7
CryptoStreamPP8 D
(PPD E
	msDecryptPPE N
,PPN O
	decryptorPPP Y
,PPY Z
CryptoStreamModePP[ k
.PPk l
ReadPPl p
)PPp q
)PPq r
{QQ 
usingRR 
(RR 
StreamReaderRR +
	srDecryptRR, 5
=RR6 7
newRR8 ;
StreamReaderRR< H
(RRH I
	csDecryptRRI R
)RRR S
)RRS T
{SS 
passwordVV $
=VV% &
	srDecryptVV' 0
.VV0 1
	ReadToEndVV1 :
(VV: ;
)VV; <
;VV< =
}WW 
}XX 
}YY 
}ZZ 
}[[ 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_53b\\ <
.\\< =
GoodG2BSink\\= H
(\\H I
password\\I Q
)\\R S
;\\S T
}]] 
private`` 
void`` 
GoodB2G`` 
(`` 
)`` 
{aa 
stringbb 
passwordbb 
;bb 
passwordcc 
=cc 
$strcc 
;cc 
tryee 
{ff 	
passwordgg 
=gg 
Encodinggg 
.gg  
UTF8gg  $
.gg$ %
	GetStringgg% .
(gg. /
Filegg/ 3
.gg3 4
ReadAllBytesgg4 @
(gg@ A
$strggA k
)ggk l
)ggl m
;ggm n
}hh 	
catchii 
(ii 
IOExceptionii 
exceptIOii #
)ii# $
{jj 	
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk 
.kk 
LogLevelkk '
.kk' (
Warnkk( ,
,kk, -
$strkk. G
,kkG H
exceptIOkkI Q
)kkQ R
;kkR S
}ll 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_53bnn <
.nn< =
GoodB2GSinknn= H
(nnH I
passwordnnI Q
)nnR S
;nnS T
}oo 
}qq 
}rr „
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_53b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_53b :
{ 
public 

static 
void 
BadSink 
( 
string %
password& .
)/ 0
{   @
4CWE256_Unprotected_Storage_of_Credentials__basic_53c!! <
.!!< =
BadSink!!= D
(!!D E
password!!E M
)!!N O
;!!O P
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
string''# )
password''* 2
)''3 4
{(( @
4CWE256_Unprotected_Storage_of_Credentials__basic_53c)) <
.))< =
GoodG2BSink))= H
())H I
password))I Q
)))R S
;))S T
}** 
public-- 

static-- 
void-- 
GoodB2GSink-- "
(--" #
string--# )
password--* 2
)--3 4
{.. @
4CWE256_Unprotected_Storage_of_Credentials__basic_53c// <
.//< =
GoodB2GSink//= H
(//H I
password//I Q
)//R S
;//S T
}00 
}22 
}33 „
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_53c.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_53c :
{ 
public 

static 
void 
BadSink 
( 
string %
password& .
)/ 0
{   @
4CWE256_Unprotected_Storage_of_Credentials__basic_53d!! <
.!!< =
BadSink!!= D
(!!D E
password!!E M
)!!N O
;!!O P
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
string''# )
password''* 2
)''3 4
{(( @
4CWE256_Unprotected_Storage_of_Credentials__basic_53d)) <
.))< =
GoodG2BSink))= H
())H I
password))I Q
)))R S
;))S T
}** 
public-- 

static-- 
void-- 
GoodB2GSink-- "
(--" #
string--# )
password--* 2
)--3 4
{.. @
4CWE256_Unprotected_Storage_of_Credentials__basic_53d// <
.//< =
GoodB2GSink//= H
(//H I
password//I Q
)//R S
;//S T
}00 
}22 
}33 ∂,
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_53d.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_53d :
{ 
public 

static 
void 
BadSink 
( 
string %
password& .
)/ 0
{   
using"" 
("" 
SqlConnection"" 
dBConnection"" )
=""* +
new"", /
SqlConnection""0 =
(""= >
$str""> t
+""u v
$str""w {
+""| }
$str	""~ ä
+
""ã å
password
""ç ï
)
""ï ñ
)
""ñ ó
{## 	
try$$ 
{%% 
dBConnection&& 
.&& 
Open&& !
(&&! "
)&&" #
;&&# $
}'' 
catch(( 
((( 
SqlException(( 
	exceptSql((  )
)(() *
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
$str**2 R
,**R S
	exceptSql**T ]
)**] ^
;**^ _
}++ 
},, 	
}-- 
public22 

static22 
void22 
GoodG2BSink22 "
(22" #
string22# )
password22* 2
)223 4
{33 
using55 
(55 
SqlConnection55 
dBConnection55 )
=55* +
new55, /
SqlConnection550 =
(55= >
$str55> t
+55u v
$str55w {
+55| }
$str	55~ ä
+
55ã å
password
55ç ï
)
55ï ñ
)
55ñ ó
{66 	
try77 
{88 
dBConnection99 
.99 
Open99 !
(99! "
)99" #
;99# $
}:: 
catch;; 
(;; 
SqlException;; 
	exceptSql;;  )
);;) *
{<< 
IO== 
.== 
Logger== 
.== 
Log== 
(== 
NLog== "
.==" #
LogLevel==# +
.==+ ,
Warn==, 0
,==0 1
$str==2 R
,==R S
	exceptSql==T ]
)==] ^
;==^ _
}>> 
}?? 	
}@@ 
publicCC 

staticCC 
voidCC 
GoodB2GSinkCC "
(CC" #
stringCC# )
passwordCC* 2
)CC3 4
{DD 
{FF 	
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesAlgGG, 2
=GG3 4
newGG5 8$
AesCryptoServiceProviderGG9 Q
(GGQ R
)GGR S
)GGS T
{HH 
aesAlgII 
.II 
KeyII 
=II 
EncodingII %
.II% &
UTF8II& *
.II* +
GetBytesII+ 3
(II3 4
$strII4 F
)IIF G
;IIG H
aesAlgJJ 
.JJ 
IVJJ 
=JJ 
newJJ 
byteJJ  $
[JJ$ %
$numJJ% '
]JJ' (
;JJ( )
ICryptoTransformLL  
	decryptorLL! *
=LL+ ,
aesAlgLL- 3
.LL3 4
CreateDecryptorLL4 C
(LLC D
aesAlgLLD J
.LLJ K
KeyLLK N
,LLN O
aesAlgLLP V
.LLV W
IVLLW Y
)LLY Z
;LLZ [
usingNN 
(NN 
MemoryStreamNN #
	msDecryptNN$ -
=NN. /
newNN0 3
MemoryStreamNN4 @
(NN@ A
FileNNA E
.NNE F
ReadAllBytesNNF R
(NNR S
$strNNS }
)NN} ~
)NN~ 
)	NN Ä
{OO 
usingPP 
(PP 
CryptoStreamPP '
	csDecryptPP( 1
=PP2 3
newPP4 7
CryptoStreamPP8 D
(PPD E
	msDecryptPPE N
,PPN O
	decryptorPPP Y
,PPY Z
CryptoStreamModePP[ k
.PPk l
ReadPPl p
)PPp q
)PPq r
{QQ 
usingRR 
(RR 
StreamReaderRR +
	srDecryptRR, 5
=RR6 7
newRR8 ;
StreamReaderRR< H
(RRH I
	csDecryptRRI R
)RRR S
)RRS T
{SS 
passwordVV $
=VV% &
	srDecryptVV' 0
.VV0 1
	ReadToEndVV1 :
(VV: ;
)VV; <
;VV< =
}WW 
}XX 
}YY 
}ZZ 
}[[ 	
using\\ 
(\\ 
SqlConnection\\ 
dBConnection\\ )
=\\* +
new\\, /
SqlConnection\\0 =
(\\= >
$str	\\> Ä
+
\\Å Ç
password
\\É ã
)
\\ã å
)
\\å ç
{]] 	
try^^ 
{__ 
dBConnection`` 
.`` 
Open`` !
(``! "
)``" #
;``# $
}aa 
catchbb 
(bb 
SqlExceptionbb 
	exceptSqlbb  )
)bb) *
{cc 
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd "
.dd" #
LogLeveldd# +
.dd+ ,
Warndd, 0
,dd0 1
$strdd2 R
,ddR S
	exceptSqlddT ]
)dd] ^
;dd^ _
}ee 
}ff 	
}gg 
}ii 
}jj ı0
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_54a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_54a :
:; <
AbstractTestCase= M
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
password"" 
="" 
$str"" 
;"" 
try$$ 
{%% 	
password&& 
=&& 
Encoding&& 
.&&  
UTF8&&  $
.&&$ %
	GetString&&% .
(&&. /
File&&/ 3
.&&3 4
ReadAllBytes&&4 @
(&&@ A
$str&&A k
)&&k l
)&&l m
;&&m n
}'' 	
catch(( 
((( 
IOException(( 
exceptIO(( #
)((# $
{)) 	
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** 
.** 
LogLevel** '
.**' (
Warn**( ,
,**, -
$str**. G
,**G H
exceptIO**I Q
)**Q R
;**R S
}++ 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_54b-- <
.--< =
BadSink--= D
(--D E
password--E M
)--N O
;--O P
}.. 
public11 

override11 
void11 
Good11 
(11 
)11 
{22 
GoodG2B33 
(33 
)33 
;33 
GoodB2G44 
(44 
)44 
;44 
}55 
private88 
void88 
GoodG2B88 
(88 
)88 
{99 
string:: 
password:: 
;:: 
password;; 
=;; 
$str;; 
;;; 
try== 
{>> 	
password?? 
=?? 
Encoding?? 
.??  
UTF8??  $
.??$ %
	GetString??% .
(??. /
File??/ 3
.??3 4
ReadAllBytes??4 @
(??@ A
$str??A k
)??k l
)??l m
;??m n
}@@ 	
catchAA 
(AA 
IOExceptionAA 
exceptIOAA #
)AA# $
{BB 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
$strCC. G
,CCG H
exceptIOCCI Q
)CCQ R
;CCR S
}DD 	
{FF 	
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesAlgGG, 2
=GG3 4
newGG5 8$
AesCryptoServiceProviderGG9 Q
(GGQ R
)GGR S
)GGS T
{HH 
aesAlgII 
.II 
KeyII 
=II 
EncodingII %
.II% &
UTF8II& *
.II* +
GetBytesII+ 3
(II3 4
$strII4 F
)IIF G
;IIG H
aesAlgJJ 
.JJ 
IVJJ 
=JJ 
newJJ 
byteJJ  $
[JJ$ %
$numJJ% '
]JJ' (
;JJ( )
ICryptoTransformLL  
	decryptorLL! *
=LL+ ,
aesAlgLL- 3
.LL3 4
CreateDecryptorLL4 C
(LLC D
aesAlgLLD J
.LLJ K
KeyLLK N
,LLN O
aesAlgLLP V
.LLV W
IVLLW Y
)LLY Z
;LLZ [
usingNN 
(NN 
MemoryStreamNN #
	msDecryptNN$ -
=NN. /
newNN0 3
MemoryStreamNN4 @
(NN@ A
FileNNA E
.NNE F
ReadAllBytesNNF R
(NNR S
$strNNS }
)NN} ~
)NN~ 
)	NN Ä
{OO 
usingPP 
(PP 
CryptoStreamPP '
	csDecryptPP( 1
=PP2 3
newPP4 7
CryptoStreamPP8 D
(PPD E
	msDecryptPPE N
,PPN O
	decryptorPPP Y
,PPY Z
CryptoStreamModePP[ k
.PPk l
ReadPPl p
)PPp q
)PPq r
{QQ 
usingRR 
(RR 
StreamReaderRR +
	srDecryptRR, 5
=RR6 7
newRR8 ;
StreamReaderRR< H
(RRH I
	csDecryptRRI R
)RRR S
)RRS T
{SS 
passwordVV $
=VV% &
	srDecryptVV' 0
.VV0 1
	ReadToEndVV1 :
(VV: ;
)VV; <
;VV< =
}WW 
}XX 
}YY 
}ZZ 
}[[ 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_54b\\ <
.\\< =
GoodG2BSink\\= H
(\\H I
password\\I Q
)\\R S
;\\S T
}]] 
private`` 
void`` 
GoodB2G`` 
(`` 
)`` 
{aa 
stringbb 
passwordbb 
;bb 
passwordcc 
=cc 
$strcc 
;cc 
tryee 
{ff 	
passwordgg 
=gg 
Encodinggg 
.gg  
UTF8gg  $
.gg$ %
	GetStringgg% .
(gg. /
Filegg/ 3
.gg3 4
ReadAllBytesgg4 @
(gg@ A
$strggA k
)ggk l
)ggl m
;ggm n
}hh 	
catchii 
(ii 
IOExceptionii 
exceptIOii #
)ii# $
{jj 	
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk 
.kk 
LogLevelkk '
.kk' (
Warnkk( ,
,kk, -
$strkk. G
,kkG H
exceptIOkkI Q
)kkQ R
;kkR S
}ll 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_54bnn <
.nn< =
GoodB2GSinknn= H
(nnH I
passwordnnI Q
)nnR S
;nnS T
}oo 
}qq 
}rr „
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_54b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_54b :
{ 
public 

static 
void 
BadSink 
( 
string %
password& .
)/ 0
{   @
4CWE256_Unprotected_Storage_of_Credentials__basic_54c!! <
.!!< =
BadSink!!= D
(!!D E
password!!E M
)!!N O
;!!O P
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
string''# )
password''* 2
)''3 4
{(( @
4CWE256_Unprotected_Storage_of_Credentials__basic_54c)) <
.))< =
GoodG2BSink))= H
())H I
password))I Q
)))R S
;))S T
}** 
public-- 

static-- 
void-- 
GoodB2GSink-- "
(--" #
string--# )
password--* 2
)--3 4
{.. @
4CWE256_Unprotected_Storage_of_Credentials__basic_54c// <
.//< =
GoodB2GSink//= H
(//H I
password//I Q
)//R S
;//S T
}00 
}22 
}33 „
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_54c.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_54c :
{ 
public 

static 
void 
BadSink 
( 
string %
password& .
)/ 0
{   @
4CWE256_Unprotected_Storage_of_Credentials__basic_54d!! <
.!!< =
BadSink!!= D
(!!D E
password!!E M
)!!N O
;!!O P
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
string''# )
password''* 2
)''3 4
{(( @
4CWE256_Unprotected_Storage_of_Credentials__basic_54d)) <
.))< =
GoodG2BSink))= H
())H I
password))I Q
)))R S
;))S T
}** 
public-- 

static-- 
void-- 
GoodB2GSink-- "
(--" #
string--# )
password--* 2
)--3 4
{.. @
4CWE256_Unprotected_Storage_of_Credentials__basic_54d// <
.//< =
GoodB2GSink//= H
(//H I
password//I Q
)//R S
;//S T
}00 
}22 
}33 „
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_54d.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_54d :
{ 
public 

static 
void 
BadSink 
( 
string %
password& .
)/ 0
{   @
4CWE256_Unprotected_Storage_of_Credentials__basic_54e!! <
.!!< =
BadSink!!= D
(!!D E
password!!E M
)!!N O
;!!O P
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
string''# )
password''* 2
)''3 4
{(( @
4CWE256_Unprotected_Storage_of_Credentials__basic_54e)) <
.))< =
GoodG2BSink))= H
())H I
password))I Q
)))R S
;))S T
}** 
public-- 

static-- 
void-- 
GoodB2GSink-- "
(--" #
string--# )
password--* 2
)--3 4
{.. @
4CWE256_Unprotected_Storage_of_Credentials__basic_54e// <
.//< =
GoodB2GSink//= H
(//H I
password//I Q
)//R S
;//S T
}00 
}22 
}33 ∂,
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_54e.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_54e :
{ 
public 

static 
void 
BadSink 
( 
string %
password& .
)/ 0
{   
using"" 
("" 
SqlConnection"" 
dBConnection"" )
=""* +
new"", /
SqlConnection""0 =
(""= >
$str""> t
+""u v
$str""w {
+""| }
$str	""~ ä
+
""ã å
password
""ç ï
)
""ï ñ
)
""ñ ó
{## 	
try$$ 
{%% 
dBConnection&& 
.&& 
Open&& !
(&&! "
)&&" #
;&&# $
}'' 
catch(( 
((( 
SqlException(( 
	exceptSql((  )
)(() *
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
$str**2 R
,**R S
	exceptSql**T ]
)**] ^
;**^ _
}++ 
},, 	
}-- 
public22 

static22 
void22 
GoodG2BSink22 "
(22" #
string22# )
password22* 2
)223 4
{33 
using55 
(55 
SqlConnection55 
dBConnection55 )
=55* +
new55, /
SqlConnection550 =
(55= >
$str55> t
+55u v
$str55w {
+55| }
$str	55~ ä
+
55ã å
password
55ç ï
)
55ï ñ
)
55ñ ó
{66 	
try77 
{88 
dBConnection99 
.99 
Open99 !
(99! "
)99" #
;99# $
}:: 
catch;; 
(;; 
SqlException;; 
	exceptSql;;  )
);;) *
{<< 
IO== 
.== 
Logger== 
.== 
Log== 
(== 
NLog== "
.==" #
LogLevel==# +
.==+ ,
Warn==, 0
,==0 1
$str==2 R
,==R S
	exceptSql==T ]
)==] ^
;==^ _
}>> 
}?? 	
}@@ 
publicCC 

staticCC 
voidCC 
GoodB2GSinkCC "
(CC" #
stringCC# )
passwordCC* 2
)CC3 4
{DD 
{FF 	
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesAlgGG, 2
=GG3 4
newGG5 8$
AesCryptoServiceProviderGG9 Q
(GGQ R
)GGR S
)GGS T
{HH 
aesAlgII 
.II 
KeyII 
=II 
EncodingII %
.II% &
UTF8II& *
.II* +
GetBytesII+ 3
(II3 4
$strII4 F
)IIF G
;IIG H
aesAlgJJ 
.JJ 
IVJJ 
=JJ 
newJJ 
byteJJ  $
[JJ$ %
$numJJ% '
]JJ' (
;JJ( )
ICryptoTransformLL  
	decryptorLL! *
=LL+ ,
aesAlgLL- 3
.LL3 4
CreateDecryptorLL4 C
(LLC D
aesAlgLLD J
.LLJ K
KeyLLK N
,LLN O
aesAlgLLP V
.LLV W
IVLLW Y
)LLY Z
;LLZ [
usingNN 
(NN 
MemoryStreamNN #
	msDecryptNN$ -
=NN. /
newNN0 3
MemoryStreamNN4 @
(NN@ A
FileNNA E
.NNE F
ReadAllBytesNNF R
(NNR S
$strNNS }
)NN} ~
)NN~ 
)	NN Ä
{OO 
usingPP 
(PP 
CryptoStreamPP '
	csDecryptPP( 1
=PP2 3
newPP4 7
CryptoStreamPP8 D
(PPD E
	msDecryptPPE N
,PPN O
	decryptorPPP Y
,PPY Z
CryptoStreamModePP[ k
.PPk l
ReadPPl p
)PPp q
)PPq r
{QQ 
usingRR 
(RR 
StreamReaderRR +
	srDecryptRR, 5
=RR6 7
newRR8 ;
StreamReaderRR< H
(RRH I
	csDecryptRRI R
)RRR S
)RRS T
{SS 
passwordVV $
=VV% &
	srDecryptVV' 0
.VV0 1
	ReadToEndVV1 :
(VV: ;
)VV; <
;VV< =
}WW 
}XX 
}YY 
}ZZ 
}[[ 	
using\\ 
(\\ 
SqlConnection\\ 
dBConnection\\ )
=\\* +
new\\, /
SqlConnection\\0 =
(\\= >
$str	\\> Ä
+
\\Å Ç
password
\\É ã
)
\\ã å
)
\\å ç
{]] 	
try^^ 
{__ 
dBConnection`` 
.`` 
Open`` !
(``! "
)``" #
;``# $
}aa 
catchbb 
(bb 
SqlExceptionbb 
	exceptSqlbb  )
)bb) *
{cc 
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd "
.dd" #
LogLeveldd# +
.dd+ ,
Warndd, 0
,dd0 1
$strdd2 R
,ddR S
	exceptSqlddT ]
)dd] ^
;dd^ _
}ee 
}ff 	
}gg 
}ii 
}jj ›2
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_61a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_61a :
:; <
AbstractTestCase= M
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
=!! @
4CWE256_Unprotected_Storage_of_Credentials__basic_61b!! N
.!!N O
	BadSource!!O X
(!!X Y
)!!Y Z
;!!Z [
using## 
(## 
SqlConnection## 
dBConnection## )
=##* +
new##, /
SqlConnection##0 =
(##= >
$str##> t
+##u v
$str##w {
+##| }
$str	##~ ä
+
##ã å
password
##ç ï
)
##ï ñ
)
##ñ ó
{$$ 	
try%% 
{&& 
dBConnection'' 
.'' 
Open'' !
(''! "
)''" #
;''# $
}(( 
catch)) 
()) 
SqlException)) 
	exceptSql))  )
)))) *
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
$str++2 R
,++R S
	exceptSql++T ]
)++] ^
;++^ _
},, 
}-- 	
}.. 
public11 

override11 
void11 
Good11 
(11 
)11 
{22 
GoodG2B33 
(33 
)33 
;33 
GoodB2G44 
(44 
)44 
;44 
}55 
private88 
static88 
void88 
GoodG2B88 
(88  
)88  !
{99 
string:: 
password:: 
=:: @
4CWE256_Unprotected_Storage_of_Credentials__basic_61b:: N
.::N O
GoodG2BSource::O \
(::\ ]
)::] ^
;::^ _
using<< 
(<< 
SqlConnection<< 
dBConnection<< )
=<<* +
new<<, /
SqlConnection<<0 =
(<<= >
$str<<> t
+<<u v
$str<<w {
+<<| }
$str	<<~ ä
+
<<ã å
password
<<ç ï
)
<<ï ñ
)
<<ñ ó
{== 	
try>> 
{?? 
dBConnection@@ 
.@@ 
Open@@ !
(@@! "
)@@" #
;@@# $
}AA 
catchBB 
(BB 
SqlExceptionBB 
	exceptSqlBB  )
)BB) *
{CC 
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD "
.DD" #
LogLevelDD# +
.DD+ ,
WarnDD, 0
,DD0 1
$strDD2 R
,DDR S
	exceptSqlDDT ]
)DD] ^
;DD^ _
}EE 
}FF 	
}GG 
privateJJ 
staticJJ 
voidJJ 
GoodB2GJJ 
(JJ  
)JJ  !
{KK 
stringLL 
passwordLL 
=LL @
4CWE256_Unprotected_Storage_of_Credentials__basic_61bLL N
.LLN O
GoodB2GSourceLLO \
(LL\ ]
)LL] ^
;LL^ _
{NN 	
usingOO 
(OO $
AesCryptoServiceProviderOO +
aesAlgOO, 2
=OO3 4
newOO5 8$
AesCryptoServiceProviderOO9 Q
(OOQ R
)OOR S
)OOS T
{PP 
aesAlgQQ 
.QQ 
KeyQQ 
=QQ 
EncodingQQ %
.QQ% &
UTF8QQ& *
.QQ* +
GetBytesQQ+ 3
(QQ3 4
$strQQ4 F
)QQF G
;QQG H
aesAlgRR 
.RR 
IVRR 
=RR 
newRR 
byteRR  $
[RR$ %
$numRR% '
]RR' (
;RR( )
ICryptoTransformTT  
	decryptorTT! *
=TT+ ,
aesAlgTT- 3
.TT3 4
CreateDecryptorTT4 C
(TTC D
aesAlgTTD J
.TTJ K
KeyTTK N
,TTN O
aesAlgTTP V
.TTV W
IVTTW Y
)TTY Z
;TTZ [
usingVV 
(VV 
MemoryStreamVV #
	msDecryptVV$ -
=VV. /
newVV0 3
MemoryStreamVV4 @
(VV@ A
FileVVA E
.VVE F
ReadAllBytesVVF R
(VVR S
$strVVS }
)VV} ~
)VV~ 
)	VV Ä
{WW 
usingXX 
(XX 
CryptoStreamXX '
	csDecryptXX( 1
=XX2 3
newXX4 7
CryptoStreamXX8 D
(XXD E
	msDecryptXXE N
,XXN O
	decryptorXXP Y
,XXY Z
CryptoStreamModeXX[ k
.XXk l
ReadXXl p
)XXp q
)XXq r
{YY 
usingZZ 
(ZZ 
StreamReaderZZ +
	srDecryptZZ, 5
=ZZ6 7
newZZ8 ;
StreamReaderZZ< H
(ZZH I
	csDecryptZZI R
)ZZR S
)ZZS T
{[[ 
password^^ $
=^^% &
	srDecrypt^^' 0
.^^0 1
	ReadToEnd^^1 :
(^^: ;
)^^; <
;^^< =
}__ 
}`` 
}aa 
}bb 
}cc 	
usingdd 
(dd 
SqlConnectiondd 
dBConnectiondd )
=dd* +
newdd, /
SqlConnectiondd0 =
(dd= >
$str	dd> Ä
+
ddÅ Ç
password
ddÉ ã
)
ddã å
)
ddå ç
{ee 	
tryff 
{gg 
dBConnectionhh 
.hh 
Openhh !
(hh! "
)hh" #
;hh# $
}ii 
catchjj 
(jj 
SqlExceptionjj 
	exceptSqljj  )
)jj) *
{kk 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
$strll2 R
,llR S
	exceptSqlllT ]
)ll] ^
;ll^ _
}mm 
}nn 	
}oo 
}qq 
}rr û,
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_61b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_61b :
{ 
public 

static 
string 
	BadSource "
(" #
)# $
{   
string!! 
password!! 
;!! 
password"" 
="" 
$str"" 
;"" 
try$$ 
{%% 	
password&& 
=&& 
Encoding&& 
.&&  
UTF8&&  $
.&&$ %
	GetString&&% .
(&&. /
File&&/ 3
.&&3 4
ReadAllBytes&&4 @
(&&@ A
$str&&A k
)&&k l
)&&l m
;&&m n
}'' 	
catch(( 
((( 
IOException(( 
exceptIO(( #
)((# $
{)) 	
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** 
.** 
LogLevel** '
.**' (
Warn**( ,
,**, -
$str**. G
,**G H
exceptIO**I Q
)**Q R
;**R S
}++ 	
return-- 
password-- 
;-- 
}.. 
public33 

static33 
string33 
GoodG2BSource33 &
(33& '
)33' (
{44 
string55 
password55 
;55 
password66 
=66 
$str66 
;66 
try88 
{99 	
password:: 
=:: 
Encoding:: 
.::  
UTF8::  $
.::$ %
	GetString::% .
(::. /
File::/ 3
.::3 4
ReadAllBytes::4 @
(::@ A
$str::A k
)::k l
)::l m
;::m n
};; 	
catch<< 
(<< 
IOException<< 
exceptIO<< #
)<<# $
{== 	
IO>> 
.>> 
Logger>> 
.>> 
Log>> 
(>> 
NLog>> 
.>> 
LogLevel>> '
.>>' (
Warn>>( ,
,>>, -
$str>>. G
,>>G H
exceptIO>>I Q
)>>Q R
;>>R S
}?? 	
{AA 	
usingBB 
(BB $
AesCryptoServiceProviderBB +
aesAlgBB, 2
=BB3 4
newBB5 8$
AesCryptoServiceProviderBB9 Q
(BBQ R
)BBR S
)BBS T
{CC 
aesAlgDD 
.DD 
KeyDD 
=DD 
EncodingDD %
.DD% &
UTF8DD& *
.DD* +
GetBytesDD+ 3
(DD3 4
$strDD4 F
)DDF G
;DDG H
aesAlgEE 
.EE 
IVEE 
=EE 
newEE 
byteEE  $
[EE$ %
$numEE% '
]EE' (
;EE( )
ICryptoTransformGG  
	decryptorGG! *
=GG+ ,
aesAlgGG- 3
.GG3 4
CreateDecryptorGG4 C
(GGC D
aesAlgGGD J
.GGJ K
KeyGGK N
,GGN O
aesAlgGGP V
.GGV W
IVGGW Y
)GGY Z
;GGZ [
usingII 
(II 
MemoryStreamII #
	msDecryptII$ -
=II. /
newII0 3
MemoryStreamII4 @
(II@ A
FileIIA E
.IIE F
ReadAllBytesIIF R
(IIR S
$strIIS }
)II} ~
)II~ 
)	II Ä
{JJ 
usingKK 
(KK 
CryptoStreamKK '
	csDecryptKK( 1
=KK2 3
newKK4 7
CryptoStreamKK8 D
(KKD E
	msDecryptKKE N
,KKN O
	decryptorKKP Y
,KKY Z
CryptoStreamModeKK[ k
.KKk l
ReadKKl p
)KKp q
)KKq r
{LL 
usingMM 
(MM 
StreamReaderMM +
	srDecryptMM, 5
=MM6 7
newMM8 ;
StreamReaderMM< H
(MMH I
	csDecryptMMI R
)MMR S
)MMS T
{NN 
passwordQQ $
=QQ% &
	srDecryptQQ' 0
.QQ0 1
	ReadToEndQQ1 :
(QQ: ;
)QQ; <
;QQ< =
}RR 
}SS 
}TT 
}UU 
}VV 	
returnWW 
passwordWW 
;WW 
}XX 
public[[ 

static[[ 
string[[ 
GoodB2GSource[[ &
([[& '
)[[' (
{\\ 
string]] 
password]] 
;]] 
password^^ 
=^^ 
$str^^ 
;^^ 
try`` 
{aa 	
passwordbb 
=bb 
Encodingbb 
.bb  
UTF8bb  $
.bb$ %
	GetStringbb% .
(bb. /
Filebb/ 3
.bb3 4
ReadAllBytesbb4 @
(bb@ A
$strbbA k
)bbk l
)bbl m
;bbm n
}cc 	
catchdd 
(dd 
IOExceptiondd 
exceptIOdd #
)dd# $
{ee 	
IOff 
.ff 
Loggerff 
.ff 
Logff 
(ff 
NLogff 
.ff 
LogLevelff '
.ff' (
Warnff( ,
,ff, -
$strff. G
,ffG H
exceptIOffI Q
)ffQ R
;ffR S
}gg 	
returnii 
passwordii 
;ii 
}jj 
}ll 
}mm È8
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_66a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_66a :
:; <
AbstractTestCase= M
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
password"" 
="" 
$str"" 
;"" 
try$$ 
{%% 	
password&& 
=&& 
Encoding&& 
.&&  
UTF8&&  $
.&&$ %
	GetString&&% .
(&&. /
File&&/ 3
.&&3 4
ReadAllBytes&&4 @
(&&@ A
$str&&A k
)&&k l
)&&l m
;&&m n
}'' 	
catch(( 
((( 
IOException(( 
exceptIO(( #
)((# $
{)) 	
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** 
.** 
LogLevel** '
.**' (
Warn**( ,
,**, -
$str**. G
,**G H
exceptIO**I Q
)**Q R
;**R S
}++ 	
string-- 
[-- 
]-- 
passwordArray-- 
=--  
new--! $
string--% +
[--+ ,
$num--, -
]--- .
;--. /
passwordArray.. 
[.. 
$num.. 
].. 
=.. 
password.. #
;..# $@
4CWE256_Unprotected_Storage_of_Credentials__basic_66b// <
.//< =
BadSink//= D
(//D E
passwordArray//E R
)//T U
;//U V
}00 
public33 

override33 
void33 
Good33 
(33 
)33 
{44 
GoodG2B55 
(55 
)55 
;55 
GoodB2G66 
(66 
)66 
;66 
}77 
private:: 
static:: 
void:: 
GoodG2B:: 
(::  
)::  !
{;; 
string<< 
password<< 
;<< 
password== 
=== 
$str== 
;== 
try?? 
{@@ 	
passwordAA 
=AA 
EncodingAA 
.AA  
UTF8AA  $
.AA$ %
	GetStringAA% .
(AA. /
FileAA/ 3
.AA3 4
ReadAllBytesAA4 @
(AA@ A
$strAAA k
)AAk l
)AAl m
;AAm n
}BB 	
catchCC 
(CC 
IOExceptionCC 
exceptIOCC #
)CC# $
{DD 	
IOEE 
.EE 
LoggerEE 
.EE 
LogEE 
(EE 
NLogEE 
.EE 
LogLevelEE '
.EE' (
WarnEE( ,
,EE, -
$strEE. G
,EEG H
exceptIOEEI Q
)EEQ R
;EER S
}FF 	
{HH 	
usingII 
(II $
AesCryptoServiceProviderII +
aesAlgII, 2
=II3 4
newII5 8$
AesCryptoServiceProviderII9 Q
(IIQ R
)IIR S
)IIS T
{JJ 
aesAlgKK 
.KK 
KeyKK 
=KK 
EncodingKK %
.KK% &
UTF8KK& *
.KK* +
GetBytesKK+ 3
(KK3 4
$strKK4 F
)KKF G
;KKG H
aesAlgLL 
.LL 
IVLL 
=LL 
newLL 
byteLL  $
[LL$ %
$numLL% '
]LL' (
;LL( )
ICryptoTransformNN  
	decryptorNN! *
=NN+ ,
aesAlgNN- 3
.NN3 4
CreateDecryptorNN4 C
(NNC D
aesAlgNND J
.NNJ K
KeyNNK N
,NNN O
aesAlgNNP V
.NNV W
IVNNW Y
)NNY Z
;NNZ [
usingPP 
(PP 
MemoryStreamPP #
	msDecryptPP$ -
=PP. /
newPP0 3
MemoryStreamPP4 @
(PP@ A
FilePPA E
.PPE F
ReadAllBytesPPF R
(PPR S
$strPPS }
)PP} ~
)PP~ 
)	PP Ä
{QQ 
usingRR 
(RR 
CryptoStreamRR '
	csDecryptRR( 1
=RR2 3
newRR4 7
CryptoStreamRR8 D
(RRD E
	msDecryptRRE N
,RRN O
	decryptorRRP Y
,RRY Z
CryptoStreamModeRR[ k
.RRk l
ReadRRl p
)RRp q
)RRq r
{SS 
usingTT 
(TT 
StreamReaderTT +
	srDecryptTT, 5
=TT6 7
newTT8 ;
StreamReaderTT< H
(TTH I
	csDecryptTTI R
)TTR S
)TTS T
{UU 
passwordXX $
=XX% &
	srDecryptXX' 0
.XX0 1
	ReadToEndXX1 :
(XX: ;
)XX; <
;XX< =
}YY 
}ZZ 
}[[ 
}\\ 
}]] 	
string^^ 
[^^ 
]^^ 
passwordArray^^ 
=^^  
new^^! $
string^^% +
[^^+ ,
$num^^, -
]^^- .
;^^. /
passwordArray__ 
[__ 
$num__ 
]__ 
=__ 
password__ #
;__# $@
4CWE256_Unprotected_Storage_of_Credentials__basic_66b`` <
.``< =
GoodG2BSink``= H
(``H I
passwordArray``I V
)``X Y
;``Y Z
}aa 
privatedd 
staticdd 
voiddd 
GoodB2Gdd 
(dd  
)dd  !
{ee 
stringff 
passwordff 
;ff 
passwordgg 
=gg 
$strgg 
;gg 
tryii 
{jj 	
passwordkk 
=kk 
Encodingkk 
.kk  
UTF8kk  $
.kk$ %
	GetStringkk% .
(kk. /
Filekk/ 3
.kk3 4
ReadAllByteskk4 @
(kk@ A
$strkkA k
)kkk l
)kkl m
;kkm n
}ll 	
catchmm 
(mm 
IOExceptionmm 
exceptIOmm #
)mm# $
{nn 	
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo 
.oo 
LogLeveloo '
.oo' (
Warnoo( ,
,oo, -
$stroo. G
,ooG H
exceptIOooI Q
)ooQ R
;ooR S
}pp 	
stringrr 
[rr 
]rr 
passwordArrayrr 
=rr  
newrr! $
stringrr% +
[rr+ ,
$numrr, -
]rr- .
;rr. /
passwordArrayss 
[ss 
$numss 
]ss 
=ss 
passwordss #
;ss# $@
4CWE256_Unprotected_Storage_of_Credentials__basic_66btt <
.tt< =
GoodB2GSinktt= H
(ttH I
passwordArrayttI V
)ttX Y
;ttY Z
}uu 
}ww 
}xx ÿ0
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_66b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_66b :
{ 
public 

static 
void 
BadSink 
( 
string %
[% &
]& '
passwordArray( 5
)6 7
{   
string!! 
password!! 
=!! 
passwordArray!! '
[!!' (
$num!!( )
]!!) *
;!!* +
using## 
(## 
SqlConnection## 
dBConnection## )
=##* +
new##, /
SqlConnection##0 =
(##= >
$str##> t
+##u v
$str##w {
+##| }
$str	##~ ä
+
##ã å
password
##ç ï
)
##ï ñ
)
##ñ ó
{$$ 	
try%% 
{&& 
dBConnection'' 
.'' 
Open'' !
(''! "
)''" #
;''# $
}(( 
catch)) 
()) 
SqlException)) 
	exceptSql))  )
)))) *
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
$str++2 R
,++R S
	exceptSql++T ]
)++] ^
;++^ _
},, 
}-- 	
}.. 
public33 

static33 
void33 
GoodG2BSink33 "
(33" #
string33# )
[33) *
]33* +
passwordArray33, 9
)33: ;
{44 
string55 
password55 
=55 
passwordArray55 '
[55' (
$num55( )
]55) *
;55* +
using77 
(77 
SqlConnection77 
dBConnection77 )
=77* +
new77, /
SqlConnection770 =
(77= >
$str77> t
+77u v
$str77w {
+77| }
$str	77~ ä
+
77ã å
password
77ç ï
)
77ï ñ
)
77ñ ó
{88 	
try99 
{:: 
dBConnection;; 
.;; 
Open;; !
(;;! "
);;" #
;;;# $
}<< 
catch== 
(== 
SqlException== 
	exceptSql==  )
)==) *
{>> 
IO?? 
.?? 
Logger?? 
.?? 
Log?? 
(?? 
NLog?? "
.??" #
LogLevel??# +
.??+ ,
Warn??, 0
,??0 1
$str??2 R
,??R S
	exceptSql??T ]
)??] ^
;??^ _
}@@ 
}AA 	
}BB 
publicEE 

staticEE 
voidEE 
GoodB2GSinkEE "
(EE" #
stringEE# )
[EE) *
]EE* +
passwordArrayEE, 9
)EE: ;
{FF 
stringGG 
passwordGG 
=GG 
passwordArrayGG '
[GG' (
$numGG( )
]GG) *
;GG* +
{II 	
usingJJ 
(JJ $
AesCryptoServiceProviderJJ +
aesAlgJJ, 2
=JJ3 4
newJJ5 8$
AesCryptoServiceProviderJJ9 Q
(JJQ R
)JJR S
)JJS T
{KK 
aesAlgLL 
.LL 
KeyLL 
=LL 
EncodingLL %
.LL% &
UTF8LL& *
.LL* +
GetBytesLL+ 3
(LL3 4
$strLL4 F
)LLF G
;LLG H
aesAlgMM 
.MM 
IVMM 
=MM 
newMM 
byteMM  $
[MM$ %
$numMM% '
]MM' (
;MM( )
ICryptoTransformOO  
	decryptorOO! *
=OO+ ,
aesAlgOO- 3
.OO3 4
CreateDecryptorOO4 C
(OOC D
aesAlgOOD J
.OOJ K
KeyOOK N
,OON O
aesAlgOOP V
.OOV W
IVOOW Y
)OOY Z
;OOZ [
usingQQ 
(QQ 
MemoryStreamQQ #
	msDecryptQQ$ -
=QQ. /
newQQ0 3
MemoryStreamQQ4 @
(QQ@ A
FileQQA E
.QQE F
ReadAllBytesQQF R
(QQR S
$strQQS }
)QQ} ~
)QQ~ 
)	QQ Ä
{RR 
usingSS 
(SS 
CryptoStreamSS '
	csDecryptSS( 1
=SS2 3
newSS4 7
CryptoStreamSS8 D
(SSD E
	msDecryptSSE N
,SSN O
	decryptorSSP Y
,SSY Z
CryptoStreamModeSS[ k
.SSk l
ReadSSl p
)SSp q
)SSq r
{TT 
usingUU 
(UU 
StreamReaderUU +
	srDecryptUU, 5
=UU6 7
newUU8 ;
StreamReaderUU< H
(UUH I
	csDecryptUUI R
)UUR S
)UUS T
{VV 
passwordYY $
=YY% &
	srDecryptYY' 0
.YY0 1
	ReadToEndYY1 :
(YY: ;
)YY; <
;YY< =
}ZZ 
}[[ 
}\\ 
}]] 
}^^ 	
using__ 
(__ 
SqlConnection__ 
dBConnection__ )
=__* +
new__, /
SqlConnection__0 =
(__= >
$str	__> Ä
+
__Å Ç
password
__É ã
)
__ã å
)
__å ç
{`` 	
tryaa 
{bb 
dBConnectioncc 
.cc 
Opencc !
(cc! "
)cc" #
;cc# $
}dd 
catchee 
(ee 
SqlExceptionee 
	exceptSqlee  )
)ee) *
{ff 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
$strgg2 R
,ggR S
	exceptSqlggT ]
)gg] ^
;gg^ _
}hh 
}ii 	
}jj 
}ll 
}mm ß9
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_67a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_67a :
:; <
AbstractTestCase= M
{ 
public 

class 
	Container 
{   
public!! 
string!! 
containerOne!! "
;!!" #
}"" 
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
string&& 
password&& 
;&& 
password'' 
='' 
$str'' 
;'' 
try)) 
{** 	
password++ 
=++ 
Encoding++ 
.++  
UTF8++  $
.++$ %
	GetString++% .
(++. /
File++/ 3
.++3 4
ReadAllBytes++4 @
(++@ A
$str++A k
)++k l
)++l m
;++m n
},, 	
catch-- 
(-- 
IOException-- 
exceptIO-- #
)--# $
{.. 	
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// 
.// 
LogLevel// '
.//' (
Warn//( ,
,//, -
$str//. G
,//G H
exceptIO//I Q
)//Q R
;//R S
}00 	
	Container22 
passwordContainer22 #
=22$ %
new22& )
	Container22* 3
(223 4
)224 5
;225 6
passwordContainer33 
.33 
containerOne33 &
=33' (
password33) 1
;331 2@
4CWE256_Unprotected_Storage_of_Credentials__basic_67b44 <
.44< =
BadSink44= D
(44D E
passwordContainer44E V
)44X Y
;44Y Z
}55 
public88 

override88 
void88 
Good88 
(88 
)88 
{99 
GoodG2B:: 
(:: 
):: 
;:: 
GoodB2G;; 
(;; 
);; 
;;; 
}<< 
private?? 
static?? 
void?? 
GoodG2B?? 
(??  
)??  !
{@@ 
stringAA 
passwordAA 
;AA 
passwordBB 
=BB 
$strBB 
;BB 
tryDD 
{EE 	
passwordFF 
=FF 
EncodingFF 
.FF  
UTF8FF  $
.FF$ %
	GetStringFF% .
(FF. /
FileFF/ 3
.FF3 4
ReadAllBytesFF4 @
(FF@ A
$strFFA k
)FFk l
)FFl m
;FFm n
}GG 	
catchHH 
(HH 
IOExceptionHH 
exceptIOHH #
)HH# $
{II 	
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ 
.JJ 
LogLevelJJ '
.JJ' (
WarnJJ( ,
,JJ, -
$strJJ. G
,JJG H
exceptIOJJI Q
)JJQ R
;JJR S
}KK 	
{MM 	
usingNN 
(NN $
AesCryptoServiceProviderNN +
aesAlgNN, 2
=NN3 4
newNN5 8$
AesCryptoServiceProviderNN9 Q
(NNQ R
)NNR S
)NNS T
{OO 
aesAlgPP 
.PP 
KeyPP 
=PP 
EncodingPP %
.PP% &
UTF8PP& *
.PP* +
GetBytesPP+ 3
(PP3 4
$strPP4 F
)PPF G
;PPG H
aesAlgQQ 
.QQ 
IVQQ 
=QQ 
newQQ 
byteQQ  $
[QQ$ %
$numQQ% '
]QQ' (
;QQ( )
ICryptoTransformSS  
	decryptorSS! *
=SS+ ,
aesAlgSS- 3
.SS3 4
CreateDecryptorSS4 C
(SSC D
aesAlgSSD J
.SSJ K
KeySSK N
,SSN O
aesAlgSSP V
.SSV W
IVSSW Y
)SSY Z
;SSZ [
usingUU 
(UU 
MemoryStreamUU #
	msDecryptUU$ -
=UU. /
newUU0 3
MemoryStreamUU4 @
(UU@ A
FileUUA E
.UUE F
ReadAllBytesUUF R
(UUR S
$strUUS }
)UU} ~
)UU~ 
)	UU Ä
{VV 
usingWW 
(WW 
CryptoStreamWW '
	csDecryptWW( 1
=WW2 3
newWW4 7
CryptoStreamWW8 D
(WWD E
	msDecryptWWE N
,WWN O
	decryptorWWP Y
,WWY Z
CryptoStreamModeWW[ k
.WWk l
ReadWWl p
)WWp q
)WWq r
{XX 
usingYY 
(YY 
StreamReaderYY +
	srDecryptYY, 5
=YY6 7
newYY8 ;
StreamReaderYY< H
(YYH I
	csDecryptYYI R
)YYR S
)YYS T
{ZZ 
password]] $
=]]% &
	srDecrypt]]' 0
.]]0 1
	ReadToEnd]]1 :
(]]: ;
)]]; <
;]]< =
}^^ 
}__ 
}`` 
}aa 
}bb 	
	Containercc 
passwordContainercc #
=cc$ %
newcc& )
	Containercc* 3
(cc3 4
)cc4 5
;cc5 6
passwordContainerdd 
.dd 
containerOnedd &
=dd' (
passworddd) 1
;dd1 2@
4CWE256_Unprotected_Storage_of_Credentials__basic_67bee <
.ee< =
GoodG2BSinkee= H
(eeH I
passwordContainereeI Z
)ee\ ]
;ee] ^
}ff 
privateii 
staticii 
voidii 
GoodB2Gii 
(ii  
)ii  !
{jj 
stringkk 
passwordkk 
;kk 
passwordll 
=ll 
$strll 
;ll 
trynn 
{oo 	
passwordpp 
=pp 
Encodingpp 
.pp  
UTF8pp  $
.pp$ %
	GetStringpp% .
(pp. /
Filepp/ 3
.pp3 4
ReadAllBytespp4 @
(pp@ A
$strppA k
)ppk l
)ppl m
;ppm n
}qq 	
catchrr 
(rr 
IOExceptionrr 
exceptIOrr #
)rr# $
{ss 	
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt 
.tt 
LogLeveltt '
.tt' (
Warntt( ,
,tt, -
$strtt. G
,ttG H
exceptIOttI Q
)ttQ R
;ttR S
}uu 	
	Containerww 
passwordContainerww #
=ww$ %
newww& )
	Containerww* 3
(ww3 4
)ww4 5
;ww5 6
passwordContainerxx 
.xx 
containerOnexx &
=xx' (
passwordxx) 1
;xx1 2@
4CWE256_Unprotected_Storage_of_Credentials__basic_67byy <
.yy< =
GoodB2GSinkyy= H
(yyH I
passwordContaineryyI Z
)yy\ ]
;yy] ^
}zz 
}|| 
}}} ˝1
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_67b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_67b :
{ 
public 

static 
void 
BadSink 
( @
4CWE256_Unprotected_Storage_of_Credentials__basic_67a S
.S T
	ContainerT ]
passwordContainer^ o
)p q
{   
string!! 
password!! 
=!! 
passwordContainer!! +
.!!+ ,
containerOne!!, 8
;!!8 9
using## 
(## 
SqlConnection## 
dBConnection## )
=##* +
new##, /
SqlConnection##0 =
(##= >
$str##> t
+##u v
$str##w {
+##| }
$str	##~ ä
+
##ã å
password
##ç ï
)
##ï ñ
)
##ñ ó
{$$ 	
try%% 
{&& 
dBConnection'' 
.'' 
Open'' !
(''! "
)''" #
;''# $
}(( 
catch)) 
()) 
SqlException)) 
	exceptSql))  )
)))) *
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
$str++2 R
,++R S
	exceptSql++T ]
)++] ^
;++^ _
},, 
}-- 	
}.. 
public33 

static33 
void33 
GoodG2BSink33 "
(33" #@
4CWE256_Unprotected_Storage_of_Credentials__basic_67a33# W
.33W X
	Container33X a
passwordContainer33b s
)33t u
{44 
string55 
password55 
=55 
passwordContainer55 +
.55+ ,
containerOne55, 8
;558 9
using77 
(77 
SqlConnection77 
dBConnection77 )
=77* +
new77, /
SqlConnection770 =
(77= >
$str77> t
+77u v
$str77w {
+77| }
$str	77~ ä
+
77ã å
password
77ç ï
)
77ï ñ
)
77ñ ó
{88 	
try99 
{:: 
dBConnection;; 
.;; 
Open;; !
(;;! "
);;" #
;;;# $
}<< 
catch== 
(== 
SqlException== 
	exceptSql==  )
)==) *
{>> 
IO?? 
.?? 
Logger?? 
.?? 
Log?? 
(?? 
NLog?? "
.??" #
LogLevel??# +
.??+ ,
Warn??, 0
,??0 1
$str??2 R
,??R S
	exceptSql??T ]
)??] ^
;??^ _
}@@ 
}AA 	
}BB 
publicEE 

staticEE 
voidEE 
GoodB2GSinkEE "
(EE" #@
4CWE256_Unprotected_Storage_of_Credentials__basic_67aEE# W
.EEW X
	ContainerEEX a
passwordContainerEEb s
)EEt u
{FF 
stringGG 
passwordGG 
=GG 
passwordContainerGG +
.GG+ ,
containerOneGG, 8
;GG8 9
{II 	
usingJJ 
(JJ $
AesCryptoServiceProviderJJ +
aesAlgJJ, 2
=JJ3 4
newJJ5 8$
AesCryptoServiceProviderJJ9 Q
(JJQ R
)JJR S
)JJS T
{KK 
aesAlgLL 
.LL 
KeyLL 
=LL 
EncodingLL %
.LL% &
UTF8LL& *
.LL* +
GetBytesLL+ 3
(LL3 4
$strLL4 F
)LLF G
;LLG H
aesAlgMM 
.MM 
IVMM 
=MM 
newMM 
byteMM  $
[MM$ %
$numMM% '
]MM' (
;MM( )
ICryptoTransformOO  
	decryptorOO! *
=OO+ ,
aesAlgOO- 3
.OO3 4
CreateDecryptorOO4 C
(OOC D
aesAlgOOD J
.OOJ K
KeyOOK N
,OON O
aesAlgOOP V
.OOV W
IVOOW Y
)OOY Z
;OOZ [
usingQQ 
(QQ 
MemoryStreamQQ #
	msDecryptQQ$ -
=QQ. /
newQQ0 3
MemoryStreamQQ4 @
(QQ@ A
FileQQA E
.QQE F
ReadAllBytesQQF R
(QQR S
$strQQS }
)QQ} ~
)QQ~ 
)	QQ Ä
{RR 
usingSS 
(SS 
CryptoStreamSS '
	csDecryptSS( 1
=SS2 3
newSS4 7
CryptoStreamSS8 D
(SSD E
	msDecryptSSE N
,SSN O
	decryptorSSP Y
,SSY Z
CryptoStreamModeSS[ k
.SSk l
ReadSSl p
)SSp q
)SSq r
{TT 
usingUU 
(UU 
StreamReaderUU +
	srDecryptUU, 5
=UU6 7
newUU8 ;
StreamReaderUU< H
(UUH I
	csDecryptUUI R
)UUR S
)UUS T
{VV 
passwordYY $
=YY% &
	srDecryptYY' 0
.YY0 1
	ReadToEndYY1 :
(YY: ;
)YY; <
;YY< =
}ZZ 
}[[ 
}\\ 
}]] 
}^^ 	
using__ 
(__ 
SqlConnection__ 
dBConnection__ )
=__* +
new__, /
SqlConnection__0 =
(__= >
$str	__> Ä
+
__Å Ç
password
__É ã
)
__ã å
)
__å ç
{`` 	
tryaa 
{bb 
dBConnectioncc 
.cc 
Opencc !
(cc! "
)cc" #
;cc# $
}dd 
catchee 
(ee 
SqlExceptionee 
	exceptSqlee  )
)ee) *
{ff 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
$strgg2 R
,ggR S
	exceptSqlggT ]
)gg] ^
;gg^ _
}hh 
}ii 	
}jj 
}ll 
}mm ë0
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_68a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_68a :
:; <
AbstractTestCase= M
{ 
public 

static 
string 
password !
;! "
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
password## 
=## 
$str## 
;## 
try%% 
{&& 	
password'' 
='' 
Encoding'' 
.''  
UTF8''  $
.''$ %
	GetString''% .
(''. /
File''/ 3
.''3 4
ReadAllBytes''4 @
(''@ A
$str''A k
)''k l
)''l m
;''m n
}(( 	
catch)) 
()) 
IOException)) 
exceptIO)) #
)))# $
{** 	
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ 
.++ 
LogLevel++ '
.++' (
Warn++( ,
,++, -
$str++. G
,++G H
exceptIO++I Q
)++Q R
;++R S
},, 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_68b.. <
...< =
BadSink..= D
(..D E
)..E F
;..F G
}// 
public22 

override22 
void22 
Good22 
(22 
)22 
{33 
GoodG2B44 
(44 
)44 
;44 
GoodB2G55 
(55 
)55 
;55 
}66 
private99 
static99 
void99 
GoodG2B99 
(99  
)99  !
{:: 
password;; 
=;; 
$str;; 
;;; 
try== 
{>> 	
password?? 
=?? 
Encoding?? 
.??  
UTF8??  $
.??$ %
	GetString??% .
(??. /
File??/ 3
.??3 4
ReadAllBytes??4 @
(??@ A
$str??A k
)??k l
)??l m
;??m n
}@@ 	
catchAA 
(AA 
IOExceptionAA 
exceptIOAA #
)AA# $
{BB 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
$strCC. G
,CCG H
exceptIOCCI Q
)CCQ R
;CCR S
}DD 	
{FF 	
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesAlgGG, 2
=GG3 4
newGG5 8$
AesCryptoServiceProviderGG9 Q
(GGQ R
)GGR S
)GGS T
{HH 
aesAlgII 
.II 
KeyII 
=II 
EncodingII %
.II% &
UTF8II& *
.II* +
GetBytesII+ 3
(II3 4
$strII4 F
)IIF G
;IIG H
aesAlgJJ 
.JJ 
IVJJ 
=JJ 
newJJ 
byteJJ  $
[JJ$ %
$numJJ% '
]JJ' (
;JJ( )
ICryptoTransformLL  
	decryptorLL! *
=LL+ ,
aesAlgLL- 3
.LL3 4
CreateDecryptorLL4 C
(LLC D
aesAlgLLD J
.LLJ K
KeyLLK N
,LLN O
aesAlgLLP V
.LLV W
IVLLW Y
)LLY Z
;LLZ [
usingNN 
(NN 
MemoryStreamNN #
	msDecryptNN$ -
=NN. /
newNN0 3
MemoryStreamNN4 @
(NN@ A
FileNNA E
.NNE F
ReadAllBytesNNF R
(NNR S
$strNNS }
)NN} ~
)NN~ 
)	NN Ä
{OO 
usingPP 
(PP 
CryptoStreamPP '
	csDecryptPP( 1
=PP2 3
newPP4 7
CryptoStreamPP8 D
(PPD E
	msDecryptPPE N
,PPN O
	decryptorPPP Y
,PPY Z
CryptoStreamModePP[ k
.PPk l
ReadPPl p
)PPp q
)PPq r
{QQ 
usingRR 
(RR 
StreamReaderRR +
	srDecryptRR, 5
=RR6 7
newRR8 ;
StreamReaderRR< H
(RRH I
	csDecryptRRI R
)RRR S
)RRS T
{SS 
passwordVV $
=VV% &
	srDecryptVV' 0
.VV0 1
	ReadToEndVV1 :
(VV: ;
)VV; <
;VV< =
}WW 
}XX 
}YY 
}ZZ 
}[[ 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_68b\\ <
.\\< =
GoodG2BSink\\= H
(\\H I
)\\I J
;\\J K
}]] 
private`` 
static`` 
void`` 
GoodB2G`` 
(``  
)``  !
{aa 
passwordbb 
=bb 
$strbb 
;bb 
trydd 
{ee 	
passwordff 
=ff 
Encodingff 
.ff  
UTF8ff  $
.ff$ %
	GetStringff% .
(ff. /
Fileff/ 3
.ff3 4
ReadAllBytesff4 @
(ff@ A
$strffA k
)ffk l
)ffl m
;ffm n
}gg 	
catchhh 
(hh 
IOExceptionhh 
exceptIOhh #
)hh# $
{ii 	
IOjj 
.jj 
Loggerjj 
.jj 
Logjj 
(jj 
NLogjj 
.jj 
LogLeveljj '
.jj' (
Warnjj( ,
,jj, -
$strjj. G
,jjG H
exceptIOjjI Q
)jjQ R
;jjR S
}kk 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_68bmm <
.mm< =
GoodB2GSinkmm= H
(mmH I
)mmI J
;mmJ K
}nn 
}pp 
}qq ≈/
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_68b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_68b :
{ 
public 

static 
void 
BadSink 
( 
)  
{   
string!! 
password!! 
=!! @
4CWE256_Unprotected_Storage_of_Credentials__basic_68a!! N
.!!N O
password!!O W
;!!W X
using## 
(## 
SqlConnection## 
dBConnection## )
=##* +
new##, /
SqlConnection##0 =
(##= >
$str##> t
+##u v
$str##w {
+##| }
$str	##~ ä
+
##ã å
password
##ç ï
)
##ï ñ
)
##ñ ó
{$$ 	
try%% 
{&& 
dBConnection'' 
.'' 
Open'' !
(''! "
)''" #
;''# $
}(( 
catch)) 
()) 
SqlException)) 
	exceptSql))  )
)))) *
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
$str++2 R
,++R S
	exceptSql++T ]
)++] ^
;++^ _
},, 
}-- 	
}.. 
public33 

static33 
void33 
GoodG2BSink33 "
(33" #
)33# $
{44 
string55 
password55 
=55 @
4CWE256_Unprotected_Storage_of_Credentials__basic_68a55 N
.55N O
password55O W
;55W X
using77 
(77 
SqlConnection77 
dBConnection77 )
=77* +
new77, /
SqlConnection770 =
(77= >
$str77> t
+77u v
$str77w {
+77| }
$str	77~ ä
+
77ã å
password
77ç ï
)
77ï ñ
)
77ñ ó
{88 	
try99 
{:: 
dBConnection;; 
.;; 
Open;; !
(;;! "
);;" #
;;;# $
}<< 
catch== 
(== 
SqlException== 
	exceptSql==  )
)==) *
{>> 
IO?? 
.?? 
Logger?? 
.?? 
Log?? 
(?? 
NLog?? "
.??" #
LogLevel??# +
.??+ ,
Warn??, 0
,??0 1
$str??2 R
,??R S
	exceptSql??T ]
)??] ^
;??^ _
}@@ 
}AA 	
}BB 
publicEE 

staticEE 
voidEE 
GoodB2GSinkEE "
(EE" #
)EE# $
{FF 
stringGG 
passwordGG 
=GG @
4CWE256_Unprotected_Storage_of_Credentials__basic_68aGG N
.GGN O
passwordGGO W
;GGW X
{II 	
usingJJ 
(JJ $
AesCryptoServiceProviderJJ +
aesAlgJJ, 2
=JJ3 4
newJJ5 8$
AesCryptoServiceProviderJJ9 Q
(JJQ R
)JJR S
)JJS T
{KK 
aesAlgLL 
.LL 
KeyLL 
=LL 
EncodingLL %
.LL% &
UTF8LL& *
.LL* +
GetBytesLL+ 3
(LL3 4
$strLL4 F
)LLF G
;LLG H
aesAlgMM 
.MM 
IVMM 
=MM 
newMM 
byteMM  $
[MM$ %
$numMM% '
]MM' (
;MM( )
ICryptoTransformOO  
	decryptorOO! *
=OO+ ,
aesAlgOO- 3
.OO3 4
CreateDecryptorOO4 C
(OOC D
aesAlgOOD J
.OOJ K
KeyOOK N
,OON O
aesAlgOOP V
.OOV W
IVOOW Y
)OOY Z
;OOZ [
usingQQ 
(QQ 
MemoryStreamQQ #
	msDecryptQQ$ -
=QQ. /
newQQ0 3
MemoryStreamQQ4 @
(QQ@ A
FileQQA E
.QQE F
ReadAllBytesQQF R
(QQR S
$strQQS }
)QQ} ~
)QQ~ 
)	QQ Ä
{RR 
usingSS 
(SS 
CryptoStreamSS '
	csDecryptSS( 1
=SS2 3
newSS4 7
CryptoStreamSS8 D
(SSD E
	msDecryptSSE N
,SSN O
	decryptorSSP Y
,SSY Z
CryptoStreamModeSS[ k
.SSk l
ReadSSl p
)SSp q
)SSq r
{TT 
usingUU 
(UU 
StreamReaderUU +
	srDecryptUU, 5
=UU6 7
newUU8 ;
StreamReaderUU< H
(UUH I
	csDecryptUUI R
)UUR S
)UUS T
{VV 
passwordYY $
=YY% &
	srDecryptYY' 0
.YY0 1
	ReadToEndYY1 :
(YY: ;
)YY; <
;YY< =
}ZZ 
}[[ 
}\\ 
}]] 
}^^ 	
using__ 
(__ 
SqlConnection__ 
dBConnection__ )
=__* +
new__, /
SqlConnection__0 =
(__= >
$str	__> Ä
+
__Å Ç
password
__É ã
)
__ã å
)
__å ç
{`` 	
tryaa 
{bb 
dBConnectioncc 
.cc 
Opencc !
(cc! "
)cc" #
;cc# $
}dd 
catchee 
(ee 
SqlExceptionee 
	exceptSqlee  )
)ee) *
{ff 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
$strgg2 R
,ggR S
	exceptSqlggT ]
)gg] ^
;gg^ _
}hh 
}ii 	
}jj 
}ll 
}mm ≥2
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_71a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_71a :
:; <
AbstractTestCase= M
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
password"" 
="" 
$str"" 
;"" 
try$$ 
{%% 	
password&& 
=&& 
Encoding&& 
.&&  
UTF8&&  $
.&&$ %
	GetString&&% .
(&&. /
File&&/ 3
.&&3 4
ReadAllBytes&&4 @
(&&@ A
$str&&A k
)&&k l
)&&l m
;&&m n
}'' 	
catch(( 
((( 
IOException(( 
exceptIO(( #
)((# $
{)) 	
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** 
.** 
LogLevel** '
.**' (
Warn**( ,
,**, -
$str**. G
,**G H
exceptIO**I Q
)**Q R
;**R S
}++ 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_71b-- <
.--< =
BadSink--= D
(--D E
(--E F
Object--F L
)--L M
password--M U
)--W X
;--X Y
}.. 
public11 

override11 
void11 
Good11 
(11 
)11 
{22 
GoodG2B33 
(33 
)33 
;33 
GoodB2G44 
(44 
)44 
;44 
}55 
private88 
static88 
void88 
GoodG2B88 
(88  
)88  !
{99 
string:: 
password:: 
;:: 
password;; 
=;; 
$str;; 
;;; 
try== 
{>> 	
password?? 
=?? 
Encoding?? 
.??  
UTF8??  $
.??$ %
	GetString??% .
(??. /
File??/ 3
.??3 4
ReadAllBytes??4 @
(??@ A
$str??A k
)??k l
)??l m
;??m n
}@@ 	
catchAA 
(AA 
IOExceptionAA 
exceptIOAA #
)AA# $
{BB 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
$strCC. G
,CCG H
exceptIOCCI Q
)CCQ R
;CCR S
}DD 	
{FF 	
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesAlgGG, 2
=GG3 4
newGG5 8$
AesCryptoServiceProviderGG9 Q
(GGQ R
)GGR S
)GGS T
{HH 
aesAlgII 
.II 
KeyII 
=II 
EncodingII %
.II% &
UTF8II& *
.II* +
GetBytesII+ 3
(II3 4
$strII4 F
)IIF G
;IIG H
aesAlgJJ 
.JJ 
IVJJ 
=JJ 
newJJ 
byteJJ  $
[JJ$ %
$numJJ% '
]JJ' (
;JJ( )
ICryptoTransformLL  
	decryptorLL! *
=LL+ ,
aesAlgLL- 3
.LL3 4
CreateDecryptorLL4 C
(LLC D
aesAlgLLD J
.LLJ K
KeyLLK N
,LLN O
aesAlgLLP V
.LLV W
IVLLW Y
)LLY Z
;LLZ [
usingNN 
(NN 
MemoryStreamNN #
	msDecryptNN$ -
=NN. /
newNN0 3
MemoryStreamNN4 @
(NN@ A
FileNNA E
.NNE F
ReadAllBytesNNF R
(NNR S
$strNNS }
)NN} ~
)NN~ 
)	NN Ä
{OO 
usingPP 
(PP 
CryptoStreamPP '
	csDecryptPP( 1
=PP2 3
newPP4 7
CryptoStreamPP8 D
(PPD E
	msDecryptPPE N
,PPN O
	decryptorPPP Y
,PPY Z
CryptoStreamModePP[ k
.PPk l
ReadPPl p
)PPp q
)PPq r
{QQ 
usingRR 
(RR 
StreamReaderRR +
	srDecryptRR, 5
=RR6 7
newRR8 ;
StreamReaderRR< H
(RRH I
	csDecryptRRI R
)RRR S
)RRS T
{SS 
passwordVV $
=VV% &
	srDecryptVV' 0
.VV0 1
	ReadToEndVV1 :
(VV: ;
)VV; <
;VV< =
}WW 
}XX 
}YY 
}ZZ 
}[[ 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_71b\\ <
.\\< =
GoodG2BSink\\= H
(\\H I
(\\I J
Object\\J P
)\\P Q
password\\Q Y
)\\[ \
;\\\ ]
}]] 
private`` 
static`` 
void`` 
GoodB2G`` 
(``  
)``  !
{aa 
stringbb 
passwordbb 
;bb 
passwordcc 
=cc 
$strcc 
;cc 
tryee 
{ff 	
passwordgg 
=gg 
Encodinggg 
.gg  
UTF8gg  $
.gg$ %
	GetStringgg% .
(gg. /
Filegg/ 3
.gg3 4
ReadAllBytesgg4 @
(gg@ A
$strggA k
)ggk l
)ggl m
;ggm n
}hh 	
catchii 
(ii 
IOExceptionii 
exceptIOii #
)ii# $
{jj 	
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk 
.kk 
LogLevelkk '
.kk' (
Warnkk( ,
,kk, -
$strkk. G
,kkG H
exceptIOkkI Q
)kkQ R
;kkR S
}ll 	@
4CWE256_Unprotected_Storage_of_Credentials__basic_71bnn <
.nn< =
GoodB2GSinknn= H
(nnH I
(nnI J
ObjectnnJ P
)nnP Q
passwordnnQ Y
)nn[ \
;nn\ ]
}oo 
}qq 
}rr ä0
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_71b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_71b :
{ 
public   

static   
void   
BadSink   
(   
Object   %
passwordObject  & 4
)  5 6
{!! 
string"" 
password"" 
="" 
("" 
string"" !
)""! "
passwordObject""" 0
;""0 1
using$$ 
($$ 
SqlConnection$$ 
dBConnection$$ )
=$$* +
new$$, /
SqlConnection$$0 =
($$= >
$str$$> t
+$$u v
$str$$w {
+$$| }
$str	$$~ ä
+
$$ã å
password
$$ç ï
)
$$ï ñ
)
$$ñ ó
{%% 	
try&& 
{'' 
dBConnection(( 
.(( 
Open(( !
(((! "
)((" #
;((# $
})) 
catch** 
(** 
SqlException** 
	exceptSql**  )
)**) *
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 R
,,,R S
	exceptSql,,T ]
),,] ^
;,,^ _
}-- 
}.. 	
}// 
public44 

static44 
void44 
GoodG2BSink44 "
(44" #
Object44# )
passwordObject44* 8
)449 :
{55 
string66 
password66 
=66 
(66 
string66 !
)66! "
passwordObject66" 0
;660 1
using88 
(88 
SqlConnection88 
dBConnection88 )
=88* +
new88, /
SqlConnection880 =
(88= >
$str88> t
+88u v
$str88w {
+88| }
$str	88~ ä
+
88ã å
password
88ç ï
)
88ï ñ
)
88ñ ó
{99 	
try:: 
{;; 
dBConnection<< 
.<< 
Open<< !
(<<! "
)<<" #
;<<# $
}== 
catch>> 
(>> 
SqlException>> 
	exceptSql>>  )
)>>) *
{?? 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
$str@@2 R
,@@R S
	exceptSql@@T ]
)@@] ^
;@@^ _
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2GSinkFF "
(FF" #
ObjectFF# )
passwordObjectFF* 8
)FF9 :
{GG 
stringHH 
passwordHH 
=HH 
(HH 
stringHH !
)HH! "
passwordObjectHH" 0
;HH0 1
{JJ 	
usingKK 
(KK $
AesCryptoServiceProviderKK +
aesAlgKK, 2
=KK3 4
newKK5 8$
AesCryptoServiceProviderKK9 Q
(KKQ R
)KKR S
)KKS T
{LL 
aesAlgMM 
.MM 
KeyMM 
=MM 
EncodingMM %
.MM% &
UTF8MM& *
.MM* +
GetBytesMM+ 3
(MM3 4
$strMM4 F
)MMF G
;MMG H
aesAlgNN 
.NN 
IVNN 
=NN 
newNN 
byteNN  $
[NN$ %
$numNN% '
]NN' (
;NN( )
ICryptoTransformPP  
	decryptorPP! *
=PP+ ,
aesAlgPP- 3
.PP3 4
CreateDecryptorPP4 C
(PPC D
aesAlgPPD J
.PPJ K
KeyPPK N
,PPN O
aesAlgPPP V
.PPV W
IVPPW Y
)PPY Z
;PPZ [
usingRR 
(RR 
MemoryStreamRR #
	msDecryptRR$ -
=RR. /
newRR0 3
MemoryStreamRR4 @
(RR@ A
FileRRA E
.RRE F
ReadAllBytesRRF R
(RRR S
$strRRS }
)RR} ~
)RR~ 
)	RR Ä
{SS 
usingTT 
(TT 
CryptoStreamTT '
	csDecryptTT( 1
=TT2 3
newTT4 7
CryptoStreamTT8 D
(TTD E
	msDecryptTTE N
,TTN O
	decryptorTTP Y
,TTY Z
CryptoStreamModeTT[ k
.TTk l
ReadTTl p
)TTp q
)TTq r
{UU 
usingVV 
(VV 
StreamReaderVV +
	srDecryptVV, 5
=VV6 7
newVV8 ;
StreamReaderVV< H
(VVH I
	csDecryptVVI R
)VVR S
)VVS T
{WW 
passwordZZ $
=ZZ% &
	srDecryptZZ' 0
.ZZ0 1
	ReadToEndZZ1 :
(ZZ: ;
)ZZ; <
;ZZ< =
}[[ 
}\\ 
}]] 
}^^ 
}__ 	
using`` 
(`` 
SqlConnection`` 
dBConnection`` )
=``* +
new``, /
SqlConnection``0 =
(``= >
$str	``> Ä
+
``Å Ç
password
``É ã
)
``ã å
)
``å ç
{aa 	
trybb 
{cc 
dBConnectiondd 
.dd 
Opendd !
(dd! "
)dd" #
;dd# $
}ee 
catchff 
(ff 
SqlExceptionff 
	exceptSqlff  )
)ff) *
{gg 
IOhh 
.hh 
Loggerhh 
.hh 
Loghh 
(hh 
NLoghh "
.hh" #
LogLevelhh# +
.hh+ ,
Warnhh, 0
,hh0 1
$strhh2 R
,hhR S
	exceptSqlhhT ]
)hh] ^
;hh^ _
}ii 
}jj 	
}kk 
}mm 
}nn ˜@
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_72a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_72a :
:; <
AbstractTestCase= M
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
password"" 
;"" 
password## 
=## 
$str## 
;## 
try%% 
{&& 	
password'' 
='' 
Encoding'' 
.''  
UTF8''  $
.''$ %
	GetString''% .
(''. /
File''/ 3
.''3 4
ReadAllBytes''4 @
(''@ A
$str''A k
)''k l
)''l m
;''m n
}(( 	
catch)) 
()) 
IOException)) 
exceptIO)) #
)))# $
{** 	
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ 
.++ 
LogLevel++ '
.++' (
Warn++( ,
,++, -
$str++. G
,++G H
exceptIO++I Q
)++Q R
;++R S
},, 	
	Hashtable.. 
passwordHashtable.. #
=..$ %
new..& )
	Hashtable..* 3
(..3 4
$num..4 5
)..5 6
;..6 7
passwordHashtable// 
.// 
Add// 
(// 
$num// 
,//  
password//! )
)//) *
;//* +
passwordHashtable00 
.00 
Add00 
(00 
$num00 
,00  
password00! )
)00) *
;00* +
passwordHashtable11 
.11 
Add11 
(11 
$num11 
,11  
password11! )
)11) *
;11* +@
4CWE256_Unprotected_Storage_of_Credentials__basic_72b22 <
.22< =
BadSink22= D
(22D E
passwordHashtable22E V
)22X Y
;22Y Z
}33 
public66 

override66 
void66 
Good66 
(66 
)66 
{77 
GoodG2B88 
(88 
)88 
;88 
GoodB2G99 
(99 
)99 
;99 
}:: 
private== 
static== 
void== 
GoodG2B== 
(==  
)==  !
{>> 
string?? 
password?? 
;?? 
password@@ 
=@@ 
$str@@ 
;@@ 
tryBB 
{CC 	
passwordDD 
=DD 
EncodingDD 
.DD  
UTF8DD  $
.DD$ %
	GetStringDD% .
(DD. /
FileDD/ 3
.DD3 4
ReadAllBytesDD4 @
(DD@ A
$strDDA k
)DDk l
)DDl m
;DDm n
}EE 	
catchFF 
(FF 
IOExceptionFF 
exceptIOFF #
)FF# $
{GG 	
IOHH 
.HH 
LoggerHH 
.HH 
LogHH 
(HH 
NLogHH 
.HH 
LogLevelHH '
.HH' (
WarnHH( ,
,HH, -
$strHH. G
,HHG H
exceptIOHHI Q
)HHQ R
;HHR S
}II 	
{KK 	
usingLL 
(LL $
AesCryptoServiceProviderLL +
aesAlgLL, 2
=LL3 4
newLL5 8$
AesCryptoServiceProviderLL9 Q
(LLQ R
)LLR S
)LLS T
{MM 
aesAlgNN 
.NN 
KeyNN 
=NN 
EncodingNN %
.NN% &
UTF8NN& *
.NN* +
GetBytesNN+ 3
(NN3 4
$strNN4 F
)NNF G
;NNG H
aesAlgOO 
.OO 
IVOO 
=OO 
newOO 
byteOO  $
[OO$ %
$numOO% '
]OO' (
;OO( )
ICryptoTransformQQ  
	decryptorQQ! *
=QQ+ ,
aesAlgQQ- 3
.QQ3 4
CreateDecryptorQQ4 C
(QQC D
aesAlgQQD J
.QQJ K
KeyQQK N
,QQN O
aesAlgQQP V
.QQV W
IVQQW Y
)QQY Z
;QQZ [
usingSS 
(SS 
MemoryStreamSS #
	msDecryptSS$ -
=SS. /
newSS0 3
MemoryStreamSS4 @
(SS@ A
FileSSA E
.SSE F
ReadAllBytesSSF R
(SSR S
$strSSS }
)SS} ~
)SS~ 
)	SS Ä
{TT 
usingUU 
(UU 
CryptoStreamUU '
	csDecryptUU( 1
=UU2 3
newUU4 7
CryptoStreamUU8 D
(UUD E
	msDecryptUUE N
,UUN O
	decryptorUUP Y
,UUY Z
CryptoStreamModeUU[ k
.UUk l
ReadUUl p
)UUp q
)UUq r
{VV 
usingWW 
(WW 
StreamReaderWW +
	srDecryptWW, 5
=WW6 7
newWW8 ;
StreamReaderWW< H
(WWH I
	csDecryptWWI R
)WWR S
)WWS T
{XX 
password[[ $
=[[% &
	srDecrypt[[' 0
.[[0 1
	ReadToEnd[[1 :
([[: ;
)[[; <
;[[< =
}\\ 
}]] 
}^^ 
}__ 
}`` 	
	Hashtableaa 
passwordHashtableaa #
=aa$ %
newaa& )
	Hashtableaa* 3
(aa3 4
$numaa4 5
)aa5 6
;aa6 7
passwordHashtablebb 
.bb 
Addbb 
(bb 
$numbb 
,bb  
passwordbb! )
)bb) *
;bb* +
passwordHashtablecc 
.cc 
Addcc 
(cc 
$numcc 
,cc  
passwordcc! )
)cc) *
;cc* +
passwordHashtabledd 
.dd 
Adddd 
(dd 
$numdd 
,dd  
passworddd! )
)dd) *
;dd* +@
4CWE256_Unprotected_Storage_of_Credentials__basic_72bee <
.ee< =
GoodG2BSinkee= H
(eeH I
passwordHashtableeeI Z
)ee\ ]
;ee] ^
}ff 
privateii 
staticii 
voidii 
GoodB2Gii 
(ii  
)ii  !
{jj 
stringkk 
passwordkk 
;kk 
passwordll 
=ll 
$strll 
;ll 
trynn 
{oo 	
passwordpp 
=pp 
Encodingpp 
.pp  
UTF8pp  $
.pp$ %
	GetStringpp% .
(pp. /
Filepp/ 3
.pp3 4
ReadAllBytespp4 @
(pp@ A
$strppA k
)ppk l
)ppl m
;ppm n
}qq 	
catchrr 
(rr 
IOExceptionrr 
exceptIOrr #
)rr# $
{ss 	
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt 
.tt 
LogLeveltt '
.tt' (
Warntt( ,
,tt, -
$strtt. G
,ttG H
exceptIOttI Q
)ttQ R
;ttR S
}uu 	
	Hashtableww 
passwordHashtableww #
=ww$ %
newww& )
	Hashtableww* 3
(ww3 4
$numww4 5
)ww5 6
;ww6 7
passwordHashtablexx 
.xx 
Addxx 
(xx 
$numxx 
,xx  
passwordxx! )
)xx) *
;xx* +
passwordHashtableyy 
.yy 
Addyy 
(yy 
$numyy 
,yy  
passwordyy! )
)yy) *
;yy* +
passwordHashtablezz 
.zz 
Addzz 
(zz 
$numzz 
,zz  
passwordzz! )
)zz) *
;zz* +@
4CWE256_Unprotected_Storage_of_Credentials__basic_72b{{ <
.{{< =
GoodB2GSink{{= H
({{H I
passwordHashtable{{I Z
){{\ ]
;{{] ^
}|| 
}~~ 
} µ1
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_72b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_72b :
{ 
public   

static   
void   
BadSink   
(   
	Hashtable   (
passwordHashtable  ) :
)  ; <
{!! 
string"" 
password"" 
="" 
("" 
string"" !
)""! "
passwordHashtable""# 4
[""4 5
$num""5 6
]""6 7
;""7 8
using$$ 
($$ 
SqlConnection$$ 
dBConnection$$ )
=$$* +
new$$, /
SqlConnection$$0 =
($$= >
$str$$> t
+$$u v
$str$$w {
+$$| }
$str	$$~ ä
+
$$ã å
password
$$ç ï
)
$$ï ñ
)
$$ñ ó
{%% 	
try&& 
{'' 
dBConnection(( 
.(( 
Open(( !
(((! "
)((" #
;((# $
})) 
catch** 
(** 
SqlException** 
	exceptSql**  )
)**) *
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 R
,,,R S
	exceptSql,,T ]
),,] ^
;,,^ _
}-- 
}.. 	
}// 
public44 

static44 
void44 
GoodG2BSink44 "
(44" #
	Hashtable44# ,
passwordHashtable44- >
)44? @
{55 
string66 
password66 
=66 
(66 
string66 !
)66! "
passwordHashtable66# 4
[664 5
$num665 6
]666 7
;667 8
using88 
(88 
SqlConnection88 
dBConnection88 )
=88* +
new88, /
SqlConnection880 =
(88= >
$str88> t
+88u v
$str88w {
+88| }
$str	88~ ä
+
88ã å
password
88ç ï
)
88ï ñ
)
88ñ ó
{99 	
try:: 
{;; 
dBConnection<< 
.<< 
Open<< !
(<<! "
)<<" #
;<<# $
}== 
catch>> 
(>> 
SqlException>> 
	exceptSql>>  )
)>>) *
{?? 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
$str@@2 R
,@@R S
	exceptSql@@T ]
)@@] ^
;@@^ _
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2GSinkFF "
(FF" #
	HashtableFF# ,
passwordHashtableFF- >
)FF? @
{GG 
stringHH 
passwordHH 
=HH 
(HH 
stringHH !
)HH! "
passwordHashtableHH# 4
[HH4 5
$numHH5 6
]HH6 7
;HH7 8
{JJ 	
usingKK 
(KK $
AesCryptoServiceProviderKK +
aesAlgKK, 2
=KK3 4
newKK5 8$
AesCryptoServiceProviderKK9 Q
(KKQ R
)KKR S
)KKS T
{LL 
aesAlgMM 
.MM 
KeyMM 
=MM 
EncodingMM %
.MM% &
UTF8MM& *
.MM* +
GetBytesMM+ 3
(MM3 4
$strMM4 F
)MMF G
;MMG H
aesAlgNN 
.NN 
IVNN 
=NN 
newNN 
byteNN  $
[NN$ %
$numNN% '
]NN' (
;NN( )
ICryptoTransformPP  
	decryptorPP! *
=PP+ ,
aesAlgPP- 3
.PP3 4
CreateDecryptorPP4 C
(PPC D
aesAlgPPD J
.PPJ K
KeyPPK N
,PPN O
aesAlgPPP V
.PPV W
IVPPW Y
)PPY Z
;PPZ [
usingRR 
(RR 
MemoryStreamRR #
	msDecryptRR$ -
=RR. /
newRR0 3
MemoryStreamRR4 @
(RR@ A
FileRRA E
.RRE F
ReadAllBytesRRF R
(RRR S
$strRRS }
)RR} ~
)RR~ 
)	RR Ä
{SS 
usingTT 
(TT 
CryptoStreamTT '
	csDecryptTT( 1
=TT2 3
newTT4 7
CryptoStreamTT8 D
(TTD E
	msDecryptTTE N
,TTN O
	decryptorTTP Y
,TTY Z
CryptoStreamModeTT[ k
.TTk l
ReadTTl p
)TTp q
)TTq r
{UU 
usingVV 
(VV 
StreamReaderVV +
	srDecryptVV, 5
=VV6 7
newVV8 ;
StreamReaderVV< H
(VVH I
	csDecryptVVI R
)VVR S
)VVS T
{WW 
passwordZZ $
=ZZ% &
	srDecryptZZ' 0
.ZZ0 1
	ReadToEndZZ1 :
(ZZ: ;
)ZZ; <
;ZZ< =
}[[ 
}\\ 
}]] 
}^^ 
}__ 	
using`` 
(`` 
SqlConnection`` 
dBConnection`` )
=``* +
new``, /
SqlConnection``0 =
(``= >
$str	``> Ä
+
``Å Ç
password
``É ã
)
``ã å
)
``å ç
{aa 	
trybb 
{cc 
dBConnectiondd 
.dd 
Opendd !
(dd! "
)dd" #
;dd# $
}ee 
catchff 
(ff 
SqlExceptionff 
	exceptSqlff  )
)ff) *
{gg 
IOhh 
.hh 
Loggerhh 
.hh 
Loghh 
(hh 
NLoghh "
.hh" #
LogLevelhh# +
.hh+ ,
Warnhh, 0
,hh0 1
$strhh2 R
,hhR S
	exceptSqlhhT ]
)hh] ^
;hh^ _
}ii 
}jj 	
}kk 
}mm 
}nn ˝@
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_73a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_73a :
:; <
AbstractTestCase= M
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
password"" 
;"" 
password## 
=## 
$str## 
;## 
try%% 
{&& 	
password'' 
='' 
Encoding'' 
.''  
UTF8''  $
.''$ %
	GetString''% .
(''. /
File''/ 3
.''3 4
ReadAllBytes''4 @
(''@ A
$str''A k
)''k l
)''l m
;''m n
}(( 	
catch)) 
()) 
IOException)) 
exceptIO)) #
)))# $
{** 	
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ 
.++ 
LogLevel++ '
.++' (
Warn++( ,
,++, -
$str++. G
,++G H
exceptIO++I Q
)++Q R
;++R S
},, 	

LinkedList.. 
<.. 
string.. 
>.. 
passwordLinkedList.. -
=... /
new..0 3

LinkedList..4 >
<..> ?
string..? E
>..E F
(..F G
)..G H
;..H I
passwordLinkedList// 
.// 
AddLast// "
(//" #
password//# +
)//+ ,
;//, -
passwordLinkedList00 
.00 
AddLast00 "
(00" #
password00# +
)00+ ,
;00, -
passwordLinkedList11 
.11 
AddLast11 "
(11" #
password11# +
)11+ ,
;11, -@
4CWE256_Unprotected_Storage_of_Credentials__basic_73b22 <
.22< =
BadSink22= D
(22D E
passwordLinkedList22E W
)22Y Z
;22Z [
}33 
public66 

override66 
void66 
Good66 
(66 
)66 
{77 
GoodG2B88 
(88 
)88 
;88 
GoodB2G99 
(99 
)99 
;99 
}:: 
private== 
static== 
void== 
GoodG2B== 
(==  
)==  !
{>> 
string?? 
password?? 
;?? 
password@@ 
=@@ 
$str@@ 
;@@ 
tryBB 
{CC 	
passwordDD 
=DD 
EncodingDD 
.DD  
UTF8DD  $
.DD$ %
	GetStringDD% .
(DD. /
FileDD/ 3
.DD3 4
ReadAllBytesDD4 @
(DD@ A
$strDDA k
)DDk l
)DDl m
;DDm n
}EE 	
catchFF 
(FF 
IOExceptionFF 
exceptIOFF #
)FF# $
{GG 	
IOHH 
.HH 
LoggerHH 
.HH 
LogHH 
(HH 
NLogHH 
.HH 
LogLevelHH '
.HH' (
WarnHH( ,
,HH, -
$strHH. G
,HHG H
exceptIOHHI Q
)HHQ R
;HHR S
}II 	
{KK 	
usingLL 
(LL $
AesCryptoServiceProviderLL +
aesAlgLL, 2
=LL3 4
newLL5 8$
AesCryptoServiceProviderLL9 Q
(LLQ R
)LLR S
)LLS T
{MM 
aesAlgNN 
.NN 
KeyNN 
=NN 
EncodingNN %
.NN% &
UTF8NN& *
.NN* +
GetBytesNN+ 3
(NN3 4
$strNN4 F
)NNF G
;NNG H
aesAlgOO 
.OO 
IVOO 
=OO 
newOO 
byteOO  $
[OO$ %
$numOO% '
]OO' (
;OO( )
ICryptoTransformQQ  
	decryptorQQ! *
=QQ+ ,
aesAlgQQ- 3
.QQ3 4
CreateDecryptorQQ4 C
(QQC D
aesAlgQQD J
.QQJ K
KeyQQK N
,QQN O
aesAlgQQP V
.QQV W
IVQQW Y
)QQY Z
;QQZ [
usingSS 
(SS 
MemoryStreamSS #
	msDecryptSS$ -
=SS. /
newSS0 3
MemoryStreamSS4 @
(SS@ A
FileSSA E
.SSE F
ReadAllBytesSSF R
(SSR S
$strSSS }
)SS} ~
)SS~ 
)	SS Ä
{TT 
usingUU 
(UU 
CryptoStreamUU '
	csDecryptUU( 1
=UU2 3
newUU4 7
CryptoStreamUU8 D
(UUD E
	msDecryptUUE N
,UUN O
	decryptorUUP Y
,UUY Z
CryptoStreamModeUU[ k
.UUk l
ReadUUl p
)UUp q
)UUq r
{VV 
usingWW 
(WW 
StreamReaderWW +
	srDecryptWW, 5
=WW6 7
newWW8 ;
StreamReaderWW< H
(WWH I
	csDecryptWWI R
)WWR S
)WWS T
{XX 
password[[ $
=[[% &
	srDecrypt[[' 0
.[[0 1
	ReadToEnd[[1 :
([[: ;
)[[; <
;[[< =
}\\ 
}]] 
}^^ 
}__ 
}`` 	

LinkedListaa 
<aa 
stringaa 
>aa 
passwordLinkedListaa -
=aa. /
newaa0 3

LinkedListaa4 >
<aa> ?
stringaa? E
>aaE F
(aaF G
)aaG H
;aaH I
passwordLinkedListbb 
.bb 
AddLastbb "
(bb" #
passwordbb# +
)bb+ ,
;bb, -
passwordLinkedListcc 
.cc 
AddLastcc "
(cc" #
passwordcc# +
)cc+ ,
;cc, -
passwordLinkedListdd 
.dd 
AddLastdd "
(dd" #
passworddd# +
)dd+ ,
;dd, -@
4CWE256_Unprotected_Storage_of_Credentials__basic_73bee <
.ee< =
GoodG2BSinkee= H
(eeH I
passwordLinkedListeeI [
)ee] ^
;ee^ _
}ff 
privateii 
staticii 
voidii 
GoodB2Gii 
(ii  
)ii  !
{jj 
stringkk 
passwordkk 
;kk 
passwordll 
=ll 
$strll 
;ll 
trynn 
{oo 	
passwordpp 
=pp 
Encodingpp 
.pp  
UTF8pp  $
.pp$ %
	GetStringpp% .
(pp. /
Filepp/ 3
.pp3 4
ReadAllBytespp4 @
(pp@ A
$strppA k
)ppk l
)ppl m
;ppm n
}qq 	
catchrr 
(rr 
IOExceptionrr 
exceptIOrr #
)rr# $
{ss 	
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt 
.tt 
LogLeveltt '
.tt' (
Warntt( ,
,tt, -
$strtt. G
,ttG H
exceptIOttI Q
)ttQ R
;ttR S
}uu 	

LinkedListww 
<ww 
stringww 
>ww 
passwordLinkedListww -
=ww. /
newww0 3

LinkedListww4 >
<ww> ?
stringww? E
>wwE F
(wwF G
)wwG H
;wwH I
passwordLinkedListxx 
.xx 
AddLastxx "
(xx" #
passwordxx# +
)xx+ ,
;xx, -
passwordLinkedListyy 
.yy 
AddLastyy "
(yy" #
passwordyy# +
)yy+ ,
;yy, -
passwordLinkedListzz 
.zz 
AddLastzz "
(zz" #
passwordzz# +
)zz+ ,
;zz, -@
4CWE256_Unprotected_Storage_of_Credentials__basic_73b{{ <
.{{< =
GoodB2GSink{{= H
({{H I
passwordLinkedList{{I [
){{] ^
;{{^ _
}|| 
}~~ 
} ˜1
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_73b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_73b :
{ 
public   

static   
void   
BadSink   
(   

LinkedList   )
<  ) *
string  * 0
>  0 1
passwordLinkedList  2 D
)  E F
{!! 
string"" 
password"" 
="" 
passwordLinkedList"" ,
."", -
Last""- 1
.""1 2
Value""2 7
;""7 8
using$$ 
($$ 
SqlConnection$$ 
dBConnection$$ )
=$$* +
new$$, /
SqlConnection$$0 =
($$= >
$str$$> t
+$$u v
$str$$w {
+$$| }
$str	$$~ ä
+
$$ã å
password
$$ç ï
)
$$ï ñ
)
$$ñ ó
{%% 	
try&& 
{'' 
dBConnection(( 
.(( 
Open(( !
(((! "
)((" #
;((# $
})) 
catch** 
(** 
SqlException** 
	exceptSql**  )
)**) *
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 R
,,,R S
	exceptSql,,T ]
),,] ^
;,,^ _
}-- 
}.. 	
}// 
public44 

static44 
void44 
GoodG2BSink44 "
(44" #

LinkedList44# -
<44- .
string44. 4
>444 5
passwordLinkedList446 H
)44I J
{55 
string66 
password66 
=66 
passwordLinkedList66 ,
.66, -
Last66- 1
.661 2
Value662 7
;667 8
using88 
(88 
SqlConnection88 
dBConnection88 )
=88* +
new88, /
SqlConnection880 =
(88= >
$str88> t
+88u v
$str88w {
+88| }
$str	88~ ä
+
88ã å
password
88ç ï
)
88ï ñ
)
88ñ ó
{99 	
try:: 
{;; 
dBConnection<< 
.<< 
Open<< !
(<<! "
)<<" #
;<<# $
}== 
catch>> 
(>> 
SqlException>> 
	exceptSql>>  )
)>>) *
{?? 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
$str@@2 R
,@@R S
	exceptSql@@T ]
)@@] ^
;@@^ _
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2GSinkFF "
(FF" #

LinkedListFF# -
<FF- .
stringFF. 4
>FF4 5
passwordLinkedListFF6 H
)FFI J
{GG 
stringHH 
passwordHH 
=HH 
passwordLinkedListHH ,
.HH, -
LastHH- 1
.HH1 2
ValueHH2 7
;HH7 8
{JJ 	
usingKK 
(KK $
AesCryptoServiceProviderKK +
aesAlgKK, 2
=KK3 4
newKK5 8$
AesCryptoServiceProviderKK9 Q
(KKQ R
)KKR S
)KKS T
{LL 
aesAlgMM 
.MM 
KeyMM 
=MM 
EncodingMM %
.MM% &
UTF8MM& *
.MM* +
GetBytesMM+ 3
(MM3 4
$strMM4 F
)MMF G
;MMG H
aesAlgNN 
.NN 
IVNN 
=NN 
newNN 
byteNN  $
[NN$ %
$numNN% '
]NN' (
;NN( )
ICryptoTransformPP  
	decryptorPP! *
=PP+ ,
aesAlgPP- 3
.PP3 4
CreateDecryptorPP4 C
(PPC D
aesAlgPPD J
.PPJ K
KeyPPK N
,PPN O
aesAlgPPP V
.PPV W
IVPPW Y
)PPY Z
;PPZ [
usingRR 
(RR 
MemoryStreamRR #
	msDecryptRR$ -
=RR. /
newRR0 3
MemoryStreamRR4 @
(RR@ A
FileRRA E
.RRE F
ReadAllBytesRRF R
(RRR S
$strRRS }
)RR} ~
)RR~ 
)	RR Ä
{SS 
usingTT 
(TT 
CryptoStreamTT '
	csDecryptTT( 1
=TT2 3
newTT4 7
CryptoStreamTT8 D
(TTD E
	msDecryptTTE N
,TTN O
	decryptorTTP Y
,TTY Z
CryptoStreamModeTT[ k
.TTk l
ReadTTl p
)TTp q
)TTq r
{UU 
usingVV 
(VV 
StreamReaderVV +
	srDecryptVV, 5
=VV6 7
newVV8 ;
StreamReaderVV< H
(VVH I
	csDecryptVVI R
)VVR S
)VVS T
{WW 
passwordZZ $
=ZZ% &
	srDecryptZZ' 0
.ZZ0 1
	ReadToEndZZ1 :
(ZZ: ;
)ZZ; <
;ZZ< =
}[[ 
}\\ 
}]] 
}^^ 
}__ 	
using`` 
(`` 
SqlConnection`` 
dBConnection`` )
=``* +
new``, /
SqlConnection``0 =
(``= >
$str	``> Ä
+
``Å Ç
password
``É ã
)
``ã å
)
``å ç
{aa 	
trybb 
{cc 
dBConnectiondd 
.dd 
Opendd !
(dd! "
)dd" #
;dd# $
}ee 
catchff 
(ff 
SqlExceptionff 
	exceptSqlff  )
)ff) *
{gg 
IOhh 
.hh 
Loggerhh 
.hh 
Loghh 
(hh 
NLoghh "
.hh" #
LogLevelhh# +
.hh+ ,
Warnhh, 0
,hh0 1
$strhh2 R
,hhR S
	exceptSqlhhT ]
)hh] ^
;hh^ _
}ii 
}jj 	
}kk 
}mm 
}nn ¬D
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_74a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_74a :
:; <
AbstractTestCase= M
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
password"" 
;"" 
password## 
=## 
$str## 
;## 
try%% 
{&& 	
password'' 
='' 
Encoding'' 
.''  
UTF8''  $
.''$ %
	GetString''% .
(''. /
File''/ 3
.''3 4
ReadAllBytes''4 @
(''@ A
$str''A k
)''k l
)''l m
;''m n
}(( 	
catch)) 
()) 
IOException)) 
exceptIO)) #
)))# $
{** 	
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ 
.++ 
LogLevel++ '
.++' (
Warn++( ,
,++, -
$str++. G
,++G H
exceptIO++I Q
)++Q R
;++R S
},, 	

Dictionary.. 
<.. 
int.. 
,.. 
string.. 
>.. 
passwordDictionary.. 1
=..2 3
new..4 7

Dictionary..8 B
<..B C
int..C F
,..F G
string..G M
>..M N
(..N O
)..O P
;..P Q
passwordDictionary// 
.// 
Add// 
(// 
$num//  
,//  !
password//" *
)//* +
;//+ ,
passwordDictionary00 
.00 
Add00 
(00 
$num00  
,00  !
password00" *
)00* +
;00+ ,
passwordDictionary11 
.11 
Add11 
(11 
$num11  
,11  !
password11" *
)11* +
;11+ ,@
4CWE256_Unprotected_Storage_of_Credentials__basic_74b22 <
.22< =
BadSink22= D
(22D E
passwordDictionary22E W
)22Y Z
;22Z [
}33 
public66 

override66 
void66 
Good66 
(66 
)66 
{77 
GoodG2B88 
(88 
)88 
;88 
GoodB2G99 
(99 
)99 
;99 
}:: 
private== 
static== 
void== 
GoodG2B== 
(==  
)==  !
{>> 
string?? 
password?? 
;?? 
password@@ 
=@@ 
$str@@ 
;@@ 
tryBB 
{CC 	
passwordDD 
=DD 
EncodingDD 
.DD  
UTF8DD  $
.DD$ %
	GetStringDD% .
(DD. /
FileDD/ 3
.DD3 4
ReadAllBytesDD4 @
(DD@ A
$strDDA k
)DDk l
)DDl m
;DDm n
}EE 	
catchFF 
(FF 
IOExceptionFF 
exceptIOFF #
)FF# $
{GG 	
IOHH 
.HH 
LoggerHH 
.HH 
LogHH 
(HH 
NLogHH 
.HH 
LogLevelHH '
.HH' (
WarnHH( ,
,HH, -
$strHH. G
,HHG H
exceptIOHHI Q
)HHQ R
;HHR S
}II 	
{KK 	
usingLL 
(LL $
AesCryptoServiceProviderLL +
aesAlgLL, 2
=LL3 4
newLL5 8$
AesCryptoServiceProviderLL9 Q
(LLQ R
)LLR S
)LLS T
{MM 
aesAlgNN 
.NN 
KeyNN 
=NN 
EncodingNN %
.NN% &
UTF8NN& *
.NN* +
GetBytesNN+ 3
(NN3 4
$strNN4 F
)NNF G
;NNG H
aesAlgOO 
.OO 
IVOO 
=OO 
newOO 
byteOO  $
[OO$ %
$numOO% '
]OO' (
;OO( )
ICryptoTransformQQ  
	decryptorQQ! *
=QQ+ ,
aesAlgQQ- 3
.QQ3 4
CreateDecryptorQQ4 C
(QQC D
aesAlgQQD J
.QQJ K
KeyQQK N
,QQN O
aesAlgQQP V
.QQV W
IVQQW Y
)QQY Z
;QQZ [
usingSS 
(SS 
MemoryStreamSS #
	msDecryptSS$ -
=SS. /
newSS0 3
MemoryStreamSS4 @
(SS@ A
FileSSA E
.SSE F
ReadAllBytesSSF R
(SSR S
$strSSS }
)SS} ~
)SS~ 
)	SS Ä
{TT 
usingUU 
(UU 
CryptoStreamUU '
	csDecryptUU( 1
=UU2 3
newUU4 7
CryptoStreamUU8 D
(UUD E
	msDecryptUUE N
,UUN O
	decryptorUUP Y
,UUY Z
CryptoStreamModeUU[ k
.UUk l
ReadUUl p
)UUp q
)UUq r
{VV 
usingWW 
(WW 
StreamReaderWW +
	srDecryptWW, 5
=WW6 7
newWW8 ;
StreamReaderWW< H
(WWH I
	csDecryptWWI R
)WWR S
)WWS T
{XX 
password[[ $
=[[% &
	srDecrypt[[' 0
.[[0 1
	ReadToEnd[[1 :
([[: ;
)[[; <
;[[< =
}\\ 
}]] 
}^^ 
}__ 
}`` 	

Dictionaryaa 
<aa 
intaa 
,aa 
stringaa 
>aa 
passwordDictionaryaa 1
=aa2 3
newaa4 7

Dictionaryaa8 B
<aaB C
intaaC F
,aaF G
stringaaG M
>aaM N
(aaN O
)aaO P
;aaP Q
passwordDictionarybb 
.bb 
Addbb 
(bb 
$numbb  
,bb  !
passwordbb" *
)bb* +
;bb+ ,
passwordDictionarycc 
.cc 
Addcc 
(cc 
$numcc  
,cc  !
passwordcc" *
)cc* +
;cc+ ,
passwordDictionarydd 
.dd 
Adddd 
(dd 
$numdd  
,dd  !
passworddd" *
)dd* +
;dd+ ,@
4CWE256_Unprotected_Storage_of_Credentials__basic_74bee <
.ee< =
GoodG2BSinkee= H
(eeH I
passwordDictionaryeeI [
)ee] ^
;ee^ _
}ff 
privateii 
staticii 
voidii 
GoodB2Gii 
(ii  
)ii  !
{jj 
stringkk 
passwordkk 
;kk 
passwordll 
=ll 
$strll 
;ll 
trynn 
{oo 	
passwordpp 
=pp 
Encodingpp 
.pp  
UTF8pp  $
.pp$ %
	GetStringpp% .
(pp. /
Filepp/ 3
.pp3 4
ReadAllBytespp4 @
(pp@ A
$strppA k
)ppk l
)ppl m
;ppm n
}qq 	
catchrr 
(rr 
IOExceptionrr 
exceptIOrr #
)rr# $
{ss 	
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt 
.tt 
LogLeveltt '
.tt' (
Warntt( ,
,tt, -
$strtt. G
,ttG H
exceptIOttI Q
)ttQ R
;ttR S
}uu 	

Dictionaryww 
<ww 
intww 
,ww 
stringww 
>ww 
passwordDictionaryww 1
=ww2 3
newww4 7

Dictionaryww8 B
<wwB C
intwwC F
,wwF G
stringwwG M
>wwM N
(wwN O
)wwO P
;wwP Q
passwordDictionaryxx 
.xx 
Addxx 
(xx 
$numxx  
,xx  !
passwordxx" *
)xx* +
;xx+ ,
passwordDictionaryyy 
.yy 
Addyy 
(yy 
$numyy  
,yy  !
passwordyy" *
)yy* +
;yy+ ,
passwordDictionaryzz 
.zz 
Addzz 
(zz 
$numzz  
,zz  !
passwordzz" *
)zz* +
;zz+ ,@
4CWE256_Unprotected_Storage_of_Credentials__basic_74b{{ <
.{{< =
GoodB2GSink{{= H
({{H I
passwordDictionary{{I [
){{] ^
;{{^ _
}|| 
}~~ 
} û2
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_74b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_74b :
{ 
public   

static   
void   
BadSink   
(   

Dictionary   )
<  ) *
int  * -
,  - .
string  . 4
>  4 5
passwordDictionary  6 H
)  I J
{!! 
string"" 
password"" 
="" 
passwordDictionary"" ,
["", -
$num""- .
]"". /
;""/ 0
using$$ 
($$ 
SqlConnection$$ 
dBConnection$$ )
=$$* +
new$$, /
SqlConnection$$0 =
($$= >
$str$$> t
+$$u v
$str$$w {
+$$| }
$str	$$~ ä
+
$$ã å
password
$$ç ï
)
$$ï ñ
)
$$ñ ó
{%% 	
try&& 
{'' 
dBConnection(( 
.(( 
Open(( !
(((! "
)((" #
;((# $
})) 
catch** 
(** 
SqlException** 
	exceptSql**  )
)**) *
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
$str,,2 R
,,,R S
	exceptSql,,T ]
),,] ^
;,,^ _
}-- 
}.. 	
}// 
public44 

static44 
void44 
GoodG2BSink44 #
(44# $

Dictionary44$ .
<44. /
int44/ 2
,442 3
string443 9
>449 :
passwordDictionary44; M
)44N O
{55 
string66 
password66 
=66 
passwordDictionary66 ,
[66, -
$num66- .
]66. /
;66/ 0
using88 
(88 
SqlConnection88 
dBConnection88 )
=88* +
new88, /
SqlConnection880 =
(88= >
$str88> t
+88u v
$str88w {
+88| }
$str	88~ ä
+
88ã å
password
88ç ï
)
88ï ñ
)
88ñ ó
{99 	
try:: 
{;; 
dBConnection<< 
.<< 
Open<< !
(<<! "
)<<" #
;<<# $
}== 
catch>> 
(>> 
SqlException>> 
	exceptSql>>  )
)>>) *
{?? 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
$str@@2 R
,@@R S
	exceptSql@@T ]
)@@] ^
;@@^ _
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2GSinkFF "
(FF" #

DictionaryFF# -
<FF- .
intFF. 1
,FF1 2
stringFF2 8
>FF8 9
passwordDictionaryFF: L
)FFM N
{GG 
stringHH 
passwordHH 
=HH 
passwordDictionaryHH ,
[HH, -
$numHH- .
]HH. /
;HH/ 0
{JJ 	
usingKK 
(KK $
AesCryptoServiceProviderKK +
aesAlgKK, 2
=KK3 4
newKK5 8$
AesCryptoServiceProviderKK9 Q
(KKQ R
)KKR S
)KKS T
{LL 
aesAlgMM 
.MM 
KeyMM 
=MM 
EncodingMM %
.MM% &
UTF8MM& *
.MM* +
GetBytesMM+ 3
(MM3 4
$strMM4 F
)MMF G
;MMG H
aesAlgNN 
.NN 
IVNN 
=NN 
newNN 
byteNN  $
[NN$ %
$numNN% '
]NN' (
;NN( )
ICryptoTransformPP  
	decryptorPP! *
=PP+ ,
aesAlgPP- 3
.PP3 4
CreateDecryptorPP4 C
(PPC D
aesAlgPPD J
.PPJ K
KeyPPK N
,PPN O
aesAlgPPP V
.PPV W
IVPPW Y
)PPY Z
;PPZ [
usingRR 
(RR 
MemoryStreamRR #
	msDecryptRR$ -
=RR. /
newRR0 3
MemoryStreamRR4 @
(RR@ A
FileRRA E
.RRE F
ReadAllBytesRRF R
(RRR S
$strRRS }
)RR} ~
)RR~ 
)	RR Ä
{SS 
usingTT 
(TT 
CryptoStreamTT '
	csDecryptTT( 1
=TT2 3
newTT4 7
CryptoStreamTT8 D
(TTD E
	msDecryptTTE N
,TTN O
	decryptorTTP Y
,TTY Z
CryptoStreamModeTT[ k
.TTk l
ReadTTl p
)TTp q
)TTq r
{UU 
usingVV 
(VV 
StreamReaderVV +
	srDecryptVV, 5
=VV6 7
newVV8 ;
StreamReaderVV< H
(VVH I
	csDecryptVVI R
)VVR S
)VVS T
{WW 
passwordZZ $
=ZZ% &
	srDecryptZZ' 0
.ZZ0 1
	ReadToEndZZ1 :
(ZZ: ;
)ZZ; <
;ZZ< =
}[[ 
}\\ 
}]] 
}^^ 
}__ 	
using`` 
(`` 
SqlConnection`` 
dBConnection`` )
=``* +
new``, /
SqlConnection``0 =
(``= >
$str	``> Ä
+
``Å Ç
password
``É ã
)
``ã å
)
``å ç
{aa 	
trybb 
{cc 
dBConnectiondd 
.dd 
Opendd !
(dd! "
)dd" #
;dd# $
}ee 
catchff 
(ff 
SqlExceptionff 
	exceptSqlff  )
)ff) *
{gg 
IOhh 
.hh 
Loggerhh 
.hh 
Loghh 
(hh 
NLoghh "
.hh" #
LogLevelhh# +
.hh+ ,
Warnhh, 0
,hh0 1
$strhh2 R
,hhR S
	exceptSqlhhT ]
)hh] ^
;hh^ _
}ii 
}jj 	
}kk 
}mm 
}nn ˚?
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_75a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_75a :
:; <
AbstractTestCase= M
{ 
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
password## 
;## 
password$$ 
=$$ 
$str$$ 
;$$ 
try&& 
{'' 	
password(( 
=(( 
Encoding(( 
.((  
UTF8((  $
.(($ %
	GetString((% .
(((. /
File((/ 3
.((3 4
ReadAllBytes((4 @
(((@ A
$str((A k
)((k l
)((l m
;((m n
})) 	
catch** 
(** 
IOException** 
exceptIO** #
)**# $
{++ 	
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, 
.,, 
LogLevel,, '
.,,' (
Warn,,( ,
,,,, -
$str,,. G
,,,G H
exceptIO,,I Q
),,Q R
;,,R S
}-- 	
byte00 
[00 
]00 
passwordSerialized00 !
=00" #
null00$ (
;00( )
try11 
{22 	
BinaryFormatter33 
bf33 
=33  
new33! $
BinaryFormatter33% 4
(334 5
)335 6
;336 7
using44 
(44 
var44 
ms44 
=44 
new44 
MemoryStream44  ,
(44, -
)44- .
)44. /
{55 
bf66 
.66 
	Serialize66 
(66 
ms66 
,66  
password66! )
)66) *
;66* +
passwordSerialized77 "
=77# $
ms77% '
.77' (
ToArray77( /
(77/ 0
)770 1
;771 2
}88 @
4CWE256_Unprotected_Storage_of_Credentials__basic_75b99 @
.99@ A
BadSink99A H
(99H I
passwordSerialized99I [
)99] ^
;99^ _
}:: 	
catch;; 
(;; "
SerializationException;; %
exceptSerialize;;& 5
);;5 6
{<< 	
IO== 
.== 
Logger== 
.== 
Log== 
(== 
NLog== 
.== 
LogLevel== '
.==' (
Warn==( ,
,==, -
$str==. X
,==X Y
exceptSerialize==Z i
)==i j
;==j k
}>> 	
}?? 
publicBB 

overrideBB 
voidBB 
GoodBB 
(BB 
)BB 
{CC 
GoodG2BDD 
(DD 
)DD 
;DD 
GoodB2GEE 
(EE 
)EE 
;EE 
}FF 
privateII 
staticII 
voidII 
GoodG2BII 
(II  
)II  !
{JJ 
stringKK 
passwordKK 
;KK 
passwordLL 
=LL 
$strLL 
;LL 
tryNN 
{OO 	
passwordPP 
=PP 
EncodingPP 
.PP  
UTF8PP  $
.PP$ %
	GetStringPP% .
(PP. /
FilePP/ 3
.PP3 4
ReadAllBytesPP4 @
(PP@ A
$strPPA k
)PPk l
)PPl m
;PPm n
}QQ 	
catchRR 
(RR 
IOExceptionRR 
exceptIORR #
)RR# $
{SS 	
IOTT 
.TT 
LoggerTT 
.TT 
LogTT 
(TT 
NLogTT 
.TT 
LogLevelTT '
.TT' (
WarnTT( ,
,TT, -
$strTT. G
,TTG H
exceptIOTTI Q
)TTQ R
;TTR S
}UU 	
byteXX 
[XX 
]XX 
passwordSerializedXX !
=XX" #
nullXX$ (
;XX( )
tryYY 
{ZZ 	
BinaryFormatter[[ 
bf[[ 
=[[  
new[[! $
BinaryFormatter[[% 4
([[4 5
)[[5 6
;[[6 7
using\\ 
(\\ 
var\\ 
ms\\ 
=\\ 
new\\ 
MemoryStream\\  ,
(\\, -
)\\- .
)\\. /
{]] 
bf^^ 
.^^ 
	Serialize^^ 
(^^ 
ms^^ 
,^^  
password^^! )
)^^) *
;^^* +
passwordSerialized__ "
=__# $
ms__% '
.__' (
ToArray__( /
(__/ 0
)__0 1
;__1 2
}`` @
4CWE256_Unprotected_Storage_of_Credentials__basic_75baa @
.aa@ A
GoodG2BSinkaaA L
(aaL M
passwordSerializedaaM _
)aaa b
;aab c
}bb 	
catchcc 
(cc "
SerializationExceptioncc %
exceptSerializecc& 5
)cc5 6
{dd 	
IOee 
.ee 
Loggeree 
.ee 
Logee 
(ee 
NLogee 
.ee 
LogLevelee '
.ee' (
Warnee( ,
,ee, -
$stree. X
,eeX Y
exceptSerializeeeZ i
)eei j
;eej k
}ff 	
}gg 
privatejj 
staticjj 
voidjj 
GoodB2Gjj 
(jj  
)jj  !
{kk 
stringll 
passwordll 
;ll 
passwordmm 
=mm 
$strmm 
;mm 
tryoo 
{pp 	
passwordqq 
=qq 
Encodingqq 
.qq  
UTF8qq  $
.qq$ %
	GetStringqq% .
(qq. /
Fileqq/ 3
.qq3 4
ReadAllBytesqq4 @
(qq@ A
$strqqA k
)qqk l
)qql m
;qqm n
}rr 	
catchss 
(ss 
IOExceptionss 
exceptIOss #
)ss# $
{tt 	
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu 
.uu 
LogLeveluu '
.uu' (
Warnuu( ,
,uu, -
$struu. G
,uuG H
exceptIOuuI Q
)uuQ R
;uuR S
}vv 	
byteyy 
[yy 
]yy 
passwordSerializedyy !
=yy" #
nullyy$ (
;yy( )
tryzz 
{{{ 	
BinaryFormatter|| 
bf|| 
=||  
new||! $
BinaryFormatter||% 4
(||4 5
)||5 6
;||6 7
using}} 
(}} 
var}} 
ms}} 
=}} 
new}} 
MemoryStream}}  ,
(}}, -
)}}- .
)}}. /
{~~ 
bf 
. 
	Serialize 
( 
ms 
,  
password! )
)) *
;* + 
passwordSerialized
ÄÄ "
=
ÄÄ# $
ms
ÄÄ% '
.
ÄÄ' (
ToArray
ÄÄ( /
(
ÄÄ/ 0
)
ÄÄ0 1
;
ÄÄ1 2
}
ÅÅ B
4CWE256_Unprotected_Storage_of_Credentials__basic_75b
ÇÇ @
.
ÇÇ@ A
GoodB2GSink
ÇÇA L
(
ÇÇL M 
passwordSerialized
ÇÇM _
)
ÇÇa b
;
ÇÇb c
}
ÉÉ 	
catch
ÑÑ 
(
ÑÑ $
SerializationException
ÑÑ %
exceptSerialize
ÑÑ& 5
)
ÑÑ5 6
{
ÖÖ 	
IO
ÜÜ 
.
ÜÜ 
Logger
ÜÜ 
.
ÜÜ 
Log
ÜÜ 
(
ÜÜ 
NLog
ÜÜ 
.
ÜÜ 
LogLevel
ÜÜ '
.
ÜÜ' (
Warn
ÜÜ( ,
,
ÜÜ, -
$str
ÜÜ. X
,
ÜÜX Y
exceptSerialize
ÜÜZ i
)
ÜÜi j
;
ÜÜj k
}
áá 	
}
àà 
}ää 
}ãã çS
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_75b.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_75b :
{ 
public!! 

static!! 
void!! 
BadSink!! 
(!! 
byte!! #
[!!# $
]!!$ %
passwordSerialized!!& 8
)!!9 :
{"" 
try## 
{$$ 	
string%% 
password%% 
;%% 
var&& 
binForm&& 
=&& 
new&& 
BinaryFormatter&& -
(&&- .
)&&. /
;&&/ 0
using'' 
('' 
var'' 
	memStream''  
=''! "
new''# &
MemoryStream''' 3
(''3 4
)''4 5
)''5 6
{(( 
	memStream)) 
.)) 
Write)) 
())  
passwordSerialized))  2
,))2 3
$num))4 5
,))5 6
passwordSerialized))7 I
.))I J
Length))J P
)))P Q
;))Q R
	memStream** 
.** 
Seek** 
(** 
$num**  
,**  !

SeekOrigin**" ,
.**, -
Begin**- 2
)**2 3
;**3 4
password++ 
=++ 
(++ 
string++ "
)++" #
binForm++# *
.++* +
Deserialize+++ 6
(++6 7
	memStream++7 @
)++@ A
;++A B
},, 
using.. 
(.. 
SqlConnection..  
dBConnection..! -
=... /
new..0 3
SqlConnection..4 A
(..A B
$str..B x
+..y z
$str..{ 
+
..Ä Å
$str
..Ç é
+
..è ê
password
..ë ô
)
..ô ö
)
..ö õ
{// 
try00 
{11 
dBConnection22  
.22  !
Open22! %
(22% &
)22& '
;22' (
}33 
catch44 
(44 
SqlException44 #
	exceptSql44$ -
)44- .
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
$str666 V
,66V W
	exceptSql66X a
)66a b
;66b c
}77 
}88 
}99 	
catch:: 
(:: "
SerializationException:: %
exceptSerialize::& 5
)::5 6
{;; 	
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< 
.<< 
LogLevel<< '
.<<' (
Warn<<( ,
,<<, -
$str<<. Y
,<<Y Z
exceptSerialize<<[ j
)<<j k
;<<k l
}== 	
}>> 
publicCC 

staticCC 
voidCC 
GoodG2BSinkCC "
(CC" #
byteCC# '
[CC' (
]CC( )
passwordSerializedCC* <
)CC= >
{DD 
tryEE 
{FF 	
stringGG 
passwordGG 
;GG 
varHH 
binFormHH 
=HH 
newHH 
BinaryFormatterHH -
(HH- .
)HH. /
;HH/ 0
usingII 
(II 
varII 
	memStreamII  
=II! "
newII# &
MemoryStreamII' 3
(II3 4
)II4 5
)II5 6
{JJ 
	memStreamKK 
.KK 
WriteKK 
(KK  
passwordSerializedKK  2
,KK2 3
$numKK4 5
,KK5 6
passwordSerializedKK7 I
.KKI J
LengthKKJ P
)KKP Q
;KKQ R
	memStreamLL 
.LL 
SeekLL 
(LL 
$numLL  
,LL  !

SeekOriginLL" ,
.LL, -
BeginLL- 2
)LL2 3
;LL3 4
passwordMM 
=MM 
(MM 
stringMM "
)MM" #
binFormMM# *
.MM* +
DeserializeMM+ 6
(MM6 7
	memStreamMM7 @
)MM@ A
;MMA B
}NN 
usingPP 
(PP 
SqlConnectionPP  
dBConnectionPP! -
=PP. /
newPP0 3
SqlConnectionPP4 A
(PPA B
$strPPB x
+PPy z
$strPP{ 
+
PPÄ Å
$str
PPÇ é
+
PPè ê
password
PPë ô
)
PPô ö
)
PPö õ
{QQ 
tryRR 
{SS 
dBConnectionTT  
.TT  !
OpenTT! %
(TT% &
)TT& '
;TT' (
}UU 
catchVV 
(VV 
SqlExceptionVV #
	exceptSqlVV$ -
)VV- .
{WW 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX !
(XX! "
NLogXX" &
.XX& '
LogLevelXX' /
.XX/ 0
WarnXX0 4
,XX4 5
$strXX6 V
,XXV W
	exceptSqlXXX a
)XXa b
;XXb c
}YY 
}ZZ 
}[[ 	
catch\\ 
(\\ "
SerializationException\\ %
exceptSerialize\\& 5
)\\5 6
{]] 	
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ 
.^^ 
LogLevel^^ '
.^^' (
Warn^^( ,
,^^, -
$str^^. Y
,^^Y Z
exceptSerialize^^[ j
)^^j k
;^^k l
}__ 	
}`` 
publiccc 

staticcc 
voidcc 
GoodB2GSinkcc "
(cc" #
bytecc# '
[cc' (
]cc( )
passwordSerializedcc* <
)cc= >
{dd 
tryee 
{ff 	
stringgg 
passwordgg 
;gg 
varhh 
binFormhh 
=hh 
newhh 
BinaryFormatterhh -
(hh- .
)hh. /
;hh/ 0
usingii 
(ii 
varii 
	memStreamii  
=ii! "
newii# &
MemoryStreamii' 3
(ii3 4
)ii4 5
)ii5 6
{jj 
	memStreamkk 
.kk 
Writekk 
(kk  
passwordSerializedkk  2
,kk2 3
$numkk4 5
,kk5 6
passwordSerializedkk7 I
.kkI J
LengthkkJ P
)kkP Q
;kkQ R
	memStreamll 
.ll 
Seekll 
(ll 
$numll  
,ll  !

SeekOriginll" ,
.ll, -
Beginll- 2
)ll2 3
;ll3 4
passwordmm 
=mm 
(mm 
stringmm "
)mm" #
binFormmm# *
.mm* +
Deserializemm+ 6
(mm6 7
	memStreammm7 @
)mm@ A
;mmA B
}nn 
{pp 
usingqq 
(qq $
AesCryptoServiceProviderqq /
aesAlgqq0 6
=qq7 8
newqq9 <$
AesCryptoServiceProviderqq= U
(qqU V
)qqV W
)qqW X
{rr 
aesAlgss 
.ss 
Keyss 
=ss  
Encodingss! )
.ss) *
UTF8ss* .
.ss. /
GetBytesss/ 7
(ss7 8
$strss8 J
)ssJ K
;ssK L
aesAlgtt 
.tt 
IVtt 
=tt 
newtt  #
bytett$ (
[tt( )
$numtt) +
]tt+ ,
;tt, -
ICryptoTransformvv $
	decryptorvv% .
=vv/ 0
aesAlgvv1 7
.vv7 8
CreateDecryptorvv8 G
(vvG H
aesAlgvvH N
.vvN O
KeyvvO R
,vvR S
aesAlgvvT Z
.vvZ [
IVvv[ ]
)vv] ^
;vv^ _
usingxx 
(xx 
MemoryStreamxx '
	msDecryptxx( 1
=xx2 3
newxx4 7
MemoryStreamxx8 D
(xxD E
FilexxE I
.xxI J
ReadAllBytesxxJ V
(xxV W
$str	xxW Å
)
xxÅ Ç
)
xxÇ É
)
xxÉ Ñ
{yy 
usingzz 
(zz 
CryptoStreamzz +
	csDecryptzz, 5
=zz6 7
newzz8 ;
CryptoStreamzz< H
(zzH I
	msDecryptzzI R
,zzR S
	decryptorzzT ]
,zz] ^
CryptoStreamModezz_ o
.zzo p
Readzzp t
)zzt u
)zzu v
{{{ 
using|| !
(||" #
StreamReader||# /
	srDecrypt||0 9
=||: ;
new||< ?
StreamReader||@ L
(||L M
	csDecrypt||M V
)||V W
)||W X
{}} 
password
ÄÄ  (
=
ÄÄ) *
	srDecrypt
ÄÄ+ 4
.
ÄÄ4 5
	ReadToEnd
ÄÄ5 >
(
ÄÄ> ?
)
ÄÄ? @
;
ÄÄ@ A
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 
using
ÜÜ 
(
ÜÜ 
SqlConnection
ÜÜ  
dBConnection
ÜÜ! -
=
ÜÜ. /
new
ÜÜ0 3
SqlConnection
ÜÜ4 A
(
ÜÜA B
$strÜÜB Ñ
+ÜÜÖ Ü
passwordÜÜá è
)ÜÜè ê
)ÜÜê ë
{
áá 
try
àà 
{
ââ 
dBConnection
ää  
.
ää  !
Open
ää! %
(
ää% &
)
ää& '
;
ää' (
}
ãã 
catch
åå 
(
åå 
SqlException
åå #
	exceptSql
åå$ -
)
åå- .
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé !
(
éé! "
NLog
éé" &
.
éé& '
LogLevel
éé' /
.
éé/ 0
Warn
éé0 4
,
éé4 5
$str
éé6 V
,
ééV W
	exceptSql
ééX a
)
ééa b
;
ééb c
}
èè 
}
êê 
}
ëë 	
catch
íí 
(
íí $
SerializationException
íí %
exceptSerialize
íí& 5
)
íí5 6
{
ìì 	
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî 
(
îî 
NLog
îî 
.
îî 
LogLevel
îî '
.
îî' (
Warn
îî( ,
,
îî, -
$str
îî. Y
,
îîY Z
exceptSerialize
îî[ j
)
îîj k
;
îîk l
}
ïï 	
}
ññ 
}òò 
}ôô Ÿ5
ΩC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_81a.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class @
4CWE256_Unprotected_Storage_of_Credentials__basic_81a :
:; <
AbstractTestCase= M
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
password!! 
;!! 
password"" 
="" 
$str"" 
;"" 
try$$ 
{%% 	
password&& 
=&& 
Encoding&& 
.&&  
UTF8&&  $
.&&$ %
	GetString&&% .
(&&. /
File&&/ 3
.&&3 4
ReadAllBytes&&4 @
(&&@ A
$str&&A k
)&&k l
)&&l m
;&&m n
}'' 	
catch(( 
((( 
IOException(( 
exceptIO(( #
)((# $
{)) 	
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** 
.** 
LogLevel** '
.**' (
Warn**( ,
,**, -
$str**. G
,**G H
exceptIO**I Q
)**Q R
;**R S
}++ 	D
8CWE256_Unprotected_Storage_of_Credentials__basic_81_base-- @

baseObject--A K
=--L M
new--N QD
7CWE256_Unprotected_Storage_of_Credentials__basic_81_bad	--R â
(
--â ä
)
--ä ã
;
--ã å

baseObject.. 
... 
Action.. 
(.. 
password.. "
)..# $
;..$ %
}// 
public22 

override22 
void22 
Good22 
(22 
)22 
{33 
GoodG2B44 
(44 
)44 
;44 
GoodB2G55 
(55 
)55 
;55 
}66 
private99 
void99 
GoodG2B99 
(99 
)99 
{:: 
string;; 
password;; 
;;; 
password<< 
=<< 
$str<< 
;<< 
try>> 
{?? 	
password@@ 
=@@ 
Encoding@@ 
.@@  
UTF8@@  $
.@@$ %
	GetString@@% .
(@@. /
File@@/ 3
.@@3 4
ReadAllBytes@@4 @
(@@@ A
$str@@A k
)@@k l
)@@l m
;@@m n
}AA 	
catchBB 
(BB 
IOExceptionBB 
exceptIOBB #
)BB# $
{CC 	
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD 
.DD 
LogLevelDD '
.DD' (
WarnDD( ,
,DD, -
$strDD. G
,DDG H
exceptIODDI Q
)DDQ R
;DDR S
}EE 	
{GG 	
usingHH 
(HH $
AesCryptoServiceProviderHH +
aesAlgHH, 2
=HH3 4
newHH5 8$
AesCryptoServiceProviderHH9 Q
(HHQ R
)HHR S
)HHS T
{II 
aesAlgJJ 
.JJ 
KeyJJ 
=JJ 
EncodingJJ %
.JJ% &
UTF8JJ& *
.JJ* +
GetBytesJJ+ 3
(JJ3 4
$strJJ4 F
)JJF G
;JJG H
aesAlgKK 
.KK 
IVKK 
=KK 
newKK 
byteKK  $
[KK$ %
$numKK% '
]KK' (
;KK( )
ICryptoTransformMM  
	decryptorMM! *
=MM+ ,
aesAlgMM- 3
.MM3 4
CreateDecryptorMM4 C
(MMC D
aesAlgMMD J
.MMJ K
KeyMMK N
,MMN O
aesAlgMMP V
.MMV W
IVMMW Y
)MMY Z
;MMZ [
usingOO 
(OO 
MemoryStreamOO #
	msDecryptOO$ -
=OO. /
newOO0 3
MemoryStreamOO4 @
(OO@ A
FileOOA E
.OOE F
ReadAllBytesOOF R
(OOR S
$strOOS }
)OO} ~
)OO~ 
)	OO Ä
{PP 
usingQQ 
(QQ 
CryptoStreamQQ '
	csDecryptQQ( 1
=QQ2 3
newQQ4 7
CryptoStreamQQ8 D
(QQD E
	msDecryptQQE N
,QQN O
	decryptorQQP Y
,QQY Z
CryptoStreamModeQQ[ k
.QQk l
ReadQQl p
)QQp q
)QQq r
{RR 
usingSS 
(SS 
StreamReaderSS +
	srDecryptSS, 5
=SS6 7
newSS8 ;
StreamReaderSS< H
(SSH I
	csDecryptSSI R
)SSR S
)SSS T
{TT 
passwordWW $
=WW% &
	srDecryptWW' 0
.WW0 1
	ReadToEndWW1 :
(WW: ;
)WW; <
;WW< =
}XX 
}YY 
}ZZ 
}[[ 
}\\ 	D
8CWE256_Unprotected_Storage_of_Credentials__basic_81_base]] @

baseObject]]A K
=]]L M
new]]N QH
;CWE256_Unprotected_Storage_of_Credentials__basic_81_goodG2B	]]R ç
(
]]ç é
)
]]é è
;
]]è ê

baseObject^^ 
.^^ 
Action^^ 
(^^ 
password^^ "
)^^# $
;^^$ %
}__ 
privatebb 
voidbb 
GoodB2Gbb 
(bb 
)bb 
{cc 
stringdd 
passworddd 
;dd 
passwordee 
=ee 
$stree 
;ee 
trygg 
{hh 	
passwordii 
=ii 
Encodingii 
.ii  
UTF8ii  $
.ii$ %
	GetStringii% .
(ii. /
Fileii/ 3
.ii3 4
ReadAllBytesii4 @
(ii@ A
$striiA k
)iik l
)iil m
;iim n
}jj 	
catchkk 
(kk 
IOExceptionkk 
exceptIOkk #
)kk# $
{ll 	
IOmm 
.mm 
Loggermm 
.mm 
Logmm 
(mm 
NLogmm 
.mm 
LogLevelmm '
.mm' (
Warnmm( ,
,mm, -
$strmm. G
,mmG H
exceptIOmmI Q
)mmQ R
;mmR S
}nn 	D
8CWE256_Unprotected_Storage_of_Credentials__basic_81_basepp @

baseObjectppA K
=ppL M
newppN QH
;CWE256_Unprotected_Storage_of_Credentials__basic_81_goodB2G	ppR ç
(
ppç é
)
ppé è
;
ppè ê

baseObjectqq 
.qq 
Actionqq 
(qq 
passwordqq "
)qq# $
;qq$ %
}rr 
}tt 
}uu ﬂ
¿C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_81_bad.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class C
7CWE256_Unprotected_Storage_of_Credentials__basic_81_bad =
:> ?D
8CWE256_Unprotected_Storage_of_Credentials__basic_81_base@ x
{ 
public 

override 
void 
Action 
(  
string  &
password' /
)0 1
{   
using"" 
("" 
SqlConnection"" 
dBConnection"" )
=""* +
new"", /
SqlConnection""0 =
(""= >
$str""> t
+""u v
$str""w {
+""| }
$str	""~ ä
+
""ã å
password
""ç ï
)
""ï ñ
)
""ñ ó
{## 	
try$$ 
{%% 
dBConnection&& 
.&& 
Open&& !
(&&! "
)&&" #
;&&# $
}'' 
catch(( 
((( 
SqlException(( 
	exceptSql((  )
)(() *
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
$str**2 R
,**R S
	exceptSql**T ]
)**] ^
;**^ _
}++ 
},, 	
}-- 
}.. 
}// ˛
¡C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_81_base.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
abstract 
class	 D
8CWE256_Unprotected_Storage_of_Credentials__basic_81_base G
{ 
public 

abstract 
void 
Action 
(  
string  &
password' /
)0 1
;1 2
} 
}   ˛
ƒC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_81_goodB2G.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class G
;CWE256_Unprotected_Storage_of_Credentials__basic_81_goodB2G A
:B CD
8CWE256_Unprotected_Storage_of_Credentials__basic_81_baseD |
{ 
public   

override   
void   
Action   
(    
string    &
password  ' /
)  0 1
{!! 
{## 	
using$$ 
($$ $
AesCryptoServiceProvider$$ +
aesAlg$$, 2
=$$3 4
new$$5 8$
AesCryptoServiceProvider$$9 Q
($$Q R
)$$R S
)$$S T
{%% 
aesAlg&& 
.&& 
Key&& 
=&& 
Encoding&& %
.&&% &
UTF8&&& *
.&&* +
GetBytes&&+ 3
(&&3 4
$str&&4 F
)&&F G
;&&G H
aesAlg'' 
.'' 
IV'' 
='' 
new'' 
byte''  $
[''$ %
$num''% '
]''' (
;''( )
ICryptoTransform))  
	decryptor))! *
=))+ ,
aesAlg))- 3
.))3 4
CreateDecryptor))4 C
())C D
aesAlg))D J
.))J K
Key))K N
,))N O
aesAlg))P V
.))V W
IV))W Y
)))Y Z
;))Z [
using++ 
(++ 
MemoryStream++ #
	msDecrypt++$ -
=++. /
new++0 3
MemoryStream++4 @
(++@ A
File++A E
.++E F
ReadAllBytes++F R
(++R S
$str++S }
)++} ~
)++~ 
)	++ Ä
{,, 
using-- 
(-- 
CryptoStream-- '
	csDecrypt--( 1
=--2 3
new--4 7
CryptoStream--8 D
(--D E
	msDecrypt--E N
,--N O
	decryptor--P Y
,--Y Z
CryptoStreamMode--[ k
.--k l
Read--l p
)--p q
)--q r
{.. 
using// 
(// 
StreamReader// +
	srDecrypt//, 5
=//6 7
new//8 ;
StreamReader//< H
(//H I
	csDecrypt//I R
)//R S
)//S T
{00 
password33 $
=33% &
	srDecrypt33' 0
.330 1
	ReadToEnd331 :
(33: ;
)33; <
;33< =
}44 
}55 
}66 
}77 
}88 	
using99 
(99 
SqlConnection99 
dBConnection99 )
=99* +
new99, /
SqlConnection990 =
(99= >
$str	99> Ä
+
99Å Ç
password
99É ã
)
99ã å
)
99å ç
{:: 	
try;; 
{<< 
dBConnection== 
.== 
Open== !
(==! "
)==" #
;==# $
}>> 
catch?? 
(?? 
SqlException?? 
	exceptSql??  )
)??) *
{@@ 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA 
(AA 
NLogAA "
.AA" #
LogLevelAA# +
.AA+ ,
WarnAA, 0
,AA0 1
$strAA2 R
,AAR S
	exceptSqlAAT ]
)AA] ^
;AA^ _
}BB 
}CC 	
}DD 
}EE 
}FF Á
ƒC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\CWE256_Unprotected_Storage_of_Credentials__basic_81_goodG2B.cs
	namespace 	
	testcases
 
. 5
)CWE256_Unprotected_Storage_of_Credentials =
{ 
class G
;CWE256_Unprotected_Storage_of_Credentials__basic_81_goodG2B A
:B CD
8CWE256_Unprotected_Storage_of_Credentials__basic_81_baseD |
{ 
public   

override   
void   
Action   
(    
string    &
password  ' /
)  0 1
{!! 
using## 
(## 
SqlConnection## 
dBConnection## )
=##* +
new##, /
SqlConnection##0 =
(##= >
$str##> t
+##u v
$str##w {
+##| }
$str	##~ ä
+
##ã å
password
##ç ï
)
##ï ñ
)
##ñ ó
{$$ 	
try%% 
{&& 
dBConnection'' 
.'' 
Open'' !
(''! "
)''" #
;''# $
}(( 
catch)) 
()) 
SqlException)) 
	exceptSql))  )
)))) *
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
$str++2 R
,++R S
	exceptSql++T ]
)++] ^
;++^ _
},, 
}-- 	
}.. 
}// 
}00 ÿo
êC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\Program.cs
	namespace		 	
	testcases		
 
.		 5
)CWE256_Unprotected_Storage_of_Credentials		 =
{

 
class 
Program 
{ 
static 
void	 
Main 
( 
string 
[ 
] 
args  
)  !
{" #
if 
( 
args 

.
 
Any 
( 
) 
) 
{ 
if 
( 
args 
[ 
$num 
] 
. 
Equals 
( 
$str 
, 
StringComparison ,
., -
OrdinalIgnoreCase- >
)> ?
||@ B
args 
[ 
$num 
] 
. 
Equals !
(! "
$str" *
,* +
StringComparison, <
.< =
OrdinalIgnoreCase= N
)N O
)O P
{Q R
Console 
. 
	WriteLine 
( 
$str R
+S T
$str b
)b c
;c d
System 
. 
Environment 
. 
Exit 
( 
$num 
) 
;  
} 
foreach"" 
("" 
string"" 
	className"" 
in""  
args""! %
)""% &
{""' (
try$$ 
{$$	 

Type** 

myClass** 
=** 
Type** 
.** 
GetType** !
(**! "
	className**" +
)**+ ,
;**, -
object++ 
myObject++ 
=++ 
	Activator++ !
.++! "
CreateInstance++" 0
(++0 1
myClass++1 8
)++8 9
;++9 :
myClass,, 
.,, 
InvokeMember,, 
(,, 
$str,, $
,,,$ %
BindingFlags-- 
.-- 
InvokeMethod--  
|--! "
BindingFlags--# /
.--/ 0
Instance--0 8
|--9 :
BindingFlags--; G
.--G H
Public--H N
,--N O
null.. 
,.. 
myObject// 
,// 
new00 

object00 
[00 
]00 
{00 
	className00 
}00  !
)00! "
;00" #
}22 
catch22 
(22 
	Exception22 
ex22 
)22 
{22 
Console44 
.44 
	WriteLine44 
(44 
$str44 7
+448 9
	className44: C
)44C D
;44D E
Console55 
.55 
	WriteLine55 
(55 
ex55 
.55 

StackTrace55 %
)55% &
;55& '
}77 
Console99 
.99 
	WriteLine99 
(99 
$str99 
)99 
;99 
};; 
}== 
else== 	
{==
 
RunTestCWE1CC 
(CC 
)CC 
;CC 
RunTestCWE2DD 
(DD 
)DD 
;DD 
RunTestCWE3EE 
(EE 
)EE 
;EE 
RunTestCWE4FF 
(FF 
)FF 
;FF 
RunTestCWE5GG 
(GG 
)GG 
;GG 
RunTestCWE6HH 
(HH 
)HH 
;HH 
RunTestCWE7II 
(II 
)II 
;II 
RunTestCWE8JJ 
(JJ 
)JJ 
;JJ 
RunTestCWE9KK 
(KK 
)KK 
;KK 
}LL 
}MM 
privateOO 
staticOO	 
voidOO 
RunTestCWE1OO  
(OO  !
)OO! "
{OO# $
}SS 
privateUU 
staticUU	 
voidUU 
RunTestCWE2UU  
(UU  !
)UU! "
{UU# $
(WW 
newWW ?
3CWE256_Unprotected_Storage_of_Credentials__basic_01WW ;
(WW; <
)WW< =
)WW= >
.WW> ?
RunTestWW? F
(WWF G
$strWWG |
)WW| }
;WW} ~
(XX 
newXX ?
3CWE256_Unprotected_Storage_of_Credentials__basic_02XX ;
(XX; <
)XX< =
)XX= >
.XX> ?
RunTestXX? F
(XXF G
$strXXG |
)XX| }
;XX} ~
(YY 
newYY ?
3CWE256_Unprotected_Storage_of_Credentials__basic_03YY ;
(YY; <
)YY< =
)YY= >
.YY> ?
RunTestYY? F
(YYF G
$strYYG |
)YY| }
;YY} ~
(ZZ 
newZZ ?
3CWE256_Unprotected_Storage_of_Credentials__basic_04ZZ ;
(ZZ; <
)ZZ< =
)ZZ= >
.ZZ> ?
RunTestZZ? F
(ZZF G
$strZZG |
)ZZ| }
;ZZ} ~
([[ 
new[[ ?
3CWE256_Unprotected_Storage_of_Credentials__basic_05[[ ;
([[; <
)[[< =
)[[= >
.[[> ?
RunTest[[? F
([[F G
$str[[G |
)[[| }
;[[} ~
(\\ 
new\\ ?
3CWE256_Unprotected_Storage_of_Credentials__basic_06\\ ;
(\\; <
)\\< =
)\\= >
.\\> ?
RunTest\\? F
(\\F G
$str\\G |
)\\| }
;\\} ~
(]] 
new]] ?
3CWE256_Unprotected_Storage_of_Credentials__basic_07]] ;
(]]; <
)]]< =
)]]= >
.]]> ?
RunTest]]? F
(]]F G
$str]]G |
)]]| }
;]]} ~
(^^ 
new^^ ?
3CWE256_Unprotected_Storage_of_Credentials__basic_08^^ ;
(^^; <
)^^< =
)^^= >
.^^> ?
RunTest^^? F
(^^F G
$str^^G |
)^^| }
;^^} ~
(__ 
new__ ?
3CWE256_Unprotected_Storage_of_Credentials__basic_09__ ;
(__; <
)__< =
)__= >
.__> ?
RunTest__? F
(__F G
$str__G |
)__| }
;__} ~
(`` 
new`` ?
3CWE256_Unprotected_Storage_of_Credentials__basic_10`` ;
(``; <
)``< =
)``= >
.``> ?
RunTest``? F
(``F G
$str``G |
)``| }
;``} ~
(aa 
newaa ?
3CWE256_Unprotected_Storage_of_Credentials__basic_11aa ;
(aa; <
)aa< =
)aa= >
.aa> ?
RunTestaa? F
(aaF G
$straaG |
)aa| }
;aa} ~
(bb 
newbb ?
3CWE256_Unprotected_Storage_of_Credentials__basic_12bb ;
(bb; <
)bb< =
)bb= >
.bb> ?
RunTestbb? F
(bbF G
$strbbG |
)bb| }
;bb} ~
(cc 
newcc ?
3CWE256_Unprotected_Storage_of_Credentials__basic_13cc ;
(cc; <
)cc< =
)cc= >
.cc> ?
RunTestcc? F
(ccF G
$strccG |
)cc| }
;cc} ~
(dd 
newdd ?
3CWE256_Unprotected_Storage_of_Credentials__basic_14dd ;
(dd; <
)dd< =
)dd= >
.dd> ?
RunTestdd? F
(ddF G
$strddG |
)dd| }
;dd} ~
(ee 
newee ?
3CWE256_Unprotected_Storage_of_Credentials__basic_15ee ;
(ee; <
)ee< =
)ee= >
.ee> ?
RunTestee? F
(eeF G
$streeG |
)ee| }
;ee} ~
(ff 
newff ?
3CWE256_Unprotected_Storage_of_Credentials__basic_16ff ;
(ff; <
)ff< =
)ff= >
.ff> ?
RunTestff? F
(ffF G
$strffG |
)ff| }
;ff} ~
(gg 
newgg ?
3CWE256_Unprotected_Storage_of_Credentials__basic_17gg ;
(gg; <
)gg< =
)gg= >
.gg> ?
RunTestgg? F
(ggF G
$strggG |
)gg| }
;gg} ~
(hh 
newhh ?
3CWE256_Unprotected_Storage_of_Credentials__basic_21hh ;
(hh; <
)hh< =
)hh= >
.hh> ?
RunTesthh? F
(hhF G
$strhhG |
)hh| }
;hh} ~
(ii 
newii @
4CWE256_Unprotected_Storage_of_Credentials__basic_22aii <
(ii< =
)ii= >
)ii> ?
.ii? @
RunTestii@ G
(iiG H
$striiH ~
)ii~ 
;	ii Ä
(jj 
newjj ?
3CWE256_Unprotected_Storage_of_Credentials__basic_31jj ;
(jj; <
)jj< =
)jj= >
.jj> ?
RunTestjj? F
(jjF G
$strjjG |
)jj| }
;jj} ~
(kk 
newkk ?
3CWE256_Unprotected_Storage_of_Credentials__basic_41kk ;
(kk; <
)kk< =
)kk= >
.kk> ?
RunTestkk? F
(kkF G
$strkkG |
)kk| }
;kk} ~
(ll 
newll ?
3CWE256_Unprotected_Storage_of_Credentials__basic_42ll ;
(ll; <
)ll< =
)ll= >
.ll> ?
RunTestll? F
(llF G
$strllG |
)ll| }
;ll} ~
(mm 
newmm ?
3CWE256_Unprotected_Storage_of_Credentials__basic_45mm ;
(mm; <
)mm< =
)mm= >
.mm> ?
RunTestmm? F
(mmF G
$strmmG |
)mm| }
;mm} ~
(nn 
newnn @
4CWE256_Unprotected_Storage_of_Credentials__basic_51ann <
(nn< =
)nn= >
)nn> ?
.nn? @
RunTestnn@ G
(nnG H
$strnnH ~
)nn~ 
;	nn Ä
(oo 
newoo @
4CWE256_Unprotected_Storage_of_Credentials__basic_52aoo <
(oo< =
)oo= >
)oo> ?
.oo? @
RunTestoo@ G
(ooG H
$strooH ~
)oo~ 
;	oo Ä
(pp 
newpp @
4CWE256_Unprotected_Storage_of_Credentials__basic_53app <
(pp< =
)pp= >
)pp> ?
.pp? @
RunTestpp@ G
(ppG H
$strppH ~
)pp~ 
;	pp Ä
(qq 
newqq @
4CWE256_Unprotected_Storage_of_Credentials__basic_54aqq <
(qq< =
)qq= >
)qq> ?
.qq? @
RunTestqq@ G
(qqG H
$strqqH ~
)qq~ 
;	qq Ä
(rr 
newrr @
4CWE256_Unprotected_Storage_of_Credentials__basic_61arr <
(rr< =
)rr= >
)rr> ?
.rr? @
RunTestrr@ G
(rrG H
$strrrH ~
)rr~ 
;	rr Ä
(ss 
newss @
4CWE256_Unprotected_Storage_of_Credentials__basic_66ass <
(ss< =
)ss= >
)ss> ?
.ss? @
RunTestss@ G
(ssG H
$strssH ~
)ss~ 
;	ss Ä
(tt 
newtt @
4CWE256_Unprotected_Storage_of_Credentials__basic_67att <
(tt< =
)tt= >
)tt> ?
.tt? @
RunTesttt@ G
(ttG H
$strttH ~
)tt~ 
;	tt Ä
(uu 
newuu @
4CWE256_Unprotected_Storage_of_Credentials__basic_68auu <
(uu< =
)uu= >
)uu> ?
.uu? @
RunTestuu@ G
(uuG H
$struuH ~
)uu~ 
;	uu Ä
(vv 
newvv @
4CWE256_Unprotected_Storage_of_Credentials__basic_71avv <
(vv< =
)vv= >
)vv> ?
.vv? @
RunTestvv@ G
(vvG H
$strvvH ~
)vv~ 
;	vv Ä
(ww 
newww @
4CWE256_Unprotected_Storage_of_Credentials__basic_72aww <
(ww< =
)ww= >
)ww> ?
.ww? @
RunTestww@ G
(wwG H
$strwwH ~
)ww~ 
;	ww Ä
(xx 
newxx @
4CWE256_Unprotected_Storage_of_Credentials__basic_73axx <
(xx< =
)xx= >
)xx> ?
.xx? @
RunTestxx@ G
(xxG H
$strxxH ~
)xx~ 
;	xx Ä
(yy 
newyy @
4CWE256_Unprotected_Storage_of_Credentials__basic_74ayy <
(yy< =
)yy= >
)yy> ?
.yy? @
RunTestyy@ G
(yyG H
$stryyH ~
)yy~ 
;	yy Ä
(zz 
newzz @
4CWE256_Unprotected_Storage_of_Credentials__basic_75azz <
(zz< =
)zz= >
)zz> ?
.zz? @
RunTestzz@ G
(zzG H
$strzzH ~
)zz~ 
;	zz Ä
({{ 
new{{ @
4CWE256_Unprotected_Storage_of_Credentials__basic_81a{{ <
({{< =
){{= >
){{> ?
.{{? @
RunTest{{@ G
({{G H
$str{{H ~
){{~ 
;	{{ Ä
}}} 
private 
static	 
void 
RunTestCWE3  
(  !
)! "
{# $
}
ÉÉ 
private
ÖÖ 
static
ÖÖ	 
void
ÖÖ 
RunTestCWE4
ÖÖ  
(
ÖÖ  !
)
ÖÖ! "
{
ÖÖ# $
}
ââ 
private
ãã 
static
ãã	 
void
ãã 
RunTestCWE5
ãã  
(
ãã  !
)
ãã! "
{
ãã# $
}
èè 
private
ëë 
static
ëë	 
void
ëë 
RunTestCWE6
ëë  
(
ëë  !
)
ëë! "
{
ëë# $
}
ïï 
private
óó 
static
óó	 
void
óó 
RunTestCWE7
óó  
(
óó  !
)
óó! "
{
óó# $
}
õõ 
private
ùù 
static
ùù	 
void
ùù 
RunTestCWE8
ùù  
(
ùù  !
)
ùù! "
{
ùù# $
}
°° 
private
££ 
static
££	 
void
££ 
RunTestCWE9
££  
(
££  !
)
££! "
{
££# $
}
ßß 
}®® 
}©© Ã
†C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE256_Unprotected_Storage_of_Credentials\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str D
)D E
]E F
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str F
)F G
]G H
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *