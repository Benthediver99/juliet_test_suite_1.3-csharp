ì(
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_01.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_01 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
string## 
stringNumber## 
=##  !
req##" %
.##% &
Params##& ,
.##, -
Get##- 0
(##0 1
$str##1 7
)##7 8
;##8 9
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&&  
(&&  !
stringNumber&&! -
.&&- .
Trim&&. 2
(&&2 3
)&&3 4
)&&4 5
;&&5 6
}'' 
catch(( 
((( 
FormatException(( "
exceptNumberFormat((# 5
)((5 6
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
exceptNumberFormat**2 D
,**D E
$str	**F Ç
)
**Ç É
;
**É Ñ
}++ 
},, 	
IO// 

.//
 
	WriteLine// 
(// 
$str//  
+//! "
data//# '
+//( )
$str//* /
+//0 1
(//2 3
$num//3 6
///7 8
data//9 =
)//= >
+//? @
$str//A E
)//E F
;//F G
}00 
public33 

override33 
void33 
Good33 
(33 
HttpRequest33 )
req33* -
,33- .
HttpResponse33/ ;
resp33< @
)33@ A
{44 
GoodG2B55 
(55 
req55 
,55 
resp55 
)55 
;55 
GoodB2G66 
(66 
req66 
,66 
resp66 
)66 
;66 
}77 
private:: 
void:: 
GoodG2B:: 
(:: 
HttpRequest:: $
req::% (
,::( )
HttpResponse::* 6
resp::7 ;
)::; <
{;; 
int<< 
data<< 
;<< 
data>> 
=>> 
$num>> 
;>> 
IOAA 

.AA
 
	WriteLineAA 
(AA 
$strAA  
+AA! "
dataAA# '
+AA( )
$strAA* /
+AA0 1
(AA2 3
$numAA3 6
/AA7 8
dataAA9 =
)AA= >
+AA? @
$strAAA E
)AAE F
;AAF G
}BB 
privateEE 
voidEE 
GoodB2GEE 
(EE 
HttpRequestEE $
reqEE% (
,EE( )
HttpResponseEE* 6
respEE7 ;
)EE; <
{FF 
intGG 
dataGG 
;GG 
dataHH 
=HH 
intHH 
.HH 
MinValueHH 
;HH 
{JJ 	
stringKK 
stringNumberKK 
=KK  !
reqKK" %
.KK% &
ParamsKK& ,
.KK, -
GetKK- 0
(KK0 1
$strKK1 7
)KK7 8
;KK8 9
tryLL 
{MM 
dataNN 
=NN 
intNN 
.NN 
ParseNN  
(NN  !
stringNumberNN! -
.NN- .
TrimNN. 2
(NN2 3
)NN3 4
)NN4 5
;NN5 6
}OO 
catchPP 
(PP 
FormatExceptionPP "
exceptNumberFormatPP# 5
)PP5 6
{QQ 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$str	RRF Ç
)
RRÇ É
;
RRÉ Ñ
}SS 
}TT 	
ifVV 

(VV 
dataVV 
!=VV 
$numVV 
)VV 
{WW 	
IOXX 
.XX 
	WriteLineXX 
(XX 
$strXX 
+XX  !
dataXX" &
+XX' (
$strXX) .
+XX/ 0
(XX1 2
$numXX2 5
/XX6 7
dataXX8 <
)XX< =
+XX> ?
$strXX@ D
)XXD E
;XXE F
}YY 	
elseZZ 
{[[ 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ @
)\\@ A
;\\A B
}]] 	
}^^ 
}`` 
}aa ÛN
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_02.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_02 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
true   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
true66 
)66 
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: $
+::% &
data::' +
+::, -
$str::. 3
+::4 5
(::6 7
$num::7 :
/::; <
data::= A
)::A B
+::C D
$str::E I
)::I J
;::J K
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
falseCC 
)CC 
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
trueNN 
)NN 
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR $
+RR% &
dataRR' +
+RR, -
$strRR. 3
+RR4 5
(RR6 7
$numRR7 :
/RR; <
dataRR= A
)RRA B
+RRC D
$strRRE I
)RRI J
;RRJ K
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
trueZZ 
)ZZ 
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
trueee 
)ee 
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii $
+ii% &
dataii' +
+ii, -
$strii. 3
+ii4 5
(ii6 7
$numii7 :
/ii; <
dataii= A
)iiA B
+iiC D
$striiE I
)iiI J
;iiJ K
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
trueqq 
)qq 
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
false
áá 
)
áá 
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
/
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
true
ûû 
)
ûû 
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
true
¥¥ 
)
¥¥ 
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
/
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ —Q
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_03.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_03 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
$num   
==   
$num   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
$num66 
==66 
$num66 
)66 
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: $
+::% &
data::' +
+::, -
$str::. 3
+::4 5
(::6 7
$num::7 :
/::; <
data::= A
)::A B
+::C D
$str::E I
)::I J
;::J K
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
$numCC 
!=CC 
$numCC 
)CC 
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
$numNN 
==NN 
$numNN 
)NN 
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR $
+RR% &
dataRR' +
+RR, -
$strRR. 3
+RR4 5
(RR6 7
$numRR7 :
/RR; <
dataRR= A
)RRA B
+RRC D
$strRRE I
)RRI J
;RRJ K
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
$numZZ 
==ZZ 
$numZZ 
)ZZ 
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
$numee 
==ee 
$numee 
)ee 
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii $
+ii% &
dataii' +
+ii, -
$strii. 3
+ii4 5
(ii6 7
$numii7 :
/ii; <
dataii= A
)iiA B
+iiC D
$striiE I
)iiI J
;iiJ K
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
$numqq 
==qq 
$numqq 
)qq 
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
$num
áá 
!=
áá 
$num
áá 
)
áá 
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
/
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
$num
ûû 
==
ûû 
$num
ûû 
)
ûû 
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
$num
¥¥ 
==
¥¥ 
$num
¥¥ 
)
¥¥ 
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
/
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ „R
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_04.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_04 9
:: ;
AbstractTestCaseWeb< O
{ 
private!! 
const!! 
bool!! 
PRIVATE_CONST_TRUE!! )
=!!* +
true!!, 0
;!!0 1
private"" 
const"" 
bool"" 
PRIVATE_CONST_FALSE"" *
=""+ ,
false""- 2
;""2 3
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
HttpRequest$$ (
req$$) ,
,$$, -
HttpResponse$$. :
resp$$; ?
)$$? @
{%% 
int&& 
data&& 
;&& 
if'' 

('' 
PRIVATE_CONST_TRUE'' 
)'' 
{(( 	
data)) 
=)) 
int)) 
.)) 
MinValue)) 
;))  
{++ 
string,, 
stringNumber,, #
=,,$ %
req,,& )
.,,) *
Params,,* 0
.,,0 1
Get,,1 4
(,,4 5
$str,,5 ;
),,; <
;,,< =
try-- 
{.. 
data// 
=// 
int// 
.// 
Parse// $
(//$ %
stringNumber//% 1
.//1 2
Trim//2 6
(//6 7
)//7 8
)//8 9
;//9 :
}00 
catch11 
(11 
FormatException11 &
exceptNumberFormat11' 9
)119 :
{22 
IO33 
.33 
Logger33 
.33 
Log33 !
(33! "
NLog33" &
.33& '
LogLevel33' /
.33/ 0
Warn330 4
,334 5
exceptNumberFormat336 H
,33H I
$str	33J Ü
)
33Ü á
;
33á à
}44 
}55 
}66 	
else77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
if== 

(== 
PRIVATE_CONST_TRUE== 
)== 
{>> 	
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA $
+AA% &
dataAA' +
+AA, -
$strAA. 3
+AA4 5
(AA6 7
$numAA7 :
/AA; <
dataAA= A
)AAA B
+AAC D
$strAAE I
)AAI J
;AAJ K
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
HttpRequestGG %
reqGG& )
,GG) *
HttpResponseGG+ 7
respGG8 <
)GG< =
{HH 
intII 
dataII 
;II 
ifJJ 

(JJ 
PRIVATE_CONST_FALSEJJ 
)JJ  
{KK 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
ifUU 

(UU 
PRIVATE_CONST_TRUEUU 
)UU 
{VV 	
IOYY 
.YY 
	WriteLineYY 
(YY 
$strYY $
+YY% &
dataYY' +
+YY, -
$strYY. 3
+YY4 5
(YY6 7
$numYY7 :
/YY; <
dataYY= A
)YYA B
+YYC D
$strYYE I
)YYI J
;YYJ K
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
int`` 
data`` 
;`` 
ifaa 

(aa 
PRIVATE_CONST_TRUEaa 
)aa 
{bb 	
datadd 
=dd 
$numdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
$numjj 
;jj 
}kk 	
ifll 

(ll 
PRIVATE_CONST_TRUEll 
)ll 
{mm 	
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp $
+pp% &
datapp' +
+pp, -
$strpp. 3
+pp4 5
(pp6 7
$numpp7 :
/pp; <
datapp= A
)ppA B
+ppC D
$strppE I
)ppI J
;ppJ K
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
intww 
dataww 
;ww 
ifxx 

(xx 
PRIVATE_CONST_TRUExx 
)xx 
{yy 	
datazz 
=zz 
intzz 
.zz 
MinValuezz 
;zz  
{|| 
string}} 
stringNumber}} #
=}}$ %
req}}& )
.}}) *
Params}}* 0
.}}0 1
Get}}1 4
(}}4 5
$str}}5 ;
)}}; <
;}}< =
try~~ 
{ 
data
ÄÄ 
=
ÄÄ 
int
ÄÄ 
.
ÄÄ 
Parse
ÄÄ $
(
ÄÄ$ %
stringNumber
ÄÄ% 1
.
ÄÄ1 2
Trim
ÄÄ2 6
(
ÄÄ6 7
)
ÄÄ7 8
)
ÄÄ8 9
;
ÄÄ9 :
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
FormatException
ÇÇ & 
exceptNumberFormat
ÇÇ' 9
)
ÇÇ9 :
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ 
.
ÑÑ 
Log
ÑÑ !
(
ÑÑ! "
NLog
ÑÑ" &
.
ÑÑ& '
LogLevel
ÑÑ' /
.
ÑÑ/ 0
Warn
ÑÑ0 4
,
ÑÑ4 5 
exceptNumberFormat
ÑÑ6 H
,
ÑÑH I
$strÑÑJ Ü
)ÑÑÜ á
;ÑÑá à
}
ÖÖ 
}
ÜÜ 
}
áá 	
else
àà 
{
ââ 	
data
åå 
=
åå 
$num
åå 
;
åå 
}
çç 	
if
éé 

(
éé !
PRIVATE_CONST_FALSE
éé 
)
éé  
{
èè 	
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë /
)
ëë/ 0
;
ëë0 1
}
íí 	
else
ìì 
{
îî 	
if
ññ 
(
ññ 
data
ññ 
!=
ññ 
$num
ññ 
)
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò #
+
òò$ %
data
òò& *
+
òò+ ,
$str
òò- 2
+
òò3 4
(
òò5 6
$num
òò6 9
/
òò: ;
data
òò< @
)
òò@ A
+
òòB C
$str
òòD H
)
òòH I
;
òòI J
}
ôô 
else
öö 
{
õõ 
IO
úú 
.
úú 
	WriteLine
úú 
(
úú 
$str
úú D
)
úúD E
;
úúE F
}
ùù 
}
ûû 	
}
üü 
private
¢¢ 
void
¢¢ 
GoodB2G2
¢¢ 
(
¢¢ 
HttpRequest
¢¢ %
req
¢¢& )
,
¢¢) *
HttpResponse
¢¢+ 7
resp
¢¢8 <
)
¢¢< =
{
££ 
int
§§ 
data
§§ 
;
§§ 
if
•• 

(
••  
PRIVATE_CONST_TRUE
•• 
)
•• 
{
¶¶ 	
data
ßß 
=
ßß 
int
ßß 
.
ßß 
MinValue
ßß 
;
ßß  
{
©© 
string
™™ 
stringNumber
™™ #
=
™™$ %
req
™™& )
.
™™) *
Params
™™* 0
.
™™0 1
Get
™™1 4
(
™™4 5
$str
™™5 ;
)
™™; <
;
™™< =
try
´´ 
{
¨¨ 
data
≠≠ 
=
≠≠ 
int
≠≠ 
.
≠≠ 
Parse
≠≠ $
(
≠≠$ %
stringNumber
≠≠% 1
.
≠≠1 2
Trim
≠≠2 6
(
≠≠6 7
)
≠≠7 8
)
≠≠8 9
;
≠≠9 :
}
ÆÆ 
catch
ØØ 
(
ØØ 
FormatException
ØØ & 
exceptNumberFormat
ØØ' 9
)
ØØ9 :
{
∞∞ 
IO
±± 
.
±± 
Logger
±± 
.
±± 
Log
±± !
(
±±! "
NLog
±±" &
.
±±& '
LogLevel
±±' /
.
±±/ 0
Warn
±±0 4
,
±±4 5 
exceptNumberFormat
±±6 H
,
±±H I
$str±±J Ü
)±±Ü á
;±±á à
}
≤≤ 
}
≥≥ 
}
¥¥ 	
else
µµ 
{
∂∂ 	
data
ππ 
=
ππ 
$num
ππ 
;
ππ 
}
∫∫ 	
if
ªª 

(
ªª  
PRIVATE_CONST_TRUE
ªª 
)
ªª 
{
ºº 	
if
ææ 
(
ææ 
data
ææ 
!=
ææ 
$num
ææ 
)
ææ 
{
øø 
IO
¿¿ 
.
¿¿ 
	WriteLine
¿¿ 
(
¿¿ 
$str
¿¿ #
+
¿¿$ %
data
¿¿& *
+
¿¿+ ,
$str
¿¿- 2
+
¿¿3 4
(
¿¿5 6
$num
¿¿6 9
/
¿¿: ;
data
¿¿< @
)
¿¿@ A
+
¿¿B C
$str
¿¿D H
)
¿¿H I
;
¿¿I J
}
¡¡ 
else
¬¬ 
{
√√ 
IO
ƒƒ 
.
ƒƒ 
	WriteLine
ƒƒ 
(
ƒƒ 
$str
ƒƒ D
)
ƒƒD E
;
ƒƒE F
}
≈≈ 
}
∆∆ 	
}
«« 
public
…… 

override
…… 
void
…… 
Good
…… 
(
…… 
HttpRequest
…… )
req
……* -
,
……- .
HttpResponse
……/ ;
resp
……< @
)
……@ A
{
   
GoodG2B1
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodG2B2
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G1
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G2
ŒŒ 
(
ŒŒ 
req
ŒŒ 
,
ŒŒ 
resp
ŒŒ 
)
ŒŒ 
;
ŒŒ 
}
œœ 
}—— 
}““ œQ
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_05.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_05 9
:: ;
AbstractTestCaseWeb< O
{ 
private   
bool   
privateTrue   
=   
true   #
;  # $
private!! 
bool!! 
privateFalse!! 
=!! 
false!!  %
;!!% &
public## 

override## 
void## 
Bad## 
(## 
HttpRequest## (
req##) ,
,##, -
HttpResponse##. :
resp##; ?
)##? @
{$$ 
int%% 
data%% 
;%% 
if&& 

(&& 
privateTrue&& 
)&& 
{'' 	
data(( 
=(( 
int(( 
.(( 
MinValue(( 
;((  
{** 
string++ 
stringNumber++ #
=++$ %
req++& )
.++) *
Params++* 0
.++0 1
Get++1 4
(++4 5
$str++5 ;
)++; <
;++< =
try,, 
{-- 
data.. 
=.. 
int.. 
... 
Parse.. $
(..$ %
stringNumber..% 1
...1 2
Trim..2 6
(..6 7
)..7 8
)..8 9
;..9 :
}// 
catch00 
(00 
FormatException00 &
exceptNumberFormat00' 9
)009 :
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptNumberFormat226 H
,22H I
$str	22J Ü
)
22Ü á
;
22á à
}33 
}44 
}55 	
else66 
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
if<< 

(<< 
privateTrue<< 
)<< 
{== 	
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ $
+@@% &
data@@' +
+@@, -
$str@@. 3
+@@4 5
(@@6 7
$num@@7 :
/@@; <
data@@= A
)@@A B
+@@C D
$str@@E I
)@@I J
;@@J K
}AA 	
}BB 
privateFF 
voidFF 
GoodG2B1FF 
(FF 
HttpRequestFF %
reqFF& )
,FF) *
HttpResponseFF+ 7
respFF8 <
)FF< =
{GG 
intHH 
dataHH 
;HH 
ifII 

(II 
privateFalseII 
)II 
{JJ 	
dataMM 
=MM 
$numMM 
;MM 
}NN 	
elseOO 
{PP 	
dataRR 
=RR 
$numRR 
;RR 
}SS 	
ifTT 

(TT 
privateTrueTT 
)TT 
{UU 	
IOXX 
.XX 
	WriteLineXX 
(XX 
$strXX $
+XX% &
dataXX' +
+XX, -
$strXX. 3
+XX4 5
(XX6 7
$numXX7 :
/XX; <
dataXX= A
)XXA B
+XXC D
$strXXE I
)XXI J
;XXJ K
}YY 	
}ZZ 
private]] 
void]] 
GoodG2B2]] 
(]] 
HttpRequest]] %
req]]& )
,]]) *
HttpResponse]]+ 7
resp]]8 <
)]]< =
{^^ 
int__ 
data__ 
;__ 
if`` 

(`` 
privateTrue`` 
)`` 
{aa 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
elseee 
{ff 	
dataii 
=ii 
$numii 
;ii 
}jj 	
ifkk 

(kk 
privateTruekk 
)kk 
{ll 	
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo $
+oo% &
dataoo' +
+oo, -
$stroo. 3
+oo4 5
(oo6 7
$numoo7 :
/oo; <
dataoo= A
)ooA B
+ooC D
$strooE I
)ooI J
;ooJ K
}pp 	
}qq 
privatett 
voidtt 
GoodB2G1tt 
(tt 
HttpRequesttt %
reqtt& )
,tt) *
HttpResponsett+ 7
resptt8 <
)tt< =
{uu 
intvv 
datavv 
;vv 
ifww 

(ww 
privateTrueww 
)ww 
{xx 	
datayy 
=yy 
intyy 
.yy 
MinValueyy 
;yy  
{{{ 
string|| 
stringNumber|| #
=||$ %
req||& )
.||) *
Params||* 0
.||0 1
Get||1 4
(||4 5
$str||5 ;
)||; <
;||< =
try}} 
{~~ 
data 
= 
int 
. 
Parse $
($ %
stringNumber% 1
.1 2
Trim2 6
(6 7
)7 8
)8 9
;9 :
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
FormatException
ÅÅ & 
exceptNumberFormat
ÅÅ' 9
)
ÅÅ9 :
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
Logger
ÉÉ 
.
ÉÉ 
Log
ÉÉ !
(
ÉÉ! "
NLog
ÉÉ" &
.
ÉÉ& '
LogLevel
ÉÉ' /
.
ÉÉ/ 0
Warn
ÉÉ0 4
,
ÉÉ4 5 
exceptNumberFormat
ÉÉ6 H
,
ÉÉH I
$strÉÉJ Ü
)ÉÉÜ á
;ÉÉá à
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 	
else
áá 
{
àà 	
data
ãã 
=
ãã 
$num
ãã 
;
ãã 
}
åå 	
if
çç 

(
çç 
privateFalse
çç 
)
çç 
{
éé 	
IO
êê 
.
êê 
	WriteLine
êê 
(
êê 
$str
êê /
)
êê/ 0
;
êê0 1
}
ëë 	
else
íí 
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
/
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
private
°° 
void
°° 
GoodB2G2
°° 
(
°° 
HttpRequest
°° %
req
°°& )
,
°°) *
HttpResponse
°°+ 7
resp
°°8 <
)
°°< =
{
¢¢ 
int
££ 
data
££ 
;
££ 
if
§§ 

(
§§ 
privateTrue
§§ 
)
§§ 
{
•• 	
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
MinValue
¶¶ 
;
¶¶  
{
®® 
string
©© 
stringNumber
©© #
=
©©$ %
req
©©& )
.
©©) *
Params
©©* 0
.
©©0 1
Get
©©1 4
(
©©4 5
$str
©©5 ;
)
©©; <
;
©©< =
try
™™ 
{
´´ 
data
¨¨ 
=
¨¨ 
int
¨¨ 
.
¨¨ 
Parse
¨¨ $
(
¨¨$ %
stringNumber
¨¨% 1
.
¨¨1 2
Trim
¨¨2 6
(
¨¨6 7
)
¨¨7 8
)
¨¨8 9
;
¨¨9 :
}
≠≠ 
catch
ÆÆ 
(
ÆÆ 
FormatException
ÆÆ & 
exceptNumberFormat
ÆÆ' 9
)
ÆÆ9 :
{
ØØ 
IO
∞∞ 
.
∞∞ 
Logger
∞∞ 
.
∞∞ 
Log
∞∞ !
(
∞∞! "
NLog
∞∞" &
.
∞∞& '
LogLevel
∞∞' /
.
∞∞/ 0
Warn
∞∞0 4
,
∞∞4 5 
exceptNumberFormat
∞∞6 H
,
∞∞H I
$str∞∞J Ü
)∞∞Ü á
;∞∞á à
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
privateTrue
∫∫ 
)
∫∫ 
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
/
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— òT
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_06.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_06 9
:: ;
AbstractTestCaseWeb< O
{ 
private   
const   
int   
PRIVATE_CONST_FIVE   (
=  ) *
$num  + ,
;  , -
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
int$$ 
data$$ 
;$$ 
if%% 

(%% 
PRIVATE_CONST_FIVE%% 
==%%  
$num%%  !
)%%! "
{&& 	
data'' 
='' 
int'' 
.'' 
MinValue'' 
;''  
{)) 
string** 
stringNumber** #
=**$ %
req**& )
.**) *
Params*** 0
.**0 1
Get**1 4
(**4 5
$str**5 ;
)**; <
;**< =
try++ 
{,, 
data-- 
=-- 
int-- 
.-- 
Parse-- $
(--$ %
stringNumber--% 1
.--1 2
Trim--2 6
(--6 7
)--7 8
)--8 9
;--9 :
}.. 
catch// 
(// 
FormatException// &
exceptNumberFormat//' 9
)//9 :
{00 
IO11 
.11 
Logger11 
.11 
Log11 !
(11! "
NLog11" &
.11& '
LogLevel11' /
.11/ 0
Warn110 4
,114 5
exceptNumberFormat116 H
,11H I
$str	11J Ü
)
11Ü á
;
11á à
}22 
}33 
}44 	
else55 
{66 	
data99 
=99 
$num99 
;99 
}:: 	
if;; 

(;; 
PRIVATE_CONST_FIVE;; 
==;;  
$num;;  !
);;! "
{<< 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? $
+??% &
data??' +
+??, -
$str??. 3
+??4 5
(??6 7
$num??7 :
/??; <
data??= A
)??A B
+??C D
$str??E I
)??I J
;??J K
}@@ 	
}AA 
privateEE 
voidEE 
GoodG2B1EE 
(EE 
HttpRequestEE %
reqEE& )
,EE) *
HttpResponseEE+ 7
respEE8 <
)EE< =
{FF 
intGG 
dataGG 
;GG 
ifHH 

(HH 
PRIVATE_CONST_FIVEHH 
!=HH  
$numHH  !
)HH! "
{II 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
elseNN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
ifSS 

(SS 
PRIVATE_CONST_FIVESS 
==SS  
$numSS  !
)SS! "
{TT 	
IOWW 
.WW 
	WriteLineWW 
(WW 
$strWW $
+WW% &
dataWW' +
+WW, -
$strWW. 3
+WW4 5
(WW6 7
$numWW7 :
/WW; <
dataWW= A
)WWA B
+WWC D
$strWWE I
)WWI J
;WWJ K
}XX 	
}YY 
private\\ 
void\\ 
GoodG2B2\\ 
(\\ 
HttpRequest\\ %
req\\& )
,\\) *
HttpResponse\\+ 7
resp\\8 <
)\\< =
{]] 
int^^ 
data^^ 
;^^ 
if__ 

(__ 
PRIVATE_CONST_FIVE__ 
==__  
$num__  !
)__! "
{`` 	
databb 
=bb 
$numbb 
;bb 
}cc 	
elsedd 
{ee 	
datahh 
=hh 
$numhh 
;hh 
}ii 	
ifjj 

(jj 
PRIVATE_CONST_FIVEjj 
==jj  
$numjj  !
)jj! "
{kk 	
IOnn 
.nn 
	WriteLinenn 
(nn 
$strnn $
+nn% &
datann' +
+nn, -
$strnn. 3
+nn4 5
(nn6 7
$numnn7 :
/nn; <
datann= A
)nnA B
+nnC D
$strnnE I
)nnI J
;nnJ K
}oo 	
}pp 
privatess 
voidss 
GoodB2G1ss 
(ss 
HttpRequestss %
reqss& )
,ss) *
HttpResponsess+ 7
respss8 <
)ss< =
{tt 
intuu 
datauu 
;uu 
ifvv 

(vv 
PRIVATE_CONST_FIVEvv 
==vv  
$numvv  !
)vv! "
{ww 	
dataxx 
=xx 
intxx 
.xx 
MinValuexx 
;xx  
{zz 
string{{ 
stringNumber{{ #
={{$ %
req{{& )
.{{) *
Params{{* 0
.{{0 1
Get{{1 4
({{4 5
$str{{5 ;
){{; <
;{{< =
try|| 
{}} 
data~~ 
=~~ 
int~~ 
.~~ 
Parse~~ $
(~~$ %
stringNumber~~% 1
.~~1 2
Trim~~2 6
(~~6 7
)~~7 8
)~~8 9
;~~9 :
} 
catch
ÄÄ 
(
ÄÄ 
FormatException
ÄÄ & 
exceptNumberFormat
ÄÄ' 9
)
ÄÄ9 :
{
ÅÅ 
IO
ÇÇ 
.
ÇÇ 
Logger
ÇÇ 
.
ÇÇ 
Log
ÇÇ !
(
ÇÇ! "
NLog
ÇÇ" &
.
ÇÇ& '
LogLevel
ÇÇ' /
.
ÇÇ/ 0
Warn
ÇÇ0 4
,
ÇÇ4 5 
exceptNumberFormat
ÇÇ6 H
,
ÇÇH I
$strÇÇJ Ü
)ÇÇÜ á
;ÇÇá à
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
else
ÜÜ 
{
áá 	
data
ää 
=
ää 
$num
ää 
;
ää 
}
ãã 	
if
åå 

(
åå  
PRIVATE_CONST_FIVE
åå 
!=
åå  
$num
åå  !
)
åå! "
{
çç 	
IO
èè 
.
èè 
	WriteLine
èè 
(
èè 
$str
èè /
)
èè/ 0
;
èè0 1
}
êê 	
else
ëë 
{
íí 	
if
îî 
(
îî 
data
îî 
!=
îî 
$num
îî 
)
îî 
{
ïï 
IO
ññ 
.
ññ 
	WriteLine
ññ 
(
ññ 
$str
ññ #
+
ññ$ %
data
ññ& *
+
ññ+ ,
$str
ññ- 2
+
ññ3 4
(
ññ5 6
$num
ññ6 9
/
ññ: ;
data
ññ< @
)
ññ@ A
+
ññB C
$str
ññD H
)
ññH I
;
ññI J
}
óó 
else
òò 
{
ôô 
IO
öö 
.
öö 
	WriteLine
öö 
(
öö 
$str
öö D
)
ööD E
;
ööE F
}
õõ 
}
úú 	
}
ùù 
private
†† 
void
†† 
GoodB2G2
†† 
(
†† 
HttpRequest
†† %
req
††& )
,
††) *
HttpResponse
††+ 7
resp
††8 <
)
††< =
{
°° 
int
¢¢ 
data
¢¢ 
;
¢¢ 
if
££ 

(
££  
PRIVATE_CONST_FIVE
££ 
==
££  
$num
££  !
)
££! "
{
§§ 	
data
•• 
=
•• 
int
•• 
.
•• 
MinValue
•• 
;
••  
{
ßß 
string
®® 
stringNumber
®® #
=
®®$ %
req
®®& )
.
®®) *
Params
®®* 0
.
®®0 1
Get
®®1 4
(
®®4 5
$str
®®5 ;
)
®®; <
;
®®< =
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ 
.
´´ 
Parse
´´ $
(
´´$ %
stringNumber
´´% 1
.
´´1 2
Trim
´´2 6
(
´´6 7
)
´´7 8
)
´´8 9
;
´´9 :
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ & 
exceptNumberFormat
≠≠' 9
)
≠≠9 :
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ 
.
ØØ 
Log
ØØ !
(
ØØ! "
NLog
ØØ" &
.
ØØ& '
LogLevel
ØØ' /
.
ØØ/ 0
Warn
ØØ0 4
,
ØØ4 5 
exceptNumberFormat
ØØ6 H
,
ØØH I
$strØØJ Ü
)ØØÜ á
;ØØá à
}
∞∞ 
}
±± 
}
≤≤ 	
else
≥≥ 
{
¥¥ 	
data
∑∑ 
=
∑∑ 
$num
∑∑ 
;
∑∑ 
}
∏∏ 	
if
ππ 

(
ππ  
PRIVATE_CONST_FIVE
ππ 
==
ππ  
$num
ππ  !
)
ππ! "
{
∫∫ 	
if
ºº 
(
ºº 
data
ºº 
!=
ºº 
$num
ºº 
)
ºº 
{
ΩΩ 
IO
ææ 
.
ææ 
	WriteLine
ææ 
(
ææ 
$str
ææ #
+
ææ$ %
data
ææ& *
+
ææ+ ,
$str
ææ- 2
+
ææ3 4
(
ææ5 6
$num
ææ6 9
/
ææ: ;
data
ææ< @
)
ææ@ A
+
ææB C
$str
ææD H
)
ææH I
;
ææI J
}
øø 
else
¿¿ 
{
¡¡ 
IO
¬¬ 
.
¬¬ 
	WriteLine
¬¬ 
(
¬¬ 
$str
¬¬ D
)
¬¬D E
;
¬¬E F
}
√√ 
}
ƒƒ 	
}
≈≈ 
public
«« 

override
«« 
void
«« 
Good
«« 
(
«« 
HttpRequest
«« )
req
««* -
,
««- .
HttpResponse
««/ ;
resp
««< @
)
««@ A
{
»» 
GoodG2B1
…… 
(
…… 
req
…… 
,
…… 
resp
…… 
)
…… 
;
…… 
GoodG2B2
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodB2G1
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G2
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 
}œœ 
}–– ∏S
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_07.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_07 9
:: ;
AbstractTestCaseWeb< O
{ 
private   
int   
privateFive   
=   
$num   
;    
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
int$$ 
data$$ 
;$$ 
if%% 

(%% 
privateFive%% 
==%% 
$num%% 
)%% 
{&& 	
data'' 
='' 
int'' 
.'' 
MinValue'' 
;''  
{)) 
string** 
stringNumber** #
=**$ %
req**& )
.**) *
Params*** 0
.**0 1
Get**1 4
(**4 5
$str**5 ;
)**; <
;**< =
try++ 
{,, 
data-- 
=-- 
int-- 
.-- 
Parse-- $
(--$ %
stringNumber--% 1
.--1 2
Trim--2 6
(--6 7
)--7 8
)--8 9
;--9 :
}.. 
catch// 
(// 
FormatException// &
exceptNumberFormat//' 9
)//9 :
{00 
IO11 
.11 
Logger11 
.11 
Log11 !
(11! "
NLog11" &
.11& '
LogLevel11' /
.11/ 0
Warn110 4
,114 5
exceptNumberFormat116 H
,11H I
$str	11J Ü
)
11Ü á
;
11á à
}22 
}33 
}44 	
else55 
{66 	
data99 
=99 
$num99 
;99 
}:: 	
if;; 

(;; 
privateFive;; 
==;; 
$num;; 
);; 
{<< 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? $
+??% &
data??' +
+??, -
$str??. 3
+??4 5
(??6 7
$num??7 :
/??; <
data??= A
)??A B
+??C D
$str??E I
)??I J
;??J K
}@@ 	
}AA 
privateEE 
voidEE 
GoodG2B1EE 
(EE 
HttpRequestEE %
reqEE& )
,EE) *
HttpResponseEE+ 7
respEE8 <
)EE< =
{FF 
intGG 
dataGG 
;GG 
ifHH 

(HH 
privateFiveHH 
!=HH 
$numHH 
)HH 
{II 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
elseNN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
ifSS 

(SS 
privateFiveSS 
==SS 
$numSS 
)SS 
{TT 	
IOWW 
.WW 
	WriteLineWW 
(WW 
$strWW $
+WW% &
dataWW' +
+WW, -
$strWW. 3
+WW4 5
(WW6 7
$numWW7 :
/WW; <
dataWW= A
)WWA B
+WWC D
$strWWE I
)WWI J
;WWJ K
}XX 	
}YY 
private\\ 
void\\ 
GoodG2B2\\ 
(\\ 
HttpRequest\\ %
req\\& )
,\\) *
HttpResponse\\+ 7
resp\\8 <
)\\< =
{]] 
int^^ 
data^^ 
;^^ 
if__ 

(__ 
privateFive__ 
==__ 
$num__ 
)__ 
{`` 	
databb 
=bb 
$numbb 
;bb 
}cc 	
elsedd 
{ee 	
datahh 
=hh 
$numhh 
;hh 
}ii 	
ifjj 

(jj 
privateFivejj 
==jj 
$numjj 
)jj 
{kk 	
IOnn 
.nn 
	WriteLinenn 
(nn 
$strnn $
+nn% &
datann' +
+nn, -
$strnn. 3
+nn4 5
(nn6 7
$numnn7 :
/nn; <
datann= A
)nnA B
+nnC D
$strnnE I
)nnI J
;nnJ K
}oo 	
}pp 
privatess 
voidss 
GoodB2G1ss 
(ss 
HttpRequestss %
reqss& )
,ss) *
HttpResponsess+ 7
respss8 <
)ss< =
{tt 
intuu 
datauu 
;uu 
ifvv 

(vv 
privateFivevv 
==vv 
$numvv 
)vv 
{ww 	
dataxx 
=xx 
intxx 
.xx 
MinValuexx 
;xx  
{zz 
string{{ 
stringNumber{{ #
={{$ %
req{{& )
.{{) *
Params{{* 0
.{{0 1
Get{{1 4
({{4 5
$str{{5 ;
){{; <
;{{< =
try|| 
{}} 
data~~ 
=~~ 
int~~ 
.~~ 
Parse~~ $
(~~$ %
stringNumber~~% 1
.~~1 2
Trim~~2 6
(~~6 7
)~~7 8
)~~8 9
;~~9 :
} 
catch
ÄÄ 
(
ÄÄ 
FormatException
ÄÄ & 
exceptNumberFormat
ÄÄ' 9
)
ÄÄ9 :
{
ÅÅ 
IO
ÇÇ 
.
ÇÇ 
Logger
ÇÇ 
.
ÇÇ 
Log
ÇÇ !
(
ÇÇ! "
NLog
ÇÇ" &
.
ÇÇ& '
LogLevel
ÇÇ' /
.
ÇÇ/ 0
Warn
ÇÇ0 4
,
ÇÇ4 5 
exceptNumberFormat
ÇÇ6 H
,
ÇÇH I
$strÇÇJ Ü
)ÇÇÜ á
;ÇÇá à
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
else
ÜÜ 
{
áá 	
data
ää 
=
ää 
$num
ää 
;
ää 
}
ãã 	
if
åå 

(
åå 
privateFive
åå 
!=
åå 
$num
åå 
)
åå 
{
çç 	
IO
èè 
.
èè 
	WriteLine
èè 
(
èè 
$str
èè /
)
èè/ 0
;
èè0 1
}
êê 	
else
ëë 
{
íí 	
if
îî 
(
îî 
data
îî 
!=
îî 
$num
îî 
)
îî 
{
ïï 
IO
ññ 
.
ññ 
	WriteLine
ññ 
(
ññ 
$str
ññ #
+
ññ$ %
data
ññ& *
+
ññ+ ,
$str
ññ- 2
+
ññ3 4
(
ññ5 6
$num
ññ6 9
/
ññ: ;
data
ññ< @
)
ññ@ A
+
ññB C
$str
ññD H
)
ññH I
;
ññI J
}
óó 
else
òò 
{
ôô 
IO
öö 
.
öö 
	WriteLine
öö 
(
öö 
$str
öö D
)
ööD E
;
ööE F
}
õõ 
}
úú 	
}
ùù 
private
†† 
void
†† 
GoodB2G2
†† 
(
†† 
HttpRequest
†† %
req
††& )
,
††) *
HttpResponse
††+ 7
resp
††8 <
)
††< =
{
°° 
int
¢¢ 
data
¢¢ 
;
¢¢ 
if
££ 

(
££ 
privateFive
££ 
==
££ 
$num
££ 
)
££ 
{
§§ 	
data
•• 
=
•• 
int
•• 
.
•• 
MinValue
•• 
;
••  
{
ßß 
string
®® 
stringNumber
®® #
=
®®$ %
req
®®& )
.
®®) *
Params
®®* 0
.
®®0 1
Get
®®1 4
(
®®4 5
$str
®®5 ;
)
®®; <
;
®®< =
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ 
.
´´ 
Parse
´´ $
(
´´$ %
stringNumber
´´% 1
.
´´1 2
Trim
´´2 6
(
´´6 7
)
´´7 8
)
´´8 9
;
´´9 :
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ & 
exceptNumberFormat
≠≠' 9
)
≠≠9 :
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ 
.
ØØ 
Log
ØØ !
(
ØØ! "
NLog
ØØ" &
.
ØØ& '
LogLevel
ØØ' /
.
ØØ/ 0
Warn
ØØ0 4
,
ØØ4 5 
exceptNumberFormat
ØØ6 H
,
ØØH I
$strØØJ Ü
)ØØÜ á
;ØØá à
}
∞∞ 
}
±± 
}
≤≤ 	
else
≥≥ 
{
¥¥ 	
data
∑∑ 
=
∑∑ 
$num
∑∑ 
;
∑∑ 
}
∏∏ 	
if
ππ 

(
ππ 
privateFive
ππ 
==
ππ 
$num
ππ 
)
ππ 
{
∫∫ 	
if
ºº 
(
ºº 
data
ºº 
!=
ºº 
$num
ºº 
)
ºº 
{
ΩΩ 
IO
ææ 
.
ææ 
	WriteLine
ææ 
(
ææ 
$str
ææ #
+
ææ$ %
data
ææ& *
+
ææ+ ,
$str
ææ- 2
+
ææ3 4
(
ææ5 6
$num
ææ6 9
/
ææ: ;
data
ææ< @
)
ææ@ A
+
ææB C
$str
ææD H
)
ææH I
;
ææI J
}
øø 
else
¿¿ 
{
¡¡ 
IO
¬¬ 
.
¬¬ 
	WriteLine
¬¬ 
(
¬¬ 
$str
¬¬ D
)
¬¬D E
;
¬¬E F
}
√√ 
}
ƒƒ 	
}
≈≈ 
public
«« 

override
«« 
void
«« 
Good
«« 
(
«« 
HttpRequest
«« )
req
««* -
,
««- .
HttpResponse
««/ ;
resp
««< @
)
««@ A
{
»» 
GoodG2B1
…… 
(
…… 
req
…… 
,
…… 
resp
…… 
)
…… 
;
…… 
GoodG2B2
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodB2G1
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G2
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 
}œœ 
}–– …V
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_08.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_08 9
:: ;
AbstractTestCaseWeb< O
{ 
private   
static   
bool   
PrivateReturnsTrue   *
(  * +
)  + ,
{!! 
return"" 
true"" 
;"" 
}## 
private%% 
static%% 
bool%% 
PrivateReturnsFalse%% +
(%%+ ,
)%%, -
{&& 
return'' 
false'' 
;'' 
}(( 
public** 

override** 
void** 
Bad** 
(** 
HttpRequest** (
req**) ,
,**, -
HttpResponse**. :
resp**; ?
)**? @
{++ 
int,, 
data,, 
;,, 
if-- 

(-- 
PrivateReturnsTrue-- 
(-- 
)--  
)--  !
{.. 	
data// 
=// 
int// 
.// 
MinValue// 
;//  
{11 
string22 
stringNumber22 #
=22$ %
req22& )
.22) *
Params22* 0
.220 1
Get221 4
(224 5
$str225 ;
)22; <
;22< =
try33 
{44 
data55 
=55 
int55 
.55 
Parse55 $
(55$ %
stringNumber55% 1
.551 2
Trim552 6
(556 7
)557 8
)558 9
;559 :
}66 
catch77 
(77 
FormatException77 &
exceptNumberFormat77' 9
)779 :
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptNumberFormat996 H
,99H I
$str	99J Ü
)
99Ü á
;
99á à
}:: 
};; 
}<< 	
else== 
{>> 	
dataAA 
=AA 
$numAA 
;AA 
}BB 	
ifCC 

(CC 
PrivateReturnsTrueCC 
(CC 
)CC  
)CC  !
{DD 	
IOGG 
.GG 
	WriteLineGG 
(GG 
$strGG $
+GG% &
dataGG' +
+GG, -
$strGG. 3
+GG4 5
(GG6 7
$numGG7 :
/GG; <
dataGG= A
)GGA B
+GGC D
$strGGE I
)GGI J
;GGJ K
}HH 	
}II 
privateMM 
voidMM 
GoodG2B1MM 
(MM 
HttpRequestMM %
reqMM& )
,MM) *
HttpResponseMM+ 7
respMM8 <
)MM< =
{NN 
intOO 
dataOO 
;OO 
ifPP 

(PP 
PrivateReturnsFalsePP 
(PP  
)PP  !
)PP! "
{QQ 	
dataTT 
=TT 
$numTT 
;TT 
}UU 	
elseVV 
{WW 	
dataYY 
=YY 
$numYY 
;YY 
}ZZ 	
if[[ 

([[ 
PrivateReturnsTrue[[ 
([[ 
)[[  
)[[  !
{\\ 	
IO__ 
.__ 
	WriteLine__ 
(__ 
$str__ $
+__% &
data__' +
+__, -
$str__. 3
+__4 5
(__6 7
$num__7 :
/__; <
data__= A
)__A B
+__C D
$str__E I
)__I J
;__J K
}`` 	
}aa 
privatedd 
voiddd 
GoodG2B2dd 
(dd 
HttpRequestdd %
reqdd& )
,dd) *
HttpResponsedd+ 7
respdd8 <
)dd< =
{ee 
intff 
dataff 
;ff 
ifgg 

(gg 
PrivateReturnsTruegg 
(gg 
)gg  
)gg  !
{hh 	
datajj 
=jj 
$numjj 
;jj 
}kk 	
elsell 
{mm 	
datapp 
=pp 
$numpp 
;pp 
}qq 	
ifrr 

(rr 
PrivateReturnsTruerr 
(rr 
)rr  
)rr  !
{ss 	
IOvv 
.vv 
	WriteLinevv 
(vv 
$strvv $
+vv% &
datavv' +
+vv, -
$strvv. 3
+vv4 5
(vv6 7
$numvv7 :
/vv; <
datavv= A
)vvA B
+vvC D
$strvvE I
)vvI J
;vvJ K
}ww 	
}xx 
private{{ 
void{{ 
GoodB2G1{{ 
({{ 
HttpRequest{{ %
req{{& )
,{{) *
HttpResponse{{+ 7
resp{{8 <
){{< =
{|| 
int}} 
data}} 
;}} 
if~~ 

(~~ 
PrivateReturnsTrue~~ 
(~~ 
)~~  
)~~  !
{ 	
data
ÄÄ 
=
ÄÄ 
int
ÄÄ 
.
ÄÄ 
MinValue
ÄÄ 
;
ÄÄ  
{
ÇÇ 
string
ÉÉ 
stringNumber
ÉÉ #
=
ÉÉ$ %
req
ÉÉ& )
.
ÉÉ) *
Params
ÉÉ* 0
.
ÉÉ0 1
Get
ÉÉ1 4
(
ÉÉ4 5
$str
ÉÉ5 ;
)
ÉÉ; <
;
ÉÉ< =
try
ÑÑ 
{
ÖÖ 
data
ÜÜ 
=
ÜÜ 
int
ÜÜ 
.
ÜÜ 
Parse
ÜÜ $
(
ÜÜ$ %
stringNumber
ÜÜ% 1
.
ÜÜ1 2
Trim
ÜÜ2 6
(
ÜÜ6 7
)
ÜÜ7 8
)
ÜÜ8 9
;
ÜÜ9 :
}
áá 
catch
àà 
(
àà 
FormatException
àà & 
exceptNumberFormat
àà' 9
)
àà9 :
{
ââ 
IO
ää 
.
ää 
Logger
ää 
.
ää 
Log
ää !
(
ää! "
NLog
ää" &
.
ää& '
LogLevel
ää' /
.
ää/ 0
Warn
ää0 4
,
ää4 5 
exceptNumberFormat
ää6 H
,
ääH I
$strääJ Ü
)ääÜ á
;ääá à
}
ãã 
}
åå 
}
çç 	
else
éé 
{
èè 	
data
íí 
=
íí 
$num
íí 
;
íí 
}
ìì 	
if
îî 

(
îî !
PrivateReturnsFalse
îî 
(
îî  
)
îî  !
)
îî! "
{
ïï 	
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó /
)
óó/ 0
;
óó0 1
}
òò 	
else
ôô 
{
öö 	
if
úú 
(
úú 
data
úú 
!=
úú 
$num
úú 
)
úú 
{
ùù 
IO
ûû 
.
ûû 
	WriteLine
ûû 
(
ûû 
$str
ûû #
+
ûû$ %
data
ûû& *
+
ûû+ ,
$str
ûû- 2
+
ûû3 4
(
ûû5 6
$num
ûû6 9
/
ûû: ;
data
ûû< @
)
ûû@ A
+
ûûB C
$str
ûûD H
)
ûûH I
;
ûûI J
}
üü 
else
†† 
{
°° 
IO
¢¢ 
.
¢¢ 
	WriteLine
¢¢ 
(
¢¢ 
$str
¢¢ D
)
¢¢D E
;
¢¢E F
}
££ 
}
§§ 	
}
•• 
private
®® 
void
®® 
GoodB2G2
®® 
(
®® 
HttpRequest
®® %
req
®®& )
,
®®) *
HttpResponse
®®+ 7
resp
®®8 <
)
®®< =
{
©© 
int
™™ 
data
™™ 
;
™™ 
if
´´ 

(
´´  
PrivateReturnsTrue
´´ 
(
´´ 
)
´´  
)
´´  !
{
¨¨ 	
data
≠≠ 
=
≠≠ 
int
≠≠ 
.
≠≠ 
MinValue
≠≠ 
;
≠≠  
{
ØØ 
string
∞∞ 
stringNumber
∞∞ #
=
∞∞$ %
req
∞∞& )
.
∞∞) *
Params
∞∞* 0
.
∞∞0 1
Get
∞∞1 4
(
∞∞4 5
$str
∞∞5 ;
)
∞∞; <
;
∞∞< =
try
±± 
{
≤≤ 
data
≥≥ 
=
≥≥ 
int
≥≥ 
.
≥≥ 
Parse
≥≥ $
(
≥≥$ %
stringNumber
≥≥% 1
.
≥≥1 2
Trim
≥≥2 6
(
≥≥6 7
)
≥≥7 8
)
≥≥8 9
;
≥≥9 :
}
¥¥ 
catch
µµ 
(
µµ 
FormatException
µµ & 
exceptNumberFormat
µµ' 9
)
µµ9 :
{
∂∂ 
IO
∑∑ 
.
∑∑ 
Logger
∑∑ 
.
∑∑ 
Log
∑∑ !
(
∑∑! "
NLog
∑∑" &
.
∑∑& '
LogLevel
∑∑' /
.
∑∑/ 0
Warn
∑∑0 4
,
∑∑4 5 
exceptNumberFormat
∑∑6 H
,
∑∑H I
$str∑∑J Ü
)∑∑Ü á
;∑∑á à
}
∏∏ 
}
ππ 
}
∫∫ 	
else
ªª 
{
ºº 	
data
øø 
=
øø 
$num
øø 
;
øø 
}
¿¿ 	
if
¡¡ 

(
¡¡  
PrivateReturnsTrue
¡¡ 
(
¡¡ 
)
¡¡  
)
¡¡  !
{
¬¬ 	
if
ƒƒ 
(
ƒƒ 
data
ƒƒ 
!=
ƒƒ 
$num
ƒƒ 
)
ƒƒ 
{
≈≈ 
IO
∆∆ 
.
∆∆ 
	WriteLine
∆∆ 
(
∆∆ 
$str
∆∆ #
+
∆∆$ %
data
∆∆& *
+
∆∆+ ,
$str
∆∆- 2
+
∆∆3 4
(
∆∆5 6
$num
∆∆6 9
/
∆∆: ;
data
∆∆< @
)
∆∆@ A
+
∆∆B C
$str
∆∆D H
)
∆∆H I
;
∆∆I J
}
«« 
else
»» 
{
…… 
IO
   
.
   
	WriteLine
   
(
   
$str
   D
)
  D E
;
  E F
}
ÀÀ 
}
ÃÃ 	
}
ÕÕ 
public
œœ 

override
œœ 
void
œœ 
Good
œœ 
(
œœ 
HttpRequest
œœ )
req
œœ* -
,
œœ- .
HttpResponse
œœ/ ;
resp
œœ< @
)
œœ@ A
{
–– 
GoodG2B1
—— 
(
—— 
req
—— 
,
—— 
resp
—— 
)
—— 
;
—— 
GoodG2B2
““ 
(
““ 
req
““ 
,
““ 
resp
““ 
)
““ 
;
““ 
GoodB2G1
”” 
(
”” 
req
”” 
,
”” 
resp
”” 
)
”” 
;
”” 
GoodB2G2
‘‘ 
(
‘‘ 
req
‘‘ 
,
‘‘ 
resp
‘‘ 
)
‘‘ 
;
‘‘ 
}
’’ 
}◊◊ 
}ÿÿ ’R
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_09.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_09 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_TRUE   #
)  # $
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
IO66 
.66  
STATIC_READONLY_TRUE66 #
)66# $
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: $
+::% &
data::' +
+::, -
$str::. 3
+::4 5
(::6 7
$num::7 :
/::; <
data::= A
)::A B
+::C D
$str::E I
)::I J
;::J K
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
IOCC 
.CC !
STATIC_READONLY_FALSECC $
)CC$ %
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
IONN 
.NN  
STATIC_READONLY_TRUENN #
)NN# $
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR $
+RR% &
dataRR' +
+RR, -
$strRR. 3
+RR4 5
(RR6 7
$numRR7 :
/RR; <
dataRR= A
)RRA B
+RRC D
$strRRE I
)RRI J
;RRJ K
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
IOZZ 
.ZZ  
STATIC_READONLY_TRUEZZ #
)ZZ# $
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
IOee 
.ee  
STATIC_READONLY_TRUEee #
)ee# $
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii $
+ii% &
dataii' +
+ii, -
$strii. 3
+ii4 5
(ii6 7
$numii7 :
/ii; <
dataii= A
)iiA B
+iiC D
$striiE I
)iiI J
;iiJ K
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
IOqq 
.qq  
STATIC_READONLY_TRUEqq #
)qq# $
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
IO
áá 
.
áá #
STATIC_READONLY_FALSE
áá $
)
áá$ %
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
/
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
IO
ûû 
.
ûû "
STATIC_READONLY_TRUE
ûû #
)
ûû# $
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ "
STATIC_READONLY_TRUE
¥¥ #
)
¥¥# $
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
/
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ ÒQ
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_10.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_10 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.   

staticTrue   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
IO66 
.66 

staticTrue66 
)66 
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: $
+::% &
data::' +
+::, -
$str::. 3
+::4 5
(::6 7
$num::7 :
/::; <
data::= A
)::A B
+::C D
$str::E I
)::I J
;::J K
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
IOCC 
.CC 
staticFalseCC 
)CC 
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
IONN 
.NN 

staticTrueNN 
)NN 
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR $
+RR% &
dataRR' +
+RR, -
$strRR. 3
+RR4 5
(RR6 7
$numRR7 :
/RR; <
dataRR= A
)RRA B
+RRC D
$strRRE I
)RRI J
;RRJ K
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
IOZZ 
.ZZ 

staticTrueZZ 
)ZZ 
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
IOee 
.ee 

staticTrueee 
)ee 
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii $
+ii% &
dataii' +
+ii, -
$strii. 3
+ii4 5
(ii6 7
$numii7 :
/ii; <
dataii= A
)iiA B
+iiC D
$striiE I
)iiI J
;iiJ K
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
IOqq 
.qq 

staticTrueqq 
)qq 
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
IO
áá 
.
áá 
staticFalse
áá 
)
áá 
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
/
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
IO
ûû 
.
ûû 

staticTrue
ûû 
)
ûû 
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ 

staticTrue
¥¥ 
)
¥¥ 
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
/
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ ÔT
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_11.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_11 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.   
StaticReturnsTrue    
(    !
)  ! "
)  " #
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66
 
IO66 
.66 
StaticReturnsTrue66 
(66  
)66  !
)66! "
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: $
+::% &
data::' +
+::, -
$str::. 3
+::4 5
(::6 7
$num::7 :
/::; <
data::= A
)::A B
+::C D
$str::E I
)::I J
;::J K
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
IOCC 
.CC 
StaticReturnsFalseCC !
(CC! "
)CC" #
)CC# $
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
IONN 
.NN 
StaticReturnsTrueNN  
(NN  !
)NN! "
)NN" #
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR $
+RR% &
dataRR' +
+RR, -
$strRR. 3
+RR4 5
(RR6 7
$numRR7 :
/RR; <
dataRR= A
)RRA B
+RRC D
$strRRE I
)RRI J
;RRJ K
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
IOZZ 
.ZZ 
StaticReturnsTrueZZ  
(ZZ  !
)ZZ! "
)ZZ" #
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
IOee 
.ee 
StaticReturnsTrueee  
(ee  !
)ee! "
)ee" #
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii $
+ii% &
dataii' +
+ii, -
$strii. 3
+ii4 5
(ii6 7
$numii7 :
/ii; <
dataii= A
)iiA B
+iiC D
$striiE I
)iiI J
;iiJ K
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
IOqq 
.qq 
StaticReturnsTrueqq  
(qq  !
)qq! "
)qq" #
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
IO
áá 
.
áá  
StaticReturnsFalse
áá !
(
áá! "
)
áá" #
)
áá# $
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
/
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
IO
ûû 
.
ûû 
StaticReturnsTrue
ûû  
(
ûû  !
)
ûû! "
)
ûû" #
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ 
StaticReturnsTrue
¥¥  
(
¥¥  !
)
¥¥! "
)
¥¥" #
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
/
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ ±J
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_12.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_12 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(  
 
IO   
.   $
StaticReturnsTrueOrFalse   &
(  & '
)  ' (
)  ( )
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data33 
=33 
$num33 
;33 
}44 	
if55 

(55
 
IO55 
.55 $
StaticReturnsTrueOrFalse55 &
(55& '
)55' (
)55( )
{66 	
IO99 
.99 
	WriteLine99 
(99 
$str99 $
+99% &
data99' +
+99, -
$str99. 3
+994 5
(996 7
$num997 :
/99; <
data99= A
)99A B
+99C D
$str99E I
)99I J
;99J K
}:: 	
else;; 
{<< 	
if>> 
(>> 
data>> 
!=>> 
$num>> 
)>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ #
+@@$ %
data@@& *
+@@+ ,
$str@@- 2
+@@3 4
(@@5 6
$num@@6 9
/@@: ;
data@@< @
)@@@ A
+@@B C
$str@@D H
)@@H I
;@@I J
}AA 
elseBB 
{CC 
IODD 
.DD 
	WriteLineDD 
(DD 
$strDD D
)DDD E
;DDE F
}EE 
}FF 	
}GG 
privateLL 
voidLL 
GoodG2BLL 
(LL 
HttpRequestLL $
reqLL% (
,LL( )
HttpResponseLL* 6
respLL7 ;
)LL; <
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO
 
IOOO 
.OO $
StaticReturnsTrueOrFalseOO &
(OO& '
)OO' (
)OO( )
{PP 	
dataRR 
=RR 
$numRR 
;RR 
}SS 	
elseTT 
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY
 
IOYY 
.YY $
StaticReturnsTrueOrFalseYY &
(YY& '
)YY' (
)YY( )
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] $
+]]% &
data]]' +
+]], -
$str]]. 3
+]]4 5
(]]6 7
$num]]7 :
/]]; <
data]]= A
)]]A B
+]]C D
$str]]E I
)]]I J
;]]J K
}^^ 	
else__ 
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc $
+cc% &
datacc' +
+cc, -
$strcc. 3
+cc4 5
(cc6 7
$numcc7 :
/cc; <
datacc= A
)ccA B
+ccC D
$strccE I
)ccI J
;ccJ K
}dd 	
}ee 
privateii 
voidii 
GoodB2Gii 
(ii 
HttpRequestii $
reqii% (
,ii( )
HttpResponseii* 6
respii7 ;
)ii; <
{jj 
intkk 
datakk 
;kk 
ifll 

(ll
 
IOll 
.ll $
StaticReturnsTrueOrFalsell &
(ll& '
)ll' (
)ll( )
{mm 	
datann 
=nn 
intnn 
.nn 
MinValuenn 
;nn  
{pp 
stringqq 
stringNumberqq #
=qq$ %
reqqq& )
.qq) *
Paramsqq* 0
.qq0 1
Getqq1 4
(qq4 5
$strqq5 ;
)qq; <
;qq< =
tryrr 
{ss 
datatt 
=tt 
inttt 
.tt 
Parsett $
(tt$ %
stringNumbertt% 1
.tt1 2
Trimtt2 6
(tt6 7
)tt7 8
)tt8 9
;tt9 :
}uu 
catchvv 
(vv 
FormatExceptionvv &
exceptNumberFormatvv' 9
)vv9 :
{ww 
IOxx 
.xx 
Loggerxx 
.xx 
Logxx !
(xx! "
NLogxx" &
.xx& '
LogLevelxx' /
.xx/ 0
Warnxx0 4
,xx4 5
exceptNumberFormatxx6 H
,xxH I
$str	xxJ Ü
)
xxÜ á
;
xxá à
}yy 
}zz 
}{{ 	
else|| 
{}} 	
data~~ 
=~~ 
int~~ 
.~~ 
MinValue~~ 
;~~  
{
ÄÄ 
string
ÅÅ 
stringNumber
ÅÅ #
=
ÅÅ$ %
req
ÅÅ& )
.
ÅÅ) *
Params
ÅÅ* 0
.
ÅÅ0 1
Get
ÅÅ1 4
(
ÅÅ4 5
$str
ÅÅ5 ;
)
ÅÅ; <
;
ÅÅ< =
try
ÇÇ 
{
ÉÉ 
data
ÑÑ 
=
ÑÑ 
int
ÑÑ 
.
ÑÑ 
Parse
ÑÑ $
(
ÑÑ$ %
stringNumber
ÑÑ% 1
.
ÑÑ1 2
Trim
ÑÑ2 6
(
ÑÑ6 7
)
ÑÑ7 8
)
ÑÑ8 9
;
ÑÑ9 :
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
FormatException
ÜÜ & 
exceptNumberFormat
ÜÜ' 9
)
ÜÜ9 :
{
áá 
IO
àà 
.
àà 
Logger
àà 
.
àà 
Log
àà !
(
àà! "
NLog
àà" &
.
àà& '
LogLevel
àà' /
.
àà/ 0
Warn
àà0 4
,
àà4 5 
exceptNumberFormat
àà6 H
,
ààH I
$strààJ Ü
)ààÜ á
;ààá à
}
ââ 
}
ää 
}
ãã 	
if
åå 

(
åå
 
IO
åå 
.
åå &
StaticReturnsTrueOrFalse
åå &
(
åå& '
)
åå' (
)
åå( )
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
/
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
else
òò 
{
ôô 	
if
õõ 
(
õõ 
data
õõ 
!=
õõ 
$num
õõ 
)
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù #
+
ùù$ %
data
ùù& *
+
ùù+ ,
$str
ùù- 2
+
ùù3 4
(
ùù5 6
$num
ùù6 9
/
ùù: ;
data
ùù< @
)
ùù@ A
+
ùùB C
$str
ùùD H
)
ùùH I
;
ùùI J
}
ûû 
else
üü 
{
†† 
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° D
)
°°D E
;
°°E F
}
¢¢ 
}
££ 	
}
§§ 
public
¶¶ 

override
¶¶ 
void
¶¶ 
Good
¶¶ 
(
¶¶ 
HttpRequest
¶¶ )
req
¶¶* -
,
¶¶- .
HttpResponse
¶¶/ ;
resp
¶¶< @
)
¶¶@ A
{
®® 
GoodG2B
©© 
(
©© 
req
©© 
,
©© 
resp
©© 
)
©© 
;
©© 
GoodB2G
™™ 
(
™™ 
req
™™ 
,
™™ 
resp
™™ 
)
™™ 
;
™™ 
}
´´ 
}≠≠ 
}ÆÆ ≥U
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_13.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_13 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_FIVE   #
==  # %
$num  % &
)  & '
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
IO66 
.66  
STATIC_READONLY_FIVE66 #
==66# %
$num66% &
)66& '
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: $
+::% &
data::' +
+::, -
$str::. 3
+::4 5
(::6 7
$num::7 :
/::; <
data::= A
)::A B
+::C D
$str::E I
)::I J
;::J K
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
IOCC 
.CC  
STATIC_READONLY_FIVECC #
!=CC# %
$numCC% &
)CC& '
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
IONN 
.NN  
STATIC_READONLY_FIVENN #
==NN# %
$numNN% &
)NN& '
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR $
+RR% &
dataRR' +
+RR, -
$strRR. 3
+RR4 5
(RR6 7
$numRR7 :
/RR; <
dataRR= A
)RRA B
+RRC D
$strRRE I
)RRI J
;RRJ K
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
IOZZ 
.ZZ  
STATIC_READONLY_FIVEZZ #
==ZZ# %
$numZZ% &
)ZZ& '
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
IOee 
.ee  
STATIC_READONLY_FIVEee #
==ee# %
$numee% &
)ee& '
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii $
+ii% &
dataii' +
+ii, -
$strii. 3
+ii4 5
(ii6 7
$numii7 :
/ii; <
dataii= A
)iiA B
+iiC D
$striiE I
)iiI J
;iiJ K
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
IOqq 
.qq  
STATIC_READONLY_FIVEqq #
==qq# %
$numqq% &
)qq& '
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
IO
áá 
.
áá "
STATIC_READONLY_FIVE
áá #
!=
áá# %
$num
áá% &
)
áá& '
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
/
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
IO
ûû 
.
ûû "
STATIC_READONLY_FIVE
ûû #
==
ûû# %
$num
ûû% &
)
ûû& '
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ "
STATIC_READONLY_FIVE
¥¥ #
==
¥¥# %
$num
¥¥% &
)
¥¥& '
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
/
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ œT
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_14.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_14 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.   

staticFive   
==   
$num   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
IO66 
.66 

staticFive66 
==66 
$num66 
)66 
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: $
+::% &
data::' +
+::, -
$str::. 3
+::4 5
(::6 7
$num::7 :
/::; <
data::= A
)::A B
+::C D
$str::E I
)::I J
;::J K
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
IOCC 
.CC 

staticFiveCC 
!=CC 
$numCC 
)CC 
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
IONN 
.NN 

staticFiveNN 
==NN 
$numNN 
)NN 
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR $
+RR% &
dataRR' +
+RR, -
$strRR. 3
+RR4 5
(RR6 7
$numRR7 :
/RR; <
dataRR= A
)RRA B
+RRC D
$strRRE I
)RRI J
;RRJ K
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
IOZZ 
.ZZ 

staticFiveZZ 
==ZZ 
$numZZ 
)ZZ 
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
IOee 
.ee 

staticFiveee 
==ee 
$numee 
)ee 
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii $
+ii% &
dataii' +
+ii, -
$strii. 3
+ii4 5
(ii6 7
$numii7 :
/ii; <
dataii= A
)iiA B
+iiC D
$striiE I
)iiI J
;iiJ K
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
IOqq 
.qq 

staticFiveqq 
==qq 
$numqq 
)qq 
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
IO
áá 
.
áá 

staticFive
áá 
!=
áá 
$num
áá 
)
áá 
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
/
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
IO
ûû 
.
ûû 

staticFive
ûû 
==
ûû 
$num
ûû 
)
ûû 
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ 

staticFive
¥¥ 
==
¥¥ 
$num
¥¥ 
)
¥¥ 
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
/
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ ø^
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_15.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_15 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
switch   
(   
$num   
)   
{!! 	
case"" 
$num"" 
:"" 
data## 
=## 
int## 
.## 
MinValue## 
;##  
{%% 
string&& 
stringNumber&& #
=&&$ %
req&&& )
.&&) *
Params&&* 0
.&&0 1
Get&&1 4
(&&4 5
$str&&5 ;
)&&; <
;&&< =
try'' 
{(( 
data)) 
=)) 
int)) 
.)) 
Parse)) $
())$ %
stringNumber))% 1
.))1 2
Trim))2 6
())6 7
)))7 8
)))8 9
;))9 :
}** 
catch++ 
(++ 
FormatException++ &
exceptNumberFormat++' 9
)++9 :
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptNumberFormat--6 H
,--H I
$str	--J Ü
)
--Ü á
;
--á à
}.. 
}// 
break00 
;00 
default11 
:11 
data44 
=44 
$num44 
;44 
break55 
;55 
}66 	
switch77 
(77 
$num77 
)77 
{88 	
case99 
$num99 
:99 
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< $
+<<% &
data<<' +
+<<, -
$str<<. 3
+<<4 5
(<<6 7
$num<<7 :
/<<; <
data<<= A
)<<A B
+<<C D
$str<<E I
)<<I J
;<<J K
break== 
;== 
default>> 
:>> 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ /
)@@/ 0
;@@0 1
breakAA 
;AA 
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
HttpRequestGG %
reqGG& )
,GG) *
HttpResponseGG+ 7
respGG8 <
)GG< =
{HH 
intII 
dataII 
;II 
switchJJ 
(JJ 
$numJJ 
)JJ 
{KK 	
caseLL 
$numLL 
:LL 
dataOO 
=OO 
$numOO 
;OO 
breakPP 
;PP 
defaultQQ 
:QQ 
dataSS 
=SS 
$numSS 
;SS 
breakTT 
;TT 
}UU 	
switchVV 
(VV 
$numVV 
)VV 
{WW 	
caseXX 
$numXX 
:XX 
IO[[ 
.[[ 
	WriteLine[[ 
([[ 
$str[[ $
+[[% &
data[[' +
+[[, -
$str[[. 3
+[[4 5
([[6 7
$num[[7 :
/[[; <
data[[= A
)[[A B
+[[C D
$str[[E I
)[[I J
;[[J K
break\\ 
;\\ 
default]] 
:]] 
IO__ 
.__ 
	WriteLine__ 
(__ 
$str__ /
)__/ 0
;__0 1
break`` 
;`` 
}aa 	
}bb 
privateee 
voidee 
GoodG2B2ee 
(ee 
HttpRequestee %
reqee& )
,ee) *
HttpResponseee+ 7
respee8 <
)ee< =
{ff 
intgg 
datagg 
;gg 
switchhh 
(hh 
$numhh 
)hh 
{ii 	
casejj 
$numjj 
:jj 
datall 
=ll 
$numll 
;ll 
breakmm 
;mm 
defaultnn 
:nn 
dataqq 
=qq 
$numqq 
;qq 
breakrr 
;rr 
}ss 	
switchtt 
(tt 
$numtt 
)tt 
{uu 	
casevv 
$numvv 
:vv 
IOyy 
.yy 
	WriteLineyy 
(yy 
$stryy $
+yy% &
datayy' +
+yy, -
$stryy. 3
+yy4 5
(yy6 7
$numyy7 :
/yy; <
datayy= A
)yyA B
+yyC D
$stryyE I
)yyI J
;yyJ K
breakzz 
;zz 
default{{ 
:{{ 
IO}} 
.}} 
	WriteLine}} 
(}} 
$str}} /
)}}/ 0
;}}0 1
break~~ 
;~~ 
} 	
}
ÄÄ 
private
ÉÉ 
void
ÉÉ 
GoodB2G1
ÉÉ 
(
ÉÉ 
HttpRequest
ÉÉ %
req
ÉÉ& )
,
ÉÉ) *
HttpResponse
ÉÉ+ 7
resp
ÉÉ8 <
)
ÉÉ< =
{
ÑÑ 
int
ÖÖ 
data
ÖÖ 
;
ÖÖ 
switch
ÜÜ 
(
ÜÜ 
$num
ÜÜ 
)
ÜÜ 
{
áá 	
case
àà 
$num
àà 
:
àà 
data
ââ 
=
ââ 
int
ââ 
.
ââ 
MinValue
ââ 
;
ââ  
{
ãã 
string
åå 
stringNumber
åå #
=
åå$ %
req
åå& )
.
åå) *
Params
åå* 0
.
åå0 1
Get
åå1 4
(
åå4 5
$str
åå5 ;
)
åå; <
;
åå< =
try
çç 
{
éé 
data
èè 
=
èè 
int
èè 
.
èè 
Parse
èè $
(
èè$ %
stringNumber
èè% 1
.
èè1 2
Trim
èè2 6
(
èè6 7
)
èè7 8
)
èè8 9
;
èè9 :
}
êê 
catch
ëë 
(
ëë 
FormatException
ëë & 
exceptNumberFormat
ëë' 9
)
ëë9 :
{
íí 
IO
ìì 
.
ìì 
Logger
ìì 
.
ìì 
Log
ìì !
(
ìì! "
NLog
ìì" &
.
ìì& '
LogLevel
ìì' /
.
ìì/ 0
Warn
ìì0 4
,
ìì4 5 
exceptNumberFormat
ìì6 H
,
ììH I
$strììJ Ü
)ììÜ á
;ììá à
}
îî 
}
ïï 
break
ññ 
;
ññ 
default
óó 
:
óó 
data
öö 
=
öö 
$num
öö 
;
öö 
break
õõ 
;
õõ 
}
úú 	
switch
ùù 
(
ùù 
$num
ùù 
)
ùù 
{
ûû 	
case
üü 
$num
üü 
:
üü 
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
break
¢¢ 
;
¢¢ 
default
££ 
:
££ 
if
•• 
(
•• 
data
•• 
!=
•• 
$num
•• 
)
•• 
{
¶¶ 
IO
ßß 
.
ßß 
	WriteLine
ßß 
(
ßß 
$str
ßß #
+
ßß$ %
data
ßß& *
+
ßß+ ,
$str
ßß- 2
+
ßß3 4
(
ßß5 6
$num
ßß6 9
/
ßß: ;
data
ßß< @
)
ßß@ A
+
ßßB C
$str
ßßD H
)
ßßH I
;
ßßI J
}
®® 
else
©© 
{
™™ 
IO
´´ 
.
´´ 
	WriteLine
´´ 
(
´´ 
$str
´´ D
)
´´D E
;
´´E F
}
¨¨ 
break
≠≠ 
;
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
HttpRequest
≤≤ %
req
≤≤& )
,
≤≤) *
HttpResponse
≤≤+ 7
resp
≤≤8 <
)
≤≤< =
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
switch
µµ 
(
µµ 
$num
µµ 
)
µµ 
{
∂∂ 	
case
∑∑ 
$num
∑∑ 
:
∑∑ 
data
∏∏ 
=
∏∏ 
int
∏∏ 
.
∏∏ 
MinValue
∏∏ 
;
∏∏  
{
∫∫ 
string
ªª 
stringNumber
ªª #
=
ªª$ %
req
ªª& )
.
ªª) *
Params
ªª* 0
.
ªª0 1
Get
ªª1 4
(
ªª4 5
$str
ªª5 ;
)
ªª; <
;
ªª< =
try
ºº 
{
ΩΩ 
data
ææ 
=
ææ 
int
ææ 
.
ææ 
Parse
ææ $
(
ææ$ %
stringNumber
ææ% 1
.
ææ1 2
Trim
ææ2 6
(
ææ6 7
)
ææ7 8
)
ææ8 9
;
ææ9 :
}
øø 
catch
¿¿ 
(
¿¿ 
FormatException
¿¿ & 
exceptNumberFormat
¿¿' 9
)
¿¿9 :
{
¡¡ 
IO
¬¬ 
.
¬¬ 
Logger
¬¬ 
.
¬¬ 
Log
¬¬ !
(
¬¬! "
NLog
¬¬" &
.
¬¬& '
LogLevel
¬¬' /
.
¬¬/ 0
Warn
¬¬0 4
,
¬¬4 5 
exceptNumberFormat
¬¬6 H
,
¬¬H I
$str¬¬J Ü
)¬¬Ü á
;¬¬á à
}
√√ 
}
ƒƒ 
break
≈≈ 
;
≈≈ 
default
∆∆ 
:
∆∆ 
data
…… 
=
…… 
$num
…… 
;
…… 
break
   
;
   
}
ÀÀ 	
switch
ÃÃ 
(
ÃÃ 
$num
ÃÃ 
)
ÃÃ 
{
ÕÕ 	
case
ŒŒ 
$num
ŒŒ 
:
ŒŒ 
if
–– 
(
–– 
data
–– 
!=
–– 
$num
–– 
)
–– 
{
—— 
IO
““ 
.
““ 
	WriteLine
““ 
(
““ 
$str
““ #
+
““$ %
data
““& *
+
““+ ,
$str
““- 2
+
““3 4
(
““5 6
$num
““6 9
/
““: ;
data
““< @
)
““@ A
+
““B C
$str
““D H
)
““H I
;
““I J
}
”” 
else
‘‘ 
{
’’ 
IO
÷÷ 
.
÷÷ 
	WriteLine
÷÷ 
(
÷÷ 
$str
÷÷ D
)
÷÷D E
;
÷÷E F
}
◊◊ 
break
ÿÿ 
;
ÿÿ 
default
ŸŸ 
:
ŸŸ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ /
)
€€/ 0
;
€€0 1
break
‹‹ 
;
‹‹ 
}
›› 	
}
ﬁﬁ 
public
‡‡ 

override
‡‡ 
void
‡‡ 
Good
‡‡ 
(
‡‡ 
HttpRequest
‡‡ )
req
‡‡* -
,
‡‡- .
HttpResponse
‡‡/ ;
resp
‡‡< @
)
‡‡@ A
{
·· 
GoodG2B1
‚‚ 
(
‚‚ 
req
‚‚ 
,
‚‚ 
resp
‚‚ 
)
‚‚ 
;
‚‚ 
GoodG2B2
„„ 
(
„„ 
req
„„ 
,
„„ 
resp
„„ 
)
„„ 
;
„„ 
GoodB2G1
‰‰ 
(
‰‰ 
req
‰‰ 
,
‰‰ 
resp
‰‰ 
)
‰‰ 
;
‰‰ 
GoodB2G2
ÂÂ 
(
ÂÂ 
req
ÂÂ 
,
ÂÂ 
resp
ÂÂ 
)
ÂÂ 
;
ÂÂ 
}
ÊÊ 
}ËË 
}ÈÈ •.
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_16.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_16 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
while   
(   
true   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
break// 
;// 
}00 	
while11 
(11 
true11 
)11 
{22 	
IO55 
.55 
	WriteLine55 
(55 
$str55 $
+55% &
data55' +
+55, -
$str55. 3
+554 5
(556 7
$num557 :
/55; <
data55= A
)55A B
+55C D
$str55E I
)55I J
;55J K
break66 
;66 
}77 	
}88 
private<< 
void<< 
GoodG2B<< 
(<< 
HttpRequest<< $
req<<% (
,<<( )
HttpResponse<<* 6
resp<<7 ;
)<<; <
{== 
int>> 
data>> 
;>> 
while?? 
(?? 
true?? 
)?? 
{@@ 	
dataBB 
=BB 
$numBB 
;BB 
breakCC 
;CC 
}DD 	
whileEE 
(EE 
trueEE 
)EE 
{FF 	
IOII 
.II 
	WriteLineII 
(II 
$strII $
+II% &
dataII' +
+II, -
$strII. 3
+II4 5
(II6 7
$numII7 :
/II; <
dataII= A
)IIA B
+IIC D
$strIIE I
)III J
;IIJ K
breakJJ 
;JJ 
}KK 	
}LL 
privateOO 
voidOO 
GoodB2GOO 
(OO 
HttpRequestOO $
reqOO% (
,OO( )
HttpResponseOO* 6
respOO7 ;
)OO; <
{PP 
intQQ 
dataQQ 
;QQ 
whileRR 
(RR 
trueRR 
)RR 
{SS 	
dataTT 
=TT 
intTT 
.TT 
MinValueTT 
;TT  
{VV 
stringWW 
stringNumberWW #
=WW$ %
reqWW& )
.WW) *
ParamsWW* 0
.WW0 1
GetWW1 4
(WW4 5
$strWW5 ;
)WW; <
;WW< =
tryXX 
{YY 
dataZZ 
=ZZ 
intZZ 
.ZZ 
ParseZZ $
(ZZ$ %
stringNumberZZ% 1
.ZZ1 2
TrimZZ2 6
(ZZ6 7
)ZZ7 8
)ZZ8 9
;ZZ9 :
}[[ 
catch\\ 
(\\ 
FormatException\\ &
exceptNumberFormat\\' 9
)\\9 :
{]] 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ !
(^^! "
NLog^^" &
.^^& '
LogLevel^^' /
.^^/ 0
Warn^^0 4
,^^4 5
exceptNumberFormat^^6 H
,^^H I
$str	^^J Ü
)
^^Ü á
;
^^á à
}__ 
}`` 
breakaa 
;aa 
}bb 	
whilecc 
(cc 
truecc 
)cc 
{dd 	
ifff 
(ff 
dataff 
!=ff 
$numff 
)ff 
{gg 
IOhh 
.hh 
	WriteLinehh 
(hh 
$strhh #
+hh$ %
datahh& *
+hh+ ,
$strhh- 2
+hh3 4
(hh5 6
$numhh6 9
/hh: ;
datahh< @
)hh@ A
+hhB C
$strhhD H
)hhH I
;hhI J
}ii 
elsejj 
{kk 
IOll 
.ll 
	WriteLinell 
(ll 
$strll D
)llD E
;llE F
}mm 
breaknn 
;nn 
}oo 	
}pp 
publicrr 

overriderr 
voidrr 
Goodrr 
(rr 
HttpRequestrr )
reqrr* -
,rr- .
HttpResponserr/ ;
resprr< @
)rr@ A
{ss 
GoodG2Btt 
(tt 
reqtt 
,tt 
resptt 
)tt 
;tt 
GoodB2Guu 
(uu 
requu 
,uu 
respuu 
)uu 
;uu 
}vv 
}xx 
}yy Ñ.
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_17.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_17 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$ 
{&& 	
string'' 
stringNumber'' 
=''  !
req''" %
.''% &
Params''& ,
.'', -
Get''- 0
(''0 1
$str''1 7
)''7 8
;''8 9
try(( 
{)) 
data** 
=** 
int** 
.** 
Parse**  
(**  !
stringNumber**! -
.**- .
Trim**. 2
(**2 3
)**3 4
)**4 5
;**5 6
}++ 
catch,, 
(,, 
FormatException,, "
exceptNumberFormat,,# 5
),,5 6
{-- 
IO.. 
... 
Logger.. 
... 
Log.. 
(.. 
NLog.. "
..." #
LogLevel..# +
...+ ,
Warn.., 0
,..0 1
exceptNumberFormat..2 D
,..D E
$str	..F Ç
)
..Ç É
;
..É Ñ
}// 
}00 	
for11 
(11 
int11 
j11 
=11 
$num11 
;11 
j11 
<11 
$num11 
;11 
j11  
++11  "
)11" #
{22 	
IO55 
.55 
	WriteLine55 
(55 
$str55 $
+55% &
data55' +
+55, -
$str55. 3
+554 5
(556 7
$num557 :
/55; <
data55= A
)55A B
+55C D
$str55E I
)55I J
;55J K
}66 	
}77 
private;; 
void;; 
GoodG2B;; 
(;; 
HttpRequest;; $
req;;% (
,;;( )
HttpResponse;;* 6
resp;;7 ;
);;; <
{<< 
int== 
data== 
;== 
data?? 
=?? 
$num?? 
;?? 
for@@ 
(@@ 
int@@ 
j@@ 
=@@ 
$num@@ 
;@@ 
j@@ 
<@@ 
$num@@ 
;@@ 
j@@  
++@@  "
)@@" #
{AA 	
IODD 
.DD 
	WriteLineDD 
(DD 
$strDD $
+DD% &
dataDD' +
+DD, -
$strDD. 3
+DD4 5
(DD6 7
$numDD7 :
/DD; <
dataDD= A
)DDA B
+DDC D
$strDDE I
)DDI J
;DDJ K
}EE 	
}FF 
privateII 
voidII 
GoodB2GII 
(II 
HttpRequestII $
reqII% (
,II( )
HttpResponseII* 6
respII7 ;
)II; <
{JJ 
intKK 
dataKK 
;KK 
dataLL 
=LL 
intLL 
.LL 
MinValueLL 
;LL 
{NN 	
stringOO 
stringNumberOO 
=OO  !
reqOO" %
.OO% &
ParamsOO& ,
.OO, -
GetOO- 0
(OO0 1
$strOO1 7
)OO7 8
;OO8 9
tryPP 
{QQ 
dataRR 
=RR 
intRR 
.RR 
ParseRR  
(RR  !
stringNumberRR! -
.RR- .
TrimRR. 2
(RR2 3
)RR3 4
)RR4 5
;RR5 6
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$str	VVF Ç
)
VVÇ É
;
VVÉ Ñ
}WW 
}XX 	
forYY 
(YY 
intYY 
kYY 
=YY 
$numYY 
;YY 
kYY 
<YY 
$numYY 
;YY 
kYY  
++YY  "
)YY" #
{ZZ 	
if\\ 
(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ #
+^^$ %
data^^& *
+^^+ ,
$str^^- 2
+^^3 4
(^^5 6
$num^^6 9
/^^: ;
data^^< @
)^^@ A
+^^B C
$str^^D H
)^^H I
;^^I J
}__ 
else`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb D
)bbD E
;bbE F
}cc 
}dd 	
}ee 
publicgg 

overridegg 
voidgg 
Goodgg 
(gg 
HttpRequestgg )
reqgg* -
,gg- .
HttpResponsegg/ ;
respgg< @
)gg@ A
{hh 
GoodG2Bii 
(ii 
reqii 
,ii 
respii 
)ii 
;ii 
GoodB2Gjj 
(jj 
reqjj 
,jj 
respjj 
)jj 
;jj 
}kk 
}mm 
}nn œR
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_21.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_21 9
:: ;
AbstractTestCaseWeb< O
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public   

override   
void   
Bad   
(   
HttpRequest   (
req  ) ,
,  , -
HttpResponse  . :
resp  ; ?
)  ? @
{!! 
int"" 
data"" 
;"" 
data## 
=## 
int## 
.## 
MinValue## 
;## 
{%% 	
string&& 
stringNumber&& 
=&&  !
req&&" %
.&&% &
Params&&& ,
.&&, -
Get&&- 0
(&&0 1
$str&&1 7
)&&7 8
;&&8 9
try'' 
{(( 
data)) 
=)) 
int)) 
.)) 
Parse))  
())  !
stringNumber))! -
.))- .
Trim)). 2
())2 3
)))3 4
)))4 5
;))5 6
}** 
catch++ 
(++ 
FormatException++ "
exceptNumberFormat++# 5
)++5 6
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- 
(-- 
NLog-- "
.--" #
LogLevel--# +
.--+ ,
Warn--, 0
,--0 1
exceptNumberFormat--2 D
,--D E
$str	--F Ç
)
--Ç É
;
--É Ñ
}.. 
}// 	

badPrivate00 
=00 
true00 
;00 
BadSink11 
(11 
data11 
,11 
req11 
,11 
resp11  
)11  !
;11! "
}22 
private44 
void44 
BadSink44 
(44 
int44 
data44 !
,44" #
HttpRequest44$ /
req440 3
,443 4
HttpResponse445 A
resp44B F
)44F G
{55 
if66 

(66 

badPrivate66 
)66 
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: $
+::% &
data::' +
+::, -
$str::. 3
+::4 5
(::6 7
$num::7 :
/::; <
data::= A
)::A B
+::C D
$str::E I
)::I J
;::J K
};; 	
}<< 
private?? 
bool?? 
goodB2G1Private??  
=??! "
false??# (
;??( )
private@@ 
bool@@ 
goodB2G2Private@@  
=@@! "
false@@# (
;@@( )
privateAA 
boolAA 
goodG2BPrivateAA 
=AA  !
falseAA" '
;AA' (
publicCC 

overrideCC 
voidCC 
GoodCC 
(CC 
HttpRequestCC )
reqCC* -
,CC- .
HttpResponseCC/ ;
respCC< @
)CC@ A
{DD 
GoodB2G1EE 
(EE 
reqEE 
,EE 
respEE 
)EE 
;EE 
GoodB2G2FF 
(FF 
reqFF 
,FF 
respFF 
)FF 
;FF 
GoodG2BGG 
(GG 
reqGG 
,GG 
respGG 
)GG 
;GG 
}HH 
privateKK 
voidKK 
GoodB2G1KK 
(KK 
HttpRequestKK %
reqKK& )
,KK) *
HttpResponseKK+ 7
respKK8 <
)KK< =
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
stringQQ 
stringNumberQQ 
=QQ  !
reqQQ" %
.QQ% &
ParamsQQ& ,
.QQ, -
GetQQ- 0
(QQ0 1
$strQQ1 7
)QQ7 8
;QQ8 9
tryRR 
{SS 
dataTT 
=TT 
intTT 
.TT 
ParseTT  
(TT  !
stringNumberTT! -
.TT- .
TrimTT. 2
(TT2 3
)TT3 4
)TT4 5
;TT5 6
}UU 
catchVV 
(VV 
FormatExceptionVV "
exceptNumberFormatVV# 5
)VV5 6
{WW 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$str	XXF Ç
)
XXÇ É
;
XXÉ Ñ
}YY 
}ZZ 	
goodB2G1Private[[ 
=[[ 
false[[ 
;[[  
GoodB2G1Sink\\ 
(\\ 
data\\ 
,\\ 
req\\ 
,\\  
resp\\! %
)\\% &
;\\& '
}]] 
private__ 
void__ 
GoodB2G1Sink__ 
(__ 
int__ !
data__" &
,__' (
HttpRequest__) 4
req__5 8
,__8 9
HttpResponse__: F
resp__G K
)__K L
{`` 
ifaa 

(aa 
goodB2G1Privateaa 
)aa 
{bb 	
IOdd 
.dd 
	WriteLinedd 
(dd 
$strdd /
)dd/ 0
;dd0 1
}ee 	
elseff 
{gg 	
ifii 
(ii 
dataii 
!=ii 
$numii 
)ii 
{jj 
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk #
+kk$ %
datakk& *
+kk+ ,
$strkk- 2
+kk3 4
(kk5 6
$numkk6 9
/kk: ;
datakk< @
)kk@ A
+kkB C
$strkkD H
)kkH I
;kkI J
}ll 
elsemm 
{nn 
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo D
)ooD E
;ooE F
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G2uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
intww 
dataww 
;ww 
dataxx 
=xx 
intxx 
.xx 
MinValuexx 
;xx 
{zz 	
string{{ 
stringNumber{{ 
={{  !
req{{" %
.{{% &
Params{{& ,
.{{, -
Get{{- 0
({{0 1
$str{{1 7
){{7 8
;{{8 9
try|| 
{}} 
data~~ 
=~~ 
int~~ 
.~~ 
Parse~~  
(~~  !
stringNumber~~! -
.~~- .
Trim~~. 2
(~~2 3
)~~3 4
)~~4 5
;~~5 6
} 
catch
ÄÄ 
(
ÄÄ 
FormatException
ÄÄ " 
exceptNumberFormat
ÄÄ# 5
)
ÄÄ5 6
{
ÅÅ 
IO
ÇÇ 
.
ÇÇ 
Logger
ÇÇ 
.
ÇÇ 
Log
ÇÇ 
(
ÇÇ 
NLog
ÇÇ "
.
ÇÇ" #
LogLevel
ÇÇ# +
.
ÇÇ+ ,
Warn
ÇÇ, 0
,
ÇÇ0 1 
exceptNumberFormat
ÇÇ2 D
,
ÇÇD E
$strÇÇF Ç
)ÇÇÇ É
;ÇÇÉ Ñ
}
ÉÉ 
}
ÑÑ 	
goodB2G2Private
ÖÖ 
=
ÖÖ 
true
ÖÖ 
;
ÖÖ 
GoodB2G2Sink
ÜÜ 
(
ÜÜ 
data
ÜÜ 
,
ÜÜ 
req
ÜÜ 
,
ÜÜ  
resp
ÜÜ! %
)
ÜÜ% &
;
ÜÜ& '
}
áá 
private
ââ 
void
ââ 
GoodB2G2Sink
ââ 
(
ââ 
int
ââ !
data
ââ" &
,
ââ' (
HttpRequest
ââ) 4
req
ââ5 8
,
ââ8 9
HttpResponse
ââ: F
resp
ââG K
)
ââK L
{
ää 
if
ãã 

(
ãã 
goodB2G2Private
ãã 
)
ãã 
{
åå 	
if
éé 
(
éé 
data
éé 
!=
éé 
$num
éé 
)
éé 
{
èè 
IO
êê 
.
êê 
	WriteLine
êê 
(
êê 
$str
êê #
+
êê$ %
data
êê& *
+
êê+ ,
$str
êê- 2
+
êê3 4
(
êê5 6
$num
êê6 9
/
êê: ;
data
êê< @
)
êê@ A
+
êêB C
$str
êêD H
)
êêH I
;
êêI J
}
ëë 
else
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî D
)
îîD E
;
îîE F
}
ïï 
}
ññ 	
}
óó 
private
öö 
void
öö 
GoodG2B
öö 
(
öö 
HttpRequest
öö $
req
öö% (
,
öö( )
HttpResponse
öö* 6
resp
öö7 ;
)
öö; <
{
õõ 
int
úú 
data
úú 
;
úú 
data
ûû 
=
ûû 
$num
ûû 
;
ûû 
goodG2BPrivate
üü 
=
üü 
true
üü 
;
üü 
GoodG2BSink
†† 
(
†† 
data
†† 
,
†† 
req
†† 
,
†† 
resp
††  $
)
††$ %
;
††% &
}
°° 
private
££ 
void
££ 
GoodG2BSink
££ 
(
££ 
int
££  
data
££! %
,
££& '
HttpRequest
££( 3
req
££4 7
,
££7 8
HttpResponse
££9 E
resp
££F J
)
££J K
{
§§ 
if
•• 

(
•• 
goodG2BPrivate
•• 
)
•• 
{
¶¶ 	
IO
©© 
.
©© 
	WriteLine
©© 
(
©© 
$str
©© $
+
©©% &
data
©©' +
+
©©, -
$str
©©. 3
+
©©4 5
(
©©6 7
$num
©©7 :
/
©©; <
data
©©= A
)
©©A B
+
©©C D
$str
©©E I
)
©©I J
;
©©J K
}
™™ 	
}
´´ 
}≠≠ 
}ÆÆ Ä9
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_22a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_22a :
:; <
AbstractTestCaseWeb= P
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{   
int!! 
data!! 
=!! 
$num!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;"" 
{$$ 	
string%% 
stringNumber%% 
=%%  !
req%%" %
.%%% &
Params%%& ,
.%%, -
Get%%- 0
(%%0 1
$str%%1 7
)%%7 8
;%%8 9
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse((  
(((  !
stringNumber((! -
.((- .
Trim((. 2
(((2 3
)((3 4
)((4 5
;((5 6
})) 
catch** 
(** 
FormatException** "
exceptNumberFormat**# 5
)**5 6
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
exceptNumberFormat,,2 D
,,,D E
$str	,,F Ç
)
,,Ç É
;
,,É Ñ
}-- 
}.. 	
badPublicStatic// 
=// 
true// 
;// @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_22b00 <
.00< =
BadSink00= D
(00D E
data00E I
,00J K
req00L O
,00O P
resp00Q U
)00U V
;00V W
}11 
public44 

static44 
bool44  
goodB2G1PublicStatic44 +
=44, -
false44. 3
;443 4
public55 

static55 
bool55  
goodB2G2PublicStatic55 +
=55, -
false55. 3
;553 4
public66 

static66 
bool66 
goodG2BPublicStatic66 *
=66+ ,
false66- 2
;662 3
public88 

override88 
void88 
Good88 
(88 
HttpRequest88 )
req88* -
,88- .
HttpResponse88/ ;
resp88< @
)88@ A
{99 
GoodB2G1:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
GoodB2G2;; 
(;; 
req;; 
,;; 
resp;; 
);; 
;;; 
GoodG2B<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
}== 
private@@ 
void@@ 
GoodB2G1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
=BB 
$numBB 
;BB 
dataCC 
=CC 
intCC 
.CC 
MinValueCC 
;CC 
{EE 	
stringFF 
stringNumberFF 
=FF  !
reqFF" %
.FF% &
ParamsFF& ,
.FF, -
GetFF- 0
(FF0 1
$strFF1 7
)FF7 8
;FF8 9
tryGG 
{HH 
dataII 
=II 
intII 
.II 
ParseII  
(II  !
stringNumberII! -
.II- .
TrimII. 2
(II2 3
)II3 4
)II4 5
;II5 6
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$str	MMF Ç
)
MMÇ É
;
MMÉ Ñ
}NN 
}OO 	 
goodB2G1PublicStaticPP 
=PP 
falsePP $
;PP$ %@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_22bQQ <
.QQ< =
GoodB2G1SinkQQ= I
(QQI J
dataQQJ N
,QQO P
reqQQQ T
,QQT U
respQQV Z
)QQZ [
;QQ[ \
}RR 
privateUU 
voidUU 
GoodB2G2UU 
(UU 
HttpRequestUU %
reqUU& )
,UU) *
HttpResponseUU+ 7
respUU8 <
)UU< =
{VV 
intWW 
dataWW 
=WW 
$numWW 
;WW 
dataXX 
=XX 
intXX 
.XX 
MinValueXX 
;XX 
{ZZ 	
string[[ 
stringNumber[[ 
=[[  !
req[[" %
.[[% &
Params[[& ,
.[[, -
Get[[- 0
([[0 1
$str[[1 7
)[[7 8
;[[8 9
try\\ 
{]] 
data^^ 
=^^ 
int^^ 
.^^ 
Parse^^  
(^^  !
stringNumber^^! -
.^^- .
Trim^^. 2
(^^2 3
)^^3 4
)^^4 5
;^^5 6
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb "
.bb" #
LogLevelbb# +
.bb+ ,
Warnbb, 0
,bb0 1
exceptNumberFormatbb2 D
,bbD E
$str	bbF Ç
)
bbÇ É
;
bbÉ Ñ
}cc 
}dd 	 
goodB2G2PublicStaticee 
=ee 
trueee #
;ee# $@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_22bff <
.ff< =
GoodB2G2Sinkff= I
(ffI J
dataffJ N
,ffO P
reqffQ T
,ffT U
respffV Z
)ffZ [
;ff[ \
}gg 
privatejj 
voidjj 
GoodG2Bjj 
(jj 
HttpRequestjj $
reqjj% (
,jj( )
HttpResponsejj* 6
respjj7 ;
)jj; <
{kk 
intll 
datall 
=ll 
$numll 
;ll 
datann 
=nn 
$numnn 
;nn 
goodG2BPublicStaticoo 
=oo 
trueoo "
;oo" #@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_22bpp <
.pp< =
GoodG2BSinkpp= H
(ppH I
datappI M
,ppN O
reqppP S
,ppS T
respppU Y
)ppY Z
;ppZ [
}qq 
}ss 
}tt ì$
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_22b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_22b :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
if 

( @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_22a @
.@ A
badPublicStaticA P
)P Q
{ 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" $
+""% &
data""' +
+"", -
$str"". 3
+""4 5
(""6 7
$num""7 :
/""; <
data""= A
)""A B
+""C D
$str""E I
)""I J
;""J K
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
}** 
public// 

static// 
void// 
GoodB2G1Sink// #
(//# $
int//$ '
data//( ,
,//- .
HttpRequest/// :
req//; >
,//> ?
HttpResponse//@ L
resp//M Q
)//Q R
{00 
if11 

(11 @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_22a11 @
.11@ A 
goodB2G1PublicStatic11A U
)11U V
{22 	
data55 
=55 
$num55 
;55 
}66 	
else77 
{88 	
if:: 
(:: 
data:: 
!=:: 
$num:: 
):: 
{;; 
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< #
+<<$ %
data<<& *
+<<+ ,
$str<<- 2
+<<3 4
(<<5 6
$num<<6 9
/<<: ;
data<<< @
)<<@ A
+<<B C
$str<<D H
)<<H I
;<<I J
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ D
)@@D E
;@@E F
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2G2SinkFF #
(FF# $
intFF$ '
dataFF( ,
,FF- .
HttpRequestFF/ :
reqFF; >
,FF> ?
HttpResponseFF@ L
respFFM Q
)FFQ R
{GG 
ifHH 

(HH @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_22aHH @
.HH@ A 
goodB2G2PublicStaticHHA U
)HHU V
{II 	
ifKK 
(KK 
dataKK 
!=KK 
$numKK 
)KK 
{LL 
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM #
+MM$ %
dataMM& *
+MM+ ,
$strMM- 2
+MM3 4
(MM5 6
$numMM6 9
/MM: ;
dataMM< @
)MM@ A
+MMB C
$strMMD H
)MMH I
;MMI J
}NN 
elseOO 
{PP 
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ D
)QQD E
;QQE F
}RR 
}SS 	
elseTT 
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
}ZZ 
public]] 

static]] 
void]] 
GoodG2BSink]] "
(]]" #
int]]# &
data]]' +
,]], -
HttpRequest]]. 9
req]]: =
,]]= >
HttpResponse]]? K
resp]]L P
)]]P Q
{^^ 
if__ 

(__ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_22a__ @
.__@ A
goodG2BPublicStatic__A T
)__T U
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc $
+cc% &
datacc' +
+cc, -
$strcc. 3
+cc4 5
(cc6 7
$numcc7 :
/cc; <
datacc= A
)ccA B
+ccC D
$strccE I
)ccI J
;ccJ K
}dd 	
elseee 
{ff 	
dataii 
=ii 
$numii 
;ii 
}jj 	
}kk 
}mm 
}nn ¿.
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_31.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_31 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
dataCopy 
; 
{   	
int!! 
data!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
dataCopy// 
=// 
data// 
;// 
}00 	
{11 	
int22 
data22 
=22 
dataCopy22 
;22  
IO55 
.55 
	WriteLine55 
(55 
$str55 $
+55% &
data55' +
+55, -
$str55. 3
+554 5
(556 7
$num557 :
/55; <
data55= A
)55A B
+55C D
$str55E I
)55I J
;55J K
}66 	
}77 
public:: 

override:: 
void:: 
Good:: 
(:: 
HttpRequest:: )
req::* -
,::- .
HttpResponse::/ ;
resp::< @
)::@ A
{;; 
GoodG2B<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
GoodB2G== 
(== 
req== 
,== 
resp== 
)== 
;== 
}>> 
privateAA 
voidAA 
GoodG2BAA 
(AA 
HttpRequestAA $
reqAA% (
,AA( )
HttpResponseAA* 6
respAA7 ;
)AA; <
{BB 
intCC 
dataCopyCC 
;CC 
{DD 	
intEE 
dataEE 
;EE 
dataGG 
=GG 
$numGG 
;GG 
dataCopyHH 
=HH 
dataHH 
;HH 
}II 	
{JJ 	
intKK 
dataKK 
=KK 
dataCopyKK 
;KK  
IONN 
.NN 
	WriteLineNN 
(NN 
$strNN $
+NN% &
dataNN' +
+NN, -
$strNN. 3
+NN4 5
(NN6 7
$numNN7 :
/NN; <
dataNN= A
)NNA B
+NNC D
$strNNE I
)NNI J
;NNJ K
}OO 	
}PP 
privateSS 
voidSS 
GoodB2GSS 
(SS 
HttpRequestSS $
reqSS% (
,SS( )
HttpResponseSS* 6
respSS7 ;
)SS; <
{TT 
intUU 
dataCopyUU 
;UU 
{VV 	
intWW 
dataWW 
;WW 
dataXX 
=XX 
intXX 
.XX 
MinValueXX 
;XX  
{ZZ 
string[[ 
stringNumber[[ #
=[[$ %
req[[& )
.[[) *
Params[[* 0
.[[0 1
Get[[1 4
([[4 5
$str[[5 ;
)[[; <
;[[< =
try\\ 
{]] 
data^^ 
=^^ 
int^^ 
.^^ 
Parse^^ $
(^^$ %
stringNumber^^% 1
.^^1 2
Trim^^2 6
(^^6 7
)^^7 8
)^^8 9
;^^9 :
}__ 
catch`` 
(`` 
FormatException`` &
exceptNumberFormat``' 9
)``9 :
{aa 
IObb 
.bb 
Loggerbb 
.bb 
Logbb !
(bb! "
NLogbb" &
.bb& '
LogLevelbb' /
.bb/ 0
Warnbb0 4
,bb4 5
exceptNumberFormatbb6 H
,bbH I
$str	bbJ Ü
)
bbÜ á
;
bbá à
}cc 
}dd 
dataCopyee 
=ee 
dataee 
;ee 
}ff 	
{gg 	
inthh 
datahh 
=hh 
dataCopyhh 
;hh  
ifjj 
(jj 
datajj 
!=jj 
$numjj 
)jj 
{kk 
IOll 
.ll 
	WriteLinell 
(ll 
$strll #
+ll$ %
datall& *
+ll+ ,
$strll- 2
+ll3 4
(ll5 6
$numll6 9
/ll: ;
datall< @
)ll@ A
+llB C
$strllD H
)llH I
;llI J
}mm 
elsenn 
{oo 
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp D
)ppD E
;ppE F
}qq 
}rr 	
}ss 
}uu 
}vv Û2
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_41.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_41 9
:: ;
AbstractTestCaseWeb< O
{ 
private 
static 
void 
BadSink 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
HttpRequest$$ (
req$$) ,
,$$, -
HttpResponse$$. :
resp$$; ?
)$$? @
{%% 
int&& 
data&& 
;&& 
data'' 
='' 
int'' 
.'' 
MinValue'' 
;'' 
{)) 	
string** 
stringNumber** 
=**  !
req**" %
.**% &
Params**& ,
.**, -
Get**- 0
(**0 1
$str**1 7
)**7 8
;**8 9
try++ 
{,, 
data-- 
=-- 
int-- 
.-- 
Parse--  
(--  !
stringNumber--! -
.--- .
Trim--. 2
(--2 3
)--3 4
)--4 5
;--5 6
}.. 
catch// 
(// 
FormatException// "
exceptNumberFormat//# 5
)//5 6
{00 
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 "
.11" #
LogLevel11# +
.11+ ,
Warn11, 0
,110 1
exceptNumberFormat112 D
,11D E
$str	11F Ç
)
11Ç É
;
11É Ñ
}22 
}33 	
BadSink44 
(44 
data44 
,44 
req44 
,44 
resp44  
)44! "
;44" #
}55 
public88 

override88 
void88 
Good88 
(88 
HttpRequest88 )
req88* -
,88- .
HttpResponse88/ ;
resp88< @
)88@ A
{99 
GoodG2B:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
GoodB2G;; 
(;; 
req;; 
,;; 
resp;; 
);; 
;;; 
}<< 
private>> 
static>> 
void>> 
GoodG2BSink>> #
(>># $
int>>$ '
data>>( ,
,>>- .
HttpRequest>>/ :
req>>; >
,>>> ?
HttpResponse>>@ L
resp>>M Q
)>>Q R
{?? 
IOBB 

.BB
 
	WriteLineBB 
(BB 
$strBB  
+BB! "
dataBB# '
+BB( )
$strBB* /
+BB0 1
(BB2 3
$numBB3 6
/BB7 8
dataBB9 =
)BB= >
+BB? @
$strBBA E
)BBE F
;BBF G
}CC 
privateFF 
staticFF 
voidFF 
GoodG2BFF 
(FF  
HttpRequestFF  +
reqFF, /
,FF/ 0
HttpResponseFF1 =
respFF> B
)FFB C
{GG 
intHH 
dataHH 
;HH 
dataJJ 
=JJ 
$numJJ 
;JJ 
GoodG2BSinkKK 
(KK 
dataKK 
,KK 
reqKK 
,KK 
respKK  $
)KK% &
;KK& '
}LL 
privateNN 
staticNN 
voidNN 
GoodB2GSinkNN #
(NN# $
intNN$ '
dataNN( ,
,NN- .
HttpRequestNN/ :
reqNN; >
,NN> ?
HttpResponseNN@ L
respNNM Q
)NNQ R
{OO 
ifQQ 

(QQ 
dataQQ 
!=QQ 
$numQQ 
)QQ 
{RR 	
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS 
+SS  !
dataSS" &
+SS' (
$strSS) .
+SS/ 0
(SS1 2
$numSS2 5
/SS6 7
dataSS8 <
)SS< =
+SS> ?
$strSS@ D
)SSD E
;SSE F
}TT 	
elseUU 
{VV 	
IOWW 
.WW 
	WriteLineWW 
(WW 
$strWW @
)WW@ A
;WWA B
}XX 	
}YY 
private\\ 
static\\ 
void\\ 
GoodB2G\\ 
(\\  
HttpRequest\\  +
req\\, /
,\\/ 0
HttpResponse\\1 =
resp\\> B
)\\B C
{]] 
int^^ 
data^^ 
;^^ 
data__ 
=__ 
int__ 
.__ 
MinValue__ 
;__ 
{aa 	
stringbb 
stringNumberbb 
=bb  !
reqbb" %
.bb% &
Paramsbb& ,
.bb, -
Getbb- 0
(bb0 1
$strbb1 7
)bb7 8
;bb8 9
trycc 
{dd 
dataee 
=ee 
intee 
.ee 
Parseee  
(ee  !
stringNumberee! -
.ee- .
Trimee. 2
(ee2 3
)ee3 4
)ee4 5
;ee5 6
}ff 
catchgg 
(gg 
FormatExceptiongg "
exceptNumberFormatgg# 5
)gg5 6
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptNumberFormatii2 D
,iiD E
$str	iiF Ç
)
iiÇ É
;
iiÉ Ñ
}jj 
}kk 	
GoodB2GSinkll 
(ll 
datall 
,ll 
reqll 
,ll 
respll  $
)ll% &
;ll& '
}mm 
}oo 
}pp ∏3
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_42.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_42 9
:: ;
AbstractTestCaseWeb< O
{ 
private 
static 
int 
	BadSource  
(  !
HttpRequest! ,
req- 0
,0 1
HttpResponse2 >
resp? C
)C D
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
string## 
stringNumber## 
=##  !
req##" %
.##% &
Params##& ,
.##, -
Get##- 0
(##0 1
$str##1 7
)##7 8
;##8 9
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&&  
(&&  !
stringNumber&&! -
.&&- .
Trim&&. 2
(&&2 3
)&&3 4
)&&4 5
;&&5 6
}'' 
catch(( 
((( 
FormatException(( "
exceptNumberFormat((# 5
)((5 6
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
exceptNumberFormat**2 D
,**D E
$str	**F Ç
)
**Ç É
;
**É Ñ
}++ 
},, 	
return-- 
data-- 
;-- 
}.. 
public00 

override00 
void00 
Bad00 
(00 
HttpRequest00 (
req00) ,
,00, -
HttpResponse00. :
resp00; ?
)00? @
{11 
int22 
data22 
=22 
	BadSource22 
(22 
req22  
,22  !
resp22" &
)22& '
;22' (
IO55 

.55
 
	WriteLine55 
(55 
$str55  
+55! "
data55# '
+55( )
$str55* /
+550 1
(552 3
$num553 6
/557 8
data559 =
)55= >
+55? @
$str55A E
)55E F
;55F G
}66 
private:: 
static:: 
int:: 
GoodG2BSource:: $
(::$ %
HttpRequest::% 0
req::1 4
,::4 5
HttpResponse::6 B
resp::C G
)::G H
{;; 
int<< 
data<< 
;<< 
data>> 
=>> 
$num>> 
;>> 
return?? 
data?? 
;?? 
}@@ 
privateBB 
staticBB 
voidBB 
GoodG2BBB 
(BB  
HttpRequestBB  +
reqBB, /
,BB/ 0
HttpResponseBB1 =
respBB> B
)BBB C
{CC 
intDD 
dataDD 
=DD 
GoodG2BSourceDD  
(DD  !
reqDD! $
,DD$ %
respDD& *
)DD* +
;DD+ ,
IOGG 

.GG
 
	WriteLineGG 
(GG 
$strGG  
+GG! "
dataGG# '
+GG( )
$strGG* /
+GG0 1
(GG2 3
$numGG3 6
/GG7 8
dataGG9 =
)GG= >
+GG? @
$strGGA E
)GGE F
;GGF G
}HH 
privateKK 
staticKK 
intKK 
GoodB2GSourceKK $
(KK$ %
HttpRequestKK% 0
reqKK1 4
,KK4 5
HttpResponseKK6 B
respKKC G
)KKG H
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
stringQQ 
stringNumberQQ 
=QQ  !
reqQQ" %
.QQ% &
ParamsQQ& ,
.QQ, -
GetQQ- 0
(QQ0 1
$strQQ1 7
)QQ7 8
;QQ8 9
tryRR 
{SS 
dataTT 
=TT 
intTT 
.TT 
ParseTT  
(TT  !
stringNumberTT! -
.TT- .
TrimTT. 2
(TT2 3
)TT3 4
)TT4 5
;TT5 6
}UU 
catchVV 
(VV 
FormatExceptionVV "
exceptNumberFormatVV# 5
)VV5 6
{WW 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$str	XXF Ç
)
XXÇ É
;
XXÉ Ñ
}YY 
}ZZ 	
return[[ 
data[[ 
;[[ 
}\\ 
private^^ 
static^^ 
void^^ 
GoodB2G^^ 
(^^  
HttpRequest^^  +
req^^, /
,^^/ 0
HttpResponse^^1 =
resp^^> B
)^^B C
{__ 
int`` 
data`` 
=`` 
GoodB2GSource``  
(``  !
req``! $
,``$ %
resp``& *
)``* +
;``+ ,
ifbb 

(bb 
databb 
!=bb 
$numbb 
)bb 
{cc 	
IOdd 
.dd 
	WriteLinedd 
(dd 
$strdd 
+dd  !
datadd" &
+dd' (
$strdd) .
+dd/ 0
(dd1 2
$numdd2 5
/dd6 7
datadd8 <
)dd< =
+dd> ?
$strdd@ D
)ddD E
;ddE F
}ee 	
elseff 
{gg 	
IOhh 
.hh 
	WriteLinehh 
(hh 
$strhh @
)hh@ A
;hhA B
}ii 	
}jj 
publicll 

overridell 
voidll 
Goodll 
(ll 
HttpRequestll )
reqll* -
,ll- .
HttpResponsell/ ;
respll< @
)ll@ A
{mm 
GoodG2Bnn 
(nn 
reqnn 
,nn 
respnn 
)nn 
;nn 
GoodB2Goo 
(oo 
reqoo 
,oo 
respoo 
)oo 
;oo 
}pp 
}rr 
}ss ›5
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_45.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_divide_45 9
:: ;
AbstractTestCaseWeb< O
{ 
private 
int 
dataBad 
; 
private 
int 
dataGoodG2B 
; 
private 
int 
dataGoodB2G 
; 
private!! 
void!! 
BadSink!! 
(!! 
HttpRequest!! $
req!!% (
,!!( )
HttpResponse!!* 6
resp!!7 ;
)!!; <
{"" 
int## 
data## 
=## 
dataBad## 
;## 
IO&& 

.&&
 
	WriteLine&& 
(&& 
$str&&  
+&&! "
data&&# '
+&&( )
$str&&* /
+&&0 1
(&&2 3
$num&&3 6
/&&7 8
data&&9 =
)&&= >
+&&? @
$str&&A E
)&&E F
;&&F G
}'' 
public)) 

override)) 
void)) 
Bad)) 
()) 
HttpRequest)) (
req))) ,
,)), -
HttpResponse)). :
resp)); ?
)))? @
{** 
int++ 
data++ 
;++ 
data,, 
=,, 
int,, 
.,, 
MinValue,, 
;,, 
{.. 	
string// 
stringNumber// 
=//  !
req//" %
.//% &
Params//& ,
.//, -
Get//- 0
(//0 1
$str//1 7
)//7 8
;//8 9
try00 
{11 
data22 
=22 
int22 
.22 
Parse22  
(22  !
stringNumber22! -
.22- .
Trim22. 2
(222 3
)223 4
)224 5
;225 6
}33 
catch44 
(44 
FormatException44 "
exceptNumberFormat44# 5
)445 6
{55 
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 "
.66" #
LogLevel66# +
.66+ ,
Warn66, 0
,660 1
exceptNumberFormat662 D
,66D E
$str	66F Ç
)
66Ç É
;
66É Ñ
}77 
}88 	
dataBad99 
=99 
data99 
;99 
BadSink:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
};; 
public>> 

override>> 
void>> 
Good>> 
(>> 
HttpRequest>> )
req>>* -
,>>- .
HttpResponse>>/ ;
resp>>< @
)>>@ A
{?? 
GoodG2B@@ 
(@@ 
req@@ 
,@@ 
resp@@ 
)@@ 
;@@ 
GoodB2GAA 
(AA 
reqAA 
,AA 
respAA 
)AA 
;AA 
}BB 
privateDD 
voidDD 
GoodG2BSinkDD 
(DD 
HttpRequestDD (
reqDD) ,
,DD, -
HttpResponseDD. :
respDD; ?
)DD? @
{EE 
intFF 
dataFF 
=FF 
dataGoodG2BFF 
;FF 
IOII 

.II
 
	WriteLineII 
(II 
$strII  
+II! "
dataII# '
+II( )
$strII* /
+II0 1
(II2 3
$numII3 6
/II7 8
dataII9 =
)II= >
+II? @
$strIIA E
)IIE F
;IIF G
}JJ 
privateMM 
voidMM 
GoodG2BMM 
(MM 
HttpRequestMM $
reqMM% (
,MM( )
HttpResponseMM* 6
respMM7 ;
)MM; <
{NN 
intOO 
dataOO 
;OO 
dataQQ 
=QQ 
$numQQ 
;QQ 
dataGoodG2BRR 
=RR 
dataRR 
;RR 
GoodG2BSinkSS 
(SS 
reqSS 
,SS 
respSS 
)SS 
;SS 
}TT 
privateVV 
voidVV 
GoodB2GSinkVV 
(VV 
HttpRequestVV (
reqVV) ,
,VV, -
HttpResponseVV. :
respVV; ?
)VV? @
{WW 
intXX 
dataXX 
=XX 
dataGoodB2GXX 
;XX 
ifZZ 

(ZZ 
dataZZ 
!=ZZ 
$numZZ 
)ZZ 
{[[ 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ 
+\\  !
data\\" &
+\\' (
$str\\) .
+\\/ 0
(\\1 2
$num\\2 5
/\\6 7
data\\8 <
)\\< =
+\\> ?
$str\\@ D
)\\D E
;\\E F
}]] 	
else^^ 
{__ 	
IO`` 
.`` 
	WriteLine`` 
(`` 
$str`` @
)``@ A
;``A B
}aa 	
}bb 
privateee 
voidee 
GoodB2Gee 
(ee 
HttpRequestee $
reqee% (
,ee( )
HttpResponseee* 6
respee7 ;
)ee; <
{ff 
intgg 
datagg 
;gg 
datahh 
=hh 
inthh 
.hh 
MinValuehh 
;hh 
{jj 	
stringkk 
stringNumberkk 
=kk  !
reqkk" %
.kk% &
Paramskk& ,
.kk, -
Getkk- 0
(kk0 1
$strkk1 7
)kk7 8
;kk8 9
tryll 
{mm 
datann 
=nn 
intnn 
.nn 
Parsenn  
(nn  !
stringNumbernn! -
.nn- .
Trimnn. 2
(nn2 3
)nn3 4
)nn4 5
;nn5 6
}oo 
catchpp 
(pp 
FormatExceptionpp "
exceptNumberFormatpp# 5
)pp5 6
{qq 
IOrr 
.rr 
Loggerrr 
.rr 
Logrr 
(rr 
NLogrr "
.rr" #
LogLevelrr# +
.rr+ ,
Warnrr, 0
,rr0 1
exceptNumberFormatrr2 D
,rrD E
$str	rrF Ç
)
rrÇ É
;
rrÉ Ñ
}ss 
}tt 	
dataGoodB2Guu 
=uu 
datauu 
;uu 
GoodB2GSinkvv 
(vv 
reqvv 
,vv 
respvv 
)vv 
;vv 
}ww 
}yy 
}zz Ç$
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_51a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_51a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_51b,, <
.,,< =
BadSink,,= D
(,,D E
data,,E I
,,,J K
req,,L O
,,,O P
resp,,Q U
),,V W
;,,W X
}-- 
public00 

override00 
void00 
Good00 
(00 
HttpRequest00 )
req00* -
,00- .
HttpResponse00/ ;
resp00< @
)00@ A
{11 
GoodG2B22 
(22 
req22 
,22 
resp22 
)22 
;22 
GoodB2G33 
(33 
req33 
,33 
resp33 
)33 
;33 
}44 
private77 
void77 
GoodG2B77 
(77 
HttpRequest77 $
req77% (
,77( )
HttpResponse77* 6
resp777 ;
)77; <
{88 
int99 
data99 
;99 
data;; 
=;; 
$num;; 
;;; @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_51b<< <
.<<< =
GoodG2BSink<<= H
(<<H I
data<<I M
,<<N O
req<<P S
,<<S T
resp<<U Y
)<<Z [
;<<[ \
}== 
private@@ 
void@@ 
GoodB2G@@ 
(@@ 
HttpRequest@@ $
req@@% (
,@@( )
HttpResponse@@* 6
resp@@7 ;
)@@; <
{AA 
intBB 
dataBB 
;BB 
dataCC 
=CC 
intCC 
.CC 
MinValueCC 
;CC 
{EE 	
stringFF 
stringNumberFF 
=FF  !
reqFF" %
.FF% &
ParamsFF& ,
.FF, -
GetFF- 0
(FF0 1
$strFF1 7
)FF7 8
;FF8 9
tryGG 
{HH 
dataII 
=II 
intII 
.II 
ParseII  
(II  !
stringNumberII! -
.II- .
TrimII. 2
(II2 3
)II3 4
)II4 5
;II5 6
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$str	MMF Ç
)
MMÇ É
;
MMÉ Ñ
}NN 
}OO 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_51bPP <
.PP< =
GoodB2GSinkPP= H
(PPH I
dataPPI M
,PPN O
reqPPP S
,PPS T
respPPU Y
)PPZ [
;PP[ \
}QQ 
}SS 
}TT –
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_51b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_51b :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Ç$
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_52a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_52a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_52b,, <
.,,< =
BadSink,,= D
(,,D E
data,,E I
,,,J K
req,,L O
,,,O P
resp,,Q U
),,U V
;,,V W
}-- 
public00 

override00 
void00 
Good00 
(00 
HttpRequest00 )
req00* -
,00- .
HttpResponse00/ ;
resp00< @
)00@ A
{11 
GoodG2B22 
(22 
req22 
,22 
resp22 
)22 
;22 
GoodB2G33 
(33 
req33 
,33 
resp33 
)33 
;33 
}44 
private77 
void77 
GoodG2B77 
(77 
HttpRequest77 $
req77% (
,77( )
HttpResponse77* 6
resp777 ;
)77; <
{88 
int99 
data99 
;99 
data;; 
=;; 
$num;; 
;;; @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_52b<< <
.<<< =
GoodG2BSink<<= H
(<<H I
data<<I M
,<<N O
req<<P S
,<<S T
resp<<U Y
)<<Y Z
;<<Z [
}== 
private@@ 
void@@ 
GoodB2G@@ 
(@@ 
HttpRequest@@ $
req@@% (
,@@( )
HttpResponse@@* 6
resp@@7 ;
)@@; <
{AA 
intBB 
dataBB 
;BB 
dataCC 
=CC 
intCC 
.CC 
MinValueCC 
;CC 
{EE 	
stringFF 
stringNumberFF 
=FF  !
reqFF" %
.FF% &
ParamsFF& ,
.FF, -
GetFF- 0
(FF0 1
$strFF1 7
)FF7 8
;FF8 9
tryGG 
{HH 
dataII 
=II 
intII 
.II 
ParseII  
(II  !
stringNumberII! -
.II- .
TrimII. 2
(II2 3
)II3 4
)II4 5
;II5 6
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$str	MMF Ç
)
MMÇ É
;
MMÉ Ñ
}NN 
}OO 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_52bPP <
.PP< =
GoodB2GSinkPP= H
(PPH I
dataPPI M
,PPN O
reqPPP S
,PPS T
respPPU Y
)PPY Z
;PPZ [
}QQ 
}SS 
}TT Ω
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_52b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_52b :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_52c <
.< =
BadSink= D
(D E
dataE I
,J K
reqL O
,O P
respQ U
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_52c&& <
.&&< =
GoodG2BSink&&= H
(&&H I
data&&I M
,&&N O
req&&P S
,&&S T
resp&&U Y
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_52c,, <
.,,< =
GoodB2GSink,,= H
(,,H I
data,,I M
,,,N O
req,,P S
,,,S T
resp,,U Y
),,Y Z
;,,Z [
}-- 
}// 
}00 –
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_52c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_52c :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Ç$
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53b,, <
.,,< =
BadSink,,= D
(,,D E
data,,E I
,,,J K
req,,L O
,,,O P
resp,,Q U
),,U V
;,,V W
}-- 
public00 

override00 
void00 
Good00 
(00 
HttpRequest00 )
req00* -
,00- .
HttpResponse00/ ;
resp00< @
)00@ A
{11 
GoodG2B22 
(22 
req22 
,22 
resp22 
)22 
;22 
GoodB2G33 
(33 
req33 
,33 
resp33 
)33 
;33 
}44 
private77 
void77 
GoodG2B77 
(77 
HttpRequest77 $
req77% (
,77( )
HttpResponse77* 6
resp777 ;
)77; <
{88 
int99 
data99 
;99 
data;; 
=;; 
$num;; 
;;; @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53b<< <
.<<< =
GoodG2BSink<<= H
(<<H I
data<<I M
,<<N O
req<<P S
,<<S T
resp<<U Y
)<<Y Z
;<<Z [
}== 
private@@ 
void@@ 
GoodB2G@@ 
(@@ 
HttpRequest@@ $
req@@% (
,@@( )
HttpResponse@@* 6
resp@@7 ;
)@@; <
{AA 
intBB 
dataBB 
;BB 
dataCC 
=CC 
intCC 
.CC 
MinValueCC 
;CC 
{EE 	
stringFF 
stringNumberFF 
=FF  !
reqFF" %
.FF% &
ParamsFF& ,
.FF, -
GetFF- 0
(FF0 1
$strFF1 7
)FF7 8
;FF8 9
tryGG 
{HH 
dataII 
=II 
intII 
.II 
ParseII  
(II  !
stringNumberII! -
.II- .
TrimII. 2
(II2 3
)II3 4
)II4 5
;II5 6
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$str	MMF Ç
)
MMÇ É
;
MMÉ Ñ
}NN 
}OO 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53bPP <
.PP< =
GoodB2GSinkPP= H
(PPH I
dataPPI M
,PPN O
reqPPP S
,PPS T
respPPU Y
)PPY Z
;PPZ [
}QQ 
}SS 
}TT Ω
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53b :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53c <
.< =
BadSink= D
(D E
dataE I
,J K
reqL O
,O P
respQ U
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53c&& <
.&&< =
GoodG2BSink&&= H
(&&H I
data&&I M
,&&N O
req&&P S
,&&S T
resp&&U Y
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53c,, <
.,,< =
GoodB2GSink,,= H
(,,H I
data,,I M
,,,N O
req,,P S
,,,S T
resp,,U Y
),,Y Z
;,,Z [
}-- 
}// 
}00 Ω
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53c :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53d <
.< =
BadSink= D
(D E
dataE I
,J K
reqL O
,O P
respQ U
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53d&& <
.&&< =
GoodG2BSink&&= H
(&&H I
data&&I M
,&&N O
req&&P S
,&&S T
resp&&U Y
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53d,, <
.,,< =
GoodB2GSink,,= H
(,,H I
data,,I M
,,,N O
req,,P S
,,,S T
resp,,U Y
),,Y Z
;,,Z [
}-- 
}// 
}00 –
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_53d :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Ç$
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54b,, <
.,,< =
BadSink,,= D
(,,D E
data,,E I
,,,J K
req,,L O
,,,O P
resp,,Q U
),,U V
;,,V W
}-- 
public00 

override00 
void00 
Good00 
(00 
HttpRequest00 )
req00* -
,00- .
HttpResponse00/ ;
resp00< @
)00@ A
{11 
GoodG2B22 
(22 
req22 
,22 
resp22 
)22 
;22 
GoodB2G33 
(33 
req33 
,33 
resp33 
)33 
;33 
}44 
private77 
void77 
GoodG2B77 
(77 
HttpRequest77 $
req77% (
,77( )
HttpResponse77* 6
resp777 ;
)77; <
{88 
int99 
data99 
;99 
data;; 
=;; 
$num;; 
;;; @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54b<< <
.<<< =
GoodG2BSink<<= H
(<<H I
data<<I M
,<<N O
req<<P S
,<<S T
resp<<U Y
)<<Y Z
;<<Z [
}== 
private@@ 
void@@ 
GoodB2G@@ 
(@@ 
HttpRequest@@ $
req@@% (
,@@( )
HttpResponse@@* 6
resp@@7 ;
)@@; <
{AA 
intBB 
dataBB 
;BB 
dataCC 
=CC 
intCC 
.CC 
MinValueCC 
;CC 
{EE 	
stringFF 
stringNumberFF 
=FF  !
reqFF" %
.FF% &
ParamsFF& ,
.FF, -
GetFF- 0
(FF0 1
$strFF1 7
)FF7 8
;FF8 9
tryGG 
{HH 
dataII 
=II 
intII 
.II 
ParseII  
(II  !
stringNumberII! -
.II- .
TrimII. 2
(II2 3
)II3 4
)II4 5
;II5 6
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$str	MMF Ç
)
MMÇ É
;
MMÉ Ñ
}NN 
}OO 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54bPP <
.PP< =
GoodB2GSinkPP= H
(PPH I
dataPPI M
,PPN O
reqPPP S
,PPS T
respPPU Y
)PPY Z
;PPZ [
}QQ 
}SS 
}TT Ω
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54b :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54c <
.< =
BadSink= D
(D E
dataE I
,J K
reqL O
,O P
respQ U
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54c&& <
.&&< =
GoodG2BSink&&= H
(&&H I
data&&I M
,&&N O
req&&P S
,&&S T
resp&&U Y
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54c,, <
.,,< =
GoodB2GSink,,= H
(,,H I
data,,I M
,,,N O
req,,P S
,,,S T
resp,,U Y
),,Y Z
;,,Z [
}-- 
}// 
}00 Ω
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54c :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54d <
.< =
BadSink= D
(D E
dataE I
,J K
reqL O
,O P
respQ U
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54d&& <
.&&< =
GoodG2BSink&&= H
(&&H I
data&&I M
,&&N O
req&&P S
,&&S T
resp&&U Y
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54d,, <
.,,< =
GoodB2GSink,,= H
(,,H I
data,,I M
,,,N O
req,,P S
,,,S T
resp,,U Y
),,Y Z
;,,Z [
}-- 
}// 
}00 Ω
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54d :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54e <
.< =
BadSink= D
(D E
dataE I
,J K
reqL O
,O P
respQ U
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54e&& <
.&&< =
GoodG2BSink&&= H
(&&H I
data&&I M
,&&N O
req&&P S
,&&S T
resp&&U Y
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54e,, <
.,,< =
GoodB2GSink,,= H
(,,H I
data,,I M
,,,N O
req,,P S
,,,S T
resp,,U Y
),,Y Z
;,,Z [
}-- 
}// 
}00 –
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54e.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_54e :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< ¨
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_61a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_61a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
= @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_61b G
.G H
	BadSourceH Q
(Q R
reqR U
,U V
respW [
)[ \
;\ ]
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
HttpRequest%% )
req%%* -
,%%- .
HttpResponse%%/ ;
resp%%< @
)%%@ A
{&& 
GoodG2B'' 
('' 
req'' 
,'' 
resp'' 
)'' 
;'' 
GoodB2G(( 
((( 
req(( 
,(( 
resp(( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
HttpRequest,,  +
req,,, /
,,,/ 0
HttpResponse,,1 =
resp,,> B
),,B C
{-- 
int.. 
data.. 
=.. @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_61b.. G
...G H
GoodG2BSource..H U
(..U V
req..V Y
,..Y Z
resp..[ _
).._ `
;..` a
IO11 

.11
 
	WriteLine11 
(11 
$str11  
+11! "
data11# '
+11( )
$str11* /
+110 1
(112 3
$num113 6
/117 8
data119 =
)11= >
+11? @
$str11A E
)11E F
;11F G
}22 
private55 
static55 
void55 
GoodB2G55 
(55  
HttpRequest55  +
req55, /
,55/ 0
HttpResponse551 =
resp55> B
)55B C
{66 
int77 
data77 
=77 @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_61b77 G
.77G H
GoodB2GSource77H U
(77U V
req77V Y
,77Y Z
resp77[ _
)77_ `
;77` a
if99 

(99 
data99 
!=99 
$num99 
)99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; 
+;;  !
data;;" &
+;;' (
$str;;) .
+;;/ 0
(;;1 2
$num;;2 5
/;;6 7
data;;8 <
);;< =
+;;> ?
$str;;@ D
);;D E
;;;E F
}<< 	
else== 
{>> 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? @
)??@ A
;??A B
}@@ 	
}AA 
}CC 
}DD ì
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_61b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_61b :
{ 
public 

static 
int 
	BadSource 
(  
HttpRequest  +
req, /
,/ 0
HttpResponse1 =
resp> B
)B C
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	
return,, 
data,, 
;,, 
}-- 
public22 

static22 
int22 
GoodG2BSource22 #
(22# $
HttpRequest22$ /
req220 3
,223 4
HttpResponse225 A
resp22B F
)22F G
{33 
int44 
data44 
;44 
data66 
=66 
$num66 
;66 
return77 
data77 
;77 
}88 
public;; 

static;; 
int;; 
GoodB2GSource;; #
(;;# $
HttpRequest;;$ /
req;;0 3
,;;3 4
HttpResponse;;5 A
resp;;B F
);;F G
{<< 
int== 
data== 
;== 
data>> 
=>> 
int>> 
.>> 
MinValue>> 
;>> 
{@@ 	
stringAA 
stringNumberAA 
=AA  !
reqAA" %
.AA% &
ParamsAA& ,
.AA, -
GetAA- 0
(AA0 1
$strAA1 7
)AA7 8
;AA8 9
tryBB 
{CC 
dataDD 
=DD 
intDD 
.DD 
ParseDD  
(DD  !
stringNumberDD! -
.DD- .
TrimDD. 2
(DD2 3
)DD3 4
)DD4 5
;DD5 6
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOHH 
.HH 
LoggerHH 
.HH 
LogHH 
(HH 
NLogHH "
.HH" #
LogLevelHH# +
.HH+ ,
WarnHH, 0
,HH0 1
exceptNumberFormatHH2 D
,HHD E
$str	HHF Ç
)
HHÇ É
;
HHÉ Ñ
}II 
}JJ 	
returnKK 
dataKK 
;KK 
}LL 
}NN 
}OO ¿+
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_66a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_66a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	
int,, 
[,, 
],, 
	dataArray,, 
=,, 
new,, 
int,, !
[,,! "
$num,," #
],,# $
;,,$ %
	dataArray-- 
[-- 
$num-- 
]-- 
=-- 
data-- 
;-- @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_66b.. <
...< =
BadSink..= D
(..D E
	dataArray..E N
,..O P
req..Q T
,..T U
resp..V Z
)..[ \
;..\ ]
}// 
public22 

override22 
void22 
Good22 
(22 
HttpRequest22 )
req22* -
,22- .
HttpResponse22/ ;
resp22< @
)22@ A
{33 
GoodG2B44 
(44 
req44 
,44 
resp44 
)44 
;44 
GoodB2G55 
(55 
req55 
,55 
resp55 
)55 
;55 
}66 
private99 
static99 
void99 
GoodG2B99 
(99  
HttpRequest99  +
req99, /
,99/ 0
HttpResponse991 =
resp99> B
)99B C
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== 
int>> 
[>> 
]>> 
	dataArray>> 
=>> 
new>> 
int>> !
[>>! "
$num>>" #
]>># $
;>>$ %
	dataArray?? 
[?? 
$num?? 
]?? 
=?? 
data?? 
;?? @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_66b@@ <
.@@< =
GoodG2BSink@@= H
(@@H I
	dataArray@@I R
,@@S T
req@@U X
,@@X Y
resp@@Z ^
)@@_ `
;@@` a
}AA 
privateDD 
staticDD 
voidDD 
GoodB2GDD 
(DD  
HttpRequestDD  +
reqDD, /
,DD/ 0
HttpResponseDD1 =
respDD> B
)DDB C
{EE 
intFF 
dataFF 
;FF 
dataGG 
=GG 
intGG 
.GG 
MinValueGG 
;GG 
{II 	
stringJJ 
stringNumberJJ 
=JJ  !
reqJJ" %
.JJ% &
ParamsJJ& ,
.JJ, -
GetJJ- 0
(JJ0 1
$strJJ1 7
)JJ7 8
;JJ8 9
tryKK 
{LL 
dataMM 
=MM 
intMM 
.MM 
ParseMM  
(MM  !
stringNumberMM! -
.MM- .
TrimMM. 2
(MM2 3
)MM3 4
)MM4 5
;MM5 6
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptNumberFormatQQ2 D
,QQD E
$str	QQF Ç
)
QQÇ É
;
QQÉ Ñ
}RR 
}SS 	
intTT 
[TT 
]TT 
	dataArrayTT 
=TT 
newTT 
intTT !
[TT! "
$numTT" #
]TT# $
;TT$ %
	dataArrayUU 
[UU 
$numUU 
]UU 
=UU 
dataUU 
;UU @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_66bVV <
.VV< =
GoodB2GSinkVV= H
(VVH I
	dataArrayVVI R
,VVS T
reqVVU X
,VVX Y
respVVZ ^
)VV_ `
;VV` a
}WW 
}YY 
}ZZ —
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_66b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_66b :
{ 
public 

static 
void 
BadSink 
( 
int "
[" #
]# $
	dataArray% .
,/ 0
HttpRequest1 <
req= @
,@ A
HttpResponseB N
respO S
)S T
{ 
int 
data 
= 
	dataArray 
[ 
$num 
] 
;  
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
int''# &
[''& '
]''' (
	dataArray'') 2
,''3 4
HttpRequest''5 @
req''A D
,''D E
HttpResponse''F R
resp''S W
)''W X
{(( 
int)) 
data)) 
=)) 
	dataArray)) 
[)) 
$num)) 
])) 
;))  
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
int00# &
[00& '
]00' (
	dataArray00) 2
,003 4
HttpRequest005 @
req00A D
,00D E
HttpResponse00F R
resp00S W
)00W X
{11 
int22 
data22 
=22 
	dataArray22 
[22 
$num22 
]22 
;22  
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ç,
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_67a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_67a :
:; <
AbstractTestCaseWeb= P
{ 
public 

class 
	Container 
{ 
public 
int 
containerOne 
;  
} 
public!! 

override!! 
void!! 
Bad!! 
(!! 
HttpRequest!! (
req!!) ,
,!!, -
HttpResponse!!. :
resp!!; ?
)!!? @
{"" 
int## 
data## 
;## 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$ 
{&& 	
string'' 
stringNumber'' 
=''  !
req''" %
.''% &
Params''& ,
.'', -
Get''- 0
(''0 1
$str''1 7
)''7 8
;''8 9
try(( 
{)) 
data** 
=** 
int** 
.** 
Parse**  
(**  !
stringNumber**! -
.**- .
Trim**. 2
(**2 3
)**3 4
)**4 5
;**5 6
}++ 
catch,, 
(,, 
FormatException,, "
exceptNumberFormat,,# 5
),,5 6
{-- 
IO.. 
... 
Logger.. 
... 
Log.. 
(.. 
NLog.. "
..." #
LogLevel..# +
...+ ,
Warn.., 0
,..0 1
exceptNumberFormat..2 D
,..D E
$str	..F Ç
)
..Ç É
;
..É Ñ
}// 
}00 	
	Container11 
dataContainer11 
=11  !
new11" %
	Container11& /
(11/ 0
)110 1
;111 2
dataContainer22 
.22 
containerOne22 "
=22# $
data22% )
;22) *@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_67b33 <
.33< =
BadSink33= D
(33D E
dataContainer33E R
,33S T
req33U X
,33X Y
resp33Z ^
)33_ `
;33` a
}44 
public77 

override77 
void77 
Good77 
(77 
HttpRequest77 )
req77* -
,77- .
HttpResponse77/ ;
resp77< @
)77@ A
{88 
GoodG2B99 
(99 
req99 
,99 
resp99 
)99 
;99 
GoodB2G:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
};; 
private>> 
static>> 
void>> 
GoodG2B>> 
(>>  
HttpRequest>>  +
req>>, /
,>>/ 0
HttpResponse>>1 =
resp>>> B
)>>B C
{?? 
int@@ 
data@@ 
;@@ 
dataBB 
=BB 
$numBB 
;BB 
	ContainerCC 
dataContainerCC 
=CC  !
newCC" %
	ContainerCC& /
(CC/ 0
)CC0 1
;CC1 2
dataContainerDD 
.DD 
containerOneDD "
=DD# $
dataDD% )
;DD) *@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_67bEE <
.EE< =
GoodG2BSinkEE= H
(EEH I
dataContainerEEI V
,EEW X
reqEEY \
,EE\ ]
respEE^ b
)EEc d
;EEd e
}FF 
privateII 
staticII 
voidII 
GoodB2GII 
(II  
HttpRequestII  +
reqII, /
,II/ 0
HttpResponseII1 =
respII> B
)IIB C
{JJ 
intKK 
dataKK 
;KK 
dataLL 
=LL 
intLL 
.LL 
MinValueLL 
;LL 
{NN 	
stringOO 
stringNumberOO 
=OO  !
reqOO" %
.OO% &
ParamsOO& ,
.OO, -
GetOO- 0
(OO0 1
$strOO1 7
)OO7 8
;OO8 9
tryPP 
{QQ 
dataRR 
=RR 
intRR 
.RR 
ParseRR  
(RR  !
stringNumberRR! -
.RR- .
TrimRR. 2
(RR2 3
)RR3 4
)RR4 5
;RR5 6
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$str	VVF Ç
)
VVÇ É
;
VVÉ Ñ
}WW 
}XX 	
	ContainerYY 
dataContainerYY 
=YY  !
newYY" %
	ContainerYY& /
(YY/ 0
)YY0 1
;YY1 2
dataContainerZZ 
.ZZ 
containerOneZZ "
=ZZ# $
dataZZ% )
;ZZ) *@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_67b[[ <
.[[< =
GoodB2GSink[[= H
([[H I
dataContainer[[I V
,[[W X
req[[Y \
,[[\ ]
resp[[^ b
)[[c d
;[[d e
}\\ 
}^^ 
}__ ñ
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_67b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_67b :
{ 
public 

static 
void 
BadSink 
( @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_67a S
.S T
	ContainerT ]
dataContainer^ k
,l m
HttpRequestn y
reqz }
,} ~
HttpResponse	 ã
resp
å ê
)
ê ë
{ 
int 
data 
= 
dataContainer  
.  !
containerOne! -
;- .
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_67a''# W
.''W X
	Container''X a
dataContainer''b o
,''p q
HttpRequest''r }
req	''~ Å
,
''Å Ç
HttpResponse
''É è
resp
''ê î
)
''î ï
{(( 
int)) 
data)) 
=)) 
dataContainer))  
.))  !
containerOne))! -
;))- .
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_67a00# W
.00W X
	Container00X a
dataContainer00b o
,00p q
HttpRequest00r }
req	00~ Å
,
00Å Ç
HttpResponse
00É è
resp
00ê î
)
00î ï
{11 
int22 
data22 
=22 
dataContainer22  
.22  !
containerOne22! -
;22- .
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ã#
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_68a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_68a :
:; <
AbstractTestCaseWeb= P
{ 
public 

static 
int 
data 
; 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
data   
=   
int   
.   
MinValue   
;   
{"" 	
string## 
stringNumber## 
=##  !
req##" %
.##% &
Params##& ,
.##, -
Get##- 0
(##0 1
$str##1 7
)##7 8
;##8 9
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&&  
(&&  !
stringNumber&&! -
.&&- .
Trim&&. 2
(&&2 3
)&&3 4
)&&4 5
;&&5 6
}'' 
catch(( 
((( 
FormatException(( "
exceptNumberFormat((# 5
)((5 6
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
exceptNumberFormat**2 D
,**D E
$str	**F Ç
)
**Ç É
;
**É Ñ
}++ 
},, 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_68b-- <
.--< =
BadSink--= D
(--D E
req--E H
,--H I
resp--J N
)--N O
;--O P
}.. 
public11 

override11 
void11 
Good11 
(11 
HttpRequest11 )
req11* -
,11- .
HttpResponse11/ ;
resp11< @
)11@ A
{22 
GoodG2B33 
(33 
req33 
,33 
resp33 
)33 
;33 
GoodB2G44 
(44 
req44 
,44 
resp44 
)44 
;44 
}55 
private88 
static88 
void88 
GoodG2B88 
(88  
HttpRequest88  +
req88, /
,88/ 0
HttpResponse881 =
resp88> B
)88B C
{99 
data;; 
=;; 
$num;; 
;;; @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_68b<< <
.<<< =
GoodG2BSink<<= H
(<<H I
req<<I L
,<<L M
resp<<N R
)<<R S
;<<S T
}== 
private@@ 
static@@ 
void@@ 
GoodB2G@@ 
(@@  
HttpRequest@@  +
req@@, /
,@@/ 0
HttpResponse@@1 =
resp@@> B
)@@B C
{AA 
dataBB 
=BB 
intBB 
.BB 
MinValueBB 
;BB 
{DD 	
stringEE 
stringNumberEE 
=EE  !
reqEE" %
.EE% &
ParamsEE& ,
.EE, -
GetEE- 0
(EE0 1
$strEE1 7
)EE7 8
;EE8 9
tryFF 
{GG 
dataHH 
=HH 
intHH 
.HH 
ParseHH  
(HH  !
stringNumberHH! -
.HH- .
TrimHH. 2
(HH2 3
)HH3 4
)HH4 5
;HH5 6
}II 
catchJJ 
(JJ 
FormatExceptionJJ "
exceptNumberFormatJJ# 5
)JJ5 6
{KK 
IOLL 
.LL 
LoggerLL 
.LL 
LogLL 
(LL 
NLogLL "
.LL" #
LogLevelLL# +
.LL+ ,
WarnLL, 0
,LL0 1
exceptNumberFormatLL2 D
,LLD E
$str	LLF Ç
)
LLÇ É
;
LLÉ Ñ
}MM 
}NN 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_68bOO <
.OO< =
GoodB2GSinkOO= H
(OOH I
reqOOI L
,OOL M
respOON R
)OOR S
;OOS T
}PP 
}RR 
}SS ¶
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_68b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_68b :
{ 
public 

static 
void 
BadSink 
( 
HttpRequest *
req+ .
,. /
HttpResponse0 <
resp= A
)A B
{ 
int 
data 
= @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_68a G
.G H
dataH L
;L M
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
HttpRequest''# .
req''/ 2
,''2 3
HttpResponse''4 @
resp''A E
)''E F
{(( 
int)) 
data)) 
=)) @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_68a)) G
.))G H
data))H L
;))L M
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
HttpRequest00# .
req00/ 2
,002 3
HttpResponse004 @
resp00A E
)00E F
{11 
int22 
data22 
=22 @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_68a22 G
.22G H
data22H L
;22L M
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ¿%
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_71a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_71a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_71b,, <
.,,< =
BadSink,,= D
(,,D E
(,,E F
Object,,F L
),,L M
data,,M Q
,,,R S
req,,T W
,,,W X
resp,,Y ]
),,^ _
;,,_ `
}-- 
public00 

override00 
void00 
Good00 
(00 
HttpRequest00 )
req00* -
,00- .
HttpResponse00/ ;
resp00< @
)00@ A
{11 
GoodG2B22 
(22 
req22 
,22 
resp22 
)22 
;22 
GoodB2G33 
(33 
req33 
,33 
resp33 
)33 
;33 
}44 
private77 
static77 
void77 
GoodG2B77 
(77  
HttpRequest77  +
req77, /
,77/ 0
HttpResponse771 =
resp77> B
)77B C
{88 
int99 
data99 
;99 
data;; 
=;; 
$num;; 
;;; @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_71b<< <
.<<< =
GoodG2BSink<<= H
(<<H I
(<<I J
Object<<J P
)<<P Q
data<<Q U
,<<V W
req<<X [
,<<[ \
resp<<] a
)<<b c
;<<c d
}== 
private@@ 
static@@ 
void@@ 
GoodB2G@@ 
(@@  
HttpRequest@@  +
req@@, /
,@@/ 0
HttpResponse@@1 =
resp@@> B
)@@B C
{AA 
intBB 
dataBB 
;BB 
dataCC 
=CC 
intCC 
.CC 
MinValueCC 
;CC 
{EE 	
stringFF 
stringNumberFF 
=FF  !
reqFF" %
.FF% &
ParamsFF& ,
.FF, -
GetFF- 0
(FF0 1
$strFF1 7
)FF7 8
;FF8 9
tryGG 
{HH 
dataII 
=II 
intII 
.II 
ParseII  
(II  !
stringNumberII! -
.II- .
TrimII. 2
(II2 3
)II3 4
)II4 5
;II5 6
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$str	MMF Ç
)
MMÇ É
;
MMÉ Ñ
}NN 
}OO 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_71bPP <
.PP< =
GoodB2GSinkPP= H
(PPH I
(PPI J
ObjectPPJ P
)PPP Q
dataPPQ U
,PPV W
reqPPX [
,PP[ \
respPP] a
)PPb c
;PPc d
}QQ 
}SS 
}TT É
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_71b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_71b :
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
,1 2
HttpRequest3 >
req? B
,B C
HttpResponseD P
respQ U
)U V
{ 
int 
data 
= 
( 
int 
) 

dataObject "
;" #
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
Object((# )

dataObject((* 4
,((5 6
HttpRequest((7 B
req((C F
,((F G
HttpResponse((H T
resp((U Y
)((Y Z
{)) 
int** 
data** 
=** 
(** 
int** 
)** 

dataObject** "
;**" #
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
Object11# )

dataObject11* 4
,115 6
HttpRequest117 B
req11C F
,11F G
HttpResponse11H T
resp11U Y
)11Y Z
{22 
int33 
data33 
=33 
(33 
int33 
)33 

dataObject33 "
;33" #
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ∞3
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_72a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_72a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
string## 
stringNumber## 
=##  !
req##" %
.##% &
Params##& ,
.##, -
Get##- 0
(##0 1
$str##1 7
)##7 8
;##8 9
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&&  
(&&  !
stringNumber&&! -
.&&- .
Trim&&. 2
(&&2 3
)&&3 4
)&&4 5
;&&5 6
}'' 
catch(( 
((( 
FormatException(( "
exceptNumberFormat((# 5
)((5 6
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
exceptNumberFormat**2 D
,**D E
$str	**F Ç
)
**Ç É
;
**É Ñ
}++ 
},, 	
	Hashtable-- 
dataHashtable-- 
=--  !
new--" %
	Hashtable--& /
(--/ 0
$num--0 1
)--1 2
;--2 3
dataHashtable.. 
... 
Add.. 
(.. 
$num.. 
,.. 
data.. !
)..! "
;.." #
dataHashtable// 
.// 
Add// 
(// 
$num// 
,// 
data// !
)//! "
;//" #
dataHashtable00 
.00 
Add00 
(00 
$num00 
,00 
data00 !
)00! "
;00" #@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_72b11 <
.11< =
BadSink11= D
(11D E
dataHashtable11E R
,11S T
req11U X
,11X Y
resp11Z ^
)11_ `
;11` a
}22 
public55 

override55 
void55 
Good55 
(55 
HttpRequest55 )
req55* -
,55- .
HttpResponse55/ ;
resp55< @
)55@ A
{66 
GoodG2B77 
(77 
req77 
,77 
resp77 
)77 
;77 
GoodB2G88 
(88 
req88 
,88 
resp88 
)88 
;88 
}99 
private<< 
static<< 
void<< 
GoodG2B<< 
(<<  
HttpRequest<<  +
req<<, /
,<</ 0
HttpResponse<<1 =
resp<<> B
)<<B C
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
$num@@ 
;@@ 
	HashtableAA 
dataHashtableAA 
=AA  !
newAA" %
	HashtableAA& /
(AA/ 0
$numAA0 1
)AA1 2
;AA2 3
dataHashtableBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB !
)BB! "
;BB" #
dataHashtableCC 
.CC 
AddCC 
(CC 
$numCC 
,CC 
dataCC !
)CC! "
;CC" #
dataHashtableDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD !
)DD! "
;DD" #@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_72bEE <
.EE< =
GoodG2BSinkEE= H
(EEH I
dataHashtableEEI V
,EEW X
reqEEY \
,EE\ ]
respEE^ b
)EEc d
;EEd e
}FF 
privateII 
staticII 
voidII 
GoodB2GII 
(II  
HttpRequestII  +
reqII, /
,II/ 0
HttpResponseII1 =
respII> B
)IIB C
{JJ 
intKK 
dataKK 
;KK 
dataLL 
=LL 
intLL 
.LL 
MinValueLL 
;LL 
{NN 	
stringOO 
stringNumberOO 
=OO  !
reqOO" %
.OO% &
ParamsOO& ,
.OO, -
GetOO- 0
(OO0 1
$strOO1 7
)OO7 8
;OO8 9
tryPP 
{QQ 
dataRR 
=RR 
intRR 
.RR 
ParseRR  
(RR  !
stringNumberRR! -
.RR- .
TrimRR. 2
(RR2 3
)RR3 4
)RR4 5
;RR5 6
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$str	VVF Ç
)
VVÇ É
;
VVÉ Ñ
}WW 
}XX 	
	HashtableYY 
dataHashtableYY 
=YY  !
newYY" %
	HashtableYY& /
(YY/ 0
$numYY0 1
)YY1 2
;YY2 3
dataHashtableZZ 
.ZZ 
AddZZ 
(ZZ 
$numZZ 
,ZZ 
dataZZ !
)ZZ! "
;ZZ" #
dataHashtable[[ 
.[[ 
Add[[ 
([[ 
$num[[ 
,[[ 
data[[ !
)[[! "
;[[" #
dataHashtable\\ 
.\\ 
Add\\ 
(\\ 
$num\\ 
,\\ 
data\\ !
)\\! "
;\\" #@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_72b]] <
.]]< =
GoodB2GSink]]= H
(]]H I
dataHashtable]]I V
,]]W X
req]]Y \
,]]\ ]
resp]]^ b
)]]c d
;]]d e
}^^ 
}`` 
}aa Æ
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_72b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_72b :
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
,7 8
HttpRequest9 D
reqE H
,H I
HttpResponseJ V
respW [
)[ \
{ 
int 
data 
= 
( 
int 
) 
dataHashtable &
[& '
$num' (
]( )
;) *
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
	Hashtable((# ,
dataHashtable((- :
,((; <
HttpRequest((= H
req((I L
,((L M
HttpResponse((N Z
resp(([ _
)((_ `
{)) 
int** 
data** 
=** 
(** 
int** 
)** 
dataHashtable** &
[**& '
$num**' (
]**( )
;**) *
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
	Hashtable11# ,
dataHashtable11- :
,11; <
HttpRequest11= H
req11I L
,11L M
HttpResponse11N Z
resp11[ _
)11_ `
{22 
int33 
data33 
=33 
(33 
int33 
)33 
dataHashtable33 &
[33& '
$num33' (
]33( )
;33) *
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ §3
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_73a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_73a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
string## 
stringNumber## 
=##  !
req##" %
.##% &
Params##& ,
.##, -
Get##- 0
(##0 1
$str##1 7
)##7 8
;##8 9
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&&  
(&&  !
stringNumber&&! -
.&&- .
Trim&&. 2
(&&2 3
)&&3 4
)&&4 5
;&&5 6
}'' 
catch(( 
((( 
FormatException(( "
exceptNumberFormat((# 5
)((5 6
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
exceptNumberFormat**2 D
,**D E
$str	**F Ç
)
**Ç É
;
**É Ñ
}++ 
},, 	

LinkedList-- 
<-- 
int-- 
>-- 
dataLinkedList-- &
=--' (
new--) ,

LinkedList--- 7
<--7 8
int--8 ;
>--; <
(--< =
)--= >
;--> ?
dataLinkedList.. 
... 
AddLast.. 
(.. 
data.. #
)..# $
;..$ %
dataLinkedList// 
.// 
AddLast// 
(// 
data// #
)//# $
;//$ %
dataLinkedList00 
.00 
AddLast00 
(00 
data00 #
)00# $
;00$ %@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_73b11 <
.11< =
BadSink11= D
(11D E
dataLinkedList11E S
,11T U
req11V Y
,11Y Z
resp11[ _
)11` a
;11a b
}22 
public55 

override55 
void55 
Good55 
(55 
HttpRequest55 )
req55* -
,55- .
HttpResponse55/ ;
resp55< @
)55@ A
{66 
GoodG2B77 
(77 
req77 
,77 
resp77 
)77 
;77 
GoodB2G88 
(88 
req88 
,88 
resp88 
)88 
;88 
}99 
private<< 
static<< 
void<< 
GoodG2B<< 
(<<  
HttpRequest<<  +
req<<, /
,<</ 0
HttpResponse<<1 =
resp<<> B
)<<B C
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
$num@@ 
;@@ 

LinkedListAA 
<AA 
intAA 
>AA 
dataLinkedListAA &
=AA' (
newAA) ,

LinkedListAA- 7
<AA7 8
intAA8 ;
>AA; <
(AA< =
)AA= >
;AA> ?
dataLinkedListBB 
.BB 
AddLastBB 
(BB 
dataBB #
)BB# $
;BB$ %
dataLinkedListCC 
.CC 
AddLastCC 
(CC 
dataCC #
)CC# $
;CC$ %
dataLinkedListDD 
.DD 
AddLastDD 
(DD 
dataDD #
)DD# $
;DD$ %@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_73bEE <
.EE< =
GoodG2BSinkEE= H
(EEH I
dataLinkedListEEI W
,EEX Y
reqEEZ ]
,EE] ^
respEE_ c
)EEd e
;EEe f
}FF 
privateII 
staticII 
voidII 
GoodB2GII 
(II  
HttpRequestII  +
reqII, /
,II/ 0
HttpResponseII1 =
respII> B
)IIB C
{JJ 
intKK 
dataKK 
;KK 
dataLL 
=LL 
intLL 
.LL 
MinValueLL 
;LL 
{NN 	
stringOO 
stringNumberOO 
=OO  !
reqOO" %
.OO% &
ParamsOO& ,
.OO, -
GetOO- 0
(OO0 1
$strOO1 7
)OO7 8
;OO8 9
tryPP 
{QQ 
dataRR 
=RR 
intRR 
.RR 
ParseRR  
(RR  !
stringNumberRR! -
.RR- .
TrimRR. 2
(RR2 3
)RR3 4
)RR4 5
;RR5 6
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$str	VVF Ç
)
VVÇ É
;
VVÉ Ñ
}WW 
}XX 	

LinkedListYY 
<YY 
intYY 
>YY 
dataLinkedListYY &
=YY' (
newYY) ,

LinkedListYY- 7
<YY7 8
intYY8 ;
>YY; <
(YY< =
)YY= >
;YY> ?
dataLinkedListZZ 
.ZZ 
AddLastZZ 
(ZZ 
dataZZ #
)ZZ# $
;ZZ$ %
dataLinkedList[[ 
.[[ 
AddLast[[ 
([[ 
data[[ #
)[[# $
;[[$ %
dataLinkedList\\ 
.\\ 
AddLast\\ 
(\\ 
data\\ #
)\\# $
;\\$ %@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_73b]] <
.]]< =
GoodB2GSink]]= H
(]]H I
dataLinkedList]]I W
,]]X Y
req]]Z ]
,]]] ^
resp]]_ c
)]]d e
;]]e f
}^^ 
}`` 
}aa 
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_73b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_73b :
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
int* -
>- .
dataLinkedList/ =
,> ?
HttpRequest@ K
reqL O
,O P
HttpResponseQ ]
resp^ b
)b c
{ 
int 
data 
= 
dataLinkedList !
.! "
Last" &
.& '
Value' ,
;, -
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #

LinkedList((# -
<((- .
int((. 1
>((1 2
dataLinkedList((3 A
,((B C
HttpRequest((D O
req((P S
,((S T
HttpResponse((U a
resp((b f
)((f g
{)) 
int** 
data** 
=** 
dataLinkedList** !
.**! "
Last**" &
.**& '
Value**' ,
;**, -
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

LinkedList11# -
<11- .
int11. 1
>111 2
dataLinkedList113 A
,11B C
HttpRequest11D O
req11P S
,11S T
HttpResponse11U a
resp11b f
)11f g
{22 
int33 
data33 
=33 
dataLinkedList33 !
.33! "
Last33" &
.33& '
Value33' ,
;33, -
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ È6
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_74a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_74a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
string## 
stringNumber## 
=##  !
req##" %
.##% &
Params##& ,
.##, -
Get##- 0
(##0 1
$str##1 7
)##7 8
;##8 9
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&&  
(&&  !
stringNumber&&! -
.&&- .
Trim&&. 2
(&&2 3
)&&3 4
)&&4 5
;&&5 6
}'' 
catch(( 
((( 
FormatException(( "
exceptNumberFormat((# 5
)((5 6
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
exceptNumberFormat**2 D
,**D E
$str	**F Ç
)
**Ç É
;
**É Ñ
}++ 
},, 	

Dictionary-- 
<-- 
int-- 
,-- 
int-- 
>-- 
dataDictionary-- *
=--+ ,
new--- 0

Dictionary--1 ;
<--; <
int--< ?
,--? @
int--@ C
>--C D
(--D E
)--E F
;--F G
dataDictionary.. 
... 
Add.. 
(.. 
$num.. 
,.. 
data.. "
).." #
;..# $
dataDictionary// 
.// 
Add// 
(// 
$num// 
,// 
data// "
)//" #
;//# $
dataDictionary00 
.00 
Add00 
(00 
$num00 
,00 
data00 "
)00" #
;00# $@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_74b11 <
.11< =
BadSink11= D
(11D E
dataDictionary11E S
,11T U
req11V Y
,11Y Z
resp11[ _
)11` a
;11a b
}22 
public55 

override55 
void55 
Good55 
(55 
HttpRequest55 )
req55* -
,55- .
HttpResponse55/ ;
resp55< @
)55@ A
{66 
GoodG2B77 
(77 
req77 
,77 
resp77 
)77 
;77 
GoodB2G88 
(88 
req88 
,88 
resp88 
)88 
;88 
}99 
private<< 
static<< 
void<< 
GoodG2B<< 
(<<  
HttpRequest<<  +
req<<, /
,<</ 0
HttpResponse<<1 =
resp<<> B
)<<B C
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
$num@@ 
;@@ 

DictionaryAA 
<AA 
intAA 
,AA 
intAA 
>AA 
dataDictionaryAA *
=AA+ ,
newAA- 0

DictionaryAA1 ;
<AA; <
intAA< ?
,AA? @
intAA@ C
>AAC D
(AAD E
)AAE F
;AAF G
dataDictionaryBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB "
)BB" #
;BB# $
dataDictionaryCC 
.CC 
AddCC 
(CC 
$numCC 
,CC 
dataCC "
)CC" #
;CC# $
dataDictionaryDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD "
)DD" #
;DD# $@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_74bEE <
.EE< =
GoodG2BSinkEE= H
(EEH I
dataDictionaryEEI W
,EEX Y
reqEEZ ]
,EE] ^
respEE_ c
)EEd e
;EEe f
}FF 
privateII 
staticII 
voidII 
GoodB2GII 
(II  
HttpRequestII  +
reqII, /
,II/ 0
HttpResponseII1 =
respII> B
)IIB C
{JJ 
intKK 
dataKK 
;KK 
dataLL 
=LL 
intLL 
.LL 
MinValueLL 
;LL 
{NN 	
stringOO 
stringNumberOO 
=OO  !
reqOO" %
.OO% &
ParamsOO& ,
.OO, -
GetOO- 0
(OO0 1
$strOO1 7
)OO7 8
;OO8 9
tryPP 
{QQ 
dataRR 
=RR 
intRR 
.RR 
ParseRR  
(RR  !
stringNumberRR! -
.RR- .
TrimRR. 2
(RR2 3
)RR3 4
)RR4 5
;RR5 6
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$str	VVF Ç
)
VVÇ É
;
VVÉ Ñ
}WW 
}XX 	

DictionaryYY 
<YY 
intYY 
,YY 
intYY 
>YY 
dataDictionaryYY *
=YY+ ,
newYY- 0

DictionaryYY1 ;
<YY; <
intYY< ?
,YY? @
intYY@ C
>YYC D
(YYD E
)YYE F
;YYF G
dataDictionaryZZ 
.ZZ 
AddZZ 
(ZZ 
$numZZ 
,ZZ 
dataZZ "
)ZZ" #
;ZZ# $
dataDictionary[[ 
.[[ 
Add[[ 
([[ 
$num[[ 
,[[ 
data[[ "
)[[" #
;[[# $
dataDictionary\\ 
.\\ 
Add\\ 
(\\ 
$num\\ 
,\\ 
data\\ "
)\\" #
;\\# $@
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_74b]] <
.]]< =
GoodB2GSink]]= H
(]]H I
dataDictionary]]I W
,]]X Y
req]]Z ]
,]]] ^
resp]]_ c
)]]d e
;]]e f
}^^ 
}`` 
}aa ó
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_74b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_74b :
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
int. 1
>1 2
dataDictionary3 A
,B C
HttpRequestD O
reqP S
,S T
HttpResponseU a
respb f
)f g
{ 
int 
data 
= 
dataDictionary !
[! "
$num" #
]# $
;$ %
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( #
(((# $

Dictionary(($ .
<((. /
int((/ 2
,((2 3
int((3 6
>((6 7
dataDictionary((8 F
,((G H
HttpRequest((I T
req((U X
,((X Y
HttpResponse((Z f
resp((g k
)((k l
{)) 
int** 
data** 
=** 
dataDictionary** !
[**! "
$num**" #
]**# $
;**$ %
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

Dictionary11# -
<11- .
int11. 1
,111 2
int112 5
>115 6
dataDictionary117 E
,11F G
HttpRequest11H S
req11T W
,11W X
HttpResponse11Y e
resp11f j
)11j k
{22 
int33 
data33 
=33 
dataDictionary33 !
[33! "
$num33" #
]33# $
;33$ %
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ —J
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_75a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_75a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{   
int!! 
data!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;"" 
{$$ 	
string%% 
stringNumber%% 
=%%  !
req%%" %
.%%% &
Params%%& ,
.%%, -
Get%%- 0
(%%0 1
$str%%1 7
)%%7 8
;%%8 9
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse((  
(((  !
stringNumber((! -
.((- .
Trim((. 2
(((2 3
)((3 4
)((4 5
;((5 6
})) 
catch** 
(** 
FormatException** "
exceptNumberFormat**# 5
)**5 6
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
exceptNumberFormat,,2 D
,,,D E
$str	,,F Ç
)
,,Ç É
;
,,É Ñ
}-- 
}.. 	
byte00 
[00 
]00 
dataSerialized00 
=00 
null00  $
;00$ %
try11 
{22 	
BinaryFormatter33 
bf33 
=33  
new33! $
BinaryFormatter33% 4
(334 5
)335 6
;336 7
using44 
(44 
var44 
ms44 
=44 
new44 
MemoryStream44  ,
(44, -
)44- .
)44. /
{55 
bf66 
.66 
	Serialize66 
(66 
ms66 
,66  
data66! %
)66% &
;66& '
dataSerialized77 
=77  
ms77! #
.77# $
ToArray77$ +
(77+ ,
)77, -
;77- .
}88 @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_75b99 @
.99@ A
BadSink99A H
(99H I
dataSerialized99I W
,99X Y
req99Z ]
,99] ^
resp99_ c
)99d e
;99e f
}:: 	
catch;; 
(;; "
SerializationException;; %
exceptSerialize;;& 5
);;5 6
{<< 	
IO== 
.== 
Logger== 
.== 
Log== 
(== 
NLog== 
.== 
LogLevel== '
.==' (
Warn==( ,
,==, -
$str==. X
,==X Y
exceptSerialize==Z i
)==i j
;==j k
}>> 	
}?? 
publicBB 

overrideBB 
voidBB 
GoodBB 
(BB 
HttpRequestBB )
reqBB* -
,BB- .
HttpResponseBB/ ;
respBB< @
)BB@ A
{CC 
GoodG2BDD 
(DD 
reqDD 
,DD 
respDD 
)DD 
;DD 
GoodB2GEE 
(EE 
reqEE 
,EE 
respEE 
)EE 
;EE 
}FF 
privateII 
staticII 
voidII 
GoodG2BII 
(II  
HttpRequestII  +
reqII, /
,II/ 0
HttpResponseII1 =
respII> B
)IIB C
{JJ 
intKK 
dataKK 
;KK 
dataLL 
=LL 
intLL 
.LL 
MinValueLL 
;LL 
{NN 	
stringOO 
stringNumberOO 
=OO  !
reqOO" %
.OO% &
ParamsOO& ,
.OO, -
GetOO- 0
(OO0 1
$strOO1 7
)OO7 8
;OO8 9
tryPP 
{QQ 
dataRR 
=RR 
intRR 
.RR 
ParseRR  
(RR  !
stringNumberRR! -
.RR- .
TrimRR. 2
(RR2 3
)RR3 4
)RR4 5
;RR5 6
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$str	VVF Ç
)
VVÇ É
;
VVÉ Ñ
}WW 
}XX 	
byteZZ 
[ZZ 
]ZZ 
dataSerializedZZ 
=ZZ 
nullZZ  $
;ZZ$ %
try[[ 
{\\ 	
BinaryFormatter]] 
bf]] 
=]]  
new]]! $
BinaryFormatter]]% 4
(]]4 5
)]]5 6
;]]6 7
using^^ 
(^^ 
var^^ 
ms^^ 
=^^ 
new^^ 
MemoryStream^^  ,
(^^, -
)^^- .
)^^. /
{__ 
bf`` 
.`` 
	Serialize`` 
(`` 
ms`` 
,``  
data``! %
)``% &
;``& '
dataSerializedaa 
=aa  
msaa! #
.aa# $
ToArrayaa$ +
(aa+ ,
)aa, -
;aa- .
}bb @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_75bcc @
.cc@ A
GoodG2BSinkccA L
(ccL M
dataSerializedccM [
,cc\ ]
reqcc^ a
,cca b
respccc g
)cch i
;cci j
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. X
,ggX Y
exceptSerializeggZ i
)ggi j
;ggj k
}hh 	
}ii 
privatell 
staticll 
voidll 
GoodB2Gll 
(ll  
HttpRequestll  +
reqll, /
,ll/ 0
HttpResponsell1 =
respll> B
)llB C
{mm 
intnn 
datann 
;nn 
dataoo 
=oo 
intoo 
.oo 
MinValueoo 
;oo 
{qq 	
stringrr 
stringNumberrr 
=rr  !
reqrr" %
.rr% &
Paramsrr& ,
.rr, -
Getrr- 0
(rr0 1
$strrr1 7
)rr7 8
;rr8 9
tryss 
{tt 
datauu 
=uu 
intuu 
.uu 
Parseuu  
(uu  !
stringNumberuu! -
.uu- .
Trimuu. 2
(uu2 3
)uu3 4
)uu4 5
;uu5 6
}vv 
catchww 
(ww 
FormatExceptionww "
exceptNumberFormatww# 5
)ww5 6
{xx 
IOyy 
.yy 
Loggeryy 
.yy 
Logyy 
(yy 
NLogyy "
.yy" #
LogLevelyy# +
.yy+ ,
Warnyy, 0
,yy0 1
exceptNumberFormatyy2 D
,yyD E
$str	yyF Ç
)
yyÇ É
;
yyÉ Ñ
}zz 
}{{ 	
byte}} 
[}} 
]}} 
dataSerialized}} 
=}} 
null}}  $
;}}$ %
try~~ 
{ 	
BinaryFormatter
ÄÄ 
bf
ÄÄ 
=
ÄÄ  
new
ÄÄ! $
BinaryFormatter
ÄÄ% 4
(
ÄÄ4 5
)
ÄÄ5 6
;
ÄÄ6 7
using
ÅÅ 
(
ÅÅ 
var
ÅÅ 
ms
ÅÅ 
=
ÅÅ 
new
ÅÅ 
MemoryStream
ÅÅ  ,
(
ÅÅ, -
)
ÅÅ- .
)
ÅÅ. /
{
ÇÇ 
bf
ÉÉ 
.
ÉÉ 
	Serialize
ÉÉ 
(
ÉÉ 
ms
ÉÉ 
,
ÉÉ  
data
ÉÉ! %
)
ÉÉ% &
;
ÉÉ& '
dataSerialized
ÑÑ 
=
ÑÑ  
ms
ÑÑ! #
.
ÑÑ# $
ToArray
ÑÑ$ +
(
ÑÑ+ ,
)
ÑÑ, -
;
ÑÑ- .
}
ÖÖ B
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_75b
ÜÜ @
.
ÜÜ@ A
GoodB2GSink
ÜÜA L
(
ÜÜL M
dataSerialized
ÜÜM [
,
ÜÜ\ ]
req
ÜÜ^ a
,
ÜÜa b
resp
ÜÜc g
)
ÜÜh i
;
ÜÜi j
}
áá 	
catch
àà 
(
àà $
SerializationException
àà %
exceptSerialize
àà& 5
)
àà5 6
{
ââ 	
IO
ää 
.
ää 
Logger
ää 
.
ää 
Log
ää 
(
ää 
NLog
ää 
.
ää 
LogLevel
ää '
.
ää' (
Warn
ää( ,
,
ää, -
$str
ää. X
,
ääX Y
exceptSerialize
ääZ i
)
ääi j
;
ääj k
}
ãã 	
}
åå 
}éé 
}èè ∞8
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_75b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_75b :
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
,5 6
HttpRequest7 B
reqC F
,F G
HttpResponseH T
respU Y
)Y Z
{   
try!! 
{"" 	
int## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
int)) 
))) 
binForm)) #
.))# $
Deserialize))$ /
())/ 0
	memStream))0 9
)))9 :
;)): ;
}** 
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
catch// 
(// "
SerializationException// %
exceptSerialize//& 5
)//5 6
{00 	
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 
.11 
LogLevel11 '
.11' (
Warn11( ,
,11, -
$str11. Y
,11Y Z
exceptSerialize11[ j
)11j k
;11k l
}22 	
}33 
public88 

static88 
void88 
GoodG2BSink88 "
(88" #
byte88# '
[88' (
]88( )
dataSerialized88* 8
,889 :
HttpRequest88; F
req88G J
,88J K
HttpResponse88L X
resp88Y ]
)88] ^
{99 
try:: 
{;; 	
int<< 
data<< 
;<< 
var== 
binForm== 
=== 
new== 
BinaryFormatter== -
(==- .
)==. /
;==/ 0
using>> 
(>> 
var>> 
	memStream>>  
=>>! "
new>># &
MemoryStream>>' 3
(>>3 4
)>>4 5
)>>5 6
{?? 
	memStream@@ 
.@@ 
Write@@ 
(@@  
dataSerialized@@  .
,@@. /
$num@@0 1
,@@1 2
dataSerialized@@3 A
.@@A B
Length@@B H
)@@H I
;@@I J
	memStreamAA 
.AA 
SeekAA 
(AA 
$numAA  
,AA  !

SeekOriginAA" ,
.AA, -
BeginAA- 2
)AA2 3
;AA3 4
dataBB 
=BB 
(BB 
intBB 
)BB 
binFormBB #
.BB# $
DeserializeBB$ /
(BB/ 0
	memStreamBB0 9
)BB9 :
;BB: ;
}CC 
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
catchHH 
(HH "
SerializationExceptionHH %
exceptSerializeHH& 5
)HH5 6
{II 	
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ 
.JJ 
LogLevelJJ '
.JJ' (
WarnJJ( ,
,JJ, -
$strJJ. Y
,JJY Z
exceptSerializeJJ[ j
)JJj k
;JJk l
}KK 	
}LL 
publicOO 

staticOO 
voidOO 
GoodB2GSinkOO "
(OO" #
byteOO# '
[OO' (
]OO( )
dataSerializedOO* 8
,OO9 :
HttpRequestOO; F
reqOOG J
,OOJ K
HttpResponseOOL X
respOOY ]
)OO] ^
{PP 
tryQQ 
{RR 	
intSS 
dataSS 
;SS 
varTT 
binFormTT 
=TT 
newTT 
BinaryFormatterTT -
(TT- .
)TT. /
;TT/ 0
usingUU 
(UU 
varUU 
	memStreamUU  
=UU! "
newUU# &
MemoryStreamUU' 3
(UU3 4
)UU4 5
)UU5 6
{VV 
	memStreamWW 
.WW 
WriteWW 
(WW  
dataSerializedWW  .
,WW. /
$numWW0 1
,WW1 2
dataSerializedWW3 A
.WWA B
LengthWWB H
)WWH I
;WWI J
	memStreamXX 
.XX 
SeekXX 
(XX 
$numXX  
,XX  !

SeekOriginXX" ,
.XX, -
BeginXX- 2
)XX2 3
;XX3 4
dataYY 
=YY 
(YY 
intYY 
)YY 
binFormYY #
.YY# $
DeserializeYY$ /
(YY/ 0
	memStreamYY0 9
)YY9 :
;YY: ;
}ZZ 
if\\ 
(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ #
+^^$ %
data^^& *
+^^+ ,
$str^^- 2
+^^3 4
(^^5 6
$num^^6 9
/^^: ;
data^^< @
)^^@ A
+^^B C
$str^^D H
)^^H I
;^^I J
}__ 
else`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb D
)bbD E
;bbE F
}cc 
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. Y
,ggY Z
exceptSerializegg[ j
)ggj k
;ggk l
}hh 	
}ii 
}kk 
}ll Ê(
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	D
8CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_base,, @

baseObject,,A K
=,,L M
new,,N QD
7CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_bad	,,R â
(
,,â ä
)
,,ä ã
;
,,ã å

baseObject-- 
.-- 
Action-- 
(-- 
data-- 
,--  
req--! $
,--$ %
resp--& *
)--* +
;--+ ,
}.. 
public11 

override11 
void11 
Good11 
(11 
HttpRequest11 )
req11* -
,11- .
HttpResponse11/ ;
resp11< @
)11@ A
{22 
GoodG2B33 
(33 
req33 
,33 
resp33 
)33 
;33 
GoodB2G44 
(44 
req44 
,44 
resp44 
)44 
;44 
}55 
private88 
void88 
GoodG2B88 
(88 
HttpRequest88 $
req88% (
,88( )
HttpResponse88* 6
resp887 ;
)88; <
{99 
int:: 
data:: 
;:: 
data<< 
=<< 
$num<< 
;<< D
8CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_base== @

baseObject==A K
===L M
new==N QH
;CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_goodG2B	==R ç
(
==ç é
)
==é è
;
==è ê

baseObject>> 
.>> 
Action>> 
(>> 
data>> 
,>>  
req>>! $
,>>$ %
resp>>& *
)>>* +
;>>+ ,
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
HttpRequestBB $
reqBB% (
,BB( )
HttpResponseBB* 6
respBB7 ;
)BB; <
{CC 
intDD 
dataDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
stringHH 
stringNumberHH 
=HH  !
reqHH" %
.HH% &
ParamsHH& ,
.HH, -
GetHH- 0
(HH0 1
$strHH1 7
)HH7 8
;HH8 9
tryII 
{JJ 
dataKK 
=KK 
intKK 
.KK 
ParseKK  
(KK  !
stringNumberKK! -
.KK- .
TrimKK. 2
(KK2 3
)KK3 4
)KK4 5
;KK5 6
}LL 
catchMM 
(MM 
FormatExceptionMM "
exceptNumberFormatMM# 5
)MM5 6
{NN 
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO "
.OO" #
LogLevelOO# +
.OO+ ,
WarnOO, 0
,OO0 1
exceptNumberFormatOO2 D
,OOD E
$str	OOF Ç
)
OOÇ É
;
OOÉ Ñ
}PP 
}QQ 	D
8CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_baseRR @

baseObjectRRA K
=RRL M
newRRN QH
;CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_goodB2G	RRR ç
(
RRç é
)
RRé è
;
RRè ê

baseObjectSS 
.SS 
ActionSS 
(SS 
dataSS 
,SS  
reqSS! $
,SS$ %
respSS& *
)SS* +
;SS+ ,
}TT 
}VV 
}WW À
∞C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_bad.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class C
7CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_bad =
:> ?D
8CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_base@ x
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
}"" 
}## «
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_base.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
abstract 
class	 D
8CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_base G
{ 
public 

abstract 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
;N O
} 
} ¯

¥C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_goodB2G.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class G
;CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_goodB2G A
:B CD
8CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_baseD |
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
if   

(   
data   
!=   
$num   
)   
{!! 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
/""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
IO&& 
.&& 
	WriteLine&& 
(&& 
$str&& @
)&&@ A
;&&A B
}'' 	
}(( 
})) 
}** ”
¥C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_goodG2B.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class G
;CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_goodG2B A
:B CD
8CWE369_Divide_by_Zero__int_Params_Get_Web_divide_81_baseD |
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
}## 
}$$ ì(
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_01.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_01 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
string## 
stringNumber## 
=##  !
req##" %
.##% &
Params##& ,
.##, -
Get##- 0
(##0 1
$str##1 7
)##7 8
;##8 9
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&&  
(&&  !
stringNumber&&! -
.&&- .
Trim&&. 2
(&&2 3
)&&3 4
)&&4 5
;&&5 6
}'' 
catch(( 
((( 
FormatException(( "
exceptNumberFormat((# 5
)((5 6
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
exceptNumberFormat**2 D
,**D E
$str	**F Ç
)
**Ç É
;
**É Ñ
}++ 
},, 	
IO// 

.//
 
	WriteLine// 
(// 
$str// 
+// 
data// "
+//# $
$str//% *
+//+ ,
(//- .
$num//. 1
%//2 3
data//4 8
)//8 9
+//: ;
$str//< @
)//@ A
;//A B
}00 
public33 

override33 
void33 
Good33 
(33 
HttpRequest33 )
req33* -
,33- .
HttpResponse33/ ;
resp33< @
)33@ A
{44 
GoodG2B55 
(55 
req55 
,55 
resp55 
)55 
;55 
GoodB2G66 
(66 
req66 
,66 
resp66 
)66 
;66 
}77 
private:: 
void:: 
GoodG2B:: 
(:: 
HttpRequest:: $
req::% (
,::( )
HttpResponse::* 6
resp::7 ;
)::; <
{;; 
int<< 
data<< 
;<< 
data>> 
=>> 
$num>> 
;>> 
IOAA 

.AA
 
	WriteLineAA 
(AA 
$strAA 
+AA 
dataAA "
+AA# $
$strAA% *
+AA+ ,
(AA- .
$numAA. 1
%AA2 3
dataAA4 8
)AA8 9
+AA: ;
$strAA< @
)AA@ A
;AAA B
}BB 
privateEE 
voidEE 
GoodB2GEE 
(EE 
HttpRequestEE $
reqEE% (
,EE( )
HttpResponseEE* 6
respEE7 ;
)EE; <
{FF 
intGG 
dataGG 
;GG 
dataHH 
=HH 
intHH 
.HH 
MinValueHH 
;HH 
{JJ 	
stringKK 
stringNumberKK 
=KK  !
reqKK" %
.KK% &
ParamsKK& ,
.KK, -
GetKK- 0
(KK0 1
$strKK1 7
)KK7 8
;KK8 9
tryLL 
{MM 
dataNN 
=NN 
intNN 
.NN 
ParseNN  
(NN  !
stringNumberNN! -
.NN- .
TrimNN. 2
(NN2 3
)NN3 4
)NN4 5
;NN5 6
}OO 
catchPP 
(PP 
FormatExceptionPP "
exceptNumberFormatPP# 5
)PP5 6
{QQ 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$str	RRF Ç
)
RRÇ É
;
RRÉ Ñ
}SS 
}TT 	
ifVV 

(VV 
dataVV 
!=VV 
$numVV 
)VV 
{WW 	
IOXX 
.XX 
	WriteLineXX 
(XX 
$strXX 
+XX  !
dataXX" &
+XX' (
$strXX) .
+XX/ 0
(XX1 2
$numXX2 5
%XX6 7
dataXX8 <
)XX< =
+XX> ?
$strXX@ D
)XXD E
;XXE F
}YY 	
elseZZ 
{[[ 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ @
)\\@ A
;\\A B
}]] 	
}^^ 
}`` 
}aa ÛN
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_02.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_02 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
true   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
true66 
)66 
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: 
+::  !
data::" &
+::' (
$str::) .
+::/ 0
(::1 2
$num::2 5
%::6 7
data::8 <
)::< =
+::> ?
$str::@ D
)::D E
;::E F
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
falseCC 
)CC 
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
trueNN 
)NN 
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR 
+RR  !
dataRR" &
+RR' (
$strRR) .
+RR/ 0
(RR1 2
$numRR2 5
%RR6 7
dataRR8 <
)RR< =
+RR> ?
$strRR@ D
)RRD E
;RRE F
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
trueZZ 
)ZZ 
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
trueee 
)ee 
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii 
+ii  !
dataii" &
+ii' (
$strii) .
+ii/ 0
(ii1 2
$numii2 5
%ii6 7
dataii8 <
)ii< =
+ii> ?
$strii@ D
)iiD E
;iiE F
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
trueqq 
)qq 
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
false
áá 
)
áá 
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
%
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
true
ûû 
)
ûû 
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
true
¥¥ 
)
¥¥ 
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
%
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ —Q
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_03.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_03 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
$num   
==   
$num   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
$num66 
==66 
$num66 
)66 
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: 
+::  !
data::" &
+::' (
$str::) .
+::/ 0
(::1 2
$num::2 5
%::6 7
data::8 <
)::< =
+::> ?
$str::@ D
)::D E
;::E F
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
$numCC 
!=CC 
$numCC 
)CC 
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
$numNN 
==NN 
$numNN 
)NN 
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR 
+RR  !
dataRR" &
+RR' (
$strRR) .
+RR/ 0
(RR1 2
$numRR2 5
%RR6 7
dataRR8 <
)RR< =
+RR> ?
$strRR@ D
)RRD E
;RRE F
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
$numZZ 
==ZZ 
$numZZ 
)ZZ 
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
$numee 
==ee 
$numee 
)ee 
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii 
+ii  !
dataii" &
+ii' (
$strii) .
+ii/ 0
(ii1 2
$numii2 5
%ii6 7
dataii8 <
)ii< =
+ii> ?
$strii@ D
)iiD E
;iiE F
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
$numqq 
==qq 
$numqq 
)qq 
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
$num
áá 
!=
áá 
$num
áá 
)
áá 
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
%
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
$num
ûû 
==
ûû 
$num
ûû 
)
ûû 
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
$num
¥¥ 
==
¥¥ 
$num
¥¥ 
)
¥¥ 
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
%
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ „R
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_04.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_04 9
:: ;
AbstractTestCaseWeb< O
{ 
private!! 
const!! 
bool!! 
PRIVATE_CONST_TRUE!! )
=!!* +
true!!, 0
;!!0 1
private"" 
const"" 
bool"" 
PRIVATE_CONST_FALSE"" *
=""+ ,
false""- 2
;""2 3
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
HttpRequest$$ (
req$$) ,
,$$, -
HttpResponse$$. :
resp$$; ?
)$$? @
{%% 
int&& 
data&& 
;&& 
if'' 

('' 
PRIVATE_CONST_TRUE'' 
)'' 
{(( 	
data)) 
=)) 
int)) 
.)) 
MinValue)) 
;))  
{++ 
string,, 
stringNumber,, #
=,,$ %
req,,& )
.,,) *
Params,,* 0
.,,0 1
Get,,1 4
(,,4 5
$str,,5 ;
),,; <
;,,< =
try-- 
{.. 
data// 
=// 
int// 
.// 
Parse// $
(//$ %
stringNumber//% 1
.//1 2
Trim//2 6
(//6 7
)//7 8
)//8 9
;//9 :
}00 
catch11 
(11 
FormatException11 &
exceptNumberFormat11' 9
)119 :
{22 
IO33 
.33 
Logger33 
.33 
Log33 !
(33! "
NLog33" &
.33& '
LogLevel33' /
.33/ 0
Warn330 4
,334 5
exceptNumberFormat336 H
,33H I
$str	33J Ü
)
33Ü á
;
33á à
}44 
}55 
}66 	
else77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
if== 

(== 
PRIVATE_CONST_TRUE== 
)== 
{>> 	
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA 
+AA  !
dataAA" &
+AA' (
$strAA) .
+AA/ 0
(AA1 2
$numAA2 5
%AA6 7
dataAA8 <
)AA< =
+AA> ?
$strAA@ D
)AAD E
;AAE F
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
HttpRequestGG %
reqGG& )
,GG) *
HttpResponseGG+ 7
respGG8 <
)GG< =
{HH 
intII 
dataII 
;II 
ifJJ 

(JJ 
PRIVATE_CONST_FALSEJJ 
)JJ  
{KK 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
ifUU 

(UU 
PRIVATE_CONST_TRUEUU 
)UU 
{VV 	
IOYY 
.YY 
	WriteLineYY 
(YY 
$strYY 
+YY  !
dataYY" &
+YY' (
$strYY) .
+YY/ 0
(YY1 2
$numYY2 5
%YY6 7
dataYY8 <
)YY< =
+YY> ?
$strYY@ D
)YYD E
;YYE F
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
int`` 
data`` 
;`` 
ifaa 

(aa 
PRIVATE_CONST_TRUEaa 
)aa 
{bb 	
datadd 
=dd 
$numdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
$numjj 
;jj 
}kk 	
ifll 

(ll 
PRIVATE_CONST_TRUEll 
)ll 
{mm 	
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp 
+pp  !
datapp" &
+pp' (
$strpp) .
+pp/ 0
(pp1 2
$numpp2 5
%pp6 7
datapp8 <
)pp< =
+pp> ?
$strpp@ D
)ppD E
;ppE F
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
intww 
dataww 
;ww 
ifxx 

(xx 
PRIVATE_CONST_TRUExx 
)xx 
{yy 	
datazz 
=zz 
intzz 
.zz 
MinValuezz 
;zz  
{|| 
string}} 
stringNumber}} #
=}}$ %
req}}& )
.}}) *
Params}}* 0
.}}0 1
Get}}1 4
(}}4 5
$str}}5 ;
)}}; <
;}}< =
try~~ 
{ 
data
ÄÄ 
=
ÄÄ 
int
ÄÄ 
.
ÄÄ 
Parse
ÄÄ $
(
ÄÄ$ %
stringNumber
ÄÄ% 1
.
ÄÄ1 2
Trim
ÄÄ2 6
(
ÄÄ6 7
)
ÄÄ7 8
)
ÄÄ8 9
;
ÄÄ9 :
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
FormatException
ÇÇ & 
exceptNumberFormat
ÇÇ' 9
)
ÇÇ9 :
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ 
.
ÑÑ 
Log
ÑÑ !
(
ÑÑ! "
NLog
ÑÑ" &
.
ÑÑ& '
LogLevel
ÑÑ' /
.
ÑÑ/ 0
Warn
ÑÑ0 4
,
ÑÑ4 5 
exceptNumberFormat
ÑÑ6 H
,
ÑÑH I
$strÑÑJ Ü
)ÑÑÜ á
;ÑÑá à
}
ÖÖ 
}
ÜÜ 
}
áá 	
else
àà 
{
ââ 	
data
åå 
=
åå 
$num
åå 
;
åå 
}
çç 	
if
éé 

(
éé !
PRIVATE_CONST_FALSE
éé 
)
éé  
{
èè 	
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë /
)
ëë/ 0
;
ëë0 1
}
íí 	
else
ìì 
{
îî 	
if
ññ 
(
ññ 
data
ññ 
!=
ññ 
$num
ññ 
)
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò #
+
òò$ %
data
òò& *
+
òò+ ,
$str
òò- 2
+
òò3 4
(
òò5 6
$num
òò6 9
%
òò: ;
data
òò< @
)
òò@ A
+
òòB C
$str
òòD H
)
òòH I
;
òòI J
}
ôô 
else
öö 
{
õõ 
IO
úú 
.
úú 
	WriteLine
úú 
(
úú 
$str
úú D
)
úúD E
;
úúE F
}
ùù 
}
ûû 	
}
üü 
private
¢¢ 
void
¢¢ 
GoodB2G2
¢¢ 
(
¢¢ 
HttpRequest
¢¢ %
req
¢¢& )
,
¢¢) *
HttpResponse
¢¢+ 7
resp
¢¢8 <
)
¢¢< =
{
££ 
int
§§ 
data
§§ 
;
§§ 
if
•• 

(
••  
PRIVATE_CONST_TRUE
•• 
)
•• 
{
¶¶ 	
data
ßß 
=
ßß 
int
ßß 
.
ßß 
MinValue
ßß 
;
ßß  
{
©© 
string
™™ 
stringNumber
™™ #
=
™™$ %
req
™™& )
.
™™) *
Params
™™* 0
.
™™0 1
Get
™™1 4
(
™™4 5
$str
™™5 ;
)
™™; <
;
™™< =
try
´´ 
{
¨¨ 
data
≠≠ 
=
≠≠ 
int
≠≠ 
.
≠≠ 
Parse
≠≠ $
(
≠≠$ %
stringNumber
≠≠% 1
.
≠≠1 2
Trim
≠≠2 6
(
≠≠6 7
)
≠≠7 8
)
≠≠8 9
;
≠≠9 :
}
ÆÆ 
catch
ØØ 
(
ØØ 
FormatException
ØØ & 
exceptNumberFormat
ØØ' 9
)
ØØ9 :
{
∞∞ 
IO
±± 
.
±± 
Logger
±± 
.
±± 
Log
±± !
(
±±! "
NLog
±±" &
.
±±& '
LogLevel
±±' /
.
±±/ 0
Warn
±±0 4
,
±±4 5 
exceptNumberFormat
±±6 H
,
±±H I
$str±±J Ü
)±±Ü á
;±±á à
}
≤≤ 
}
≥≥ 
}
¥¥ 	
else
µµ 
{
∂∂ 	
data
ππ 
=
ππ 
$num
ππ 
;
ππ 
}
∫∫ 	
if
ªª 

(
ªª  
PRIVATE_CONST_TRUE
ªª 
)
ªª 
{
ºº 	
if
ææ 
(
ææ 
data
ææ 
!=
ææ 
$num
ææ 
)
ææ 
{
øø 
IO
¿¿ 
.
¿¿ 
	WriteLine
¿¿ 
(
¿¿ 
$str
¿¿ #
+
¿¿$ %
data
¿¿& *
+
¿¿+ ,
$str
¿¿- 2
+
¿¿3 4
(
¿¿5 6
$num
¿¿6 9
%
¿¿: ;
data
¿¿< @
)
¿¿@ A
+
¿¿B C
$str
¿¿D H
)
¿¿H I
;
¿¿I J
}
¡¡ 
else
¬¬ 
{
√√ 
IO
ƒƒ 
.
ƒƒ 
	WriteLine
ƒƒ 
(
ƒƒ 
$str
ƒƒ D
)
ƒƒD E
;
ƒƒE F
}
≈≈ 
}
∆∆ 	
}
«« 
public
…… 

override
…… 
void
…… 
Good
…… 
(
…… 
HttpRequest
…… )
req
……* -
,
……- .
HttpResponse
……/ ;
resp
……< @
)
……@ A
{
   
GoodG2B1
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodG2B2
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G1
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G2
ŒŒ 
(
ŒŒ 
req
ŒŒ 
,
ŒŒ 
resp
ŒŒ 
)
ŒŒ 
;
ŒŒ 
}
œœ 
}—— 
}““ œQ
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_05.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_05 9
:: ;
AbstractTestCaseWeb< O
{ 
private   
bool   
privateTrue   
=   
true   #
;  # $
private!! 
bool!! 
privateFalse!! 
=!! 
false!!  %
;!!% &
public## 

override## 
void## 
Bad## 
(## 
HttpRequest## (
req##) ,
,##, -
HttpResponse##. :
resp##; ?
)##? @
{$$ 
int%% 
data%% 
;%% 
if&& 

(&& 
privateTrue&& 
)&& 
{'' 	
data(( 
=(( 
int(( 
.(( 
MinValue(( 
;((  
{** 
string++ 
stringNumber++ #
=++$ %
req++& )
.++) *
Params++* 0
.++0 1
Get++1 4
(++4 5
$str++5 ;
)++; <
;++< =
try,, 
{-- 
data.. 
=.. 
int.. 
... 
Parse.. $
(..$ %
stringNumber..% 1
...1 2
Trim..2 6
(..6 7
)..7 8
)..8 9
;..9 :
}// 
catch00 
(00 
FormatException00 &
exceptNumberFormat00' 9
)009 :
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptNumberFormat226 H
,22H I
$str	22J Ü
)
22Ü á
;
22á à
}33 
}44 
}55 	
else66 
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
if<< 

(<< 
privateTrue<< 
)<< 
{== 	
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ 
+@@  !
data@@" &
+@@' (
$str@@) .
+@@/ 0
(@@1 2
$num@@2 5
%@@6 7
data@@8 <
)@@< =
+@@> ?
$str@@@ D
)@@D E
;@@E F
}AA 	
}BB 
privateFF 
voidFF 
GoodG2B1FF 
(FF 
HttpRequestFF %
reqFF& )
,FF) *
HttpResponseFF+ 7
respFF8 <
)FF< =
{GG 
intHH 
dataHH 
;HH 
ifII 

(II 
privateFalseII 
)II 
{JJ 	
dataMM 
=MM 
$numMM 
;MM 
}NN 	
elseOO 
{PP 	
dataRR 
=RR 
$numRR 
;RR 
}SS 	
ifTT 

(TT 
privateTrueTT 
)TT 
{UU 	
IOXX 
.XX 
	WriteLineXX 
(XX 
$strXX 
+XX  !
dataXX" &
+XX' (
$strXX) .
+XX/ 0
(XX1 2
$numXX2 5
%XX6 7
dataXX8 <
)XX< =
+XX> ?
$strXX@ D
)XXD E
;XXE F
}YY 	
}ZZ 
private]] 
void]] 
GoodG2B2]] 
(]] 
HttpRequest]] %
req]]& )
,]]) *
HttpResponse]]+ 7
resp]]8 <
)]]< =
{^^ 
int__ 
data__ 
;__ 
if`` 

(`` 
privateTrue`` 
)`` 
{aa 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
elseee 
{ff 	
dataii 
=ii 
$numii 
;ii 
}jj 	
ifkk 

(kk 
privateTruekk 
)kk 
{ll 	
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo 
+oo  !
dataoo" &
+oo' (
$stroo) .
+oo/ 0
(oo1 2
$numoo2 5
%oo6 7
dataoo8 <
)oo< =
+oo> ?
$stroo@ D
)ooD E
;ooE F
}pp 	
}qq 
privatett 
voidtt 
GoodB2G1tt 
(tt 
HttpRequesttt %
reqtt& )
,tt) *
HttpResponsett+ 7
resptt8 <
)tt< =
{uu 
intvv 
datavv 
;vv 
ifww 

(ww 
privateTrueww 
)ww 
{xx 	
datayy 
=yy 
intyy 
.yy 
MinValueyy 
;yy  
{{{ 
string|| 
stringNumber|| #
=||$ %
req||& )
.||) *
Params||* 0
.||0 1
Get||1 4
(||4 5
$str||5 ;
)||; <
;||< =
try}} 
{~~ 
data 
= 
int 
. 
Parse $
($ %
stringNumber% 1
.1 2
Trim2 6
(6 7
)7 8
)8 9
;9 :
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
FormatException
ÅÅ & 
exceptNumberFormat
ÅÅ' 9
)
ÅÅ9 :
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
Logger
ÉÉ 
.
ÉÉ 
Log
ÉÉ !
(
ÉÉ! "
NLog
ÉÉ" &
.
ÉÉ& '
LogLevel
ÉÉ' /
.
ÉÉ/ 0
Warn
ÉÉ0 4
,
ÉÉ4 5 
exceptNumberFormat
ÉÉ6 H
,
ÉÉH I
$strÉÉJ Ü
)ÉÉÜ á
;ÉÉá à
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 	
else
áá 
{
àà 	
data
ãã 
=
ãã 
$num
ãã 
;
ãã 
}
åå 	
if
çç 

(
çç 
privateFalse
çç 
)
çç 
{
éé 	
IO
êê 
.
êê 
	WriteLine
êê 
(
êê 
$str
êê /
)
êê/ 0
;
êê0 1
}
ëë 	
else
íí 
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
%
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
private
°° 
void
°° 
GoodB2G2
°° 
(
°° 
HttpRequest
°° %
req
°°& )
,
°°) *
HttpResponse
°°+ 7
resp
°°8 <
)
°°< =
{
¢¢ 
int
££ 
data
££ 
;
££ 
if
§§ 

(
§§ 
privateTrue
§§ 
)
§§ 
{
•• 	
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
MinValue
¶¶ 
;
¶¶  
{
®® 
string
©© 
stringNumber
©© #
=
©©$ %
req
©©& )
.
©©) *
Params
©©* 0
.
©©0 1
Get
©©1 4
(
©©4 5
$str
©©5 ;
)
©©; <
;
©©< =
try
™™ 
{
´´ 
data
¨¨ 
=
¨¨ 
int
¨¨ 
.
¨¨ 
Parse
¨¨ $
(
¨¨$ %
stringNumber
¨¨% 1
.
¨¨1 2
Trim
¨¨2 6
(
¨¨6 7
)
¨¨7 8
)
¨¨8 9
;
¨¨9 :
}
≠≠ 
catch
ÆÆ 
(
ÆÆ 
FormatException
ÆÆ & 
exceptNumberFormat
ÆÆ' 9
)
ÆÆ9 :
{
ØØ 
IO
∞∞ 
.
∞∞ 
Logger
∞∞ 
.
∞∞ 
Log
∞∞ !
(
∞∞! "
NLog
∞∞" &
.
∞∞& '
LogLevel
∞∞' /
.
∞∞/ 0
Warn
∞∞0 4
,
∞∞4 5 
exceptNumberFormat
∞∞6 H
,
∞∞H I
$str∞∞J Ü
)∞∞Ü á
;∞∞á à
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
privateTrue
∫∫ 
)
∫∫ 
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
%
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— òT
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_06.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_06 9
:: ;
AbstractTestCaseWeb< O
{ 
private   
const   
int   
PRIVATE_CONST_FIVE   (
=  ) *
$num  + ,
;  , -
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
int$$ 
data$$ 
;$$ 
if%% 

(%% 
PRIVATE_CONST_FIVE%% 
==%%  
$num%%  !
)%%! "
{&& 	
data'' 
='' 
int'' 
.'' 
MinValue'' 
;''  
{)) 
string** 
stringNumber** #
=**$ %
req**& )
.**) *
Params*** 0
.**0 1
Get**1 4
(**4 5
$str**5 ;
)**; <
;**< =
try++ 
{,, 
data-- 
=-- 
int-- 
.-- 
Parse-- $
(--$ %
stringNumber--% 1
.--1 2
Trim--2 6
(--6 7
)--7 8
)--8 9
;--9 :
}.. 
catch// 
(// 
FormatException// &
exceptNumberFormat//' 9
)//9 :
{00 
IO11 
.11 
Logger11 
.11 
Log11 !
(11! "
NLog11" &
.11& '
LogLevel11' /
.11/ 0
Warn110 4
,114 5
exceptNumberFormat116 H
,11H I
$str	11J Ü
)
11Ü á
;
11á à
}22 
}33 
}44 	
else55 
{66 	
data99 
=99 
$num99 
;99 
}:: 	
if;; 

(;; 
PRIVATE_CONST_FIVE;; 
==;;  
$num;;  !
);;! "
{<< 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? 
+??  !
data??" &
+??' (
$str??) .
+??/ 0
(??1 2
$num??2 5
%??6 7
data??8 <
)??< =
+??> ?
$str??@ D
)??D E
;??E F
}@@ 	
}AA 
privateEE 
voidEE 
GoodG2B1EE 
(EE 
HttpRequestEE %
reqEE& )
,EE) *
HttpResponseEE+ 7
respEE8 <
)EE< =
{FF 
intGG 
dataGG 
;GG 
ifHH 

(HH 
PRIVATE_CONST_FIVEHH 
!=HH  
$numHH  !
)HH! "
{II 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
elseNN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
ifSS 

(SS 
PRIVATE_CONST_FIVESS 
==SS  
$numSS  !
)SS! "
{TT 	
IOWW 
.WW 
	WriteLineWW 
(WW 
$strWW 
+WW  !
dataWW" &
+WW' (
$strWW) .
+WW/ 0
(WW1 2
$numWW2 5
%WW6 7
dataWW8 <
)WW< =
+WW> ?
$strWW@ D
)WWD E
;WWE F
}XX 	
}YY 
private\\ 
void\\ 
GoodG2B2\\ 
(\\ 
HttpRequest\\ %
req\\& )
,\\) *
HttpResponse\\+ 7
resp\\8 <
)\\< =
{]] 
int^^ 
data^^ 
;^^ 
if__ 

(__ 
PRIVATE_CONST_FIVE__ 
==__  
$num__  !
)__! "
{`` 	
databb 
=bb 
$numbb 
;bb 
}cc 	
elsedd 
{ee 	
datahh 
=hh 
$numhh 
;hh 
}ii 	
ifjj 

(jj 
PRIVATE_CONST_FIVEjj 
==jj  
$numjj  !
)jj! "
{kk 	
IOnn 
.nn 
	WriteLinenn 
(nn 
$strnn 
+nn  !
datann" &
+nn' (
$strnn) .
+nn/ 0
(nn1 2
$numnn2 5
%nn6 7
datann8 <
)nn< =
+nn> ?
$strnn@ D
)nnD E
;nnE F
}oo 	
}pp 
privatess 
voidss 
GoodB2G1ss 
(ss 
HttpRequestss %
reqss& )
,ss) *
HttpResponsess+ 7
respss8 <
)ss< =
{tt 
intuu 
datauu 
;uu 
ifvv 

(vv 
PRIVATE_CONST_FIVEvv 
==vv  
$numvv  !
)vv! "
{ww 	
dataxx 
=xx 
intxx 
.xx 
MinValuexx 
;xx  
{zz 
string{{ 
stringNumber{{ #
={{$ %
req{{& )
.{{) *
Params{{* 0
.{{0 1
Get{{1 4
({{4 5
$str{{5 ;
){{; <
;{{< =
try|| 
{}} 
data~~ 
=~~ 
int~~ 
.~~ 
Parse~~ $
(~~$ %
stringNumber~~% 1
.~~1 2
Trim~~2 6
(~~6 7
)~~7 8
)~~8 9
;~~9 :
} 
catch
ÄÄ 
(
ÄÄ 
FormatException
ÄÄ & 
exceptNumberFormat
ÄÄ' 9
)
ÄÄ9 :
{
ÅÅ 
IO
ÇÇ 
.
ÇÇ 
Logger
ÇÇ 
.
ÇÇ 
Log
ÇÇ !
(
ÇÇ! "
NLog
ÇÇ" &
.
ÇÇ& '
LogLevel
ÇÇ' /
.
ÇÇ/ 0
Warn
ÇÇ0 4
,
ÇÇ4 5 
exceptNumberFormat
ÇÇ6 H
,
ÇÇH I
$strÇÇJ Ü
)ÇÇÜ á
;ÇÇá à
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
else
ÜÜ 
{
áá 	
data
ää 
=
ää 
$num
ää 
;
ää 
}
ãã 	
if
åå 

(
åå  
PRIVATE_CONST_FIVE
åå 
!=
åå  
$num
åå  !
)
åå! "
{
çç 	
IO
èè 
.
èè 
	WriteLine
èè 
(
èè 
$str
èè /
)
èè/ 0
;
èè0 1
}
êê 	
else
ëë 
{
íí 	
if
îî 
(
îî 
data
îî 
!=
îî 
$num
îî 
)
îî 
{
ïï 
IO
ññ 
.
ññ 
	WriteLine
ññ 
(
ññ 
$str
ññ #
+
ññ$ %
data
ññ& *
+
ññ+ ,
$str
ññ- 2
+
ññ3 4
(
ññ5 6
$num
ññ6 9
%
ññ: ;
data
ññ< @
)
ññ@ A
+
ññB C
$str
ññD H
)
ññH I
;
ññI J
}
óó 
else
òò 
{
ôô 
IO
öö 
.
öö 
	WriteLine
öö 
(
öö 
$str
öö D
)
ööD E
;
ööE F
}
õõ 
}
úú 	
}
ùù 
private
†† 
void
†† 
GoodB2G2
†† 
(
†† 
HttpRequest
†† %
req
††& )
,
††) *
HttpResponse
††+ 7
resp
††8 <
)
††< =
{
°° 
int
¢¢ 
data
¢¢ 
;
¢¢ 
if
££ 

(
££  
PRIVATE_CONST_FIVE
££ 
==
££  
$num
££  !
)
££! "
{
§§ 	
data
•• 
=
•• 
int
•• 
.
•• 
MinValue
•• 
;
••  
{
ßß 
string
®® 
stringNumber
®® #
=
®®$ %
req
®®& )
.
®®) *
Params
®®* 0
.
®®0 1
Get
®®1 4
(
®®4 5
$str
®®5 ;
)
®®; <
;
®®< =
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ 
.
´´ 
Parse
´´ $
(
´´$ %
stringNumber
´´% 1
.
´´1 2
Trim
´´2 6
(
´´6 7
)
´´7 8
)
´´8 9
;
´´9 :
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ & 
exceptNumberFormat
≠≠' 9
)
≠≠9 :
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ 
.
ØØ 
Log
ØØ !
(
ØØ! "
NLog
ØØ" &
.
ØØ& '
LogLevel
ØØ' /
.
ØØ/ 0
Warn
ØØ0 4
,
ØØ4 5 
exceptNumberFormat
ØØ6 H
,
ØØH I
$strØØJ Ü
)ØØÜ á
;ØØá à
}
∞∞ 
}
±± 
}
≤≤ 	
else
≥≥ 
{
¥¥ 	
data
∑∑ 
=
∑∑ 
$num
∑∑ 
;
∑∑ 
}
∏∏ 	
if
ππ 

(
ππ  
PRIVATE_CONST_FIVE
ππ 
==
ππ  
$num
ππ  !
)
ππ! "
{
∫∫ 	
if
ºº 
(
ºº 
data
ºº 
!=
ºº 
$num
ºº 
)
ºº 
{
ΩΩ 
IO
ææ 
.
ææ 
	WriteLine
ææ 
(
ææ 
$str
ææ #
+
ææ$ %
data
ææ& *
+
ææ+ ,
$str
ææ- 2
+
ææ3 4
(
ææ5 6
$num
ææ6 9
%
ææ: ;
data
ææ< @
)
ææ@ A
+
ææB C
$str
ææD H
)
ææH I
;
ææI J
}
øø 
else
¿¿ 
{
¡¡ 
IO
¬¬ 
.
¬¬ 
	WriteLine
¬¬ 
(
¬¬ 
$str
¬¬ D
)
¬¬D E
;
¬¬E F
}
√√ 
}
ƒƒ 	
}
≈≈ 
public
«« 

override
«« 
void
«« 
Good
«« 
(
«« 
HttpRequest
«« )
req
««* -
,
««- .
HttpResponse
««/ ;
resp
««< @
)
««@ A
{
»» 
GoodG2B1
…… 
(
…… 
req
…… 
,
…… 
resp
…… 
)
…… 
;
…… 
GoodG2B2
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodB2G1
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G2
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 
}œœ 
}–– ∏S
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_07.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_07 9
:: ;
AbstractTestCaseWeb< O
{ 
private   
int   
privateFive   
=   
$num   
;    
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
int$$ 
data$$ 
;$$ 
if%% 

(%% 
privateFive%% 
==%% 
$num%% 
)%% 
{&& 	
data'' 
='' 
int'' 
.'' 
MinValue'' 
;''  
{)) 
string** 
stringNumber** #
=**$ %
req**& )
.**) *
Params*** 0
.**0 1
Get**1 4
(**4 5
$str**5 ;
)**; <
;**< =
try++ 
{,, 
data-- 
=-- 
int-- 
.-- 
Parse-- $
(--$ %
stringNumber--% 1
.--1 2
Trim--2 6
(--6 7
)--7 8
)--8 9
;--9 :
}.. 
catch// 
(// 
FormatException// &
exceptNumberFormat//' 9
)//9 :
{00 
IO11 
.11 
Logger11 
.11 
Log11 !
(11! "
NLog11" &
.11& '
LogLevel11' /
.11/ 0
Warn110 4
,114 5
exceptNumberFormat116 H
,11H I
$str	11J Ü
)
11Ü á
;
11á à
}22 
}33 
}44 	
else55 
{66 	
data99 
=99 
$num99 
;99 
}:: 	
if;; 

(;; 
privateFive;; 
==;; 
$num;; 
);; 
{<< 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? 
+??  !
data??" &
+??' (
$str??) .
+??/ 0
(??1 2
$num??2 5
%??6 7
data??8 <
)??< =
+??> ?
$str??@ D
)??D E
;??E F
}@@ 	
}AA 
privateEE 
voidEE 
GoodG2B1EE 
(EE 
HttpRequestEE %
reqEE& )
,EE) *
HttpResponseEE+ 7
respEE8 <
)EE< =
{FF 
intGG 
dataGG 
;GG 
ifHH 

(HH 
privateFiveHH 
!=HH 
$numHH 
)HH 
{II 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
elseNN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
ifSS 

(SS 
privateFiveSS 
==SS 
$numSS 
)SS 
{TT 	
IOWW 
.WW 
	WriteLineWW 
(WW 
$strWW 
+WW  !
dataWW" &
+WW' (
$strWW) .
+WW/ 0
(WW1 2
$numWW2 5
%WW6 7
dataWW8 <
)WW< =
+WW> ?
$strWW@ D
)WWD E
;WWE F
}XX 	
}YY 
private\\ 
void\\ 
GoodG2B2\\ 
(\\ 
HttpRequest\\ %
req\\& )
,\\) *
HttpResponse\\+ 7
resp\\8 <
)\\< =
{]] 
int^^ 
data^^ 
;^^ 
if__ 

(__ 
privateFive__ 
==__ 
$num__ 
)__ 
{`` 	
databb 
=bb 
$numbb 
;bb 
}cc 	
elsedd 
{ee 	
datahh 
=hh 
$numhh 
;hh 
}ii 	
ifjj 

(jj 
privateFivejj 
==jj 
$numjj 
)jj 
{kk 	
IOnn 
.nn 
	WriteLinenn 
(nn 
$strnn 
+nn  !
datann" &
+nn' (
$strnn) .
+nn/ 0
(nn1 2
$numnn2 5
%nn6 7
datann8 <
)nn< =
+nn> ?
$strnn@ D
)nnD E
;nnE F
}oo 	
}pp 
privatess 
voidss 
GoodB2G1ss 
(ss 
HttpRequestss %
reqss& )
,ss) *
HttpResponsess+ 7
respss8 <
)ss< =
{tt 
intuu 
datauu 
;uu 
ifvv 

(vv 
privateFivevv 
==vv 
$numvv 
)vv 
{ww 	
dataxx 
=xx 
intxx 
.xx 
MinValuexx 
;xx  
{zz 
string{{ 
stringNumber{{ #
={{$ %
req{{& )
.{{) *
Params{{* 0
.{{0 1
Get{{1 4
({{4 5
$str{{5 ;
){{; <
;{{< =
try|| 
{}} 
data~~ 
=~~ 
int~~ 
.~~ 
Parse~~ $
(~~$ %
stringNumber~~% 1
.~~1 2
Trim~~2 6
(~~6 7
)~~7 8
)~~8 9
;~~9 :
} 
catch
ÄÄ 
(
ÄÄ 
FormatException
ÄÄ & 
exceptNumberFormat
ÄÄ' 9
)
ÄÄ9 :
{
ÅÅ 
IO
ÇÇ 
.
ÇÇ 
Logger
ÇÇ 
.
ÇÇ 
Log
ÇÇ !
(
ÇÇ! "
NLog
ÇÇ" &
.
ÇÇ& '
LogLevel
ÇÇ' /
.
ÇÇ/ 0
Warn
ÇÇ0 4
,
ÇÇ4 5 
exceptNumberFormat
ÇÇ6 H
,
ÇÇH I
$strÇÇJ Ü
)ÇÇÜ á
;ÇÇá à
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
else
ÜÜ 
{
áá 	
data
ää 
=
ää 
$num
ää 
;
ää 
}
ãã 	
if
åå 

(
åå 
privateFive
åå 
!=
åå 
$num
åå 
)
åå 
{
çç 	
IO
èè 
.
èè 
	WriteLine
èè 
(
èè 
$str
èè /
)
èè/ 0
;
èè0 1
}
êê 	
else
ëë 
{
íí 	
if
îî 
(
îî 
data
îî 
!=
îî 
$num
îî 
)
îî 
{
ïï 
IO
ññ 
.
ññ 
	WriteLine
ññ 
(
ññ 
$str
ññ #
+
ññ$ %
data
ññ& *
+
ññ+ ,
$str
ññ- 2
+
ññ3 4
(
ññ5 6
$num
ññ6 9
%
ññ: ;
data
ññ< @
)
ññ@ A
+
ññB C
$str
ññD H
)
ññH I
;
ññI J
}
óó 
else
òò 
{
ôô 
IO
öö 
.
öö 
	WriteLine
öö 
(
öö 
$str
öö D
)
ööD E
;
ööE F
}
õõ 
}
úú 	
}
ùù 
private
†† 
void
†† 
GoodB2G2
†† 
(
†† 
HttpRequest
†† %
req
††& )
,
††) *
HttpResponse
††+ 7
resp
††8 <
)
††< =
{
°° 
int
¢¢ 
data
¢¢ 
;
¢¢ 
if
££ 

(
££ 
privateFive
££ 
==
££ 
$num
££ 
)
££ 
{
§§ 	
data
•• 
=
•• 
int
•• 
.
•• 
MinValue
•• 
;
••  
{
ßß 
string
®® 
stringNumber
®® #
=
®®$ %
req
®®& )
.
®®) *
Params
®®* 0
.
®®0 1
Get
®®1 4
(
®®4 5
$str
®®5 ;
)
®®; <
;
®®< =
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ 
.
´´ 
Parse
´´ $
(
´´$ %
stringNumber
´´% 1
.
´´1 2
Trim
´´2 6
(
´´6 7
)
´´7 8
)
´´8 9
;
´´9 :
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ & 
exceptNumberFormat
≠≠' 9
)
≠≠9 :
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ 
.
ØØ 
Log
ØØ !
(
ØØ! "
NLog
ØØ" &
.
ØØ& '
LogLevel
ØØ' /
.
ØØ/ 0
Warn
ØØ0 4
,
ØØ4 5 
exceptNumberFormat
ØØ6 H
,
ØØH I
$strØØJ Ü
)ØØÜ á
;ØØá à
}
∞∞ 
}
±± 
}
≤≤ 	
else
≥≥ 
{
¥¥ 	
data
∑∑ 
=
∑∑ 
$num
∑∑ 
;
∑∑ 
}
∏∏ 	
if
ππ 

(
ππ 
privateFive
ππ 
==
ππ 
$num
ππ 
)
ππ 
{
∫∫ 	
if
ºº 
(
ºº 
data
ºº 
!=
ºº 
$num
ºº 
)
ºº 
{
ΩΩ 
IO
ææ 
.
ææ 
	WriteLine
ææ 
(
ææ 
$str
ææ #
+
ææ$ %
data
ææ& *
+
ææ+ ,
$str
ææ- 2
+
ææ3 4
(
ææ5 6
$num
ææ6 9
%
ææ: ;
data
ææ< @
)
ææ@ A
+
ææB C
$str
ææD H
)
ææH I
;
ææI J
}
øø 
else
¿¿ 
{
¡¡ 
IO
¬¬ 
.
¬¬ 
	WriteLine
¬¬ 
(
¬¬ 
$str
¬¬ D
)
¬¬D E
;
¬¬E F
}
√√ 
}
ƒƒ 	
}
≈≈ 
public
«« 

override
«« 
void
«« 
Good
«« 
(
«« 
HttpRequest
«« )
req
««* -
,
««- .
HttpResponse
««/ ;
resp
««< @
)
««@ A
{
»» 
GoodG2B1
…… 
(
…… 
req
…… 
,
…… 
resp
…… 
)
…… 
;
…… 
GoodG2B2
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodB2G1
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G2
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 
}œœ 
}–– …V
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_08.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_08 9
:: ;
AbstractTestCaseWeb< O
{ 
private   
static   
bool   
PrivateReturnsTrue   *
(  * +
)  + ,
{!! 
return"" 
true"" 
;"" 
}## 
private%% 
static%% 
bool%% 
PrivateReturnsFalse%% +
(%%+ ,
)%%, -
{&& 
return'' 
false'' 
;'' 
}(( 
public** 

override** 
void** 
Bad** 
(** 
HttpRequest** (
req**) ,
,**, -
HttpResponse**. :
resp**; ?
)**? @
{++ 
int,, 
data,, 
;,, 
if-- 

(-- 
PrivateReturnsTrue-- 
(-- 
)--  
)--  !
{.. 	
data// 
=// 
int// 
.// 
MinValue// 
;//  
{11 
string22 
stringNumber22 #
=22$ %
req22& )
.22) *
Params22* 0
.220 1
Get221 4
(224 5
$str225 ;
)22; <
;22< =
try33 
{44 
data55 
=55 
int55 
.55 
Parse55 $
(55$ %
stringNumber55% 1
.551 2
Trim552 6
(556 7
)557 8
)558 9
;559 :
}66 
catch77 
(77 
FormatException77 &
exceptNumberFormat77' 9
)779 :
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptNumberFormat996 H
,99H I
$str	99J Ü
)
99Ü á
;
99á à
}:: 
};; 
}<< 	
else== 
{>> 	
dataAA 
=AA 
$numAA 
;AA 
}BB 	
ifCC 

(CC 
PrivateReturnsTrueCC 
(CC 
)CC  
)CC  !
{DD 	
IOGG 
.GG 
	WriteLineGG 
(GG 
$strGG 
+GG  !
dataGG" &
+GG' (
$strGG) .
+GG/ 0
(GG1 2
$numGG2 5
%GG6 7
dataGG8 <
)GG< =
+GG> ?
$strGG@ D
)GGD E
;GGE F
}HH 	
}II 
privateMM 
voidMM 
GoodG2B1MM 
(MM 
HttpRequestMM %
reqMM& )
,MM) *
HttpResponseMM+ 7
respMM8 <
)MM< =
{NN 
intOO 
dataOO 
;OO 
ifPP 

(PP 
PrivateReturnsFalsePP 
(PP  
)PP  !
)PP! "
{QQ 	
dataTT 
=TT 
$numTT 
;TT 
}UU 	
elseVV 
{WW 	
dataYY 
=YY 
$numYY 
;YY 
}ZZ 	
if[[ 

([[ 
PrivateReturnsTrue[[ 
([[ 
)[[  
)[[  !
{\\ 	
IO__ 
.__ 
	WriteLine__ 
(__ 
$str__ 
+__  !
data__" &
+__' (
$str__) .
+__/ 0
(__1 2
$num__2 5
%__6 7
data__8 <
)__< =
+__> ?
$str__@ D
)__D E
;__E F
}`` 	
}aa 
privatedd 
voiddd 
GoodG2B2dd 
(dd 
HttpRequestdd %
reqdd& )
,dd) *
HttpResponsedd+ 7
respdd8 <
)dd< =
{ee 
intff 
dataff 
;ff 
ifgg 

(gg 
PrivateReturnsTruegg 
(gg 
)gg  
)gg  !
{hh 	
datajj 
=jj 
$numjj 
;jj 
}kk 	
elsell 
{mm 	
datapp 
=pp 
$numpp 
;pp 
}qq 	
ifrr 

(rr 
PrivateReturnsTruerr 
(rr 
)rr  
)rr  !
{ss 	
IOvv 
.vv 
	WriteLinevv 
(vv 
$strvv 
+vv  !
datavv" &
+vv' (
$strvv) .
+vv/ 0
(vv1 2
$numvv2 5
%vv6 7
datavv8 <
)vv< =
+vv> ?
$strvv@ D
)vvD E
;vvE F
}ww 	
}xx 
private{{ 
void{{ 
GoodB2G1{{ 
({{ 
HttpRequest{{ %
req{{& )
,{{) *
HttpResponse{{+ 7
resp{{8 <
){{< =
{|| 
int}} 
data}} 
;}} 
if~~ 

(~~ 
PrivateReturnsTrue~~ 
(~~ 
)~~  
)~~  !
{ 	
data
ÄÄ 
=
ÄÄ 
int
ÄÄ 
.
ÄÄ 
MinValue
ÄÄ 
;
ÄÄ  
{
ÇÇ 
string
ÉÉ 
stringNumber
ÉÉ #
=
ÉÉ$ %
req
ÉÉ& )
.
ÉÉ) *
Params
ÉÉ* 0
.
ÉÉ0 1
Get
ÉÉ1 4
(
ÉÉ4 5
$str
ÉÉ5 ;
)
ÉÉ; <
;
ÉÉ< =
try
ÑÑ 
{
ÖÖ 
data
ÜÜ 
=
ÜÜ 
int
ÜÜ 
.
ÜÜ 
Parse
ÜÜ $
(
ÜÜ$ %
stringNumber
ÜÜ% 1
.
ÜÜ1 2
Trim
ÜÜ2 6
(
ÜÜ6 7
)
ÜÜ7 8
)
ÜÜ8 9
;
ÜÜ9 :
}
áá 
catch
àà 
(
àà 
FormatException
àà & 
exceptNumberFormat
àà' 9
)
àà9 :
{
ââ 
IO
ää 
.
ää 
Logger
ää 
.
ää 
Log
ää !
(
ää! "
NLog
ää" &
.
ää& '
LogLevel
ää' /
.
ää/ 0
Warn
ää0 4
,
ää4 5 
exceptNumberFormat
ää6 H
,
ääH I
$strääJ Ü
)ääÜ á
;ääá à
}
ãã 
}
åå 
}
çç 	
else
éé 
{
èè 	
data
íí 
=
íí 
$num
íí 
;
íí 
}
ìì 	
if
îî 

(
îî !
PrivateReturnsFalse
îî 
(
îî  
)
îî  !
)
îî! "
{
ïï 	
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó /
)
óó/ 0
;
óó0 1
}
òò 	
else
ôô 
{
öö 	
if
úú 
(
úú 
data
úú 
!=
úú 
$num
úú 
)
úú 
{
ùù 
IO
ûû 
.
ûû 
	WriteLine
ûû 
(
ûû 
$str
ûû #
+
ûû$ %
data
ûû& *
+
ûû+ ,
$str
ûû- 2
+
ûû3 4
(
ûû5 6
$num
ûû6 9
%
ûû: ;
data
ûû< @
)
ûû@ A
+
ûûB C
$str
ûûD H
)
ûûH I
;
ûûI J
}
üü 
else
†† 
{
°° 
IO
¢¢ 
.
¢¢ 
	WriteLine
¢¢ 
(
¢¢ 
$str
¢¢ D
)
¢¢D E
;
¢¢E F
}
££ 
}
§§ 	
}
•• 
private
®® 
void
®® 
GoodB2G2
®® 
(
®® 
HttpRequest
®® %
req
®®& )
,
®®) *
HttpResponse
®®+ 7
resp
®®8 <
)
®®< =
{
©© 
int
™™ 
data
™™ 
;
™™ 
if
´´ 

(
´´  
PrivateReturnsTrue
´´ 
(
´´ 
)
´´  
)
´´  !
{
¨¨ 	
data
≠≠ 
=
≠≠ 
int
≠≠ 
.
≠≠ 
MinValue
≠≠ 
;
≠≠  
{
ØØ 
string
∞∞ 
stringNumber
∞∞ #
=
∞∞$ %
req
∞∞& )
.
∞∞) *
Params
∞∞* 0
.
∞∞0 1
Get
∞∞1 4
(
∞∞4 5
$str
∞∞5 ;
)
∞∞; <
;
∞∞< =
try
±± 
{
≤≤ 
data
≥≥ 
=
≥≥ 
int
≥≥ 
.
≥≥ 
Parse
≥≥ $
(
≥≥$ %
stringNumber
≥≥% 1
.
≥≥1 2
Trim
≥≥2 6
(
≥≥6 7
)
≥≥7 8
)
≥≥8 9
;
≥≥9 :
}
¥¥ 
catch
µµ 
(
µµ 
FormatException
µµ & 
exceptNumberFormat
µµ' 9
)
µµ9 :
{
∂∂ 
IO
∑∑ 
.
∑∑ 
Logger
∑∑ 
.
∑∑ 
Log
∑∑ !
(
∑∑! "
NLog
∑∑" &
.
∑∑& '
LogLevel
∑∑' /
.
∑∑/ 0
Warn
∑∑0 4
,
∑∑4 5 
exceptNumberFormat
∑∑6 H
,
∑∑H I
$str∑∑J Ü
)∑∑Ü á
;∑∑á à
}
∏∏ 
}
ππ 
}
∫∫ 	
else
ªª 
{
ºº 	
data
øø 
=
øø 
$num
øø 
;
øø 
}
¿¿ 	
if
¡¡ 

(
¡¡  
PrivateReturnsTrue
¡¡ 
(
¡¡ 
)
¡¡  
)
¡¡  !
{
¬¬ 	
if
ƒƒ 
(
ƒƒ 
data
ƒƒ 
!=
ƒƒ 
$num
ƒƒ 
)
ƒƒ 
{
≈≈ 
IO
∆∆ 
.
∆∆ 
	WriteLine
∆∆ 
(
∆∆ 
$str
∆∆ #
+
∆∆$ %
data
∆∆& *
+
∆∆+ ,
$str
∆∆- 2
+
∆∆3 4
(
∆∆5 6
$num
∆∆6 9
%
∆∆: ;
data
∆∆< @
)
∆∆@ A
+
∆∆B C
$str
∆∆D H
)
∆∆H I
;
∆∆I J
}
«« 
else
»» 
{
…… 
IO
   
.
   
	WriteLine
   
(
   
$str
   D
)
  D E
;
  E F
}
ÀÀ 
}
ÃÃ 	
}
ÕÕ 
public
œœ 

override
œœ 
void
œœ 
Good
œœ 
(
œœ 
HttpRequest
œœ )
req
œœ* -
,
œœ- .
HttpResponse
œœ/ ;
resp
œœ< @
)
œœ@ A
{
–– 
GoodG2B1
—— 
(
—— 
req
—— 
,
—— 
resp
—— 
)
—— 
;
—— 
GoodG2B2
““ 
(
““ 
req
““ 
,
““ 
resp
““ 
)
““ 
;
““ 
GoodB2G1
”” 
(
”” 
req
”” 
,
”” 
resp
”” 
)
”” 
;
”” 
GoodB2G2
‘‘ 
(
‘‘ 
req
‘‘ 
,
‘‘ 
resp
‘‘ 
)
‘‘ 
;
‘‘ 
}
’’ 
}◊◊ 
}ÿÿ ’R
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_09.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_09 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_TRUE   #
)  # $
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
IO66 
.66  
STATIC_READONLY_TRUE66 #
)66# $
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: 
+::  !
data::" &
+::' (
$str::) .
+::/ 0
(::1 2
$num::2 5
%::6 7
data::8 <
)::< =
+::> ?
$str::@ D
)::D E
;::E F
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
IOCC 
.CC !
STATIC_READONLY_FALSECC $
)CC$ %
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
IONN 
.NN  
STATIC_READONLY_TRUENN #
)NN# $
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR 
+RR  !
dataRR" &
+RR' (
$strRR) .
+RR/ 0
(RR1 2
$numRR2 5
%RR6 7
dataRR8 <
)RR< =
+RR> ?
$strRR@ D
)RRD E
;RRE F
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
IOZZ 
.ZZ  
STATIC_READONLY_TRUEZZ #
)ZZ# $
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
IOee 
.ee  
STATIC_READONLY_TRUEee #
)ee# $
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii 
+ii  !
dataii" &
+ii' (
$strii) .
+ii/ 0
(ii1 2
$numii2 5
%ii6 7
dataii8 <
)ii< =
+ii> ?
$strii@ D
)iiD E
;iiE F
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
IOqq 
.qq  
STATIC_READONLY_TRUEqq #
)qq# $
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
IO
áá 
.
áá #
STATIC_READONLY_FALSE
áá $
)
áá$ %
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
%
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
IO
ûû 
.
ûû "
STATIC_READONLY_TRUE
ûû #
)
ûû# $
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ "
STATIC_READONLY_TRUE
¥¥ #
)
¥¥# $
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
%
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ ÒQ
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_10.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_10 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.   

staticTrue   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
IO66 
.66 

staticTrue66 
)66 
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: 
+::  !
data::" &
+::' (
$str::) .
+::/ 0
(::1 2
$num::2 5
%::6 7
data::8 <
)::< =
+::> ?
$str::@ D
)::D E
;::E F
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
IOCC 
.CC 
staticFalseCC 
)CC 
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
IONN 
.NN 

staticTrueNN 
)NN 
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR 
+RR  !
dataRR" &
+RR' (
$strRR) .
+RR/ 0
(RR1 2
$numRR2 5
%RR6 7
dataRR8 <
)RR< =
+RR> ?
$strRR@ D
)RRD E
;RRE F
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
IOZZ 
.ZZ 

staticTrueZZ 
)ZZ 
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
IOee 
.ee 

staticTrueee 
)ee 
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii 
+ii  !
dataii" &
+ii' (
$strii) .
+ii/ 0
(ii1 2
$numii2 5
%ii6 7
dataii8 <
)ii< =
+ii> ?
$strii@ D
)iiD E
;iiE F
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
IOqq 
.qq 

staticTrueqq 
)qq 
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
IO
áá 
.
áá 
staticFalse
áá 
)
áá 
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
%
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
IO
ûû 
.
ûû 

staticTrue
ûû 
)
ûû 
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ 

staticTrue
¥¥ 
)
¥¥ 
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
%
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ ÔT
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_11.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_11 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.   
StaticReturnsTrue    
(    !
)  ! "
)  " #
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66
 
IO66 
.66 
StaticReturnsTrue66 
(66  
)66  !
)66! "
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: 
+::  !
data::" &
+::' (
$str::) .
+::/ 0
(::1 2
$num::2 5
%::6 7
data::8 <
)::< =
+::> ?
$str::@ D
)::D E
;::E F
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
IOCC 
.CC 
StaticReturnsFalseCC !
(CC! "
)CC" #
)CC# $
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
IONN 
.NN 
StaticReturnsTrueNN  
(NN  !
)NN! "
)NN" #
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR 
+RR  !
dataRR" &
+RR' (
$strRR) .
+RR/ 0
(RR1 2
$numRR2 5
%RR6 7
dataRR8 <
)RR< =
+RR> ?
$strRR@ D
)RRD E
;RRE F
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
IOZZ 
.ZZ 
StaticReturnsTrueZZ  
(ZZ  !
)ZZ! "
)ZZ" #
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
IOee 
.ee 
StaticReturnsTrueee  
(ee  !
)ee! "
)ee" #
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii 
+ii  !
dataii" &
+ii' (
$strii) .
+ii/ 0
(ii1 2
$numii2 5
%ii6 7
dataii8 <
)ii< =
+ii> ?
$strii@ D
)iiD E
;iiE F
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
IOqq 
.qq 
StaticReturnsTrueqq  
(qq  !
)qq! "
)qq" #
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
IO
áá 
.
áá  
StaticReturnsFalse
áá !
(
áá! "
)
áá" #
)
áá# $
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
%
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
IO
ûû 
.
ûû 
StaticReturnsTrue
ûû  
(
ûû  !
)
ûû! "
)
ûû" #
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ 
StaticReturnsTrue
¥¥  
(
¥¥  !
)
¥¥! "
)
¥¥" #
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
%
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ ±J
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_12.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_12 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(  
 
IO   
.   $
StaticReturnsTrueOrFalse   &
(  & '
)  ' (
)  ( )
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data33 
=33 
$num33 
;33 
}44 	
if55 

(55
 
IO55 
.55 $
StaticReturnsTrueOrFalse55 &
(55& '
)55' (
)55( )
{66 	
IO99 
.99 
	WriteLine99 
(99 
$str99 
+99  !
data99" &
+99' (
$str99) .
+99/ 0
(991 2
$num992 5
%996 7
data998 <
)99< =
+99> ?
$str99@ D
)99D E
;99E F
}:: 	
else;; 
{<< 	
if>> 
(>> 
data>> 
!=>> 
$num>> 
)>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ #
+@@$ %
data@@& *
+@@+ ,
$str@@- 2
+@@3 4
(@@5 6
$num@@6 9
%@@: ;
data@@< @
)@@@ A
+@@B C
$str@@D H
)@@H I
;@@I J
}AA 
elseBB 
{CC 
IODD 
.DD 
	WriteLineDD 
(DD 
$strDD D
)DDD E
;DDE F
}EE 
}FF 	
}GG 
privateLL 
voidLL 
GoodG2BLL 
(LL 
HttpRequestLL $
reqLL% (
,LL( )
HttpResponseLL* 6
respLL7 ;
)LL; <
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO
 
IOOO 
.OO $
StaticReturnsTrueOrFalseOO &
(OO& '
)OO' (
)OO( )
{PP 	
dataRR 
=RR 
$numRR 
;RR 
}SS 	
elseTT 
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY
 
IOYY 
.YY $
StaticReturnsTrueOrFalseYY &
(YY& '
)YY' (
)YY( )
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] 
+]]  !
data]]" &
+]]' (
$str]]) .
+]]/ 0
(]]1 2
$num]]2 5
%]]6 7
data]]8 <
)]]< =
+]]> ?
$str]]@ D
)]]D E
;]]E F
}^^ 	
else__ 
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc 
+cc  !
datacc" &
+cc' (
$strcc) .
+cc/ 0
(cc1 2
$numcc2 5
%cc6 7
datacc8 <
)cc< =
+cc> ?
$strcc@ D
)ccD E
;ccE F
}dd 	
}ee 
privateii 
voidii 
GoodB2Gii 
(ii 
HttpRequestii $
reqii% (
,ii( )
HttpResponseii* 6
respii7 ;
)ii; <
{jj 
intkk 
datakk 
;kk 
ifll 

(ll
 
IOll 
.ll $
StaticReturnsTrueOrFalsell &
(ll& '
)ll' (
)ll( )
{mm 	
datann 
=nn 
intnn 
.nn 
MinValuenn 
;nn  
{pp 
stringqq 
stringNumberqq #
=qq$ %
reqqq& )
.qq) *
Paramsqq* 0
.qq0 1
Getqq1 4
(qq4 5
$strqq5 ;
)qq; <
;qq< =
tryrr 
{ss 
datatt 
=tt 
inttt 
.tt 
Parsett $
(tt$ %
stringNumbertt% 1
.tt1 2
Trimtt2 6
(tt6 7
)tt7 8
)tt8 9
;tt9 :
}uu 
catchvv 
(vv 
FormatExceptionvv &
exceptNumberFormatvv' 9
)vv9 :
{ww 
IOxx 
.xx 
Loggerxx 
.xx 
Logxx !
(xx! "
NLogxx" &
.xx& '
LogLevelxx' /
.xx/ 0
Warnxx0 4
,xx4 5
exceptNumberFormatxx6 H
,xxH I
$str	xxJ Ü
)
xxÜ á
;
xxá à
}yy 
}zz 
}{{ 	
else|| 
{}} 	
data~~ 
=~~ 
int~~ 
.~~ 
MinValue~~ 
;~~  
{
ÄÄ 
string
ÅÅ 
stringNumber
ÅÅ #
=
ÅÅ$ %
req
ÅÅ& )
.
ÅÅ) *
Params
ÅÅ* 0
.
ÅÅ0 1
Get
ÅÅ1 4
(
ÅÅ4 5
$str
ÅÅ5 ;
)
ÅÅ; <
;
ÅÅ< =
try
ÇÇ 
{
ÉÉ 
data
ÑÑ 
=
ÑÑ 
int
ÑÑ 
.
ÑÑ 
Parse
ÑÑ $
(
ÑÑ$ %
stringNumber
ÑÑ% 1
.
ÑÑ1 2
Trim
ÑÑ2 6
(
ÑÑ6 7
)
ÑÑ7 8
)
ÑÑ8 9
;
ÑÑ9 :
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
FormatException
ÜÜ & 
exceptNumberFormat
ÜÜ' 9
)
ÜÜ9 :
{
áá 
IO
àà 
.
àà 
Logger
àà 
.
àà 
Log
àà !
(
àà! "
NLog
àà" &
.
àà& '
LogLevel
àà' /
.
àà/ 0
Warn
àà0 4
,
àà4 5 
exceptNumberFormat
àà6 H
,
ààH I
$strààJ Ü
)ààÜ á
;ààá à
}
ââ 
}
ää 
}
ãã 	
if
åå 

(
åå
 
IO
åå 
.
åå &
StaticReturnsTrueOrFalse
åå &
(
åå& '
)
åå' (
)
åå( )
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
%
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
else
òò 
{
ôô 	
if
õõ 
(
õõ 
data
õõ 
!=
õõ 
$num
õõ 
)
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù #
+
ùù$ %
data
ùù& *
+
ùù+ ,
$str
ùù- 2
+
ùù3 4
(
ùù5 6
$num
ùù6 9
%
ùù: ;
data
ùù< @
)
ùù@ A
+
ùùB C
$str
ùùD H
)
ùùH I
;
ùùI J
}
ûû 
else
üü 
{
†† 
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° D
)
°°D E
;
°°E F
}
¢¢ 
}
££ 	
}
§§ 
public
¶¶ 

override
¶¶ 
void
¶¶ 
Good
¶¶ 
(
¶¶ 
HttpRequest
¶¶ )
req
¶¶* -
,
¶¶- .
HttpResponse
¶¶/ ;
resp
¶¶< @
)
¶¶@ A
{
®® 
GoodG2B
©© 
(
©© 
req
©© 
,
©© 
resp
©© 
)
©© 
;
©© 
GoodB2G
™™ 
(
™™ 
req
™™ 
,
™™ 
resp
™™ 
)
™™ 
;
™™ 
}
´´ 
}≠≠ 
}ÆÆ ≥U
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_13.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_13 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_FIVE   #
==  # %
$num  % &
)  & '
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
IO66 
.66  
STATIC_READONLY_FIVE66 #
==66# %
$num66% &
)66& '
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: 
+::  !
data::" &
+::' (
$str::) .
+::/ 0
(::1 2
$num::2 5
%::6 7
data::8 <
)::< =
+::> ?
$str::@ D
)::D E
;::E F
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
IOCC 
.CC  
STATIC_READONLY_FIVECC #
!=CC# %
$numCC% &
)CC& '
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
IONN 
.NN  
STATIC_READONLY_FIVENN #
==NN# %
$numNN% &
)NN& '
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR 
+RR  !
dataRR" &
+RR' (
$strRR) .
+RR/ 0
(RR1 2
$numRR2 5
%RR6 7
dataRR8 <
)RR< =
+RR> ?
$strRR@ D
)RRD E
;RRE F
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
IOZZ 
.ZZ  
STATIC_READONLY_FIVEZZ #
==ZZ# %
$numZZ% &
)ZZ& '
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
IOee 
.ee  
STATIC_READONLY_FIVEee #
==ee# %
$numee% &
)ee& '
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii 
+ii  !
dataii" &
+ii' (
$strii) .
+ii/ 0
(ii1 2
$numii2 5
%ii6 7
dataii8 <
)ii< =
+ii> ?
$strii@ D
)iiD E
;iiE F
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
IOqq 
.qq  
STATIC_READONLY_FIVEqq #
==qq# %
$numqq% &
)qq& '
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
IO
áá 
.
áá "
STATIC_READONLY_FIVE
áá #
!=
áá# %
$num
áá% &
)
áá& '
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
%
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
IO
ûû 
.
ûû "
STATIC_READONLY_FIVE
ûû #
==
ûû# %
$num
ûû% &
)
ûû& '
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ "
STATIC_READONLY_FIVE
¥¥ #
==
¥¥# %
$num
¥¥% &
)
¥¥& '
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
%
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ œT
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_14.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_14 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.   

staticFive   
==   
$num   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
IO66 
.66 

staticFive66 
==66 
$num66 
)66 
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: 
+::  !
data::" &
+::' (
$str::) .
+::/ 0
(::1 2
$num::2 5
%::6 7
data::8 <
)::< =
+::> ?
$str::@ D
)::D E
;::E F
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
IOCC 
.CC 

staticFiveCC 
!=CC 
$numCC 
)CC 
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
IONN 
.NN 

staticFiveNN 
==NN 
$numNN 
)NN 
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR 
+RR  !
dataRR" &
+RR' (
$strRR) .
+RR/ 0
(RR1 2
$numRR2 5
%RR6 7
dataRR8 <
)RR< =
+RR> ?
$strRR@ D
)RRD E
;RRE F
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
HttpRequestWW %
reqWW& )
,WW) *
HttpResponseWW+ 7
respWW8 <
)WW< =
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
IOZZ 
.ZZ 

staticFiveZZ 
==ZZ 
$numZZ 
)ZZ 
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
IOee 
.ee 

staticFiveee 
==ee 
$numee 
)ee 
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii 
+ii  !
dataii" &
+ii' (
$strii) .
+ii/ 0
(ii1 2
$numii2 5
%ii6 7
dataii8 <
)ii< =
+ii> ?
$strii@ D
)iiD E
;iiE F
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
IOqq 
.qq 

staticFiveqq 
==qq 
$numqq 
)qq 
{rr 	
datass 
=ss 
intss 
.ss 
MinValuess 
;ss  
{uu 
stringvv 
stringNumbervv #
=vv$ %
reqvv& )
.vv) *
Paramsvv* 0
.vv0 1
Getvv1 4
(vv4 5
$strvv5 ;
)vv; <
;vv< =
tryww 
{xx 
datayy 
=yy 
intyy 
.yy 
Parseyy $
(yy$ %
stringNumberyy% 1
.yy1 2
Trimyy2 6
(yy6 7
)yy7 8
)yy8 9
;yy9 :
}zz 
catch{{ 
({{ 
FormatException{{ &
exceptNumberFormat{{' 9
){{9 :
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} !
(}}! "
NLog}}" &
.}}& '
LogLevel}}' /
.}}/ 0
Warn}}0 4
,}}4 5
exceptNumberFormat}}6 H
,}}H I
$str	}}J Ü
)
}}Ü á
;
}}á à
}~~ 
} 
}
ÄÄ 	
else
ÅÅ 
{
ÇÇ 	
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
if
áá 

(
áá 
IO
áá 
.
áá 

staticFive
áá 
!=
áá 
$num
áá 
)
áá 
{
àà 	
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
}
ãã 	
else
åå 
{
çç 	
if
èè 
(
èè 
data
èè 
!=
èè 
$num
èè 
)
èè 
{
êê 
IO
ëë 
.
ëë 
	WriteLine
ëë 
(
ëë 
$str
ëë #
+
ëë$ %
data
ëë& *
+
ëë+ ,
$str
ëë- 2
+
ëë3 4
(
ëë5 6
$num
ëë6 9
%
ëë: ;
data
ëë< @
)
ëë@ A
+
ëëB C
$str
ëëD H
)
ëëH I
;
ëëI J
}
íí 
else
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï D
)
ïïD E
;
ïïE F
}
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
HttpRequest
õõ %
req
õõ& )
,
õõ) *
HttpResponse
õõ+ 7
resp
õõ8 <
)
õõ< =
{
úú 
int
ùù 
data
ùù 
;
ùù 
if
ûû 

(
ûû 
IO
ûû 
.
ûû 

staticFive
ûû 
==
ûû 
$num
ûû 
)
ûû 
{
üü 	
data
†† 
=
†† 
int
†† 
.
†† 
MinValue
†† 
;
††  
{
¢¢ 
string
££ 
stringNumber
££ #
=
££$ %
req
££& )
.
££) *
Params
££* 0
.
££0 1
Get
££1 4
(
££4 5
$str
££5 ;
)
££; <
;
££< =
try
§§ 
{
•• 
data
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶ 
Parse
¶¶ $
(
¶¶$ %
stringNumber
¶¶% 1
.
¶¶1 2
Trim
¶¶2 6
(
¶¶6 7
)
¶¶7 8
)
¶¶8 9
;
¶¶9 :
}
ßß 
catch
®® 
(
®® 
FormatException
®® & 
exceptNumberFormat
®®' 9
)
®®9 :
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5 
exceptNumberFormat
™™6 H
,
™™H I
$str™™J Ü
)™™Ü á
;™™á à
}
´´ 
}
¨¨ 
}
≠≠ 	
else
ÆÆ 
{
ØØ 	
data
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ 

staticFive
¥¥ 
==
¥¥ 
$num
¥¥ 
)
¥¥ 
{
µµ 	
if
∑∑ 
(
∑∑ 
data
∑∑ 
!=
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ #
+
ππ$ %
data
ππ& *
+
ππ+ ,
$str
ππ- 2
+
ππ3 4
(
ππ5 6
$num
ππ6 9
%
ππ: ;
data
ππ< @
)
ππ@ A
+
ππB C
$str
ππD H
)
ππH I
;
ππI J
}
∫∫ 
else
ªª 
{
ºº 
IO
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ D
)
ΩΩD E
;
ΩΩE F
}
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
HttpRequest
¬¬ )
req
¬¬* -
,
¬¬- .
HttpResponse
¬¬/ ;
resp
¬¬< @
)
¬¬@ A
{
√√ 
GoodG2B1
ƒƒ 
(
ƒƒ 
req
ƒƒ 
,
ƒƒ 
resp
ƒƒ 
)
ƒƒ 
;
ƒƒ 
GoodG2B2
≈≈ 
(
≈≈ 
req
≈≈ 
,
≈≈ 
resp
≈≈ 
)
≈≈ 
;
≈≈ 
GoodB2G1
∆∆ 
(
∆∆ 
req
∆∆ 
,
∆∆ 
resp
∆∆ 
)
∆∆ 
;
∆∆ 
GoodB2G2
«« 
(
«« 
req
«« 
,
«« 
resp
«« 
)
«« 
;
«« 
}
»» 
}   
}ÀÀ ø^
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_15.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_15 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
switch   
(   
$num   
)   
{!! 	
case"" 
$num"" 
:"" 
data## 
=## 
int## 
.## 
MinValue## 
;##  
{%% 
string&& 
stringNumber&& #
=&&$ %
req&&& )
.&&) *
Params&&* 0
.&&0 1
Get&&1 4
(&&4 5
$str&&5 ;
)&&; <
;&&< =
try'' 
{(( 
data)) 
=)) 
int)) 
.)) 
Parse)) $
())$ %
stringNumber))% 1
.))1 2
Trim))2 6
())6 7
)))7 8
)))8 9
;))9 :
}** 
catch++ 
(++ 
FormatException++ &
exceptNumberFormat++' 9
)++9 :
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptNumberFormat--6 H
,--H I
$str	--J Ü
)
--Ü á
;
--á à
}.. 
}// 
break00 
;00 
default11 
:11 
data44 
=44 
$num44 
;44 
break55 
;55 
}66 	
switch77 
(77 
$num77 
)77 
{88 	
case99 
$num99 
:99 
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< 
+<<  !
data<<" &
+<<' (
$str<<) .
+<</ 0
(<<1 2
$num<<2 5
%<<6 7
data<<8 <
)<<< =
+<<> ?
$str<<@ D
)<<D E
;<<E F
break== 
;== 
default>> 
:>> 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ /
)@@/ 0
;@@0 1
breakAA 
;AA 
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
HttpRequestGG %
reqGG& )
,GG) *
HttpResponseGG+ 7
respGG8 <
)GG< =
{HH 
intII 
dataII 
;II 
switchJJ 
(JJ 
$numJJ 
)JJ 
{KK 	
caseLL 
$numLL 
:LL 
dataOO 
=OO 
$numOO 
;OO 
breakPP 
;PP 
defaultQQ 
:QQ 
dataSS 
=SS 
$numSS 
;SS 
breakTT 
;TT 
}UU 	
switchVV 
(VV 
$numVV 
)VV 
{WW 	
caseXX 
$numXX 
:XX 
IO[[ 
.[[ 
	WriteLine[[ 
([[ 
$str[[ 
+[[  !
data[[" &
+[[' (
$str[[) .
+[[/ 0
([[1 2
$num[[2 5
%[[6 7
data[[8 <
)[[< =
+[[> ?
$str[[@ D
)[[D E
;[[E F
break\\ 
;\\ 
default]] 
:]] 
IO__ 
.__ 
	WriteLine__ 
(__ 
$str__ /
)__/ 0
;__0 1
break`` 
;`` 
}aa 	
}bb 
privateee 
voidee 
GoodG2B2ee 
(ee 
HttpRequestee %
reqee& )
,ee) *
HttpResponseee+ 7
respee8 <
)ee< =
{ff 
intgg 
datagg 
;gg 
switchhh 
(hh 
$numhh 
)hh 
{ii 	
casejj 
$numjj 
:jj 
datall 
=ll 
$numll 
;ll 
breakmm 
;mm 
defaultnn 
:nn 
dataqq 
=qq 
$numqq 
;qq 
breakrr 
;rr 
}ss 	
switchtt 
(tt 
$numtt 
)tt 
{uu 	
casevv 
$numvv 
:vv 
IOyy 
.yy 
	WriteLineyy 
(yy 
$stryy 
+yy  !
datayy" &
+yy' (
$stryy) .
+yy/ 0
(yy1 2
$numyy2 5
%yy6 7
datayy8 <
)yy< =
+yy> ?
$stryy@ D
)yyD E
;yyE F
breakzz 
;zz 
default{{ 
:{{ 
IO}} 
.}} 
	WriteLine}} 
(}} 
$str}} /
)}}/ 0
;}}0 1
break~~ 
;~~ 
} 	
}
ÄÄ 
private
ÉÉ 
void
ÉÉ 
GoodB2G1
ÉÉ 
(
ÉÉ 
HttpRequest
ÉÉ %
req
ÉÉ& )
,
ÉÉ) *
HttpResponse
ÉÉ+ 7
resp
ÉÉ8 <
)
ÉÉ< =
{
ÑÑ 
int
ÖÖ 
data
ÖÖ 
;
ÖÖ 
switch
ÜÜ 
(
ÜÜ 
$num
ÜÜ 
)
ÜÜ 
{
áá 	
case
àà 
$num
àà 
:
àà 
data
ââ 
=
ââ 
int
ââ 
.
ââ 
MinValue
ââ 
;
ââ  
{
ãã 
string
åå 
stringNumber
åå #
=
åå$ %
req
åå& )
.
åå) *
Params
åå* 0
.
åå0 1
Get
åå1 4
(
åå4 5
$str
åå5 ;
)
åå; <
;
åå< =
try
çç 
{
éé 
data
èè 
=
èè 
int
èè 
.
èè 
Parse
èè $
(
èè$ %
stringNumber
èè% 1
.
èè1 2
Trim
èè2 6
(
èè6 7
)
èè7 8
)
èè8 9
;
èè9 :
}
êê 
catch
ëë 
(
ëë 
FormatException
ëë & 
exceptNumberFormat
ëë' 9
)
ëë9 :
{
íí 
IO
ìì 
.
ìì 
Logger
ìì 
.
ìì 
Log
ìì !
(
ìì! "
NLog
ìì" &
.
ìì& '
LogLevel
ìì' /
.
ìì/ 0
Warn
ìì0 4
,
ìì4 5 
exceptNumberFormat
ìì6 H
,
ììH I
$strììJ Ü
)ììÜ á
;ììá à
}
îî 
}
ïï 
break
ññ 
;
ññ 
default
óó 
:
óó 
data
öö 
=
öö 
$num
öö 
;
öö 
break
õõ 
;
õõ 
}
úú 	
switch
ùù 
(
ùù 
$num
ùù 
)
ùù 
{
ûû 	
case
üü 
$num
üü 
:
üü 
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
break
¢¢ 
;
¢¢ 
default
££ 
:
££ 
if
•• 
(
•• 
data
•• 
!=
•• 
$num
•• 
)
•• 
{
¶¶ 
IO
ßß 
.
ßß 
	WriteLine
ßß 
(
ßß 
$str
ßß #
+
ßß$ %
data
ßß& *
+
ßß+ ,
$str
ßß- 2
+
ßß3 4
(
ßß5 6
$num
ßß6 9
%
ßß: ;
data
ßß< @
)
ßß@ A
+
ßßB C
$str
ßßD H
)
ßßH I
;
ßßI J
}
®® 
else
©© 
{
™™ 
IO
´´ 
.
´´ 
	WriteLine
´´ 
(
´´ 
$str
´´ D
)
´´D E
;
´´E F
}
¨¨ 
break
≠≠ 
;
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
HttpRequest
≤≤ %
req
≤≤& )
,
≤≤) *
HttpResponse
≤≤+ 7
resp
≤≤8 <
)
≤≤< =
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
switch
µµ 
(
µµ 
$num
µµ 
)
µµ 
{
∂∂ 	
case
∑∑ 
$num
∑∑ 
:
∑∑ 
data
∏∏ 
=
∏∏ 
int
∏∏ 
.
∏∏ 
MinValue
∏∏ 
;
∏∏  
{
∫∫ 
string
ªª 
stringNumber
ªª #
=
ªª$ %
req
ªª& )
.
ªª) *
Params
ªª* 0
.
ªª0 1
Get
ªª1 4
(
ªª4 5
$str
ªª5 ;
)
ªª; <
;
ªª< =
try
ºº 
{
ΩΩ 
data
ææ 
=
ææ 
int
ææ 
.
ææ 
Parse
ææ $
(
ææ$ %
stringNumber
ææ% 1
.
ææ1 2
Trim
ææ2 6
(
ææ6 7
)
ææ7 8
)
ææ8 9
;
ææ9 :
}
øø 
catch
¿¿ 
(
¿¿ 
FormatException
¿¿ & 
exceptNumberFormat
¿¿' 9
)
¿¿9 :
{
¡¡ 
IO
¬¬ 
.
¬¬ 
Logger
¬¬ 
.
¬¬ 
Log
¬¬ !
(
¬¬! "
NLog
¬¬" &
.
¬¬& '
LogLevel
¬¬' /
.
¬¬/ 0
Warn
¬¬0 4
,
¬¬4 5 
exceptNumberFormat
¬¬6 H
,
¬¬H I
$str¬¬J Ü
)¬¬Ü á
;¬¬á à
}
√√ 
}
ƒƒ 
break
≈≈ 
;
≈≈ 
default
∆∆ 
:
∆∆ 
data
…… 
=
…… 
$num
…… 
;
…… 
break
   
;
   
}
ÀÀ 	
switch
ÃÃ 
(
ÃÃ 
$num
ÃÃ 
)
ÃÃ 
{
ÕÕ 	
case
ŒŒ 
$num
ŒŒ 
:
ŒŒ 
if
–– 
(
–– 
data
–– 
!=
–– 
$num
–– 
)
–– 
{
—— 
IO
““ 
.
““ 
	WriteLine
““ 
(
““ 
$str
““ #
+
““$ %
data
““& *
+
““+ ,
$str
““- 2
+
““3 4
(
““5 6
$num
““6 9
%
““: ;
data
““< @
)
““@ A
+
““B C
$str
““D H
)
““H I
;
““I J
}
”” 
else
‘‘ 
{
’’ 
IO
÷÷ 
.
÷÷ 
	WriteLine
÷÷ 
(
÷÷ 
$str
÷÷ D
)
÷÷D E
;
÷÷E F
}
◊◊ 
break
ÿÿ 
;
ÿÿ 
default
ŸŸ 
:
ŸŸ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ /
)
€€/ 0
;
€€0 1
break
‹‹ 
;
‹‹ 
}
›› 	
}
ﬁﬁ 
public
‡‡ 

override
‡‡ 
void
‡‡ 
Good
‡‡ 
(
‡‡ 
HttpRequest
‡‡ )
req
‡‡* -
,
‡‡- .
HttpResponse
‡‡/ ;
resp
‡‡< @
)
‡‡@ A
{
·· 
GoodG2B1
‚‚ 
(
‚‚ 
req
‚‚ 
,
‚‚ 
resp
‚‚ 
)
‚‚ 
;
‚‚ 
GoodG2B2
„„ 
(
„„ 
req
„„ 
,
„„ 
resp
„„ 
)
„„ 
;
„„ 
GoodB2G1
‰‰ 
(
‰‰ 
req
‰‰ 
,
‰‰ 
resp
‰‰ 
)
‰‰ 
;
‰‰ 
GoodB2G2
ÂÂ 
(
ÂÂ 
req
ÂÂ 
,
ÂÂ 
resp
ÂÂ 
)
ÂÂ 
;
ÂÂ 
}
ÊÊ 
}ËË 
}ÈÈ •.
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_16.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_16 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
while   
(   
true   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
break// 
;// 
}00 	
while11 
(11 
true11 
)11 
{22 	
IO55 
.55 
	WriteLine55 
(55 
$str55 
+55  !
data55" &
+55' (
$str55) .
+55/ 0
(551 2
$num552 5
%556 7
data558 <
)55< =
+55> ?
$str55@ D
)55D E
;55E F
break66 
;66 
}77 	
}88 
private<< 
void<< 
GoodG2B<< 
(<< 
HttpRequest<< $
req<<% (
,<<( )
HttpResponse<<* 6
resp<<7 ;
)<<; <
{== 
int>> 
data>> 
;>> 
while?? 
(?? 
true?? 
)?? 
{@@ 	
dataBB 
=BB 
$numBB 
;BB 
breakCC 
;CC 
}DD 	
whileEE 
(EE 
trueEE 
)EE 
{FF 	
IOII 
.II 
	WriteLineII 
(II 
$strII 
+II  !
dataII" &
+II' (
$strII) .
+II/ 0
(II1 2
$numII2 5
%II6 7
dataII8 <
)II< =
+II> ?
$strII@ D
)IID E
;IIE F
breakJJ 
;JJ 
}KK 	
}LL 
privateOO 
voidOO 
GoodB2GOO 
(OO 
HttpRequestOO $
reqOO% (
,OO( )
HttpResponseOO* 6
respOO7 ;
)OO; <
{PP 
intQQ 
dataQQ 
;QQ 
whileRR 
(RR 
trueRR 
)RR 
{SS 	
dataTT 
=TT 
intTT 
.TT 
MinValueTT 
;TT  
{VV 
stringWW 
stringNumberWW #
=WW$ %
reqWW& )
.WW) *
ParamsWW* 0
.WW0 1
GetWW1 4
(WW4 5
$strWW5 ;
)WW; <
;WW< =
tryXX 
{YY 
dataZZ 
=ZZ 
intZZ 
.ZZ 
ParseZZ $
(ZZ$ %
stringNumberZZ% 1
.ZZ1 2
TrimZZ2 6
(ZZ6 7
)ZZ7 8
)ZZ8 9
;ZZ9 :
}[[ 
catch\\ 
(\\ 
FormatException\\ &
exceptNumberFormat\\' 9
)\\9 :
{]] 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ !
(^^! "
NLog^^" &
.^^& '
LogLevel^^' /
.^^/ 0
Warn^^0 4
,^^4 5
exceptNumberFormat^^6 H
,^^H I
$str	^^J Ü
)
^^Ü á
;
^^á à
}__ 
}`` 
breakaa 
;aa 
}bb 	
whilecc 
(cc 
truecc 
)cc 
{dd 	
ifff 
(ff 
dataff 
!=ff 
$numff 
)ff 
{gg 
IOhh 
.hh 
	WriteLinehh 
(hh 
$strhh #
+hh$ %
datahh& *
+hh+ ,
$strhh- 2
+hh3 4
(hh5 6
$numhh6 9
%hh: ;
datahh< @
)hh@ A
+hhB C
$strhhD H
)hhH I
;hhI J
}ii 
elsejj 
{kk 
IOll 
.ll 
	WriteLinell 
(ll 
$strll D
)llD E
;llE F
}mm 
breaknn 
;nn 
}oo 	
}pp 
publicrr 

overriderr 
voidrr 
Goodrr 
(rr 
HttpRequestrr )
reqrr* -
,rr- .
HttpResponserr/ ;
resprr< @
)rr@ A
{ss 
GoodG2Btt 
(tt 
reqtt 
,tt 
resptt 
)tt 
;tt 
GoodB2Guu 
(uu 
requu 
,uu 
respuu 
)uu 
;uu 
}vv 
}xx 
}yy Ñ.
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_17.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_17 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$ 
{&& 	
string'' 
stringNumber'' 
=''  !
req''" %
.''% &
Params''& ,
.'', -
Get''- 0
(''0 1
$str''1 7
)''7 8
;''8 9
try(( 
{)) 
data** 
=** 
int** 
.** 
Parse**  
(**  !
stringNumber**! -
.**- .
Trim**. 2
(**2 3
)**3 4
)**4 5
;**5 6
}++ 
catch,, 
(,, 
FormatException,, "
exceptNumberFormat,,# 5
),,5 6
{-- 
IO.. 
... 
Logger.. 
... 
Log.. 
(.. 
NLog.. "
..." #
LogLevel..# +
...+ ,
Warn.., 0
,..0 1
exceptNumberFormat..2 D
,..D E
$str	..F Ç
)
..Ç É
;
..É Ñ
}// 
}00 	
for11 
(11 
int11 
j11 
=11 
$num11 
;11 
j11 
<11 
$num11 
;11 
j11  
++11  "
)11" #
{22 	
IO55 
.55 
	WriteLine55 
(55 
$str55 
+55  !
data55" &
+55' (
$str55) .
+55/ 0
(551 2
$num552 5
%556 7
data558 <
)55< =
+55> ?
$str55@ D
)55D E
;55E F
}66 	
}77 
private;; 
void;; 
GoodG2B;; 
(;; 
HttpRequest;; $
req;;% (
,;;( )
HttpResponse;;* 6
resp;;7 ;
);;; <
{<< 
int== 
data== 
;== 
data?? 
=?? 
$num?? 
;?? 
for@@ 
(@@ 
int@@ 
j@@ 
=@@ 
$num@@ 
;@@ 
j@@ 
<@@ 
$num@@ 
;@@ 
j@@  
++@@  "
)@@" #
{AA 	
IODD 
.DD 
	WriteLineDD 
(DD 
$strDD 
+DD  !
dataDD" &
+DD' (
$strDD) .
+DD/ 0
(DD1 2
$numDD2 5
%DD6 7
dataDD8 <
)DD< =
+DD> ?
$strDD@ D
)DDD E
;DDE F
}EE 	
}FF 
privateII 
voidII 
GoodB2GII 
(II 
HttpRequestII $
reqII% (
,II( )
HttpResponseII* 6
respII7 ;
)II; <
{JJ 
intKK 
dataKK 
;KK 
dataLL 
=LL 
intLL 
.LL 
MinValueLL 
;LL 
{NN 	
stringOO 
stringNumberOO 
=OO  !
reqOO" %
.OO% &
ParamsOO& ,
.OO, -
GetOO- 0
(OO0 1
$strOO1 7
)OO7 8
;OO8 9
tryPP 
{QQ 
dataRR 
=RR 
intRR 
.RR 
ParseRR  
(RR  !
stringNumberRR! -
.RR- .
TrimRR. 2
(RR2 3
)RR3 4
)RR4 5
;RR5 6
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$str	VVF Ç
)
VVÇ É
;
VVÉ Ñ
}WW 
}XX 	
forYY 
(YY 
intYY 
kYY 
=YY 
$numYY 
;YY 
kYY 
<YY 
$numYY 
;YY 
kYY  
++YY  "
)YY" #
{ZZ 	
if\\ 
(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ #
+^^$ %
data^^& *
+^^+ ,
$str^^- 2
+^^3 4
(^^5 6
$num^^6 9
%^^: ;
data^^< @
)^^@ A
+^^B C
$str^^D H
)^^H I
;^^I J
}__ 
else`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb D
)bbD E
;bbE F
}cc 
}dd 	
}ee 
publicgg 

overridegg 
voidgg 
Goodgg 
(gg 
HttpRequestgg )
reqgg* -
,gg- .
HttpResponsegg/ ;
respgg< @
)gg@ A
{hh 
GoodG2Bii 
(ii 
reqii 
,ii 
respii 
)ii 
;ii 
GoodB2Gjj 
(jj 
reqjj 
,jj 
respjj 
)jj 
;jj 
}kk 
}mm 
}nn œR
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_21.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_21 9
:: ;
AbstractTestCaseWeb< O
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public   

override   
void   
Bad   
(   
HttpRequest   (
req  ) ,
,  , -
HttpResponse  . :
resp  ; ?
)  ? @
{!! 
int"" 
data"" 
;"" 
data## 
=## 
int## 
.## 
MinValue## 
;## 
{%% 	
string&& 
stringNumber&& 
=&&  !
req&&" %
.&&% &
Params&&& ,
.&&, -
Get&&- 0
(&&0 1
$str&&1 7
)&&7 8
;&&8 9
try'' 
{(( 
data)) 
=)) 
int)) 
.)) 
Parse))  
())  !
stringNumber))! -
.))- .
Trim)). 2
())2 3
)))3 4
)))4 5
;))5 6
}** 
catch++ 
(++ 
FormatException++ "
exceptNumberFormat++# 5
)++5 6
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- 
(-- 
NLog-- "
.--" #
LogLevel--# +
.--+ ,
Warn--, 0
,--0 1
exceptNumberFormat--2 D
,--D E
$str	--F Ç
)
--Ç É
;
--É Ñ
}.. 
}// 	

badPrivate00 
=00 
true00 
;00 
BadSink11 
(11 
data11 
,11 
req11 
,11 
resp11  
)11  !
;11! "
}22 
private44 
void44 
BadSink44 
(44 
int44 
data44 !
,44" #
HttpRequest44$ /
req440 3
,443 4
HttpResponse445 A
resp44B F
)44F G
{55 
if66 

(66 

badPrivate66 
)66 
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: 
+::  !
data::" &
+::' (
$str::) .
+::/ 0
(::1 2
$num::2 5
%::6 7
data::8 <
)::< =
+::> ?
$str::@ D
)::D E
;::E F
};; 	
}<< 
private?? 
bool?? 
goodB2G1Private??  
=??! "
false??# (
;??( )
private@@ 
bool@@ 
goodB2G2Private@@  
=@@! "
false@@# (
;@@( )
privateAA 
boolAA 
goodG2BPrivateAA 
=AA  !
falseAA" '
;AA' (
publicCC 

overrideCC 
voidCC 
GoodCC 
(CC 
HttpRequestCC )
reqCC* -
,CC- .
HttpResponseCC/ ;
respCC< @
)CC@ A
{DD 
GoodB2G1EE 
(EE 
reqEE 
,EE 
respEE 
)EE 
;EE 
GoodB2G2FF 
(FF 
reqFF 
,FF 
respFF 
)FF 
;FF 
GoodG2BGG 
(GG 
reqGG 
,GG 
respGG 
)GG 
;GG 
}HH 
privateKK 
voidKK 
GoodB2G1KK 
(KK 
HttpRequestKK %
reqKK& )
,KK) *
HttpResponseKK+ 7
respKK8 <
)KK< =
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
stringQQ 
stringNumberQQ 
=QQ  !
reqQQ" %
.QQ% &
ParamsQQ& ,
.QQ, -
GetQQ- 0
(QQ0 1
$strQQ1 7
)QQ7 8
;QQ8 9
tryRR 
{SS 
dataTT 
=TT 
intTT 
.TT 
ParseTT  
(TT  !
stringNumberTT! -
.TT- .
TrimTT. 2
(TT2 3
)TT3 4
)TT4 5
;TT5 6
}UU 
catchVV 
(VV 
FormatExceptionVV "
exceptNumberFormatVV# 5
)VV5 6
{WW 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$str	XXF Ç
)
XXÇ É
;
XXÉ Ñ
}YY 
}ZZ 	
goodB2G1Private[[ 
=[[ 
false[[ 
;[[  
GoodB2G1Sink\\ 
(\\ 
data\\ 
,\\ 
req\\ 
,\\  
resp\\! %
)\\% &
;\\& '
}]] 
private__ 
void__ 
GoodB2G1Sink__ 
(__ 
int__ !
data__" &
,__' (
HttpRequest__) 4
req__5 8
,__8 9
HttpResponse__: F
resp__G K
)__K L
{`` 
ifaa 

(aa 
goodB2G1Privateaa 
)aa 
{bb 	
IOdd 
.dd 
	WriteLinedd 
(dd 
$strdd /
)dd/ 0
;dd0 1
}ee 	
elseff 
{gg 	
ifii 
(ii 
dataii 
!=ii 
$numii 
)ii 
{jj 
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk #
+kk$ %
datakk& *
+kk+ ,
$strkk- 2
+kk3 4
(kk5 6
$numkk6 9
%kk: ;
datakk< @
)kk@ A
+kkB C
$strkkD H
)kkH I
;kkI J
}ll 
elsemm 
{nn 
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo D
)ooD E
;ooE F
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G2uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
intww 
dataww 
;ww 
dataxx 
=xx 
intxx 
.xx 
MinValuexx 
;xx 
{zz 	
string{{ 
stringNumber{{ 
={{  !
req{{" %
.{{% &
Params{{& ,
.{{, -
Get{{- 0
({{0 1
$str{{1 7
){{7 8
;{{8 9
try|| 
{}} 
data~~ 
=~~ 
int~~ 
.~~ 
Parse~~  
(~~  !
stringNumber~~! -
.~~- .
Trim~~. 2
(~~2 3
)~~3 4
)~~4 5
;~~5 6
} 
catch
ÄÄ 
(
ÄÄ 
FormatException
ÄÄ " 
exceptNumberFormat
ÄÄ# 5
)
ÄÄ5 6
{
ÅÅ 
IO
ÇÇ 
.
ÇÇ 
Logger
ÇÇ 
.
ÇÇ 
Log
ÇÇ 
(
ÇÇ 
NLog
ÇÇ "
.
ÇÇ" #
LogLevel
ÇÇ# +
.
ÇÇ+ ,
Warn
ÇÇ, 0
,
ÇÇ0 1 
exceptNumberFormat
ÇÇ2 D
,
ÇÇD E
$strÇÇF Ç
)ÇÇÇ É
;ÇÇÉ Ñ
}
ÉÉ 
}
ÑÑ 	
goodB2G2Private
ÖÖ 
=
ÖÖ 
true
ÖÖ 
;
ÖÖ 
GoodB2G2Sink
ÜÜ 
(
ÜÜ 
data
ÜÜ 
,
ÜÜ 
req
ÜÜ 
,
ÜÜ  
resp
ÜÜ! %
)
ÜÜ% &
;
ÜÜ& '
}
áá 
private
ââ 
void
ââ 
GoodB2G2Sink
ââ 
(
ââ 
int
ââ !
data
ââ" &
,
ââ' (
HttpRequest
ââ) 4
req
ââ5 8
,
ââ8 9
HttpResponse
ââ: F
resp
ââG K
)
ââK L
{
ää 
if
ãã 

(
ãã 
goodB2G2Private
ãã 
)
ãã 
{
åå 	
if
éé 
(
éé 
data
éé 
!=
éé 
$num
éé 
)
éé 
{
èè 
IO
êê 
.
êê 
	WriteLine
êê 
(
êê 
$str
êê #
+
êê$ %
data
êê& *
+
êê+ ,
$str
êê- 2
+
êê3 4
(
êê5 6
$num
êê6 9
%
êê: ;
data
êê< @
)
êê@ A
+
êêB C
$str
êêD H
)
êêH I
;
êêI J
}
ëë 
else
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî D
)
îîD E
;
îîE F
}
ïï 
}
ññ 	
}
óó 
private
öö 
void
öö 
GoodG2B
öö 
(
öö 
HttpRequest
öö $
req
öö% (
,
öö( )
HttpResponse
öö* 6
resp
öö7 ;
)
öö; <
{
õõ 
int
úú 
data
úú 
;
úú 
data
ûû 
=
ûû 
$num
ûû 
;
ûû 
goodG2BPrivate
üü 
=
üü 
true
üü 
;
üü 
GoodG2BSink
†† 
(
†† 
data
†† 
,
†† 
req
†† 
,
†† 
resp
††  $
)
††$ %
;
††% &
}
°° 
private
££ 
void
££ 
GoodG2BSink
££ 
(
££ 
int
££  
data
££! %
,
££& '
HttpRequest
££( 3
req
££4 7
,
££7 8
HttpResponse
££9 E
resp
££F J
)
££J K
{
§§ 
if
•• 

(
•• 
goodG2BPrivate
•• 
)
•• 
{
¶¶ 	
IO
©© 
.
©© 
	WriteLine
©© 
(
©© 
$str
©© 
+
©©  !
data
©©" &
+
©©' (
$str
©©) .
+
©©/ 0
(
©©1 2
$num
©©2 5
%
©©6 7
data
©©8 <
)
©©< =
+
©©> ?
$str
©©@ D
)
©©D E
;
©©E F
}
™™ 	
}
´´ 
}≠≠ 
}ÆÆ Ä9
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_22a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_22a :
:; <
AbstractTestCaseWeb= P
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{   
int!! 
data!! 
=!! 
$num!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;"" 
{$$ 	
string%% 
stringNumber%% 
=%%  !
req%%" %
.%%% &
Params%%& ,
.%%, -
Get%%- 0
(%%0 1
$str%%1 7
)%%7 8
;%%8 9
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse((  
(((  !
stringNumber((! -
.((- .
Trim((. 2
(((2 3
)((3 4
)((4 5
;((5 6
})) 
catch** 
(** 
FormatException** "
exceptNumberFormat**# 5
)**5 6
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
exceptNumberFormat,,2 D
,,,D E
$str	,,F Ç
)
,,Ç É
;
,,É Ñ
}-- 
}.. 	
badPublicStatic// 
=// 
true// 
;// @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_22b00 <
.00< =
BadSink00= D
(00D E
data00E I
,00J K
req00L O
,00O P
resp00Q U
)00U V
;00V W
}11 
public44 

static44 
bool44  
goodB2G1PublicStatic44 +
=44, -
false44. 3
;443 4
public55 

static55 
bool55  
goodB2G2PublicStatic55 +
=55, -
false55. 3
;553 4
public66 

static66 
bool66 
goodG2BPublicStatic66 *
=66+ ,
false66- 2
;662 3
public88 

override88 
void88 
Good88 
(88 
HttpRequest88 )
req88* -
,88- .
HttpResponse88/ ;
resp88< @
)88@ A
{99 
GoodB2G1:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
GoodB2G2;; 
(;; 
req;; 
,;; 
resp;; 
);; 
;;; 
GoodG2B<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
}== 
private@@ 
void@@ 
GoodB2G1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
intBB 
dataBB 
=BB 
$numBB 
;BB 
dataCC 
=CC 
intCC 
.CC 
MinValueCC 
;CC 
{EE 	
stringFF 
stringNumberFF 
=FF  !
reqFF" %
.FF% &
ParamsFF& ,
.FF, -
GetFF- 0
(FF0 1
$strFF1 7
)FF7 8
;FF8 9
tryGG 
{HH 
dataII 
=II 
intII 
.II 
ParseII  
(II  !
stringNumberII! -
.II- .
TrimII. 2
(II2 3
)II3 4
)II4 5
;II5 6
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$str	MMF Ç
)
MMÇ É
;
MMÉ Ñ
}NN 
}OO 	 
goodB2G1PublicStaticPP 
=PP 
falsePP $
;PP$ %@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_22bQQ <
.QQ< =
GoodB2G1SinkQQ= I
(QQI J
dataQQJ N
,QQO P
reqQQQ T
,QQT U
respQQV Z
)QQZ [
;QQ[ \
}RR 
privateUU 
voidUU 
GoodB2G2UU 
(UU 
HttpRequestUU %
reqUU& )
,UU) *
HttpResponseUU+ 7
respUU8 <
)UU< =
{VV 
intWW 
dataWW 
=WW 
$numWW 
;WW 
dataXX 
=XX 
intXX 
.XX 
MinValueXX 
;XX 
{ZZ 	
string[[ 
stringNumber[[ 
=[[  !
req[[" %
.[[% &
Params[[& ,
.[[, -
Get[[- 0
([[0 1
$str[[1 7
)[[7 8
;[[8 9
try\\ 
{]] 
data^^ 
=^^ 
int^^ 
.^^ 
Parse^^  
(^^  !
stringNumber^^! -
.^^- .
Trim^^. 2
(^^2 3
)^^3 4
)^^4 5
;^^5 6
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb "
.bb" #
LogLevelbb# +
.bb+ ,
Warnbb, 0
,bb0 1
exceptNumberFormatbb2 D
,bbD E
$str	bbF Ç
)
bbÇ É
;
bbÉ Ñ
}cc 
}dd 	 
goodB2G2PublicStaticee 
=ee 
trueee #
;ee# $@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_22bff <
.ff< =
GoodB2G2Sinkff= I
(ffI J
dataffJ N
,ffO P
reqffQ T
,ffT U
respffV Z
)ffZ [
;ff[ \
}gg 
privatejj 
voidjj 
GoodG2Bjj 
(jj 
HttpRequestjj $
reqjj% (
,jj( )
HttpResponsejj* 6
respjj7 ;
)jj; <
{kk 
intll 
datall 
=ll 
$numll 
;ll 
datann 
=nn 
$numnn 
;nn 
goodG2BPublicStaticoo 
=oo 
trueoo "
;oo" #@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_22bpp <
.pp< =
GoodG2BSinkpp= H
(ppH I
datappI M
,ppN O
reqppP S
,ppS T
respppU Y
)ppY Z
;ppZ [
}qq 
}ss 
}tt ì$
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_22b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_22b :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
if 

( @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_22a @
.@ A
badPublicStaticA P
)P Q
{ 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
%""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
}** 
public// 

static// 
void// 
GoodB2G1Sink// #
(//# $
int//$ '
data//( ,
,//- .
HttpRequest/// :
req//; >
,//> ?
HttpResponse//@ L
resp//M Q
)//Q R
{00 
if11 

(11 @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_22a11 @
.11@ A 
goodB2G1PublicStatic11A U
)11U V
{22 	
data55 
=55 
$num55 
;55 
}66 	
else77 
{88 	
if:: 
(:: 
data:: 
!=:: 
$num:: 
):: 
{;; 
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< #
+<<$ %
data<<& *
+<<+ ,
$str<<- 2
+<<3 4
(<<5 6
$num<<6 9
%<<: ;
data<<< @
)<<@ A
+<<B C
$str<<D H
)<<H I
;<<I J
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ D
)@@D E
;@@E F
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2G2SinkFF #
(FF# $
intFF$ '
dataFF( ,
,FF- .
HttpRequestFF/ :
reqFF; >
,FF> ?
HttpResponseFF@ L
respFFM Q
)FFQ R
{GG 
ifHH 

(HH @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_22aHH @
.HH@ A 
goodB2G2PublicStaticHHA U
)HHU V
{II 	
ifKK 
(KK 
dataKK 
!=KK 
$numKK 
)KK 
{LL 
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM #
+MM$ %
dataMM& *
+MM+ ,
$strMM- 2
+MM3 4
(MM5 6
$numMM6 9
%MM: ;
dataMM< @
)MM@ A
+MMB C
$strMMD H
)MMH I
;MMI J
}NN 
elseOO 
{PP 
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ D
)QQD E
;QQE F
}RR 
}SS 	
elseTT 
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
}ZZ 
public]] 

static]] 
void]] 
GoodG2BSink]] "
(]]" #
int]]# &
data]]' +
,]], -
HttpRequest]]. 9
req]]: =
,]]= >
HttpResponse]]? K
resp]]L P
)]]P Q
{^^ 
if__ 

(__ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_22a__ @
.__@ A
goodG2BPublicStatic__A T
)__T U
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc 
+cc  !
datacc" &
+cc' (
$strcc) .
+cc/ 0
(cc1 2
$numcc2 5
%cc6 7
datacc8 <
)cc< =
+cc> ?
$strcc@ D
)ccD E
;ccE F
}dd 	
elseee 
{ff 	
dataii 
=ii 
$numii 
;ii 
}jj 	
}kk 
}mm 
}nn ¿.
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_31.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_31 9
:: ;
AbstractTestCaseWeb< O
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
dataCopy 
; 
{   	
int!! 
data!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
string%% 
stringNumber%% #
=%%$ %
req%%& )
.%%) *
Params%%* 0
.%%0 1
Get%%1 4
(%%4 5
$str%%5 ;
)%%; <
;%%< =
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse(( $
((($ %
stringNumber((% 1
.((1 2
Trim((2 6
(((6 7
)((7 8
)((8 9
;((9 :
})) 
catch** 
(** 
FormatException** &
exceptNumberFormat**' 9
)**9 :
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, !
(,,! "
NLog,," &
.,,& '
LogLevel,,' /
.,,/ 0
Warn,,0 4
,,,4 5
exceptNumberFormat,,6 H
,,,H I
$str	,,J Ü
)
,,Ü á
;
,,á à
}-- 
}.. 
dataCopy// 
=// 
data// 
;// 
}00 	
{11 	
int22 
data22 
=22 
dataCopy22 
;22  
IO55 
.55 
	WriteLine55 
(55 
$str55 
+55  !
data55" &
+55' (
$str55) .
+55/ 0
(551 2
$num552 5
%556 7
data558 <
)55< =
+55> ?
$str55@ D
)55D E
;55E F
}66 	
}77 
public:: 

override:: 
void:: 
Good:: 
(:: 
HttpRequest:: )
req::* -
,::- .
HttpResponse::/ ;
resp::< @
)::@ A
{;; 
GoodG2B<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
GoodB2G== 
(== 
req== 
,== 
resp== 
)== 
;== 
}>> 
privateAA 
voidAA 
GoodG2BAA 
(AA 
HttpRequestAA $
reqAA% (
,AA( )
HttpResponseAA* 6
respAA7 ;
)AA; <
{BB 
intCC 
dataCopyCC 
;CC 
{DD 	
intEE 
dataEE 
;EE 
dataGG 
=GG 
$numGG 
;GG 
dataCopyHH 
=HH 
dataHH 
;HH 
}II 	
{JJ 	
intKK 
dataKK 
=KK 
dataCopyKK 
;KK  
IONN 
.NN 
	WriteLineNN 
(NN 
$strNN 
+NN  !
dataNN" &
+NN' (
$strNN) .
+NN/ 0
(NN1 2
$numNN2 5
%NN6 7
dataNN8 <
)NN< =
+NN> ?
$strNN@ D
)NND E
;NNE F
}OO 	
}PP 
privateSS 
voidSS 
GoodB2GSS 
(SS 
HttpRequestSS $
reqSS% (
,SS( )
HttpResponseSS* 6
respSS7 ;
)SS; <
{TT 
intUU 
dataCopyUU 
;UU 
{VV 	
intWW 
dataWW 
;WW 
dataXX 
=XX 
intXX 
.XX 
MinValueXX 
;XX  
{ZZ 
string[[ 
stringNumber[[ #
=[[$ %
req[[& )
.[[) *
Params[[* 0
.[[0 1
Get[[1 4
([[4 5
$str[[5 ;
)[[; <
;[[< =
try\\ 
{]] 
data^^ 
=^^ 
int^^ 
.^^ 
Parse^^ $
(^^$ %
stringNumber^^% 1
.^^1 2
Trim^^2 6
(^^6 7
)^^7 8
)^^8 9
;^^9 :
}__ 
catch`` 
(`` 
FormatException`` &
exceptNumberFormat``' 9
)``9 :
{aa 
IObb 
.bb 
Loggerbb 
.bb 
Logbb !
(bb! "
NLogbb" &
.bb& '
LogLevelbb' /
.bb/ 0
Warnbb0 4
,bb4 5
exceptNumberFormatbb6 H
,bbH I
$str	bbJ Ü
)
bbÜ á
;
bbá à
}cc 
}dd 
dataCopyee 
=ee 
dataee 
;ee 
}ff 	
{gg 	
inthh 
datahh 
=hh 
dataCopyhh 
;hh  
ifjj 
(jj 
datajj 
!=jj 
$numjj 
)jj 
{kk 
IOll 
.ll 
	WriteLinell 
(ll 
$strll #
+ll$ %
datall& *
+ll+ ,
$strll- 2
+ll3 4
(ll5 6
$numll6 9
%ll: ;
datall< @
)ll@ A
+llB C
$strllD H
)llH I
;llI J
}mm 
elsenn 
{oo 
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp D
)ppD E
;ppE F
}qq 
}rr 	
}ss 
}uu 
}vv Û2
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_41.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_41 9
:: ;
AbstractTestCaseWeb< O
{ 
private 
static 
void 
BadSink 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
HttpRequest$$ (
req$$) ,
,$$, -
HttpResponse$$. :
resp$$; ?
)$$? @
{%% 
int&& 
data&& 
;&& 
data'' 
='' 
int'' 
.'' 
MinValue'' 
;'' 
{)) 	
string** 
stringNumber** 
=**  !
req**" %
.**% &
Params**& ,
.**, -
Get**- 0
(**0 1
$str**1 7
)**7 8
;**8 9
try++ 
{,, 
data-- 
=-- 
int-- 
.-- 
Parse--  
(--  !
stringNumber--! -
.--- .
Trim--. 2
(--2 3
)--3 4
)--4 5
;--5 6
}.. 
catch// 
(// 
FormatException// "
exceptNumberFormat//# 5
)//5 6
{00 
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 "
.11" #
LogLevel11# +
.11+ ,
Warn11, 0
,110 1
exceptNumberFormat112 D
,11D E
$str	11F Ç
)
11Ç É
;
11É Ñ
}22 
}33 	
BadSink44 
(44 
data44 
,44 
req44 
,44 
resp44  
)44! "
;44" #
}55 
public88 

override88 
void88 
Good88 
(88 
HttpRequest88 )
req88* -
,88- .
HttpResponse88/ ;
resp88< @
)88@ A
{99 
GoodG2B:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
GoodB2G;; 
(;; 
req;; 
,;; 
resp;; 
);; 
;;; 
}<< 
private>> 
static>> 
void>> 
GoodG2BSink>> #
(>># $
int>>$ '
data>>( ,
,>>- .
HttpRequest>>/ :
req>>; >
,>>> ?
HttpResponse>>@ L
resp>>M Q
)>>Q R
{?? 
IOBB 

.BB
 
	WriteLineBB 
(BB 
$strBB 
+BB 
dataBB "
+BB# $
$strBB% *
+BB+ ,
(BB- .
$numBB. 1
%BB2 3
dataBB4 8
)BB8 9
+BB: ;
$strBB< @
)BB@ A
;BBA B
}CC 
privateFF 
staticFF 
voidFF 
GoodG2BFF 
(FF  
HttpRequestFF  +
reqFF, /
,FF/ 0
HttpResponseFF1 =
respFF> B
)FFB C
{GG 
intHH 
dataHH 
;HH 
dataJJ 
=JJ 
$numJJ 
;JJ 
GoodG2BSinkKK 
(KK 
dataKK 
,KK 
reqKK 
,KK 
respKK  $
)KK% &
;KK& '
}LL 
privateNN 
staticNN 
voidNN 
GoodB2GSinkNN #
(NN# $
intNN$ '
dataNN( ,
,NN- .
HttpRequestNN/ :
reqNN; >
,NN> ?
HttpResponseNN@ L
respNNM Q
)NNQ R
{OO 
ifQQ 

(QQ 
dataQQ 
!=QQ 
$numQQ 
)QQ 
{RR 	
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS 
+SS  !
dataSS" &
+SS' (
$strSS) .
+SS/ 0
(SS1 2
$numSS2 5
%SS6 7
dataSS8 <
)SS< =
+SS> ?
$strSS@ D
)SSD E
;SSE F
}TT 	
elseUU 
{VV 	
IOWW 
.WW 
	WriteLineWW 
(WW 
$strWW @
)WW@ A
;WWA B
}XX 	
}YY 
private\\ 
static\\ 
void\\ 
GoodB2G\\ 
(\\  
HttpRequest\\  +
req\\, /
,\\/ 0
HttpResponse\\1 =
resp\\> B
)\\B C
{]] 
int^^ 
data^^ 
;^^ 
data__ 
=__ 
int__ 
.__ 
MinValue__ 
;__ 
{aa 	
stringbb 
stringNumberbb 
=bb  !
reqbb" %
.bb% &
Paramsbb& ,
.bb, -
Getbb- 0
(bb0 1
$strbb1 7
)bb7 8
;bb8 9
trycc 
{dd 
dataee 
=ee 
intee 
.ee 
Parseee  
(ee  !
stringNumberee! -
.ee- .
Trimee. 2
(ee2 3
)ee3 4
)ee4 5
;ee5 6
}ff 
catchgg 
(gg 
FormatExceptiongg "
exceptNumberFormatgg# 5
)gg5 6
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptNumberFormatii2 D
,iiD E
$str	iiF Ç
)
iiÇ É
;
iiÉ Ñ
}jj 
}kk 	
GoodB2GSinkll 
(ll 
datall 
,ll 
reqll 
,ll 
respll  $
)ll% &
;ll& '
}mm 
}oo 
}pp ∏3
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_42.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_42 9
:: ;
AbstractTestCaseWeb< O
{ 
private 
static 
int 
	BadSource  
(  !
HttpRequest! ,
req- 0
,0 1
HttpResponse2 >
resp? C
)C D
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
string## 
stringNumber## 
=##  !
req##" %
.##% &
Params##& ,
.##, -
Get##- 0
(##0 1
$str##1 7
)##7 8
;##8 9
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&&  
(&&  !
stringNumber&&! -
.&&- .
Trim&&. 2
(&&2 3
)&&3 4
)&&4 5
;&&5 6
}'' 
catch(( 
((( 
FormatException(( "
exceptNumberFormat((# 5
)((5 6
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
exceptNumberFormat**2 D
,**D E
$str	**F Ç
)
**Ç É
;
**É Ñ
}++ 
},, 	
return-- 
data-- 
;-- 
}.. 
public00 

override00 
void00 
Bad00 
(00 
HttpRequest00 (
req00) ,
,00, -
HttpResponse00. :
resp00; ?
)00? @
{11 
int22 
data22 
=22 
	BadSource22 
(22 
req22  
,22  !
resp22" &
)22& '
;22' (
IO55 

.55
 
	WriteLine55 
(55 
$str55 
+55 
data55 "
+55# $
$str55% *
+55+ ,
(55- .
$num55. 1
%552 3
data554 8
)558 9
+55: ;
$str55< @
)55@ A
;55A B
}66 
private:: 
static:: 
int:: 
GoodG2BSource:: $
(::$ %
HttpRequest::% 0
req::1 4
,::4 5
HttpResponse::6 B
resp::C G
)::G H
{;; 
int<< 
data<< 
;<< 
data>> 
=>> 
$num>> 
;>> 
return?? 
data?? 
;?? 
}@@ 
privateBB 
staticBB 
voidBB 
GoodG2BBB 
(BB  
HttpRequestBB  +
reqBB, /
,BB/ 0
HttpResponseBB1 =
respBB> B
)BBB C
{CC 
intDD 
dataDD 
=DD 
GoodG2BSourceDD  
(DD  !
reqDD! $
,DD$ %
respDD& *
)DD* +
;DD+ ,
IOGG 

.GG
 
	WriteLineGG 
(GG 
$strGG 
+GG 
dataGG "
+GG# $
$strGG% *
+GG+ ,
(GG- .
$numGG. 1
%GG2 3
dataGG4 8
)GG8 9
+GG: ;
$strGG< @
)GG@ A
;GGA B
}HH 
privateKK 
staticKK 
intKK 
GoodB2GSourceKK $
(KK$ %
HttpRequestKK% 0
reqKK1 4
,KK4 5
HttpResponseKK6 B
respKKC G
)KKG H
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
stringQQ 
stringNumberQQ 
=QQ  !
reqQQ" %
.QQ% &
ParamsQQ& ,
.QQ, -
GetQQ- 0
(QQ0 1
$strQQ1 7
)QQ7 8
;QQ8 9
tryRR 
{SS 
dataTT 
=TT 
intTT 
.TT 
ParseTT  
(TT  !
stringNumberTT! -
.TT- .
TrimTT. 2
(TT2 3
)TT3 4
)TT4 5
;TT5 6
}UU 
catchVV 
(VV 
FormatExceptionVV "
exceptNumberFormatVV# 5
)VV5 6
{WW 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$str	XXF Ç
)
XXÇ É
;
XXÉ Ñ
}YY 
}ZZ 	
return[[ 
data[[ 
;[[ 
}\\ 
private^^ 
static^^ 
void^^ 
GoodB2G^^ 
(^^  
HttpRequest^^  +
req^^, /
,^^/ 0
HttpResponse^^1 =
resp^^> B
)^^B C
{__ 
int`` 
data`` 
=`` 
GoodB2GSource``  
(``  !
req``! $
,``$ %
resp``& *
)``* +
;``+ ,
ifbb 

(bb 
databb 
!=bb 
$numbb 
)bb 
{cc 	
IOdd 
.dd 
	WriteLinedd 
(dd 
$strdd 
+dd  !
datadd" &
+dd' (
$strdd) .
+dd/ 0
(dd1 2
$numdd2 5
%dd6 7
datadd8 <
)dd< =
+dd> ?
$strdd@ D
)ddD E
;ddE F
}ee 	
elseff 
{gg 	
IOhh 
.hh 
	WriteLinehh 
(hh 
$strhh @
)hh@ A
;hhA B
}ii 	
}jj 
publicll 

overridell 
voidll 
Goodll 
(ll 
HttpRequestll )
reqll* -
,ll- .
HttpResponsell/ ;
respll< @
)ll@ A
{mm 
GoodG2Bnn 
(nn 
reqnn 
,nn 
respnn 
)nn 
;nn 
GoodB2Goo 
(oo 
reqoo 
,oo 
respoo 
)oo 
;oo 
}pp 
}rr 
}ss ›5
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_45.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_45 9
:: ;
AbstractTestCaseWeb< O
{ 
private 
int 
dataBad 
; 
private 
int 
dataGoodG2B 
; 
private 
int 
dataGoodB2G 
; 
private!! 
void!! 
BadSink!! 
(!! 
HttpRequest!! $
req!!% (
,!!( )
HttpResponse!!* 6
resp!!7 ;
)!!; <
{"" 
int## 
data## 
=## 
dataBad## 
;## 
IO&& 

.&&
 
	WriteLine&& 
(&& 
$str&& 
+&& 
data&& "
+&&# $
$str&&% *
+&&+ ,
(&&- .
$num&&. 1
%&&2 3
data&&4 8
)&&8 9
+&&: ;
$str&&< @
)&&@ A
;&&A B
}'' 
public)) 

override)) 
void)) 
Bad)) 
()) 
HttpRequest)) (
req))) ,
,)), -
HttpResponse)). :
resp)); ?
)))? @
{** 
int++ 
data++ 
;++ 
data,, 
=,, 
int,, 
.,, 
MinValue,, 
;,, 
{.. 	
string// 
stringNumber// 
=//  !
req//" %
.//% &
Params//& ,
.//, -
Get//- 0
(//0 1
$str//1 7
)//7 8
;//8 9
try00 
{11 
data22 
=22 
int22 
.22 
Parse22  
(22  !
stringNumber22! -
.22- .
Trim22. 2
(222 3
)223 4
)224 5
;225 6
}33 
catch44 
(44 
FormatException44 "
exceptNumberFormat44# 5
)445 6
{55 
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 "
.66" #
LogLevel66# +
.66+ ,
Warn66, 0
,660 1
exceptNumberFormat662 D
,66D E
$str	66F Ç
)
66Ç É
;
66É Ñ
}77 
}88 	
dataBad99 
=99 
data99 
;99 
BadSink:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
};; 
public>> 

override>> 
void>> 
Good>> 
(>> 
HttpRequest>> )
req>>* -
,>>- .
HttpResponse>>/ ;
resp>>< @
)>>@ A
{?? 
GoodG2B@@ 
(@@ 
req@@ 
,@@ 
resp@@ 
)@@ 
;@@ 
GoodB2GAA 
(AA 
reqAA 
,AA 
respAA 
)AA 
;AA 
}BB 
privateDD 
voidDD 
GoodG2BSinkDD 
(DD 
HttpRequestDD (
reqDD) ,
,DD, -
HttpResponseDD. :
respDD; ?
)DD? @
{EE 
intFF 
dataFF 
=FF 
dataGoodG2BFF 
;FF 
IOII 

.II
 
	WriteLineII 
(II 
$strII 
+II 
dataII "
+II# $
$strII% *
+II+ ,
(II- .
$numII. 1
%II2 3
dataII4 8
)II8 9
+II: ;
$strII< @
)II@ A
;IIA B
}JJ 
privateMM 
voidMM 
GoodG2BMM 
(MM 
HttpRequestMM $
reqMM% (
,MM( )
HttpResponseMM* 6
respMM7 ;
)MM; <
{NN 
intOO 
dataOO 
;OO 
dataQQ 
=QQ 
$numQQ 
;QQ 
dataGoodG2BRR 
=RR 
dataRR 
;RR 
GoodG2BSinkSS 
(SS 
reqSS 
,SS 
respSS 
)SS 
;SS 
}TT 
privateVV 
voidVV 
GoodB2GSinkVV 
(VV 
HttpRequestVV (
reqVV) ,
,VV, -
HttpResponseVV. :
respVV; ?
)VV? @
{WW 
intXX 
dataXX 
=XX 
dataGoodB2GXX 
;XX 
ifZZ 

(ZZ 
dataZZ 
!=ZZ 
$numZZ 
)ZZ 
{[[ 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ 
+\\  !
data\\" &
+\\' (
$str\\) .
+\\/ 0
(\\1 2
$num\\2 5
%\\6 7
data\\8 <
)\\< =
+\\> ?
$str\\@ D
)\\D E
;\\E F
}]] 	
else^^ 
{__ 	
IO`` 
.`` 
	WriteLine`` 
(`` 
$str`` @
)``@ A
;``A B
}aa 	
}bb 
privateee 
voidee 
GoodB2Gee 
(ee 
HttpRequestee $
reqee% (
,ee( )
HttpResponseee* 6
respee7 ;
)ee; <
{ff 
intgg 
datagg 
;gg 
datahh 
=hh 
inthh 
.hh 
MinValuehh 
;hh 
{jj 	
stringkk 
stringNumberkk 
=kk  !
reqkk" %
.kk% &
Paramskk& ,
.kk, -
Getkk- 0
(kk0 1
$strkk1 7
)kk7 8
;kk8 9
tryll 
{mm 
datann 
=nn 
intnn 
.nn 
Parsenn  
(nn  !
stringNumbernn! -
.nn- .
Trimnn. 2
(nn2 3
)nn3 4
)nn4 5
;nn5 6
}oo 
catchpp 
(pp 
FormatExceptionpp "
exceptNumberFormatpp# 5
)pp5 6
{qq 
IOrr 
.rr 
Loggerrr 
.rr 
Logrr 
(rr 
NLogrr "
.rr" #
LogLevelrr# +
.rr+ ,
Warnrr, 0
,rr0 1
exceptNumberFormatrr2 D
,rrD E
$str	rrF Ç
)
rrÇ É
;
rrÉ Ñ
}ss 
}tt 	
dataGoodB2Guu 
=uu 
datauu 
;uu 
GoodB2GSinkvv 
(vv 
reqvv 
,vv 
respvv 
)vv 
;vv 
}ww 
}yy 
}zz Ç$
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_51a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_51a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_51b,, <
.,,< =
BadSink,,= D
(,,D E
data,,E I
,,,J K
req,,L O
,,,O P
resp,,Q U
),,V W
;,,W X
}-- 
public00 

override00 
void00 
Good00 
(00 
HttpRequest00 )
req00* -
,00- .
HttpResponse00/ ;
resp00< @
)00@ A
{11 
GoodG2B22 
(22 
req22 
,22 
resp22 
)22 
;22 
GoodB2G33 
(33 
req33 
,33 
resp33 
)33 
;33 
}44 
private77 
void77 
GoodG2B77 
(77 
HttpRequest77 $
req77% (
,77( )
HttpResponse77* 6
resp777 ;
)77; <
{88 
int99 
data99 
;99 
data;; 
=;; 
$num;; 
;;; @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_51b<< <
.<<< =
GoodG2BSink<<= H
(<<H I
data<<I M
,<<N O
req<<P S
,<<S T
resp<<U Y
)<<Z [
;<<[ \
}== 
private@@ 
void@@ 
GoodB2G@@ 
(@@ 
HttpRequest@@ $
req@@% (
,@@( )
HttpResponse@@* 6
resp@@7 ;
)@@; <
{AA 
intBB 
dataBB 
;BB 
dataCC 
=CC 
intCC 
.CC 
MinValueCC 
;CC 
{EE 	
stringFF 
stringNumberFF 
=FF  !
reqFF" %
.FF% &
ParamsFF& ,
.FF, -
GetFF- 0
(FF0 1
$strFF1 7
)FF7 8
;FF8 9
tryGG 
{HH 
dataII 
=II 
intII 
.II 
ParseII  
(II  !
stringNumberII! -
.II- .
TrimII. 2
(II2 3
)II3 4
)II4 5
;II5 6
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$str	MMF Ç
)
MMÇ É
;
MMÉ Ñ
}NN 
}OO 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_51bPP <
.PP< =
GoodB2GSinkPP= H
(PPH I
dataPPI M
,PPN O
reqPPP S
,PPS T
respPPU Y
)PPZ [
;PP[ \
}QQ 
}SS 
}TT –
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_51b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_51b :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Ç$
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_52a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_52a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_52b,, <
.,,< =
BadSink,,= D
(,,D E
data,,E I
,,,J K
req,,L O
,,,O P
resp,,Q U
),,U V
;,,V W
}-- 
public00 

override00 
void00 
Good00 
(00 
HttpRequest00 )
req00* -
,00- .
HttpResponse00/ ;
resp00< @
)00@ A
{11 
GoodG2B22 
(22 
req22 
,22 
resp22 
)22 
;22 
GoodB2G33 
(33 
req33 
,33 
resp33 
)33 
;33 
}44 
private77 
void77 
GoodG2B77 
(77 
HttpRequest77 $
req77% (
,77( )
HttpResponse77* 6
resp777 ;
)77; <
{88 
int99 
data99 
;99 
data;; 
=;; 
$num;; 
;;; @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_52b<< <
.<<< =
GoodG2BSink<<= H
(<<H I
data<<I M
,<<N O
req<<P S
,<<S T
resp<<U Y
)<<Y Z
;<<Z [
}== 
private@@ 
void@@ 
GoodB2G@@ 
(@@ 
HttpRequest@@ $
req@@% (
,@@( )
HttpResponse@@* 6
resp@@7 ;
)@@; <
{AA 
intBB 
dataBB 
;BB 
dataCC 
=CC 
intCC 
.CC 
MinValueCC 
;CC 
{EE 	
stringFF 
stringNumberFF 
=FF  !
reqFF" %
.FF% &
ParamsFF& ,
.FF, -
GetFF- 0
(FF0 1
$strFF1 7
)FF7 8
;FF8 9
tryGG 
{HH 
dataII 
=II 
intII 
.II 
ParseII  
(II  !
stringNumberII! -
.II- .
TrimII. 2
(II2 3
)II3 4
)II4 5
;II5 6
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$str	MMF Ç
)
MMÇ É
;
MMÉ Ñ
}NN 
}OO 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_52bPP <
.PP< =
GoodB2GSinkPP= H
(PPH I
dataPPI M
,PPN O
reqPPP S
,PPS T
respPPU Y
)PPY Z
;PPZ [
}QQ 
}SS 
}TT Ω
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_52b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_52b :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_52c <
.< =
BadSink= D
(D E
dataE I
,J K
reqL O
,O P
respQ U
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_52c&& <
.&&< =
GoodG2BSink&&= H
(&&H I
data&&I M
,&&N O
req&&P S
,&&S T
resp&&U Y
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_52c,, <
.,,< =
GoodB2GSink,,= H
(,,H I
data,,I M
,,,N O
req,,P S
,,,S T
resp,,U Y
),,Y Z
;,,Z [
}-- 
}// 
}00 –
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_52c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_52c :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Ç$
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53b,, <
.,,< =
BadSink,,= D
(,,D E
data,,E I
,,,J K
req,,L O
,,,O P
resp,,Q U
),,U V
;,,V W
}-- 
public00 

override00 
void00 
Good00 
(00 
HttpRequest00 )
req00* -
,00- .
HttpResponse00/ ;
resp00< @
)00@ A
{11 
GoodG2B22 
(22 
req22 
,22 
resp22 
)22 
;22 
GoodB2G33 
(33 
req33 
,33 
resp33 
)33 
;33 
}44 
private77 
void77 
GoodG2B77 
(77 
HttpRequest77 $
req77% (
,77( )
HttpResponse77* 6
resp777 ;
)77; <
{88 
int99 
data99 
;99 
data;; 
=;; 
$num;; 
;;; @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53b<< <
.<<< =
GoodG2BSink<<= H
(<<H I
data<<I M
,<<N O
req<<P S
,<<S T
resp<<U Y
)<<Y Z
;<<Z [
}== 
private@@ 
void@@ 
GoodB2G@@ 
(@@ 
HttpRequest@@ $
req@@% (
,@@( )
HttpResponse@@* 6
resp@@7 ;
)@@; <
{AA 
intBB 
dataBB 
;BB 
dataCC 
=CC 
intCC 
.CC 
MinValueCC 
;CC 
{EE 	
stringFF 
stringNumberFF 
=FF  !
reqFF" %
.FF% &
ParamsFF& ,
.FF, -
GetFF- 0
(FF0 1
$strFF1 7
)FF7 8
;FF8 9
tryGG 
{HH 
dataII 
=II 
intII 
.II 
ParseII  
(II  !
stringNumberII! -
.II- .
TrimII. 2
(II2 3
)II3 4
)II4 5
;II5 6
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$str	MMF Ç
)
MMÇ É
;
MMÉ Ñ
}NN 
}OO 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53bPP <
.PP< =
GoodB2GSinkPP= H
(PPH I
dataPPI M
,PPN O
reqPPP S
,PPS T
respPPU Y
)PPY Z
;PPZ [
}QQ 
}SS 
}TT Ω
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53b :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53c <
.< =
BadSink= D
(D E
dataE I
,J K
reqL O
,O P
respQ U
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53c&& <
.&&< =
GoodG2BSink&&= H
(&&H I
data&&I M
,&&N O
req&&P S
,&&S T
resp&&U Y
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53c,, <
.,,< =
GoodB2GSink,,= H
(,,H I
data,,I M
,,,N O
req,,P S
,,,S T
resp,,U Y
),,Y Z
;,,Z [
}-- 
}// 
}00 Ω
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53c :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53d <
.< =
BadSink= D
(D E
dataE I
,J K
reqL O
,O P
respQ U
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53d&& <
.&&< =
GoodG2BSink&&= H
(&&H I
data&&I M
,&&N O
req&&P S
,&&S T
resp&&U Y
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53d,, <
.,,< =
GoodB2GSink,,= H
(,,H I
data,,I M
,,,N O
req,,P S
,,,S T
resp,,U Y
),,Y Z
;,,Z [
}-- 
}// 
}00 –
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_53d :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Ç$
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54b,, <
.,,< =
BadSink,,= D
(,,D E
data,,E I
,,,J K
req,,L O
,,,O P
resp,,Q U
),,U V
;,,V W
}-- 
public00 

override00 
void00 
Good00 
(00 
HttpRequest00 )
req00* -
,00- .
HttpResponse00/ ;
resp00< @
)00@ A
{11 
GoodG2B22 
(22 
req22 
,22 
resp22 
)22 
;22 
GoodB2G33 
(33 
req33 
,33 
resp33 
)33 
;33 
}44 
private77 
void77 
GoodG2B77 
(77 
HttpRequest77 $
req77% (
,77( )
HttpResponse77* 6
resp777 ;
)77; <
{88 
int99 
data99 
;99 
data;; 
=;; 
$num;; 
;;; @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54b<< <
.<<< =
GoodG2BSink<<= H
(<<H I
data<<I M
,<<N O
req<<P S
,<<S T
resp<<U Y
)<<Y Z
;<<Z [
}== 
private@@ 
void@@ 
GoodB2G@@ 
(@@ 
HttpRequest@@ $
req@@% (
,@@( )
HttpResponse@@* 6
resp@@7 ;
)@@; <
{AA 
intBB 
dataBB 
;BB 
dataCC 
=CC 
intCC 
.CC 
MinValueCC 
;CC 
{EE 	
stringFF 
stringNumberFF 
=FF  !
reqFF" %
.FF% &
ParamsFF& ,
.FF, -
GetFF- 0
(FF0 1
$strFF1 7
)FF7 8
;FF8 9
tryGG 
{HH 
dataII 
=II 
intII 
.II 
ParseII  
(II  !
stringNumberII! -
.II- .
TrimII. 2
(II2 3
)II3 4
)II4 5
;II5 6
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$str	MMF Ç
)
MMÇ É
;
MMÉ Ñ
}NN 
}OO 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54bPP <
.PP< =
GoodB2GSinkPP= H
(PPH I
dataPPI M
,PPN O
reqPPP S
,PPS T
respPPU Y
)PPY Z
;PPZ [
}QQ 
}SS 
}TT Ω
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54b :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54c <
.< =
BadSink= D
(D E
dataE I
,J K
reqL O
,O P
respQ U
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54c&& <
.&&< =
GoodG2BSink&&= H
(&&H I
data&&I M
,&&N O
req&&P S
,&&S T
resp&&U Y
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54c,, <
.,,< =
GoodB2GSink,,= H
(,,H I
data,,I M
,,,N O
req,,P S
,,,S T
resp,,U Y
),,Y Z
;,,Z [
}-- 
}// 
}00 Ω
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54c :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54d <
.< =
BadSink= D
(D E
dataE I
,J K
reqL O
,O P
respQ U
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54d&& <
.&&< =
GoodG2BSink&&= H
(&&H I
data&&I M
,&&N O
req&&P S
,&&S T
resp&&U Y
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54d,, <
.,,< =
GoodB2GSink,,= H
(,,H I
data,,I M
,,,N O
req,,P S
,,,S T
resp,,U Y
),,Y Z
;,,Z [
}-- 
}// 
}00 Ω
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54d :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54e <
.< =
BadSink= D
(D E
dataE I
,J K
reqL O
,O P
respQ U
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54e&& <
.&&< =
GoodG2BSink&&= H
(&&H I
data&&I M
,&&N O
req&&P S
,&&S T
resp&&U Y
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54e,, <
.,,< =
GoodB2GSink,,= H
(,,H I
data,,I M
,,,N O
req,,P S
,,,S T
resp,,U Y
),,Y Z
;,,Z [
}-- 
}// 
}00 –
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54e.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_54e :
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< ¨
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_61a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_61a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
= @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_61b G
.G H
	BadSourceH Q
(Q R
reqR U
,U V
respW [
)[ \
;\ ]
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
HttpRequest%% )
req%%* -
,%%- .
HttpResponse%%/ ;
resp%%< @
)%%@ A
{&& 
GoodG2B'' 
('' 
req'' 
,'' 
resp'' 
)'' 
;'' 
GoodB2G(( 
((( 
req(( 
,(( 
resp(( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
HttpRequest,,  +
req,,, /
,,,/ 0
HttpResponse,,1 =
resp,,> B
),,B C
{-- 
int.. 
data.. 
=.. @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_61b.. G
...G H
GoodG2BSource..H U
(..U V
req..V Y
,..Y Z
resp..[ _
).._ `
;..` a
IO11 

.11
 
	WriteLine11 
(11 
$str11 
+11 
data11 "
+11# $
$str11% *
+11+ ,
(11- .
$num11. 1
%112 3
data114 8
)118 9
+11: ;
$str11< @
)11@ A
;11A B
}22 
private55 
static55 
void55 
GoodB2G55 
(55  
HttpRequest55  +
req55, /
,55/ 0
HttpResponse551 =
resp55> B
)55B C
{66 
int77 
data77 
=77 @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_61b77 G
.77G H
GoodB2GSource77H U
(77U V
req77V Y
,77Y Z
resp77[ _
)77_ `
;77` a
if99 

(99 
data99 
!=99 
$num99 
)99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; 
+;;  !
data;;" &
+;;' (
$str;;) .
+;;/ 0
(;;1 2
$num;;2 5
%;;6 7
data;;8 <
);;< =
+;;> ?
$str;;@ D
);;D E
;;;E F
}<< 	
else== 
{>> 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? @
)??@ A
;??A B
}@@ 	
}AA 
}CC 
}DD ì
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_61b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_61b :
{ 
public 

static 
int 
	BadSource 
(  
HttpRequest  +
req, /
,/ 0
HttpResponse1 =
resp> B
)B C
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	
return,, 
data,, 
;,, 
}-- 
public22 

static22 
int22 
GoodG2BSource22 #
(22# $
HttpRequest22$ /
req220 3
,223 4
HttpResponse225 A
resp22B F
)22F G
{33 
int44 
data44 
;44 
data66 
=66 
$num66 
;66 
return77 
data77 
;77 
}88 
public;; 

static;; 
int;; 
GoodB2GSource;; #
(;;# $
HttpRequest;;$ /
req;;0 3
,;;3 4
HttpResponse;;5 A
resp;;B F
);;F G
{<< 
int== 
data== 
;== 
data>> 
=>> 
int>> 
.>> 
MinValue>> 
;>> 
{@@ 	
stringAA 
stringNumberAA 
=AA  !
reqAA" %
.AA% &
ParamsAA& ,
.AA, -
GetAA- 0
(AA0 1
$strAA1 7
)AA7 8
;AA8 9
tryBB 
{CC 
dataDD 
=DD 
intDD 
.DD 
ParseDD  
(DD  !
stringNumberDD! -
.DD- .
TrimDD. 2
(DD2 3
)DD3 4
)DD4 5
;DD5 6
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOHH 
.HH 
LoggerHH 
.HH 
LogHH 
(HH 
NLogHH "
.HH" #
LogLevelHH# +
.HH+ ,
WarnHH, 0
,HH0 1
exceptNumberFormatHH2 D
,HHD E
$str	HHF Ç
)
HHÇ É
;
HHÉ Ñ
}II 
}JJ 	
returnKK 
dataKK 
;KK 
}LL 
}NN 
}OO ¿+
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_66a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_66a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	
int,, 
[,, 
],, 
	dataArray,, 
=,, 
new,, 
int,, !
[,,! "
$num,," #
],,# $
;,,$ %
	dataArray-- 
[-- 
$num-- 
]-- 
=-- 
data-- 
;-- @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_66b.. <
...< =
BadSink..= D
(..D E
	dataArray..E N
,..O P
req..Q T
,..T U
resp..V Z
)..[ \
;..\ ]
}// 
public22 

override22 
void22 
Good22 
(22 
HttpRequest22 )
req22* -
,22- .
HttpResponse22/ ;
resp22< @
)22@ A
{33 
GoodG2B44 
(44 
req44 
,44 
resp44 
)44 
;44 
GoodB2G55 
(55 
req55 
,55 
resp55 
)55 
;55 
}66 
private99 
static99 
void99 
GoodG2B99 
(99  
HttpRequest99  +
req99, /
,99/ 0
HttpResponse991 =
resp99> B
)99B C
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== 
int>> 
[>> 
]>> 
	dataArray>> 
=>> 
new>> 
int>> !
[>>! "
$num>>" #
]>># $
;>>$ %
	dataArray?? 
[?? 
$num?? 
]?? 
=?? 
data?? 
;?? @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_66b@@ <
.@@< =
GoodG2BSink@@= H
(@@H I
	dataArray@@I R
,@@S T
req@@U X
,@@X Y
resp@@Z ^
)@@_ `
;@@` a
}AA 
privateDD 
staticDD 
voidDD 
GoodB2GDD 
(DD  
HttpRequestDD  +
reqDD, /
,DD/ 0
HttpResponseDD1 =
respDD> B
)DDB C
{EE 
intFF 
dataFF 
;FF 
dataGG 
=GG 
intGG 
.GG 
MinValueGG 
;GG 
{II 	
stringJJ 
stringNumberJJ 
=JJ  !
reqJJ" %
.JJ% &
ParamsJJ& ,
.JJ, -
GetJJ- 0
(JJ0 1
$strJJ1 7
)JJ7 8
;JJ8 9
tryKK 
{LL 
dataMM 
=MM 
intMM 
.MM 
ParseMM  
(MM  !
stringNumberMM! -
.MM- .
TrimMM. 2
(MM2 3
)MM3 4
)MM4 5
;MM5 6
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptNumberFormatQQ2 D
,QQD E
$str	QQF Ç
)
QQÇ É
;
QQÉ Ñ
}RR 
}SS 	
intTT 
[TT 
]TT 
	dataArrayTT 
=TT 
newTT 
intTT !
[TT! "
$numTT" #
]TT# $
;TT$ %
	dataArrayUU 
[UU 
$numUU 
]UU 
=UU 
dataUU 
;UU @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_66bVV <
.VV< =
GoodB2GSinkVV= H
(VVH I
	dataArrayVVI R
,VVS T
reqVVU X
,VVX Y
respVVZ ^
)VV_ `
;VV` a
}WW 
}YY 
}ZZ —
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_66b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_66b :
{ 
public 

static 
void 
BadSink 
( 
int "
[" #
]# $
	dataArray% .
,/ 0
HttpRequest1 <
req= @
,@ A
HttpResponseB N
respO S
)S T
{ 
int 
data 
= 
	dataArray 
[ 
$num 
] 
;  
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
int''# &
[''& '
]''' (
	dataArray'') 2
,''3 4
HttpRequest''5 @
req''A D
,''D E
HttpResponse''F R
resp''S W
)''W X
{(( 
int)) 
data)) 
=)) 
	dataArray)) 
[)) 
$num)) 
])) 
;))  
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
int00# &
[00& '
]00' (
	dataArray00) 2
,003 4
HttpRequest005 @
req00A D
,00D E
HttpResponse00F R
resp00S W
)00W X
{11 
int22 
data22 
=22 
	dataArray22 
[22 
$num22 
]22 
;22  
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ç,
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_67a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_67a :
:; <
AbstractTestCaseWeb= P
{ 
public 

class 
	Container 
{ 
public 
int 
containerOne 
;  
} 
public!! 

override!! 
void!! 
Bad!! 
(!! 
HttpRequest!! (
req!!) ,
,!!, -
HttpResponse!!. :
resp!!; ?
)!!? @
{"" 
int## 
data## 
;## 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$ 
{&& 	
string'' 
stringNumber'' 
=''  !
req''" %
.''% &
Params''& ,
.'', -
Get''- 0
(''0 1
$str''1 7
)''7 8
;''8 9
try(( 
{)) 
data** 
=** 
int** 
.** 
Parse**  
(**  !
stringNumber**! -
.**- .
Trim**. 2
(**2 3
)**3 4
)**4 5
;**5 6
}++ 
catch,, 
(,, 
FormatException,, "
exceptNumberFormat,,# 5
),,5 6
{-- 
IO.. 
... 
Logger.. 
... 
Log.. 
(.. 
NLog.. "
..." #
LogLevel..# +
...+ ,
Warn.., 0
,..0 1
exceptNumberFormat..2 D
,..D E
$str	..F Ç
)
..Ç É
;
..É Ñ
}// 
}00 	
	Container11 
dataContainer11 
=11  !
new11" %
	Container11& /
(11/ 0
)110 1
;111 2
dataContainer22 
.22 
containerOne22 "
=22# $
data22% )
;22) *@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_67b33 <
.33< =
BadSink33= D
(33D E
dataContainer33E R
,33S T
req33U X
,33X Y
resp33Z ^
)33_ `
;33` a
}44 
public77 

override77 
void77 
Good77 
(77 
HttpRequest77 )
req77* -
,77- .
HttpResponse77/ ;
resp77< @
)77@ A
{88 
GoodG2B99 
(99 
req99 
,99 
resp99 
)99 
;99 
GoodB2G:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
};; 
private>> 
static>> 
void>> 
GoodG2B>> 
(>>  
HttpRequest>>  +
req>>, /
,>>/ 0
HttpResponse>>1 =
resp>>> B
)>>B C
{?? 
int@@ 
data@@ 
;@@ 
dataBB 
=BB 
$numBB 
;BB 
	ContainerCC 
dataContainerCC 
=CC  !
newCC" %
	ContainerCC& /
(CC/ 0
)CC0 1
;CC1 2
dataContainerDD 
.DD 
containerOneDD "
=DD# $
dataDD% )
;DD) *@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_67bEE <
.EE< =
GoodG2BSinkEE= H
(EEH I
dataContainerEEI V
,EEW X
reqEEY \
,EE\ ]
respEE^ b
)EEc d
;EEd e
}FF 
privateII 
staticII 
voidII 
GoodB2GII 
(II  
HttpRequestII  +
reqII, /
,II/ 0
HttpResponseII1 =
respII> B
)IIB C
{JJ 
intKK 
dataKK 
;KK 
dataLL 
=LL 
intLL 
.LL 
MinValueLL 
;LL 
{NN 	
stringOO 
stringNumberOO 
=OO  !
reqOO" %
.OO% &
ParamsOO& ,
.OO, -
GetOO- 0
(OO0 1
$strOO1 7
)OO7 8
;OO8 9
tryPP 
{QQ 
dataRR 
=RR 
intRR 
.RR 
ParseRR  
(RR  !
stringNumberRR! -
.RR- .
TrimRR. 2
(RR2 3
)RR3 4
)RR4 5
;RR5 6
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$str	VVF Ç
)
VVÇ É
;
VVÉ Ñ
}WW 
}XX 	
	ContainerYY 
dataContainerYY 
=YY  !
newYY" %
	ContainerYY& /
(YY/ 0
)YY0 1
;YY1 2
dataContainerZZ 
.ZZ 
containerOneZZ "
=ZZ# $
dataZZ% )
;ZZ) *@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_67b[[ <
.[[< =
GoodB2GSink[[= H
([[H I
dataContainer[[I V
,[[W X
req[[Y \
,[[\ ]
resp[[^ b
)[[c d
;[[d e
}\\ 
}^^ 
}__ ñ
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_67b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_67b :
{ 
public 

static 
void 
BadSink 
( @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_67a S
.S T
	ContainerT ]
dataContainer^ k
,l m
HttpRequestn y
reqz }
,} ~
HttpResponse	 ã
resp
å ê
)
ê ë
{ 
int 
data 
= 
dataContainer  
.  !
containerOne! -
;- .
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_67a''# W
.''W X
	Container''X a
dataContainer''b o
,''p q
HttpRequest''r }
req	''~ Å
,
''Å Ç
HttpResponse
''É è
resp
''ê î
)
''î ï
{(( 
int)) 
data)) 
=)) 
dataContainer))  
.))  !
containerOne))! -
;))- .
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_67a00# W
.00W X
	Container00X a
dataContainer00b o
,00p q
HttpRequest00r }
req	00~ Å
,
00Å Ç
HttpResponse
00É è
resp
00ê î
)
00î ï
{11 
int22 
data22 
=22 
dataContainer22  
.22  !
containerOne22! -
;22- .
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ã#
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_68a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_68a :
:; <
AbstractTestCaseWeb= P
{ 
public 

static 
int 
data 
; 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
data   
=   
int   
.   
MinValue   
;   
{"" 	
string## 
stringNumber## 
=##  !
req##" %
.##% &
Params##& ,
.##, -
Get##- 0
(##0 1
$str##1 7
)##7 8
;##8 9
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&&  
(&&  !
stringNumber&&! -
.&&- .
Trim&&. 2
(&&2 3
)&&3 4
)&&4 5
;&&5 6
}'' 
catch(( 
((( 
FormatException(( "
exceptNumberFormat((# 5
)((5 6
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
exceptNumberFormat**2 D
,**D E
$str	**F Ç
)
**Ç É
;
**É Ñ
}++ 
},, 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_68b-- <
.--< =
BadSink--= D
(--D E
req--E H
,--H I
resp--J N
)--N O
;--O P
}.. 
public11 

override11 
void11 
Good11 
(11 
HttpRequest11 )
req11* -
,11- .
HttpResponse11/ ;
resp11< @
)11@ A
{22 
GoodG2B33 
(33 
req33 
,33 
resp33 
)33 
;33 
GoodB2G44 
(44 
req44 
,44 
resp44 
)44 
;44 
}55 
private88 
static88 
void88 
GoodG2B88 
(88  
HttpRequest88  +
req88, /
,88/ 0
HttpResponse881 =
resp88> B
)88B C
{99 
data;; 
=;; 
$num;; 
;;; @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_68b<< <
.<<< =
GoodG2BSink<<= H
(<<H I
req<<I L
,<<L M
resp<<N R
)<<R S
;<<S T
}== 
private@@ 
static@@ 
void@@ 
GoodB2G@@ 
(@@  
HttpRequest@@  +
req@@, /
,@@/ 0
HttpResponse@@1 =
resp@@> B
)@@B C
{AA 
dataBB 
=BB 
intBB 
.BB 
MinValueBB 
;BB 
{DD 	
stringEE 
stringNumberEE 
=EE  !
reqEE" %
.EE% &
ParamsEE& ,
.EE, -
GetEE- 0
(EE0 1
$strEE1 7
)EE7 8
;EE8 9
tryFF 
{GG 
dataHH 
=HH 
intHH 
.HH 
ParseHH  
(HH  !
stringNumberHH! -
.HH- .
TrimHH. 2
(HH2 3
)HH3 4
)HH4 5
;HH5 6
}II 
catchJJ 
(JJ 
FormatExceptionJJ "
exceptNumberFormatJJ# 5
)JJ5 6
{KK 
IOLL 
.LL 
LoggerLL 
.LL 
LogLL 
(LL 
NLogLL "
.LL" #
LogLevelLL# +
.LL+ ,
WarnLL, 0
,LL0 1
exceptNumberFormatLL2 D
,LLD E
$str	LLF Ç
)
LLÇ É
;
LLÉ Ñ
}MM 
}NN 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_68bOO <
.OO< =
GoodB2GSinkOO= H
(OOH I
reqOOI L
,OOL M
respOON R
)OOR S
;OOS T
}PP 
}RR 
}SS ¶
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_68b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_68b :
{ 
public 

static 
void 
BadSink 
( 
HttpRequest *
req+ .
,. /
HttpResponse0 <
resp= A
)A B
{ 
int 
data 
= @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_68a G
.G H
dataH L
;L M
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
HttpRequest''# .
req''/ 2
,''2 3
HttpResponse''4 @
resp''A E
)''E F
{(( 
int)) 
data)) 
=)) @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_68a)) G
.))G H
data))H L
;))L M
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
HttpRequest00# .
req00/ 2
,002 3
HttpResponse004 @
resp00A E
)00E F
{11 
int22 
data22 
=22 @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_68a22 G
.22G H
data22H L
;22L M
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ¿%
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_71a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_71a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_71b,, <
.,,< =
BadSink,,= D
(,,D E
(,,E F
Object,,F L
),,L M
data,,M Q
,,,R S
req,,T W
,,,W X
resp,,Y ]
),,^ _
;,,_ `
}-- 
public00 

override00 
void00 
Good00 
(00 
HttpRequest00 )
req00* -
,00- .
HttpResponse00/ ;
resp00< @
)00@ A
{11 
GoodG2B22 
(22 
req22 
,22 
resp22 
)22 
;22 
GoodB2G33 
(33 
req33 
,33 
resp33 
)33 
;33 
}44 
private77 
static77 
void77 
GoodG2B77 
(77  
HttpRequest77  +
req77, /
,77/ 0
HttpResponse771 =
resp77> B
)77B C
{88 
int99 
data99 
;99 
data;; 
=;; 
$num;; 
;;; @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_71b<< <
.<<< =
GoodG2BSink<<= H
(<<H I
(<<I J
Object<<J P
)<<P Q
data<<Q U
,<<V W
req<<X [
,<<[ \
resp<<] a
)<<b c
;<<c d
}== 
private@@ 
static@@ 
void@@ 
GoodB2G@@ 
(@@  
HttpRequest@@  +
req@@, /
,@@/ 0
HttpResponse@@1 =
resp@@> B
)@@B C
{AA 
intBB 
dataBB 
;BB 
dataCC 
=CC 
intCC 
.CC 
MinValueCC 
;CC 
{EE 	
stringFF 
stringNumberFF 
=FF  !
reqFF" %
.FF% &
ParamsFF& ,
.FF, -
GetFF- 0
(FF0 1
$strFF1 7
)FF7 8
;FF8 9
tryGG 
{HH 
dataII 
=II 
intII 
.II 
ParseII  
(II  !
stringNumberII! -
.II- .
TrimII. 2
(II2 3
)II3 4
)II4 5
;II5 6
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$str	MMF Ç
)
MMÇ É
;
MMÉ Ñ
}NN 
}OO 	@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_71bPP <
.PP< =
GoodB2GSinkPP= H
(PPH I
(PPI J
ObjectPPJ P
)PPP Q
dataPPQ U
,PPV W
reqPPX [
,PP[ \
respPP] a
)PPb c
;PPc d
}QQ 
}SS 
}TT É
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_71b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_71b :
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
,1 2
HttpRequest3 >
req? B
,B C
HttpResponseD P
respQ U
)U V
{ 
int 
data 
= 
( 
int 
) 

dataObject "
;" #
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
Object((# )

dataObject((* 4
,((5 6
HttpRequest((7 B
req((C F
,((F G
HttpResponse((H T
resp((U Y
)((Y Z
{)) 
int** 
data** 
=** 
(** 
int** 
)** 

dataObject** "
;**" #
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
Object11# )

dataObject11* 4
,115 6
HttpRequest117 B
req11C F
,11F G
HttpResponse11H T
resp11U Y
)11Y Z
{22 
int33 
data33 
=33 
(33 
int33 
)33 

dataObject33 "
;33" #
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ∞3
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_72a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_72a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
string## 
stringNumber## 
=##  !
req##" %
.##% &
Params##& ,
.##, -
Get##- 0
(##0 1
$str##1 7
)##7 8
;##8 9
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&&  
(&&  !
stringNumber&&! -
.&&- .
Trim&&. 2
(&&2 3
)&&3 4
)&&4 5
;&&5 6
}'' 
catch(( 
((( 
FormatException(( "
exceptNumberFormat((# 5
)((5 6
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
exceptNumberFormat**2 D
,**D E
$str	**F Ç
)
**Ç É
;
**É Ñ
}++ 
},, 	
	Hashtable-- 
dataHashtable-- 
=--  !
new--" %
	Hashtable--& /
(--/ 0
$num--0 1
)--1 2
;--2 3
dataHashtable.. 
... 
Add.. 
(.. 
$num.. 
,.. 
data.. !
)..! "
;.." #
dataHashtable// 
.// 
Add// 
(// 
$num// 
,// 
data// !
)//! "
;//" #
dataHashtable00 
.00 
Add00 
(00 
$num00 
,00 
data00 !
)00! "
;00" #@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_72b11 <
.11< =
BadSink11= D
(11D E
dataHashtable11E R
,11S T
req11U X
,11X Y
resp11Z ^
)11_ `
;11` a
}22 
public55 

override55 
void55 
Good55 
(55 
HttpRequest55 )
req55* -
,55- .
HttpResponse55/ ;
resp55< @
)55@ A
{66 
GoodG2B77 
(77 
req77 
,77 
resp77 
)77 
;77 
GoodB2G88 
(88 
req88 
,88 
resp88 
)88 
;88 
}99 
private<< 
static<< 
void<< 
GoodG2B<< 
(<<  
HttpRequest<<  +
req<<, /
,<</ 0
HttpResponse<<1 =
resp<<> B
)<<B C
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
$num@@ 
;@@ 
	HashtableAA 
dataHashtableAA 
=AA  !
newAA" %
	HashtableAA& /
(AA/ 0
$numAA0 1
)AA1 2
;AA2 3
dataHashtableBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB !
)BB! "
;BB" #
dataHashtableCC 
.CC 
AddCC 
(CC 
$numCC 
,CC 
dataCC !
)CC! "
;CC" #
dataHashtableDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD !
)DD! "
;DD" #@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_72bEE <
.EE< =
GoodG2BSinkEE= H
(EEH I
dataHashtableEEI V
,EEW X
reqEEY \
,EE\ ]
respEE^ b
)EEc d
;EEd e
}FF 
privateII 
staticII 
voidII 
GoodB2GII 
(II  
HttpRequestII  +
reqII, /
,II/ 0
HttpResponseII1 =
respII> B
)IIB C
{JJ 
intKK 
dataKK 
;KK 
dataLL 
=LL 
intLL 
.LL 
MinValueLL 
;LL 
{NN 	
stringOO 
stringNumberOO 
=OO  !
reqOO" %
.OO% &
ParamsOO& ,
.OO, -
GetOO- 0
(OO0 1
$strOO1 7
)OO7 8
;OO8 9
tryPP 
{QQ 
dataRR 
=RR 
intRR 
.RR 
ParseRR  
(RR  !
stringNumberRR! -
.RR- .
TrimRR. 2
(RR2 3
)RR3 4
)RR4 5
;RR5 6
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$str	VVF Ç
)
VVÇ É
;
VVÉ Ñ
}WW 
}XX 	
	HashtableYY 
dataHashtableYY 
=YY  !
newYY" %
	HashtableYY& /
(YY/ 0
$numYY0 1
)YY1 2
;YY2 3
dataHashtableZZ 
.ZZ 
AddZZ 
(ZZ 
$numZZ 
,ZZ 
dataZZ !
)ZZ! "
;ZZ" #
dataHashtable[[ 
.[[ 
Add[[ 
([[ 
$num[[ 
,[[ 
data[[ !
)[[! "
;[[" #
dataHashtable\\ 
.\\ 
Add\\ 
(\\ 
$num\\ 
,\\ 
data\\ !
)\\! "
;\\" #@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_72b]] <
.]]< =
GoodB2GSink]]= H
(]]H I
dataHashtable]]I V
,]]W X
req]]Y \
,]]\ ]
resp]]^ b
)]]c d
;]]d e
}^^ 
}`` 
}aa Æ
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_72b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_72b :
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
,7 8
HttpRequest9 D
reqE H
,H I
HttpResponseJ V
respW [
)[ \
{ 
int 
data 
= 
( 
int 
) 
dataHashtable &
[& '
$num' (
]( )
;) *
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
	Hashtable((# ,
dataHashtable((- :
,((; <
HttpRequest((= H
req((I L
,((L M
HttpResponse((N Z
resp(([ _
)((_ `
{)) 
int** 
data** 
=** 
(** 
int** 
)** 
dataHashtable** &
[**& '
$num**' (
]**( )
;**) *
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
	Hashtable11# ,
dataHashtable11- :
,11; <
HttpRequest11= H
req11I L
,11L M
HttpResponse11N Z
resp11[ _
)11_ `
{22 
int33 
data33 
=33 
(33 
int33 
)33 
dataHashtable33 &
[33& '
$num33' (
]33( )
;33) *
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ §3
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_73a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_73a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
string## 
stringNumber## 
=##  !
req##" %
.##% &
Params##& ,
.##, -
Get##- 0
(##0 1
$str##1 7
)##7 8
;##8 9
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&&  
(&&  !
stringNumber&&! -
.&&- .
Trim&&. 2
(&&2 3
)&&3 4
)&&4 5
;&&5 6
}'' 
catch(( 
((( 
FormatException(( "
exceptNumberFormat((# 5
)((5 6
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
exceptNumberFormat**2 D
,**D E
$str	**F Ç
)
**Ç É
;
**É Ñ
}++ 
},, 	

LinkedList-- 
<-- 
int-- 
>-- 
dataLinkedList-- &
=--' (
new--) ,

LinkedList--- 7
<--7 8
int--8 ;
>--; <
(--< =
)--= >
;--> ?
dataLinkedList.. 
... 
AddLast.. 
(.. 
data.. #
)..# $
;..$ %
dataLinkedList// 
.// 
AddLast// 
(// 
data// #
)//# $
;//$ %
dataLinkedList00 
.00 
AddLast00 
(00 
data00 #
)00# $
;00$ %@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_73b11 <
.11< =
BadSink11= D
(11D E
dataLinkedList11E S
,11T U
req11V Y
,11Y Z
resp11[ _
)11` a
;11a b
}22 
public55 

override55 
void55 
Good55 
(55 
HttpRequest55 )
req55* -
,55- .
HttpResponse55/ ;
resp55< @
)55@ A
{66 
GoodG2B77 
(77 
req77 
,77 
resp77 
)77 
;77 
GoodB2G88 
(88 
req88 
,88 
resp88 
)88 
;88 
}99 
private<< 
static<< 
void<< 
GoodG2B<< 
(<<  
HttpRequest<<  +
req<<, /
,<</ 0
HttpResponse<<1 =
resp<<> B
)<<B C
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
$num@@ 
;@@ 

LinkedListAA 
<AA 
intAA 
>AA 
dataLinkedListAA &
=AA' (
newAA) ,

LinkedListAA- 7
<AA7 8
intAA8 ;
>AA; <
(AA< =
)AA= >
;AA> ?
dataLinkedListBB 
.BB 
AddLastBB 
(BB 
dataBB #
)BB# $
;BB$ %
dataLinkedListCC 
.CC 
AddLastCC 
(CC 
dataCC #
)CC# $
;CC$ %
dataLinkedListDD 
.DD 
AddLastDD 
(DD 
dataDD #
)DD# $
;DD$ %@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_73bEE <
.EE< =
GoodG2BSinkEE= H
(EEH I
dataLinkedListEEI W
,EEX Y
reqEEZ ]
,EE] ^
respEE_ c
)EEd e
;EEe f
}FF 
privateII 
staticII 
voidII 
GoodB2GII 
(II  
HttpRequestII  +
reqII, /
,II/ 0
HttpResponseII1 =
respII> B
)IIB C
{JJ 
intKK 
dataKK 
;KK 
dataLL 
=LL 
intLL 
.LL 
MinValueLL 
;LL 
{NN 	
stringOO 
stringNumberOO 
=OO  !
reqOO" %
.OO% &
ParamsOO& ,
.OO, -
GetOO- 0
(OO0 1
$strOO1 7
)OO7 8
;OO8 9
tryPP 
{QQ 
dataRR 
=RR 
intRR 
.RR 
ParseRR  
(RR  !
stringNumberRR! -
.RR- .
TrimRR. 2
(RR2 3
)RR3 4
)RR4 5
;RR5 6
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$str	VVF Ç
)
VVÇ É
;
VVÉ Ñ
}WW 
}XX 	

LinkedListYY 
<YY 
intYY 
>YY 
dataLinkedListYY &
=YY' (
newYY) ,

LinkedListYY- 7
<YY7 8
intYY8 ;
>YY; <
(YY< =
)YY= >
;YY> ?
dataLinkedListZZ 
.ZZ 
AddLastZZ 
(ZZ 
dataZZ #
)ZZ# $
;ZZ$ %
dataLinkedList[[ 
.[[ 
AddLast[[ 
([[ 
data[[ #
)[[# $
;[[$ %
dataLinkedList\\ 
.\\ 
AddLast\\ 
(\\ 
data\\ #
)\\# $
;\\$ %@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_73b]] <
.]]< =
GoodB2GSink]]= H
(]]H I
dataLinkedList]]I W
,]]X Y
req]]Z ]
,]]] ^
resp]]_ c
)]]d e
;]]e f
}^^ 
}`` 
}aa 
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_73b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_73b :
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
int* -
>- .
dataLinkedList/ =
,> ?
HttpRequest@ K
reqL O
,O P
HttpResponseQ ]
resp^ b
)b c
{ 
int 
data 
= 
dataLinkedList !
.! "
Last" &
.& '
Value' ,
;, -
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #

LinkedList((# -
<((- .
int((. 1
>((1 2
dataLinkedList((3 A
,((B C
HttpRequest((D O
req((P S
,((S T
HttpResponse((U a
resp((b f
)((f g
{)) 
int** 
data** 
=** 
dataLinkedList** !
.**! "
Last**" &
.**& '
Value**' ,
;**, -
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

LinkedList11# -
<11- .
int11. 1
>111 2
dataLinkedList113 A
,11B C
HttpRequest11D O
req11P S
,11S T
HttpResponse11U a
resp11b f
)11f g
{22 
int33 
data33 
=33 
dataLinkedList33 !
.33! "
Last33" &
.33& '
Value33' ,
;33, -
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ È6
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_74a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_74a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
string## 
stringNumber## 
=##  !
req##" %
.##% &
Params##& ,
.##, -
Get##- 0
(##0 1
$str##1 7
)##7 8
;##8 9
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&&  
(&&  !
stringNumber&&! -
.&&- .
Trim&&. 2
(&&2 3
)&&3 4
)&&4 5
;&&5 6
}'' 
catch(( 
((( 
FormatException(( "
exceptNumberFormat((# 5
)((5 6
{)) 
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** "
.**" #
LogLevel**# +
.**+ ,
Warn**, 0
,**0 1
exceptNumberFormat**2 D
,**D E
$str	**F Ç
)
**Ç É
;
**É Ñ
}++ 
},, 	

Dictionary-- 
<-- 
int-- 
,-- 
int-- 
>-- 
dataDictionary-- *
=--+ ,
new--- 0

Dictionary--1 ;
<--; <
int--< ?
,--? @
int--@ C
>--C D
(--D E
)--E F
;--F G
dataDictionary.. 
... 
Add.. 
(.. 
$num.. 
,.. 
data.. "
).." #
;..# $
dataDictionary// 
.// 
Add// 
(// 
$num// 
,// 
data// "
)//" #
;//# $
dataDictionary00 
.00 
Add00 
(00 
$num00 
,00 
data00 "
)00" #
;00# $@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_74b11 <
.11< =
BadSink11= D
(11D E
dataDictionary11E S
,11T U
req11V Y
,11Y Z
resp11[ _
)11` a
;11a b
}22 
public55 

override55 
void55 
Good55 
(55 
HttpRequest55 )
req55* -
,55- .
HttpResponse55/ ;
resp55< @
)55@ A
{66 
GoodG2B77 
(77 
req77 
,77 
resp77 
)77 
;77 
GoodB2G88 
(88 
req88 
,88 
resp88 
)88 
;88 
}99 
private<< 
static<< 
void<< 
GoodG2B<< 
(<<  
HttpRequest<<  +
req<<, /
,<</ 0
HttpResponse<<1 =
resp<<> B
)<<B C
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
$num@@ 
;@@ 

DictionaryAA 
<AA 
intAA 
,AA 
intAA 
>AA 
dataDictionaryAA *
=AA+ ,
newAA- 0

DictionaryAA1 ;
<AA; <
intAA< ?
,AA? @
intAA@ C
>AAC D
(AAD E
)AAE F
;AAF G
dataDictionaryBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB "
)BB" #
;BB# $
dataDictionaryCC 
.CC 
AddCC 
(CC 
$numCC 
,CC 
dataCC "
)CC" #
;CC# $
dataDictionaryDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD "
)DD" #
;DD# $@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_74bEE <
.EE< =
GoodG2BSinkEE= H
(EEH I
dataDictionaryEEI W
,EEX Y
reqEEZ ]
,EE] ^
respEE_ c
)EEd e
;EEe f
}FF 
privateII 
staticII 
voidII 
GoodB2GII 
(II  
HttpRequestII  +
reqII, /
,II/ 0
HttpResponseII1 =
respII> B
)IIB C
{JJ 
intKK 
dataKK 
;KK 
dataLL 
=LL 
intLL 
.LL 
MinValueLL 
;LL 
{NN 	
stringOO 
stringNumberOO 
=OO  !
reqOO" %
.OO% &
ParamsOO& ,
.OO, -
GetOO- 0
(OO0 1
$strOO1 7
)OO7 8
;OO8 9
tryPP 
{QQ 
dataRR 
=RR 
intRR 
.RR 
ParseRR  
(RR  !
stringNumberRR! -
.RR- .
TrimRR. 2
(RR2 3
)RR3 4
)RR4 5
;RR5 6
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$str	VVF Ç
)
VVÇ É
;
VVÉ Ñ
}WW 
}XX 	

DictionaryYY 
<YY 
intYY 
,YY 
intYY 
>YY 
dataDictionaryYY *
=YY+ ,
newYY- 0

DictionaryYY1 ;
<YY; <
intYY< ?
,YY? @
intYY@ C
>YYC D
(YYD E
)YYE F
;YYF G
dataDictionaryZZ 
.ZZ 
AddZZ 
(ZZ 
$numZZ 
,ZZ 
dataZZ "
)ZZ" #
;ZZ# $
dataDictionary[[ 
.[[ 
Add[[ 
([[ 
$num[[ 
,[[ 
data[[ "
)[[" #
;[[# $
dataDictionary\\ 
.\\ 
Add\\ 
(\\ 
$num\\ 
,\\ 
data\\ "
)\\" #
;\\# $@
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_74b]] <
.]]< =
GoodB2GSink]]= H
(]]H I
dataDictionary]]I W
,]]X Y
req]]Z ]
,]]] ^
resp]]_ c
)]]d e
;]]e f
}^^ 
}`` 
}aa ó
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_74b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_74b :
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
int. 1
>1 2
dataDictionary3 A
,B C
HttpRequestD O
reqP S
,S T
HttpResponseU a
respb f
)f g
{ 
int 
data 
= 
dataDictionary !
[! "
$num" #
]# $
;$ %
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( #
(((# $

Dictionary(($ .
<((. /
int((/ 2
,((2 3
int((3 6
>((6 7
dataDictionary((8 F
,((G H
HttpRequest((I T
req((U X
,((X Y
HttpResponse((Z f
resp((g k
)((k l
{)) 
int** 
data** 
=** 
dataDictionary** !
[**! "
$num**" #
]**# $
;**$ %
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

Dictionary11# -
<11- .
int11. 1
,111 2
int112 5
>115 6
dataDictionary117 E
,11F G
HttpRequest11H S
req11T W
,11W X
HttpResponse11Y e
resp11f j
)11j k
{22 
int33 
data33 
=33 
dataDictionary33 !
[33! "
$num33" #
]33# $
;33$ %
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ —J
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_75a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_75a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{   
int!! 
data!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;"" 
{$$ 	
string%% 
stringNumber%% 
=%%  !
req%%" %
.%%% &
Params%%& ,
.%%, -
Get%%- 0
(%%0 1
$str%%1 7
)%%7 8
;%%8 9
try&& 
{'' 
data(( 
=(( 
int(( 
.(( 
Parse((  
(((  !
stringNumber((! -
.((- .
Trim((. 2
(((2 3
)((3 4
)((4 5
;((5 6
})) 
catch** 
(** 
FormatException** "
exceptNumberFormat**# 5
)**5 6
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
exceptNumberFormat,,2 D
,,,D E
$str	,,F Ç
)
,,Ç É
;
,,É Ñ
}-- 
}.. 	
byte00 
[00 
]00 
dataSerialized00 
=00 
null00  $
;00$ %
try11 
{22 	
BinaryFormatter33 
bf33 
=33  
new33! $
BinaryFormatter33% 4
(334 5
)335 6
;336 7
using44 
(44 
var44 
ms44 
=44 
new44 
MemoryStream44  ,
(44, -
)44- .
)44. /
{55 
bf66 
.66 
	Serialize66 
(66 
ms66 
,66  
data66! %
)66% &
;66& '
dataSerialized77 
=77  
ms77! #
.77# $
ToArray77$ +
(77+ ,
)77, -
;77- .
}88 @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_75b99 @
.99@ A
BadSink99A H
(99H I
dataSerialized99I W
,99X Y
req99Z ]
,99] ^
resp99_ c
)99d e
;99e f
}:: 	
catch;; 
(;; "
SerializationException;; %
exceptSerialize;;& 5
);;5 6
{<< 	
IO== 
.== 
Logger== 
.== 
Log== 
(== 
NLog== 
.== 
LogLevel== '
.==' (
Warn==( ,
,==, -
$str==. X
,==X Y
exceptSerialize==Z i
)==i j
;==j k
}>> 	
}?? 
publicBB 

overrideBB 
voidBB 
GoodBB 
(BB 
HttpRequestBB )
reqBB* -
,BB- .
HttpResponseBB/ ;
respBB< @
)BB@ A
{CC 
GoodG2BDD 
(DD 
reqDD 
,DD 
respDD 
)DD 
;DD 
GoodB2GEE 
(EE 
reqEE 
,EE 
respEE 
)EE 
;EE 
}FF 
privateII 
staticII 
voidII 
GoodG2BII 
(II  
HttpRequestII  +
reqII, /
,II/ 0
HttpResponseII1 =
respII> B
)IIB C
{JJ 
intKK 
dataKK 
;KK 
dataLL 
=LL 
intLL 
.LL 
MinValueLL 
;LL 
{NN 	
stringOO 
stringNumberOO 
=OO  !
reqOO" %
.OO% &
ParamsOO& ,
.OO, -
GetOO- 0
(OO0 1
$strOO1 7
)OO7 8
;OO8 9
tryPP 
{QQ 
dataRR 
=RR 
intRR 
.RR 
ParseRR  
(RR  !
stringNumberRR! -
.RR- .
TrimRR. 2
(RR2 3
)RR3 4
)RR4 5
;RR5 6
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$str	VVF Ç
)
VVÇ É
;
VVÉ Ñ
}WW 
}XX 	
byteZZ 
[ZZ 
]ZZ 
dataSerializedZZ 
=ZZ 
nullZZ  $
;ZZ$ %
try[[ 
{\\ 	
BinaryFormatter]] 
bf]] 
=]]  
new]]! $
BinaryFormatter]]% 4
(]]4 5
)]]5 6
;]]6 7
using^^ 
(^^ 
var^^ 
ms^^ 
=^^ 
new^^ 
MemoryStream^^  ,
(^^, -
)^^- .
)^^. /
{__ 
bf`` 
.`` 
	Serialize`` 
(`` 
ms`` 
,``  
data``! %
)``% &
;``& '
dataSerializedaa 
=aa  
msaa! #
.aa# $
ToArrayaa$ +
(aa+ ,
)aa, -
;aa- .
}bb @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_75bcc @
.cc@ A
GoodG2BSinkccA L
(ccL M
dataSerializedccM [
,cc\ ]
reqcc^ a
,cca b
respccc g
)cch i
;cci j
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. X
,ggX Y
exceptSerializeggZ i
)ggi j
;ggj k
}hh 	
}ii 
privatell 
staticll 
voidll 
GoodB2Gll 
(ll  
HttpRequestll  +
reqll, /
,ll/ 0
HttpResponsell1 =
respll> B
)llB C
{mm 
intnn 
datann 
;nn 
dataoo 
=oo 
intoo 
.oo 
MinValueoo 
;oo 
{qq 	
stringrr 
stringNumberrr 
=rr  !
reqrr" %
.rr% &
Paramsrr& ,
.rr, -
Getrr- 0
(rr0 1
$strrr1 7
)rr7 8
;rr8 9
tryss 
{tt 
datauu 
=uu 
intuu 
.uu 
Parseuu  
(uu  !
stringNumberuu! -
.uu- .
Trimuu. 2
(uu2 3
)uu3 4
)uu4 5
;uu5 6
}vv 
catchww 
(ww 
FormatExceptionww "
exceptNumberFormatww# 5
)ww5 6
{xx 
IOyy 
.yy 
Loggeryy 
.yy 
Logyy 
(yy 
NLogyy "
.yy" #
LogLevelyy# +
.yy+ ,
Warnyy, 0
,yy0 1
exceptNumberFormatyy2 D
,yyD E
$str	yyF Ç
)
yyÇ É
;
yyÉ Ñ
}zz 
}{{ 	
byte}} 
[}} 
]}} 
dataSerialized}} 
=}} 
null}}  $
;}}$ %
try~~ 
{ 	
BinaryFormatter
ÄÄ 
bf
ÄÄ 
=
ÄÄ  
new
ÄÄ! $
BinaryFormatter
ÄÄ% 4
(
ÄÄ4 5
)
ÄÄ5 6
;
ÄÄ6 7
using
ÅÅ 
(
ÅÅ 
var
ÅÅ 
ms
ÅÅ 
=
ÅÅ 
new
ÅÅ 
MemoryStream
ÅÅ  ,
(
ÅÅ, -
)
ÅÅ- .
)
ÅÅ. /
{
ÇÇ 
bf
ÉÉ 
.
ÉÉ 
	Serialize
ÉÉ 
(
ÉÉ 
ms
ÉÉ 
,
ÉÉ  
data
ÉÉ! %
)
ÉÉ% &
;
ÉÉ& '
dataSerialized
ÑÑ 
=
ÑÑ  
ms
ÑÑ! #
.
ÑÑ# $
ToArray
ÑÑ$ +
(
ÑÑ+ ,
)
ÑÑ, -
;
ÑÑ- .
}
ÖÖ B
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_75b
ÜÜ @
.
ÜÜ@ A
GoodB2GSink
ÜÜA L
(
ÜÜL M
dataSerialized
ÜÜM [
,
ÜÜ\ ]
req
ÜÜ^ a
,
ÜÜa b
resp
ÜÜc g
)
ÜÜh i
;
ÜÜi j
}
áá 	
catch
àà 
(
àà $
SerializationException
àà %
exceptSerialize
àà& 5
)
àà5 6
{
ââ 	
IO
ää 
.
ää 
Logger
ää 
.
ää 
Log
ää 
(
ää 
NLog
ää 
.
ää 
LogLevel
ää '
.
ää' (
Warn
ää( ,
,
ää, -
$str
ää. X
,
ääX Y
exceptSerialize
ääZ i
)
ääi j
;
ääj k
}
ãã 	
}
åå 
}éé 
}èè ∞8
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_75b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_75b :
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
,5 6
HttpRequest7 B
reqC F
,F G
HttpResponseH T
respU Y
)Y Z
{   
try!! 
{"" 	
int## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
int)) 
))) 
binForm)) #
.))# $
Deserialize))$ /
())/ 0
	memStream))0 9
)))9 :
;)): ;
}** 
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
catch// 
(// "
SerializationException// %
exceptSerialize//& 5
)//5 6
{00 	
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 
.11 
LogLevel11 '
.11' (
Warn11( ,
,11, -
$str11. Y
,11Y Z
exceptSerialize11[ j
)11j k
;11k l
}22 	
}33 
public88 

static88 
void88 
GoodG2BSink88 "
(88" #
byte88# '
[88' (
]88( )
dataSerialized88* 8
,889 :
HttpRequest88; F
req88G J
,88J K
HttpResponse88L X
resp88Y ]
)88] ^
{99 
try:: 
{;; 	
int<< 
data<< 
;<< 
var== 
binForm== 
=== 
new== 
BinaryFormatter== -
(==- .
)==. /
;==/ 0
using>> 
(>> 
var>> 
	memStream>>  
=>>! "
new>># &
MemoryStream>>' 3
(>>3 4
)>>4 5
)>>5 6
{?? 
	memStream@@ 
.@@ 
Write@@ 
(@@  
dataSerialized@@  .
,@@. /
$num@@0 1
,@@1 2
dataSerialized@@3 A
.@@A B
Length@@B H
)@@H I
;@@I J
	memStreamAA 
.AA 
SeekAA 
(AA 
$numAA  
,AA  !

SeekOriginAA" ,
.AA, -
BeginAA- 2
)AA2 3
;AA3 4
dataBB 
=BB 
(BB 
intBB 
)BB 
binFormBB #
.BB# $
DeserializeBB$ /
(BB/ 0
	memStreamBB0 9
)BB9 :
;BB: ;
}CC 
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
catchHH 
(HH "
SerializationExceptionHH %
exceptSerializeHH& 5
)HH5 6
{II 	
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ 
.JJ 
LogLevelJJ '
.JJ' (
WarnJJ( ,
,JJ, -
$strJJ. Y
,JJY Z
exceptSerializeJJ[ j
)JJj k
;JJk l
}KK 	
}LL 
publicOO 

staticOO 
voidOO 
GoodB2GSinkOO "
(OO" #
byteOO# '
[OO' (
]OO( )
dataSerializedOO* 8
,OO9 :
HttpRequestOO; F
reqOOG J
,OOJ K
HttpResponseOOL X
respOOY ]
)OO] ^
{PP 
tryQQ 
{RR 	
intSS 
dataSS 
;SS 
varTT 
binFormTT 
=TT 
newTT 
BinaryFormatterTT -
(TT- .
)TT. /
;TT/ 0
usingUU 
(UU 
varUU 
	memStreamUU  
=UU! "
newUU# &
MemoryStreamUU' 3
(UU3 4
)UU4 5
)UU5 6
{VV 
	memStreamWW 
.WW 
WriteWW 
(WW  
dataSerializedWW  .
,WW. /
$numWW0 1
,WW1 2
dataSerializedWW3 A
.WWA B
LengthWWB H
)WWH I
;WWI J
	memStreamXX 
.XX 
SeekXX 
(XX 
$numXX  
,XX  !

SeekOriginXX" ,
.XX, -
BeginXX- 2
)XX2 3
;XX3 4
dataYY 
=YY 
(YY 
intYY 
)YY 
binFormYY #
.YY# $
DeserializeYY$ /
(YY/ 0
	memStreamYY0 9
)YY9 :
;YY: ;
}ZZ 
if\\ 
(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ #
+^^$ %
data^^& *
+^^+ ,
$str^^- 2
+^^3 4
(^^5 6
$num^^6 9
%^^: ;
data^^< @
)^^@ A
+^^B C
$str^^D H
)^^H I
;^^I J
}__ 
else`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb D
)bbD E
;bbE F
}cc 
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. Y
,ggY Z
exceptSerializegg[ j
)ggj k
;ggk l
}hh 	
}ii 
}kk 
}ll Ê(
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81a :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
string"" 
stringNumber"" 
=""  !
req""" %
.""% &
Params""& ,
."", -
Get""- 0
(""0 1
$str""1 7
)""7 8
;""8 9
try## 
{$$ 
data%% 
=%% 
int%% 
.%% 
Parse%%  
(%%  !
stringNumber%%! -
.%%- .
Trim%%. 2
(%%2 3
)%%3 4
)%%4 5
;%%5 6
}&& 
catch'' 
('' 
FormatException'' "
exceptNumberFormat''# 5
)''5 6
{(( 
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) "
.))" #
LogLevel))# +
.))+ ,
Warn)), 0
,))0 1
exceptNumberFormat))2 D
,))D E
$str	))F Ç
)
))Ç É
;
))É Ñ
}** 
}++ 	D
8CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_base,, @

baseObject,,A K
=,,L M
new,,N QD
7CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_bad	,,R â
(
,,â ä
)
,,ä ã
;
,,ã å

baseObject-- 
.-- 
Action-- 
(-- 
data-- 
,--  
req--! $
,--$ %
resp--& *
)--* +
;--+ ,
}.. 
public11 

override11 
void11 
Good11 
(11 
HttpRequest11 )
req11* -
,11- .
HttpResponse11/ ;
resp11< @
)11@ A
{22 
GoodG2B33 
(33 
req33 
,33 
resp33 
)33 
;33 
GoodB2G44 
(44 
req44 
,44 
resp44 
)44 
;44 
}55 
private88 
void88 
GoodG2B88 
(88 
HttpRequest88 $
req88% (
,88( )
HttpResponse88* 6
resp887 ;
)88; <
{99 
int:: 
data:: 
;:: 
data<< 
=<< 
$num<< 
;<< D
8CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_base== @

baseObject==A K
===L M
new==N QH
;CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_goodG2B	==R ç
(
==ç é
)
==é è
;
==è ê

baseObject>> 
.>> 
Action>> 
(>> 
data>> 
,>>  
req>>! $
,>>$ %
resp>>& *
)>>* +
;>>+ ,
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
HttpRequestBB $
reqBB% (
,BB( )
HttpResponseBB* 6
respBB7 ;
)BB; <
{CC 
intDD 
dataDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
stringHH 
stringNumberHH 
=HH  !
reqHH" %
.HH% &
ParamsHH& ,
.HH, -
GetHH- 0
(HH0 1
$strHH1 7
)HH7 8
;HH8 9
tryII 
{JJ 
dataKK 
=KK 
intKK 
.KK 
ParseKK  
(KK  !
stringNumberKK! -
.KK- .
TrimKK. 2
(KK2 3
)KK3 4
)KK4 5
;KK5 6
}LL 
catchMM 
(MM 
FormatExceptionMM "
exceptNumberFormatMM# 5
)MM5 6
{NN 
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO "
.OO" #
LogLevelOO# +
.OO+ ,
WarnOO, 0
,OO0 1
exceptNumberFormatOO2 D
,OOD E
$str	OOF Ç
)
OOÇ É
;
OOÉ Ñ
}PP 
}QQ 	D
8CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_baseRR @

baseObjectRRA K
=RRL M
newRRN QH
;CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_goodB2G	RRR ç
(
RRç é
)
RRé è
;
RRè ê

baseObjectSS 
.SS 
ActionSS 
(SS 
dataSS 
,SS  
reqSS! $
,SS$ %
respSS& *
)SS* +
;SS+ ,
}TT 
}VV 
}WW À
∞C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_bad.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class C
7CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_bad =
:> ?D
8CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_base@ x
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
}"" 
}## «
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_base.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
abstract 
class	 D
8CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_base G
{ 
public 

abstract 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
;N O
} 
} ¯

¥C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_goodB2G.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class G
;CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_goodB2G A
:B CD
8CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_baseD |
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
if   

(   
data   
!=   
$num   
)   
{!! 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
%""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
IO&& 
.&& 
	WriteLine&& 
(&& 
$str&& @
)&&@ A
;&&A B
}'' 	
}(( 
})) 
}** ”
¥C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_goodG2B.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class G
;CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_goodG2B A
:B CD
8CWE369_Divide_by_Zero__int_Params_Get_Web_modulo_81_baseD |
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
}## 
}$$ √(
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_01.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_01 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
try%% 
{&& 
data'' 
='' 
int'' 
.'' 
Parse'' $
(''$ %
req''% (
.''( )
QueryString'') 4
[''4 5
$str''5 9
]''9 :
)'': ;
;''; <
}(( 
catch)) 
()) 
FormatException)) &
exceptNumberFormat))' 9
)))9 :
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ !
(++! "
NLog++" &
.++& '
LogLevel++' /
.++/ 0
Warn++0 4
,++4 5
exceptNumberFormat++6 H
,++H I
$str	++J Ä
)
++Ä Å
;
++Å Ç
},, 
}-- 
}.. 	
IO11 

.11
 
	WriteLine11 
(11 
$str11  
+11! "
data11# '
+11( )
$str11* /
+110 1
(112 3
$num113 6
/117 8
data119 =
)11= >
+11? @
$str11A E
)11E F
;11F G
}22 
public55 

override55 
void55 
Good55 
(55 
HttpRequest55 )
req55* -
,55- .
HttpResponse55/ ;
resp55< @
)55@ A
{66 
GoodG2B77 
(77 
req77 
,77 
resp77 
)77 
;77 
GoodB2G88 
(88 
req88 
,88 
resp88 
)88 
;88 
}99 
private<< 
void<< 
GoodG2B<< 
(<< 
HttpRequest<< $
req<<% (
,<<( )
HttpResponse<<* 6
resp<<7 ;
)<<; <
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
$num@@ 
;@@ 
IOCC 

.CC
 
	WriteLineCC 
(CC 
$strCC  
+CC! "
dataCC# '
+CC( )
$strCC* /
+CC0 1
(CC2 3
$numCC3 6
/CC7 8
dataCC9 =
)CC= >
+CC? @
$strCCA E
)CCE F
;CCF G
}DD 
privateGG 
voidGG 
GoodB2GGG 
(GG 
HttpRequestGG $
reqGG% (
,GG( )
HttpResponseGG* 6
respGG7 ;
)GG; <
{HH 
intII 
dataII 
;II 
dataJJ 
=JJ 
intJJ 
.JJ 
MinValueJJ 
;JJ 
{LL 	
ifMM 
(MM 
reqMM 
.MM 
QueryStringMM 
[MM  
$strMM  $
]MM$ %
!=MM& (
nullMM) -
)MM- .
{NN 
tryOO 
{PP 
dataQQ 
=QQ 
intQQ 
.QQ 
ParseQQ $
(QQ$ %
reqQQ% (
.QQ( )
QueryStringQQ) 4
[QQ4 5
$strQQ5 9
]QQ9 :
)QQ: ;
;QQ; <
}RR 
catchSS 
(SS 
FormatExceptionSS &
exceptNumberFormatSS' 9
)SS9 :
{TT 
IOUU 
.UU 
LoggerUU 
.UU 
LogUU !
(UU! "
NLogUU" &
.UU& '
LogLevelUU' /
.UU/ 0
WarnUU0 4
,UU4 5
exceptNumberFormatUU6 H
,UUH I
$str	UUJ Ä
)
UUÄ Å
;
UUÅ Ç
}VV 
}WW 
}XX 	
ifZZ 

(ZZ 
dataZZ 
!=ZZ 
$numZZ 
)ZZ 
{[[ 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ 
+\\  !
data\\" &
+\\' (
$str\\) .
+\\/ 0
(\\1 2
$num\\2 5
/\\6 7
data\\8 <
)\\< =
+\\> ?
$str\\@ D
)\\D E
;\\E F
}]] 	
else^^ 
{__ 	
IO`` 
.`` 
	WriteLine`` 
(`` 
$str`` @
)``@ A
;``A B
}aa 	
}bb 
}dd 
}ee ÊO
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_02.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_02 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
true   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88 
true88 
)88 
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< $
+<<% &
data<<' +
+<<, -
$str<<. 3
+<<4 5
(<<6 7
$num<<7 :
/<<; <
data<<= A
)<<A B
+<<C D
$str<<E I
)<<I J
;<<J K
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
falseEE 
)EE 
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
truePP 
)PP 
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT $
+TT% &
dataTT' +
+TT, -
$strTT. 3
+TT4 5
(TT6 7
$numTT7 :
/TT; <
dataTT= A
)TTA B
+TTC D
$strTTE I
)TTI J
;TTJ K
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
true\\ 
)\\ 
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
truegg 
)gg 
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk $
+kk% &
datakk' +
+kk, -
$strkk. 3
+kk4 5
(kk6 7
$numkk7 :
/kk; <
datakk= A
)kkA B
+kkC D
$strkkE I
)kkI J
;kkJ K
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
truess 
)ss 
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
false
ãã 
)
ãã 
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
/
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
true
¢¢ 
)
¢¢ 
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
true
∫∫ 
)
∫∫ 
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
/
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— ƒR
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_03.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_03 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
$num   
==   
$num   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88 
$num88 
==88 
$num88 
)88 
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< $
+<<% &
data<<' +
+<<, -
$str<<. 3
+<<4 5
(<<6 7
$num<<7 :
/<<; <
data<<= A
)<<A B
+<<C D
$str<<E I
)<<I J
;<<J K
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
$numEE 
!=EE 
$numEE 
)EE 
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
$numPP 
==PP 
$numPP 
)PP 
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT $
+TT% &
dataTT' +
+TT, -
$strTT. 3
+TT4 5
(TT6 7
$numTT7 :
/TT; <
dataTT= A
)TTA B
+TTC D
$strTTE I
)TTI J
;TTJ K
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
$num\\ 
==\\ 
$num\\ 
)\\ 
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
$numgg 
==gg 
$numgg 
)gg 
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk $
+kk% &
datakk' +
+kk, -
$strkk. 3
+kk4 5
(kk6 7
$numkk7 :
/kk; <
datakk= A
)kkA B
+kkC D
$strkkE I
)kkI J
;kkJ K
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
$numss 
==ss 
$numss 
)ss 
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
$num
ãã 
!=
ãã 
$num
ãã 
)
ãã 
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
/
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
$num
¢¢ 
==
¢¢ 
$num
¢¢ 
)
¢¢ 
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
$num
∫∫ 
==
∫∫ 
$num
∫∫ 
)
∫∫ 
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
/
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— ∏S
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_04.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_04 :
:; <
AbstractTestCaseWeb= P
{ 
private!! 
const!! 
bool!! 
PRIVATE_CONST_TRUE!! )
=!!* +
true!!, 0
;!!0 1
private"" 
const"" 
bool"" 
PRIVATE_CONST_FALSE"" *
=""+ ,
false""- 2
;""2 3
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
HttpRequest$$ (
req$$) ,
,$$, -
HttpResponse$$. :
resp$$; ?
)$$? @
{%% 
int&& 
data&& 
;&& 
if'' 

('' 
PRIVATE_CONST_TRUE'' 
)'' 
{(( 	
data)) 
=)) 
int)) 
.)) 
MinValue)) 
;))  
{++ 
if,, 
(,, 
req,, 
.,, 
QueryString,, #
[,,# $
$str,,$ (
],,( )
!=,,* ,
null,,- 1
),,1 2
{-- 
try.. 
{// 
data00 
=00 
int00 "
.00" #
Parse00# (
(00( )
req00) ,
.00, -
QueryString00- 8
[008 9
$str009 =
]00= >
)00> ?
;00? @
}11 
catch22 
(22 
FormatException22 *
exceptNumberFormat22+ =
)22= >
{33 
IO44 
.44 
Logger44 !
.44! "
Log44" %
(44% &
NLog44& *
.44* +
LogLevel44+ 3
.443 4
Warn444 8
,448 9
exceptNumberFormat44: L
,44L M
$str	44N Ñ
)
44Ñ Ö
;
44Ö Ü
}55 
}66 
}77 
}88 	
else99 
{:: 	
data== 
=== 
$num== 
;== 
}>> 	
if?? 

(?? 
PRIVATE_CONST_TRUE?? 
)?? 
{@@ 	
IOCC 
.CC 
	WriteLineCC 
(CC 
$strCC $
+CC% &
dataCC' +
+CC, -
$strCC. 3
+CC4 5
(CC6 7
$numCC7 :
/CC; <
dataCC= A
)CCA B
+CCC D
$strCCE I
)CCI J
;CCJ K
}DD 	
}EE 
privateII 
voidII 
GoodG2B1II 
(II 
HttpRequestII %
reqII& )
,II) *
HttpResponseII+ 7
respII8 <
)II< =
{JJ 
intKK 
dataKK 
;KK 
ifLL 

(LL 
PRIVATE_CONST_FALSELL 
)LL  
{MM 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataUU 
=UU 
$numUU 
;UU 
}VV 	
ifWW 

(WW 
PRIVATE_CONST_TRUEWW 
)WW 
{XX 	
IO[[ 
.[[ 
	WriteLine[[ 
([[ 
$str[[ $
+[[% &
data[[' +
+[[, -
$str[[. 3
+[[4 5
([[6 7
$num[[7 :
/[[; <
data[[= A
)[[A B
+[[C D
$str[[E I
)[[I J
;[[J K
}\\ 	
}]] 
private`` 
void`` 
GoodG2B2`` 
(`` 
HttpRequest`` %
req``& )
,``) *
HttpResponse``+ 7
resp``8 <
)``< =
{aa 
intbb 
databb 
;bb 
ifcc 

(cc 
PRIVATE_CONST_TRUEcc 
)cc 
{dd 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
PRIVATE_CONST_TRUEnn 
)nn 
{oo 	
IOrr 
.rr 
	WriteLinerr 
(rr 
$strrr $
+rr% &
datarr' +
+rr, -
$strrr. 3
+rr4 5
(rr6 7
$numrr7 :
/rr; <
datarr= A
)rrA B
+rrC D
$strrrE I
)rrI J
;rrJ K
}ss 	
}tt 
privateww 
voidww 
GoodB2G1ww 
(ww 
HttpRequestww %
reqww& )
,ww) *
HttpResponseww+ 7
respww8 <
)ww< =
{xx 
intyy 
datayy 
;yy 
ifzz 

(zz 
PRIVATE_CONST_TRUEzz 
)zz 
{{{ 	
data|| 
=|| 
int|| 
.|| 
MinValue|| 
;||  
{~~ 
if 
( 
req 
. 
QueryString #
[# $
$str$ (
]( )
!=* ,
null- 1
)1 2
{
ÄÄ 
try
ÅÅ 
{
ÇÇ 
data
ÉÉ 
=
ÉÉ 
int
ÉÉ "
.
ÉÉ" #
Parse
ÉÉ# (
(
ÉÉ( )
req
ÉÉ) ,
.
ÉÉ, -
QueryString
ÉÉ- 8
[
ÉÉ8 9
$str
ÉÉ9 =
]
ÉÉ= >
)
ÉÉ> ?
;
ÉÉ? @
}
ÑÑ 
catch
ÖÖ 
(
ÖÖ 
FormatException
ÖÖ * 
exceptNumberFormat
ÖÖ+ =
)
ÖÖ= >
{
ÜÜ 
IO
áá 
.
áá 
Logger
áá !
.
áá! "
Log
áá" %
(
áá% &
NLog
áá& *
.
áá* +
LogLevel
áá+ 3
.
áá3 4
Warn
áá4 8
,
áá8 9 
exceptNumberFormat
áá: L
,
ááL M
$strááN Ñ
)ááÑ Ö
;ááÖ Ü
}
àà 
}
ââ 
}
ää 
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí !
PRIVATE_CONST_FALSE
íí 
)
íí  
{
ìì 	
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï /
)
ïï/ 0
;
ïï0 1
}
ññ 	
else
óó 
{
òò 	
if
öö 
(
öö 
data
öö 
!=
öö 
$num
öö 
)
öö 
{
õõ 
IO
úú 
.
úú 
	WriteLine
úú 
(
úú 
$str
úú #
+
úú$ %
data
úú& *
+
úú+ ,
$str
úú- 2
+
úú3 4
(
úú5 6
$num
úú6 9
/
úú: ;
data
úú< @
)
úú@ A
+
úúB C
$str
úúD H
)
úúH I
;
úúI J
}
ùù 
else
ûû 
{
üü 
IO
†† 
.
†† 
	WriteLine
†† 
(
†† 
$str
†† D
)
††D E
;
††E F
}
°° 
}
¢¢ 	
}
££ 
private
¶¶ 
void
¶¶ 
GoodB2G2
¶¶ 
(
¶¶ 
HttpRequest
¶¶ %
req
¶¶& )
,
¶¶) *
HttpResponse
¶¶+ 7
resp
¶¶8 <
)
¶¶< =
{
ßß 
int
®® 
data
®® 
;
®® 
if
©© 

(
©©  
PRIVATE_CONST_TRUE
©© 
)
©© 
{
™™ 	
data
´´ 
=
´´ 
int
´´ 
.
´´ 
MinValue
´´ 
;
´´  
{
≠≠ 
if
ÆÆ 
(
ÆÆ 
req
ÆÆ 
.
ÆÆ 
QueryString
ÆÆ #
[
ÆÆ# $
$str
ÆÆ$ (
]
ÆÆ( )
!=
ÆÆ* ,
null
ÆÆ- 1
)
ÆÆ1 2
{
ØØ 
try
∞∞ 
{
±± 
data
≤≤ 
=
≤≤ 
int
≤≤ "
.
≤≤" #
Parse
≤≤# (
(
≤≤( )
req
≤≤) ,
.
≤≤, -
QueryString
≤≤- 8
[
≤≤8 9
$str
≤≤9 =
]
≤≤= >
)
≤≤> ?
;
≤≤? @
}
≥≥ 
catch
¥¥ 
(
¥¥ 
FormatException
¥¥ * 
exceptNumberFormat
¥¥+ =
)
¥¥= >
{
µµ 
IO
∂∂ 
.
∂∂ 
Logger
∂∂ !
.
∂∂! "
Log
∂∂" %
(
∂∂% &
NLog
∂∂& *
.
∂∂* +
LogLevel
∂∂+ 3
.
∂∂3 4
Warn
∂∂4 8
,
∂∂8 9 
exceptNumberFormat
∂∂: L
,
∂∂L M
$str∂∂N Ñ
)∂∂Ñ Ö
;∂∂Ö Ü
}
∑∑ 
}
∏∏ 
}
ππ 
}
∫∫ 	
else
ªª 
{
ºº 	
data
øø 
=
øø 
$num
øø 
;
øø 
}
¿¿ 	
if
¡¡ 

(
¡¡  
PRIVATE_CONST_TRUE
¡¡ 
)
¡¡ 
{
¬¬ 	
if
ƒƒ 
(
ƒƒ 
data
ƒƒ 
!=
ƒƒ 
$num
ƒƒ 
)
ƒƒ 
{
≈≈ 
IO
∆∆ 
.
∆∆ 
	WriteLine
∆∆ 
(
∆∆ 
$str
∆∆ #
+
∆∆$ %
data
∆∆& *
+
∆∆+ ,
$str
∆∆- 2
+
∆∆3 4
(
∆∆5 6
$num
∆∆6 9
/
∆∆: ;
data
∆∆< @
)
∆∆@ A
+
∆∆B C
$str
∆∆D H
)
∆∆H I
;
∆∆I J
}
«« 
else
»» 
{
…… 
IO
   
.
   
	WriteLine
   
(
   
$str
   D
)
  D E
;
  E F
}
ÀÀ 
}
ÃÃ 	
}
ÕÕ 
public
œœ 

override
œœ 
void
œœ 
Good
œœ 
(
œœ 
HttpRequest
œœ )
req
œœ* -
,
œœ- .
HttpResponse
œœ/ ;
resp
œœ< @
)
œœ@ A
{
–– 
GoodG2B1
—— 
(
—— 
req
—— 
,
—— 
resp
—— 
)
—— 
;
—— 
GoodG2B2
““ 
(
““ 
req
““ 
,
““ 
resp
““ 
)
““ 
;
““ 
GoodB2G1
”” 
(
”” 
req
”” 
,
”” 
resp
”” 
)
”” 
;
”” 
GoodB2G2
‘‘ 
(
‘‘ 
req
‘‘ 
,
‘‘ 
resp
‘‘ 
)
‘‘ 
;
‘‘ 
}
’’ 
}◊◊ 
}ÿÿ ºR
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_05.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_05 :
:; <
AbstractTestCaseWeb= P
{ 
private   
bool   
privateTrue   
=   
true   #
;  # $
private!! 
bool!! 
privateFalse!! 
=!! 
false!!  %
;!!% &
public## 

override## 
void## 
Bad## 
(## 
HttpRequest## (
req##) ,
,##, -
HttpResponse##. :
resp##; ?
)##? @
{$$ 
int%% 
data%% 
;%% 
if&& 

(&& 
privateTrue&& 
)&& 
{'' 	
data(( 
=(( 
int(( 
.(( 
MinValue(( 
;((  
{** 
if++ 
(++ 
req++ 
.++ 
QueryString++ #
[++# $
$str++$ (
]++( )
!=++* ,
null++- 1
)++1 2
{,, 
try-- 
{.. 
data// 
=// 
int// "
.//" #
Parse//# (
(//( )
req//) ,
.//, -
QueryString//- 8
[//8 9
$str//9 =
]//= >
)//> ?
;//? @
}00 
catch11 
(11 
FormatException11 *
exceptNumberFormat11+ =
)11= >
{22 
IO33 
.33 
Logger33 !
.33! "
Log33" %
(33% &
NLog33& *
.33* +
LogLevel33+ 3
.333 4
Warn334 8
,338 9
exceptNumberFormat33: L
,33L M
$str	33N Ñ
)
33Ñ Ö
;
33Ö Ü
}44 
}55 
}66 
}77 	
else88 
{99 	
data<< 
=<< 
$num<< 
;<< 
}== 	
if>> 

(>> 
privateTrue>> 
)>> 
{?? 	
IOBB 
.BB 
	WriteLineBB 
(BB 
$strBB $
+BB% &
dataBB' +
+BB, -
$strBB. 3
+BB4 5
(BB6 7
$numBB7 :
/BB; <
dataBB= A
)BBA B
+BBC D
$strBBE I
)BBI J
;BBJ K
}CC 	
}DD 
privateHH 
voidHH 
GoodG2B1HH 
(HH 
HttpRequestHH %
reqHH& )
,HH) *
HttpResponseHH+ 7
respHH8 <
)HH< =
{II 
intJJ 
dataJJ 
;JJ 
ifKK 

(KK 
privateFalseKK 
)KK 
{LL 	
dataOO 
=OO 
$numOO 
;OO 
}PP 	
elseQQ 
{RR 	
dataTT 
=TT 
$numTT 
;TT 
}UU 	
ifVV 

(VV 
privateTrueVV 
)VV 
{WW 	
IOZZ 
.ZZ 
	WriteLineZZ 
(ZZ 
$strZZ $
+ZZ% &
dataZZ' +
+ZZ, -
$strZZ. 3
+ZZ4 5
(ZZ6 7
$numZZ7 :
/ZZ; <
dataZZ= A
)ZZA B
+ZZC D
$strZZE I
)ZZI J
;ZZJ K
}[[ 	
}\\ 
private__ 
void__ 
GoodG2B2__ 
(__ 
HttpRequest__ %
req__& )
,__) *
HttpResponse__+ 7
resp__8 <
)__< =
{`` 
intaa 
dataaa 
;aa 
ifbb 

(bb 
privateTruebb 
)bb 
{cc 	
dataee 
=ee 
$numee 
;ee 
}ff 	
elsegg 
{hh 	
datakk 
=kk 
$numkk 
;kk 
}ll 	
ifmm 

(mm 
privateTruemm 
)mm 
{nn 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq $
+qq% &
dataqq' +
+qq, -
$strqq. 3
+qq4 5
(qq6 7
$numqq7 :
/qq; <
dataqq= A
)qqA B
+qqC D
$strqqE I
)qqI J
;qqJ K
}rr 	
}ss 
privatevv 
voidvv 
GoodB2G1vv 
(vv 
HttpRequestvv %
reqvv& )
,vv) *
HttpResponsevv+ 7
respvv8 <
)vv< =
{ww 
intxx 
dataxx 
;xx 
ifyy 

(yy 
privateTrueyy 
)yy 
{zz 	
data{{ 
={{ 
int{{ 
.{{ 
MinValue{{ 
;{{  
{}} 
if~~ 
(~~ 
req~~ 
.~~ 
QueryString~~ #
[~~# $
$str~~$ (
]~~( )
!=~~* ,
null~~- 1
)~~1 2
{ 
try
ÄÄ 
{
ÅÅ 
data
ÇÇ 
=
ÇÇ 
int
ÇÇ "
.
ÇÇ" #
Parse
ÇÇ# (
(
ÇÇ( )
req
ÇÇ) ,
.
ÇÇ, -
QueryString
ÇÇ- 8
[
ÇÇ8 9
$str
ÇÇ9 =
]
ÇÇ= >
)
ÇÇ> ?
;
ÇÇ? @
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
FormatException
ÑÑ * 
exceptNumberFormat
ÑÑ+ =
)
ÑÑ= >
{
ÖÖ 
IO
ÜÜ 
.
ÜÜ 
Logger
ÜÜ !
.
ÜÜ! "
Log
ÜÜ" %
(
ÜÜ% &
NLog
ÜÜ& *
.
ÜÜ* +
LogLevel
ÜÜ+ 3
.
ÜÜ3 4
Warn
ÜÜ4 8
,
ÜÜ8 9 
exceptNumberFormat
ÜÜ: L
,
ÜÜL M
$strÜÜN Ñ
)ÜÜÑ Ö
;ÜÜÖ Ü
}
áá 
}
àà 
}
ââ 
}
ää 	
else
ãã 
{
åå 	
data
èè 
=
èè 
$num
èè 
;
èè 
}
êê 	
if
ëë 

(
ëë 
privateFalse
ëë 
)
ëë 
{
íí 	
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî /
)
îî/ 0
;
îî0 1
}
ïï 	
else
ññ 
{
óó 	
if
ôô 
(
ôô 
data
ôô 
!=
ôô 
$num
ôô 
)
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ #
+
õõ$ %
data
õõ& *
+
õõ+ ,
$str
õõ- 2
+
õõ3 4
(
õõ5 6
$num
õõ6 9
/
õõ: ;
data
õõ< @
)
õõ@ A
+
õõB C
$str
õõD H
)
õõH I
;
õõI J
}
úú 
else
ùù 
{
ûû 
IO
üü 
.
üü 
	WriteLine
üü 
(
üü 
$str
üü D
)
üüD E
;
üüE F
}
†† 
}
°° 	
}
¢¢ 
private
•• 
void
•• 
GoodB2G2
•• 
(
•• 
HttpRequest
•• %
req
••& )
,
••) *
HttpResponse
••+ 7
resp
••8 <
)
••< =
{
¶¶ 
int
ßß 
data
ßß 
;
ßß 
if
®® 

(
®® 
privateTrue
®® 
)
®® 
{
©© 	
data
™™ 
=
™™ 
int
™™ 
.
™™ 
MinValue
™™ 
;
™™  
{
¨¨ 
if
≠≠ 
(
≠≠ 
req
≠≠ 
.
≠≠ 
QueryString
≠≠ #
[
≠≠# $
$str
≠≠$ (
]
≠≠( )
!=
≠≠* ,
null
≠≠- 1
)
≠≠1 2
{
ÆÆ 
try
ØØ 
{
∞∞ 
data
±± 
=
±± 
int
±± "
.
±±" #
Parse
±±# (
(
±±( )
req
±±) ,
.
±±, -
QueryString
±±- 8
[
±±8 9
$str
±±9 =
]
±±= >
)
±±> ?
;
±±? @
}
≤≤ 
catch
≥≥ 
(
≥≥ 
FormatException
≥≥ * 
exceptNumberFormat
≥≥+ =
)
≥≥= >
{
¥¥ 
IO
µµ 
.
µµ 
Logger
µµ !
.
µµ! "
Log
µµ" %
(
µµ% &
NLog
µµ& *
.
µµ* +
LogLevel
µµ+ 3
.
µµ3 4
Warn
µµ4 8
,
µµ8 9 
exceptNumberFormat
µµ: L
,
µµL M
$strµµN Ñ
)µµÑ Ö
;µµÖ Ü
}
∂∂ 
}
∑∑ 
}
∏∏ 
}
ππ 	
else
∫∫ 
{
ªª 	
data
ææ 
=
ææ 
$num
ææ 
;
ææ 
}
øø 	
if
¿¿ 

(
¿¿ 
privateTrue
¿¿ 
)
¿¿ 
{
¡¡ 	
if
√√ 
(
√√ 
data
√√ 
!=
√√ 
$num
√√ 
)
√√ 
{
ƒƒ 
IO
≈≈ 
.
≈≈ 
	WriteLine
≈≈ 
(
≈≈ 
$str
≈≈ #
+
≈≈$ %
data
≈≈& *
+
≈≈+ ,
$str
≈≈- 2
+
≈≈3 4
(
≈≈5 6
$num
≈≈6 9
/
≈≈: ;
data
≈≈< @
)
≈≈@ A
+
≈≈B C
$str
≈≈D H
)
≈≈H I
;
≈≈I J
}
∆∆ 
else
«« 
{
»» 
IO
…… 
.
…… 
	WriteLine
…… 
(
…… 
$str
…… D
)
……D E
;
……E F
}
   
}
ÀÀ 	
}
ÃÃ 
public
ŒŒ 

override
ŒŒ 
void
ŒŒ 
Good
ŒŒ 
(
ŒŒ 
HttpRequest
ŒŒ )
req
ŒŒ* -
,
ŒŒ- .
HttpResponse
ŒŒ/ ;
resp
ŒŒ< @
)
ŒŒ@ A
{
œœ 
GoodG2B1
–– 
(
–– 
req
–– 
,
–– 
resp
–– 
)
–– 
;
–– 
GoodG2B2
—— 
(
—— 
req
—— 
,
—— 
resp
—— 
)
—— 
;
—— 
GoodB2G1
““ 
(
““ 
req
““ 
,
““ 
resp
““ 
)
““ 
;
““ 
GoodB2G2
”” 
(
”” 
req
”” 
,
”” 
resp
”” 
)
”” 
;
”” 
}
‘‘ 
}÷÷ 
}◊◊ ÖU
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_06.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_06 :
:; <
AbstractTestCaseWeb= P
{ 
private   
const   
int   
PRIVATE_CONST_FIVE   (
=  ) *
$num  + ,
;  , -
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
int$$ 
data$$ 
;$$ 
if%% 

(%% 
PRIVATE_CONST_FIVE%% 
==%%  
$num%%  !
)%%! "
{&& 	
data'' 
='' 
int'' 
.'' 
MinValue'' 
;''  
{)) 
if** 
(** 
req** 
.** 
QueryString** #
[**# $
$str**$ (
]**( )
!=*** ,
null**- 1
)**1 2
{++ 
try,, 
{-- 
data.. 
=.. 
int.. "
..." #
Parse..# (
(..( )
req..) ,
..., -
QueryString..- 8
[..8 9
$str..9 =
]..= >
)..> ?
;..? @
}// 
catch00 
(00 
FormatException00 *
exceptNumberFormat00+ =
)00= >
{11 
IO22 
.22 
Logger22 !
.22! "
Log22" %
(22% &
NLog22& *
.22* +
LogLevel22+ 3
.223 4
Warn224 8
,228 9
exceptNumberFormat22: L
,22L M
$str	22N Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
}66 	
else77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
if== 

(== 
PRIVATE_CONST_FIVE== 
====  
$num==  !
)==! "
{>> 	
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA $
+AA% &
dataAA' +
+AA, -
$strAA. 3
+AA4 5
(AA6 7
$numAA7 :
/AA; <
dataAA= A
)AAA B
+AAC D
$strAAE I
)AAI J
;AAJ K
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
HttpRequestGG %
reqGG& )
,GG) *
HttpResponseGG+ 7
respGG8 <
)GG< =
{HH 
intII 
dataII 
;II 
ifJJ 

(JJ 
PRIVATE_CONST_FIVEJJ 
!=JJ  
$numJJ  !
)JJ! "
{KK 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
ifUU 

(UU 
PRIVATE_CONST_FIVEUU 
==UU  
$numUU  !
)UU! "
{VV 	
IOYY 
.YY 
	WriteLineYY 
(YY 
$strYY $
+YY% &
dataYY' +
+YY, -
$strYY. 3
+YY4 5
(YY6 7
$numYY7 :
/YY; <
dataYY= A
)YYA B
+YYC D
$strYYE I
)YYI J
;YYJ K
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
int`` 
data`` 
;`` 
ifaa 

(aa 
PRIVATE_CONST_FIVEaa 
==aa  
$numaa  !
)aa! "
{bb 	
datadd 
=dd 
$numdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
$numjj 
;jj 
}kk 	
ifll 

(ll 
PRIVATE_CONST_FIVEll 
==ll  
$numll  !
)ll! "
{mm 	
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp $
+pp% &
datapp' +
+pp, -
$strpp. 3
+pp4 5
(pp6 7
$numpp7 :
/pp; <
datapp= A
)ppA B
+ppC D
$strppE I
)ppI J
;ppJ K
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
intww 
dataww 
;ww 
ifxx 

(xx 
PRIVATE_CONST_FIVExx 
==xx  
$numxx  !
)xx! "
{yy 	
datazz 
=zz 
intzz 
.zz 
MinValuezz 
;zz  
{|| 
if}} 
(}} 
req}} 
.}} 
QueryString}} #
[}}# $
$str}}$ (
]}}( )
!=}}* ,
null}}- 1
)}}1 2
{~~ 
try 
{
ÄÄ 
data
ÅÅ 
=
ÅÅ 
int
ÅÅ "
.
ÅÅ" #
Parse
ÅÅ# (
(
ÅÅ( )
req
ÅÅ) ,
.
ÅÅ, -
QueryString
ÅÅ- 8
[
ÅÅ8 9
$str
ÅÅ9 =
]
ÅÅ= >
)
ÅÅ> ?
;
ÅÅ? @
}
ÇÇ 
catch
ÉÉ 
(
ÉÉ 
FormatException
ÉÉ * 
exceptNumberFormat
ÉÉ+ =
)
ÉÉ= >
{
ÑÑ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ !
.
ÖÖ! "
Log
ÖÖ" %
(
ÖÖ% &
NLog
ÖÖ& *
.
ÖÖ* +
LogLevel
ÖÖ+ 3
.
ÖÖ3 4
Warn
ÖÖ4 8
,
ÖÖ8 9 
exceptNumberFormat
ÖÖ: L
,
ÖÖL M
$strÖÖN Ñ
)ÖÖÑ Ö
;ÖÖÖ Ü
}
ÜÜ 
}
áá 
}
àà 
}
ââ 	
else
ää 
{
ãã 	
data
éé 
=
éé 
$num
éé 
;
éé 
}
èè 	
if
êê 

(
êê  
PRIVATE_CONST_FIVE
êê 
!=
êê  
$num
êê  !
)
êê! "
{
ëë 	
IO
ìì 
.
ìì 
	WriteLine
ìì 
(
ìì 
$str
ìì /
)
ìì/ 0
;
ìì0 1
}
îî 	
else
ïï 
{
ññ 	
if
òò 
(
òò 
data
òò 
!=
òò 
$num
òò 
)
òò 
{
ôô 
IO
öö 
.
öö 
	WriteLine
öö 
(
öö 
$str
öö #
+
öö$ %
data
öö& *
+
öö+ ,
$str
öö- 2
+
öö3 4
(
öö5 6
$num
öö6 9
/
öö: ;
data
öö< @
)
öö@ A
+
ööB C
$str
ööD H
)
ööH I
;
ööI J
}
õõ 
else
úú 
{
ùù 
IO
ûû 
.
ûû 
	WriteLine
ûû 
(
ûû 
$str
ûû D
)
ûûD E
;
ûûE F
}
üü 
}
†† 	
}
°° 
private
§§ 
void
§§ 
GoodB2G2
§§ 
(
§§ 
HttpRequest
§§ %
req
§§& )
,
§§) *
HttpResponse
§§+ 7
resp
§§8 <
)
§§< =
{
•• 
int
¶¶ 
data
¶¶ 
;
¶¶ 
if
ßß 

(
ßß  
PRIVATE_CONST_FIVE
ßß 
==
ßß  
$num
ßß  !
)
ßß! "
{
®® 	
data
©© 
=
©© 
int
©© 
.
©© 
MinValue
©© 
;
©©  
{
´´ 
if
¨¨ 
(
¨¨ 
req
¨¨ 
.
¨¨ 
QueryString
¨¨ #
[
¨¨# $
$str
¨¨$ (
]
¨¨( )
!=
¨¨* ,
null
¨¨- 1
)
¨¨1 2
{
≠≠ 
try
ÆÆ 
{
ØØ 
data
∞∞ 
=
∞∞ 
int
∞∞ "
.
∞∞" #
Parse
∞∞# (
(
∞∞( )
req
∞∞) ,
.
∞∞, -
QueryString
∞∞- 8
[
∞∞8 9
$str
∞∞9 =
]
∞∞= >
)
∞∞> ?
;
∞∞? @
}
±± 
catch
≤≤ 
(
≤≤ 
FormatException
≤≤ * 
exceptNumberFormat
≤≤+ =
)
≤≤= >
{
≥≥ 
IO
¥¥ 
.
¥¥ 
Logger
¥¥ !
.
¥¥! "
Log
¥¥" %
(
¥¥% &
NLog
¥¥& *
.
¥¥* +
LogLevel
¥¥+ 3
.
¥¥3 4
Warn
¥¥4 8
,
¥¥8 9 
exceptNumberFormat
¥¥: L
,
¥¥L M
$str¥¥N Ñ
)¥¥Ñ Ö
;¥¥Ö Ü
}
µµ 
}
∂∂ 
}
∑∑ 
}
∏∏ 	
else
ππ 
{
∫∫ 	
data
ΩΩ 
=
ΩΩ 
$num
ΩΩ 
;
ΩΩ 
}
ææ 	
if
øø 

(
øø  
PRIVATE_CONST_FIVE
øø 
==
øø  
$num
øø  !
)
øø! "
{
¿¿ 	
if
¬¬ 
(
¬¬ 
data
¬¬ 
!=
¬¬ 
$num
¬¬ 
)
¬¬ 
{
√√ 
IO
ƒƒ 
.
ƒƒ 
	WriteLine
ƒƒ 
(
ƒƒ 
$str
ƒƒ #
+
ƒƒ$ %
data
ƒƒ& *
+
ƒƒ+ ,
$str
ƒƒ- 2
+
ƒƒ3 4
(
ƒƒ5 6
$num
ƒƒ6 9
/
ƒƒ: ;
data
ƒƒ< @
)
ƒƒ@ A
+
ƒƒB C
$str
ƒƒD H
)
ƒƒH I
;
ƒƒI J
}
≈≈ 
else
∆∆ 
{
«« 
IO
»» 
.
»» 
	WriteLine
»» 
(
»» 
$str
»» D
)
»»D E
;
»»E F
}
…… 
}
   	
}
ÀÀ 
public
ÕÕ 

override
ÕÕ 
void
ÕÕ 
Good
ÕÕ 
(
ÕÕ 
HttpRequest
ÕÕ )
req
ÕÕ* -
,
ÕÕ- .
HttpResponse
ÕÕ/ ;
resp
ÕÕ< @
)
ÕÕ@ A
{
ŒŒ 
GoodG2B1
œœ 
(
œœ 
req
œœ 
,
œœ 
resp
œœ 
)
œœ 
;
œœ 
GoodG2B2
–– 
(
–– 
req
–– 
,
–– 
resp
–– 
)
–– 
;
–– 
GoodB2G1
—— 
(
—— 
req
—— 
,
—— 
resp
—— 
)
—— 
;
—— 
GoodB2G2
““ 
(
““ 
req
““ 
,
““ 
resp
““ 
)
““ 
;
““ 
}
”” 
}’’ 
}÷÷ •T
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_07.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_07 :
:; <
AbstractTestCaseWeb= P
{ 
private   
int   
privateFive   
=   
$num   
;    
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
int$$ 
data$$ 
;$$ 
if%% 

(%% 
privateFive%% 
==%% 
$num%% 
)%% 
{&& 	
data'' 
='' 
int'' 
.'' 
MinValue'' 
;''  
{)) 
if** 
(** 
req** 
.** 
QueryString** #
[**# $
$str**$ (
]**( )
!=*** ,
null**- 1
)**1 2
{++ 
try,, 
{-- 
data.. 
=.. 
int.. "
..." #
Parse..# (
(..( )
req..) ,
..., -
QueryString..- 8
[..8 9
$str..9 =
]..= >
)..> ?
;..? @
}// 
catch00 
(00 
FormatException00 *
exceptNumberFormat00+ =
)00= >
{11 
IO22 
.22 
Logger22 !
.22! "
Log22" %
(22% &
NLog22& *
.22* +
LogLevel22+ 3
.223 4
Warn224 8
,228 9
exceptNumberFormat22: L
,22L M
$str	22N Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
}66 	
else77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
if== 

(== 
privateFive== 
==== 
$num== 
)== 
{>> 	
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA $
+AA% &
dataAA' +
+AA, -
$strAA. 3
+AA4 5
(AA6 7
$numAA7 :
/AA; <
dataAA= A
)AAA B
+AAC D
$strAAE I
)AAI J
;AAJ K
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
HttpRequestGG %
reqGG& )
,GG) *
HttpResponseGG+ 7
respGG8 <
)GG< =
{HH 
intII 
dataII 
;II 
ifJJ 

(JJ 
privateFiveJJ 
!=JJ 
$numJJ 
)JJ 
{KK 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
ifUU 

(UU 
privateFiveUU 
==UU 
$numUU 
)UU 
{VV 	
IOYY 
.YY 
	WriteLineYY 
(YY 
$strYY $
+YY% &
dataYY' +
+YY, -
$strYY. 3
+YY4 5
(YY6 7
$numYY7 :
/YY; <
dataYY= A
)YYA B
+YYC D
$strYYE I
)YYI J
;YYJ K
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
int`` 
data`` 
;`` 
ifaa 

(aa 
privateFiveaa 
==aa 
$numaa 
)aa 
{bb 	
datadd 
=dd 
$numdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
$numjj 
;jj 
}kk 	
ifll 

(ll 
privateFivell 
==ll 
$numll 
)ll 
{mm 	
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp $
+pp% &
datapp' +
+pp, -
$strpp. 3
+pp4 5
(pp6 7
$numpp7 :
/pp; <
datapp= A
)ppA B
+ppC D
$strppE I
)ppI J
;ppJ K
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
intww 
dataww 
;ww 
ifxx 

(xx 
privateFivexx 
==xx 
$numxx 
)xx 
{yy 	
datazz 
=zz 
intzz 
.zz 
MinValuezz 
;zz  
{|| 
if}} 
(}} 
req}} 
.}} 
QueryString}} #
[}}# $
$str}}$ (
]}}( )
!=}}* ,
null}}- 1
)}}1 2
{~~ 
try 
{
ÄÄ 
data
ÅÅ 
=
ÅÅ 
int
ÅÅ "
.
ÅÅ" #
Parse
ÅÅ# (
(
ÅÅ( )
req
ÅÅ) ,
.
ÅÅ, -
QueryString
ÅÅ- 8
[
ÅÅ8 9
$str
ÅÅ9 =
]
ÅÅ= >
)
ÅÅ> ?
;
ÅÅ? @
}
ÇÇ 
catch
ÉÉ 
(
ÉÉ 
FormatException
ÉÉ * 
exceptNumberFormat
ÉÉ+ =
)
ÉÉ= >
{
ÑÑ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ !
.
ÖÖ! "
Log
ÖÖ" %
(
ÖÖ% &
NLog
ÖÖ& *
.
ÖÖ* +
LogLevel
ÖÖ+ 3
.
ÖÖ3 4
Warn
ÖÖ4 8
,
ÖÖ8 9 
exceptNumberFormat
ÖÖ: L
,
ÖÖL M
$strÖÖN Ñ
)ÖÖÑ Ö
;ÖÖÖ Ü
}
ÜÜ 
}
áá 
}
àà 
}
ââ 	
else
ää 
{
ãã 	
data
éé 
=
éé 
$num
éé 
;
éé 
}
èè 	
if
êê 

(
êê 
privateFive
êê 
!=
êê 
$num
êê 
)
êê 
{
ëë 	
IO
ìì 
.
ìì 
	WriteLine
ìì 
(
ìì 
$str
ìì /
)
ìì/ 0
;
ìì0 1
}
îî 	
else
ïï 
{
ññ 	
if
òò 
(
òò 
data
òò 
!=
òò 
$num
òò 
)
òò 
{
ôô 
IO
öö 
.
öö 
	WriteLine
öö 
(
öö 
$str
öö #
+
öö$ %
data
öö& *
+
öö+ ,
$str
öö- 2
+
öö3 4
(
öö5 6
$num
öö6 9
/
öö: ;
data
öö< @
)
öö@ A
+
ööB C
$str
ööD H
)
ööH I
;
ööI J
}
õõ 
else
úú 
{
ùù 
IO
ûû 
.
ûû 
	WriteLine
ûû 
(
ûû 
$str
ûû D
)
ûûD E
;
ûûE F
}
üü 
}
†† 	
}
°° 
private
§§ 
void
§§ 
GoodB2G2
§§ 
(
§§ 
HttpRequest
§§ %
req
§§& )
,
§§) *
HttpResponse
§§+ 7
resp
§§8 <
)
§§< =
{
•• 
int
¶¶ 
data
¶¶ 
;
¶¶ 
if
ßß 

(
ßß 
privateFive
ßß 
==
ßß 
$num
ßß 
)
ßß 
{
®® 	
data
©© 
=
©© 
int
©© 
.
©© 
MinValue
©© 
;
©©  
{
´´ 
if
¨¨ 
(
¨¨ 
req
¨¨ 
.
¨¨ 
QueryString
¨¨ #
[
¨¨# $
$str
¨¨$ (
]
¨¨( )
!=
¨¨* ,
null
¨¨- 1
)
¨¨1 2
{
≠≠ 
try
ÆÆ 
{
ØØ 
data
∞∞ 
=
∞∞ 
int
∞∞ "
.
∞∞" #
Parse
∞∞# (
(
∞∞( )
req
∞∞) ,
.
∞∞, -
QueryString
∞∞- 8
[
∞∞8 9
$str
∞∞9 =
]
∞∞= >
)
∞∞> ?
;
∞∞? @
}
±± 
catch
≤≤ 
(
≤≤ 
FormatException
≤≤ * 
exceptNumberFormat
≤≤+ =
)
≤≤= >
{
≥≥ 
IO
¥¥ 
.
¥¥ 
Logger
¥¥ !
.
¥¥! "
Log
¥¥" %
(
¥¥% &
NLog
¥¥& *
.
¥¥* +
LogLevel
¥¥+ 3
.
¥¥3 4
Warn
¥¥4 8
,
¥¥8 9 
exceptNumberFormat
¥¥: L
,
¥¥L M
$str¥¥N Ñ
)¥¥Ñ Ö
;¥¥Ö Ü
}
µµ 
}
∂∂ 
}
∑∑ 
}
∏∏ 	
else
ππ 
{
∫∫ 	
data
ΩΩ 
=
ΩΩ 
$num
ΩΩ 
;
ΩΩ 
}
ææ 	
if
øø 

(
øø 
privateFive
øø 
==
øø 
$num
øø 
)
øø 
{
¿¿ 	
if
¬¬ 
(
¬¬ 
data
¬¬ 
!=
¬¬ 
$num
¬¬ 
)
¬¬ 
{
√√ 
IO
ƒƒ 
.
ƒƒ 
	WriteLine
ƒƒ 
(
ƒƒ 
$str
ƒƒ #
+
ƒƒ$ %
data
ƒƒ& *
+
ƒƒ+ ,
$str
ƒƒ- 2
+
ƒƒ3 4
(
ƒƒ5 6
$num
ƒƒ6 9
/
ƒƒ: ;
data
ƒƒ< @
)
ƒƒ@ A
+
ƒƒB C
$str
ƒƒD H
)
ƒƒH I
;
ƒƒI J
}
≈≈ 
else
∆∆ 
{
«« 
IO
»» 
.
»» 
	WriteLine
»» 
(
»» 
$str
»» D
)
»»D E
;
»»E F
}
…… 
}
   	
}
ÀÀ 
public
ÕÕ 

override
ÕÕ 
void
ÕÕ 
Good
ÕÕ 
(
ÕÕ 
HttpRequest
ÕÕ )
req
ÕÕ* -
,
ÕÕ- .
HttpResponse
ÕÕ/ ;
resp
ÕÕ< @
)
ÕÕ@ A
{
ŒŒ 
GoodG2B1
œœ 
(
œœ 
req
œœ 
,
œœ 
resp
œœ 
)
œœ 
;
œœ 
GoodG2B2
–– 
(
–– 
req
–– 
,
–– 
resp
–– 
)
–– 
;
–– 
GoodB2G1
—— 
(
—— 
req
—— 
,
—— 
resp
—— 
)
—— 
;
—— 
GoodB2G2
““ 
(
““ 
req
““ 
,
““ 
resp
““ 
)
““ 
;
““ 
}
”” 
}’’ 
}÷÷ ¶W
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_08.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_08 :
:; <
AbstractTestCaseWeb= P
{ 
private   
static   
bool   
PrivateReturnsTrue   *
(  * +
)  + ,
{!! 
return"" 
true"" 
;"" 
}## 
private%% 
static%% 
bool%% 
PrivateReturnsFalse%% +
(%%+ ,
)%%, -
{&& 
return'' 
false'' 
;'' 
}(( 
public** 

override** 
void** 
Bad** 
(** 
HttpRequest** (
req**) ,
,**, -
HttpResponse**. :
resp**; ?
)**? @
{++ 
int,, 
data,, 
;,, 
if-- 

(-- 
PrivateReturnsTrue-- 
(-- 
)--  
)--  !
{.. 	
data// 
=// 
int// 
.// 
MinValue// 
;//  
{11 
if22 
(22 
req22 
.22 
QueryString22 #
[22# $
$str22$ (
]22( )
!=22* ,
null22- 1
)221 2
{33 
try44 
{55 
data66 
=66 
int66 "
.66" #
Parse66# (
(66( )
req66) ,
.66, -
QueryString66- 8
[668 9
$str669 =
]66= >
)66> ?
;66? @
}77 
catch88 
(88 
FormatException88 *
exceptNumberFormat88+ =
)88= >
{99 
IO:: 
.:: 
Logger:: !
.::! "
Log::" %
(::% &
NLog::& *
.::* +
LogLevel::+ 3
.::3 4
Warn::4 8
,::8 9
exceptNumberFormat::: L
,::L M
$str	::N Ñ
)
::Ñ Ö
;
::Ö Ü
};; 
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataCC 
=CC 
$numCC 
;CC 
}DD 	
ifEE 

(EE 
PrivateReturnsTrueEE 
(EE 
)EE  
)EE  !
{FF 	
IOII 
.II 
	WriteLineII 
(II 
$strII $
+II% &
dataII' +
+II, -
$strII. 3
+II4 5
(II6 7
$numII7 :
/II; <
dataII= A
)IIA B
+IIC D
$strIIE I
)III J
;IIJ K
}JJ 	
}KK 
privateOO 
voidOO 
GoodG2B1OO 
(OO 
HttpRequestOO %
reqOO& )
,OO) *
HttpResponseOO+ 7
respOO8 <
)OO< =
{PP 
intQQ 
dataQQ 
;QQ 
ifRR 

(RR 
PrivateReturnsFalseRR 
(RR  
)RR  !
)RR! "
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
elseXX 
{YY 	
data[[ 
=[[ 
$num[[ 
;[[ 
}\\ 	
if]] 

(]] 
PrivateReturnsTrue]] 
(]] 
)]]  
)]]  !
{^^ 	
IOaa 
.aa 
	WriteLineaa 
(aa 
$straa $
+aa% &
dataaa' +
+aa, -
$straa. 3
+aa4 5
(aa6 7
$numaa7 :
/aa; <
dataaa= A
)aaA B
+aaC D
$straaE I
)aaI J
;aaJ K
}bb 	
}cc 
privateff 
voidff 
GoodG2B2ff 
(ff 
HttpRequestff %
reqff& )
,ff) *
HttpResponseff+ 7
respff8 <
)ff< =
{gg 
inthh 
datahh 
;hh 
ifii 

(ii 
PrivateReturnsTrueii 
(ii 
)ii  
)ii  !
{jj 	
datall 
=ll 
$numll 
;ll 
}mm 	
elsenn 
{oo 	
datarr 
=rr 
$numrr 
;rr 
}ss 	
iftt 

(tt 
PrivateReturnsTruett 
(tt 
)tt  
)tt  !
{uu 	
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx $
+xx% &
dataxx' +
+xx, -
$strxx. 3
+xx4 5
(xx6 7
$numxx7 :
/xx; <
dataxx= A
)xxA B
+xxC D
$strxxE I
)xxI J
;xxJ K
}yy 	
}zz 
private}} 
void}} 
GoodB2G1}} 
(}} 
HttpRequest}} %
req}}& )
,}}) *
HttpResponse}}+ 7
resp}}8 <
)}}< =
{~~ 
int 
data 
; 
if
ÄÄ 

(
ÄÄ  
PrivateReturnsTrue
ÄÄ 
(
ÄÄ 
)
ÄÄ  
)
ÄÄ  !
{
ÅÅ 	
data
ÇÇ 
=
ÇÇ 
int
ÇÇ 
.
ÇÇ 
MinValue
ÇÇ 
;
ÇÇ  
{
ÑÑ 
if
ÖÖ 
(
ÖÖ 
req
ÖÖ 
.
ÖÖ 
QueryString
ÖÖ #
[
ÖÖ# $
$str
ÖÖ$ (
]
ÖÖ( )
!=
ÖÖ* ,
null
ÖÖ- 1
)
ÖÖ1 2
{
ÜÜ 
try
áá 
{
àà 
data
ââ 
=
ââ 
int
ââ "
.
ââ" #
Parse
ââ# (
(
ââ( )
req
ââ) ,
.
ââ, -
QueryString
ââ- 8
[
ââ8 9
$str
ââ9 =
]
ââ= >
)
ââ> ?
;
ââ? @
}
ää 
catch
ãã 
(
ãã 
FormatException
ãã * 
exceptNumberFormat
ãã+ =
)
ãã= >
{
åå 
IO
çç 
.
çç 
Logger
çç !
.
çç! "
Log
çç" %
(
çç% &
NLog
çç& *
.
çç* +
LogLevel
çç+ 3
.
çç3 4
Warn
çç4 8
,
çç8 9 
exceptNumberFormat
çç: L
,
ççL M
$strççN Ñ
)ççÑ Ö
;ççÖ Ü
}
éé 
}
èè 
}
êê 
}
ëë 	
else
íí 
{
ìì 	
data
ññ 
=
ññ 
$num
ññ 
;
ññ 
}
óó 	
if
òò 

(
òò !
PrivateReturnsFalse
òò 
(
òò  
)
òò  !
)
òò! "
{
ôô 	
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ /
)
õõ/ 0
;
õõ0 1
}
úú 	
else
ùù 
{
ûû 	
if
†† 
(
†† 
data
†† 
!=
†† 
$num
†† 
)
†† 
{
°° 
IO
¢¢ 
.
¢¢ 
	WriteLine
¢¢ 
(
¢¢ 
$str
¢¢ #
+
¢¢$ %
data
¢¢& *
+
¢¢+ ,
$str
¢¢- 2
+
¢¢3 4
(
¢¢5 6
$num
¢¢6 9
/
¢¢: ;
data
¢¢< @
)
¢¢@ A
+
¢¢B C
$str
¢¢D H
)
¢¢H I
;
¢¢I J
}
££ 
else
§§ 
{
•• 
IO
¶¶ 
.
¶¶ 
	WriteLine
¶¶ 
(
¶¶ 
$str
¶¶ D
)
¶¶D E
;
¶¶E F
}
ßß 
}
®® 	
}
©© 
private
¨¨ 
void
¨¨ 
GoodB2G2
¨¨ 
(
¨¨ 
HttpRequest
¨¨ %
req
¨¨& )
,
¨¨) *
HttpResponse
¨¨+ 7
resp
¨¨8 <
)
¨¨< =
{
≠≠ 
int
ÆÆ 
data
ÆÆ 
;
ÆÆ 
if
ØØ 

(
ØØ  
PrivateReturnsTrue
ØØ 
(
ØØ 
)
ØØ  
)
ØØ  !
{
∞∞ 	
data
±± 
=
±± 
int
±± 
.
±± 
MinValue
±± 
;
±±  
{
≥≥ 
if
¥¥ 
(
¥¥ 
req
¥¥ 
.
¥¥ 
QueryString
¥¥ #
[
¥¥# $
$str
¥¥$ (
]
¥¥( )
!=
¥¥* ,
null
¥¥- 1
)
¥¥1 2
{
µµ 
try
∂∂ 
{
∑∑ 
data
∏∏ 
=
∏∏ 
int
∏∏ "
.
∏∏" #
Parse
∏∏# (
(
∏∏( )
req
∏∏) ,
.
∏∏, -
QueryString
∏∏- 8
[
∏∏8 9
$str
∏∏9 =
]
∏∏= >
)
∏∏> ?
;
∏∏? @
}
ππ 
catch
∫∫ 
(
∫∫ 
FormatException
∫∫ * 
exceptNumberFormat
∫∫+ =
)
∫∫= >
{
ªª 
IO
ºº 
.
ºº 
Logger
ºº !
.
ºº! "
Log
ºº" %
(
ºº% &
NLog
ºº& *
.
ºº* +
LogLevel
ºº+ 3
.
ºº3 4
Warn
ºº4 8
,
ºº8 9 
exceptNumberFormat
ºº: L
,
ººL M
$strººN Ñ
)ººÑ Ö
;ººÖ Ü
}
ΩΩ 
}
ææ 
}
øø 
}
¿¿ 	
else
¡¡ 
{
¬¬ 	
data
≈≈ 
=
≈≈ 
$num
≈≈ 
;
≈≈ 
}
∆∆ 	
if
«« 

(
««  
PrivateReturnsTrue
«« 
(
«« 
)
««  
)
««  !
{
»» 	
if
   
(
   
data
   
!=
   
$num
   
)
   
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
	WriteLine
ÃÃ 
(
ÃÃ 
$str
ÃÃ #
+
ÃÃ$ %
data
ÃÃ& *
+
ÃÃ+ ,
$str
ÃÃ- 2
+
ÃÃ3 4
(
ÃÃ5 6
$num
ÃÃ6 9
/
ÃÃ: ;
data
ÃÃ< @
)
ÃÃ@ A
+
ÃÃB C
$str
ÃÃD H
)
ÃÃH I
;
ÃÃI J
}
ÕÕ 
else
ŒŒ 
{
œœ 
IO
–– 
.
–– 
	WriteLine
–– 
(
–– 
$str
–– D
)
––D E
;
––E F
}
—— 
}
““ 	
}
”” 
public
’’ 

override
’’ 
void
’’ 
Good
’’ 
(
’’ 
HttpRequest
’’ )
req
’’* -
,
’’- .
HttpResponse
’’/ ;
resp
’’< @
)
’’@ A
{
÷÷ 
GoodG2B1
◊◊ 
(
◊◊ 
req
◊◊ 
,
◊◊ 
resp
◊◊ 
)
◊◊ 
;
◊◊ 
GoodG2B2
ÿÿ 
(
ÿÿ 
req
ÿÿ 
,
ÿÿ 
resp
ÿÿ 
)
ÿÿ 
;
ÿÿ 
GoodB2G1
ŸŸ 
(
ŸŸ 
req
ŸŸ 
,
ŸŸ 
resp
ŸŸ 
)
ŸŸ 
;
ŸŸ 
GoodB2G2
⁄⁄ 
(
⁄⁄ 
req
⁄⁄ 
,
⁄⁄ 
resp
⁄⁄ 
)
⁄⁄ 
;
⁄⁄ 
}
€€ 
}›› 
}ﬁﬁ »S
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_09.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_09 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_TRUE   #
)  # $
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88 
IO88 
.88  
STATIC_READONLY_TRUE88 #
)88# $
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< $
+<<% &
data<<' +
+<<, -
$str<<. 3
+<<4 5
(<<6 7
$num<<7 :
/<<; <
data<<= A
)<<A B
+<<C D
$str<<E I
)<<I J
;<<J K
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
IOEE 
.EE !
STATIC_READONLY_FALSEEE $
)EE$ %
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
IOPP 
.PP  
STATIC_READONLY_TRUEPP #
)PP# $
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT $
+TT% &
dataTT' +
+TT, -
$strTT. 3
+TT4 5
(TT6 7
$numTT7 :
/TT; <
dataTT= A
)TTA B
+TTC D
$strTTE I
)TTI J
;TTJ K
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
IO\\ 
.\\  
STATIC_READONLY_TRUE\\ #
)\\# $
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
IOgg 
.gg  
STATIC_READONLY_TRUEgg #
)gg# $
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk $
+kk% &
datakk' +
+kk, -
$strkk. 3
+kk4 5
(kk6 7
$numkk7 :
/kk; <
datakk= A
)kkA B
+kkC D
$strkkE I
)kkI J
;kkJ K
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
IOss 
.ss  
STATIC_READONLY_TRUEss #
)ss# $
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
IO
ãã 
.
ãã #
STATIC_READONLY_FALSE
ãã $
)
ãã$ %
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
/
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ "
STATIC_READONLY_TRUE
¢¢ #
)
¢¢# $
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
IO
∫∫ 
.
∫∫ "
STATIC_READONLY_TRUE
∫∫ #
)
∫∫# $
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
/
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— ‰R
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_10.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_10 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.   

staticTrue   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88 
IO88 
.88 

staticTrue88 
)88 
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< $
+<<% &
data<<' +
+<<, -
$str<<. 3
+<<4 5
(<<6 7
$num<<7 :
/<<; <
data<<= A
)<<A B
+<<C D
$str<<E I
)<<I J
;<<J K
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
IOEE 
.EE 
staticFalseEE 
)EE 
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
IOPP 
.PP 

staticTruePP 
)PP 
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT $
+TT% &
dataTT' +
+TT, -
$strTT. 3
+TT4 5
(TT6 7
$numTT7 :
/TT; <
dataTT= A
)TTA B
+TTC D
$strTTE I
)TTI J
;TTJ K
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
IO\\ 
.\\ 

staticTrue\\ 
)\\ 
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
IOgg 
.gg 

staticTruegg 
)gg 
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk $
+kk% &
datakk' +
+kk, -
$strkk. 3
+kk4 5
(kk6 7
$numkk7 :
/kk; <
datakk= A
)kkA B
+kkC D
$strkkE I
)kkI J
;kkJ K
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
IOss 
.ss 

staticTruess 
)ss 
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
IO
ãã 
.
ãã 
staticFalse
ãã 
)
ãã 
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
/
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ 

staticTrue
¢¢ 
)
¢¢ 
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
IO
∫∫ 
.
∫∫ 

staticTrue
∫∫ 
)
∫∫ 
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
/
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— ‚U
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_11.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_11 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.   
StaticReturnsTrue    
(    !
)  ! "
)  " #
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88
 
IO88 
.88 
StaticReturnsTrue88 
(88  
)88  !
)88! "
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< $
+<<% &
data<<' +
+<<, -
$str<<. 3
+<<4 5
(<<6 7
$num<<7 :
/<<; <
data<<= A
)<<A B
+<<C D
$str<<E I
)<<I J
;<<J K
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
IOEE 
.EE 
StaticReturnsFalseEE !
(EE! "
)EE" #
)EE# $
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
IOPP 
.PP 
StaticReturnsTruePP  
(PP  !
)PP! "
)PP" #
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT $
+TT% &
dataTT' +
+TT, -
$strTT. 3
+TT4 5
(TT6 7
$numTT7 :
/TT; <
dataTT= A
)TTA B
+TTC D
$strTTE I
)TTI J
;TTJ K
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
IO\\ 
.\\ 
StaticReturnsTrue\\  
(\\  !
)\\! "
)\\" #
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
IOgg 
.gg 
StaticReturnsTruegg  
(gg  !
)gg! "
)gg" #
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk $
+kk% &
datakk' +
+kk, -
$strkk. 3
+kk4 5
(kk6 7
$numkk7 :
/kk; <
datakk= A
)kkA B
+kkC D
$strkkE I
)kkI J
;kkJ K
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
IOss 
.ss 
StaticReturnsTruess  
(ss  !
)ss! "
)ss" #
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
IO
ãã 
.
ãã  
StaticReturnsFalse
ãã !
(
ãã! "
)
ãã" #
)
ãã# $
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
/
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ 
StaticReturnsTrue
¢¢  
(
¢¢  !
)
¢¢! "
)
¢¢" #
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
IO
∫∫ 
.
∫∫ 
StaticReturnsTrue
∫∫  
(
∫∫  !
)
∫∫! "
)
∫∫" #
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
/
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— åK
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_12.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_12 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(  
 
IO   
.   $
StaticReturnsTrueOrFalse   &
(  & '
)  ' (
)  ( )
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data55 
=55 
$num55 
;55 
}66 	
if77 

(77
 
IO77 
.77 $
StaticReturnsTrueOrFalse77 &
(77& '
)77' (
)77( )
{88 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; $
+;;% &
data;;' +
+;;, -
$str;;. 3
+;;4 5
(;;6 7
$num;;7 :
/;;; <
data;;= A
);;A B
+;;C D
$str;;E I
);;I J
;;;J K
}<< 	
else== 
{>> 	
if@@ 
(@@ 
data@@ 
!=@@ 
$num@@ 
)@@ 
{AA 
IOBB 
.BB 
	WriteLineBB 
(BB 
$strBB #
+BB$ %
dataBB& *
+BB+ ,
$strBB- 2
+BB3 4
(BB5 6
$numBB6 9
/BB: ;
dataBB< @
)BB@ A
+BBB C
$strBBD H
)BBH I
;BBI J
}CC 
elseDD 
{EE 
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF D
)FFD E
;FFE F
}GG 
}HH 	
}II 
privateNN 
voidNN 
GoodG2BNN 
(NN 
HttpRequestNN $
reqNN% (
,NN( )
HttpResponseNN* 6
respNN7 ;
)NN; <
{OO 
intPP 
dataPP 
;PP 
ifQQ 

(QQ
 
IOQQ 
.QQ $
StaticReturnsTrueOrFalseQQ &
(QQ& '
)QQ' (
)QQ( )
{RR 	
dataTT 
=TT 
$numTT 
;TT 
}UU 	
elseVV 
{WW 	
dataYY 
=YY 
$numYY 
;YY 
}ZZ 	
if[[ 

([[
 
IO[[ 
.[[ $
StaticReturnsTrueOrFalse[[ &
([[& '
)[[' (
)[[( )
{\\ 	
IO__ 
.__ 
	WriteLine__ 
(__ 
$str__ $
+__% &
data__' +
+__, -
$str__. 3
+__4 5
(__6 7
$num__7 :
/__; <
data__= A
)__A B
+__C D
$str__E I
)__I J
;__J K
}`` 	
elseaa 
{bb 	
IOee 
.ee 
	WriteLineee 
(ee 
$stree $
+ee% &
dataee' +
+ee, -
$stree. 3
+ee4 5
(ee6 7
$numee7 :
/ee; <
dataee= A
)eeA B
+eeC D
$streeE I
)eeI J
;eeJ K
}ff 	
}gg 
privatekk 
voidkk 
GoodB2Gkk 
(kk 
HttpRequestkk $
reqkk% (
,kk( )
HttpResponsekk* 6
respkk7 ;
)kk; <
{ll 
intmm 
datamm 
;mm 
ifnn 

(nn
 
IOnn 
.nn $
StaticReturnsTrueOrFalsenn &
(nn& '
)nn' (
)nn( )
{oo 	
datapp 
=pp 
intpp 
.pp 
MinValuepp 
;pp  
{rr 
ifss 
(ss 
reqss 
.ss 
QueryStringss #
[ss# $
$strss$ (
]ss( )
!=ss* ,
nullss- 1
)ss1 2
{tt 
tryuu 
{vv 
dataww 
=ww 
intww "
.ww" #
Parseww# (
(ww( )
reqww) ,
.ww, -
QueryStringww- 8
[ww8 9
$strww9 =
]ww= >
)ww> ?
;ww? @
}xx 
catchyy 
(yy 
FormatExceptionyy *
exceptNumberFormatyy+ =
)yy= >
{zz 
IO{{ 
.{{ 
Logger{{ !
.{{! "
Log{{" %
({{% &
NLog{{& *
.{{* +
LogLevel{{+ 3
.{{3 4
Warn{{4 8
,{{8 9
exceptNumberFormat{{: L
,{{L M
$str	{{N Ñ
)
{{Ñ Ö
;
{{Ö Ü
}|| 
}}} 
}~~ 
} 	
else
ÄÄ 
{
ÅÅ 	
data
ÇÇ 
=
ÇÇ 
int
ÇÇ 
.
ÇÇ 
MinValue
ÇÇ 
;
ÇÇ  
{
ÑÑ 
if
ÖÖ 
(
ÖÖ 
req
ÖÖ 
.
ÖÖ 
QueryString
ÖÖ #
[
ÖÖ# $
$str
ÖÖ$ (
]
ÖÖ( )
!=
ÖÖ* ,
null
ÖÖ- 1
)
ÖÖ1 2
{
ÜÜ 
try
áá 
{
àà 
data
ââ 
=
ââ 
int
ââ "
.
ââ" #
Parse
ââ# (
(
ââ( )
req
ââ) ,
.
ââ, -
QueryString
ââ- 8
[
ââ8 9
$str
ââ9 =
]
ââ= >
)
ââ> ?
;
ââ? @
}
ää 
catch
ãã 
(
ãã 
FormatException
ãã * 
exceptNumberFormat
ãã+ =
)
ãã= >
{
åå 
IO
çç 
.
çç 
Logger
çç !
.
çç! "
Log
çç" %
(
çç% &
NLog
çç& *
.
çç* +
LogLevel
çç+ 3
.
çç3 4
Warn
çç4 8
,
çç8 9 
exceptNumberFormat
çç: L
,
ççL M
$strççN Ñ
)ççÑ Ö
;ççÖ Ü
}
éé 
}
èè 
}
êê 
}
ëë 	
if
íí 

(
íí
 
IO
íí 
.
íí &
StaticReturnsTrueOrFalse
íí &
(
íí& '
)
íí' (
)
íí( )
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
/
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
else
ûû 
{
üü 	
if
°° 
(
°° 
data
°° 
!=
°° 
$num
°° 
)
°° 
{
¢¢ 
IO
££ 
.
££ 
	WriteLine
££ 
(
££ 
$str
££ #
+
££$ %
data
££& *
+
££+ ,
$str
££- 2
+
££3 4
(
££5 6
$num
££6 9
/
££: ;
data
££< @
)
££@ A
+
££B C
$str
££D H
)
££H I
;
££I J
}
§§ 
else
•• 
{
¶¶ 
IO
ßß 
.
ßß 
	WriteLine
ßß 
(
ßß 
$str
ßß D
)
ßßD E
;
ßßE F
}
®® 
}
©© 	
}
™™ 
public
¨¨ 

override
¨¨ 
void
¨¨ 
Good
¨¨ 
(
¨¨ 
HttpRequest
¨¨ )
req
¨¨* -
,
¨¨- .
HttpResponse
¨¨/ ;
resp
¨¨< @
)
¨¨@ A
{
ÆÆ 
GoodG2B
ØØ 
(
ØØ 
req
ØØ 
,
ØØ 
resp
ØØ 
)
ØØ 
;
ØØ 
GoodB2G
∞∞ 
(
∞∞ 
req
∞∞ 
,
∞∞ 
resp
∞∞ 
)
∞∞ 
;
∞∞ 
}
±± 
}≥≥ 
}¥¥ ¶V
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_13.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_13 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_FIVE   #
==  # %
$num  % &
)  & '
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88 
IO88 
.88  
STATIC_READONLY_FIVE88 #
==88# %
$num88% &
)88& '
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< $
+<<% &
data<<' +
+<<, -
$str<<. 3
+<<4 5
(<<6 7
$num<<7 :
/<<; <
data<<= A
)<<A B
+<<C D
$str<<E I
)<<I J
;<<J K
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
IOEE 
.EE  
STATIC_READONLY_FIVEEE #
!=EE# %
$numEE% &
)EE& '
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
IOPP 
.PP  
STATIC_READONLY_FIVEPP #
==PP# %
$numPP% &
)PP& '
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT $
+TT% &
dataTT' +
+TT, -
$strTT. 3
+TT4 5
(TT6 7
$numTT7 :
/TT; <
dataTT= A
)TTA B
+TTC D
$strTTE I
)TTI J
;TTJ K
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
IO\\ 
.\\  
STATIC_READONLY_FIVE\\ #
==\\# %
$num\\% &
)\\& '
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
IOgg 
.gg  
STATIC_READONLY_FIVEgg #
==gg# %
$numgg% &
)gg& '
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk $
+kk% &
datakk' +
+kk, -
$strkk. 3
+kk4 5
(kk6 7
$numkk7 :
/kk; <
datakk= A
)kkA B
+kkC D
$strkkE I
)kkI J
;kkJ K
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
IOss 
.ss  
STATIC_READONLY_FIVEss #
==ss# %
$numss% &
)ss& '
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
IO
ãã 
.
ãã "
STATIC_READONLY_FIVE
ãã #
!=
ãã# %
$num
ãã% &
)
ãã& '
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
/
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ "
STATIC_READONLY_FIVE
¢¢ #
==
¢¢# %
$num
¢¢% &
)
¢¢& '
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
IO
∫∫ 
.
∫∫ "
STATIC_READONLY_FIVE
∫∫ #
==
∫∫# %
$num
∫∫% &
)
∫∫& '
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
/
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— ¬U
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_14.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_14 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.   

staticFive   
==   
$num   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88 
IO88 
.88 

staticFive88 
==88 
$num88 
)88 
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< $
+<<% &
data<<' +
+<<, -
$str<<. 3
+<<4 5
(<<6 7
$num<<7 :
/<<; <
data<<= A
)<<A B
+<<C D
$str<<E I
)<<I J
;<<J K
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
IOEE 
.EE 

staticFiveEE 
!=EE 
$numEE 
)EE 
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
IOPP 
.PP 

staticFivePP 
==PP 
$numPP 
)PP 
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT $
+TT% &
dataTT' +
+TT, -
$strTT. 3
+TT4 5
(TT6 7
$numTT7 :
/TT; <
dataTT= A
)TTA B
+TTC D
$strTTE I
)TTI J
;TTJ K
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
IO\\ 
.\\ 

staticFive\\ 
==\\ 
$num\\ 
)\\ 
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
IOgg 
.gg 

staticFivegg 
==gg 
$numgg 
)gg 
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk $
+kk% &
datakk' +
+kk, -
$strkk. 3
+kk4 5
(kk6 7
$numkk7 :
/kk; <
datakk= A
)kkA B
+kkC D
$strkkE I
)kkI J
;kkJ K
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
IOss 
.ss 

staticFivess 
==ss 
$numss 
)ss 
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
IO
ãã 
.
ãã 

staticFive
ãã 
!=
ãã 
$num
ãã 
)
ãã 
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
/
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ 

staticFive
¢¢ 
==
¢¢ 
$num
¢¢ 
)
¢¢ 
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
IO
∫∫ 
.
∫∫ 

staticFive
∫∫ 
==
∫∫ 
$num
∫∫ 
)
∫∫ 
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
/
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— î_
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_15.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_15 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
switch   
(   
$num   
)   
{!! 	
case"" 
$num"" 
:"" 
data## 
=## 
int## 
.## 
MinValue## 
;##  
{%% 
if&& 
(&& 
req&& 
.&& 
QueryString&& #
[&&# $
$str&&$ (
]&&( )
!=&&* ,
null&&- 1
)&&1 2
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
req**) ,
.**, -
QueryString**- 8
[**8 9
$str**9 =
]**= >
)**> ?
;**? @
}++ 
catch,, 
(,, 
FormatException,, *
exceptNumberFormat,,+ =
),,= >
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ñ
)
..Ñ Ö
;
..Ö Ü
}// 
}00 
}11 
break22 
;22 
default33 
:33 
data66 
=66 
$num66 
;66 
break77 
;77 
}88 	
switch99 
(99 
$num99 
)99 
{:: 	
case;; 
$num;; 
:;; 
IO>> 
.>> 
	WriteLine>> 
(>> 
$str>> $
+>>% &
data>>' +
+>>, -
$str>>. 3
+>>4 5
(>>6 7
$num>>7 :
/>>; <
data>>= A
)>>A B
+>>C D
$str>>E I
)>>I J
;>>J K
break?? 
;?? 
default@@ 
:@@ 
IOBB 
.BB 
	WriteLineBB 
(BB 
$strBB /
)BB/ 0
;BB0 1
breakCC 
;CC 
}DD 	
}EE 
privateII 
voidII 
GoodG2B1II 
(II 
HttpRequestII %
reqII& )
,II) *
HttpResponseII+ 7
respII8 <
)II< =
{JJ 
intKK 
dataKK 
;KK 
switchLL 
(LL 
$numLL 
)LL 
{MM 	
caseNN 
$numNN 
:NN 
dataQQ 
=QQ 
$numQQ 
;QQ 
breakRR 
;RR 
defaultSS 
:SS 
dataUU 
=UU 
$numUU 
;UU 
breakVV 
;VV 
}WW 	
switchXX 
(XX 
$numXX 
)XX 
{YY 	
caseZZ 
$numZZ 
:ZZ 
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] $
+]]% &
data]]' +
+]], -
$str]]. 3
+]]4 5
(]]6 7
$num]]7 :
/]]; <
data]]= A
)]]A B
+]]C D
$str]]E I
)]]I J
;]]J K
break^^ 
;^^ 
default__ 
:__ 
IOaa 
.aa 
	WriteLineaa 
(aa 
$straa /
)aa/ 0
;aa0 1
breakbb 
;bb 
}cc 	
}dd 
privategg 
voidgg 
GoodG2B2gg 
(gg 
HttpRequestgg %
reqgg& )
,gg) *
HttpResponsegg+ 7
respgg8 <
)gg< =
{hh 
intii 
dataii 
;ii 
switchjj 
(jj 
$numjj 
)jj 
{kk 	
casell 
$numll 
:ll 
datann 
=nn 
$numnn 
;nn 
breakoo 
;oo 
defaultpp 
:pp 
datass 
=ss 
$numss 
;ss 
breaktt 
;tt 
}uu 	
switchvv 
(vv 
$numvv 
)vv 
{ww 	
casexx 
$numxx 
:xx 
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ $
+{{% &
data{{' +
+{{, -
$str{{. 3
+{{4 5
({{6 7
$num{{7 :
/{{; <
data{{= A
){{A B
+{{C D
$str{{E I
){{I J
;{{J K
break|| 
;|| 
default}} 
:}} 
IO 
. 
	WriteLine 
( 
$str /
)/ 0
;0 1
break
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
}
ÇÇ 
private
ÖÖ 
void
ÖÖ 
GoodB2G1
ÖÖ 
(
ÖÖ 
HttpRequest
ÖÖ %
req
ÖÖ& )
,
ÖÖ) *
HttpResponse
ÖÖ+ 7
resp
ÖÖ8 <
)
ÖÖ< =
{
ÜÜ 
int
áá 
data
áá 
;
áá 
switch
àà 
(
àà 
$num
àà 
)
àà 
{
ââ 	
case
ää 
$num
ää 
:
ää 
data
ãã 
=
ãã 
int
ãã 
.
ãã 
MinValue
ãã 
;
ãã  
{
çç 
if
éé 
(
éé 
req
éé 
.
éé 
QueryString
éé #
[
éé# $
$str
éé$ (
]
éé( )
!=
éé* ,
null
éé- 1
)
éé1 2
{
èè 
try
êê 
{
ëë 
data
íí 
=
íí 
int
íí "
.
íí" #
Parse
íí# (
(
íí( )
req
íí) ,
.
íí, -
QueryString
íí- 8
[
íí8 9
$str
íí9 =
]
íí= >
)
íí> ?
;
íí? @
}
ìì 
catch
îî 
(
îî 
FormatException
îî * 
exceptNumberFormat
îî+ =
)
îî= >
{
ïï 
IO
ññ 
.
ññ 
Logger
ññ !
.
ññ! "
Log
ññ" %
(
ññ% &
NLog
ññ& *
.
ññ* +
LogLevel
ññ+ 3
.
ññ3 4
Warn
ññ4 8
,
ññ8 9 
exceptNumberFormat
ññ: L
,
ññL M
$strññN Ñ
)ññÑ Ö
;ññÖ Ü
}
óó 
}
òò 
}
ôô 
break
öö 
;
öö 
default
õõ 
:
õõ 
data
ûû 
=
ûû 
$num
ûû 
;
ûû 
break
üü 
;
üü 
}
†† 	
switch
°° 
(
°° 
$num
°° 
)
°° 
{
¢¢ 	
case
££ 
$num
££ 
:
££ 
IO
•• 
.
•• 
	WriteLine
•• 
(
•• 
$str
•• /
)
••/ 0
;
••0 1
break
¶¶ 
;
¶¶ 
default
ßß 
:
ßß 
if
©© 
(
©© 
data
©© 
!=
©© 
$num
©© 
)
©© 
{
™™ 
IO
´´ 
.
´´ 
	WriteLine
´´ 
(
´´ 
$str
´´ #
+
´´$ %
data
´´& *
+
´´+ ,
$str
´´- 2
+
´´3 4
(
´´5 6
$num
´´6 9
/
´´: ;
data
´´< @
)
´´@ A
+
´´B C
$str
´´D H
)
´´H I
;
´´I J
}
¨¨ 
else
≠≠ 
{
ÆÆ 
IO
ØØ 
.
ØØ 
	WriteLine
ØØ 
(
ØØ 
$str
ØØ D
)
ØØD E
;
ØØE F
}
∞∞ 
break
±± 
;
±± 
}
≤≤ 	
}
≥≥ 
private
∂∂ 
void
∂∂ 
GoodB2G2
∂∂ 
(
∂∂ 
HttpRequest
∂∂ %
req
∂∂& )
,
∂∂) *
HttpResponse
∂∂+ 7
resp
∂∂8 <
)
∂∂< =
{
∑∑ 
int
∏∏ 
data
∏∏ 
;
∏∏ 
switch
ππ 
(
ππ 
$num
ππ 
)
ππ 
{
∫∫ 	
case
ªª 
$num
ªª 
:
ªª 
data
ºº 
=
ºº 
int
ºº 
.
ºº 
MinValue
ºº 
;
ºº  
{
ææ 
if
øø 
(
øø 
req
øø 
.
øø 
QueryString
øø #
[
øø# $
$str
øø$ (
]
øø( )
!=
øø* ,
null
øø- 1
)
øø1 2
{
¿¿ 
try
¡¡ 
{
¬¬ 
data
√√ 
=
√√ 
int
√√ "
.
√√" #
Parse
√√# (
(
√√( )
req
√√) ,
.
√√, -
QueryString
√√- 8
[
√√8 9
$str
√√9 =
]
√√= >
)
√√> ?
;
√√? @
}
ƒƒ 
catch
≈≈ 
(
≈≈ 
FormatException
≈≈ * 
exceptNumberFormat
≈≈+ =
)
≈≈= >
{
∆∆ 
IO
«« 
.
«« 
Logger
«« !
.
««! "
Log
««" %
(
««% &
NLog
««& *
.
««* +
LogLevel
««+ 3
.
««3 4
Warn
««4 8
,
««8 9 
exceptNumberFormat
««: L
,
««L M
$str««N Ñ
)««Ñ Ö
;««Ö Ü
}
»» 
}
…… 
}
   
break
ÀÀ 
;
ÀÀ 
default
ÃÃ 
:
ÃÃ 
data
œœ 
=
œœ 
$num
œœ 
;
œœ 
break
–– 
;
–– 
}
—— 	
switch
““ 
(
““ 
$num
““ 
)
““ 
{
”” 	
case
‘‘ 
$num
‘‘ 
:
‘‘ 
if
÷÷ 
(
÷÷ 
data
÷÷ 
!=
÷÷ 
$num
÷÷ 
)
÷÷ 
{
◊◊ 
IO
ÿÿ 
.
ÿÿ 
	WriteLine
ÿÿ 
(
ÿÿ 
$str
ÿÿ #
+
ÿÿ$ %
data
ÿÿ& *
+
ÿÿ+ ,
$str
ÿÿ- 2
+
ÿÿ3 4
(
ÿÿ5 6
$num
ÿÿ6 9
/
ÿÿ: ;
data
ÿÿ< @
)
ÿÿ@ A
+
ÿÿB C
$str
ÿÿD H
)
ÿÿH I
;
ÿÿI J
}
ŸŸ 
else
⁄⁄ 
{
€€ 
IO
‹‹ 
.
‹‹ 
	WriteLine
‹‹ 
(
‹‹ 
$str
‹‹ D
)
‹‹D E
;
‹‹E F
}
›› 
break
ﬁﬁ 
;
ﬁﬁ 
default
ﬂﬂ 
:
ﬂﬂ 
IO
·· 
.
·· 
	WriteLine
·· 
(
·· 
$str
·· /
)
··/ 0
;
··0 1
break
‚‚ 
;
‚‚ 
}
„„ 	
}
‰‰ 
public
ÊÊ 

override
ÊÊ 
void
ÊÊ 
Good
ÊÊ 
(
ÊÊ 
HttpRequest
ÊÊ )
req
ÊÊ* -
,
ÊÊ- .
HttpResponse
ÊÊ/ ;
resp
ÊÊ< @
)
ÊÊ@ A
{
ÁÁ 
GoodG2B1
ËË 
(
ËË 
req
ËË 
,
ËË 
resp
ËË 
)
ËË 
;
ËË 
GoodG2B2
ÈÈ 
(
ÈÈ 
req
ÈÈ 
,
ÈÈ 
resp
ÈÈ 
)
ÈÈ 
;
ÈÈ 
GoodB2G1
ÍÍ 
(
ÍÍ 
req
ÍÍ 
,
ÍÍ 
resp
ÍÍ 
)
ÍÍ 
;
ÍÍ 
GoodB2G2
ÎÎ 
(
ÎÎ 
req
ÎÎ 
,
ÎÎ 
resp
ÎÎ 
)
ÎÎ 
;
ÎÎ 
}
ÏÏ 
}ÓÓ 
}ÔÔ ’.
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_16.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_16 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
while   
(   
true   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
break11 
;11 
}22 	
while33 
(33 
true33 
)33 
{44 	
IO77 
.77 
	WriteLine77 
(77 
$str77 $
+77% &
data77' +
+77, -
$str77. 3
+774 5
(776 7
$num777 :
/77; <
data77= A
)77A B
+77C D
$str77E I
)77I J
;77J K
break88 
;88 
}99 	
}:: 
private>> 
void>> 
GoodG2B>> 
(>> 
HttpRequest>> $
req>>% (
,>>( )
HttpResponse>>* 6
resp>>7 ;
)>>; <
{?? 
int@@ 
data@@ 
;@@ 
whileAA 
(AA 
trueAA 
)AA 
{BB 	
dataDD 
=DD 
$numDD 
;DD 
breakEE 
;EE 
}FF 	
whileGG 
(GG 
trueGG 
)GG 
{HH 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK $
+KK% &
dataKK' +
+KK, -
$strKK. 3
+KK4 5
(KK6 7
$numKK7 :
/KK; <
dataKK= A
)KKA B
+KKC D
$strKKE I
)KKI J
;KKJ K
breakLL 
;LL 
}MM 	
}NN 
privateQQ 
voidQQ 
GoodB2GQQ 
(QQ 
HttpRequestQQ $
reqQQ% (
,QQ( )
HttpResponseQQ* 6
respQQ7 ;
)QQ; <
{RR 
intSS 
dataSS 
;SS 
whileTT 
(TT 
trueTT 
)TT 
{UU 	
dataVV 
=VV 
intVV 
.VV 
MinValueVV 
;VV  
{XX 
ifYY 
(YY 
reqYY 
.YY 
QueryStringYY #
[YY# $
$strYY$ (
]YY( )
!=YY* ,
nullYY- 1
)YY1 2
{ZZ 
try[[ 
{\\ 
data]] 
=]] 
int]] "
.]]" #
Parse]]# (
(]]( )
req]]) ,
.]], -
QueryString]]- 8
[]]8 9
$str]]9 =
]]]= >
)]]> ?
;]]? @
}^^ 
catch__ 
(__ 
FormatException__ *
exceptNumberFormat__+ =
)__= >
{`` 
IOaa 
.aa 
Loggeraa !
.aa! "
Logaa" %
(aa% &
NLogaa& *
.aa* +
LogLevelaa+ 3
.aa3 4
Warnaa4 8
,aa8 9
exceptNumberFormataa: L
,aaL M
$str	aaN Ñ
)
aaÑ Ö
;
aaÖ Ü
}bb 
}cc 
}dd 
breakee 
;ee 
}ff 	
whilegg 
(gg 
truegg 
)gg 
{hh 	
ifjj 
(jj 
datajj 
!=jj 
$numjj 
)jj 
{kk 
IOll 
.ll 
	WriteLinell 
(ll 
$strll #
+ll$ %
datall& *
+ll+ ,
$strll- 2
+ll3 4
(ll5 6
$numll6 9
/ll: ;
datall< @
)ll@ A
+llB C
$strllD H
)llH I
;llI J
}mm 
elsenn 
{oo 
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp D
)ppD E
;ppE F
}qq 
breakrr 
;rr 
}ss 	
}tt 
publicvv 

overridevv 
voidvv 
Goodvv 
(vv 
HttpRequestvv )
reqvv* -
,vv- .
HttpResponsevv/ ;
respvv< @
)vv@ A
{ww 
GoodG2Bxx 
(xx 
reqxx 
,xx 
respxx 
)xx 
;xx 
GoodB2Gyy 
(yy 
reqyy 
,yy 
respyy 
)yy 
;yy 
}zz 
}|| 
}}} ¥.
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_17.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_17 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$ 
{&& 	
if'' 
('' 
req'' 
.'' 
QueryString'' 
[''  
$str''  $
]''$ %
!=''& (
null'') -
)''- .
{(( 
try)) 
{** 
data++ 
=++ 
int++ 
.++ 
Parse++ $
(++$ %
req++% (
.++( )
QueryString++) 4
[++4 5
$str++5 9
]++9 :
)++: ;
;++; <
},, 
catch-- 
(-- 
FormatException-- &
exceptNumberFormat--' 9
)--9 :
{.. 
IO// 
.// 
Logger// 
.// 
Log// !
(//! "
NLog//" &
.//& '
LogLevel//' /
./// 0
Warn//0 4
,//4 5
exceptNumberFormat//6 H
,//H I
$str	//J Ä
)
//Ä Å
;
//Å Ç
}00 
}11 
}22 	
for33 
(33 
int33 
j33 
=33 
$num33 
;33 
j33 
<33 
$num33 
;33 
j33  
++33  "
)33" #
{44 	
IO77 
.77 
	WriteLine77 
(77 
$str77 $
+77% &
data77' +
+77, -
$str77. 3
+774 5
(776 7
$num777 :
/77; <
data77= A
)77A B
+77C D
$str77E I
)77I J
;77J K
}88 	
}99 
private== 
void== 
GoodG2B== 
(== 
HttpRequest== $
req==% (
,==( )
HttpResponse==* 6
resp==7 ;
)==; <
{>> 
int?? 
data?? 
;?? 
dataAA 
=AA 
$numAA 
;AA 
forBB 
(BB 
intBB 
jBB 
=BB 
$numBB 
;BB 
jBB 
<BB 
$numBB 
;BB 
jBB  
++BB  "
)BB" #
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
HttpRequestKK $
reqKK% (
,KK( )
HttpResponseKK* 6
respKK7 ;
)KK; <
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
ifQQ 
(QQ 
reqQQ 
.QQ 
QueryStringQQ 
[QQ  
$strQQ  $
]QQ$ %
!=QQ& (
nullQQ) -
)QQ- .
{RR 
trySS 
{TT 
dataUU 
=UU 
intUU 
.UU 
ParseUU $
(UU$ %
reqUU% (
.UU( )
QueryStringUU) 4
[UU4 5
$strUU5 9
]UU9 :
)UU: ;
;UU; <
}VV 
catchWW 
(WW 
FormatExceptionWW &
exceptNumberFormatWW' 9
)WW9 :
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY !
(YY! "
NLogYY" &
.YY& '
LogLevelYY' /
.YY/ 0
WarnYY0 4
,YY4 5
exceptNumberFormatYY6 H
,YYH I
$str	YYJ Ä
)
YYÄ Å
;
YYÅ Ç
}ZZ 
}[[ 
}\\ 	
for]] 
(]] 
int]] 
k]] 
=]] 
$num]] 
;]] 
k]] 
<]] 
$num]] 
;]] 
k]]  
++]]  "
)]]" #
{^^ 	
if`` 
(`` 
data`` 
!=`` 
$num`` 
)`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb #
+bb$ %
databb& *
+bb+ ,
$strbb- 2
+bb3 4
(bb5 6
$numbb6 9
/bb: ;
databb< @
)bb@ A
+bbB C
$strbbD H
)bbH I
;bbI J
}cc 
elsedd 
{ee 
IOff 
.ff 
	WriteLineff 
(ff 
$strff D
)ffD E
;ffE F
}gg 
}hh 	
}ii 
publickk 

overridekk 
voidkk 
Goodkk 
(kk 
HttpRequestkk )
reqkk* -
,kk- .
HttpResponsekk/ ;
respkk< @
)kk@ A
{ll 
GoodG2Bmm 
(mm 
reqmm 
,mm 
respmm 
)mm 
;mm 
GoodB2Gnn 
(nn 
reqnn 
,nn 
respnn 
)nn 
;nn 
}oo 
}qq 
}rr ºS
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_21.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_21 :
:; <
AbstractTestCaseWeb= P
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public   

override   
void   
Bad   
(   
HttpRequest   (
req  ) ,
,  , -
HttpResponse  . :
resp  ; ?
)  ? @
{!! 
int"" 
data"" 
;"" 
data## 
=## 
int## 
.## 
MinValue## 
;## 
{%% 	
if&& 
(&& 
req&& 
.&& 
QueryString&& 
[&&  
$str&&  $
]&&$ %
!=&&& (
null&&) -
)&&- .
{'' 
try(( 
{)) 
data** 
=** 
int** 
.** 
Parse** $
(**$ %
req**% (
.**( )
QueryString**) 4
[**4 5
$str**5 9
]**9 :
)**: ;
;**; <
}++ 
catch,, 
(,, 
FormatException,, &
exceptNumberFormat,,' 9
),,9 :
{-- 
IO.. 
... 
Logger.. 
... 
Log.. !
(..! "
NLog.." &
...& '
LogLevel..' /
.../ 0
Warn..0 4
,..4 5
exceptNumberFormat..6 H
,..H I
$str	..J Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 	

badPrivate22 
=22 
true22 
;22 
BadSink33 
(33 
data33 
,33 
req33 
,33 
resp33  
)33  !
;33! "
}44 
private66 
void66 
BadSink66 
(66 
int66 
data66 !
,66" #
HttpRequest66$ /
req660 3
,663 4
HttpResponse665 A
resp66B F
)66F G
{77 
if88 

(88 

badPrivate88 
)88 
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< $
+<<% &
data<<' +
+<<, -
$str<<. 3
+<<4 5
(<<6 7
$num<<7 :
/<<; <
data<<= A
)<<A B
+<<C D
$str<<E I
)<<I J
;<<J K
}== 	
}>> 
privateAA 
boolAA 
goodB2G1PrivateAA  
=AA! "
falseAA# (
;AA( )
privateBB 
boolBB 
goodB2G2PrivateBB  
=BB! "
falseBB# (
;BB( )
privateCC 
boolCC 
goodG2BPrivateCC 
=CC  !
falseCC" '
;CC' (
publicEE 

overrideEE 
voidEE 
GoodEE 
(EE 
HttpRequestEE )
reqEE* -
,EE- .
HttpResponseEE/ ;
respEE< @
)EE@ A
{FF 
GoodB2G1GG 
(GG 
reqGG 
,GG 
respGG 
)GG 
;GG 
GoodB2G2HH 
(HH 
reqHH 
,HH 
respHH 
)HH 
;HH 
GoodG2BII 
(II 
reqII 
,II 
respII 
)II 
;II 
}JJ 
privateMM 
voidMM 
GoodB2G1MM 
(MM 
HttpRequestMM %
reqMM& )
,MM) *
HttpResponseMM+ 7
respMM8 <
)MM< =
{NN 
intOO 
dataOO 
;OO 
dataPP 
=PP 
intPP 
.PP 
MinValuePP 
;PP 
{RR 	
ifSS 
(SS 
reqSS 
.SS 
QueryStringSS 
[SS  
$strSS  $
]SS$ %
!=SS& (
nullSS) -
)SS- .
{TT 
tryUU 
{VV 
dataWW 
=WW 
intWW 
.WW 
ParseWW $
(WW$ %
reqWW% (
.WW( )
QueryStringWW) 4
[WW4 5
$strWW5 9
]WW9 :
)WW: ;
;WW; <
}XX 
catchYY 
(YY 
FormatExceptionYY &
exceptNumberFormatYY' 9
)YY9 :
{ZZ 
IO[[ 
.[[ 
Logger[[ 
.[[ 
Log[[ !
([[! "
NLog[[" &
.[[& '
LogLevel[[' /
.[[/ 0
Warn[[0 4
,[[4 5
exceptNumberFormat[[6 H
,[[H I
$str	[[J Ä
)
[[Ä Å
;
[[Å Ç
}\\ 
}]] 
}^^ 	
goodB2G1Private__ 
=__ 
false__ 
;__  
GoodB2G1Sink`` 
(`` 
data`` 
,`` 
req`` 
,``  
resp``! %
)``% &
;``& '
}aa 
privatecc 
voidcc 
GoodB2G1Sinkcc 
(cc 
intcc !
datacc" &
,cc' (
HttpRequestcc) 4
reqcc5 8
,cc8 9
HttpResponsecc: F
respccG K
)ccK L
{dd 
ifee 

(ee 
goodB2G1Privateee 
)ee 
{ff 	
IOhh 
.hh 
	WriteLinehh 
(hh 
$strhh /
)hh/ 0
;hh0 1
}ii 	
elsejj 
{kk 	
ifmm 
(mm 
datamm 
!=mm 
$nummm 
)mm 
{nn 
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo #
+oo$ %
dataoo& *
+oo+ ,
$stroo- 2
+oo3 4
(oo5 6
$numoo6 9
/oo: ;
dataoo< @
)oo@ A
+ooB C
$strooD H
)ooH I
;ooI J
}pp 
elseqq 
{rr 
IOss 
.ss 
	WriteLiness 
(ss 
$strss D
)ssD E
;ssE F
}tt 
}uu 	
}vv 
privateyy 
voidyy 
GoodB2G2yy 
(yy 
HttpRequestyy %
reqyy& )
,yy) *
HttpResponseyy+ 7
respyy8 <
)yy< =
{zz 
int{{ 
data{{ 
;{{ 
data|| 
=|| 
int|| 
.|| 
MinValue|| 
;|| 
{~~ 	
if 
( 
req 
. 
QueryString 
[  
$str  $
]$ %
!=& (
null) -
)- .
{
ÄÄ 
try
ÅÅ 
{
ÇÇ 
data
ÉÉ 
=
ÉÉ 
int
ÉÉ 
.
ÉÉ 
Parse
ÉÉ $
(
ÉÉ$ %
req
ÉÉ% (
.
ÉÉ( )
QueryString
ÉÉ) 4
[
ÉÉ4 5
$str
ÉÉ5 9
]
ÉÉ9 :
)
ÉÉ: ;
;
ÉÉ; <
}
ÑÑ 
catch
ÖÖ 
(
ÖÖ 
FormatException
ÖÖ & 
exceptNumberFormat
ÖÖ' 9
)
ÖÖ9 :
{
ÜÜ 
IO
áá 
.
áá 
Logger
áá 
.
áá 
Log
áá !
(
áá! "
NLog
áá" &
.
áá& '
LogLevel
áá' /
.
áá/ 0
Warn
áá0 4
,
áá4 5 
exceptNumberFormat
áá6 H
,
ááH I
$strááJ Ä
)ááÄ Å
;ááÅ Ç
}
àà 
}
ââ 
}
ää 	
goodB2G2Private
ãã 
=
ãã 
true
ãã 
;
ãã 
GoodB2G2Sink
åå 
(
åå 
data
åå 
,
åå 
req
åå 
,
åå  
resp
åå! %
)
åå% &
;
åå& '
}
çç 
private
èè 
void
èè 
GoodB2G2Sink
èè 
(
èè 
int
èè !
data
èè" &
,
èè' (
HttpRequest
èè) 4
req
èè5 8
,
èè8 9
HttpResponse
èè: F
resp
èèG K
)
èèK L
{
êê 
if
ëë 

(
ëë 
goodB2G2Private
ëë 
)
ëë 
{
íí 	
if
îî 
(
îî 
data
îî 
!=
îî 
$num
îî 
)
îî 
{
ïï 
IO
ññ 
.
ññ 
	WriteLine
ññ 
(
ññ 
$str
ññ #
+
ññ$ %
data
ññ& *
+
ññ+ ,
$str
ññ- 2
+
ññ3 4
(
ññ5 6
$num
ññ6 9
/
ññ: ;
data
ññ< @
)
ññ@ A
+
ññB C
$str
ññD H
)
ññH I
;
ññI J
}
óó 
else
òò 
{
ôô 
IO
öö 
.
öö 
	WriteLine
öö 
(
öö 
$str
öö D
)
ööD E
;
ööE F
}
õõ 
}
úú 	
}
ùù 
private
†† 
void
†† 
GoodG2B
†† 
(
†† 
HttpRequest
†† $
req
††% (
,
††( )
HttpResponse
††* 6
resp
††7 ;
)
††; <
{
°° 
int
¢¢ 
data
¢¢ 
;
¢¢ 
data
§§ 
=
§§ 
$num
§§ 
;
§§ 
goodG2BPrivate
•• 
=
•• 
true
•• 
;
•• 
GoodG2BSink
¶¶ 
(
¶¶ 
data
¶¶ 
,
¶¶ 
req
¶¶ 
,
¶¶ 
resp
¶¶  $
)
¶¶$ %
;
¶¶% &
}
ßß 
private
©© 
void
©© 
GoodG2BSink
©© 
(
©© 
int
©©  
data
©©! %
,
©©& '
HttpRequest
©©( 3
req
©©4 7
,
©©7 8
HttpResponse
©©9 E
resp
©©F J
)
©©J K
{
™™ 
if
´´ 

(
´´ 
goodG2BPrivate
´´ 
)
´´ 
{
¨¨ 	
IO
ØØ 
.
ØØ 
	WriteLine
ØØ 
(
ØØ 
$str
ØØ $
+
ØØ% &
data
ØØ' +
+
ØØ, -
$str
ØØ. 3
+
ØØ4 5
(
ØØ6 7
$num
ØØ7 :
/
ØØ; <
data
ØØ= A
)
ØØA B
+
ØØC D
$str
ØØE I
)
ØØI J
;
ØØJ K
}
∞∞ 	
}
±± 
}≥≥ 
}¥¥ À9
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_22a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_22a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{   
int!! 
data!! 
=!! 
$num!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;"" 
{$$ 	
if%% 
(%% 
req%% 
.%% 
QueryString%% 
[%%  
$str%%  $
]%%$ %
!=%%& (
null%%) -
)%%- .
{&& 
try'' 
{(( 
data)) 
=)) 
int)) 
.)) 
Parse)) $
())$ %
req))% (
.))( )
QueryString))) 4
[))4 5
$str))5 9
]))9 :
))): ;
;)); <
}** 
catch++ 
(++ 
FormatException++ &
exceptNumberFormat++' 9
)++9 :
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptNumberFormat--6 H
,--H I
$str	--J Ä
)
--Ä Å
;
--Å Ç
}.. 
}// 
}00 	
badPublicStatic11 
=11 
true11 
;11 A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_22b22 =
.22= >
BadSink22> E
(22E F
data22F J
,22K L
req22M P
,22P Q
resp22R V
)22V W
;22W X
}33 
public66 

static66 
bool66  
goodB2G1PublicStatic66 +
=66, -
false66. 3
;663 4
public77 

static77 
bool77  
goodB2G2PublicStatic77 +
=77, -
false77. 3
;773 4
public88 

static88 
bool88 
goodG2BPublicStatic88 *
=88+ ,
false88- 2
;882 3
public:: 

override:: 
void:: 
Good:: 
(:: 
HttpRequest:: )
req::* -
,::- .
HttpResponse::/ ;
resp::< @
)::@ A
{;; 
GoodB2G1<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
GoodB2G2== 
(== 
req== 
,== 
resp== 
)== 
;== 
GoodG2B>> 
(>> 
req>> 
,>> 
resp>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodB2G1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
=DD 
$numDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
ifHH 
(HH 
reqHH 
.HH 
QueryStringHH 
[HH  
$strHH  $
]HH$ %
!=HH& (
nullHH) -
)HH- .
{II 
tryJJ 
{KK 
dataLL 
=LL 
intLL 
.LL 
ParseLL $
(LL$ %
reqLL% (
.LL( )
QueryStringLL) 4
[LL4 5
$strLL5 9
]LL9 :
)LL: ;
;LL; <
}MM 
catchNN 
(NN 
FormatExceptionNN &
exceptNumberFormatNN' 9
)NN9 :
{OO 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP !
(PP! "
NLogPP" &
.PP& '
LogLevelPP' /
.PP/ 0
WarnPP0 4
,PP4 5
exceptNumberFormatPP6 H
,PPH I
$str	PPJ Ä
)
PPÄ Å
;
PPÅ Ç
}QQ 
}RR 
}SS 	 
goodB2G1PublicStaticTT 
=TT 
falseTT $
;TT$ %A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_22bUU =
.UU= >
GoodB2G1SinkUU> J
(UUJ K
dataUUK O
,UUP Q
reqUUR U
,UUU V
respUUW [
)UU[ \
;UU\ ]
}VV 
privateYY 
voidYY 
GoodB2G2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
=[[ 
$num[[ 
;[[ 
data\\ 
=\\ 
int\\ 
.\\ 
MinValue\\ 
;\\ 
{^^ 	
if__ 
(__ 
req__ 
.__ 
QueryString__ 
[__  
$str__  $
]__$ %
!=__& (
null__) -
)__- .
{`` 
tryaa 
{bb 
datacc 
=cc 
intcc 
.cc 
Parsecc $
(cc$ %
reqcc% (
.cc( )
QueryStringcc) 4
[cc4 5
$strcc5 9
]cc9 :
)cc: ;
;cc; <
}dd 
catchee 
(ee 
FormatExceptionee &
exceptNumberFormatee' 9
)ee9 :
{ff 
IOgg 
.gg 
Loggergg 
.gg 
Loggg !
(gg! "
NLoggg" &
.gg& '
LogLevelgg' /
.gg/ 0
Warngg0 4
,gg4 5
exceptNumberFormatgg6 H
,ggH I
$str	ggJ Ä
)
ggÄ Å
;
ggÅ Ç
}hh 
}ii 
}jj 	 
goodB2G2PublicStatickk 
=kk 
truekk #
;kk# $A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_22bll =
.ll= >
GoodB2G2Sinkll> J
(llJ K
datallK O
,llP Q
reqllR U
,llU V
respllW [
)ll[ \
;ll\ ]
}mm 
privatepp 
voidpp 
GoodG2Bpp 
(pp 
HttpRequestpp $
reqpp% (
,pp( )
HttpResponsepp* 6
resppp7 ;
)pp; <
{qq 
intrr 
datarr 
=rr 
$numrr 
;rr 
datatt 
=tt 
$numtt 
;tt 
goodG2BPublicStaticuu 
=uu 
trueuu "
;uu" #A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_22bvv =
.vv= >
GoodG2BSinkvv> I
(vvI J
datavvJ N
,vvO P
reqvvQ T
,vvT U
respvvV Z
)vvZ [
;vv[ \
}ww 
}yy 
}zz ô$
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_22b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_22b ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
if 

( A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_22a A
.A B
badPublicStaticB Q
)Q R
{ 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" $
+""% &
data""' +
+"", -
$str"". 3
+""4 5
(""6 7
$num""7 :
/""; <
data""= A
)""A B
+""C D
$str""E I
)""I J
;""J K
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
}** 
public// 

static// 
void// 
GoodB2G1Sink// #
(//# $
int//$ '
data//( ,
,//- .
HttpRequest/// :
req//; >
,//> ?
HttpResponse//@ L
resp//M Q
)//Q R
{00 
if11 

(11 A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_22a11 A
.11A B 
goodB2G1PublicStatic11B V
)11V W
{22 	
data55 
=55 
$num55 
;55 
}66 	
else77 
{88 	
if:: 
(:: 
data:: 
!=:: 
$num:: 
):: 
{;; 
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< #
+<<$ %
data<<& *
+<<+ ,
$str<<- 2
+<<3 4
(<<5 6
$num<<6 9
/<<: ;
data<<< @
)<<@ A
+<<B C
$str<<D H
)<<H I
;<<I J
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ D
)@@D E
;@@E F
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2G2SinkFF #
(FF# $
intFF$ '
dataFF( ,
,FF- .
HttpRequestFF/ :
reqFF; >
,FF> ?
HttpResponseFF@ L
respFFM Q
)FFQ R
{GG 
ifHH 

(HH A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_22aHH A
.HHA B 
goodB2G2PublicStaticHHB V
)HHV W
{II 	
ifKK 
(KK 
dataKK 
!=KK 
$numKK 
)KK 
{LL 
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM #
+MM$ %
dataMM& *
+MM+ ,
$strMM- 2
+MM3 4
(MM5 6
$numMM6 9
/MM: ;
dataMM< @
)MM@ A
+MMB C
$strMMD H
)MMH I
;MMI J
}NN 
elseOO 
{PP 
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ D
)QQD E
;QQE F
}RR 
}SS 	
elseTT 
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
}ZZ 
public]] 

static]] 
void]] 
GoodG2BSink]] "
(]]" #
int]]# &
data]]' +
,]], -
HttpRequest]]. 9
req]]: =
,]]= >
HttpResponse]]? K
resp]]L P
)]]P Q
{^^ 
if__ 

(__ A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_22a__ A
.__A B
goodG2BPublicStatic__B U
)__U V
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc $
+cc% &
datacc' +
+cc, -
$strcc. 3
+cc4 5
(cc6 7
$numcc7 :
/cc; <
datacc= A
)ccA B
+ccC D
$strccE I
)ccI J
;ccJ K
}dd 	
elseee 
{ff 	
dataii 
=ii 
$numii 
;ii 
}jj 	
}kk 
}mm 
}nn .
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_31.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_31 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
dataCopy 
; 
{   	
int!! 
data!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
dataCopy11 
=11 
data11 
;11 
}22 	
{33 	
int44 
data44 
=44 
dataCopy44 
;44  
IO77 
.77 
	WriteLine77 
(77 
$str77 $
+77% &
data77' +
+77, -
$str77. 3
+774 5
(776 7
$num777 :
/77; <
data77= A
)77A B
+77C D
$str77E I
)77I J
;77J K
}88 	
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
HttpRequest<< )
req<<* -
,<<- .
HttpResponse<</ ;
resp<<< @
)<<@ A
{== 
GoodG2B>> 
(>> 
req>> 
,>> 
resp>> 
)>> 
;>> 
GoodB2G?? 
(?? 
req?? 
,?? 
resp?? 
)?? 
;?? 
}@@ 
privateCC 
voidCC 
GoodG2BCC 
(CC 
HttpRequestCC $
reqCC% (
,CC( )
HttpResponseCC* 6
respCC7 ;
)CC; <
{DD 
intEE 
dataCopyEE 
;EE 
{FF 	
intGG 
dataGG 
;GG 
dataII 
=II 
$numII 
;II 
dataCopyJJ 
=JJ 
dataJJ 
;JJ 
}KK 	
{LL 	
intMM 
dataMM 
=MM 
dataCopyMM 
;MM  
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP $
+PP% &
dataPP' +
+PP, -
$strPP. 3
+PP4 5
(PP6 7
$numPP7 :
/PP; <
dataPP= A
)PPA B
+PPC D
$strPPE I
)PPI J
;PPJ K
}QQ 	
}RR 
privateUU 
voidUU 
GoodB2GUU 
(UU 
HttpRequestUU $
reqUU% (
,UU( )
HttpResponseUU* 6
respUU7 ;
)UU; <
{VV 
intWW 
dataCopyWW 
;WW 
{XX 	
intYY 
dataYY 
;YY 
dataZZ 
=ZZ 
intZZ 
.ZZ 
MinValueZZ 
;ZZ  
{\\ 
if]] 
(]] 
req]] 
.]] 
QueryString]] #
[]]# $
$str]]$ (
]]]( )
!=]]* ,
null]]- 1
)]]1 2
{^^ 
try__ 
{`` 
dataaa 
=aa 
intaa "
.aa" #
Parseaa# (
(aa( )
reqaa) ,
.aa, -
QueryStringaa- 8
[aa8 9
$straa9 =
]aa= >
)aa> ?
;aa? @
}bb 
catchcc 
(cc 
FormatExceptioncc *
exceptNumberFormatcc+ =
)cc= >
{dd 
IOee 
.ee 
Loggeree !
.ee! "
Logee" %
(ee% &
NLogee& *
.ee* +
LogLevelee+ 3
.ee3 4
Warnee4 8
,ee8 9
exceptNumberFormatee: L
,eeL M
$str	eeN Ñ
)
eeÑ Ö
;
eeÖ Ü
}ff 
}gg 
}hh 
dataCopyii 
=ii 
dataii 
;ii 
}jj 	
{kk 	
intll 
datall 
=ll 
dataCopyll 
;ll  
ifnn 
(nn 
datann 
!=nn 
$numnn 
)nn 
{oo 
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp #
+pp$ %
datapp& *
+pp+ ,
$strpp- 2
+pp3 4
(pp5 6
$numpp6 9
/pp: ;
datapp< @
)pp@ A
+ppB C
$strppD H
)ppH I
;ppI J
}qq 
elserr 
{ss 
IOtt 
.tt 
	WriteLinett 
(tt 
$strtt D
)ttD E
;ttE F
}uu 
}vv 	
}ww 
}yy 
}zz £3
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_41.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_41 :
:; <
AbstractTestCaseWeb= P
{ 
private 
static 
void 
BadSink 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
HttpRequest$$ (
req$$) ,
,$$, -
HttpResponse$$. :
resp$$; ?
)$$? @
{%% 
int&& 
data&& 
;&& 
data'' 
='' 
int'' 
.'' 
MinValue'' 
;'' 
{)) 	
if** 
(** 
req** 
.** 
QueryString** 
[**  
$str**  $
]**$ %
!=**& (
null**) -
)**- .
{++ 
try,, 
{-- 
data.. 
=.. 
int.. 
... 
Parse.. $
(..$ %
req..% (
...( )
QueryString..) 4
[..4 5
$str..5 9
]..9 :
)..: ;
;..; <
}// 
catch00 
(00 
FormatException00 &
exceptNumberFormat00' 9
)009 :
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptNumberFormat226 H
,22H I
$str	22J Ä
)
22Ä Å
;
22Å Ç
}33 
}44 
}55 	
BadSink66 
(66 
data66 
,66 
req66 
,66 
resp66  
)66! "
;66" #
}77 
public:: 

override:: 
void:: 
Good:: 
(:: 
HttpRequest:: )
req::* -
,::- .
HttpResponse::/ ;
resp::< @
)::@ A
{;; 
GoodG2B<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
GoodB2G== 
(== 
req== 
,== 
resp== 
)== 
;== 
}>> 
private@@ 
static@@ 
void@@ 
GoodG2BSink@@ #
(@@# $
int@@$ '
data@@( ,
,@@- .
HttpRequest@@/ :
req@@; >
,@@> ?
HttpResponse@@@ L
resp@@M Q
)@@Q R
{AA 
IODD 

.DD
 
	WriteLineDD 
(DD 
$strDD  
+DD! "
dataDD# '
+DD( )
$strDD* /
+DD0 1
(DD2 3
$numDD3 6
/DD7 8
dataDD9 =
)DD= >
+DD? @
$strDDA E
)DDE F
;DDF G
}EE 
privateHH 
staticHH 
voidHH 
GoodG2BHH 
(HH  
HttpRequestHH  +
reqHH, /
,HH/ 0
HttpResponseHH1 =
respHH> B
)HHB C
{II 
intJJ 
dataJJ 
;JJ 
dataLL 
=LL 
$numLL 
;LL 
GoodG2BSinkMM 
(MM 
dataMM 
,MM 
reqMM 
,MM 
respMM  $
)MM% &
;MM& '
}NN 
privatePP 
staticPP 
voidPP 
GoodB2GSinkPP #
(PP# $
intPP$ '
dataPP( ,
,PP- .
HttpRequestPP/ :
reqPP; >
,PP> ?
HttpResponsePP@ L
respPPM Q
)PPQ R
{QQ 
ifSS 

(SS 
dataSS 
!=SS 
$numSS 
)SS 
{TT 	
IOUU 
.UU 
	WriteLineUU 
(UU 
$strUU 
+UU  !
dataUU" &
+UU' (
$strUU) .
+UU/ 0
(UU1 2
$numUU2 5
/UU6 7
dataUU8 <
)UU< =
+UU> ?
$strUU@ D
)UUD E
;UUE F
}VV 	
elseWW 
{XX 	
IOYY 
.YY 
	WriteLineYY 
(YY 
$strYY @
)YY@ A
;YYA B
}ZZ 	
}[[ 
private^^ 
static^^ 
void^^ 
GoodB2G^^ 
(^^  
HttpRequest^^  +
req^^, /
,^^/ 0
HttpResponse^^1 =
resp^^> B
)^^B C
{__ 
int`` 
data`` 
;`` 
dataaa 
=aa 
intaa 
.aa 
MinValueaa 
;aa 
{cc 	
ifdd 
(dd 
reqdd 
.dd 
QueryStringdd 
[dd  
$strdd  $
]dd$ %
!=dd& (
nulldd) -
)dd- .
{ee 
tryff 
{gg 
datahh 
=hh 
inthh 
.hh 
Parsehh $
(hh$ %
reqhh% (
.hh( )
QueryStringhh) 4
[hh4 5
$strhh5 9
]hh9 :
)hh: ;
;hh; <
}ii 
catchjj 
(jj 
FormatExceptionjj &
exceptNumberFormatjj' 9
)jj9 :
{kk 
IOll 
.ll 
Loggerll 
.ll 
Logll !
(ll! "
NLogll" &
.ll& '
LogLevelll' /
.ll/ 0
Warnll0 4
,ll4 5
exceptNumberFormatll6 H
,llH I
$str	llJ Ä
)
llÄ Å
;
llÅ Ç
}mm 
}nn 
}oo 	
GoodB2GSinkpp 
(pp 
datapp 
,pp 
reqpp 
,pp 
resppp  $
)pp% &
;pp& '
}qq 
}ss 
}tt Ë3
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_42.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_42 :
:; <
AbstractTestCaseWeb= P
{ 
private 
static 
int 
	BadSource  
(  !
HttpRequest! ,
req- 0
,0 1
HttpResponse2 >
resp? C
)C D
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
try%% 
{&& 
data'' 
='' 
int'' 
.'' 
Parse'' $
(''$ %
req''% (
.''( )
QueryString'') 4
[''4 5
$str''5 9
]''9 :
)'': ;
;''; <
}(( 
catch)) 
()) 
FormatException)) &
exceptNumberFormat))' 9
)))9 :
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ !
(++! "
NLog++" &
.++& '
LogLevel++' /
.++/ 0
Warn++0 4
,++4 5
exceptNumberFormat++6 H
,++H I
$str	++J Ä
)
++Ä Å
;
++Å Ç
},, 
}-- 
}.. 	
return// 
data// 
;// 
}00 
public22 

override22 
void22 
Bad22 
(22 
HttpRequest22 (
req22) ,
,22, -
HttpResponse22. :
resp22; ?
)22? @
{33 
int44 
data44 
=44 
	BadSource44 
(44 
req44  
,44  !
resp44" &
)44& '
;44' (
IO77 

.77
 
	WriteLine77 
(77 
$str77  
+77! "
data77# '
+77( )
$str77* /
+770 1
(772 3
$num773 6
/777 8
data779 =
)77= >
+77? @
$str77A E
)77E F
;77F G
}88 
private<< 
static<< 
int<< 
GoodG2BSource<< $
(<<$ %
HttpRequest<<% 0
req<<1 4
,<<4 5
HttpResponse<<6 B
resp<<C G
)<<G H
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
$num@@ 
;@@ 
returnAA 
dataAA 
;AA 
}BB 
privateDD 
staticDD 
voidDD 
GoodG2BDD 
(DD  
HttpRequestDD  +
reqDD, /
,DD/ 0
HttpResponseDD1 =
respDD> B
)DDB C
{EE 
intFF 
dataFF 
=FF 
GoodG2BSourceFF  
(FF  !
reqFF! $
,FF$ %
respFF& *
)FF* +
;FF+ ,
IOII 

.II
 
	WriteLineII 
(II 
$strII  
+II! "
dataII# '
+II( )
$strII* /
+II0 1
(II2 3
$numII3 6
/II7 8
dataII9 =
)II= >
+II? @
$strIIA E
)IIE F
;IIF G
}JJ 
privateMM 
staticMM 
intMM 
GoodB2GSourceMM $
(MM$ %
HttpRequestMM% 0
reqMM1 4
,MM4 5
HttpResponseMM6 B
respMMC G
)MMG H
{NN 
intOO 
dataOO 
;OO 
dataPP 
=PP 
intPP 
.PP 
MinValuePP 
;PP 
{RR 	
ifSS 
(SS 
reqSS 
.SS 
QueryStringSS 
[SS  
$strSS  $
]SS$ %
!=SS& (
nullSS) -
)SS- .
{TT 
tryUU 
{VV 
dataWW 
=WW 
intWW 
.WW 
ParseWW $
(WW$ %
reqWW% (
.WW( )
QueryStringWW) 4
[WW4 5
$strWW5 9
]WW9 :
)WW: ;
;WW; <
}XX 
catchYY 
(YY 
FormatExceptionYY &
exceptNumberFormatYY' 9
)YY9 :
{ZZ 
IO[[ 
.[[ 
Logger[[ 
.[[ 
Log[[ !
([[! "
NLog[[" &
.[[& '
LogLevel[[' /
.[[/ 0
Warn[[0 4
,[[4 5
exceptNumberFormat[[6 H
,[[H I
$str	[[J Ä
)
[[Ä Å
;
[[Å Ç
}\\ 
}]] 
}^^ 	
return__ 
data__ 
;__ 
}`` 
privatebb 
staticbb 
voidbb 
GoodB2Gbb 
(bb  
HttpRequestbb  +
reqbb, /
,bb/ 0
HttpResponsebb1 =
respbb> B
)bbB C
{cc 
intdd 
datadd 
=dd 
GoodB2GSourcedd  
(dd  !
reqdd! $
,dd$ %
respdd& *
)dd* +
;dd+ ,
ifff 

(ff 
dataff 
!=ff 
$numff 
)ff 
{gg 	
IOhh 
.hh 
	WriteLinehh 
(hh 
$strhh 
+hh  !
datahh" &
+hh' (
$strhh) .
+hh/ 0
(hh1 2
$numhh2 5
/hh6 7
datahh8 <
)hh< =
+hh> ?
$strhh@ D
)hhD E
;hhE F
}ii 	
elsejj 
{kk 	
IOll 
.ll 
	WriteLinell 
(ll 
$strll @
)ll@ A
;llA B
}mm 	
}nn 
publicpp 

overridepp 
voidpp 
Goodpp 
(pp 
HttpRequestpp )
reqpp* -
,pp- .
HttpResponsepp/ ;
resppp< @
)pp@ A
{qq 
GoodG2Brr 
(rr 
reqrr 
,rr 
resprr 
)rr 
;rr 
GoodB2Gss 
(ss 
reqss 
,ss 
respss 
)ss 
;ss 
}tt 
}vv 
}ww ç6
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_45.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_divide_45 :
:; <
AbstractTestCaseWeb= P
{ 
private 
int 
dataBad 
; 
private 
int 
dataGoodG2B 
; 
private 
int 
dataGoodB2G 
; 
private!! 
void!! 
BadSink!! 
(!! 
HttpRequest!! $
req!!% (
,!!( )
HttpResponse!!* 6
resp!!7 ;
)!!; <
{"" 
int## 
data## 
=## 
dataBad## 
;## 
IO&& 

.&&
 
	WriteLine&& 
(&& 
$str&&  
+&&! "
data&&# '
+&&( )
$str&&* /
+&&0 1
(&&2 3
$num&&3 6
/&&7 8
data&&9 =
)&&= >
+&&? @
$str&&A E
)&&E F
;&&F G
}'' 
public)) 

override)) 
void)) 
Bad)) 
()) 
HttpRequest)) (
req))) ,
,)), -
HttpResponse)). :
resp)); ?
)))? @
{** 
int++ 
data++ 
;++ 
data,, 
=,, 
int,, 
.,, 
MinValue,, 
;,, 
{.. 	
if// 
(// 
req// 
.// 
QueryString// 
[//  
$str//  $
]//$ %
!=//& (
null//) -
)//- .
{00 
try11 
{22 
data33 
=33 
int33 
.33 
Parse33 $
(33$ %
req33% (
.33( )
QueryString33) 4
[334 5
$str335 9
]339 :
)33: ;
;33; <
}44 
catch55 
(55 
FormatException55 &
exceptNumberFormat55' 9
)559 :
{66 
IO77 
.77 
Logger77 
.77 
Log77 !
(77! "
NLog77" &
.77& '
LogLevel77' /
.77/ 0
Warn770 4
,774 5
exceptNumberFormat776 H
,77H I
$str	77J Ä
)
77Ä Å
;
77Å Ç
}88 
}99 
}:: 	
dataBad;; 
=;; 
data;; 
;;; 
BadSink<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
HttpRequest@@ )
req@@* -
,@@- .
HttpResponse@@/ ;
resp@@< @
)@@@ A
{AA 
GoodG2BBB 
(BB 
reqBB 
,BB 
respBB 
)BB 
;BB 
GoodB2GCC 
(CC 
reqCC 
,CC 
respCC 
)CC 
;CC 
}DD 
privateFF 
voidFF 
GoodG2BSinkFF 
(FF 
HttpRequestFF (
reqFF) ,
,FF, -
HttpResponseFF. :
respFF; ?
)FF? @
{GG 
intHH 
dataHH 
=HH 
dataGoodG2BHH 
;HH 
IOKK 

.KK
 
	WriteLineKK 
(KK 
$strKK  
+KK! "
dataKK# '
+KK( )
$strKK* /
+KK0 1
(KK2 3
$numKK3 6
/KK7 8
dataKK9 =
)KK= >
+KK? @
$strKKA E
)KKE F
;KKF G
}LL 
privateOO 
voidOO 
GoodG2BOO 
(OO 
HttpRequestOO $
reqOO% (
,OO( )
HttpResponseOO* 6
respOO7 ;
)OO; <
{PP 
intQQ 
dataQQ 
;QQ 
dataSS 
=SS 
$numSS 
;SS 
dataGoodG2BTT 
=TT 
dataTT 
;TT 
GoodG2BSinkUU 
(UU 
reqUU 
,UU 
respUU 
)UU 
;UU 
}VV 
privateXX 
voidXX 
GoodB2GSinkXX 
(XX 
HttpRequestXX (
reqXX) ,
,XX, -
HttpResponseXX. :
respXX; ?
)XX? @
{YY 
intZZ 
dataZZ 
=ZZ 
dataGoodB2GZZ 
;ZZ 
if\\ 

(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ 
+^^  !
data^^" &
+^^' (
$str^^) .
+^^/ 0
(^^1 2
$num^^2 5
/^^6 7
data^^8 <
)^^< =
+^^> ?
$str^^@ D
)^^D E
;^^E F
}__ 	
else`` 
{aa 	
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb @
)bb@ A
;bbA B
}cc 	
}dd 
privategg 
voidgg 
GoodB2Ggg 
(gg 
HttpRequestgg $
reqgg% (
,gg( )
HttpResponsegg* 6
respgg7 ;
)gg; <
{hh 
intii 
dataii 
;ii 
datajj 
=jj 
intjj 
.jj 
MinValuejj 
;jj 
{ll 	
ifmm 
(mm 
reqmm 
.mm 
QueryStringmm 
[mm  
$strmm  $
]mm$ %
!=mm& (
nullmm) -
)mm- .
{nn 
tryoo 
{pp 
dataqq 
=qq 
intqq 
.qq 
Parseqq $
(qq$ %
reqqq% (
.qq( )
QueryStringqq) 4
[qq4 5
$strqq5 9
]qq9 :
)qq: ;
;qq; <
}rr 
catchss 
(ss 
FormatExceptionss &
exceptNumberFormatss' 9
)ss9 :
{tt 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu !
(uu! "
NLoguu" &
.uu& '
LogLeveluu' /
.uu/ 0
Warnuu0 4
,uu4 5
exceptNumberFormatuu6 H
,uuH I
$str	uuJ Ä
)
uuÄ Å
;
uuÅ Ç
}vv 
}ww 
}xx 	
dataGoodB2Gyy 
=yy 
datayy 
;yy 
GoodB2GSinkzz 
(zz 
reqzz 
,zz 
respzz 
)zz 
;zz 
}{{ 
}}} 
}~~ µ$
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_51a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_51a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_51b.. =
...= >
BadSink..> E
(..E F
data..F J
,..K L
req..M P
,..P Q
resp..R V
)..W X
;..X Y
}// 
public22 

override22 
void22 
Good22 
(22 
HttpRequest22 )
req22* -
,22- .
HttpResponse22/ ;
resp22< @
)22@ A
{33 
GoodG2B44 
(44 
req44 
,44 
resp44 
)44 
;44 
GoodB2G55 
(55 
req55 
,55 
resp55 
)55 
;55 
}66 
private99 
void99 
GoodG2B99 
(99 
HttpRequest99 $
req99% (
,99( )
HttpResponse99* 6
resp997 ;
)99; <
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_51b>> =
.>>= >
GoodG2BSink>>> I
(>>I J
data>>J N
,>>O P
req>>Q T
,>>T U
resp>>V Z
)>>[ \
;>>\ ]
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
HttpRequestBB $
reqBB% (
,BB( )
HttpResponseBB* 6
respBB7 ;
)BB; <
{CC 
intDD 
dataDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
ifHH 
(HH 
reqHH 
.HH 
QueryStringHH 
[HH  
$strHH  $
]HH$ %
!=HH& (
nullHH) -
)HH- .
{II 
tryJJ 
{KK 
dataLL 
=LL 
intLL 
.LL 
ParseLL $
(LL$ %
reqLL% (
.LL( )
QueryStringLL) 4
[LL4 5
$strLL5 9
]LL9 :
)LL: ;
;LL; <
}MM 
catchNN 
(NN 
FormatExceptionNN &
exceptNumberFormatNN' 9
)NN9 :
{OO 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP !
(PP! "
NLogPP" &
.PP& '
LogLevelPP' /
.PP/ 0
WarnPP0 4
,PP4 5
exceptNumberFormatPP6 H
,PPH I
$str	PPJ Ä
)
PPÄ Å
;
PPÅ Ç
}QQ 
}RR 
}SS 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_51bTT =
.TT= >
GoodB2GSinkTT> I
(TTI J
dataTTJ N
,TTO P
reqTTQ T
,TTT U
respTTV Z
)TT[ \
;TT\ ]
}UU 
}WW 
}XX “
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_51b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_51b ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< µ$
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_52a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_52a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_52b.. =
...= >
BadSink..> E
(..E F
data..F J
,..K L
req..M P
,..P Q
resp..R V
)..V W
;..W X
}// 
public22 

override22 
void22 
Good22 
(22 
HttpRequest22 )
req22* -
,22- .
HttpResponse22/ ;
resp22< @
)22@ A
{33 
GoodG2B44 
(44 
req44 
,44 
resp44 
)44 
;44 
GoodB2G55 
(55 
req55 
,55 
resp55 
)55 
;55 
}66 
private99 
void99 
GoodG2B99 
(99 
HttpRequest99 $
req99% (
,99( )
HttpResponse99* 6
resp997 ;
)99; <
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_52b>> =
.>>= >
GoodG2BSink>>> I
(>>I J
data>>J N
,>>O P
req>>Q T
,>>T U
resp>>V Z
)>>Z [
;>>[ \
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
HttpRequestBB $
reqBB% (
,BB( )
HttpResponseBB* 6
respBB7 ;
)BB; <
{CC 
intDD 
dataDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
ifHH 
(HH 
reqHH 
.HH 
QueryStringHH 
[HH  
$strHH  $
]HH$ %
!=HH& (
nullHH) -
)HH- .
{II 
tryJJ 
{KK 
dataLL 
=LL 
intLL 
.LL 
ParseLL $
(LL$ %
reqLL% (
.LL( )
QueryStringLL) 4
[LL4 5
$strLL5 9
]LL9 :
)LL: ;
;LL; <
}MM 
catchNN 
(NN 
FormatExceptionNN &
exceptNumberFormatNN' 9
)NN9 :
{OO 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP !
(PP! "
NLogPP" &
.PP& '
LogLevelPP' /
.PP/ 0
WarnPP0 4
,PP4 5
exceptNumberFormatPP6 H
,PPH I
$str	PPJ Ä
)
PPÄ Å
;
PPÅ Ç
}QQ 
}RR 
}SS 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_52bTT =
.TT= >
GoodB2GSinkTT> I
(TTI J
dataTTJ N
,TTO P
reqTTQ T
,TTT U
respTTV Z
)TTZ [
;TT[ \
}UU 
}WW 
}XX ¬
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_52b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_52b ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_52c =
.= >
BadSink> E
(E F
dataF J
,K L
reqM P
,P Q
respR V
)V W
;W X
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_52c&& =
.&&= >
GoodG2BSink&&> I
(&&I J
data&&J N
,&&O P
req&&Q T
,&&T U
resp&&V Z
)&&Z [
;&&[ \
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_52c,, =
.,,= >
GoodB2GSink,,> I
(,,I J
data,,J N
,,,O P
req,,Q T
,,,T U
resp,,V Z
),,Z [
;,,[ \
}-- 
}// 
}00 “
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_52c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_52c ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< µ$
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_53a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_53a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_53b.. =
...= >
BadSink..> E
(..E F
data..F J
,..K L
req..M P
,..P Q
resp..R V
)..V W
;..W X
}// 
public22 

override22 
void22 
Good22 
(22 
HttpRequest22 )
req22* -
,22- .
HttpResponse22/ ;
resp22< @
)22@ A
{33 
GoodG2B44 
(44 
req44 
,44 
resp44 
)44 
;44 
GoodB2G55 
(55 
req55 
,55 
resp55 
)55 
;55 
}66 
private99 
void99 
GoodG2B99 
(99 
HttpRequest99 $
req99% (
,99( )
HttpResponse99* 6
resp997 ;
)99; <
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_53b>> =
.>>= >
GoodG2BSink>>> I
(>>I J
data>>J N
,>>O P
req>>Q T
,>>T U
resp>>V Z
)>>Z [
;>>[ \
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
HttpRequestBB $
reqBB% (
,BB( )
HttpResponseBB* 6
respBB7 ;
)BB; <
{CC 
intDD 
dataDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
ifHH 
(HH 
reqHH 
.HH 
QueryStringHH 
[HH  
$strHH  $
]HH$ %
!=HH& (
nullHH) -
)HH- .
{II 
tryJJ 
{KK 
dataLL 
=LL 
intLL 
.LL 
ParseLL $
(LL$ %
reqLL% (
.LL( )
QueryStringLL) 4
[LL4 5
$strLL5 9
]LL9 :
)LL: ;
;LL; <
}MM 
catchNN 
(NN 
FormatExceptionNN &
exceptNumberFormatNN' 9
)NN9 :
{OO 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP !
(PP! "
NLogPP" &
.PP& '
LogLevelPP' /
.PP/ 0
WarnPP0 4
,PP4 5
exceptNumberFormatPP6 H
,PPH I
$str	PPJ Ä
)
PPÄ Å
;
PPÅ Ç
}QQ 
}RR 
}SS 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_53bTT =
.TT= >
GoodB2GSinkTT> I
(TTI J
dataTTJ N
,TTO P
reqTTQ T
,TTT U
respTTV Z
)TTZ [
;TT[ \
}UU 
}WW 
}XX ¬
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_53b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_53b ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_53c =
.= >
BadSink> E
(E F
dataF J
,K L
reqM P
,P Q
respR V
)V W
;W X
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_53c&& =
.&&= >
GoodG2BSink&&> I
(&&I J
data&&J N
,&&O P
req&&Q T
,&&T U
resp&&V Z
)&&Z [
;&&[ \
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_53c,, =
.,,= >
GoodB2GSink,,> I
(,,I J
data,,J N
,,,O P
req,,Q T
,,,T U
resp,,V Z
),,Z [
;,,[ \
}-- 
}// 
}00 ¬
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_53c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_53c ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_53d =
.= >
BadSink> E
(E F
dataF J
,K L
reqM P
,P Q
respR V
)V W
;W X
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_53d&& =
.&&= >
GoodG2BSink&&> I
(&&I J
data&&J N
,&&O P
req&&Q T
,&&T U
resp&&V Z
)&&Z [
;&&[ \
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_53d,, =
.,,= >
GoodB2GSink,,> I
(,,I J
data,,J N
,,,O P
req,,Q T
,,,T U
resp,,V Z
),,Z [
;,,[ \
}-- 
}// 
}00 “
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_53d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_53d ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< µ$
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_54a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54b.. =
...= >
BadSink..> E
(..E F
data..F J
,..K L
req..M P
,..P Q
resp..R V
)..V W
;..W X
}// 
public22 

override22 
void22 
Good22 
(22 
HttpRequest22 )
req22* -
,22- .
HttpResponse22/ ;
resp22< @
)22@ A
{33 
GoodG2B44 
(44 
req44 
,44 
resp44 
)44 
;44 
GoodB2G55 
(55 
req55 
,55 
resp55 
)55 
;55 
}66 
private99 
void99 
GoodG2B99 
(99 
HttpRequest99 $
req99% (
,99( )
HttpResponse99* 6
resp997 ;
)99; <
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54b>> =
.>>= >
GoodG2BSink>>> I
(>>I J
data>>J N
,>>O P
req>>Q T
,>>T U
resp>>V Z
)>>Z [
;>>[ \
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
HttpRequestBB $
reqBB% (
,BB( )
HttpResponseBB* 6
respBB7 ;
)BB; <
{CC 
intDD 
dataDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
ifHH 
(HH 
reqHH 
.HH 
QueryStringHH 
[HH  
$strHH  $
]HH$ %
!=HH& (
nullHH) -
)HH- .
{II 
tryJJ 
{KK 
dataLL 
=LL 
intLL 
.LL 
ParseLL $
(LL$ %
reqLL% (
.LL( )
QueryStringLL) 4
[LL4 5
$strLL5 9
]LL9 :
)LL: ;
;LL; <
}MM 
catchNN 
(NN 
FormatExceptionNN &
exceptNumberFormatNN' 9
)NN9 :
{OO 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP !
(PP! "
NLogPP" &
.PP& '
LogLevelPP' /
.PP/ 0
WarnPP0 4
,PP4 5
exceptNumberFormatPP6 H
,PPH I
$str	PPJ Ä
)
PPÄ Å
;
PPÅ Ç
}QQ 
}RR 
}SS 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54bTT =
.TT= >
GoodB2GSinkTT> I
(TTI J
dataTTJ N
,TTO P
reqTTQ T
,TTT U
respTTV Z
)TTZ [
;TT[ \
}UU 
}WW 
}XX ¬
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_54b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54b ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54c =
.= >
BadSink> E
(E F
dataF J
,K L
reqM P
,P Q
respR V
)V W
;W X
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54c&& =
.&&= >
GoodG2BSink&&> I
(&&I J
data&&J N
,&&O P
req&&Q T
,&&T U
resp&&V Z
)&&Z [
;&&[ \
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54c,, =
.,,= >
GoodB2GSink,,> I
(,,I J
data,,J N
,,,O P
req,,Q T
,,,T U
resp,,V Z
),,Z [
;,,[ \
}-- 
}// 
}00 ¬
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_54c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54c ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54d =
.= >
BadSink> E
(E F
dataF J
,K L
reqM P
,P Q
respR V
)V W
;W X
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54d&& =
.&&= >
GoodG2BSink&&> I
(&&I J
data&&J N
,&&O P
req&&Q T
,&&T U
resp&&V Z
)&&Z [
;&&[ \
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54d,, =
.,,= >
GoodB2GSink,,> I
(,,I J
data,,J N
,,,O P
req,,Q T
,,,T U
resp,,V Z
),,Z [
;,,[ \
}-- 
}// 
}00 ¬
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_54d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54d ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54e =
.= >
BadSink> E
(E F
dataF J
,K L
reqM P
,P Q
respR V
)V W
;W X
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54e&& =
.&&= >
GoodG2BSink&&> I
(&&I J
data&&J N
,&&O P
req&&Q T
,&&T U
resp&&V Z
)&&Z [
;&&[ \
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54e,, =
.,,= >
GoodB2GSink,,> I
(,,I J
data,,J N
,,,O P
req,,Q T
,,,T U
resp,,V Z
),,Z [
;,,[ \
}-- 
}// 
}00 “
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_54e.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_54e ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< ±
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_61a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_61a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
= A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_61b H
.H I
	BadSourceI R
(R S
reqS V
,V W
respX \
)\ ]
;] ^
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
HttpRequest%% )
req%%* -
,%%- .
HttpResponse%%/ ;
resp%%< @
)%%@ A
{&& 
GoodG2B'' 
('' 
req'' 
,'' 
resp'' 
)'' 
;'' 
GoodB2G(( 
((( 
req(( 
,(( 
resp(( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
HttpRequest,,  +
req,,, /
,,,/ 0
HttpResponse,,1 =
resp,,> B
),,B C
{-- 
int.. 
data.. 
=.. A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_61b.. H
...H I
GoodG2BSource..I V
(..V W
req..W Z
,..Z [
resp..\ `
)..` a
;..a b
IO11 

.11
 
	WriteLine11 
(11 
$str11  
+11! "
data11# '
+11( )
$str11* /
+110 1
(112 3
$num113 6
/117 8
data119 =
)11= >
+11? @
$str11A E
)11E F
;11F G
}22 
private55 
static55 
void55 
GoodB2G55 
(55  
HttpRequest55  +
req55, /
,55/ 0
HttpResponse551 =
resp55> B
)55B C
{66 
int77 
data77 
=77 A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_61b77 H
.77H I
GoodB2GSource77I V
(77V W
req77W Z
,77Z [
resp77\ `
)77` a
;77a b
if99 

(99 
data99 
!=99 
$num99 
)99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; 
+;;  !
data;;" &
+;;' (
$str;;) .
+;;/ 0
(;;1 2
$num;;2 5
/;;6 7
data;;8 <
);;< =
+;;> ?
$str;;@ D
);;D E
;;;E F
}<< 	
else== 
{>> 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? @
)??@ A
;??A B
}@@ 	
}AA 
}CC 
}DD √
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_61b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_61b ;
{ 
public 

static 
int 
	BadSource 
(  
HttpRequest  +
req, /
,/ 0
HttpResponse1 =
resp> B
)B C
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	
return.. 
data.. 
;.. 
}// 
public44 

static44 
int44 
GoodG2BSource44 #
(44# $
HttpRequest44$ /
req440 3
,443 4
HttpResponse445 A
resp44B F
)44F G
{55 
int66 
data66 
;66 
data88 
=88 
$num88 
;88 
return99 
data99 
;99 
}:: 
public== 

static== 
int== 
GoodB2GSource== #
(==# $
HttpRequest==$ /
req==0 3
,==3 4
HttpResponse==5 A
resp==B F
)==F G
{>> 
int?? 
data?? 
;?? 
data@@ 
=@@ 
int@@ 
.@@ 
MinValue@@ 
;@@ 
{BB 	
ifCC 
(CC 
reqCC 
.CC 
QueryStringCC 
[CC  
$strCC  $
]CC$ %
!=CC& (
nullCC) -
)CC- .
{DD 
tryEE 
{FF 
dataGG 
=GG 
intGG 
.GG 
ParseGG $
(GG$ %
reqGG% (
.GG( )
QueryStringGG) 4
[GG4 5
$strGG5 9
]GG9 :
)GG: ;
;GG; <
}HH 
catchII 
(II 
FormatExceptionII &
exceptNumberFormatII' 9
)II9 :
{JJ 
IOKK 
.KK 
LoggerKK 
.KK 
LogKK !
(KK! "
NLogKK" &
.KK& '
LogLevelKK' /
.KK/ 0
WarnKK0 4
,KK4 5
exceptNumberFormatKK6 H
,KKH I
$str	KKJ Ä
)
KKÄ Å
;
KKÅ Ç
}LL 
}MM 
}NN 	
returnOO 
dataOO 
;OO 
}PP 
}RR 
}SS Û+
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_66a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_66a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	
int.. 
[.. 
].. 
	dataArray.. 
=.. 
new.. 
int.. !
[..! "
$num.." #
]..# $
;..$ %
	dataArray// 
[// 
$num// 
]// 
=// 
data// 
;// A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_66b00 =
.00= >
BadSink00> E
(00E F
	dataArray00F O
,00P Q
req00R U
,00U V
resp00W [
)00\ ]
;00] ^
}11 
public44 

override44 
void44 
Good44 
(44 
HttpRequest44 )
req44* -
,44- .
HttpResponse44/ ;
resp44< @
)44@ A
{55 
GoodG2B66 
(66 
req66 
,66 
resp66 
)66 
;66 
GoodB2G77 
(77 
req77 
,77 
resp77 
)77 
;77 
}88 
private;; 
static;; 
void;; 
GoodG2B;; 
(;;  
HttpRequest;;  +
req;;, /
,;;/ 0
HttpResponse;;1 =
resp;;> B
);;B C
{<< 
int== 
data== 
;== 
data?? 
=?? 
$num?? 
;?? 
int@@ 
[@@ 
]@@ 
	dataArray@@ 
=@@ 
new@@ 
int@@ !
[@@! "
$num@@" #
]@@# $
;@@$ %
	dataArrayAA 
[AA 
$numAA 
]AA 
=AA 
dataAA 
;AA A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_66bBB =
.BB= >
GoodG2BSinkBB> I
(BBI J
	dataArrayBBJ S
,BBT U
reqBBV Y
,BBY Z
respBB[ _
)BB` a
;BBa b
}CC 
privateFF 
staticFF 
voidFF 
GoodB2GFF 
(FF  
HttpRequestFF  +
reqFF, /
,FF/ 0
HttpResponseFF1 =
respFF> B
)FFB C
{GG 
intHH 
dataHH 
;HH 
dataII 
=II 
intII 
.II 
MinValueII 
;II 
{KK 	
ifLL 
(LL 
reqLL 
.LL 
QueryStringLL 
[LL  
$strLL  $
]LL$ %
!=LL& (
nullLL) -
)LL- .
{MM 
tryNN 
{OO 
dataPP 
=PP 
intPP 
.PP 
ParsePP $
(PP$ %
reqPP% (
.PP( )
QueryStringPP) 4
[PP4 5
$strPP5 9
]PP9 :
)PP: ;
;PP; <
}QQ 
catchRR 
(RR 
FormatExceptionRR &
exceptNumberFormatRR' 9
)RR9 :
{SS 
IOTT 
.TT 
LoggerTT 
.TT 
LogTT !
(TT! "
NLogTT" &
.TT& '
LogLevelTT' /
.TT/ 0
WarnTT0 4
,TT4 5
exceptNumberFormatTT6 H
,TTH I
$str	TTJ Ä
)
TTÄ Å
;
TTÅ Ç
}UU 
}VV 
}WW 	
intXX 
[XX 
]XX 
	dataArrayXX 
=XX 
newXX 
intXX !
[XX! "
$numXX" #
]XX# $
;XX$ %
	dataArrayYY 
[YY 
$numYY 
]YY 
=YY 
dataYY 
;YY A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_66bZZ =
.ZZ= >
GoodB2GSinkZZ> I
(ZZI J
	dataArrayZZJ S
,ZZT U
reqZZV Y
,ZZY Z
respZZ[ _
)ZZ` a
;ZZa b
}[[ 
}]] 
}^^ ”
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_66b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_66b ;
{ 
public 

static 
void 
BadSink 
( 
int "
[" #
]# $
	dataArray% .
,/ 0
HttpRequest1 <
req= @
,@ A
HttpResponseB N
respO S
)S T
{ 
int 
data 
= 
	dataArray 
[ 
$num 
] 
;  
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
int''# &
[''& '
]''' (
	dataArray'') 2
,''3 4
HttpRequest''5 @
req''A D
,''D E
HttpResponse''F R
resp''S W
)''W X
{(( 
int)) 
data)) 
=)) 
	dataArray)) 
[)) 
$num)) 
])) 
;))  
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
int00# &
[00& '
]00' (
	dataArray00) 2
,003 4
HttpRequest005 @
req00A D
,00D E
HttpResponse00F R
resp00S W
)00W X
{11 
int22 
data22 
=22 
	dataArray22 
[22 
$num22 
]22 
;22  
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ¿,
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_67a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_67a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

class 
	Container 
{ 
public 
int 
containerOne 
;  
} 
public!! 

override!! 
void!! 
Bad!! 
(!! 
HttpRequest!! (
req!!) ,
,!!, -
HttpResponse!!. :
resp!!; ?
)!!? @
{"" 
int## 
data## 
;## 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$ 
{&& 	
if'' 
('' 
req'' 
.'' 
QueryString'' 
[''  
$str''  $
]''$ %
!=''& (
null'') -
)''- .
{(( 
try)) 
{** 
data++ 
=++ 
int++ 
.++ 
Parse++ $
(++$ %
req++% (
.++( )
QueryString++) 4
[++4 5
$str++5 9
]++9 :
)++: ;
;++; <
},, 
catch-- 
(-- 
FormatException-- &
exceptNumberFormat--' 9
)--9 :
{.. 
IO// 
.// 
Logger// 
.// 
Log// !
(//! "
NLog//" &
.//& '
LogLevel//' /
./// 0
Warn//0 4
,//4 5
exceptNumberFormat//6 H
,//H I
$str	//J Ä
)
//Ä Å
;
//Å Ç
}00 
}11 
}22 	
	Container33 
dataContainer33 
=33  !
new33" %
	Container33& /
(33/ 0
)330 1
;331 2
dataContainer44 
.44 
containerOne44 "
=44# $
data44% )
;44) *A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_67b55 =
.55= >
BadSink55> E
(55E F
dataContainer55F S
,55T U
req55V Y
,55Y Z
resp55[ _
)55` a
;55a b
}66 
public99 

override99 
void99 
Good99 
(99 
HttpRequest99 )
req99* -
,99- .
HttpResponse99/ ;
resp99< @
)99@ A
{:: 
GoodG2B;; 
(;; 
req;; 
,;; 
resp;; 
);; 
;;; 
GoodB2G<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
}== 
private@@ 
static@@ 
void@@ 
GoodG2B@@ 
(@@  
HttpRequest@@  +
req@@, /
,@@/ 0
HttpResponse@@1 =
resp@@> B
)@@B C
{AA 
intBB 
dataBB 
;BB 
dataDD 
=DD 
$numDD 
;DD 
	ContainerEE 
dataContainerEE 
=EE  !
newEE" %
	ContainerEE& /
(EE/ 0
)EE0 1
;EE1 2
dataContainerFF 
.FF 
containerOneFF "
=FF# $
dataFF% )
;FF) *A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_67bGG =
.GG= >
GoodG2BSinkGG> I
(GGI J
dataContainerGGJ W
,GGX Y
reqGGZ ]
,GG] ^
respGG_ c
)GGd e
;GGe f
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
HttpRequestKK  +
reqKK, /
,KK/ 0
HttpResponseKK1 =
respKK> B
)KKB C
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
ifQQ 
(QQ 
reqQQ 
.QQ 
QueryStringQQ 
[QQ  
$strQQ  $
]QQ$ %
!=QQ& (
nullQQ) -
)QQ- .
{RR 
trySS 
{TT 
dataUU 
=UU 
intUU 
.UU 
ParseUU $
(UU$ %
reqUU% (
.UU( )
QueryStringUU) 4
[UU4 5
$strUU5 9
]UU9 :
)UU: ;
;UU; <
}VV 
catchWW 
(WW 
FormatExceptionWW &
exceptNumberFormatWW' 9
)WW9 :
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY !
(YY! "
NLogYY" &
.YY& '
LogLevelYY' /
.YY/ 0
WarnYY0 4
,YY4 5
exceptNumberFormatYY6 H
,YYH I
$str	YYJ Ä
)
YYÄ Å
;
YYÅ Ç
}ZZ 
}[[ 
}\\ 	
	Container]] 
dataContainer]] 
=]]  !
new]]" %
	Container]]& /
(]]/ 0
)]]0 1
;]]1 2
dataContainer^^ 
.^^ 
containerOne^^ "
=^^# $
data^^% )
;^^) *A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_67b__ =
.__= >
GoodB2GSink__> I
(__I J
dataContainer__J W
,__X Y
req__Z ]
,__] ^
resp___ c
)__d e
;__e f
}`` 
}bb 
}cc ú
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_67b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_67b ;
{ 
public 

static 
void 
BadSink 
( A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_67a T
.T U
	ContainerU ^
dataContainer_ l
,m n
HttpRequesto z
req{ ~
,~ 
HttpResponse
Ä å
resp
ç ë
)
ë í
{ 
int 
data 
= 
dataContainer  
.  !
containerOne! -
;- .
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_67a''# X
.''X Y
	Container''Y b
dataContainer''c p
,''q r
HttpRequest''s ~
req	'' Ç
,
''Ç É
HttpResponse
''Ñ ê
resp
''ë ï
)
''ï ñ
{(( 
int)) 
data)) 
=)) 
dataContainer))  
.))  !
containerOne))! -
;))- .
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_67a00# X
.00X Y
	Container00Y b
dataContainer00c p
,00q r
HttpRequest00s ~
req	00 Ç
,
00Ç É
HttpResponse
00Ñ ê
resp
00ë ï
)
00ï ñ
{11 
int22 
data22 
=22 
dataContainer22  
.22  !
containerOne22! -
;22- .
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? æ#
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_68a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_68a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

static 
int 
data 
; 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
data   
=   
int   
.   
MinValue   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
try%% 
{&& 
data'' 
='' 
int'' 
.'' 
Parse'' $
(''$ %
req''% (
.''( )
QueryString'') 4
[''4 5
$str''5 9
]''9 :
)'': ;
;''; <
}(( 
catch)) 
()) 
FormatException)) &
exceptNumberFormat))' 9
)))9 :
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ !
(++! "
NLog++" &
.++& '
LogLevel++' /
.++/ 0
Warn++0 4
,++4 5
exceptNumberFormat++6 H
,++H I
$str	++J Ä
)
++Ä Å
;
++Å Ç
},, 
}-- 
}.. 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_68b// =
.//= >
BadSink//> E
(//E F
req//F I
,//I J
resp//K O
)//O P
;//P Q
}00 
public33 

override33 
void33 
Good33 
(33 
HttpRequest33 )
req33* -
,33- .
HttpResponse33/ ;
resp33< @
)33@ A
{44 
GoodG2B55 
(55 
req55 
,55 
resp55 
)55 
;55 
GoodB2G66 
(66 
req66 
,66 
resp66 
)66 
;66 
}77 
private:: 
static:: 
void:: 
GoodG2B:: 
(::  
HttpRequest::  +
req::, /
,::/ 0
HttpResponse::1 =
resp::> B
)::B C
{;; 
data== 
=== 
$num== 
;== A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_68b>> =
.>>= >
GoodG2BSink>>> I
(>>I J
req>>J M
,>>M N
resp>>O S
)>>S T
;>>T U
}?? 
privateBB 
staticBB 
voidBB 
GoodB2GBB 
(BB  
HttpRequestBB  +
reqBB, /
,BB/ 0
HttpResponseBB1 =
respBB> B
)BBB C
{CC 
dataDD 
=DD 
intDD 
.DD 
MinValueDD 
;DD 
{FF 	
ifGG 
(GG 
reqGG 
.GG 
QueryStringGG 
[GG  
$strGG  $
]GG$ %
!=GG& (
nullGG) -
)GG- .
{HH 
tryII 
{JJ 
dataKK 
=KK 
intKK 
.KK 
ParseKK $
(KK$ %
reqKK% (
.KK( )
QueryStringKK) 4
[KK4 5
$strKK5 9
]KK9 :
)KK: ;
;KK; <
}LL 
catchMM 
(MM 
FormatExceptionMM &
exceptNumberFormatMM' 9
)MM9 :
{NN 
IOOO 
.OO 
LoggerOO 
.OO 
LogOO !
(OO! "
NLogOO" &
.OO& '
LogLevelOO' /
.OO/ 0
WarnOO0 4
,OO4 5
exceptNumberFormatOO6 H
,OOH I
$str	OOJ Ä
)
OOÄ Å
;
OOÅ Ç
}PP 
}QQ 
}RR 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_68bSS =
.SS= >
GoodB2GSinkSS> I
(SSI J
reqSSJ M
,SSM N
respSSO S
)SSS T
;SST U
}TT 
}VV 
}WW ´
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_68b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_68b ;
{ 
public 

static 
void 
BadSink 
( 
HttpRequest *
req+ .
,. /
HttpResponse0 <
resp= A
)A B
{ 
int 
data 
= A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_68a H
.H I
dataI M
;M N
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
HttpRequest''# .
req''/ 2
,''2 3
HttpResponse''4 @
resp''A E
)''E F
{(( 
int)) 
data)) 
=)) A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_68a)) H
.))H I
data))I M
;))M N
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
HttpRequest00# .
req00/ 2
,002 3
HttpResponse004 @
resp00A E
)00E F
{11 
int22 
data22 
=22 A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_68a22 H
.22H I
data22I M
;22M N
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? Û%
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_71a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_71a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_71b.. =
...= >
BadSink..> E
(..E F
(..F G
Object..G M
)..M N
data..N R
,..S T
req..U X
,..X Y
resp..Z ^
).._ `
;..` a
}// 
public22 

override22 
void22 
Good22 
(22 
HttpRequest22 )
req22* -
,22- .
HttpResponse22/ ;
resp22< @
)22@ A
{33 
GoodG2B44 
(44 
req44 
,44 
resp44 
)44 
;44 
GoodB2G55 
(55 
req55 
,55 
resp55 
)55 
;55 
}66 
private99 
static99 
void99 
GoodG2B99 
(99  
HttpRequest99  +
req99, /
,99/ 0
HttpResponse991 =
resp99> B
)99B C
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_71b>> =
.>>= >
GoodG2BSink>>> I
(>>I J
(>>J K
Object>>K Q
)>>Q R
data>>R V
,>>W X
req>>Y \
,>>\ ]
resp>>^ b
)>>c d
;>>d e
}?? 
privateBB 
staticBB 
voidBB 
GoodB2GBB 
(BB  
HttpRequestBB  +
reqBB, /
,BB/ 0
HttpResponseBB1 =
respBB> B
)BBB C
{CC 
intDD 
dataDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
ifHH 
(HH 
reqHH 
.HH 
QueryStringHH 
[HH  
$strHH  $
]HH$ %
!=HH& (
nullHH) -
)HH- .
{II 
tryJJ 
{KK 
dataLL 
=LL 
intLL 
.LL 
ParseLL $
(LL$ %
reqLL% (
.LL( )
QueryStringLL) 4
[LL4 5
$strLL5 9
]LL9 :
)LL: ;
;LL; <
}MM 
catchNN 
(NN 
FormatExceptionNN &
exceptNumberFormatNN' 9
)NN9 :
{OO 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP !
(PP! "
NLogPP" &
.PP& '
LogLevelPP' /
.PP/ 0
WarnPP0 4
,PP4 5
exceptNumberFormatPP6 H
,PPH I
$str	PPJ Ä
)
PPÄ Å
;
PPÅ Ç
}QQ 
}RR 
}SS 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_71bTT =
.TT= >
GoodB2GSinkTT> I
(TTI J
(TTJ K
ObjectTTK Q
)TTQ R
dataTTR V
,TTW X
reqTTY \
,TT\ ]
respTT^ b
)TTc d
;TTd e
}UU 
}WW 
}XX Ö
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_71b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_71b ;
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
,1 2
HttpRequest3 >
req? B
,B C
HttpResponseD P
respQ U
)U V
{ 
int 
data 
= 
( 
int 
) 

dataObject "
;" #
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
Object((# )

dataObject((* 4
,((5 6
HttpRequest((7 B
req((C F
,((F G
HttpResponse((H T
resp((U Y
)((Y Z
{)) 
int** 
data** 
=** 
(** 
int** 
)** 

dataObject** "
;**" #
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
Object11# )

dataObject11* 4
,115 6
HttpRequest117 B
req11C F
,11F G
HttpResponse11H T
resp11U Y
)11Y Z
{22 
int33 
data33 
=33 
(33 
int33 
)33 

dataObject33 "
;33" #
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ „3
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_72a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_72a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
try%% 
{&& 
data'' 
='' 
int'' 
.'' 
Parse'' $
(''$ %
req''% (
.''( )
QueryString'') 4
[''4 5
$str''5 9
]''9 :
)'': ;
;''; <
}(( 
catch)) 
()) 
FormatException)) &
exceptNumberFormat))' 9
)))9 :
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ !
(++! "
NLog++" &
.++& '
LogLevel++' /
.++/ 0
Warn++0 4
,++4 5
exceptNumberFormat++6 H
,++H I
$str	++J Ä
)
++Ä Å
;
++Å Ç
},, 
}-- 
}.. 	
	Hashtable// 
dataHashtable// 
=//  !
new//" %
	Hashtable//& /
(/// 0
$num//0 1
)//1 2
;//2 3
dataHashtable00 
.00 
Add00 
(00 
$num00 
,00 
data00 !
)00! "
;00" #
dataHashtable11 
.11 
Add11 
(11 
$num11 
,11 
data11 !
)11! "
;11" #
dataHashtable22 
.22 
Add22 
(22 
$num22 
,22 
data22 !
)22! "
;22" #A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_72b33 =
.33= >
BadSink33> E
(33E F
dataHashtable33F S
,33T U
req33V Y
,33Y Z
resp33[ _
)33` a
;33a b
}44 
public77 

override77 
void77 
Good77 
(77 
HttpRequest77 )
req77* -
,77- .
HttpResponse77/ ;
resp77< @
)77@ A
{88 
GoodG2B99 
(99 
req99 
,99 
resp99 
)99 
;99 
GoodB2G:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
};; 
private>> 
static>> 
void>> 
GoodG2B>> 
(>>  
HttpRequest>>  +
req>>, /
,>>/ 0
HttpResponse>>1 =
resp>>> B
)>>B C
{?? 
int@@ 
data@@ 
;@@ 
dataBB 
=BB 
$numBB 
;BB 
	HashtableCC 
dataHashtableCC 
=CC  !
newCC" %
	HashtableCC& /
(CC/ 0
$numCC0 1
)CC1 2
;CC2 3
dataHashtableDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD !
)DD! "
;DD" #
dataHashtableEE 
.EE 
AddEE 
(EE 
$numEE 
,EE 
dataEE !
)EE! "
;EE" #
dataHashtableFF 
.FF 
AddFF 
(FF 
$numFF 
,FF 
dataFF !
)FF! "
;FF" #A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_72bGG =
.GG= >
GoodG2BSinkGG> I
(GGI J
dataHashtableGGJ W
,GGX Y
reqGGZ ]
,GG] ^
respGG_ c
)GGd e
;GGe f
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
HttpRequestKK  +
reqKK, /
,KK/ 0
HttpResponseKK1 =
respKK> B
)KKB C
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
ifQQ 
(QQ 
reqQQ 
.QQ 
QueryStringQQ 
[QQ  
$strQQ  $
]QQ$ %
!=QQ& (
nullQQ) -
)QQ- .
{RR 
trySS 
{TT 
dataUU 
=UU 
intUU 
.UU 
ParseUU $
(UU$ %
reqUU% (
.UU( )
QueryStringUU) 4
[UU4 5
$strUU5 9
]UU9 :
)UU: ;
;UU; <
}VV 
catchWW 
(WW 
FormatExceptionWW &
exceptNumberFormatWW' 9
)WW9 :
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY !
(YY! "
NLogYY" &
.YY& '
LogLevelYY' /
.YY/ 0
WarnYY0 4
,YY4 5
exceptNumberFormatYY6 H
,YYH I
$str	YYJ Ä
)
YYÄ Å
;
YYÅ Ç
}ZZ 
}[[ 
}\\ 	
	Hashtable]] 
dataHashtable]] 
=]]  !
new]]" %
	Hashtable]]& /
(]]/ 0
$num]]0 1
)]]1 2
;]]2 3
dataHashtable^^ 
.^^ 
Add^^ 
(^^ 
$num^^ 
,^^ 
data^^ !
)^^! "
;^^" #
dataHashtable__ 
.__ 
Add__ 
(__ 
$num__ 
,__ 
data__ !
)__! "
;__" #
dataHashtable`` 
.`` 
Add`` 
(`` 
$num`` 
,`` 
data`` !
)``! "
;``" #A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_72baa =
.aa= >
GoodB2GSinkaa> I
(aaI J
dataHashtableaaJ W
,aaX Y
reqaaZ ]
,aa] ^
respaa_ c
)aad e
;aae f
}bb 
}dd 
}ee ∞
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_72b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_72b ;
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
,7 8
HttpRequest9 D
reqE H
,H I
HttpResponseJ V
respW [
)[ \
{ 
int 
data 
= 
( 
int 
) 
dataHashtable &
[& '
$num' (
]( )
;) *
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
	Hashtable((# ,
dataHashtable((- :
,((; <
HttpRequest((= H
req((I L
,((L M
HttpResponse((N Z
resp(([ _
)((_ `
{)) 
int** 
data** 
=** 
(** 
int** 
)** 
dataHashtable** &
[**& '
$num**' (
]**( )
;**) *
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
	Hashtable11# ,
dataHashtable11- :
,11; <
HttpRequest11= H
req11I L
,11L M
HttpResponse11N Z
resp11[ _
)11_ `
{22 
int33 
data33 
=33 
(33 
int33 
)33 
dataHashtable33 &
[33& '
$num33' (
]33( )
;33) *
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ◊3
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_73a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_73a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
try%% 
{&& 
data'' 
='' 
int'' 
.'' 
Parse'' $
(''$ %
req''% (
.''( )
QueryString'') 4
[''4 5
$str''5 9
]''9 :
)'': ;
;''; <
}(( 
catch)) 
()) 
FormatException)) &
exceptNumberFormat))' 9
)))9 :
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ !
(++! "
NLog++" &
.++& '
LogLevel++' /
.++/ 0
Warn++0 4
,++4 5
exceptNumberFormat++6 H
,++H I
$str	++J Ä
)
++Ä Å
;
++Å Ç
},, 
}-- 
}.. 	

LinkedList// 
<// 
int// 
>// 
dataLinkedList// &
=//' (
new//) ,

LinkedList//- 7
<//7 8
int//8 ;
>//; <
(//< =
)//= >
;//> ?
dataLinkedList00 
.00 
AddLast00 
(00 
data00 #
)00# $
;00$ %
dataLinkedList11 
.11 
AddLast11 
(11 
data11 #
)11# $
;11$ %
dataLinkedList22 
.22 
AddLast22 
(22 
data22 #
)22# $
;22$ %A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_73b33 =
.33= >
BadSink33> E
(33E F
dataLinkedList33F T
,33U V
req33W Z
,33Z [
resp33\ `
)33a b
;33b c
}44 
public77 

override77 
void77 
Good77 
(77 
HttpRequest77 )
req77* -
,77- .
HttpResponse77/ ;
resp77< @
)77@ A
{88 
GoodG2B99 
(99 
req99 
,99 
resp99 
)99 
;99 
GoodB2G:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
};; 
private>> 
static>> 
void>> 
GoodG2B>> 
(>>  
HttpRequest>>  +
req>>, /
,>>/ 0
HttpResponse>>1 =
resp>>> B
)>>B C
{?? 
int@@ 
data@@ 
;@@ 
dataBB 
=BB 
$numBB 
;BB 

LinkedListCC 
<CC 
intCC 
>CC 
dataLinkedListCC &
=CC' (
newCC) ,

LinkedListCC- 7
<CC7 8
intCC8 ;
>CC; <
(CC< =
)CC= >
;CC> ?
dataLinkedListDD 
.DD 
AddLastDD 
(DD 
dataDD #
)DD# $
;DD$ %
dataLinkedListEE 
.EE 
AddLastEE 
(EE 
dataEE #
)EE# $
;EE$ %
dataLinkedListFF 
.FF 
AddLastFF 
(FF 
dataFF #
)FF# $
;FF$ %A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_73bGG =
.GG= >
GoodG2BSinkGG> I
(GGI J
dataLinkedListGGJ X
,GGY Z
reqGG[ ^
,GG^ _
respGG` d
)GGe f
;GGf g
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
HttpRequestKK  +
reqKK, /
,KK/ 0
HttpResponseKK1 =
respKK> B
)KKB C
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
ifQQ 
(QQ 
reqQQ 
.QQ 
QueryStringQQ 
[QQ  
$strQQ  $
]QQ$ %
!=QQ& (
nullQQ) -
)QQ- .
{RR 
trySS 
{TT 
dataUU 
=UU 
intUU 
.UU 
ParseUU $
(UU$ %
reqUU% (
.UU( )
QueryStringUU) 4
[UU4 5
$strUU5 9
]UU9 :
)UU: ;
;UU; <
}VV 
catchWW 
(WW 
FormatExceptionWW &
exceptNumberFormatWW' 9
)WW9 :
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY !
(YY! "
NLogYY" &
.YY& '
LogLevelYY' /
.YY/ 0
WarnYY0 4
,YY4 5
exceptNumberFormatYY6 H
,YYH I
$str	YYJ Ä
)
YYÄ Å
;
YYÅ Ç
}ZZ 
}[[ 
}\\ 	

LinkedList]] 
<]] 
int]] 
>]] 
dataLinkedList]] &
=]]' (
new]]) ,

LinkedList]]- 7
<]]7 8
int]]8 ;
>]]; <
(]]< =
)]]= >
;]]> ?
dataLinkedList^^ 
.^^ 
AddLast^^ 
(^^ 
data^^ #
)^^# $
;^^$ %
dataLinkedList__ 
.__ 
AddLast__ 
(__ 
data__ #
)__# $
;__$ %
dataLinkedList`` 
.`` 
AddLast`` 
(`` 
data`` #
)``# $
;``$ %A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_73baa =
.aa= >
GoodB2GSinkaa> I
(aaI J
dataLinkedListaaJ X
,aaY Z
reqaa[ ^
,aa^ _
respaa` d
)aae f
;aaf g
}bb 
}dd 
}ee Ú
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_73b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_73b ;
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
int* -
>- .
dataLinkedList/ =
,> ?
HttpRequest@ K
reqL O
,O P
HttpResponseQ ]
resp^ b
)b c
{ 
int 
data 
= 
dataLinkedList !
.! "
Last" &
.& '
Value' ,
;, -
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #

LinkedList((# -
<((- .
int((. 1
>((1 2
dataLinkedList((3 A
,((B C
HttpRequest((D O
req((P S
,((S T
HttpResponse((U a
resp((b f
)((f g
{)) 
int** 
data** 
=** 
dataLinkedList** !
.**! "
Last**" &
.**& '
Value**' ,
;**, -
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

LinkedList11# -
<11- .
int11. 1
>111 2
dataLinkedList113 A
,11B C
HttpRequest11D O
req11P S
,11S T
HttpResponse11U a
resp11b f
)11f g
{22 
int33 
data33 
=33 
dataLinkedList33 !
.33! "
Last33" &
.33& '
Value33' ,
;33, -
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ú7
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_74a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_74a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
try%% 
{&& 
data'' 
='' 
int'' 
.'' 
Parse'' $
(''$ %
req''% (
.''( )
QueryString'') 4
[''4 5
$str''5 9
]''9 :
)'': ;
;''; <
}(( 
catch)) 
()) 
FormatException)) &
exceptNumberFormat))' 9
)))9 :
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ !
(++! "
NLog++" &
.++& '
LogLevel++' /
.++/ 0
Warn++0 4
,++4 5
exceptNumberFormat++6 H
,++H I
$str	++J Ä
)
++Ä Å
;
++Å Ç
},, 
}-- 
}.. 	

Dictionary// 
<// 
int// 
,// 
int// 
>// 
dataDictionary// *
=//+ ,
new//- 0

Dictionary//1 ;
<//; <
int//< ?
,//? @
int//@ C
>//C D
(//D E
)//E F
;//F G
dataDictionary00 
.00 
Add00 
(00 
$num00 
,00 
data00 "
)00" #
;00# $
dataDictionary11 
.11 
Add11 
(11 
$num11 
,11 
data11 "
)11" #
;11# $
dataDictionary22 
.22 
Add22 
(22 
$num22 
,22 
data22 "
)22" #
;22# $A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_74b33 =
.33= >
BadSink33> E
(33E F
dataDictionary33F T
,33U V
req33W Z
,33Z [
resp33\ `
)33a b
;33b c
}44 
public77 

override77 
void77 
Good77 
(77 
HttpRequest77 )
req77* -
,77- .
HttpResponse77/ ;
resp77< @
)77@ A
{88 
GoodG2B99 
(99 
req99 
,99 
resp99 
)99 
;99 
GoodB2G:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
};; 
private>> 
static>> 
void>> 
GoodG2B>> 
(>>  
HttpRequest>>  +
req>>, /
,>>/ 0
HttpResponse>>1 =
resp>>> B
)>>B C
{?? 
int@@ 
data@@ 
;@@ 
dataBB 
=BB 
$numBB 
;BB 

DictionaryCC 
<CC 
intCC 
,CC 
intCC 
>CC 
dataDictionaryCC *
=CC+ ,
newCC- 0

DictionaryCC1 ;
<CC; <
intCC< ?
,CC? @
intCC@ C
>CCC D
(CCD E
)CCE F
;CCF G
dataDictionaryDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD "
)DD" #
;DD# $
dataDictionaryEE 
.EE 
AddEE 
(EE 
$numEE 
,EE 
dataEE "
)EE" #
;EE# $
dataDictionaryFF 
.FF 
AddFF 
(FF 
$numFF 
,FF 
dataFF "
)FF" #
;FF# $A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_74bGG =
.GG= >
GoodG2BSinkGG> I
(GGI J
dataDictionaryGGJ X
,GGY Z
reqGG[ ^
,GG^ _
respGG` d
)GGe f
;GGf g
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
HttpRequestKK  +
reqKK, /
,KK/ 0
HttpResponseKK1 =
respKK> B
)KKB C
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
ifQQ 
(QQ 
reqQQ 
.QQ 
QueryStringQQ 
[QQ  
$strQQ  $
]QQ$ %
!=QQ& (
nullQQ) -
)QQ- .
{RR 
trySS 
{TT 
dataUU 
=UU 
intUU 
.UU 
ParseUU $
(UU$ %
reqUU% (
.UU( )
QueryStringUU) 4
[UU4 5
$strUU5 9
]UU9 :
)UU: ;
;UU; <
}VV 
catchWW 
(WW 
FormatExceptionWW &
exceptNumberFormatWW' 9
)WW9 :
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY !
(YY! "
NLogYY" &
.YY& '
LogLevelYY' /
.YY/ 0
WarnYY0 4
,YY4 5
exceptNumberFormatYY6 H
,YYH I
$str	YYJ Ä
)
YYÄ Å
;
YYÅ Ç
}ZZ 
}[[ 
}\\ 	

Dictionary]] 
<]] 
int]] 
,]] 
int]] 
>]] 
dataDictionary]] *
=]]+ ,
new]]- 0

Dictionary]]1 ;
<]]; <
int]]< ?
,]]? @
int]]@ C
>]]C D
(]]D E
)]]E F
;]]F G
dataDictionary^^ 
.^^ 
Add^^ 
(^^ 
$num^^ 
,^^ 
data^^ "
)^^" #
;^^# $
dataDictionary__ 
.__ 
Add__ 
(__ 
$num__ 
,__ 
data__ "
)__" #
;__# $
dataDictionary`` 
.`` 
Add`` 
(`` 
$num`` 
,`` 
data`` "
)``" #
;``# $A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_74baa =
.aa= >
GoodB2GSinkaa> I
(aaI J
dataDictionaryaaJ X
,aaY Z
reqaa[ ^
,aa^ _
respaa` d
)aae f
;aaf g
}bb 
}dd 
}ee ô
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_74b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_74b ;
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
int. 1
>1 2
dataDictionary3 A
,B C
HttpRequestD O
reqP S
,S T
HttpResponseU a
respb f
)f g
{ 
int 
data 
= 
dataDictionary !
[! "
$num" #
]# $
;$ %
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( #
(((# $

Dictionary(($ .
<((. /
int((/ 2
,((2 3
int((3 6
>((6 7
dataDictionary((8 F
,((G H
HttpRequest((I T
req((U X
,((X Y
HttpResponse((Z f
resp((g k
)((k l
{)) 
int** 
data** 
=** 
dataDictionary** !
[**! "
$num**" #
]**# $
;**$ %
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

Dictionary11# -
<11- .
int11. 1
,111 2
int112 5
>115 6
dataDictionary117 E
,11F G
HttpRequest11H S
req11T W
,11W X
HttpResponse11Y e
resp11f j
)11j k
{22 
int33 
data33 
=33 
dataDictionary33 !
[33! "
$num33" #
]33# $
;33$ %
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ±K
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_75a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_75a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{   
int!! 
data!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;"" 
{$$ 	
if%% 
(%% 
req%% 
.%% 
QueryString%% 
[%%  
$str%%  $
]%%$ %
!=%%& (
null%%) -
)%%- .
{&& 
try'' 
{(( 
data)) 
=)) 
int)) 
.)) 
Parse)) $
())$ %
req))% (
.))( )
QueryString))) 4
[))4 5
$str))5 9
]))9 :
))): ;
;)); <
}** 
catch++ 
(++ 
FormatException++ &
exceptNumberFormat++' 9
)++9 :
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptNumberFormat--6 H
,--H I
$str	--J Ä
)
--Ä Å
;
--Å Ç
}.. 
}// 
}00 	
byte22 
[22 
]22 
dataSerialized22 
=22 
null22  $
;22$ %
try33 
{44 	
BinaryFormatter55 
bf55 
=55  
new55! $
BinaryFormatter55% 4
(554 5
)555 6
;556 7
using66 
(66 
var66 
ms66 
=66 
new66 
MemoryStream66  ,
(66, -
)66- .
)66. /
{77 
bf88 
.88 
	Serialize88 
(88 
ms88 
,88  
data88! %
)88% &
;88& '
dataSerialized99 
=99  
ms99! #
.99# $
ToArray99$ +
(99+ ,
)99, -
;99- .
}:: A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_75b;; A
.;;A B
BadSink;;B I
(;;I J
dataSerialized;;J X
,;;Y Z
req;;[ ^
,;;^ _
resp;;` d
);;e f
;;;f g
}<< 	
catch== 
(== "
SerializationException== %
exceptSerialize==& 5
)==5 6
{>> 	
IO?? 
.?? 
Logger?? 
.?? 
Log?? 
(?? 
NLog?? 
.?? 
LogLevel?? '
.??' (
Warn??( ,
,??, -
$str??. X
,??X Y
exceptSerialize??Z i
)??i j
;??j k
}@@ 	
}AA 
publicDD 

overrideDD 
voidDD 
GoodDD 
(DD 
HttpRequestDD )
reqDD* -
,DD- .
HttpResponseDD/ ;
respDD< @
)DD@ A
{EE 
GoodG2BFF 
(FF 
reqFF 
,FF 
respFF 
)FF 
;FF 
GoodB2GGG 
(GG 
reqGG 
,GG 
respGG 
)GG 
;GG 
}HH 
privateKK 
staticKK 
voidKK 
GoodG2BKK 
(KK  
HttpRequestKK  +
reqKK, /
,KK/ 0
HttpResponseKK1 =
respKK> B
)KKB C
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
ifQQ 
(QQ 
reqQQ 
.QQ 
QueryStringQQ 
[QQ  
$strQQ  $
]QQ$ %
!=QQ& (
nullQQ) -
)QQ- .
{RR 
trySS 
{TT 
dataUU 
=UU 
intUU 
.UU 
ParseUU $
(UU$ %
reqUU% (
.UU( )
QueryStringUU) 4
[UU4 5
$strUU5 9
]UU9 :
)UU: ;
;UU; <
}VV 
catchWW 
(WW 
FormatExceptionWW &
exceptNumberFormatWW' 9
)WW9 :
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY !
(YY! "
NLogYY" &
.YY& '
LogLevelYY' /
.YY/ 0
WarnYY0 4
,YY4 5
exceptNumberFormatYY6 H
,YYH I
$str	YYJ Ä
)
YYÄ Å
;
YYÅ Ç
}ZZ 
}[[ 
}\\ 	
byte^^ 
[^^ 
]^^ 
dataSerialized^^ 
=^^ 
null^^  $
;^^$ %
try__ 
{`` 	
BinaryFormatteraa 
bfaa 
=aa  
newaa! $
BinaryFormatteraa% 4
(aa4 5
)aa5 6
;aa6 7
usingbb 
(bb 
varbb 
msbb 
=bb 
newbb 
MemoryStreambb  ,
(bb, -
)bb- .
)bb. /
{cc 
bfdd 
.dd 
	Serializedd 
(dd 
msdd 
,dd  
datadd! %
)dd% &
;dd& '
dataSerializedee 
=ee  
msee! #
.ee# $
ToArrayee$ +
(ee+ ,
)ee, -
;ee- .
}ff A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_75bgg A
.ggA B
GoodG2BSinkggB M
(ggM N
dataSerializedggN \
,gg] ^
reqgg_ b
,ggb c
respggd h
)ggi j
;ggj k
}hh 	
catchii 
(ii "
SerializationExceptionii %
exceptSerializeii& 5
)ii5 6
{jj 	
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk 
.kk 
LogLevelkk '
.kk' (
Warnkk( ,
,kk, -
$strkk. X
,kkX Y
exceptSerializekkZ i
)kki j
;kkj k
}ll 	
}mm 
privatepp 
staticpp 
voidpp 
GoodB2Gpp 
(pp  
HttpRequestpp  +
reqpp, /
,pp/ 0
HttpResponsepp1 =
resppp> B
)ppB C
{qq 
intrr 
datarr 
;rr 
datass 
=ss 
intss 
.ss 
MinValuess 
;ss 
{uu 	
ifvv 
(vv 
reqvv 
.vv 
QueryStringvv 
[vv  
$strvv  $
]vv$ %
!=vv& (
nullvv) -
)vv- .
{ww 
tryxx 
{yy 
datazz 
=zz 
intzz 
.zz 
Parsezz $
(zz$ %
reqzz% (
.zz( )
QueryStringzz) 4
[zz4 5
$strzz5 9
]zz9 :
)zz: ;
;zz; <
}{{ 
catch|| 
(|| 
FormatException|| &
exceptNumberFormat||' 9
)||9 :
{}} 
IO~~ 
.~~ 
Logger~~ 
.~~ 
Log~~ !
(~~! "
NLog~~" &
.~~& '
LogLevel~~' /
.~~/ 0
Warn~~0 4
,~~4 5
exceptNumberFormat~~6 H
,~~H I
$str	~~J Ä
)
~~Ä Å
;
~~Å Ç
} 
}
ÄÄ 
}
ÅÅ 	
byte
ÉÉ 
[
ÉÉ 
]
ÉÉ 
dataSerialized
ÉÉ 
=
ÉÉ 
null
ÉÉ  $
;
ÉÉ$ %
try
ÑÑ 
{
ÖÖ 	
BinaryFormatter
ÜÜ 
bf
ÜÜ 
=
ÜÜ  
new
ÜÜ! $
BinaryFormatter
ÜÜ% 4
(
ÜÜ4 5
)
ÜÜ5 6
;
ÜÜ6 7
using
áá 
(
áá 
var
áá 
ms
áá 
=
áá 
new
áá 
MemoryStream
áá  ,
(
áá, -
)
áá- .
)
áá. /
{
àà 
bf
ââ 
.
ââ 
	Serialize
ââ 
(
ââ 
ms
ââ 
,
ââ  
data
ââ! %
)
ââ% &
;
ââ& '
dataSerialized
ää 
=
ää  
ms
ää! #
.
ää# $
ToArray
ää$ +
(
ää+ ,
)
ää, -
;
ää- .
}
ãã C
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_75b
åå A
.
ååA B
GoodB2GSink
ååB M
(
ååM N
dataSerialized
ååN \
,
åå] ^
req
åå_ b
,
ååb c
resp
ååd h
)
ååi j
;
ååj k
}
çç 	
catch
éé 
(
éé $
SerializationException
éé %
exceptSerialize
éé& 5
)
éé5 6
{
èè 	
IO
êê 
.
êê 
Logger
êê 
.
êê 
Log
êê 
(
êê 
NLog
êê 
.
êê 
LogLevel
êê '
.
êê' (
Warn
êê( ,
,
êê, -
$str
êê. X
,
êêX Y
exceptSerialize
êêZ i
)
êêi j
;
êêj k
}
ëë 	
}
íí 
}îî 
}ïï ≤8
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_75b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_75b ;
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
,5 6
HttpRequest7 B
reqC F
,F G
HttpResponseH T
respU Y
)Y Z
{   
try!! 
{"" 	
int## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
int)) 
))) 
binForm)) #
.))# $
Deserialize))$ /
())/ 0
	memStream))0 9
)))9 :
;)): ;
}** 
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
catch// 
(// "
SerializationException// %
exceptSerialize//& 5
)//5 6
{00 	
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 
.11 
LogLevel11 '
.11' (
Warn11( ,
,11, -
$str11. Y
,11Y Z
exceptSerialize11[ j
)11j k
;11k l
}22 	
}33 
public88 

static88 
void88 
GoodG2BSink88 "
(88" #
byte88# '
[88' (
]88( )
dataSerialized88* 8
,889 :
HttpRequest88; F
req88G J
,88J K
HttpResponse88L X
resp88Y ]
)88] ^
{99 
try:: 
{;; 	
int<< 
data<< 
;<< 
var== 
binForm== 
=== 
new== 
BinaryFormatter== -
(==- .
)==. /
;==/ 0
using>> 
(>> 
var>> 
	memStream>>  
=>>! "
new>># &
MemoryStream>>' 3
(>>3 4
)>>4 5
)>>5 6
{?? 
	memStream@@ 
.@@ 
Write@@ 
(@@  
dataSerialized@@  .
,@@. /
$num@@0 1
,@@1 2
dataSerialized@@3 A
.@@A B
Length@@B H
)@@H I
;@@I J
	memStreamAA 
.AA 
SeekAA 
(AA 
$numAA  
,AA  !

SeekOriginAA" ,
.AA, -
BeginAA- 2
)AA2 3
;AA3 4
dataBB 
=BB 
(BB 
intBB 
)BB 
binFormBB #
.BB# $
DeserializeBB$ /
(BB/ 0
	memStreamBB0 9
)BB9 :
;BB: ;
}CC 
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
catchHH 
(HH "
SerializationExceptionHH %
exceptSerializeHH& 5
)HH5 6
{II 	
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ 
.JJ 
LogLevelJJ '
.JJ' (
WarnJJ( ,
,JJ, -
$strJJ. Y
,JJY Z
exceptSerializeJJ[ j
)JJj k
;JJk l
}KK 	
}LL 
publicOO 

staticOO 
voidOO 
GoodB2GSinkOO "
(OO" #
byteOO# '
[OO' (
]OO( )
dataSerializedOO* 8
,OO9 :
HttpRequestOO; F
reqOOG J
,OOJ K
HttpResponseOOL X
respOOY ]
)OO] ^
{PP 
tryQQ 
{RR 	
intSS 
dataSS 
;SS 
varTT 
binFormTT 
=TT 
newTT 
BinaryFormatterTT -
(TT- .
)TT. /
;TT/ 0
usingUU 
(UU 
varUU 
	memStreamUU  
=UU! "
newUU# &
MemoryStreamUU' 3
(UU3 4
)UU4 5
)UU5 6
{VV 
	memStreamWW 
.WW 
WriteWW 
(WW  
dataSerializedWW  .
,WW. /
$numWW0 1
,WW1 2
dataSerializedWW3 A
.WWA B
LengthWWB H
)WWH I
;WWI J
	memStreamXX 
.XX 
SeekXX 
(XX 
$numXX  
,XX  !

SeekOriginXX" ,
.XX, -
BeginXX- 2
)XX2 3
;XX3 4
dataYY 
=YY 
(YY 
intYY 
)YY 
binFormYY #
.YY# $
DeserializeYY$ /
(YY/ 0
	memStreamYY0 9
)YY9 :
;YY: ;
}ZZ 
if\\ 
(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ #
+^^$ %
data^^& *
+^^+ ,
$str^^- 2
+^^3 4
(^^5 6
$num^^6 9
/^^: ;
data^^< @
)^^@ A
+^^B C
$str^^D H
)^^H I
;^^I J
}__ 
else`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb D
)bbD E
;bbE F
}cc 
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. Y
,ggY Z
exceptSerializegg[ j
)ggj k
;ggk l
}hh 	
}ii 
}kk 
}ll ú)
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_81a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_divide_81a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	E
9CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_base.. A

baseObject..B L
=..M N
new..O RE
8CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_bad	..S ã
(
..ã å
)
..å ç
;
..ç é

baseObject// 
.// 
Action// 
(// 
data// 
,//  
req//! $
,//$ %
resp//& *
)//* +
;//+ ,
}00 
public33 

override33 
void33 
Good33 
(33 
HttpRequest33 )
req33* -
,33- .
HttpResponse33/ ;
resp33< @
)33@ A
{44 
GoodG2B55 
(55 
req55 
,55 
resp55 
)55 
;55 
GoodB2G66 
(66 
req66 
,66 
resp66 
)66 
;66 
}77 
private:: 
void:: 
GoodG2B:: 
(:: 
HttpRequest:: $
req::% (
,::( )
HttpResponse::* 6
resp::7 ;
)::; <
{;; 
int<< 
data<< 
;<< 
data>> 
=>> 
$num>> 
;>> E
9CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_base?? A

baseObject??B L
=??M N
new??O RI
<CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_goodG2B	??S è
(
??è ê
)
??ê ë
;
??ë í

baseObject@@ 
.@@ 
Action@@ 
(@@ 
data@@ 
,@@  
req@@! $
,@@$ %
resp@@& *
)@@* +
;@@+ ,
}AA 
privateDD 
voidDD 
GoodB2GDD 
(DD 
HttpRequestDD $
reqDD% (
,DD( )
HttpResponseDD* 6
respDD7 ;
)DD; <
{EE 
intFF 
dataFF 
;FF 
dataGG 
=GG 
intGG 
.GG 
MinValueGG 
;GG 
{II 	
ifJJ 
(JJ 
reqJJ 
.JJ 
QueryStringJJ 
[JJ  
$strJJ  $
]JJ$ %
!=JJ& (
nullJJ) -
)JJ- .
{KK 
tryLL 
{MM 
dataNN 
=NN 
intNN 
.NN 
ParseNN $
(NN$ %
reqNN% (
.NN( )
QueryStringNN) 4
[NN4 5
$strNN5 9
]NN9 :
)NN: ;
;NN; <
}OO 
catchPP 
(PP 
FormatExceptionPP &
exceptNumberFormatPP' 9
)PP9 :
{QQ 
IORR 
.RR 
LoggerRR 
.RR 
LogRR !
(RR! "
NLogRR" &
.RR& '
LogLevelRR' /
.RR/ 0
WarnRR0 4
,RR4 5
exceptNumberFormatRR6 H
,RRH I
$str	RRJ Ä
)
RRÄ Å
;
RRÅ Ç
}SS 
}TT 
}UU 	E
9CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_baseVV A

baseObjectVVB L
=VVM N
newVVO RI
<CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_goodB2G	VVS è
(
VVè ê
)
VVê ë
;
VVë í

baseObjectWW 
.WW 
ActionWW 
(WW 
dataWW 
,WW  
reqWW! $
,WW$ %
respWW& *
)WW* +
;WW+ ,
}XX 
}ZZ 
}[[ Œ
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_bad.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class D
8CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_bad >
:? @E
9CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_baseA z
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
}"" 
}## …
≤C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_base.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
abstract 
class	 E
9CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_base H
{ 
public 

abstract 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
;N O
} 
} ˚

µC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_goodB2G.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class H
<CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_goodB2G B
:C DE
9CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_baseE ~
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
if   

(   
data   
!=   
$num   
)   
{!! 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
/""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
IO&& 
.&& 
	WriteLine&& 
(&& 
$str&& @
)&&@ A
;&&A B
}'' 	
}(( 
})) 
}** ÷
µC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_goodG2B.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class H
<CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_goodG2B B
:C DE
9CWE369_Divide_by_Zero__int_QueryString_Web_divide_81_baseE ~
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
}## 
}$$ √(
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_01.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_01 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
try%% 
{&& 
data'' 
='' 
int'' 
.'' 
Parse'' $
(''$ %
req''% (
.''( )
QueryString'') 4
[''4 5
$str''5 9
]''9 :
)'': ;
;''; <
}(( 
catch)) 
()) 
FormatException)) &
exceptNumberFormat))' 9
)))9 :
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ !
(++! "
NLog++" &
.++& '
LogLevel++' /
.++/ 0
Warn++0 4
,++4 5
exceptNumberFormat++6 H
,++H I
$str	++J Ä
)
++Ä Å
;
++Å Ç
},, 
}-- 
}.. 	
IO11 

.11
 
	WriteLine11 
(11 
$str11 
+11 
data11 "
+11# $
$str11% *
+11+ ,
(11- .
$num11. 1
%112 3
data114 8
)118 9
+11: ;
$str11< @
)11@ A
;11A B
}22 
public55 

override55 
void55 
Good55 
(55 
HttpRequest55 )
req55* -
,55- .
HttpResponse55/ ;
resp55< @
)55@ A
{66 
GoodG2B77 
(77 
req77 
,77 
resp77 
)77 
;77 
GoodB2G88 
(88 
req88 
,88 
resp88 
)88 
;88 
}99 
private<< 
void<< 
GoodG2B<< 
(<< 
HttpRequest<< $
req<<% (
,<<( )
HttpResponse<<* 6
resp<<7 ;
)<<; <
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
$num@@ 
;@@ 
IOCC 

.CC
 
	WriteLineCC 
(CC 
$strCC 
+CC 
dataCC "
+CC# $
$strCC% *
+CC+ ,
(CC- .
$numCC. 1
%CC2 3
dataCC4 8
)CC8 9
+CC: ;
$strCC< @
)CC@ A
;CCA B
}DD 
privateGG 
voidGG 
GoodB2GGG 
(GG 
HttpRequestGG $
reqGG% (
,GG( )
HttpResponseGG* 6
respGG7 ;
)GG; <
{HH 
intII 
dataII 
;II 
dataJJ 
=JJ 
intJJ 
.JJ 
MinValueJJ 
;JJ 
{LL 	
ifMM 
(MM 
reqMM 
.MM 
QueryStringMM 
[MM  
$strMM  $
]MM$ %
!=MM& (
nullMM) -
)MM- .
{NN 
tryOO 
{PP 
dataQQ 
=QQ 
intQQ 
.QQ 
ParseQQ $
(QQ$ %
reqQQ% (
.QQ( )
QueryStringQQ) 4
[QQ4 5
$strQQ5 9
]QQ9 :
)QQ: ;
;QQ; <
}RR 
catchSS 
(SS 
FormatExceptionSS &
exceptNumberFormatSS' 9
)SS9 :
{TT 
IOUU 
.UU 
LoggerUU 
.UU 
LogUU !
(UU! "
NLogUU" &
.UU& '
LogLevelUU' /
.UU/ 0
WarnUU0 4
,UU4 5
exceptNumberFormatUU6 H
,UUH I
$str	UUJ Ä
)
UUÄ Å
;
UUÅ Ç
}VV 
}WW 
}XX 	
ifZZ 

(ZZ 
dataZZ 
!=ZZ 
$numZZ 
)ZZ 
{[[ 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ 
+\\  !
data\\" &
+\\' (
$str\\) .
+\\/ 0
(\\1 2
$num\\2 5
%\\6 7
data\\8 <
)\\< =
+\\> ?
$str\\@ D
)\\D E
;\\E F
}]] 	
else^^ 
{__ 	
IO`` 
.`` 
	WriteLine`` 
(`` 
$str`` @
)``@ A
;``A B
}aa 	
}bb 
}dd 
}ee ÊO
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_02.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_02 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
true   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88 
true88 
)88 
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< 
+<<  !
data<<" &
+<<' (
$str<<) .
+<</ 0
(<<1 2
$num<<2 5
%<<6 7
data<<8 <
)<<< =
+<<> ?
$str<<@ D
)<<D E
;<<E F
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
falseEE 
)EE 
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
truePP 
)PP 
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT 
+TT  !
dataTT" &
+TT' (
$strTT) .
+TT/ 0
(TT1 2
$numTT2 5
%TT6 7
dataTT8 <
)TT< =
+TT> ?
$strTT@ D
)TTD E
;TTE F
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
true\\ 
)\\ 
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
truegg 
)gg 
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk 
+kk  !
datakk" &
+kk' (
$strkk) .
+kk/ 0
(kk1 2
$numkk2 5
%kk6 7
datakk8 <
)kk< =
+kk> ?
$strkk@ D
)kkD E
;kkE F
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
truess 
)ss 
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
false
ãã 
)
ãã 
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
%
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
true
¢¢ 
)
¢¢ 
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
true
∫∫ 
)
∫∫ 
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
%
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— ƒR
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_03.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_03 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
$num   
==   
$num   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88 
$num88 
==88 
$num88 
)88 
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< 
+<<  !
data<<" &
+<<' (
$str<<) .
+<</ 0
(<<1 2
$num<<2 5
%<<6 7
data<<8 <
)<<< =
+<<> ?
$str<<@ D
)<<D E
;<<E F
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
$numEE 
!=EE 
$numEE 
)EE 
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
$numPP 
==PP 
$numPP 
)PP 
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT 
+TT  !
dataTT" &
+TT' (
$strTT) .
+TT/ 0
(TT1 2
$numTT2 5
%TT6 7
dataTT8 <
)TT< =
+TT> ?
$strTT@ D
)TTD E
;TTE F
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
$num\\ 
==\\ 
$num\\ 
)\\ 
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
$numgg 
==gg 
$numgg 
)gg 
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk 
+kk  !
datakk" &
+kk' (
$strkk) .
+kk/ 0
(kk1 2
$numkk2 5
%kk6 7
datakk8 <
)kk< =
+kk> ?
$strkk@ D
)kkD E
;kkE F
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
$numss 
==ss 
$numss 
)ss 
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
$num
ãã 
!=
ãã 
$num
ãã 
)
ãã 
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
%
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
$num
¢¢ 
==
¢¢ 
$num
¢¢ 
)
¢¢ 
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
$num
∫∫ 
==
∫∫ 
$num
∫∫ 
)
∫∫ 
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
%
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— ∏S
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_04.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_04 :
:; <
AbstractTestCaseWeb= P
{ 
private!! 
const!! 
bool!! 
PRIVATE_CONST_TRUE!! )
=!!* +
true!!, 0
;!!0 1
private"" 
const"" 
bool"" 
PRIVATE_CONST_FALSE"" *
=""+ ,
false""- 2
;""2 3
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
HttpRequest$$ (
req$$) ,
,$$, -
HttpResponse$$. :
resp$$; ?
)$$? @
{%% 
int&& 
data&& 
;&& 
if'' 

('' 
PRIVATE_CONST_TRUE'' 
)'' 
{(( 	
data)) 
=)) 
int)) 
.)) 
MinValue)) 
;))  
{++ 
if,, 
(,, 
req,, 
.,, 
QueryString,, #
[,,# $
$str,,$ (
],,( )
!=,,* ,
null,,- 1
),,1 2
{-- 
try.. 
{// 
data00 
=00 
int00 "
.00" #
Parse00# (
(00( )
req00) ,
.00, -
QueryString00- 8
[008 9
$str009 =
]00= >
)00> ?
;00? @
}11 
catch22 
(22 
FormatException22 *
exceptNumberFormat22+ =
)22= >
{33 
IO44 
.44 
Logger44 !
.44! "
Log44" %
(44% &
NLog44& *
.44* +
LogLevel44+ 3
.443 4
Warn444 8
,448 9
exceptNumberFormat44: L
,44L M
$str	44N Ñ
)
44Ñ Ö
;
44Ö Ü
}55 
}66 
}77 
}88 	
else99 
{:: 	
data== 
=== 
$num== 
;== 
}>> 	
if?? 

(?? 
PRIVATE_CONST_TRUE?? 
)?? 
{@@ 	
IOCC 
.CC 
	WriteLineCC 
(CC 
$strCC 
+CC  !
dataCC" &
+CC' (
$strCC) .
+CC/ 0
(CC1 2
$numCC2 5
%CC6 7
dataCC8 <
)CC< =
+CC> ?
$strCC@ D
)CCD E
;CCE F
}DD 	
}EE 
privateII 
voidII 
GoodG2B1II 
(II 
HttpRequestII %
reqII& )
,II) *
HttpResponseII+ 7
respII8 <
)II< =
{JJ 
intKK 
dataKK 
;KK 
ifLL 

(LL 
PRIVATE_CONST_FALSELL 
)LL  
{MM 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataUU 
=UU 
$numUU 
;UU 
}VV 	
ifWW 

(WW 
PRIVATE_CONST_TRUEWW 
)WW 
{XX 	
IO[[ 
.[[ 
	WriteLine[[ 
([[ 
$str[[ 
+[[  !
data[[" &
+[[' (
$str[[) .
+[[/ 0
([[1 2
$num[[2 5
%[[6 7
data[[8 <
)[[< =
+[[> ?
$str[[@ D
)[[D E
;[[E F
}\\ 	
}]] 
private`` 
void`` 
GoodG2B2`` 
(`` 
HttpRequest`` %
req``& )
,``) *
HttpResponse``+ 7
resp``8 <
)``< =
{aa 
intbb 
databb 
;bb 
ifcc 

(cc 
PRIVATE_CONST_TRUEcc 
)cc 
{dd 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
PRIVATE_CONST_TRUEnn 
)nn 
{oo 	
IOrr 
.rr 
	WriteLinerr 
(rr 
$strrr 
+rr  !
datarr" &
+rr' (
$strrr) .
+rr/ 0
(rr1 2
$numrr2 5
%rr6 7
datarr8 <
)rr< =
+rr> ?
$strrr@ D
)rrD E
;rrE F
}ss 	
}tt 
privateww 
voidww 
GoodB2G1ww 
(ww 
HttpRequestww %
reqww& )
,ww) *
HttpResponseww+ 7
respww8 <
)ww< =
{xx 
intyy 
datayy 
;yy 
ifzz 

(zz 
PRIVATE_CONST_TRUEzz 
)zz 
{{{ 	
data|| 
=|| 
int|| 
.|| 
MinValue|| 
;||  
{~~ 
if 
( 
req 
. 
QueryString #
[# $
$str$ (
]( )
!=* ,
null- 1
)1 2
{
ÄÄ 
try
ÅÅ 
{
ÇÇ 
data
ÉÉ 
=
ÉÉ 
int
ÉÉ "
.
ÉÉ" #
Parse
ÉÉ# (
(
ÉÉ( )
req
ÉÉ) ,
.
ÉÉ, -
QueryString
ÉÉ- 8
[
ÉÉ8 9
$str
ÉÉ9 =
]
ÉÉ= >
)
ÉÉ> ?
;
ÉÉ? @
}
ÑÑ 
catch
ÖÖ 
(
ÖÖ 
FormatException
ÖÖ * 
exceptNumberFormat
ÖÖ+ =
)
ÖÖ= >
{
ÜÜ 
IO
áá 
.
áá 
Logger
áá !
.
áá! "
Log
áá" %
(
áá% &
NLog
áá& *
.
áá* +
LogLevel
áá+ 3
.
áá3 4
Warn
áá4 8
,
áá8 9 
exceptNumberFormat
áá: L
,
ááL M
$strááN Ñ
)ááÑ Ö
;ááÖ Ü
}
àà 
}
ââ 
}
ää 
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí !
PRIVATE_CONST_FALSE
íí 
)
íí  
{
ìì 	
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï /
)
ïï/ 0
;
ïï0 1
}
ññ 	
else
óó 
{
òò 	
if
öö 
(
öö 
data
öö 
!=
öö 
$num
öö 
)
öö 
{
õõ 
IO
úú 
.
úú 
	WriteLine
úú 
(
úú 
$str
úú #
+
úú$ %
data
úú& *
+
úú+ ,
$str
úú- 2
+
úú3 4
(
úú5 6
$num
úú6 9
%
úú: ;
data
úú< @
)
úú@ A
+
úúB C
$str
úúD H
)
úúH I
;
úúI J
}
ùù 
else
ûû 
{
üü 
IO
†† 
.
†† 
	WriteLine
†† 
(
†† 
$str
†† D
)
††D E
;
††E F
}
°° 
}
¢¢ 	
}
££ 
private
¶¶ 
void
¶¶ 
GoodB2G2
¶¶ 
(
¶¶ 
HttpRequest
¶¶ %
req
¶¶& )
,
¶¶) *
HttpResponse
¶¶+ 7
resp
¶¶8 <
)
¶¶< =
{
ßß 
int
®® 
data
®® 
;
®® 
if
©© 

(
©©  
PRIVATE_CONST_TRUE
©© 
)
©© 
{
™™ 	
data
´´ 
=
´´ 
int
´´ 
.
´´ 
MinValue
´´ 
;
´´  
{
≠≠ 
if
ÆÆ 
(
ÆÆ 
req
ÆÆ 
.
ÆÆ 
QueryString
ÆÆ #
[
ÆÆ# $
$str
ÆÆ$ (
]
ÆÆ( )
!=
ÆÆ* ,
null
ÆÆ- 1
)
ÆÆ1 2
{
ØØ 
try
∞∞ 
{
±± 
data
≤≤ 
=
≤≤ 
int
≤≤ "
.
≤≤" #
Parse
≤≤# (
(
≤≤( )
req
≤≤) ,
.
≤≤, -
QueryString
≤≤- 8
[
≤≤8 9
$str
≤≤9 =
]
≤≤= >
)
≤≤> ?
;
≤≤? @
}
≥≥ 
catch
¥¥ 
(
¥¥ 
FormatException
¥¥ * 
exceptNumberFormat
¥¥+ =
)
¥¥= >
{
µµ 
IO
∂∂ 
.
∂∂ 
Logger
∂∂ !
.
∂∂! "
Log
∂∂" %
(
∂∂% &
NLog
∂∂& *
.
∂∂* +
LogLevel
∂∂+ 3
.
∂∂3 4
Warn
∂∂4 8
,
∂∂8 9 
exceptNumberFormat
∂∂: L
,
∂∂L M
$str∂∂N Ñ
)∂∂Ñ Ö
;∂∂Ö Ü
}
∑∑ 
}
∏∏ 
}
ππ 
}
∫∫ 	
else
ªª 
{
ºº 	
data
øø 
=
øø 
$num
øø 
;
øø 
}
¿¿ 	
if
¡¡ 

(
¡¡  
PRIVATE_CONST_TRUE
¡¡ 
)
¡¡ 
{
¬¬ 	
if
ƒƒ 
(
ƒƒ 
data
ƒƒ 
!=
ƒƒ 
$num
ƒƒ 
)
ƒƒ 
{
≈≈ 
IO
∆∆ 
.
∆∆ 
	WriteLine
∆∆ 
(
∆∆ 
$str
∆∆ #
+
∆∆$ %
data
∆∆& *
+
∆∆+ ,
$str
∆∆- 2
+
∆∆3 4
(
∆∆5 6
$num
∆∆6 9
%
∆∆: ;
data
∆∆< @
)
∆∆@ A
+
∆∆B C
$str
∆∆D H
)
∆∆H I
;
∆∆I J
}
«« 
else
»» 
{
…… 
IO
   
.
   
	WriteLine
   
(
   
$str
   D
)
  D E
;
  E F
}
ÀÀ 
}
ÃÃ 	
}
ÕÕ 
public
œœ 

override
œœ 
void
œœ 
Good
œœ 
(
œœ 
HttpRequest
œœ )
req
œœ* -
,
œœ- .
HttpResponse
œœ/ ;
resp
œœ< @
)
œœ@ A
{
–– 
GoodG2B1
—— 
(
—— 
req
—— 
,
—— 
resp
—— 
)
—— 
;
—— 
GoodG2B2
““ 
(
““ 
req
““ 
,
““ 
resp
““ 
)
““ 
;
““ 
GoodB2G1
”” 
(
”” 
req
”” 
,
”” 
resp
”” 
)
”” 
;
”” 
GoodB2G2
‘‘ 
(
‘‘ 
req
‘‘ 
,
‘‘ 
resp
‘‘ 
)
‘‘ 
;
‘‘ 
}
’’ 
}◊◊ 
}ÿÿ ºR
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_05.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_05 :
:; <
AbstractTestCaseWeb= P
{ 
private   
bool   
privateTrue   
=   
true   #
;  # $
private!! 
bool!! 
privateFalse!! 
=!! 
false!!  %
;!!% &
public## 

override## 
void## 
Bad## 
(## 
HttpRequest## (
req##) ,
,##, -
HttpResponse##. :
resp##; ?
)##? @
{$$ 
int%% 
data%% 
;%% 
if&& 

(&& 
privateTrue&& 
)&& 
{'' 	
data(( 
=(( 
int(( 
.(( 
MinValue(( 
;((  
{** 
if++ 
(++ 
req++ 
.++ 
QueryString++ #
[++# $
$str++$ (
]++( )
!=++* ,
null++- 1
)++1 2
{,, 
try-- 
{.. 
data// 
=// 
int// "
.//" #
Parse//# (
(//( )
req//) ,
.//, -
QueryString//- 8
[//8 9
$str//9 =
]//= >
)//> ?
;//? @
}00 
catch11 
(11 
FormatException11 *
exceptNumberFormat11+ =
)11= >
{22 
IO33 
.33 
Logger33 !
.33! "
Log33" %
(33% &
NLog33& *
.33* +
LogLevel33+ 3
.333 4
Warn334 8
,338 9
exceptNumberFormat33: L
,33L M
$str	33N Ñ
)
33Ñ Ö
;
33Ö Ü
}44 
}55 
}66 
}77 	
else88 
{99 	
data<< 
=<< 
$num<< 
;<< 
}== 	
if>> 

(>> 
privateTrue>> 
)>> 
{?? 	
IOBB 
.BB 
	WriteLineBB 
(BB 
$strBB 
+BB  !
dataBB" &
+BB' (
$strBB) .
+BB/ 0
(BB1 2
$numBB2 5
%BB6 7
dataBB8 <
)BB< =
+BB> ?
$strBB@ D
)BBD E
;BBE F
}CC 	
}DD 
privateHH 
voidHH 
GoodG2B1HH 
(HH 
HttpRequestHH %
reqHH& )
,HH) *
HttpResponseHH+ 7
respHH8 <
)HH< =
{II 
intJJ 
dataJJ 
;JJ 
ifKK 

(KK 
privateFalseKK 
)KK 
{LL 	
dataOO 
=OO 
$numOO 
;OO 
}PP 	
elseQQ 
{RR 	
dataTT 
=TT 
$numTT 
;TT 
}UU 	
ifVV 

(VV 
privateTrueVV 
)VV 
{WW 	
IOZZ 
.ZZ 
	WriteLineZZ 
(ZZ 
$strZZ 
+ZZ  !
dataZZ" &
+ZZ' (
$strZZ) .
+ZZ/ 0
(ZZ1 2
$numZZ2 5
%ZZ6 7
dataZZ8 <
)ZZ< =
+ZZ> ?
$strZZ@ D
)ZZD E
;ZZE F
}[[ 	
}\\ 
private__ 
void__ 
GoodG2B2__ 
(__ 
HttpRequest__ %
req__& )
,__) *
HttpResponse__+ 7
resp__8 <
)__< =
{`` 
intaa 
dataaa 
;aa 
ifbb 

(bb 
privateTruebb 
)bb 
{cc 	
dataee 
=ee 
$numee 
;ee 
}ff 	
elsegg 
{hh 	
datakk 
=kk 
$numkk 
;kk 
}ll 	
ifmm 

(mm 
privateTruemm 
)mm 
{nn 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq 
+qq  !
dataqq" &
+qq' (
$strqq) .
+qq/ 0
(qq1 2
$numqq2 5
%qq6 7
dataqq8 <
)qq< =
+qq> ?
$strqq@ D
)qqD E
;qqE F
}rr 	
}ss 
privatevv 
voidvv 
GoodB2G1vv 
(vv 
HttpRequestvv %
reqvv& )
,vv) *
HttpResponsevv+ 7
respvv8 <
)vv< =
{ww 
intxx 
dataxx 
;xx 
ifyy 

(yy 
privateTrueyy 
)yy 
{zz 	
data{{ 
={{ 
int{{ 
.{{ 
MinValue{{ 
;{{  
{}} 
if~~ 
(~~ 
req~~ 
.~~ 
QueryString~~ #
[~~# $
$str~~$ (
]~~( )
!=~~* ,
null~~- 1
)~~1 2
{ 
try
ÄÄ 
{
ÅÅ 
data
ÇÇ 
=
ÇÇ 
int
ÇÇ "
.
ÇÇ" #
Parse
ÇÇ# (
(
ÇÇ( )
req
ÇÇ) ,
.
ÇÇ, -
QueryString
ÇÇ- 8
[
ÇÇ8 9
$str
ÇÇ9 =
]
ÇÇ= >
)
ÇÇ> ?
;
ÇÇ? @
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
FormatException
ÑÑ * 
exceptNumberFormat
ÑÑ+ =
)
ÑÑ= >
{
ÖÖ 
IO
ÜÜ 
.
ÜÜ 
Logger
ÜÜ !
.
ÜÜ! "
Log
ÜÜ" %
(
ÜÜ% &
NLog
ÜÜ& *
.
ÜÜ* +
LogLevel
ÜÜ+ 3
.
ÜÜ3 4
Warn
ÜÜ4 8
,
ÜÜ8 9 
exceptNumberFormat
ÜÜ: L
,
ÜÜL M
$strÜÜN Ñ
)ÜÜÑ Ö
;ÜÜÖ Ü
}
áá 
}
àà 
}
ââ 
}
ää 	
else
ãã 
{
åå 	
data
èè 
=
èè 
$num
èè 
;
èè 
}
êê 	
if
ëë 

(
ëë 
privateFalse
ëë 
)
ëë 
{
íí 	
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî /
)
îî/ 0
;
îî0 1
}
ïï 	
else
ññ 
{
óó 	
if
ôô 
(
ôô 
data
ôô 
!=
ôô 
$num
ôô 
)
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ #
+
õõ$ %
data
õõ& *
+
õõ+ ,
$str
õõ- 2
+
õõ3 4
(
õõ5 6
$num
õõ6 9
%
õõ: ;
data
õõ< @
)
õõ@ A
+
õõB C
$str
õõD H
)
õõH I
;
õõI J
}
úú 
else
ùù 
{
ûû 
IO
üü 
.
üü 
	WriteLine
üü 
(
üü 
$str
üü D
)
üüD E
;
üüE F
}
†† 
}
°° 	
}
¢¢ 
private
•• 
void
•• 
GoodB2G2
•• 
(
•• 
HttpRequest
•• %
req
••& )
,
••) *
HttpResponse
••+ 7
resp
••8 <
)
••< =
{
¶¶ 
int
ßß 
data
ßß 
;
ßß 
if
®® 

(
®® 
privateTrue
®® 
)
®® 
{
©© 	
data
™™ 
=
™™ 
int
™™ 
.
™™ 
MinValue
™™ 
;
™™  
{
¨¨ 
if
≠≠ 
(
≠≠ 
req
≠≠ 
.
≠≠ 
QueryString
≠≠ #
[
≠≠# $
$str
≠≠$ (
]
≠≠( )
!=
≠≠* ,
null
≠≠- 1
)
≠≠1 2
{
ÆÆ 
try
ØØ 
{
∞∞ 
data
±± 
=
±± 
int
±± "
.
±±" #
Parse
±±# (
(
±±( )
req
±±) ,
.
±±, -
QueryString
±±- 8
[
±±8 9
$str
±±9 =
]
±±= >
)
±±> ?
;
±±? @
}
≤≤ 
catch
≥≥ 
(
≥≥ 
FormatException
≥≥ * 
exceptNumberFormat
≥≥+ =
)
≥≥= >
{
¥¥ 
IO
µµ 
.
µµ 
Logger
µµ !
.
µµ! "
Log
µµ" %
(
µµ% &
NLog
µµ& *
.
µµ* +
LogLevel
µµ+ 3
.
µµ3 4
Warn
µµ4 8
,
µµ8 9 
exceptNumberFormat
µµ: L
,
µµL M
$strµµN Ñ
)µµÑ Ö
;µµÖ Ü
}
∂∂ 
}
∑∑ 
}
∏∏ 
}
ππ 	
else
∫∫ 
{
ªª 	
data
ææ 
=
ææ 
$num
ææ 
;
ææ 
}
øø 	
if
¿¿ 

(
¿¿ 
privateTrue
¿¿ 
)
¿¿ 
{
¡¡ 	
if
√√ 
(
√√ 
data
√√ 
!=
√√ 
$num
√√ 
)
√√ 
{
ƒƒ 
IO
≈≈ 
.
≈≈ 
	WriteLine
≈≈ 
(
≈≈ 
$str
≈≈ #
+
≈≈$ %
data
≈≈& *
+
≈≈+ ,
$str
≈≈- 2
+
≈≈3 4
(
≈≈5 6
$num
≈≈6 9
%
≈≈: ;
data
≈≈< @
)
≈≈@ A
+
≈≈B C
$str
≈≈D H
)
≈≈H I
;
≈≈I J
}
∆∆ 
else
«« 
{
»» 
IO
…… 
.
…… 
	WriteLine
…… 
(
…… 
$str
…… D
)
……D E
;
……E F
}
   
}
ÀÀ 	
}
ÃÃ 
public
ŒŒ 

override
ŒŒ 
void
ŒŒ 
Good
ŒŒ 
(
ŒŒ 
HttpRequest
ŒŒ )
req
ŒŒ* -
,
ŒŒ- .
HttpResponse
ŒŒ/ ;
resp
ŒŒ< @
)
ŒŒ@ A
{
œœ 
GoodG2B1
–– 
(
–– 
req
–– 
,
–– 
resp
–– 
)
–– 
;
–– 
GoodG2B2
—— 
(
—— 
req
—— 
,
—— 
resp
—— 
)
—— 
;
—— 
GoodB2G1
““ 
(
““ 
req
““ 
,
““ 
resp
““ 
)
““ 
;
““ 
GoodB2G2
”” 
(
”” 
req
”” 
,
”” 
resp
”” 
)
”” 
;
”” 
}
‘‘ 
}÷÷ 
}◊◊ ÖU
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_06.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_06 :
:; <
AbstractTestCaseWeb= P
{ 
private   
const   
int   
PRIVATE_CONST_FIVE   (
=  ) *
$num  + ,
;  , -
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
int$$ 
data$$ 
;$$ 
if%% 

(%% 
PRIVATE_CONST_FIVE%% 
==%%  
$num%%  !
)%%! "
{&& 	
data'' 
='' 
int'' 
.'' 
MinValue'' 
;''  
{)) 
if** 
(** 
req** 
.** 
QueryString** #
[**# $
$str**$ (
]**( )
!=*** ,
null**- 1
)**1 2
{++ 
try,, 
{-- 
data.. 
=.. 
int.. "
..." #
Parse..# (
(..( )
req..) ,
..., -
QueryString..- 8
[..8 9
$str..9 =
]..= >
)..> ?
;..? @
}// 
catch00 
(00 
FormatException00 *
exceptNumberFormat00+ =
)00= >
{11 
IO22 
.22 
Logger22 !
.22! "
Log22" %
(22% &
NLog22& *
.22* +
LogLevel22+ 3
.223 4
Warn224 8
,228 9
exceptNumberFormat22: L
,22L M
$str	22N Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
}66 	
else77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
if== 

(== 
PRIVATE_CONST_FIVE== 
====  
$num==  !
)==! "
{>> 	
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA 
+AA  !
dataAA" &
+AA' (
$strAA) .
+AA/ 0
(AA1 2
$numAA2 5
%AA6 7
dataAA8 <
)AA< =
+AA> ?
$strAA@ D
)AAD E
;AAE F
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
HttpRequestGG %
reqGG& )
,GG) *
HttpResponseGG+ 7
respGG8 <
)GG< =
{HH 
intII 
dataII 
;II 
ifJJ 

(JJ 
PRIVATE_CONST_FIVEJJ 
!=JJ  
$numJJ  !
)JJ! "
{KK 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
ifUU 

(UU 
PRIVATE_CONST_FIVEUU 
==UU  
$numUU  !
)UU! "
{VV 	
IOYY 
.YY 
	WriteLineYY 
(YY 
$strYY 
+YY  !
dataYY" &
+YY' (
$strYY) .
+YY/ 0
(YY1 2
$numYY2 5
%YY6 7
dataYY8 <
)YY< =
+YY> ?
$strYY@ D
)YYD E
;YYE F
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
int`` 
data`` 
;`` 
ifaa 

(aa 
PRIVATE_CONST_FIVEaa 
==aa  
$numaa  !
)aa! "
{bb 	
datadd 
=dd 
$numdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
$numjj 
;jj 
}kk 	
ifll 

(ll 
PRIVATE_CONST_FIVEll 
==ll  
$numll  !
)ll! "
{mm 	
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp 
+pp  !
datapp" &
+pp' (
$strpp) .
+pp/ 0
(pp1 2
$numpp2 5
%pp6 7
datapp8 <
)pp< =
+pp> ?
$strpp@ D
)ppD E
;ppE F
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
intww 
dataww 
;ww 
ifxx 

(xx 
PRIVATE_CONST_FIVExx 
==xx  
$numxx  !
)xx! "
{yy 	
datazz 
=zz 
intzz 
.zz 
MinValuezz 
;zz  
{|| 
if}} 
(}} 
req}} 
.}} 
QueryString}} #
[}}# $
$str}}$ (
]}}( )
!=}}* ,
null}}- 1
)}}1 2
{~~ 
try 
{
ÄÄ 
data
ÅÅ 
=
ÅÅ 
int
ÅÅ "
.
ÅÅ" #
Parse
ÅÅ# (
(
ÅÅ( )
req
ÅÅ) ,
.
ÅÅ, -
QueryString
ÅÅ- 8
[
ÅÅ8 9
$str
ÅÅ9 =
]
ÅÅ= >
)
ÅÅ> ?
;
ÅÅ? @
}
ÇÇ 
catch
ÉÉ 
(
ÉÉ 
FormatException
ÉÉ * 
exceptNumberFormat
ÉÉ+ =
)
ÉÉ= >
{
ÑÑ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ !
.
ÖÖ! "
Log
ÖÖ" %
(
ÖÖ% &
NLog
ÖÖ& *
.
ÖÖ* +
LogLevel
ÖÖ+ 3
.
ÖÖ3 4
Warn
ÖÖ4 8
,
ÖÖ8 9 
exceptNumberFormat
ÖÖ: L
,
ÖÖL M
$strÖÖN Ñ
)ÖÖÑ Ö
;ÖÖÖ Ü
}
ÜÜ 
}
áá 
}
àà 
}
ââ 	
else
ää 
{
ãã 	
data
éé 
=
éé 
$num
éé 
;
éé 
}
èè 	
if
êê 

(
êê  
PRIVATE_CONST_FIVE
êê 
!=
êê  
$num
êê  !
)
êê! "
{
ëë 	
IO
ìì 
.
ìì 
	WriteLine
ìì 
(
ìì 
$str
ìì /
)
ìì/ 0
;
ìì0 1
}
îî 	
else
ïï 
{
ññ 	
if
òò 
(
òò 
data
òò 
!=
òò 
$num
òò 
)
òò 
{
ôô 
IO
öö 
.
öö 
	WriteLine
öö 
(
öö 
$str
öö #
+
öö$ %
data
öö& *
+
öö+ ,
$str
öö- 2
+
öö3 4
(
öö5 6
$num
öö6 9
%
öö: ;
data
öö< @
)
öö@ A
+
ööB C
$str
ööD H
)
ööH I
;
ööI J
}
õõ 
else
úú 
{
ùù 
IO
ûû 
.
ûû 
	WriteLine
ûû 
(
ûû 
$str
ûû D
)
ûûD E
;
ûûE F
}
üü 
}
†† 	
}
°° 
private
§§ 
void
§§ 
GoodB2G2
§§ 
(
§§ 
HttpRequest
§§ %
req
§§& )
,
§§) *
HttpResponse
§§+ 7
resp
§§8 <
)
§§< =
{
•• 
int
¶¶ 
data
¶¶ 
;
¶¶ 
if
ßß 

(
ßß  
PRIVATE_CONST_FIVE
ßß 
==
ßß  
$num
ßß  !
)
ßß! "
{
®® 	
data
©© 
=
©© 
int
©© 
.
©© 
MinValue
©© 
;
©©  
{
´´ 
if
¨¨ 
(
¨¨ 
req
¨¨ 
.
¨¨ 
QueryString
¨¨ #
[
¨¨# $
$str
¨¨$ (
]
¨¨( )
!=
¨¨* ,
null
¨¨- 1
)
¨¨1 2
{
≠≠ 
try
ÆÆ 
{
ØØ 
data
∞∞ 
=
∞∞ 
int
∞∞ "
.
∞∞" #
Parse
∞∞# (
(
∞∞( )
req
∞∞) ,
.
∞∞, -
QueryString
∞∞- 8
[
∞∞8 9
$str
∞∞9 =
]
∞∞= >
)
∞∞> ?
;
∞∞? @
}
±± 
catch
≤≤ 
(
≤≤ 
FormatException
≤≤ * 
exceptNumberFormat
≤≤+ =
)
≤≤= >
{
≥≥ 
IO
¥¥ 
.
¥¥ 
Logger
¥¥ !
.
¥¥! "
Log
¥¥" %
(
¥¥% &
NLog
¥¥& *
.
¥¥* +
LogLevel
¥¥+ 3
.
¥¥3 4
Warn
¥¥4 8
,
¥¥8 9 
exceptNumberFormat
¥¥: L
,
¥¥L M
$str¥¥N Ñ
)¥¥Ñ Ö
;¥¥Ö Ü
}
µµ 
}
∂∂ 
}
∑∑ 
}
∏∏ 	
else
ππ 
{
∫∫ 	
data
ΩΩ 
=
ΩΩ 
$num
ΩΩ 
;
ΩΩ 
}
ææ 	
if
øø 

(
øø  
PRIVATE_CONST_FIVE
øø 
==
øø  
$num
øø  !
)
øø! "
{
¿¿ 	
if
¬¬ 
(
¬¬ 
data
¬¬ 
!=
¬¬ 
$num
¬¬ 
)
¬¬ 
{
√√ 
IO
ƒƒ 
.
ƒƒ 
	WriteLine
ƒƒ 
(
ƒƒ 
$str
ƒƒ #
+
ƒƒ$ %
data
ƒƒ& *
+
ƒƒ+ ,
$str
ƒƒ- 2
+
ƒƒ3 4
(
ƒƒ5 6
$num
ƒƒ6 9
%
ƒƒ: ;
data
ƒƒ< @
)
ƒƒ@ A
+
ƒƒB C
$str
ƒƒD H
)
ƒƒH I
;
ƒƒI J
}
≈≈ 
else
∆∆ 
{
«« 
IO
»» 
.
»» 
	WriteLine
»» 
(
»» 
$str
»» D
)
»»D E
;
»»E F
}
…… 
}
   	
}
ÀÀ 
public
ÕÕ 

override
ÕÕ 
void
ÕÕ 
Good
ÕÕ 
(
ÕÕ 
HttpRequest
ÕÕ )
req
ÕÕ* -
,
ÕÕ- .
HttpResponse
ÕÕ/ ;
resp
ÕÕ< @
)
ÕÕ@ A
{
ŒŒ 
GoodG2B1
œœ 
(
œœ 
req
œœ 
,
œœ 
resp
œœ 
)
œœ 
;
œœ 
GoodG2B2
–– 
(
–– 
req
–– 
,
–– 
resp
–– 
)
–– 
;
–– 
GoodB2G1
—— 
(
—— 
req
—— 
,
—— 
resp
—— 
)
—— 
;
—— 
GoodB2G2
““ 
(
““ 
req
““ 
,
““ 
resp
““ 
)
““ 
;
““ 
}
”” 
}’’ 
}÷÷ •T
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_07.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_07 :
:; <
AbstractTestCaseWeb= P
{ 
private   
int   
privateFive   
=   
$num   
;    
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
int$$ 
data$$ 
;$$ 
if%% 

(%% 
privateFive%% 
==%% 
$num%% 
)%% 
{&& 	
data'' 
='' 
int'' 
.'' 
MinValue'' 
;''  
{)) 
if** 
(** 
req** 
.** 
QueryString** #
[**# $
$str**$ (
]**( )
!=*** ,
null**- 1
)**1 2
{++ 
try,, 
{-- 
data.. 
=.. 
int.. "
..." #
Parse..# (
(..( )
req..) ,
..., -
QueryString..- 8
[..8 9
$str..9 =
]..= >
)..> ?
;..? @
}// 
catch00 
(00 
FormatException00 *
exceptNumberFormat00+ =
)00= >
{11 
IO22 
.22 
Logger22 !
.22! "
Log22" %
(22% &
NLog22& *
.22* +
LogLevel22+ 3
.223 4
Warn224 8
,228 9
exceptNumberFormat22: L
,22L M
$str	22N Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
}66 	
else77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
if== 

(== 
privateFive== 
==== 
$num== 
)== 
{>> 	
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA 
+AA  !
dataAA" &
+AA' (
$strAA) .
+AA/ 0
(AA1 2
$numAA2 5
%AA6 7
dataAA8 <
)AA< =
+AA> ?
$strAA@ D
)AAD E
;AAE F
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
HttpRequestGG %
reqGG& )
,GG) *
HttpResponseGG+ 7
respGG8 <
)GG< =
{HH 
intII 
dataII 
;II 
ifJJ 

(JJ 
privateFiveJJ 
!=JJ 
$numJJ 
)JJ 
{KK 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
ifUU 

(UU 
privateFiveUU 
==UU 
$numUU 
)UU 
{VV 	
IOYY 
.YY 
	WriteLineYY 
(YY 
$strYY 
+YY  !
dataYY" &
+YY' (
$strYY) .
+YY/ 0
(YY1 2
$numYY2 5
%YY6 7
dataYY8 <
)YY< =
+YY> ?
$strYY@ D
)YYD E
;YYE F
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
int`` 
data`` 
;`` 
ifaa 

(aa 
privateFiveaa 
==aa 
$numaa 
)aa 
{bb 	
datadd 
=dd 
$numdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
$numjj 
;jj 
}kk 	
ifll 

(ll 
privateFivell 
==ll 
$numll 
)ll 
{mm 	
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp 
+pp  !
datapp" &
+pp' (
$strpp) .
+pp/ 0
(pp1 2
$numpp2 5
%pp6 7
datapp8 <
)pp< =
+pp> ?
$strpp@ D
)ppD E
;ppE F
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
intww 
dataww 
;ww 
ifxx 

(xx 
privateFivexx 
==xx 
$numxx 
)xx 
{yy 	
datazz 
=zz 
intzz 
.zz 
MinValuezz 
;zz  
{|| 
if}} 
(}} 
req}} 
.}} 
QueryString}} #
[}}# $
$str}}$ (
]}}( )
!=}}* ,
null}}- 1
)}}1 2
{~~ 
try 
{
ÄÄ 
data
ÅÅ 
=
ÅÅ 
int
ÅÅ "
.
ÅÅ" #
Parse
ÅÅ# (
(
ÅÅ( )
req
ÅÅ) ,
.
ÅÅ, -
QueryString
ÅÅ- 8
[
ÅÅ8 9
$str
ÅÅ9 =
]
ÅÅ= >
)
ÅÅ> ?
;
ÅÅ? @
}
ÇÇ 
catch
ÉÉ 
(
ÉÉ 
FormatException
ÉÉ * 
exceptNumberFormat
ÉÉ+ =
)
ÉÉ= >
{
ÑÑ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ !
.
ÖÖ! "
Log
ÖÖ" %
(
ÖÖ% &
NLog
ÖÖ& *
.
ÖÖ* +
LogLevel
ÖÖ+ 3
.
ÖÖ3 4
Warn
ÖÖ4 8
,
ÖÖ8 9 
exceptNumberFormat
ÖÖ: L
,
ÖÖL M
$strÖÖN Ñ
)ÖÖÑ Ö
;ÖÖÖ Ü
}
ÜÜ 
}
áá 
}
àà 
}
ââ 	
else
ää 
{
ãã 	
data
éé 
=
éé 
$num
éé 
;
éé 
}
èè 	
if
êê 

(
êê 
privateFive
êê 
!=
êê 
$num
êê 
)
êê 
{
ëë 	
IO
ìì 
.
ìì 
	WriteLine
ìì 
(
ìì 
$str
ìì /
)
ìì/ 0
;
ìì0 1
}
îî 	
else
ïï 
{
ññ 	
if
òò 
(
òò 
data
òò 
!=
òò 
$num
òò 
)
òò 
{
ôô 
IO
öö 
.
öö 
	WriteLine
öö 
(
öö 
$str
öö #
+
öö$ %
data
öö& *
+
öö+ ,
$str
öö- 2
+
öö3 4
(
öö5 6
$num
öö6 9
%
öö: ;
data
öö< @
)
öö@ A
+
ööB C
$str
ööD H
)
ööH I
;
ööI J
}
õõ 
else
úú 
{
ùù 
IO
ûû 
.
ûû 
	WriteLine
ûû 
(
ûû 
$str
ûû D
)
ûûD E
;
ûûE F
}
üü 
}
†† 	
}
°° 
private
§§ 
void
§§ 
GoodB2G2
§§ 
(
§§ 
HttpRequest
§§ %
req
§§& )
,
§§) *
HttpResponse
§§+ 7
resp
§§8 <
)
§§< =
{
•• 
int
¶¶ 
data
¶¶ 
;
¶¶ 
if
ßß 

(
ßß 
privateFive
ßß 
==
ßß 
$num
ßß 
)
ßß 
{
®® 	
data
©© 
=
©© 
int
©© 
.
©© 
MinValue
©© 
;
©©  
{
´´ 
if
¨¨ 
(
¨¨ 
req
¨¨ 
.
¨¨ 
QueryString
¨¨ #
[
¨¨# $
$str
¨¨$ (
]
¨¨( )
!=
¨¨* ,
null
¨¨- 1
)
¨¨1 2
{
≠≠ 
try
ÆÆ 
{
ØØ 
data
∞∞ 
=
∞∞ 
int
∞∞ "
.
∞∞" #
Parse
∞∞# (
(
∞∞( )
req
∞∞) ,
.
∞∞, -
QueryString
∞∞- 8
[
∞∞8 9
$str
∞∞9 =
]
∞∞= >
)
∞∞> ?
;
∞∞? @
}
±± 
catch
≤≤ 
(
≤≤ 
FormatException
≤≤ * 
exceptNumberFormat
≤≤+ =
)
≤≤= >
{
≥≥ 
IO
¥¥ 
.
¥¥ 
Logger
¥¥ !
.
¥¥! "
Log
¥¥" %
(
¥¥% &
NLog
¥¥& *
.
¥¥* +
LogLevel
¥¥+ 3
.
¥¥3 4
Warn
¥¥4 8
,
¥¥8 9 
exceptNumberFormat
¥¥: L
,
¥¥L M
$str¥¥N Ñ
)¥¥Ñ Ö
;¥¥Ö Ü
}
µµ 
}
∂∂ 
}
∑∑ 
}
∏∏ 	
else
ππ 
{
∫∫ 	
data
ΩΩ 
=
ΩΩ 
$num
ΩΩ 
;
ΩΩ 
}
ææ 	
if
øø 

(
øø 
privateFive
øø 
==
øø 
$num
øø 
)
øø 
{
¿¿ 	
if
¬¬ 
(
¬¬ 
data
¬¬ 
!=
¬¬ 
$num
¬¬ 
)
¬¬ 
{
√√ 
IO
ƒƒ 
.
ƒƒ 
	WriteLine
ƒƒ 
(
ƒƒ 
$str
ƒƒ #
+
ƒƒ$ %
data
ƒƒ& *
+
ƒƒ+ ,
$str
ƒƒ- 2
+
ƒƒ3 4
(
ƒƒ5 6
$num
ƒƒ6 9
%
ƒƒ: ;
data
ƒƒ< @
)
ƒƒ@ A
+
ƒƒB C
$str
ƒƒD H
)
ƒƒH I
;
ƒƒI J
}
≈≈ 
else
∆∆ 
{
«« 
IO
»» 
.
»» 
	WriteLine
»» 
(
»» 
$str
»» D
)
»»D E
;
»»E F
}
…… 
}
   	
}
ÀÀ 
public
ÕÕ 

override
ÕÕ 
void
ÕÕ 
Good
ÕÕ 
(
ÕÕ 
HttpRequest
ÕÕ )
req
ÕÕ* -
,
ÕÕ- .
HttpResponse
ÕÕ/ ;
resp
ÕÕ< @
)
ÕÕ@ A
{
ŒŒ 
GoodG2B1
œœ 
(
œœ 
req
œœ 
,
œœ 
resp
œœ 
)
œœ 
;
œœ 
GoodG2B2
–– 
(
–– 
req
–– 
,
–– 
resp
–– 
)
–– 
;
–– 
GoodB2G1
—— 
(
—— 
req
—— 
,
—— 
resp
—— 
)
—— 
;
—— 
GoodB2G2
““ 
(
““ 
req
““ 
,
““ 
resp
““ 
)
““ 
;
““ 
}
”” 
}’’ 
}÷÷ ¶W
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_08.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_08 :
:; <
AbstractTestCaseWeb= P
{ 
private   
static   
bool   
PrivateReturnsTrue   *
(  * +
)  + ,
{!! 
return"" 
true"" 
;"" 
}## 
private%% 
static%% 
bool%% 
PrivateReturnsFalse%% +
(%%+ ,
)%%, -
{&& 
return'' 
false'' 
;'' 
}(( 
public** 

override** 
void** 
Bad** 
(** 
HttpRequest** (
req**) ,
,**, -
HttpResponse**. :
resp**; ?
)**? @
{++ 
int,, 
data,, 
;,, 
if-- 

(-- 
PrivateReturnsTrue-- 
(-- 
)--  
)--  !
{.. 	
data// 
=// 
int// 
.// 
MinValue// 
;//  
{11 
if22 
(22 
req22 
.22 
QueryString22 #
[22# $
$str22$ (
]22( )
!=22* ,
null22- 1
)221 2
{33 
try44 
{55 
data66 
=66 
int66 "
.66" #
Parse66# (
(66( )
req66) ,
.66, -
QueryString66- 8
[668 9
$str669 =
]66= >
)66> ?
;66? @
}77 
catch88 
(88 
FormatException88 *
exceptNumberFormat88+ =
)88= >
{99 
IO:: 
.:: 
Logger:: !
.::! "
Log::" %
(::% &
NLog::& *
.::* +
LogLevel::+ 3
.::3 4
Warn::4 8
,::8 9
exceptNumberFormat::: L
,::L M
$str	::N Ñ
)
::Ñ Ö
;
::Ö Ü
};; 
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataCC 
=CC 
$numCC 
;CC 
}DD 	
ifEE 

(EE 
PrivateReturnsTrueEE 
(EE 
)EE  
)EE  !
{FF 	
IOII 
.II 
	WriteLineII 
(II 
$strII 
+II  !
dataII" &
+II' (
$strII) .
+II/ 0
(II1 2
$numII2 5
%II6 7
dataII8 <
)II< =
+II> ?
$strII@ D
)IID E
;IIE F
}JJ 	
}KK 
privateOO 
voidOO 
GoodG2B1OO 
(OO 
HttpRequestOO %
reqOO& )
,OO) *
HttpResponseOO+ 7
respOO8 <
)OO< =
{PP 
intQQ 
dataQQ 
;QQ 
ifRR 

(RR 
PrivateReturnsFalseRR 
(RR  
)RR  !
)RR! "
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
elseXX 
{YY 	
data[[ 
=[[ 
$num[[ 
;[[ 
}\\ 	
if]] 

(]] 
PrivateReturnsTrue]] 
(]] 
)]]  
)]]  !
{^^ 	
IOaa 
.aa 
	WriteLineaa 
(aa 
$straa 
+aa  !
dataaa" &
+aa' (
$straa) .
+aa/ 0
(aa1 2
$numaa2 5
%aa6 7
dataaa8 <
)aa< =
+aa> ?
$straa@ D
)aaD E
;aaE F
}bb 	
}cc 
privateff 
voidff 
GoodG2B2ff 
(ff 
HttpRequestff %
reqff& )
,ff) *
HttpResponseff+ 7
respff8 <
)ff< =
{gg 
inthh 
datahh 
;hh 
ifii 

(ii 
PrivateReturnsTrueii 
(ii 
)ii  
)ii  !
{jj 	
datall 
=ll 
$numll 
;ll 
}mm 	
elsenn 
{oo 	
datarr 
=rr 
$numrr 
;rr 
}ss 	
iftt 

(tt 
PrivateReturnsTruett 
(tt 
)tt  
)tt  !
{uu 	
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx 
+xx  !
dataxx" &
+xx' (
$strxx) .
+xx/ 0
(xx1 2
$numxx2 5
%xx6 7
dataxx8 <
)xx< =
+xx> ?
$strxx@ D
)xxD E
;xxE F
}yy 	
}zz 
private}} 
void}} 
GoodB2G1}} 
(}} 
HttpRequest}} %
req}}& )
,}}) *
HttpResponse}}+ 7
resp}}8 <
)}}< =
{~~ 
int 
data 
; 
if
ÄÄ 

(
ÄÄ  
PrivateReturnsTrue
ÄÄ 
(
ÄÄ 
)
ÄÄ  
)
ÄÄ  !
{
ÅÅ 	
data
ÇÇ 
=
ÇÇ 
int
ÇÇ 
.
ÇÇ 
MinValue
ÇÇ 
;
ÇÇ  
{
ÑÑ 
if
ÖÖ 
(
ÖÖ 
req
ÖÖ 
.
ÖÖ 
QueryString
ÖÖ #
[
ÖÖ# $
$str
ÖÖ$ (
]
ÖÖ( )
!=
ÖÖ* ,
null
ÖÖ- 1
)
ÖÖ1 2
{
ÜÜ 
try
áá 
{
àà 
data
ââ 
=
ââ 
int
ââ "
.
ââ" #
Parse
ââ# (
(
ââ( )
req
ââ) ,
.
ââ, -
QueryString
ââ- 8
[
ââ8 9
$str
ââ9 =
]
ââ= >
)
ââ> ?
;
ââ? @
}
ää 
catch
ãã 
(
ãã 
FormatException
ãã * 
exceptNumberFormat
ãã+ =
)
ãã= >
{
åå 
IO
çç 
.
çç 
Logger
çç !
.
çç! "
Log
çç" %
(
çç% &
NLog
çç& *
.
çç* +
LogLevel
çç+ 3
.
çç3 4
Warn
çç4 8
,
çç8 9 
exceptNumberFormat
çç: L
,
ççL M
$strççN Ñ
)ççÑ Ö
;ççÖ Ü
}
éé 
}
èè 
}
êê 
}
ëë 	
else
íí 
{
ìì 	
data
ññ 
=
ññ 
$num
ññ 
;
ññ 
}
óó 	
if
òò 

(
òò !
PrivateReturnsFalse
òò 
(
òò  
)
òò  !
)
òò! "
{
ôô 	
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ /
)
õõ/ 0
;
õõ0 1
}
úú 	
else
ùù 
{
ûû 	
if
†† 
(
†† 
data
†† 
!=
†† 
$num
†† 
)
†† 
{
°° 
IO
¢¢ 
.
¢¢ 
	WriteLine
¢¢ 
(
¢¢ 
$str
¢¢ #
+
¢¢$ %
data
¢¢& *
+
¢¢+ ,
$str
¢¢- 2
+
¢¢3 4
(
¢¢5 6
$num
¢¢6 9
%
¢¢: ;
data
¢¢< @
)
¢¢@ A
+
¢¢B C
$str
¢¢D H
)
¢¢H I
;
¢¢I J
}
££ 
else
§§ 
{
•• 
IO
¶¶ 
.
¶¶ 
	WriteLine
¶¶ 
(
¶¶ 
$str
¶¶ D
)
¶¶D E
;
¶¶E F
}
ßß 
}
®® 	
}
©© 
private
¨¨ 
void
¨¨ 
GoodB2G2
¨¨ 
(
¨¨ 
HttpRequest
¨¨ %
req
¨¨& )
,
¨¨) *
HttpResponse
¨¨+ 7
resp
¨¨8 <
)
¨¨< =
{
≠≠ 
int
ÆÆ 
data
ÆÆ 
;
ÆÆ 
if
ØØ 

(
ØØ  
PrivateReturnsTrue
ØØ 
(
ØØ 
)
ØØ  
)
ØØ  !
{
∞∞ 	
data
±± 
=
±± 
int
±± 
.
±± 
MinValue
±± 
;
±±  
{
≥≥ 
if
¥¥ 
(
¥¥ 
req
¥¥ 
.
¥¥ 
QueryString
¥¥ #
[
¥¥# $
$str
¥¥$ (
]
¥¥( )
!=
¥¥* ,
null
¥¥- 1
)
¥¥1 2
{
µµ 
try
∂∂ 
{
∑∑ 
data
∏∏ 
=
∏∏ 
int
∏∏ "
.
∏∏" #
Parse
∏∏# (
(
∏∏( )
req
∏∏) ,
.
∏∏, -
QueryString
∏∏- 8
[
∏∏8 9
$str
∏∏9 =
]
∏∏= >
)
∏∏> ?
;
∏∏? @
}
ππ 
catch
∫∫ 
(
∫∫ 
FormatException
∫∫ * 
exceptNumberFormat
∫∫+ =
)
∫∫= >
{
ªª 
IO
ºº 
.
ºº 
Logger
ºº !
.
ºº! "
Log
ºº" %
(
ºº% &
NLog
ºº& *
.
ºº* +
LogLevel
ºº+ 3
.
ºº3 4
Warn
ºº4 8
,
ºº8 9 
exceptNumberFormat
ºº: L
,
ººL M
$strººN Ñ
)ººÑ Ö
;ººÖ Ü
}
ΩΩ 
}
ææ 
}
øø 
}
¿¿ 	
else
¡¡ 
{
¬¬ 	
data
≈≈ 
=
≈≈ 
$num
≈≈ 
;
≈≈ 
}
∆∆ 	
if
«« 

(
««  
PrivateReturnsTrue
«« 
(
«« 
)
««  
)
««  !
{
»» 	
if
   
(
   
data
   
!=
   
$num
   
)
   
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
	WriteLine
ÃÃ 
(
ÃÃ 
$str
ÃÃ #
+
ÃÃ$ %
data
ÃÃ& *
+
ÃÃ+ ,
$str
ÃÃ- 2
+
ÃÃ3 4
(
ÃÃ5 6
$num
ÃÃ6 9
%
ÃÃ: ;
data
ÃÃ< @
)
ÃÃ@ A
+
ÃÃB C
$str
ÃÃD H
)
ÃÃH I
;
ÃÃI J
}
ÕÕ 
else
ŒŒ 
{
œœ 
IO
–– 
.
–– 
	WriteLine
–– 
(
–– 
$str
–– D
)
––D E
;
––E F
}
—— 
}
““ 	
}
”” 
public
’’ 

override
’’ 
void
’’ 
Good
’’ 
(
’’ 
HttpRequest
’’ )
req
’’* -
,
’’- .
HttpResponse
’’/ ;
resp
’’< @
)
’’@ A
{
÷÷ 
GoodG2B1
◊◊ 
(
◊◊ 
req
◊◊ 
,
◊◊ 
resp
◊◊ 
)
◊◊ 
;
◊◊ 
GoodG2B2
ÿÿ 
(
ÿÿ 
req
ÿÿ 
,
ÿÿ 
resp
ÿÿ 
)
ÿÿ 
;
ÿÿ 
GoodB2G1
ŸŸ 
(
ŸŸ 
req
ŸŸ 
,
ŸŸ 
resp
ŸŸ 
)
ŸŸ 
;
ŸŸ 
GoodB2G2
⁄⁄ 
(
⁄⁄ 
req
⁄⁄ 
,
⁄⁄ 
resp
⁄⁄ 
)
⁄⁄ 
;
⁄⁄ 
}
€€ 
}›› 
}ﬁﬁ »S
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_09.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_09 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_TRUE   #
)  # $
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88 
IO88 
.88  
STATIC_READONLY_TRUE88 #
)88# $
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< 
+<<  !
data<<" &
+<<' (
$str<<) .
+<</ 0
(<<1 2
$num<<2 5
%<<6 7
data<<8 <
)<<< =
+<<> ?
$str<<@ D
)<<D E
;<<E F
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
IOEE 
.EE !
STATIC_READONLY_FALSEEE $
)EE$ %
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
IOPP 
.PP  
STATIC_READONLY_TRUEPP #
)PP# $
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT 
+TT  !
dataTT" &
+TT' (
$strTT) .
+TT/ 0
(TT1 2
$numTT2 5
%TT6 7
dataTT8 <
)TT< =
+TT> ?
$strTT@ D
)TTD E
;TTE F
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
IO\\ 
.\\  
STATIC_READONLY_TRUE\\ #
)\\# $
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
IOgg 
.gg  
STATIC_READONLY_TRUEgg #
)gg# $
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk 
+kk  !
datakk" &
+kk' (
$strkk) .
+kk/ 0
(kk1 2
$numkk2 5
%kk6 7
datakk8 <
)kk< =
+kk> ?
$strkk@ D
)kkD E
;kkE F
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
IOss 
.ss  
STATIC_READONLY_TRUEss #
)ss# $
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
IO
ãã 
.
ãã #
STATIC_READONLY_FALSE
ãã $
)
ãã$ %
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
%
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ "
STATIC_READONLY_TRUE
¢¢ #
)
¢¢# $
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
IO
∫∫ 
.
∫∫ "
STATIC_READONLY_TRUE
∫∫ #
)
∫∫# $
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
%
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— ‰R
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_10.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_10 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.   

staticTrue   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88 
IO88 
.88 

staticTrue88 
)88 
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< 
+<<  !
data<<" &
+<<' (
$str<<) .
+<</ 0
(<<1 2
$num<<2 5
%<<6 7
data<<8 <
)<<< =
+<<> ?
$str<<@ D
)<<D E
;<<E F
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
IOEE 
.EE 
staticFalseEE 
)EE 
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
IOPP 
.PP 

staticTruePP 
)PP 
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT 
+TT  !
dataTT" &
+TT' (
$strTT) .
+TT/ 0
(TT1 2
$numTT2 5
%TT6 7
dataTT8 <
)TT< =
+TT> ?
$strTT@ D
)TTD E
;TTE F
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
IO\\ 
.\\ 

staticTrue\\ 
)\\ 
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
IOgg 
.gg 

staticTruegg 
)gg 
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk 
+kk  !
datakk" &
+kk' (
$strkk) .
+kk/ 0
(kk1 2
$numkk2 5
%kk6 7
datakk8 <
)kk< =
+kk> ?
$strkk@ D
)kkD E
;kkE F
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
IOss 
.ss 

staticTruess 
)ss 
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
IO
ãã 
.
ãã 
staticFalse
ãã 
)
ãã 
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
%
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ 

staticTrue
¢¢ 
)
¢¢ 
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
IO
∫∫ 
.
∫∫ 

staticTrue
∫∫ 
)
∫∫ 
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
%
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— ‚U
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_11.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_11 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.   
StaticReturnsTrue    
(    !
)  ! "
)  " #
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88
 
IO88 
.88 
StaticReturnsTrue88 
(88  
)88  !
)88! "
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< 
+<<  !
data<<" &
+<<' (
$str<<) .
+<</ 0
(<<1 2
$num<<2 5
%<<6 7
data<<8 <
)<<< =
+<<> ?
$str<<@ D
)<<D E
;<<E F
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
IOEE 
.EE 
StaticReturnsFalseEE !
(EE! "
)EE" #
)EE# $
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
IOPP 
.PP 
StaticReturnsTruePP  
(PP  !
)PP! "
)PP" #
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT 
+TT  !
dataTT" &
+TT' (
$strTT) .
+TT/ 0
(TT1 2
$numTT2 5
%TT6 7
dataTT8 <
)TT< =
+TT> ?
$strTT@ D
)TTD E
;TTE F
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
IO\\ 
.\\ 
StaticReturnsTrue\\  
(\\  !
)\\! "
)\\" #
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
IOgg 
.gg 
StaticReturnsTruegg  
(gg  !
)gg! "
)gg" #
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk 
+kk  !
datakk" &
+kk' (
$strkk) .
+kk/ 0
(kk1 2
$numkk2 5
%kk6 7
datakk8 <
)kk< =
+kk> ?
$strkk@ D
)kkD E
;kkE F
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
IOss 
.ss 
StaticReturnsTruess  
(ss  !
)ss! "
)ss" #
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
IO
ãã 
.
ãã  
StaticReturnsFalse
ãã !
(
ãã! "
)
ãã" #
)
ãã# $
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
%
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ 
StaticReturnsTrue
¢¢  
(
¢¢  !
)
¢¢! "
)
¢¢" #
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
IO
∫∫ 
.
∫∫ 
StaticReturnsTrue
∫∫  
(
∫∫  !
)
∫∫! "
)
∫∫" #
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
%
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— åK
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_12.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_12 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(  
 
IO   
.   $
StaticReturnsTrueOrFalse   &
(  & '
)  ' (
)  ( )
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data55 
=55 
$num55 
;55 
}66 	
if77 

(77
 
IO77 
.77 $
StaticReturnsTrueOrFalse77 &
(77& '
)77' (
)77( )
{88 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; 
+;;  !
data;;" &
+;;' (
$str;;) .
+;;/ 0
(;;1 2
$num;;2 5
%;;6 7
data;;8 <
);;< =
+;;> ?
$str;;@ D
);;D E
;;;E F
}<< 	
else== 
{>> 	
if@@ 
(@@ 
data@@ 
!=@@ 
$num@@ 
)@@ 
{AA 
IOBB 
.BB 
	WriteLineBB 
(BB 
$strBB #
+BB$ %
dataBB& *
+BB+ ,
$strBB- 2
+BB3 4
(BB5 6
$numBB6 9
%BB: ;
dataBB< @
)BB@ A
+BBB C
$strBBD H
)BBH I
;BBI J
}CC 
elseDD 
{EE 
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF D
)FFD E
;FFE F
}GG 
}HH 	
}II 
privateNN 
voidNN 
GoodG2BNN 
(NN 
HttpRequestNN $
reqNN% (
,NN( )
HttpResponseNN* 6
respNN7 ;
)NN; <
{OO 
intPP 
dataPP 
;PP 
ifQQ 

(QQ
 
IOQQ 
.QQ $
StaticReturnsTrueOrFalseQQ &
(QQ& '
)QQ' (
)QQ( )
{RR 	
dataTT 
=TT 
$numTT 
;TT 
}UU 	
elseVV 
{WW 	
dataYY 
=YY 
$numYY 
;YY 
}ZZ 	
if[[ 

([[
 
IO[[ 
.[[ $
StaticReturnsTrueOrFalse[[ &
([[& '
)[[' (
)[[( )
{\\ 	
IO__ 
.__ 
	WriteLine__ 
(__ 
$str__ 
+__  !
data__" &
+__' (
$str__) .
+__/ 0
(__1 2
$num__2 5
%__6 7
data__8 <
)__< =
+__> ?
$str__@ D
)__D E
;__E F
}`` 	
elseaa 
{bb 	
IOee 
.ee 
	WriteLineee 
(ee 
$stree 
+ee  !
dataee" &
+ee' (
$stree) .
+ee/ 0
(ee1 2
$numee2 5
%ee6 7
dataee8 <
)ee< =
+ee> ?
$stree@ D
)eeD E
;eeE F
}ff 	
}gg 
privatekk 
voidkk 
GoodB2Gkk 
(kk 
HttpRequestkk $
reqkk% (
,kk( )
HttpResponsekk* 6
respkk7 ;
)kk; <
{ll 
intmm 
datamm 
;mm 
ifnn 

(nn
 
IOnn 
.nn $
StaticReturnsTrueOrFalsenn &
(nn& '
)nn' (
)nn( )
{oo 	
datapp 
=pp 
intpp 
.pp 
MinValuepp 
;pp  
{rr 
ifss 
(ss 
reqss 
.ss 
QueryStringss #
[ss# $
$strss$ (
]ss( )
!=ss* ,
nullss- 1
)ss1 2
{tt 
tryuu 
{vv 
dataww 
=ww 
intww "
.ww" #
Parseww# (
(ww( )
reqww) ,
.ww, -
QueryStringww- 8
[ww8 9
$strww9 =
]ww= >
)ww> ?
;ww? @
}xx 
catchyy 
(yy 
FormatExceptionyy *
exceptNumberFormatyy+ =
)yy= >
{zz 
IO{{ 
.{{ 
Logger{{ !
.{{! "
Log{{" %
({{% &
NLog{{& *
.{{* +
LogLevel{{+ 3
.{{3 4
Warn{{4 8
,{{8 9
exceptNumberFormat{{: L
,{{L M
$str	{{N Ñ
)
{{Ñ Ö
;
{{Ö Ü
}|| 
}}} 
}~~ 
} 	
else
ÄÄ 
{
ÅÅ 	
data
ÇÇ 
=
ÇÇ 
int
ÇÇ 
.
ÇÇ 
MinValue
ÇÇ 
;
ÇÇ  
{
ÑÑ 
if
ÖÖ 
(
ÖÖ 
req
ÖÖ 
.
ÖÖ 
QueryString
ÖÖ #
[
ÖÖ# $
$str
ÖÖ$ (
]
ÖÖ( )
!=
ÖÖ* ,
null
ÖÖ- 1
)
ÖÖ1 2
{
ÜÜ 
try
áá 
{
àà 
data
ââ 
=
ââ 
int
ââ "
.
ââ" #
Parse
ââ# (
(
ââ( )
req
ââ) ,
.
ââ, -
QueryString
ââ- 8
[
ââ8 9
$str
ââ9 =
]
ââ= >
)
ââ> ?
;
ââ? @
}
ää 
catch
ãã 
(
ãã 
FormatException
ãã * 
exceptNumberFormat
ãã+ =
)
ãã= >
{
åå 
IO
çç 
.
çç 
Logger
çç !
.
çç! "
Log
çç" %
(
çç% &
NLog
çç& *
.
çç* +
LogLevel
çç+ 3
.
çç3 4
Warn
çç4 8
,
çç8 9 
exceptNumberFormat
çç: L
,
ççL M
$strççN Ñ
)ççÑ Ö
;ççÖ Ü
}
éé 
}
èè 
}
êê 
}
ëë 	
if
íí 

(
íí
 
IO
íí 
.
íí &
StaticReturnsTrueOrFalse
íí &
(
íí& '
)
íí' (
)
íí( )
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
%
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
else
ûû 
{
üü 	
if
°° 
(
°° 
data
°° 
!=
°° 
$num
°° 
)
°° 
{
¢¢ 
IO
££ 
.
££ 
	WriteLine
££ 
(
££ 
$str
££ #
+
££$ %
data
££& *
+
££+ ,
$str
££- 2
+
££3 4
(
££5 6
$num
££6 9
%
££: ;
data
££< @
)
££@ A
+
££B C
$str
££D H
)
££H I
;
££I J
}
§§ 
else
•• 
{
¶¶ 
IO
ßß 
.
ßß 
	WriteLine
ßß 
(
ßß 
$str
ßß D
)
ßßD E
;
ßßE F
}
®® 
}
©© 	
}
™™ 
public
¨¨ 

override
¨¨ 
void
¨¨ 
Good
¨¨ 
(
¨¨ 
HttpRequest
¨¨ )
req
¨¨* -
,
¨¨- .
HttpResponse
¨¨/ ;
resp
¨¨< @
)
¨¨@ A
{
ÆÆ 
GoodG2B
ØØ 
(
ØØ 
req
ØØ 
,
ØØ 
resp
ØØ 
)
ØØ 
;
ØØ 
GoodB2G
∞∞ 
(
∞∞ 
req
∞∞ 
,
∞∞ 
resp
∞∞ 
)
∞∞ 
;
∞∞ 
}
±± 
}≥≥ 
}¥¥ ¶V
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_13.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_13 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_FIVE   #
==  # %
$num  % &
)  & '
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88 
IO88 
.88  
STATIC_READONLY_FIVE88 #
==88# %
$num88% &
)88& '
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< 
+<<  !
data<<" &
+<<' (
$str<<) .
+<</ 0
(<<1 2
$num<<2 5
%<<6 7
data<<8 <
)<<< =
+<<> ?
$str<<@ D
)<<D E
;<<E F
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
IOEE 
.EE  
STATIC_READONLY_FIVEEE #
!=EE# %
$numEE% &
)EE& '
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
IOPP 
.PP  
STATIC_READONLY_FIVEPP #
==PP# %
$numPP% &
)PP& '
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT 
+TT  !
dataTT" &
+TT' (
$strTT) .
+TT/ 0
(TT1 2
$numTT2 5
%TT6 7
dataTT8 <
)TT< =
+TT> ?
$strTT@ D
)TTD E
;TTE F
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
IO\\ 
.\\  
STATIC_READONLY_FIVE\\ #
==\\# %
$num\\% &
)\\& '
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
IOgg 
.gg  
STATIC_READONLY_FIVEgg #
==gg# %
$numgg% &
)gg& '
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk 
+kk  !
datakk" &
+kk' (
$strkk) .
+kk/ 0
(kk1 2
$numkk2 5
%kk6 7
datakk8 <
)kk< =
+kk> ?
$strkk@ D
)kkD E
;kkE F
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
IOss 
.ss  
STATIC_READONLY_FIVEss #
==ss# %
$numss% &
)ss& '
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
IO
ãã 
.
ãã "
STATIC_READONLY_FIVE
ãã #
!=
ãã# %
$num
ãã% &
)
ãã& '
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
%
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ "
STATIC_READONLY_FIVE
¢¢ #
==
¢¢# %
$num
¢¢% &
)
¢¢& '
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
IO
∫∫ 
.
∫∫ "
STATIC_READONLY_FIVE
∫∫ #
==
∫∫# %
$num
∫∫% &
)
∫∫& '
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
%
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— ¬U
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_14.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_14 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
if   

(   
IO   
.   

staticFive   
==   
$num   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
$num66 
;66 
}77 	
if88 

(88 
IO88 
.88 

staticFive88 
==88 
$num88 
)88 
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< 
+<<  !
data<<" &
+<<' (
$str<<) .
+<</ 0
(<<1 2
$num<<2 5
%<<6 7
data<<8 <
)<<< =
+<<> ?
$str<<@ D
)<<D E
;<<E F
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
;DD 
ifEE 

(EE 
IOEE 
.EE 

staticFiveEE 
!=EE 
$numEE 
)EE 
{FF 	
dataII 
=II 
$numII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
}OO 	
ifPP 

(PP 
IOPP 
.PP 

staticFivePP 
==PP 
$numPP 
)PP 
{QQ 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT 
+TT  !
dataTT" &
+TT' (
$strTT) .
+TT/ 0
(TT1 2
$numTT2 5
%TT6 7
dataTT8 <
)TT< =
+TT> ?
$strTT@ D
)TTD E
;TTE F
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
IO\\ 
.\\ 

staticFive\\ 
==\\ 
$num\\ 
)\\ 
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
elseaa 
{bb 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
IOgg 
.gg 

staticFivegg 
==gg 
$numgg 
)gg 
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk 
+kk  !
datakk" &
+kk' (
$strkk) .
+kk/ 0
(kk1 2
$numkk2 5
%kk6 7
datakk8 <
)kk< =
+kk> ?
$strkk@ D
)kkD E
;kkE F
}ll 	
}mm 
privatepp 
voidpp 
GoodB2G1pp 
(pp 
HttpRequestpp %
reqpp& )
,pp) *
HttpResponsepp+ 7
resppp8 <
)pp< =
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
IOss 
.ss 

staticFivess 
==ss 
$numss 
)ss 
{tt 	
datauu 
=uu 
intuu 
.uu 
MinValueuu 
;uu  
{ww 
ifxx 
(xx 
reqxx 
.xx 
QueryStringxx #
[xx# $
$strxx$ (
]xx( )
!=xx* ,
nullxx- 1
)xx1 2
{yy 
tryzz 
{{{ 
data|| 
=|| 
int|| "
.||" #
Parse||# (
(||( )
req||) ,
.||, -
QueryString||- 8
[||8 9
$str||9 =
]||= >
)||> ?
;||? @
}}} 
catch~~ 
(~~ 
FormatException~~ *
exceptNumberFormat~~+ =
)~~= >
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ !
.
ÄÄ! "
Log
ÄÄ" %
(
ÄÄ% &
NLog
ÄÄ& *
.
ÄÄ* +
LogLevel
ÄÄ+ 3
.
ÄÄ3 4
Warn
ÄÄ4 8
,
ÄÄ8 9 
exceptNumberFormat
ÄÄ: L
,
ÄÄL M
$strÄÄN Ñ
)ÄÄÑ Ö
;ÄÄÖ Ü
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
else
ÖÖ 
{
ÜÜ 	
data
ââ 
=
ââ 
$num
ââ 
;
ââ 
}
ää 	
if
ãã 

(
ãã 
IO
ãã 
.
ãã 

staticFive
ãã 
!=
ãã 
$num
ãã 
)
ãã 
{
åå 	
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé /
)
éé/ 0
;
éé0 1
}
èè 	
else
êê 
{
ëë 	
if
ìì 
(
ìì 
data
ìì 
!=
ìì 
$num
ìì 
)
ìì 
{
îî 
IO
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï #
+
ïï$ %
data
ïï& *
+
ïï+ ,
$str
ïï- 2
+
ïï3 4
(
ïï5 6
$num
ïï6 9
%
ïï: ;
data
ïï< @
)
ïï@ A
+
ïïB C
$str
ïïD H
)
ïïH I
;
ïïI J
}
ññ 
else
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô D
)
ôôD E
;
ôôE F
}
öö 
}
õõ 	
}
úú 
private
üü 
void
üü 
GoodB2G2
üü 
(
üü 
HttpRequest
üü %
req
üü& )
,
üü) *
HttpResponse
üü+ 7
resp
üü8 <
)
üü< =
{
†† 
int
°° 
data
°° 
;
°° 
if
¢¢ 

(
¢¢ 
IO
¢¢ 
.
¢¢ 

staticFive
¢¢ 
==
¢¢ 
$num
¢¢ 
)
¢¢ 
{
££ 	
data
§§ 
=
§§ 
int
§§ 
.
§§ 
MinValue
§§ 
;
§§  
{
¶¶ 
if
ßß 
(
ßß 
req
ßß 
.
ßß 
QueryString
ßß #
[
ßß# $
$str
ßß$ (
]
ßß( )
!=
ßß* ,
null
ßß- 1
)
ßß1 2
{
®® 
try
©© 
{
™™ 
data
´´ 
=
´´ 
int
´´ "
.
´´" #
Parse
´´# (
(
´´( )
req
´´) ,
.
´´, -
QueryString
´´- 8
[
´´8 9
$str
´´9 =
]
´´= >
)
´´> ?
;
´´? @
}
¨¨ 
catch
≠≠ 
(
≠≠ 
FormatException
≠≠ * 
exceptNumberFormat
≠≠+ =
)
≠≠= >
{
ÆÆ 
IO
ØØ 
.
ØØ 
Logger
ØØ !
.
ØØ! "
Log
ØØ" %
(
ØØ% &
NLog
ØØ& *
.
ØØ* +
LogLevel
ØØ+ 3
.
ØØ3 4
Warn
ØØ4 8
,
ØØ8 9 
exceptNumberFormat
ØØ: L
,
ØØL M
$strØØN Ñ
)ØØÑ Ö
;ØØÖ Ü
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 	
else
¥¥ 
{
µµ 	
data
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 	
if
∫∫ 

(
∫∫ 
IO
∫∫ 
.
∫∫ 

staticFive
∫∫ 
==
∫∫ 
$num
∫∫ 
)
∫∫ 
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
%
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
HttpRequest
»» )
req
»»* -
,
»»- .
HttpResponse
»»/ ;
resp
»»< @
)
»»@ A
{
…… 
GoodG2B1
   
(
   
req
   
,
   
resp
   
)
   
;
   
GoodG2B2
ÀÀ 
(
ÀÀ 
req
ÀÀ 
,
ÀÀ 
resp
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}–– 
}—— î_
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_15.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_15 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
switch   
(   
$num   
)   
{!! 	
case"" 
$num"" 
:"" 
data## 
=## 
int## 
.## 
MinValue## 
;##  
{%% 
if&& 
(&& 
req&& 
.&& 
QueryString&& #
[&&# $
$str&&$ (
]&&( )
!=&&* ,
null&&- 1
)&&1 2
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
req**) ,
.**, -
QueryString**- 8
[**8 9
$str**9 =
]**= >
)**> ?
;**? @
}++ 
catch,, 
(,, 
FormatException,, *
exceptNumberFormat,,+ =
),,= >
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ñ
)
..Ñ Ö
;
..Ö Ü
}// 
}00 
}11 
break22 
;22 
default33 
:33 
data66 
=66 
$num66 
;66 
break77 
;77 
}88 	
switch99 
(99 
$num99 
)99 
{:: 	
case;; 
$num;; 
:;; 
IO>> 
.>> 
	WriteLine>> 
(>> 
$str>> 
+>>  !
data>>" &
+>>' (
$str>>) .
+>>/ 0
(>>1 2
$num>>2 5
%>>6 7
data>>8 <
)>>< =
+>>> ?
$str>>@ D
)>>D E
;>>E F
break?? 
;?? 
default@@ 
:@@ 
IOBB 
.BB 
	WriteLineBB 
(BB 
$strBB /
)BB/ 0
;BB0 1
breakCC 
;CC 
}DD 	
}EE 
privateII 
voidII 
GoodG2B1II 
(II 
HttpRequestII %
reqII& )
,II) *
HttpResponseII+ 7
respII8 <
)II< =
{JJ 
intKK 
dataKK 
;KK 
switchLL 
(LL 
$numLL 
)LL 
{MM 	
caseNN 
$numNN 
:NN 
dataQQ 
=QQ 
$numQQ 
;QQ 
breakRR 
;RR 
defaultSS 
:SS 
dataUU 
=UU 
$numUU 
;UU 
breakVV 
;VV 
}WW 	
switchXX 
(XX 
$numXX 
)XX 
{YY 	
caseZZ 
$numZZ 
:ZZ 
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] 
+]]  !
data]]" &
+]]' (
$str]]) .
+]]/ 0
(]]1 2
$num]]2 5
%]]6 7
data]]8 <
)]]< =
+]]> ?
$str]]@ D
)]]D E
;]]E F
break^^ 
;^^ 
default__ 
:__ 
IOaa 
.aa 
	WriteLineaa 
(aa 
$straa /
)aa/ 0
;aa0 1
breakbb 
;bb 
}cc 	
}dd 
privategg 
voidgg 
GoodG2B2gg 
(gg 
HttpRequestgg %
reqgg& )
,gg) *
HttpResponsegg+ 7
respgg8 <
)gg< =
{hh 
intii 
dataii 
;ii 
switchjj 
(jj 
$numjj 
)jj 
{kk 	
casell 
$numll 
:ll 
datann 
=nn 
$numnn 
;nn 
breakoo 
;oo 
defaultpp 
:pp 
datass 
=ss 
$numss 
;ss 
breaktt 
;tt 
}uu 	
switchvv 
(vv 
$numvv 
)vv 
{ww 	
casexx 
$numxx 
:xx 
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ 
+{{  !
data{{" &
+{{' (
$str{{) .
+{{/ 0
({{1 2
$num{{2 5
%{{6 7
data{{8 <
){{< =
+{{> ?
$str{{@ D
){{D E
;{{E F
break|| 
;|| 
default}} 
:}} 
IO 
. 
	WriteLine 
( 
$str /
)/ 0
;0 1
break
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
}
ÇÇ 
private
ÖÖ 
void
ÖÖ 
GoodB2G1
ÖÖ 
(
ÖÖ 
HttpRequest
ÖÖ %
req
ÖÖ& )
,
ÖÖ) *
HttpResponse
ÖÖ+ 7
resp
ÖÖ8 <
)
ÖÖ< =
{
ÜÜ 
int
áá 
data
áá 
;
áá 
switch
àà 
(
àà 
$num
àà 
)
àà 
{
ââ 	
case
ää 
$num
ää 
:
ää 
data
ãã 
=
ãã 
int
ãã 
.
ãã 
MinValue
ãã 
;
ãã  
{
çç 
if
éé 
(
éé 
req
éé 
.
éé 
QueryString
éé #
[
éé# $
$str
éé$ (
]
éé( )
!=
éé* ,
null
éé- 1
)
éé1 2
{
èè 
try
êê 
{
ëë 
data
íí 
=
íí 
int
íí "
.
íí" #
Parse
íí# (
(
íí( )
req
íí) ,
.
íí, -
QueryString
íí- 8
[
íí8 9
$str
íí9 =
]
íí= >
)
íí> ?
;
íí? @
}
ìì 
catch
îî 
(
îî 
FormatException
îî * 
exceptNumberFormat
îî+ =
)
îî= >
{
ïï 
IO
ññ 
.
ññ 
Logger
ññ !
.
ññ! "
Log
ññ" %
(
ññ% &
NLog
ññ& *
.
ññ* +
LogLevel
ññ+ 3
.
ññ3 4
Warn
ññ4 8
,
ññ8 9 
exceptNumberFormat
ññ: L
,
ññL M
$strññN Ñ
)ññÑ Ö
;ññÖ Ü
}
óó 
}
òò 
}
ôô 
break
öö 
;
öö 
default
õõ 
:
õõ 
data
ûû 
=
ûû 
$num
ûû 
;
ûû 
break
üü 
;
üü 
}
†† 	
switch
°° 
(
°° 
$num
°° 
)
°° 
{
¢¢ 	
case
££ 
$num
££ 
:
££ 
IO
•• 
.
•• 
	WriteLine
•• 
(
•• 
$str
•• /
)
••/ 0
;
••0 1
break
¶¶ 
;
¶¶ 
default
ßß 
:
ßß 
if
©© 
(
©© 
data
©© 
!=
©© 
$num
©© 
)
©© 
{
™™ 
IO
´´ 
.
´´ 
	WriteLine
´´ 
(
´´ 
$str
´´ #
+
´´$ %
data
´´& *
+
´´+ ,
$str
´´- 2
+
´´3 4
(
´´5 6
$num
´´6 9
%
´´: ;
data
´´< @
)
´´@ A
+
´´B C
$str
´´D H
)
´´H I
;
´´I J
}
¨¨ 
else
≠≠ 
{
ÆÆ 
IO
ØØ 
.
ØØ 
	WriteLine
ØØ 
(
ØØ 
$str
ØØ D
)
ØØD E
;
ØØE F
}
∞∞ 
break
±± 
;
±± 
}
≤≤ 	
}
≥≥ 
private
∂∂ 
void
∂∂ 
GoodB2G2
∂∂ 
(
∂∂ 
HttpRequest
∂∂ %
req
∂∂& )
,
∂∂) *
HttpResponse
∂∂+ 7
resp
∂∂8 <
)
∂∂< =
{
∑∑ 
int
∏∏ 
data
∏∏ 
;
∏∏ 
switch
ππ 
(
ππ 
$num
ππ 
)
ππ 
{
∫∫ 	
case
ªª 
$num
ªª 
:
ªª 
data
ºº 
=
ºº 
int
ºº 
.
ºº 
MinValue
ºº 
;
ºº  
{
ææ 
if
øø 
(
øø 
req
øø 
.
øø 
QueryString
øø #
[
øø# $
$str
øø$ (
]
øø( )
!=
øø* ,
null
øø- 1
)
øø1 2
{
¿¿ 
try
¡¡ 
{
¬¬ 
data
√√ 
=
√√ 
int
√√ "
.
√√" #
Parse
√√# (
(
√√( )
req
√√) ,
.
√√, -
QueryString
√√- 8
[
√√8 9
$str
√√9 =
]
√√= >
)
√√> ?
;
√√? @
}
ƒƒ 
catch
≈≈ 
(
≈≈ 
FormatException
≈≈ * 
exceptNumberFormat
≈≈+ =
)
≈≈= >
{
∆∆ 
IO
«« 
.
«« 
Logger
«« !
.
««! "
Log
««" %
(
««% &
NLog
««& *
.
««* +
LogLevel
««+ 3
.
««3 4
Warn
««4 8
,
««8 9 
exceptNumberFormat
««: L
,
««L M
$str««N Ñ
)««Ñ Ö
;««Ö Ü
}
»» 
}
…… 
}
   
break
ÀÀ 
;
ÀÀ 
default
ÃÃ 
:
ÃÃ 
data
œœ 
=
œœ 
$num
œœ 
;
œœ 
break
–– 
;
–– 
}
—— 	
switch
““ 
(
““ 
$num
““ 
)
““ 
{
”” 	
case
‘‘ 
$num
‘‘ 
:
‘‘ 
if
÷÷ 
(
÷÷ 
data
÷÷ 
!=
÷÷ 
$num
÷÷ 
)
÷÷ 
{
◊◊ 
IO
ÿÿ 
.
ÿÿ 
	WriteLine
ÿÿ 
(
ÿÿ 
$str
ÿÿ #
+
ÿÿ$ %
data
ÿÿ& *
+
ÿÿ+ ,
$str
ÿÿ- 2
+
ÿÿ3 4
(
ÿÿ5 6
$num
ÿÿ6 9
%
ÿÿ: ;
data
ÿÿ< @
)
ÿÿ@ A
+
ÿÿB C
$str
ÿÿD H
)
ÿÿH I
;
ÿÿI J
}
ŸŸ 
else
⁄⁄ 
{
€€ 
IO
‹‹ 
.
‹‹ 
	WriteLine
‹‹ 
(
‹‹ 
$str
‹‹ D
)
‹‹D E
;
‹‹E F
}
›› 
break
ﬁﬁ 
;
ﬁﬁ 
default
ﬂﬂ 
:
ﬂﬂ 
IO
·· 
.
·· 
	WriteLine
·· 
(
·· 
$str
·· /
)
··/ 0
;
··0 1
break
‚‚ 
;
‚‚ 
}
„„ 	
}
‰‰ 
public
ÊÊ 

override
ÊÊ 
void
ÊÊ 
Good
ÊÊ 
(
ÊÊ 
HttpRequest
ÊÊ )
req
ÊÊ* -
,
ÊÊ- .
HttpResponse
ÊÊ/ ;
resp
ÊÊ< @
)
ÊÊ@ A
{
ÁÁ 
GoodG2B1
ËË 
(
ËË 
req
ËË 
,
ËË 
resp
ËË 
)
ËË 
;
ËË 
GoodG2B2
ÈÈ 
(
ÈÈ 
req
ÈÈ 
,
ÈÈ 
resp
ÈÈ 
)
ÈÈ 
;
ÈÈ 
GoodB2G1
ÍÍ 
(
ÍÍ 
req
ÍÍ 
,
ÍÍ 
resp
ÍÍ 
)
ÍÍ 
;
ÍÍ 
GoodB2G2
ÎÎ 
(
ÎÎ 
req
ÎÎ 
,
ÎÎ 
resp
ÎÎ 
)
ÎÎ 
;
ÎÎ 
}
ÏÏ 
}ÓÓ 
}ÔÔ ’.
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_16.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_16 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
while   
(   
true   
)   
{!! 	
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
break11 
;11 
}22 	
while33 
(33 
true33 
)33 
{44 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
break88 
;88 
}99 	
}:: 
private>> 
void>> 
GoodG2B>> 
(>> 
HttpRequest>> $
req>>% (
,>>( )
HttpResponse>>* 6
resp>>7 ;
)>>; <
{?? 
int@@ 
data@@ 
;@@ 
whileAA 
(AA 
trueAA 
)AA 
{BB 	
dataDD 
=DD 
$numDD 
;DD 
breakEE 
;EE 
}FF 	
whileGG 
(GG 
trueGG 
)GG 
{HH 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK 
+KK  !
dataKK" &
+KK' (
$strKK) .
+KK/ 0
(KK1 2
$numKK2 5
%KK6 7
dataKK8 <
)KK< =
+KK> ?
$strKK@ D
)KKD E
;KKE F
breakLL 
;LL 
}MM 	
}NN 
privateQQ 
voidQQ 
GoodB2GQQ 
(QQ 
HttpRequestQQ $
reqQQ% (
,QQ( )
HttpResponseQQ* 6
respQQ7 ;
)QQ; <
{RR 
intSS 
dataSS 
;SS 
whileTT 
(TT 
trueTT 
)TT 
{UU 	
dataVV 
=VV 
intVV 
.VV 
MinValueVV 
;VV  
{XX 
ifYY 
(YY 
reqYY 
.YY 
QueryStringYY #
[YY# $
$strYY$ (
]YY( )
!=YY* ,
nullYY- 1
)YY1 2
{ZZ 
try[[ 
{\\ 
data]] 
=]] 
int]] "
.]]" #
Parse]]# (
(]]( )
req]]) ,
.]], -
QueryString]]- 8
[]]8 9
$str]]9 =
]]]= >
)]]> ?
;]]? @
}^^ 
catch__ 
(__ 
FormatException__ *
exceptNumberFormat__+ =
)__= >
{`` 
IOaa 
.aa 
Loggeraa !
.aa! "
Logaa" %
(aa% &
NLogaa& *
.aa* +
LogLevelaa+ 3
.aa3 4
Warnaa4 8
,aa8 9
exceptNumberFormataa: L
,aaL M
$str	aaN Ñ
)
aaÑ Ö
;
aaÖ Ü
}bb 
}cc 
}dd 
breakee 
;ee 
}ff 	
whilegg 
(gg 
truegg 
)gg 
{hh 	
ifjj 
(jj 
datajj 
!=jj 
$numjj 
)jj 
{kk 
IOll 
.ll 
	WriteLinell 
(ll 
$strll #
+ll$ %
datall& *
+ll+ ,
$strll- 2
+ll3 4
(ll5 6
$numll6 9
%ll: ;
datall< @
)ll@ A
+llB C
$strllD H
)llH I
;llI J
}mm 
elsenn 
{oo 
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp D
)ppD E
;ppE F
}qq 
breakrr 
;rr 
}ss 	
}tt 
publicvv 

overridevv 
voidvv 
Goodvv 
(vv 
HttpRequestvv )
reqvv* -
,vv- .
HttpResponsevv/ ;
respvv< @
)vv@ A
{ww 
GoodG2Bxx 
(xx 
reqxx 
,xx 
respxx 
)xx 
;xx 
GoodB2Gyy 
(yy 
reqyy 
,yy 
respyy 
)yy 
;yy 
}zz 
}|| 
}}} ¥.
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_17.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_17 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$ 
{&& 	
if'' 
('' 
req'' 
.'' 
QueryString'' 
[''  
$str''  $
]''$ %
!=''& (
null'') -
)''- .
{(( 
try)) 
{** 
data++ 
=++ 
int++ 
.++ 
Parse++ $
(++$ %
req++% (
.++( )
QueryString++) 4
[++4 5
$str++5 9
]++9 :
)++: ;
;++; <
},, 
catch-- 
(-- 
FormatException-- &
exceptNumberFormat--' 9
)--9 :
{.. 
IO// 
.// 
Logger// 
.// 
Log// !
(//! "
NLog//" &
.//& '
LogLevel//' /
./// 0
Warn//0 4
,//4 5
exceptNumberFormat//6 H
,//H I
$str	//J Ä
)
//Ä Å
;
//Å Ç
}00 
}11 
}22 	
for33 
(33 
int33 
j33 
=33 
$num33 
;33 
j33 
<33 
$num33 
;33 
j33  
++33  "
)33" #
{44 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
}99 
private== 
void== 
GoodG2B== 
(== 
HttpRequest== $
req==% (
,==( )
HttpResponse==* 6
resp==7 ;
)==; <
{>> 
int?? 
data?? 
;?? 
dataAA 
=AA 
$numAA 
;AA 
forBB 
(BB 
intBB 
jBB 
=BB 
$numBB 
;BB 
jBB 
<BB 
$numBB 
;BB 
jBB  
++BB  "
)BB" #
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
HttpRequestKK $
reqKK% (
,KK( )
HttpResponseKK* 6
respKK7 ;
)KK; <
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
ifQQ 
(QQ 
reqQQ 
.QQ 
QueryStringQQ 
[QQ  
$strQQ  $
]QQ$ %
!=QQ& (
nullQQ) -
)QQ- .
{RR 
trySS 
{TT 
dataUU 
=UU 
intUU 
.UU 
ParseUU $
(UU$ %
reqUU% (
.UU( )
QueryStringUU) 4
[UU4 5
$strUU5 9
]UU9 :
)UU: ;
;UU; <
}VV 
catchWW 
(WW 
FormatExceptionWW &
exceptNumberFormatWW' 9
)WW9 :
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY !
(YY! "
NLogYY" &
.YY& '
LogLevelYY' /
.YY/ 0
WarnYY0 4
,YY4 5
exceptNumberFormatYY6 H
,YYH I
$str	YYJ Ä
)
YYÄ Å
;
YYÅ Ç
}ZZ 
}[[ 
}\\ 	
for]] 
(]] 
int]] 
k]] 
=]] 
$num]] 
;]] 
k]] 
<]] 
$num]] 
;]] 
k]]  
++]]  "
)]]" #
{^^ 	
if`` 
(`` 
data`` 
!=`` 
$num`` 
)`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb #
+bb$ %
databb& *
+bb+ ,
$strbb- 2
+bb3 4
(bb5 6
$numbb6 9
%bb: ;
databb< @
)bb@ A
+bbB C
$strbbD H
)bbH I
;bbI J
}cc 
elsedd 
{ee 
IOff 
.ff 
	WriteLineff 
(ff 
$strff D
)ffD E
;ffE F
}gg 
}hh 	
}ii 
publickk 

overridekk 
voidkk 
Goodkk 
(kk 
HttpRequestkk )
reqkk* -
,kk- .
HttpResponsekk/ ;
respkk< @
)kk@ A
{ll 
GoodG2Bmm 
(mm 
reqmm 
,mm 
respmm 
)mm 
;mm 
GoodB2Gnn 
(nn 
reqnn 
,nn 
respnn 
)nn 
;nn 
}oo 
}qq 
}rr ºS
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_21.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_21 :
:; <
AbstractTestCaseWeb= P
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public   

override   
void   
Bad   
(   
HttpRequest   (
req  ) ,
,  , -
HttpResponse  . :
resp  ; ?
)  ? @
{!! 
int"" 
data"" 
;"" 
data## 
=## 
int## 
.## 
MinValue## 
;## 
{%% 	
if&& 
(&& 
req&& 
.&& 
QueryString&& 
[&&  
$str&&  $
]&&$ %
!=&&& (
null&&) -
)&&- .
{'' 
try(( 
{)) 
data** 
=** 
int** 
.** 
Parse** $
(**$ %
req**% (
.**( )
QueryString**) 4
[**4 5
$str**5 9
]**9 :
)**: ;
;**; <
}++ 
catch,, 
(,, 
FormatException,, &
exceptNumberFormat,,' 9
),,9 :
{-- 
IO.. 
... 
Logger.. 
... 
Log.. !
(..! "
NLog.." &
...& '
LogLevel..' /
.../ 0
Warn..0 4
,..4 5
exceptNumberFormat..6 H
,..H I
$str	..J Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 	

badPrivate22 
=22 
true22 
;22 
BadSink33 
(33 
data33 
,33 
req33 
,33 
resp33  
)33  !
;33! "
}44 
private66 
void66 
BadSink66 
(66 
int66 
data66 !
,66" #
HttpRequest66$ /
req660 3
,663 4
HttpResponse665 A
resp66B F
)66F G
{77 
if88 

(88 

badPrivate88 
)88 
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< 
+<<  !
data<<" &
+<<' (
$str<<) .
+<</ 0
(<<1 2
$num<<2 5
%<<6 7
data<<8 <
)<<< =
+<<> ?
$str<<@ D
)<<D E
;<<E F
}== 	
}>> 
privateAA 
boolAA 
goodB2G1PrivateAA  
=AA! "
falseAA# (
;AA( )
privateBB 
boolBB 
goodB2G2PrivateBB  
=BB! "
falseBB# (
;BB( )
privateCC 
boolCC 
goodG2BPrivateCC 
=CC  !
falseCC" '
;CC' (
publicEE 

overrideEE 
voidEE 
GoodEE 
(EE 
HttpRequestEE )
reqEE* -
,EE- .
HttpResponseEE/ ;
respEE< @
)EE@ A
{FF 
GoodB2G1GG 
(GG 
reqGG 
,GG 
respGG 
)GG 
;GG 
GoodB2G2HH 
(HH 
reqHH 
,HH 
respHH 
)HH 
;HH 
GoodG2BII 
(II 
reqII 
,II 
respII 
)II 
;II 
}JJ 
privateMM 
voidMM 
GoodB2G1MM 
(MM 
HttpRequestMM %
reqMM& )
,MM) *
HttpResponseMM+ 7
respMM8 <
)MM< =
{NN 
intOO 
dataOO 
;OO 
dataPP 
=PP 
intPP 
.PP 
MinValuePP 
;PP 
{RR 	
ifSS 
(SS 
reqSS 
.SS 
QueryStringSS 
[SS  
$strSS  $
]SS$ %
!=SS& (
nullSS) -
)SS- .
{TT 
tryUU 
{VV 
dataWW 
=WW 
intWW 
.WW 
ParseWW $
(WW$ %
reqWW% (
.WW( )
QueryStringWW) 4
[WW4 5
$strWW5 9
]WW9 :
)WW: ;
;WW; <
}XX 
catchYY 
(YY 
FormatExceptionYY &
exceptNumberFormatYY' 9
)YY9 :
{ZZ 
IO[[ 
.[[ 
Logger[[ 
.[[ 
Log[[ !
([[! "
NLog[[" &
.[[& '
LogLevel[[' /
.[[/ 0
Warn[[0 4
,[[4 5
exceptNumberFormat[[6 H
,[[H I
$str	[[J Ä
)
[[Ä Å
;
[[Å Ç
}\\ 
}]] 
}^^ 	
goodB2G1Private__ 
=__ 
false__ 
;__  
GoodB2G1Sink`` 
(`` 
data`` 
,`` 
req`` 
,``  
resp``! %
)``% &
;``& '
}aa 
privatecc 
voidcc 
GoodB2G1Sinkcc 
(cc 
intcc !
datacc" &
,cc' (
HttpRequestcc) 4
reqcc5 8
,cc8 9
HttpResponsecc: F
respccG K
)ccK L
{dd 
ifee 

(ee 
goodB2G1Privateee 
)ee 
{ff 	
IOhh 
.hh 
	WriteLinehh 
(hh 
$strhh /
)hh/ 0
;hh0 1
}ii 	
elsejj 
{kk 	
ifmm 
(mm 
datamm 
!=mm 
$nummm 
)mm 
{nn 
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo #
+oo$ %
dataoo& *
+oo+ ,
$stroo- 2
+oo3 4
(oo5 6
$numoo6 9
%oo: ;
dataoo< @
)oo@ A
+ooB C
$strooD H
)ooH I
;ooI J
}pp 
elseqq 
{rr 
IOss 
.ss 
	WriteLiness 
(ss 
$strss D
)ssD E
;ssE F
}tt 
}uu 	
}vv 
privateyy 
voidyy 
GoodB2G2yy 
(yy 
HttpRequestyy %
reqyy& )
,yy) *
HttpResponseyy+ 7
respyy8 <
)yy< =
{zz 
int{{ 
data{{ 
;{{ 
data|| 
=|| 
int|| 
.|| 
MinValue|| 
;|| 
{~~ 	
if 
( 
req 
. 
QueryString 
[  
$str  $
]$ %
!=& (
null) -
)- .
{
ÄÄ 
try
ÅÅ 
{
ÇÇ 
data
ÉÉ 
=
ÉÉ 
int
ÉÉ 
.
ÉÉ 
Parse
ÉÉ $
(
ÉÉ$ %
req
ÉÉ% (
.
ÉÉ( )
QueryString
ÉÉ) 4
[
ÉÉ4 5
$str
ÉÉ5 9
]
ÉÉ9 :
)
ÉÉ: ;
;
ÉÉ; <
}
ÑÑ 
catch
ÖÖ 
(
ÖÖ 
FormatException
ÖÖ & 
exceptNumberFormat
ÖÖ' 9
)
ÖÖ9 :
{
ÜÜ 
IO
áá 
.
áá 
Logger
áá 
.
áá 
Log
áá !
(
áá! "
NLog
áá" &
.
áá& '
LogLevel
áá' /
.
áá/ 0
Warn
áá0 4
,
áá4 5 
exceptNumberFormat
áá6 H
,
ááH I
$strááJ Ä
)ááÄ Å
;ááÅ Ç
}
àà 
}
ââ 
}
ää 	
goodB2G2Private
ãã 
=
ãã 
true
ãã 
;
ãã 
GoodB2G2Sink
åå 
(
åå 
data
åå 
,
åå 
req
åå 
,
åå  
resp
åå! %
)
åå% &
;
åå& '
}
çç 
private
èè 
void
èè 
GoodB2G2Sink
èè 
(
èè 
int
èè !
data
èè" &
,
èè' (
HttpRequest
èè) 4
req
èè5 8
,
èè8 9
HttpResponse
èè: F
resp
èèG K
)
èèK L
{
êê 
if
ëë 

(
ëë 
goodB2G2Private
ëë 
)
ëë 
{
íí 	
if
îî 
(
îî 
data
îî 
!=
îî 
$num
îî 
)
îî 
{
ïï 
IO
ññ 
.
ññ 
	WriteLine
ññ 
(
ññ 
$str
ññ #
+
ññ$ %
data
ññ& *
+
ññ+ ,
$str
ññ- 2
+
ññ3 4
(
ññ5 6
$num
ññ6 9
%
ññ: ;
data
ññ< @
)
ññ@ A
+
ññB C
$str
ññD H
)
ññH I
;
ññI J
}
óó 
else
òò 
{
ôô 
IO
öö 
.
öö 
	WriteLine
öö 
(
öö 
$str
öö D
)
ööD E
;
ööE F
}
õõ 
}
úú 	
}
ùù 
private
†† 
void
†† 
GoodG2B
†† 
(
†† 
HttpRequest
†† $
req
††% (
,
††( )
HttpResponse
††* 6
resp
††7 ;
)
††; <
{
°° 
int
¢¢ 
data
¢¢ 
;
¢¢ 
data
§§ 
=
§§ 
$num
§§ 
;
§§ 
goodG2BPrivate
•• 
=
•• 
true
•• 
;
•• 
GoodG2BSink
¶¶ 
(
¶¶ 
data
¶¶ 
,
¶¶ 
req
¶¶ 
,
¶¶ 
resp
¶¶  $
)
¶¶$ %
;
¶¶% &
}
ßß 
private
©© 
void
©© 
GoodG2BSink
©© 
(
©© 
int
©©  
data
©©! %
,
©©& '
HttpRequest
©©( 3
req
©©4 7
,
©©7 8
HttpResponse
©©9 E
resp
©©F J
)
©©J K
{
™™ 
if
´´ 

(
´´ 
goodG2BPrivate
´´ 
)
´´ 
{
¨¨ 	
IO
ØØ 
.
ØØ 
	WriteLine
ØØ 
(
ØØ 
$str
ØØ 
+
ØØ  !
data
ØØ" &
+
ØØ' (
$str
ØØ) .
+
ØØ/ 0
(
ØØ1 2
$num
ØØ2 5
%
ØØ6 7
data
ØØ8 <
)
ØØ< =
+
ØØ> ?
$str
ØØ@ D
)
ØØD E
;
ØØE F
}
∞∞ 	
}
±± 
}≥≥ 
}¥¥ À9
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_22a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_22a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{   
int!! 
data!! 
=!! 
$num!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;"" 
{$$ 	
if%% 
(%% 
req%% 
.%% 
QueryString%% 
[%%  
$str%%  $
]%%$ %
!=%%& (
null%%) -
)%%- .
{&& 
try'' 
{(( 
data)) 
=)) 
int)) 
.)) 
Parse)) $
())$ %
req))% (
.))( )
QueryString))) 4
[))4 5
$str))5 9
]))9 :
))): ;
;)); <
}** 
catch++ 
(++ 
FormatException++ &
exceptNumberFormat++' 9
)++9 :
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptNumberFormat--6 H
,--H I
$str	--J Ä
)
--Ä Å
;
--Å Ç
}.. 
}// 
}00 	
badPublicStatic11 
=11 
true11 
;11 A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_22b22 =
.22= >
BadSink22> E
(22E F
data22F J
,22K L
req22M P
,22P Q
resp22R V
)22V W
;22W X
}33 
public66 

static66 
bool66  
goodB2G1PublicStatic66 +
=66, -
false66. 3
;663 4
public77 

static77 
bool77  
goodB2G2PublicStatic77 +
=77, -
false77. 3
;773 4
public88 

static88 
bool88 
goodG2BPublicStatic88 *
=88+ ,
false88- 2
;882 3
public:: 

override:: 
void:: 
Good:: 
(:: 
HttpRequest:: )
req::* -
,::- .
HttpResponse::/ ;
resp::< @
)::@ A
{;; 
GoodB2G1<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
GoodB2G2== 
(== 
req== 
,== 
resp== 
)== 
;== 
GoodG2B>> 
(>> 
req>> 
,>> 
resp>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodB2G1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
intDD 
dataDD 
=DD 
$numDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
ifHH 
(HH 
reqHH 
.HH 
QueryStringHH 
[HH  
$strHH  $
]HH$ %
!=HH& (
nullHH) -
)HH- .
{II 
tryJJ 
{KK 
dataLL 
=LL 
intLL 
.LL 
ParseLL $
(LL$ %
reqLL% (
.LL( )
QueryStringLL) 4
[LL4 5
$strLL5 9
]LL9 :
)LL: ;
;LL; <
}MM 
catchNN 
(NN 
FormatExceptionNN &
exceptNumberFormatNN' 9
)NN9 :
{OO 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP !
(PP! "
NLogPP" &
.PP& '
LogLevelPP' /
.PP/ 0
WarnPP0 4
,PP4 5
exceptNumberFormatPP6 H
,PPH I
$str	PPJ Ä
)
PPÄ Å
;
PPÅ Ç
}QQ 
}RR 
}SS 	 
goodB2G1PublicStaticTT 
=TT 
falseTT $
;TT$ %A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_22bUU =
.UU= >
GoodB2G1SinkUU> J
(UUJ K
dataUUK O
,UUP Q
reqUUR U
,UUU V
respUUW [
)UU[ \
;UU\ ]
}VV 
privateYY 
voidYY 
GoodB2G2YY 
(YY 
HttpRequestYY %
reqYY& )
,YY) *
HttpResponseYY+ 7
respYY8 <
)YY< =
{ZZ 
int[[ 
data[[ 
=[[ 
$num[[ 
;[[ 
data\\ 
=\\ 
int\\ 
.\\ 
MinValue\\ 
;\\ 
{^^ 	
if__ 
(__ 
req__ 
.__ 
QueryString__ 
[__  
$str__  $
]__$ %
!=__& (
null__) -
)__- .
{`` 
tryaa 
{bb 
datacc 
=cc 
intcc 
.cc 
Parsecc $
(cc$ %
reqcc% (
.cc( )
QueryStringcc) 4
[cc4 5
$strcc5 9
]cc9 :
)cc: ;
;cc; <
}dd 
catchee 
(ee 
FormatExceptionee &
exceptNumberFormatee' 9
)ee9 :
{ff 
IOgg 
.gg 
Loggergg 
.gg 
Loggg !
(gg! "
NLoggg" &
.gg& '
LogLevelgg' /
.gg/ 0
Warngg0 4
,gg4 5
exceptNumberFormatgg6 H
,ggH I
$str	ggJ Ä
)
ggÄ Å
;
ggÅ Ç
}hh 
}ii 
}jj 	 
goodB2G2PublicStatickk 
=kk 
truekk #
;kk# $A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_22bll =
.ll= >
GoodB2G2Sinkll> J
(llJ K
datallK O
,llP Q
reqllR U
,llU V
respllW [
)ll[ \
;ll\ ]
}mm 
privatepp 
voidpp 
GoodG2Bpp 
(pp 
HttpRequestpp $
reqpp% (
,pp( )
HttpResponsepp* 6
resppp7 ;
)pp; <
{qq 
intrr 
datarr 
=rr 
$numrr 
;rr 
datatt 
=tt 
$numtt 
;tt 
goodG2BPublicStaticuu 
=uu 
trueuu "
;uu" #A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_22bvv =
.vv= >
GoodG2BSinkvv> I
(vvI J
datavvJ N
,vvO P
reqvvQ T
,vvT U
respvvV Z
)vvZ [
;vv[ \
}ww 
}yy 
}zz ô$
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_22b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_22b ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
if 

( A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_22a A
.A B
badPublicStaticB Q
)Q R
{ 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
%""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
}** 
public// 

static// 
void// 
GoodB2G1Sink// #
(//# $
int//$ '
data//( ,
,//- .
HttpRequest/// :
req//; >
,//> ?
HttpResponse//@ L
resp//M Q
)//Q R
{00 
if11 

(11 A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_22a11 A
.11A B 
goodB2G1PublicStatic11B V
)11V W
{22 	
data55 
=55 
$num55 
;55 
}66 	
else77 
{88 	
if:: 
(:: 
data:: 
!=:: 
$num:: 
):: 
{;; 
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< #
+<<$ %
data<<& *
+<<+ ,
$str<<- 2
+<<3 4
(<<5 6
$num<<6 9
%<<: ;
data<<< @
)<<@ A
+<<B C
$str<<D H
)<<H I
;<<I J
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ D
)@@D E
;@@E F
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2G2SinkFF #
(FF# $
intFF$ '
dataFF( ,
,FF- .
HttpRequestFF/ :
reqFF; >
,FF> ?
HttpResponseFF@ L
respFFM Q
)FFQ R
{GG 
ifHH 

(HH A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_22aHH A
.HHA B 
goodB2G2PublicStaticHHB V
)HHV W
{II 	
ifKK 
(KK 
dataKK 
!=KK 
$numKK 
)KK 
{LL 
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM #
+MM$ %
dataMM& *
+MM+ ,
$strMM- 2
+MM3 4
(MM5 6
$numMM6 9
%MM: ;
dataMM< @
)MM@ A
+MMB C
$strMMD H
)MMH I
;MMI J
}NN 
elseOO 
{PP 
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ D
)QQD E
;QQE F
}RR 
}SS 	
elseTT 
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
}ZZ 
public]] 

static]] 
void]] 
GoodG2BSink]] "
(]]" #
int]]# &
data]]' +
,]], -
HttpRequest]]. 9
req]]: =
,]]= >
HttpResponse]]? K
resp]]L P
)]]P Q
{^^ 
if__ 

(__ A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_22a__ A
.__A B
goodG2BPublicStatic__B U
)__U V
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc 
+cc  !
datacc" &
+cc' (
$strcc) .
+cc/ 0
(cc1 2
$numcc2 5
%cc6 7
datacc8 <
)cc< =
+cc> ?
$strcc@ D
)ccD E
;ccE F
}dd 	
elseee 
{ff 	
dataii 
=ii 
$numii 
;ii 
}jj 	
}kk 
}mm 
}nn .
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_31.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_31 :
:; <
AbstractTestCaseWeb= P
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
dataCopy 
; 
{   	
int!! 
data!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;""  
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
try'' 
{(( 
data)) 
=)) 
int)) "
.))" #
Parse))# (
())( )
req))) ,
.)), -
QueryString))- 8
[))8 9
$str))9 =
]))= >
)))> ?
;))? @
}** 
catch++ 
(++ 
FormatException++ *
exceptNumberFormat+++ =
)++= >
{,, 
IO-- 
.-- 
Logger-- !
.--! "
Log--" %
(--% &
NLog--& *
.--* +
LogLevel--+ 3
.--3 4
Warn--4 8
,--8 9
exceptNumberFormat--: L
,--L M
$str	--N Ñ
)
--Ñ Ö
;
--Ö Ü
}.. 
}// 
}00 
dataCopy11 
=11 
data11 
;11 
}22 	
{33 	
int44 
data44 
=44 
dataCopy44 
;44  
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
HttpRequest<< )
req<<* -
,<<- .
HttpResponse<</ ;
resp<<< @
)<<@ A
{== 
GoodG2B>> 
(>> 
req>> 
,>> 
resp>> 
)>> 
;>> 
GoodB2G?? 
(?? 
req?? 
,?? 
resp?? 
)?? 
;?? 
}@@ 
privateCC 
voidCC 
GoodG2BCC 
(CC 
HttpRequestCC $
reqCC% (
,CC( )
HttpResponseCC* 6
respCC7 ;
)CC; <
{DD 
intEE 
dataCopyEE 
;EE 
{FF 	
intGG 
dataGG 
;GG 
dataII 
=II 
$numII 
;II 
dataCopyJJ 
=JJ 
dataJJ 
;JJ 
}KK 	
{LL 	
intMM 
dataMM 
=MM 
dataCopyMM 
;MM  
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP 
+PP  !
dataPP" &
+PP' (
$strPP) .
+PP/ 0
(PP1 2
$numPP2 5
%PP6 7
dataPP8 <
)PP< =
+PP> ?
$strPP@ D
)PPD E
;PPE F
}QQ 	
}RR 
privateUU 
voidUU 
GoodB2GUU 
(UU 
HttpRequestUU $
reqUU% (
,UU( )
HttpResponseUU* 6
respUU7 ;
)UU; <
{VV 
intWW 
dataCopyWW 
;WW 
{XX 	
intYY 
dataYY 
;YY 
dataZZ 
=ZZ 
intZZ 
.ZZ 
MinValueZZ 
;ZZ  
{\\ 
if]] 
(]] 
req]] 
.]] 
QueryString]] #
[]]# $
$str]]$ (
]]]( )
!=]]* ,
null]]- 1
)]]1 2
{^^ 
try__ 
{`` 
dataaa 
=aa 
intaa "
.aa" #
Parseaa# (
(aa( )
reqaa) ,
.aa, -
QueryStringaa- 8
[aa8 9
$straa9 =
]aa= >
)aa> ?
;aa? @
}bb 
catchcc 
(cc 
FormatExceptioncc *
exceptNumberFormatcc+ =
)cc= >
{dd 
IOee 
.ee 
Loggeree !
.ee! "
Logee" %
(ee% &
NLogee& *
.ee* +
LogLevelee+ 3
.ee3 4
Warnee4 8
,ee8 9
exceptNumberFormatee: L
,eeL M
$str	eeN Ñ
)
eeÑ Ö
;
eeÖ Ü
}ff 
}gg 
}hh 
dataCopyii 
=ii 
dataii 
;ii 
}jj 	
{kk 	
intll 
datall 
=ll 
dataCopyll 
;ll  
ifnn 
(nn 
datann 
!=nn 
$numnn 
)nn 
{oo 
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp #
+pp$ %
datapp& *
+pp+ ,
$strpp- 2
+pp3 4
(pp5 6
$numpp6 9
%pp: ;
datapp< @
)pp@ A
+ppB C
$strppD H
)ppH I
;ppI J
}qq 
elserr 
{ss 
IOtt 
.tt 
	WriteLinett 
(tt 
$strtt D
)ttD E
;ttE F
}uu 
}vv 	
}ww 
}yy 
}zz £3
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_41.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_41 :
:; <
AbstractTestCaseWeb= P
{ 
private 
static 
void 
BadSink 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
HttpRequest$$ (
req$$) ,
,$$, -
HttpResponse$$. :
resp$$; ?
)$$? @
{%% 
int&& 
data&& 
;&& 
data'' 
='' 
int'' 
.'' 
MinValue'' 
;'' 
{)) 	
if** 
(** 
req** 
.** 
QueryString** 
[**  
$str**  $
]**$ %
!=**& (
null**) -
)**- .
{++ 
try,, 
{-- 
data.. 
=.. 
int.. 
... 
Parse.. $
(..$ %
req..% (
...( )
QueryString..) 4
[..4 5
$str..5 9
]..9 :
)..: ;
;..; <
}// 
catch00 
(00 
FormatException00 &
exceptNumberFormat00' 9
)009 :
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptNumberFormat226 H
,22H I
$str	22J Ä
)
22Ä Å
;
22Å Ç
}33 
}44 
}55 	
BadSink66 
(66 
data66 
,66 
req66 
,66 
resp66  
)66! "
;66" #
}77 
public:: 

override:: 
void:: 
Good:: 
(:: 
HttpRequest:: )
req::* -
,::- .
HttpResponse::/ ;
resp::< @
)::@ A
{;; 
GoodG2B<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
GoodB2G== 
(== 
req== 
,== 
resp== 
)== 
;== 
}>> 
private@@ 
static@@ 
void@@ 
GoodG2BSink@@ #
(@@# $
int@@$ '
data@@( ,
,@@- .
HttpRequest@@/ :
req@@; >
,@@> ?
HttpResponse@@@ L
resp@@M Q
)@@Q R
{AA 
IODD 

.DD
 
	WriteLineDD 
(DD 
$strDD 
+DD 
dataDD "
+DD# $
$strDD% *
+DD+ ,
(DD- .
$numDD. 1
%DD2 3
dataDD4 8
)DD8 9
+DD: ;
$strDD< @
)DD@ A
;DDA B
}EE 
privateHH 
staticHH 
voidHH 
GoodG2BHH 
(HH  
HttpRequestHH  +
reqHH, /
,HH/ 0
HttpResponseHH1 =
respHH> B
)HHB C
{II 
intJJ 
dataJJ 
;JJ 
dataLL 
=LL 
$numLL 
;LL 
GoodG2BSinkMM 
(MM 
dataMM 
,MM 
reqMM 
,MM 
respMM  $
)MM% &
;MM& '
}NN 
privatePP 
staticPP 
voidPP 
GoodB2GSinkPP #
(PP# $
intPP$ '
dataPP( ,
,PP- .
HttpRequestPP/ :
reqPP; >
,PP> ?
HttpResponsePP@ L
respPPM Q
)PPQ R
{QQ 
ifSS 

(SS 
dataSS 
!=SS 
$numSS 
)SS 
{TT 	
IOUU 
.UU 
	WriteLineUU 
(UU 
$strUU 
+UU  !
dataUU" &
+UU' (
$strUU) .
+UU/ 0
(UU1 2
$numUU2 5
%UU6 7
dataUU8 <
)UU< =
+UU> ?
$strUU@ D
)UUD E
;UUE F
}VV 	
elseWW 
{XX 	
IOYY 
.YY 
	WriteLineYY 
(YY 
$strYY @
)YY@ A
;YYA B
}ZZ 	
}[[ 
private^^ 
static^^ 
void^^ 
GoodB2G^^ 
(^^  
HttpRequest^^  +
req^^, /
,^^/ 0
HttpResponse^^1 =
resp^^> B
)^^B C
{__ 
int`` 
data`` 
;`` 
dataaa 
=aa 
intaa 
.aa 
MinValueaa 
;aa 
{cc 	
ifdd 
(dd 
reqdd 
.dd 
QueryStringdd 
[dd  
$strdd  $
]dd$ %
!=dd& (
nulldd) -
)dd- .
{ee 
tryff 
{gg 
datahh 
=hh 
inthh 
.hh 
Parsehh $
(hh$ %
reqhh% (
.hh( )
QueryStringhh) 4
[hh4 5
$strhh5 9
]hh9 :
)hh: ;
;hh; <
}ii 
catchjj 
(jj 
FormatExceptionjj &
exceptNumberFormatjj' 9
)jj9 :
{kk 
IOll 
.ll 
Loggerll 
.ll 
Logll !
(ll! "
NLogll" &
.ll& '
LogLevelll' /
.ll/ 0
Warnll0 4
,ll4 5
exceptNumberFormatll6 H
,llH I
$str	llJ Ä
)
llÄ Å
;
llÅ Ç
}mm 
}nn 
}oo 	
GoodB2GSinkpp 
(pp 
datapp 
,pp 
reqpp 
,pp 
resppp  $
)pp% &
;pp& '
}qq 
}ss 
}tt Ë3
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_42.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_42 :
:; <
AbstractTestCaseWeb= P
{ 
private 
static 
int 
	BadSource  
(  !
HttpRequest! ,
req- 0
,0 1
HttpResponse2 >
resp? C
)C D
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
try%% 
{&& 
data'' 
='' 
int'' 
.'' 
Parse'' $
(''$ %
req''% (
.''( )
QueryString'') 4
[''4 5
$str''5 9
]''9 :
)'': ;
;''; <
}(( 
catch)) 
()) 
FormatException)) &
exceptNumberFormat))' 9
)))9 :
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ !
(++! "
NLog++" &
.++& '
LogLevel++' /
.++/ 0
Warn++0 4
,++4 5
exceptNumberFormat++6 H
,++H I
$str	++J Ä
)
++Ä Å
;
++Å Ç
},, 
}-- 
}.. 	
return// 
data// 
;// 
}00 
public22 

override22 
void22 
Bad22 
(22 
HttpRequest22 (
req22) ,
,22, -
HttpResponse22. :
resp22; ?
)22? @
{33 
int44 
data44 
=44 
	BadSource44 
(44 
req44  
,44  !
resp44" &
)44& '
;44' (
IO77 

.77
 
	WriteLine77 
(77 
$str77 
+77 
data77 "
+77# $
$str77% *
+77+ ,
(77- .
$num77. 1
%772 3
data774 8
)778 9
+77: ;
$str77< @
)77@ A
;77A B
}88 
private<< 
static<< 
int<< 
GoodG2BSource<< $
(<<$ %
HttpRequest<<% 0
req<<1 4
,<<4 5
HttpResponse<<6 B
resp<<C G
)<<G H
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
$num@@ 
;@@ 
returnAA 
dataAA 
;AA 
}BB 
privateDD 
staticDD 
voidDD 
GoodG2BDD 
(DD  
HttpRequestDD  +
reqDD, /
,DD/ 0
HttpResponseDD1 =
respDD> B
)DDB C
{EE 
intFF 
dataFF 
=FF 
GoodG2BSourceFF  
(FF  !
reqFF! $
,FF$ %
respFF& *
)FF* +
;FF+ ,
IOII 

.II
 
	WriteLineII 
(II 
$strII 
+II 
dataII "
+II# $
$strII% *
+II+ ,
(II- .
$numII. 1
%II2 3
dataII4 8
)II8 9
+II: ;
$strII< @
)II@ A
;IIA B
}JJ 
privateMM 
staticMM 
intMM 
GoodB2GSourceMM $
(MM$ %
HttpRequestMM% 0
reqMM1 4
,MM4 5
HttpResponseMM6 B
respMMC G
)MMG H
{NN 
intOO 
dataOO 
;OO 
dataPP 
=PP 
intPP 
.PP 
MinValuePP 
;PP 
{RR 	
ifSS 
(SS 
reqSS 
.SS 
QueryStringSS 
[SS  
$strSS  $
]SS$ %
!=SS& (
nullSS) -
)SS- .
{TT 
tryUU 
{VV 
dataWW 
=WW 
intWW 
.WW 
ParseWW $
(WW$ %
reqWW% (
.WW( )
QueryStringWW) 4
[WW4 5
$strWW5 9
]WW9 :
)WW: ;
;WW; <
}XX 
catchYY 
(YY 
FormatExceptionYY &
exceptNumberFormatYY' 9
)YY9 :
{ZZ 
IO[[ 
.[[ 
Logger[[ 
.[[ 
Log[[ !
([[! "
NLog[[" &
.[[& '
LogLevel[[' /
.[[/ 0
Warn[[0 4
,[[4 5
exceptNumberFormat[[6 H
,[[H I
$str	[[J Ä
)
[[Ä Å
;
[[Å Ç
}\\ 
}]] 
}^^ 	
return__ 
data__ 
;__ 
}`` 
privatebb 
staticbb 
voidbb 
GoodB2Gbb 
(bb  
HttpRequestbb  +
reqbb, /
,bb/ 0
HttpResponsebb1 =
respbb> B
)bbB C
{cc 
intdd 
datadd 
=dd 
GoodB2GSourcedd  
(dd  !
reqdd! $
,dd$ %
respdd& *
)dd* +
;dd+ ,
ifff 

(ff 
dataff 
!=ff 
$numff 
)ff 
{gg 	
IOhh 
.hh 
	WriteLinehh 
(hh 
$strhh 
+hh  !
datahh" &
+hh' (
$strhh) .
+hh/ 0
(hh1 2
$numhh2 5
%hh6 7
datahh8 <
)hh< =
+hh> ?
$strhh@ D
)hhD E
;hhE F
}ii 	
elsejj 
{kk 	
IOll 
.ll 
	WriteLinell 
(ll 
$strll @
)ll@ A
;llA B
}mm 	
}nn 
publicpp 

overridepp 
voidpp 
Goodpp 
(pp 
HttpRequestpp )
reqpp* -
,pp- .
HttpResponsepp/ ;
resppp< @
)pp@ A
{qq 
GoodG2Brr 
(rr 
reqrr 
,rr 
resprr 
)rr 
;rr 
GoodB2Gss 
(ss 
reqss 
,ss 
respss 
)ss 
;ss 
}tt 
}vv 
}ww ç6
≠C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_45.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class @
4CWE369_Divide_by_Zero__int_QueryString_Web_modulo_45 :
:; <
AbstractTestCaseWeb= P
{ 
private 
int 
dataBad 
; 
private 
int 
dataGoodG2B 
; 
private 
int 
dataGoodB2G 
; 
private!! 
void!! 
BadSink!! 
(!! 
HttpRequest!! $
req!!% (
,!!( )
HttpResponse!!* 6
resp!!7 ;
)!!; <
{"" 
int## 
data## 
=## 
dataBad## 
;## 
IO&& 

.&&
 
	WriteLine&& 
(&& 
$str&& 
+&& 
data&& "
+&&# $
$str&&% *
+&&+ ,
(&&- .
$num&&. 1
%&&2 3
data&&4 8
)&&8 9
+&&: ;
$str&&< @
)&&@ A
;&&A B
}'' 
public)) 

override)) 
void)) 
Bad)) 
()) 
HttpRequest)) (
req))) ,
,)), -
HttpResponse)). :
resp)); ?
)))? @
{** 
int++ 
data++ 
;++ 
data,, 
=,, 
int,, 
.,, 
MinValue,, 
;,, 
{.. 	
if// 
(// 
req// 
.// 
QueryString// 
[//  
$str//  $
]//$ %
!=//& (
null//) -
)//- .
{00 
try11 
{22 
data33 
=33 
int33 
.33 
Parse33 $
(33$ %
req33% (
.33( )
QueryString33) 4
[334 5
$str335 9
]339 :
)33: ;
;33; <
}44 
catch55 
(55 
FormatException55 &
exceptNumberFormat55' 9
)559 :
{66 
IO77 
.77 
Logger77 
.77 
Log77 !
(77! "
NLog77" &
.77& '
LogLevel77' /
.77/ 0
Warn770 4
,774 5
exceptNumberFormat776 H
,77H I
$str	77J Ä
)
77Ä Å
;
77Å Ç
}88 
}99 
}:: 	
dataBad;; 
=;; 
data;; 
;;; 
BadSink<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
HttpRequest@@ )
req@@* -
,@@- .
HttpResponse@@/ ;
resp@@< @
)@@@ A
{AA 
GoodG2BBB 
(BB 
reqBB 
,BB 
respBB 
)BB 
;BB 
GoodB2GCC 
(CC 
reqCC 
,CC 
respCC 
)CC 
;CC 
}DD 
privateFF 
voidFF 
GoodG2BSinkFF 
(FF 
HttpRequestFF (
reqFF) ,
,FF, -
HttpResponseFF. :
respFF; ?
)FF? @
{GG 
intHH 
dataHH 
=HH 
dataGoodG2BHH 
;HH 
IOKK 

.KK
 
	WriteLineKK 
(KK 
$strKK 
+KK 
dataKK "
+KK# $
$strKK% *
+KK+ ,
(KK- .
$numKK. 1
%KK2 3
dataKK4 8
)KK8 9
+KK: ;
$strKK< @
)KK@ A
;KKA B
}LL 
privateOO 
voidOO 
GoodG2BOO 
(OO 
HttpRequestOO $
reqOO% (
,OO( )
HttpResponseOO* 6
respOO7 ;
)OO; <
{PP 
intQQ 
dataQQ 
;QQ 
dataSS 
=SS 
$numSS 
;SS 
dataGoodG2BTT 
=TT 
dataTT 
;TT 
GoodG2BSinkUU 
(UU 
reqUU 
,UU 
respUU 
)UU 
;UU 
}VV 
privateXX 
voidXX 
GoodB2GSinkXX 
(XX 
HttpRequestXX (
reqXX) ,
,XX, -
HttpResponseXX. :
respXX; ?
)XX? @
{YY 
intZZ 
dataZZ 
=ZZ 
dataGoodB2GZZ 
;ZZ 
if\\ 

(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ 
+^^  !
data^^" &
+^^' (
$str^^) .
+^^/ 0
(^^1 2
$num^^2 5
%^^6 7
data^^8 <
)^^< =
+^^> ?
$str^^@ D
)^^D E
;^^E F
}__ 	
else`` 
{aa 	
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb @
)bb@ A
;bbA B
}cc 	
}dd 
privategg 
voidgg 
GoodB2Ggg 
(gg 
HttpRequestgg $
reqgg% (
,gg( )
HttpResponsegg* 6
respgg7 ;
)gg; <
{hh 
intii 
dataii 
;ii 
datajj 
=jj 
intjj 
.jj 
MinValuejj 
;jj 
{ll 	
ifmm 
(mm 
reqmm 
.mm 
QueryStringmm 
[mm  
$strmm  $
]mm$ %
!=mm& (
nullmm) -
)mm- .
{nn 
tryoo 
{pp 
dataqq 
=qq 
intqq 
.qq 
Parseqq $
(qq$ %
reqqq% (
.qq( )
QueryStringqq) 4
[qq4 5
$strqq5 9
]qq9 :
)qq: ;
;qq; <
}rr 
catchss 
(ss 
FormatExceptionss &
exceptNumberFormatss' 9
)ss9 :
{tt 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu !
(uu! "
NLoguu" &
.uu& '
LogLeveluu' /
.uu/ 0
Warnuu0 4
,uu4 5
exceptNumberFormatuu6 H
,uuH I
$str	uuJ Ä
)
uuÄ Å
;
uuÅ Ç
}vv 
}ww 
}xx 	
dataGoodB2Gyy 
=yy 
datayy 
;yy 
GoodB2GSinkzz 
(zz 
reqzz 
,zz 
respzz 
)zz 
;zz 
}{{ 
}}} 
}~~ µ$
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_51a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_51a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_51b.. =
...= >
BadSink..> E
(..E F
data..F J
,..K L
req..M P
,..P Q
resp..R V
)..W X
;..X Y
}// 
public22 

override22 
void22 
Good22 
(22 
HttpRequest22 )
req22* -
,22- .
HttpResponse22/ ;
resp22< @
)22@ A
{33 
GoodG2B44 
(44 
req44 
,44 
resp44 
)44 
;44 
GoodB2G55 
(55 
req55 
,55 
resp55 
)55 
;55 
}66 
private99 
void99 
GoodG2B99 
(99 
HttpRequest99 $
req99% (
,99( )
HttpResponse99* 6
resp997 ;
)99; <
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_51b>> =
.>>= >
GoodG2BSink>>> I
(>>I J
data>>J N
,>>O P
req>>Q T
,>>T U
resp>>V Z
)>>[ \
;>>\ ]
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
HttpRequestBB $
reqBB% (
,BB( )
HttpResponseBB* 6
respBB7 ;
)BB; <
{CC 
intDD 
dataDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
ifHH 
(HH 
reqHH 
.HH 
QueryStringHH 
[HH  
$strHH  $
]HH$ %
!=HH& (
nullHH) -
)HH- .
{II 
tryJJ 
{KK 
dataLL 
=LL 
intLL 
.LL 
ParseLL $
(LL$ %
reqLL% (
.LL( )
QueryStringLL) 4
[LL4 5
$strLL5 9
]LL9 :
)LL: ;
;LL; <
}MM 
catchNN 
(NN 
FormatExceptionNN &
exceptNumberFormatNN' 9
)NN9 :
{OO 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP !
(PP! "
NLogPP" &
.PP& '
LogLevelPP' /
.PP/ 0
WarnPP0 4
,PP4 5
exceptNumberFormatPP6 H
,PPH I
$str	PPJ Ä
)
PPÄ Å
;
PPÅ Ç
}QQ 
}RR 
}SS 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_51bTT =
.TT= >
GoodB2GSinkTT> I
(TTI J
dataTTJ N
,TTO P
reqTTQ T
,TTT U
respTTV Z
)TT[ \
;TT\ ]
}UU 
}WW 
}XX “
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_51b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_51b ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< µ$
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_52a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_52a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_52b.. =
...= >
BadSink..> E
(..E F
data..F J
,..K L
req..M P
,..P Q
resp..R V
)..V W
;..W X
}// 
public22 

override22 
void22 
Good22 
(22 
HttpRequest22 )
req22* -
,22- .
HttpResponse22/ ;
resp22< @
)22@ A
{33 
GoodG2B44 
(44 
req44 
,44 
resp44 
)44 
;44 
GoodB2G55 
(55 
req55 
,55 
resp55 
)55 
;55 
}66 
private99 
void99 
GoodG2B99 
(99 
HttpRequest99 $
req99% (
,99( )
HttpResponse99* 6
resp997 ;
)99; <
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_52b>> =
.>>= >
GoodG2BSink>>> I
(>>I J
data>>J N
,>>O P
req>>Q T
,>>T U
resp>>V Z
)>>Z [
;>>[ \
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
HttpRequestBB $
reqBB% (
,BB( )
HttpResponseBB* 6
respBB7 ;
)BB; <
{CC 
intDD 
dataDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
ifHH 
(HH 
reqHH 
.HH 
QueryStringHH 
[HH  
$strHH  $
]HH$ %
!=HH& (
nullHH) -
)HH- .
{II 
tryJJ 
{KK 
dataLL 
=LL 
intLL 
.LL 
ParseLL $
(LL$ %
reqLL% (
.LL( )
QueryStringLL) 4
[LL4 5
$strLL5 9
]LL9 :
)LL: ;
;LL; <
}MM 
catchNN 
(NN 
FormatExceptionNN &
exceptNumberFormatNN' 9
)NN9 :
{OO 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP !
(PP! "
NLogPP" &
.PP& '
LogLevelPP' /
.PP/ 0
WarnPP0 4
,PP4 5
exceptNumberFormatPP6 H
,PPH I
$str	PPJ Ä
)
PPÄ Å
;
PPÅ Ç
}QQ 
}RR 
}SS 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_52bTT =
.TT= >
GoodB2GSinkTT> I
(TTI J
dataTTJ N
,TTO P
reqTTQ T
,TTT U
respTTV Z
)TTZ [
;TT[ \
}UU 
}WW 
}XX ¬
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_52b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_52b ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_52c =
.= >
BadSink> E
(E F
dataF J
,K L
reqM P
,P Q
respR V
)V W
;W X
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_52c&& =
.&&= >
GoodG2BSink&&> I
(&&I J
data&&J N
,&&O P
req&&Q T
,&&T U
resp&&V Z
)&&Z [
;&&[ \
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_52c,, =
.,,= >
GoodB2GSink,,> I
(,,I J
data,,J N
,,,O P
req,,Q T
,,,T U
resp,,V Z
),,Z [
;,,[ \
}-- 
}// 
}00 “
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_52c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_52c ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< µ$
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53b.. =
...= >
BadSink..> E
(..E F
data..F J
,..K L
req..M P
,..P Q
resp..R V
)..V W
;..W X
}// 
public22 

override22 
void22 
Good22 
(22 
HttpRequest22 )
req22* -
,22- .
HttpResponse22/ ;
resp22< @
)22@ A
{33 
GoodG2B44 
(44 
req44 
,44 
resp44 
)44 
;44 
GoodB2G55 
(55 
req55 
,55 
resp55 
)55 
;55 
}66 
private99 
void99 
GoodG2B99 
(99 
HttpRequest99 $
req99% (
,99( )
HttpResponse99* 6
resp997 ;
)99; <
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53b>> =
.>>= >
GoodG2BSink>>> I
(>>I J
data>>J N
,>>O P
req>>Q T
,>>T U
resp>>V Z
)>>Z [
;>>[ \
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
HttpRequestBB $
reqBB% (
,BB( )
HttpResponseBB* 6
respBB7 ;
)BB; <
{CC 
intDD 
dataDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
ifHH 
(HH 
reqHH 
.HH 
QueryStringHH 
[HH  
$strHH  $
]HH$ %
!=HH& (
nullHH) -
)HH- .
{II 
tryJJ 
{KK 
dataLL 
=LL 
intLL 
.LL 
ParseLL $
(LL$ %
reqLL% (
.LL( )
QueryStringLL) 4
[LL4 5
$strLL5 9
]LL9 :
)LL: ;
;LL; <
}MM 
catchNN 
(NN 
FormatExceptionNN &
exceptNumberFormatNN' 9
)NN9 :
{OO 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP !
(PP! "
NLogPP" &
.PP& '
LogLevelPP' /
.PP/ 0
WarnPP0 4
,PP4 5
exceptNumberFormatPP6 H
,PPH I
$str	PPJ Ä
)
PPÄ Å
;
PPÅ Ç
}QQ 
}RR 
}SS 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53bTT =
.TT= >
GoodB2GSinkTT> I
(TTI J
dataTTJ N
,TTO P
reqTTQ T
,TTT U
respTTV Z
)TTZ [
;TT[ \
}UU 
}WW 
}XX ¬
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53b ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53c =
.= >
BadSink> E
(E F
dataF J
,K L
reqM P
,P Q
respR V
)V W
;W X
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53c&& =
.&&= >
GoodG2BSink&&> I
(&&I J
data&&J N
,&&O P
req&&Q T
,&&T U
resp&&V Z
)&&Z [
;&&[ \
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53c,, =
.,,= >
GoodB2GSink,,> I
(,,I J
data,,J N
,,,O P
req,,Q T
,,,T U
resp,,V Z
),,Z [
;,,[ \
}-- 
}// 
}00 ¬
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53c ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53d =
.= >
BadSink> E
(E F
dataF J
,K L
reqM P
,P Q
respR V
)V W
;W X
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53d&& =
.&&= >
GoodG2BSink&&> I
(&&I J
data&&J N
,&&O P
req&&Q T
,&&T U
resp&&V Z
)&&Z [
;&&[ \
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53d,, =
.,,= >
GoodB2GSink,,> I
(,,I J
data,,J N
,,,O P
req,,Q T
,,,T U
resp,,V Z
),,Z [
;,,[ \
}-- 
}// 
}00 “
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_53d ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< µ$
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54b.. =
...= >
BadSink..> E
(..E F
data..F J
,..K L
req..M P
,..P Q
resp..R V
)..V W
;..W X
}// 
public22 

override22 
void22 
Good22 
(22 
HttpRequest22 )
req22* -
,22- .
HttpResponse22/ ;
resp22< @
)22@ A
{33 
GoodG2B44 
(44 
req44 
,44 
resp44 
)44 
;44 
GoodB2G55 
(55 
req55 
,55 
resp55 
)55 
;55 
}66 
private99 
void99 
GoodG2B99 
(99 
HttpRequest99 $
req99% (
,99( )
HttpResponse99* 6
resp997 ;
)99; <
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54b>> =
.>>= >
GoodG2BSink>>> I
(>>I J
data>>J N
,>>O P
req>>Q T
,>>T U
resp>>V Z
)>>Z [
;>>[ \
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
HttpRequestBB $
reqBB% (
,BB( )
HttpResponseBB* 6
respBB7 ;
)BB; <
{CC 
intDD 
dataDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
ifHH 
(HH 
reqHH 
.HH 
QueryStringHH 
[HH  
$strHH  $
]HH$ %
!=HH& (
nullHH) -
)HH- .
{II 
tryJJ 
{KK 
dataLL 
=LL 
intLL 
.LL 
ParseLL $
(LL$ %
reqLL% (
.LL( )
QueryStringLL) 4
[LL4 5
$strLL5 9
]LL9 :
)LL: ;
;LL; <
}MM 
catchNN 
(NN 
FormatExceptionNN &
exceptNumberFormatNN' 9
)NN9 :
{OO 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP !
(PP! "
NLogPP" &
.PP& '
LogLevelPP' /
.PP/ 0
WarnPP0 4
,PP4 5
exceptNumberFormatPP6 H
,PPH I
$str	PPJ Ä
)
PPÄ Å
;
PPÅ Ç
}QQ 
}RR 
}SS 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54bTT =
.TT= >
GoodB2GSinkTT> I
(TTI J
dataTTJ N
,TTO P
reqTTQ T
,TTT U
respTTV Z
)TTZ [
;TT[ \
}UU 
}WW 
}XX ¬
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54b ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54c =
.= >
BadSink> E
(E F
dataF J
,K L
reqM P
,P Q
respR V
)V W
;W X
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54c&& =
.&&= >
GoodG2BSink&&> I
(&&I J
data&&J N
,&&O P
req&&Q T
,&&T U
resp&&V Z
)&&Z [
;&&[ \
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54c,, =
.,,= >
GoodB2GSink,,> I
(,,I J
data,,J N
,,,O P
req,,Q T
,,,T U
resp,,V Z
),,Z [
;,,[ \
}-- 
}// 
}00 ¬
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54c ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54d =
.= >
BadSink> E
(E F
dataF J
,K L
reqM P
,P Q
respR V
)V W
;W X
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54d&& =
.&&= >
GoodG2BSink&&> I
(&&I J
data&&J N
,&&O P
req&&Q T
,&&T U
resp&&V Z
)&&Z [
;&&[ \
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54d,, =
.,,= >
GoodB2GSink,,> I
(,,I J
data,,J N
,,,O P
req,,Q T
,,,T U
resp,,V Z
),,Z [
;,,[ \
}-- 
}// 
}00 ¬
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54d ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54e =
.= >
BadSink> E
(E F
dataF J
,K L
reqM P
,P Q
respR V
)V W
;W X
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
,$$, -
HttpRequest$$. 9
req$$: =
,$$= >
HttpResponse$$? K
resp$$L P
)$$P Q
{%% A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54e&& =
.&&= >
GoodG2BSink&&> I
(&&I J
data&&J N
,&&O P
req&&Q T
,&&T U
resp&&V Z
)&&Z [
;&&[ \
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
,**, -
HttpRequest**. 9
req**: =
,**= >
HttpResponse**? K
resp**L P
)**P Q
{++ A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54e,, =
.,,= >
GoodB2GSink,,> I
(,,I J
data,,J N
,,,O P
req,,Q T
,,,T U
resp,,V Z
),,Z [
;,,[ \
}-- 
}// 
}00 “
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54e.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_54e ;
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
,( )
HttpRequest* 5
req6 9
,9 :
HttpResponse; G
respH L
)L M
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
,&&, -
HttpRequest&&. 9
req&&: =
,&&= >
HttpResponse&&? K
resp&&L P
)&&P Q
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
,.., -
HttpRequest... 9
req..: =
,..= >
HttpResponse..? K
resp..L P
)..P Q
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< ±
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_61a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_61a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
= A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_61b H
.H I
	BadSourceI R
(R S
reqS V
,V W
respX \
)\ ]
;] ^
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
HttpRequest%% )
req%%* -
,%%- .
HttpResponse%%/ ;
resp%%< @
)%%@ A
{&& 
GoodG2B'' 
('' 
req'' 
,'' 
resp'' 
)'' 
;'' 
GoodB2G(( 
((( 
req(( 
,(( 
resp(( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
HttpRequest,,  +
req,,, /
,,,/ 0
HttpResponse,,1 =
resp,,> B
),,B C
{-- 
int.. 
data.. 
=.. A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_61b.. H
...H I
GoodG2BSource..I V
(..V W
req..W Z
,..Z [
resp..\ `
)..` a
;..a b
IO11 

.11
 
	WriteLine11 
(11 
$str11 
+11 
data11 "
+11# $
$str11% *
+11+ ,
(11- .
$num11. 1
%112 3
data114 8
)118 9
+11: ;
$str11< @
)11@ A
;11A B
}22 
private55 
static55 
void55 
GoodB2G55 
(55  
HttpRequest55  +
req55, /
,55/ 0
HttpResponse551 =
resp55> B
)55B C
{66 
int77 
data77 
=77 A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_61b77 H
.77H I
GoodB2GSource77I V
(77V W
req77W Z
,77Z [
resp77\ `
)77` a
;77a b
if99 

(99 
data99 
!=99 
$num99 
)99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; 
+;;  !
data;;" &
+;;' (
$str;;) .
+;;/ 0
(;;1 2
$num;;2 5
%;;6 7
data;;8 <
);;< =
+;;> ?
$str;;@ D
);;D E
;;;E F
}<< 	
else== 
{>> 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? @
)??@ A
;??A B
}@@ 	
}AA 
}CC 
}DD √
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_61b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_61b ;
{ 
public 

static 
int 
	BadSource 
(  
HttpRequest  +
req, /
,/ 0
HttpResponse1 =
resp> B
)B C
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	
return.. 
data.. 
;.. 
}// 
public44 

static44 
int44 
GoodG2BSource44 #
(44# $
HttpRequest44$ /
req440 3
,443 4
HttpResponse445 A
resp44B F
)44F G
{55 
int66 
data66 
;66 
data88 
=88 
$num88 
;88 
return99 
data99 
;99 
}:: 
public== 

static== 
int== 
GoodB2GSource== #
(==# $
HttpRequest==$ /
req==0 3
,==3 4
HttpResponse==5 A
resp==B F
)==F G
{>> 
int?? 
data?? 
;?? 
data@@ 
=@@ 
int@@ 
.@@ 
MinValue@@ 
;@@ 
{BB 	
ifCC 
(CC 
reqCC 
.CC 
QueryStringCC 
[CC  
$strCC  $
]CC$ %
!=CC& (
nullCC) -
)CC- .
{DD 
tryEE 
{FF 
dataGG 
=GG 
intGG 
.GG 
ParseGG $
(GG$ %
reqGG% (
.GG( )
QueryStringGG) 4
[GG4 5
$strGG5 9
]GG9 :
)GG: ;
;GG; <
}HH 
catchII 
(II 
FormatExceptionII &
exceptNumberFormatII' 9
)II9 :
{JJ 
IOKK 
.KK 
LoggerKK 
.KK 
LogKK !
(KK! "
NLogKK" &
.KK& '
LogLevelKK' /
.KK/ 0
WarnKK0 4
,KK4 5
exceptNumberFormatKK6 H
,KKH I
$str	KKJ Ä
)
KKÄ Å
;
KKÅ Ç
}LL 
}MM 
}NN 	
returnOO 
dataOO 
;OO 
}PP 
}RR 
}SS Û+
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_66a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_66a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	
int.. 
[.. 
].. 
	dataArray.. 
=.. 
new.. 
int.. !
[..! "
$num.." #
]..# $
;..$ %
	dataArray// 
[// 
$num// 
]// 
=// 
data// 
;// A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_66b00 =
.00= >
BadSink00> E
(00E F
	dataArray00F O
,00P Q
req00R U
,00U V
resp00W [
)00\ ]
;00] ^
}11 
public44 

override44 
void44 
Good44 
(44 
HttpRequest44 )
req44* -
,44- .
HttpResponse44/ ;
resp44< @
)44@ A
{55 
GoodG2B66 
(66 
req66 
,66 
resp66 
)66 
;66 
GoodB2G77 
(77 
req77 
,77 
resp77 
)77 
;77 
}88 
private;; 
static;; 
void;; 
GoodG2B;; 
(;;  
HttpRequest;;  +
req;;, /
,;;/ 0
HttpResponse;;1 =
resp;;> B
);;B C
{<< 
int== 
data== 
;== 
data?? 
=?? 
$num?? 
;?? 
int@@ 
[@@ 
]@@ 
	dataArray@@ 
=@@ 
new@@ 
int@@ !
[@@! "
$num@@" #
]@@# $
;@@$ %
	dataArrayAA 
[AA 
$numAA 
]AA 
=AA 
dataAA 
;AA A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_66bBB =
.BB= >
GoodG2BSinkBB> I
(BBI J
	dataArrayBBJ S
,BBT U
reqBBV Y
,BBY Z
respBB[ _
)BB` a
;BBa b
}CC 
privateFF 
staticFF 
voidFF 
GoodB2GFF 
(FF  
HttpRequestFF  +
reqFF, /
,FF/ 0
HttpResponseFF1 =
respFF> B
)FFB C
{GG 
intHH 
dataHH 
;HH 
dataII 
=II 
intII 
.II 
MinValueII 
;II 
{KK 	
ifLL 
(LL 
reqLL 
.LL 
QueryStringLL 
[LL  
$strLL  $
]LL$ %
!=LL& (
nullLL) -
)LL- .
{MM 
tryNN 
{OO 
dataPP 
=PP 
intPP 
.PP 
ParsePP $
(PP$ %
reqPP% (
.PP( )
QueryStringPP) 4
[PP4 5
$strPP5 9
]PP9 :
)PP: ;
;PP; <
}QQ 
catchRR 
(RR 
FormatExceptionRR &
exceptNumberFormatRR' 9
)RR9 :
{SS 
IOTT 
.TT 
LoggerTT 
.TT 
LogTT !
(TT! "
NLogTT" &
.TT& '
LogLevelTT' /
.TT/ 0
WarnTT0 4
,TT4 5
exceptNumberFormatTT6 H
,TTH I
$str	TTJ Ä
)
TTÄ Å
;
TTÅ Ç
}UU 
}VV 
}WW 	
intXX 
[XX 
]XX 
	dataArrayXX 
=XX 
newXX 
intXX !
[XX! "
$numXX" #
]XX# $
;XX$ %
	dataArrayYY 
[YY 
$numYY 
]YY 
=YY 
dataYY 
;YY A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_66bZZ =
.ZZ= >
GoodB2GSinkZZ> I
(ZZI J
	dataArrayZZJ S
,ZZT U
reqZZV Y
,ZZY Z
respZZ[ _
)ZZ` a
;ZZa b
}[[ 
}]] 
}^^ ”
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_66b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_66b ;
{ 
public 

static 
void 
BadSink 
( 
int "
[" #
]# $
	dataArray% .
,/ 0
HttpRequest1 <
req= @
,@ A
HttpResponseB N
respO S
)S T
{ 
int 
data 
= 
	dataArray 
[ 
$num 
] 
;  
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
int''# &
[''& '
]''' (
	dataArray'') 2
,''3 4
HttpRequest''5 @
req''A D
,''D E
HttpResponse''F R
resp''S W
)''W X
{(( 
int)) 
data)) 
=)) 
	dataArray)) 
[)) 
$num)) 
])) 
;))  
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
int00# &
[00& '
]00' (
	dataArray00) 2
,003 4
HttpRequest005 @
req00A D
,00D E
HttpResponse00F R
resp00S W
)00W X
{11 
int22 
data22 
=22 
	dataArray22 
[22 
$num22 
]22 
;22  
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ¿,
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_67a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_67a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

class 
	Container 
{ 
public 
int 
containerOne 
;  
} 
public!! 

override!! 
void!! 
Bad!! 
(!! 
HttpRequest!! (
req!!) ,
,!!, -
HttpResponse!!. :
resp!!; ?
)!!? @
{"" 
int## 
data## 
;## 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$ 
{&& 	
if'' 
('' 
req'' 
.'' 
QueryString'' 
[''  
$str''  $
]''$ %
!=''& (
null'') -
)''- .
{(( 
try)) 
{** 
data++ 
=++ 
int++ 
.++ 
Parse++ $
(++$ %
req++% (
.++( )
QueryString++) 4
[++4 5
$str++5 9
]++9 :
)++: ;
;++; <
},, 
catch-- 
(-- 
FormatException-- &
exceptNumberFormat--' 9
)--9 :
{.. 
IO// 
.// 
Logger// 
.// 
Log// !
(//! "
NLog//" &
.//& '
LogLevel//' /
./// 0
Warn//0 4
,//4 5
exceptNumberFormat//6 H
,//H I
$str	//J Ä
)
//Ä Å
;
//Å Ç
}00 
}11 
}22 	
	Container33 
dataContainer33 
=33  !
new33" %
	Container33& /
(33/ 0
)330 1
;331 2
dataContainer44 
.44 
containerOne44 "
=44# $
data44% )
;44) *A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_67b55 =
.55= >
BadSink55> E
(55E F
dataContainer55F S
,55T U
req55V Y
,55Y Z
resp55[ _
)55` a
;55a b
}66 
public99 

override99 
void99 
Good99 
(99 
HttpRequest99 )
req99* -
,99- .
HttpResponse99/ ;
resp99< @
)99@ A
{:: 
GoodG2B;; 
(;; 
req;; 
,;; 
resp;; 
);; 
;;; 
GoodB2G<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
}== 
private@@ 
static@@ 
void@@ 
GoodG2B@@ 
(@@  
HttpRequest@@  +
req@@, /
,@@/ 0
HttpResponse@@1 =
resp@@> B
)@@B C
{AA 
intBB 
dataBB 
;BB 
dataDD 
=DD 
$numDD 
;DD 
	ContainerEE 
dataContainerEE 
=EE  !
newEE" %
	ContainerEE& /
(EE/ 0
)EE0 1
;EE1 2
dataContainerFF 
.FF 
containerOneFF "
=FF# $
dataFF% )
;FF) *A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_67bGG =
.GG= >
GoodG2BSinkGG> I
(GGI J
dataContainerGGJ W
,GGX Y
reqGGZ ]
,GG] ^
respGG_ c
)GGd e
;GGe f
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
HttpRequestKK  +
reqKK, /
,KK/ 0
HttpResponseKK1 =
respKK> B
)KKB C
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
ifQQ 
(QQ 
reqQQ 
.QQ 
QueryStringQQ 
[QQ  
$strQQ  $
]QQ$ %
!=QQ& (
nullQQ) -
)QQ- .
{RR 
trySS 
{TT 
dataUU 
=UU 
intUU 
.UU 
ParseUU $
(UU$ %
reqUU% (
.UU( )
QueryStringUU) 4
[UU4 5
$strUU5 9
]UU9 :
)UU: ;
;UU; <
}VV 
catchWW 
(WW 
FormatExceptionWW &
exceptNumberFormatWW' 9
)WW9 :
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY !
(YY! "
NLogYY" &
.YY& '
LogLevelYY' /
.YY/ 0
WarnYY0 4
,YY4 5
exceptNumberFormatYY6 H
,YYH I
$str	YYJ Ä
)
YYÄ Å
;
YYÅ Ç
}ZZ 
}[[ 
}\\ 	
	Container]] 
dataContainer]] 
=]]  !
new]]" %
	Container]]& /
(]]/ 0
)]]0 1
;]]1 2
dataContainer^^ 
.^^ 
containerOne^^ "
=^^# $
data^^% )
;^^) *A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_67b__ =
.__= >
GoodB2GSink__> I
(__I J
dataContainer__J W
,__X Y
req__Z ]
,__] ^
resp___ c
)__d e
;__e f
}`` 
}bb 
}cc ú
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_67b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_67b ;
{ 
public 

static 
void 
BadSink 
( A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_67a T
.T U
	ContainerU ^
dataContainer_ l
,m n
HttpRequesto z
req{ ~
,~ 
HttpResponse
Ä å
resp
ç ë
)
ë í
{ 
int 
data 
= 
dataContainer  
.  !
containerOne! -
;- .
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_67a''# X
.''X Y
	Container''Y b
dataContainer''c p
,''q r
HttpRequest''s ~
req	'' Ç
,
''Ç É
HttpResponse
''Ñ ê
resp
''ë ï
)
''ï ñ
{(( 
int)) 
data)) 
=)) 
dataContainer))  
.))  !
containerOne))! -
;))- .
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_67a00# X
.00X Y
	Container00Y b
dataContainer00c p
,00q r
HttpRequest00s ~
req	00 Ç
,
00Ç É
HttpResponse
00Ñ ê
resp
00ë ï
)
00ï ñ
{11 
int22 
data22 
=22 
dataContainer22  
.22  !
containerOne22! -
;22- .
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? æ#
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_68a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_68a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

static 
int 
data 
; 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
data   
=   
int   
.   
MinValue   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
try%% 
{&& 
data'' 
='' 
int'' 
.'' 
Parse'' $
(''$ %
req''% (
.''( )
QueryString'') 4
[''4 5
$str''5 9
]''9 :
)'': ;
;''; <
}(( 
catch)) 
()) 
FormatException)) &
exceptNumberFormat))' 9
)))9 :
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ !
(++! "
NLog++" &
.++& '
LogLevel++' /
.++/ 0
Warn++0 4
,++4 5
exceptNumberFormat++6 H
,++H I
$str	++J Ä
)
++Ä Å
;
++Å Ç
},, 
}-- 
}.. 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_68b// =
.//= >
BadSink//> E
(//E F
req//F I
,//I J
resp//K O
)//O P
;//P Q
}00 
public33 

override33 
void33 
Good33 
(33 
HttpRequest33 )
req33* -
,33- .
HttpResponse33/ ;
resp33< @
)33@ A
{44 
GoodG2B55 
(55 
req55 
,55 
resp55 
)55 
;55 
GoodB2G66 
(66 
req66 
,66 
resp66 
)66 
;66 
}77 
private:: 
static:: 
void:: 
GoodG2B:: 
(::  
HttpRequest::  +
req::, /
,::/ 0
HttpResponse::1 =
resp::> B
)::B C
{;; 
data== 
=== 
$num== 
;== A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_68b>> =
.>>= >
GoodG2BSink>>> I
(>>I J
req>>J M
,>>M N
resp>>O S
)>>S T
;>>T U
}?? 
privateBB 
staticBB 
voidBB 
GoodB2GBB 
(BB  
HttpRequestBB  +
reqBB, /
,BB/ 0
HttpResponseBB1 =
respBB> B
)BBB C
{CC 
dataDD 
=DD 
intDD 
.DD 
MinValueDD 
;DD 
{FF 	
ifGG 
(GG 
reqGG 
.GG 
QueryStringGG 
[GG  
$strGG  $
]GG$ %
!=GG& (
nullGG) -
)GG- .
{HH 
tryII 
{JJ 
dataKK 
=KK 
intKK 
.KK 
ParseKK $
(KK$ %
reqKK% (
.KK( )
QueryStringKK) 4
[KK4 5
$strKK5 9
]KK9 :
)KK: ;
;KK; <
}LL 
catchMM 
(MM 
FormatExceptionMM &
exceptNumberFormatMM' 9
)MM9 :
{NN 
IOOO 
.OO 
LoggerOO 
.OO 
LogOO !
(OO! "
NLogOO" &
.OO& '
LogLevelOO' /
.OO/ 0
WarnOO0 4
,OO4 5
exceptNumberFormatOO6 H
,OOH I
$str	OOJ Ä
)
OOÄ Å
;
OOÅ Ç
}PP 
}QQ 
}RR 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_68bSS =
.SS= >
GoodB2GSinkSS> I
(SSI J
reqSSJ M
,SSM N
respSSO S
)SSS T
;SST U
}TT 
}VV 
}WW ´
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_68b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_68b ;
{ 
public 

static 
void 
BadSink 
( 
HttpRequest *
req+ .
,. /
HttpResponse0 <
resp= A
)A B
{ 
int 
data 
= A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_68a H
.H I
dataI M
;M N
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
HttpRequest''# .
req''/ 2
,''2 3
HttpResponse''4 @
resp''A E
)''E F
{(( 
int)) 
data)) 
=)) A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_68a)) H
.))H I
data))I M
;))M N
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
HttpRequest00# .
req00/ 2
,002 3
HttpResponse004 @
resp00A E
)00E F
{11 
int22 
data22 
=22 A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_68a22 H
.22H I
data22I M
;22M N
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? Û%
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_71a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_71a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_71b.. =
...= >
BadSink..> E
(..E F
(..F G
Object..G M
)..M N
data..N R
,..S T
req..U X
,..X Y
resp..Z ^
).._ `
;..` a
}// 
public22 

override22 
void22 
Good22 
(22 
HttpRequest22 )
req22* -
,22- .
HttpResponse22/ ;
resp22< @
)22@ A
{33 
GoodG2B44 
(44 
req44 
,44 
resp44 
)44 
;44 
GoodB2G55 
(55 
req55 
,55 
resp55 
)55 
;55 
}66 
private99 
static99 
void99 
GoodG2B99 
(99  
HttpRequest99  +
req99, /
,99/ 0
HttpResponse991 =
resp99> B
)99B C
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_71b>> =
.>>= >
GoodG2BSink>>> I
(>>I J
(>>J K
Object>>K Q
)>>Q R
data>>R V
,>>W X
req>>Y \
,>>\ ]
resp>>^ b
)>>c d
;>>d e
}?? 
privateBB 
staticBB 
voidBB 
GoodB2GBB 
(BB  
HttpRequestBB  +
reqBB, /
,BB/ 0
HttpResponseBB1 =
respBB> B
)BBB C
{CC 
intDD 
dataDD 
;DD 
dataEE 
=EE 
intEE 
.EE 
MinValueEE 
;EE 
{GG 	
ifHH 
(HH 
reqHH 
.HH 
QueryStringHH 
[HH  
$strHH  $
]HH$ %
!=HH& (
nullHH) -
)HH- .
{II 
tryJJ 
{KK 
dataLL 
=LL 
intLL 
.LL 
ParseLL $
(LL$ %
reqLL% (
.LL( )
QueryStringLL) 4
[LL4 5
$strLL5 9
]LL9 :
)LL: ;
;LL; <
}MM 
catchNN 
(NN 
FormatExceptionNN &
exceptNumberFormatNN' 9
)NN9 :
{OO 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP !
(PP! "
NLogPP" &
.PP& '
LogLevelPP' /
.PP/ 0
WarnPP0 4
,PP4 5
exceptNumberFormatPP6 H
,PPH I
$str	PPJ Ä
)
PPÄ Å
;
PPÅ Ç
}QQ 
}RR 
}SS 	A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_71bTT =
.TT= >
GoodB2GSinkTT> I
(TTI J
(TTJ K
ObjectTTK Q
)TTQ R
dataTTR V
,TTW X
reqTTY \
,TT\ ]
respTT^ b
)TTc d
;TTd e
}UU 
}WW 
}XX Ö
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_71b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_71b ;
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
,1 2
HttpRequest3 >
req? B
,B C
HttpResponseD P
respQ U
)U V
{ 
int 
data 
= 
( 
int 
) 

dataObject "
;" #
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
Object((# )

dataObject((* 4
,((5 6
HttpRequest((7 B
req((C F
,((F G
HttpResponse((H T
resp((U Y
)((Y Z
{)) 
int** 
data** 
=** 
(** 
int** 
)** 

dataObject** "
;**" #
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
Object11# )

dataObject11* 4
,115 6
HttpRequest117 B
req11C F
,11F G
HttpResponse11H T
resp11U Y
)11Y Z
{22 
int33 
data33 
=33 
(33 
int33 
)33 

dataObject33 "
;33" #
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ „3
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_72a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_72a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
try%% 
{&& 
data'' 
='' 
int'' 
.'' 
Parse'' $
(''$ %
req''% (
.''( )
QueryString'') 4
[''4 5
$str''5 9
]''9 :
)'': ;
;''; <
}(( 
catch)) 
()) 
FormatException)) &
exceptNumberFormat))' 9
)))9 :
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ !
(++! "
NLog++" &
.++& '
LogLevel++' /
.++/ 0
Warn++0 4
,++4 5
exceptNumberFormat++6 H
,++H I
$str	++J Ä
)
++Ä Å
;
++Å Ç
},, 
}-- 
}.. 	
	Hashtable// 
dataHashtable// 
=//  !
new//" %
	Hashtable//& /
(/// 0
$num//0 1
)//1 2
;//2 3
dataHashtable00 
.00 
Add00 
(00 
$num00 
,00 
data00 !
)00! "
;00" #
dataHashtable11 
.11 
Add11 
(11 
$num11 
,11 
data11 !
)11! "
;11" #
dataHashtable22 
.22 
Add22 
(22 
$num22 
,22 
data22 !
)22! "
;22" #A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_72b33 =
.33= >
BadSink33> E
(33E F
dataHashtable33F S
,33T U
req33V Y
,33Y Z
resp33[ _
)33` a
;33a b
}44 
public77 

override77 
void77 
Good77 
(77 
HttpRequest77 )
req77* -
,77- .
HttpResponse77/ ;
resp77< @
)77@ A
{88 
GoodG2B99 
(99 
req99 
,99 
resp99 
)99 
;99 
GoodB2G:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
};; 
private>> 
static>> 
void>> 
GoodG2B>> 
(>>  
HttpRequest>>  +
req>>, /
,>>/ 0
HttpResponse>>1 =
resp>>> B
)>>B C
{?? 
int@@ 
data@@ 
;@@ 
dataBB 
=BB 
$numBB 
;BB 
	HashtableCC 
dataHashtableCC 
=CC  !
newCC" %
	HashtableCC& /
(CC/ 0
$numCC0 1
)CC1 2
;CC2 3
dataHashtableDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD !
)DD! "
;DD" #
dataHashtableEE 
.EE 
AddEE 
(EE 
$numEE 
,EE 
dataEE !
)EE! "
;EE" #
dataHashtableFF 
.FF 
AddFF 
(FF 
$numFF 
,FF 
dataFF !
)FF! "
;FF" #A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_72bGG =
.GG= >
GoodG2BSinkGG> I
(GGI J
dataHashtableGGJ W
,GGX Y
reqGGZ ]
,GG] ^
respGG_ c
)GGd e
;GGe f
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
HttpRequestKK  +
reqKK, /
,KK/ 0
HttpResponseKK1 =
respKK> B
)KKB C
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
ifQQ 
(QQ 
reqQQ 
.QQ 
QueryStringQQ 
[QQ  
$strQQ  $
]QQ$ %
!=QQ& (
nullQQ) -
)QQ- .
{RR 
trySS 
{TT 
dataUU 
=UU 
intUU 
.UU 
ParseUU $
(UU$ %
reqUU% (
.UU( )
QueryStringUU) 4
[UU4 5
$strUU5 9
]UU9 :
)UU: ;
;UU; <
}VV 
catchWW 
(WW 
FormatExceptionWW &
exceptNumberFormatWW' 9
)WW9 :
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY !
(YY! "
NLogYY" &
.YY& '
LogLevelYY' /
.YY/ 0
WarnYY0 4
,YY4 5
exceptNumberFormatYY6 H
,YYH I
$str	YYJ Ä
)
YYÄ Å
;
YYÅ Ç
}ZZ 
}[[ 
}\\ 	
	Hashtable]] 
dataHashtable]] 
=]]  !
new]]" %
	Hashtable]]& /
(]]/ 0
$num]]0 1
)]]1 2
;]]2 3
dataHashtable^^ 
.^^ 
Add^^ 
(^^ 
$num^^ 
,^^ 
data^^ !
)^^! "
;^^" #
dataHashtable__ 
.__ 
Add__ 
(__ 
$num__ 
,__ 
data__ !
)__! "
;__" #
dataHashtable`` 
.`` 
Add`` 
(`` 
$num`` 
,`` 
data`` !
)``! "
;``" #A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_72baa =
.aa= >
GoodB2GSinkaa> I
(aaI J
dataHashtableaaJ W
,aaX Y
reqaaZ ]
,aa] ^
respaa_ c
)aad e
;aae f
}bb 
}dd 
}ee ∞
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_72b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_72b ;
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
,7 8
HttpRequest9 D
reqE H
,H I
HttpResponseJ V
respW [
)[ \
{ 
int 
data 
= 
( 
int 
) 
dataHashtable &
[& '
$num' (
]( )
;) *
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
	Hashtable((# ,
dataHashtable((- :
,((; <
HttpRequest((= H
req((I L
,((L M
HttpResponse((N Z
resp(([ _
)((_ `
{)) 
int** 
data** 
=** 
(** 
int** 
)** 
dataHashtable** &
[**& '
$num**' (
]**( )
;**) *
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
	Hashtable11# ,
dataHashtable11- :
,11; <
HttpRequest11= H
req11I L
,11L M
HttpResponse11N Z
resp11[ _
)11_ `
{22 
int33 
data33 
=33 
(33 
int33 
)33 
dataHashtable33 &
[33& '
$num33' (
]33( )
;33) *
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ◊3
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_73a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_73a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
try%% 
{&& 
data'' 
='' 
int'' 
.'' 
Parse'' $
(''$ %
req''% (
.''( )
QueryString'') 4
[''4 5
$str''5 9
]''9 :
)'': ;
;''; <
}(( 
catch)) 
()) 
FormatException)) &
exceptNumberFormat))' 9
)))9 :
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ !
(++! "
NLog++" &
.++& '
LogLevel++' /
.++/ 0
Warn++0 4
,++4 5
exceptNumberFormat++6 H
,++H I
$str	++J Ä
)
++Ä Å
;
++Å Ç
},, 
}-- 
}.. 	

LinkedList// 
<// 
int// 
>// 
dataLinkedList// &
=//' (
new//) ,

LinkedList//- 7
<//7 8
int//8 ;
>//; <
(//< =
)//= >
;//> ?
dataLinkedList00 
.00 
AddLast00 
(00 
data00 #
)00# $
;00$ %
dataLinkedList11 
.11 
AddLast11 
(11 
data11 #
)11# $
;11$ %
dataLinkedList22 
.22 
AddLast22 
(22 
data22 #
)22# $
;22$ %A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_73b33 =
.33= >
BadSink33> E
(33E F
dataLinkedList33F T
,33U V
req33W Z
,33Z [
resp33\ `
)33a b
;33b c
}44 
public77 

override77 
void77 
Good77 
(77 
HttpRequest77 )
req77* -
,77- .
HttpResponse77/ ;
resp77< @
)77@ A
{88 
GoodG2B99 
(99 
req99 
,99 
resp99 
)99 
;99 
GoodB2G:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
};; 
private>> 
static>> 
void>> 
GoodG2B>> 
(>>  
HttpRequest>>  +
req>>, /
,>>/ 0
HttpResponse>>1 =
resp>>> B
)>>B C
{?? 
int@@ 
data@@ 
;@@ 
dataBB 
=BB 
$numBB 
;BB 

LinkedListCC 
<CC 
intCC 
>CC 
dataLinkedListCC &
=CC' (
newCC) ,

LinkedListCC- 7
<CC7 8
intCC8 ;
>CC; <
(CC< =
)CC= >
;CC> ?
dataLinkedListDD 
.DD 
AddLastDD 
(DD 
dataDD #
)DD# $
;DD$ %
dataLinkedListEE 
.EE 
AddLastEE 
(EE 
dataEE #
)EE# $
;EE$ %
dataLinkedListFF 
.FF 
AddLastFF 
(FF 
dataFF #
)FF# $
;FF$ %A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_73bGG =
.GG= >
GoodG2BSinkGG> I
(GGI J
dataLinkedListGGJ X
,GGY Z
reqGG[ ^
,GG^ _
respGG` d
)GGe f
;GGf g
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
HttpRequestKK  +
reqKK, /
,KK/ 0
HttpResponseKK1 =
respKK> B
)KKB C
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
ifQQ 
(QQ 
reqQQ 
.QQ 
QueryStringQQ 
[QQ  
$strQQ  $
]QQ$ %
!=QQ& (
nullQQ) -
)QQ- .
{RR 
trySS 
{TT 
dataUU 
=UU 
intUU 
.UU 
ParseUU $
(UU$ %
reqUU% (
.UU( )
QueryStringUU) 4
[UU4 5
$strUU5 9
]UU9 :
)UU: ;
;UU; <
}VV 
catchWW 
(WW 
FormatExceptionWW &
exceptNumberFormatWW' 9
)WW9 :
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY !
(YY! "
NLogYY" &
.YY& '
LogLevelYY' /
.YY/ 0
WarnYY0 4
,YY4 5
exceptNumberFormatYY6 H
,YYH I
$str	YYJ Ä
)
YYÄ Å
;
YYÅ Ç
}ZZ 
}[[ 
}\\ 	

LinkedList]] 
<]] 
int]] 
>]] 
dataLinkedList]] &
=]]' (
new]]) ,

LinkedList]]- 7
<]]7 8
int]]8 ;
>]]; <
(]]< =
)]]= >
;]]> ?
dataLinkedList^^ 
.^^ 
AddLast^^ 
(^^ 
data^^ #
)^^# $
;^^$ %
dataLinkedList__ 
.__ 
AddLast__ 
(__ 
data__ #
)__# $
;__$ %
dataLinkedList`` 
.`` 
AddLast`` 
(`` 
data`` #
)``# $
;``$ %A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_73baa =
.aa= >
GoodB2GSinkaa> I
(aaI J
dataLinkedListaaJ X
,aaY Z
reqaa[ ^
,aa^ _
respaa` d
)aae f
;aaf g
}bb 
}dd 
}ee Ú
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_73b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_73b ;
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
int* -
>- .
dataLinkedList/ =
,> ?
HttpRequest@ K
reqL O
,O P
HttpResponseQ ]
resp^ b
)b c
{ 
int 
data 
= 
dataLinkedList !
.! "
Last" &
.& '
Value' ,
;, -
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #

LinkedList((# -
<((- .
int((. 1
>((1 2
dataLinkedList((3 A
,((B C
HttpRequest((D O
req((P S
,((S T
HttpResponse((U a
resp((b f
)((f g
{)) 
int** 
data** 
=** 
dataLinkedList** !
.**! "
Last**" &
.**& '
Value**' ,
;**, -
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

LinkedList11# -
<11- .
int11. 1
>111 2
dataLinkedList113 A
,11B C
HttpRequest11D O
req11P S
,11S T
HttpResponse11U a
resp11b f
)11f g
{22 
int33 
data33 
=33 
dataLinkedList33 !
.33! "
Last33" &
.33& '
Value33' ,
;33, -
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ú7
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_74a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_74a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
try%% 
{&& 
data'' 
='' 
int'' 
.'' 
Parse'' $
(''$ %
req''% (
.''( )
QueryString'') 4
[''4 5
$str''5 9
]''9 :
)'': ;
;''; <
}(( 
catch)) 
()) 
FormatException)) &
exceptNumberFormat))' 9
)))9 :
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ !
(++! "
NLog++" &
.++& '
LogLevel++' /
.++/ 0
Warn++0 4
,++4 5
exceptNumberFormat++6 H
,++H I
$str	++J Ä
)
++Ä Å
;
++Å Ç
},, 
}-- 
}.. 	

Dictionary// 
<// 
int// 
,// 
int// 
>// 
dataDictionary// *
=//+ ,
new//- 0

Dictionary//1 ;
<//; <
int//< ?
,//? @
int//@ C
>//C D
(//D E
)//E F
;//F G
dataDictionary00 
.00 
Add00 
(00 
$num00 
,00 
data00 "
)00" #
;00# $
dataDictionary11 
.11 
Add11 
(11 
$num11 
,11 
data11 "
)11" #
;11# $
dataDictionary22 
.22 
Add22 
(22 
$num22 
,22 
data22 "
)22" #
;22# $A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_74b33 =
.33= >
BadSink33> E
(33E F
dataDictionary33F T
,33U V
req33W Z
,33Z [
resp33\ `
)33a b
;33b c
}44 
public77 

override77 
void77 
Good77 
(77 
HttpRequest77 )
req77* -
,77- .
HttpResponse77/ ;
resp77< @
)77@ A
{88 
GoodG2B99 
(99 
req99 
,99 
resp99 
)99 
;99 
GoodB2G:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
};; 
private>> 
static>> 
void>> 
GoodG2B>> 
(>>  
HttpRequest>>  +
req>>, /
,>>/ 0
HttpResponse>>1 =
resp>>> B
)>>B C
{?? 
int@@ 
data@@ 
;@@ 
dataBB 
=BB 
$numBB 
;BB 

DictionaryCC 
<CC 
intCC 
,CC 
intCC 
>CC 
dataDictionaryCC *
=CC+ ,
newCC- 0

DictionaryCC1 ;
<CC; <
intCC< ?
,CC? @
intCC@ C
>CCC D
(CCD E
)CCE F
;CCF G
dataDictionaryDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD "
)DD" #
;DD# $
dataDictionaryEE 
.EE 
AddEE 
(EE 
$numEE 
,EE 
dataEE "
)EE" #
;EE# $
dataDictionaryFF 
.FF 
AddFF 
(FF 
$numFF 
,FF 
dataFF "
)FF" #
;FF# $A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_74bGG =
.GG= >
GoodG2BSinkGG> I
(GGI J
dataDictionaryGGJ X
,GGY Z
reqGG[ ^
,GG^ _
respGG` d
)GGe f
;GGf g
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
HttpRequestKK  +
reqKK, /
,KK/ 0
HttpResponseKK1 =
respKK> B
)KKB C
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
ifQQ 
(QQ 
reqQQ 
.QQ 
QueryStringQQ 
[QQ  
$strQQ  $
]QQ$ %
!=QQ& (
nullQQ) -
)QQ- .
{RR 
trySS 
{TT 
dataUU 
=UU 
intUU 
.UU 
ParseUU $
(UU$ %
reqUU% (
.UU( )
QueryStringUU) 4
[UU4 5
$strUU5 9
]UU9 :
)UU: ;
;UU; <
}VV 
catchWW 
(WW 
FormatExceptionWW &
exceptNumberFormatWW' 9
)WW9 :
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY !
(YY! "
NLogYY" &
.YY& '
LogLevelYY' /
.YY/ 0
WarnYY0 4
,YY4 5
exceptNumberFormatYY6 H
,YYH I
$str	YYJ Ä
)
YYÄ Å
;
YYÅ Ç
}ZZ 
}[[ 
}\\ 	

Dictionary]] 
<]] 
int]] 
,]] 
int]] 
>]] 
dataDictionary]] *
=]]+ ,
new]]- 0

Dictionary]]1 ;
<]]; <
int]]< ?
,]]? @
int]]@ C
>]]C D
(]]D E
)]]E F
;]]F G
dataDictionary^^ 
.^^ 
Add^^ 
(^^ 
$num^^ 
,^^ 
data^^ "
)^^" #
;^^# $
dataDictionary__ 
.__ 
Add__ 
(__ 
$num__ 
,__ 
data__ "
)__" #
;__# $
dataDictionary`` 
.`` 
Add`` 
(`` 
$num`` 
,`` 
data`` "
)``" #
;``# $A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_74baa =
.aa= >
GoodB2GSinkaa> I
(aaI J
dataDictionaryaaJ X
,aaY Z
reqaa[ ^
,aa^ _
respaa` d
)aae f
;aaf g
}bb 
}dd 
}ee ô
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_74b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_74b ;
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
int. 1
>1 2
dataDictionary3 A
,B C
HttpRequestD O
reqP S
,S T
HttpResponseU a
respb f
)f g
{ 
int 
data 
= 
dataDictionary !
[! "
$num" #
]# $
;$ %
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( #
(((# $

Dictionary(($ .
<((. /
int((/ 2
,((2 3
int((3 6
>((6 7
dataDictionary((8 F
,((G H
HttpRequest((I T
req((U X
,((X Y
HttpResponse((Z f
resp((g k
)((k l
{)) 
int** 
data** 
=** 
dataDictionary** !
[**! "
$num**" #
]**# $
;**$ %
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

Dictionary11# -
<11- .
int11. 1
,111 2
int112 5
>115 6
dataDictionary117 E
,11F G
HttpRequest11H S
req11T W
,11W X
HttpResponse11Y e
resp11f j
)11j k
{22 
int33 
data33 
=33 
dataDictionary33 !
[33! "
$num33" #
]33# $
;33$ %
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ±K
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_75a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_75a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{   
int!! 
data!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;"" 
{$$ 	
if%% 
(%% 
req%% 
.%% 
QueryString%% 
[%%  
$str%%  $
]%%$ %
!=%%& (
null%%) -
)%%- .
{&& 
try'' 
{(( 
data)) 
=)) 
int)) 
.)) 
Parse)) $
())$ %
req))% (
.))( )
QueryString))) 4
[))4 5
$str))5 9
]))9 :
))): ;
;)); <
}** 
catch++ 
(++ 
FormatException++ &
exceptNumberFormat++' 9
)++9 :
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptNumberFormat--6 H
,--H I
$str	--J Ä
)
--Ä Å
;
--Å Ç
}.. 
}// 
}00 	
byte22 
[22 
]22 
dataSerialized22 
=22 
null22  $
;22$ %
try33 
{44 	
BinaryFormatter55 
bf55 
=55  
new55! $
BinaryFormatter55% 4
(554 5
)555 6
;556 7
using66 
(66 
var66 
ms66 
=66 
new66 
MemoryStream66  ,
(66, -
)66- .
)66. /
{77 
bf88 
.88 
	Serialize88 
(88 
ms88 
,88  
data88! %
)88% &
;88& '
dataSerialized99 
=99  
ms99! #
.99# $
ToArray99$ +
(99+ ,
)99, -
;99- .
}:: A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_75b;; A
.;;A B
BadSink;;B I
(;;I J
dataSerialized;;J X
,;;Y Z
req;;[ ^
,;;^ _
resp;;` d
);;e f
;;;f g
}<< 	
catch== 
(== "
SerializationException== %
exceptSerialize==& 5
)==5 6
{>> 	
IO?? 
.?? 
Logger?? 
.?? 
Log?? 
(?? 
NLog?? 
.?? 
LogLevel?? '
.??' (
Warn??( ,
,??, -
$str??. X
,??X Y
exceptSerialize??Z i
)??i j
;??j k
}@@ 	
}AA 
publicDD 

overrideDD 
voidDD 
GoodDD 
(DD 
HttpRequestDD )
reqDD* -
,DD- .
HttpResponseDD/ ;
respDD< @
)DD@ A
{EE 
GoodG2BFF 
(FF 
reqFF 
,FF 
respFF 
)FF 
;FF 
GoodB2GGG 
(GG 
reqGG 
,GG 
respGG 
)GG 
;GG 
}HH 
privateKK 
staticKK 
voidKK 
GoodG2BKK 
(KK  
HttpRequestKK  +
reqKK, /
,KK/ 0
HttpResponseKK1 =
respKK> B
)KKB C
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{PP 	
ifQQ 
(QQ 
reqQQ 
.QQ 
QueryStringQQ 
[QQ  
$strQQ  $
]QQ$ %
!=QQ& (
nullQQ) -
)QQ- .
{RR 
trySS 
{TT 
dataUU 
=UU 
intUU 
.UU 
ParseUU $
(UU$ %
reqUU% (
.UU( )
QueryStringUU) 4
[UU4 5
$strUU5 9
]UU9 :
)UU: ;
;UU; <
}VV 
catchWW 
(WW 
FormatExceptionWW &
exceptNumberFormatWW' 9
)WW9 :
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY !
(YY! "
NLogYY" &
.YY& '
LogLevelYY' /
.YY/ 0
WarnYY0 4
,YY4 5
exceptNumberFormatYY6 H
,YYH I
$str	YYJ Ä
)
YYÄ Å
;
YYÅ Ç
}ZZ 
}[[ 
}\\ 	
byte^^ 
[^^ 
]^^ 
dataSerialized^^ 
=^^ 
null^^  $
;^^$ %
try__ 
{`` 	
BinaryFormatteraa 
bfaa 
=aa  
newaa! $
BinaryFormatteraa% 4
(aa4 5
)aa5 6
;aa6 7
usingbb 
(bb 
varbb 
msbb 
=bb 
newbb 
MemoryStreambb  ,
(bb, -
)bb- .
)bb. /
{cc 
bfdd 
.dd 
	Serializedd 
(dd 
msdd 
,dd  
datadd! %
)dd% &
;dd& '
dataSerializedee 
=ee  
msee! #
.ee# $
ToArrayee$ +
(ee+ ,
)ee, -
;ee- .
}ff A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_75bgg A
.ggA B
GoodG2BSinkggB M
(ggM N
dataSerializedggN \
,gg] ^
reqgg_ b
,ggb c
respggd h
)ggi j
;ggj k
}hh 	
catchii 
(ii "
SerializationExceptionii %
exceptSerializeii& 5
)ii5 6
{jj 	
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk 
.kk 
LogLevelkk '
.kk' (
Warnkk( ,
,kk, -
$strkk. X
,kkX Y
exceptSerializekkZ i
)kki j
;kkj k
}ll 	
}mm 
privatepp 
staticpp 
voidpp 
GoodB2Gpp 
(pp  
HttpRequestpp  +
reqpp, /
,pp/ 0
HttpResponsepp1 =
resppp> B
)ppB C
{qq 
intrr 
datarr 
;rr 
datass 
=ss 
intss 
.ss 
MinValuess 
;ss 
{uu 	
ifvv 
(vv 
reqvv 
.vv 
QueryStringvv 
[vv  
$strvv  $
]vv$ %
!=vv& (
nullvv) -
)vv- .
{ww 
tryxx 
{yy 
datazz 
=zz 
intzz 
.zz 
Parsezz $
(zz$ %
reqzz% (
.zz( )
QueryStringzz) 4
[zz4 5
$strzz5 9
]zz9 :
)zz: ;
;zz; <
}{{ 
catch|| 
(|| 
FormatException|| &
exceptNumberFormat||' 9
)||9 :
{}} 
IO~~ 
.~~ 
Logger~~ 
.~~ 
Log~~ !
(~~! "
NLog~~" &
.~~& '
LogLevel~~' /
.~~/ 0
Warn~~0 4
,~~4 5
exceptNumberFormat~~6 H
,~~H I
$str	~~J Ä
)
~~Ä Å
;
~~Å Ç
} 
}
ÄÄ 
}
ÅÅ 	
byte
ÉÉ 
[
ÉÉ 
]
ÉÉ 
dataSerialized
ÉÉ 
=
ÉÉ 
null
ÉÉ  $
;
ÉÉ$ %
try
ÑÑ 
{
ÖÖ 	
BinaryFormatter
ÜÜ 
bf
ÜÜ 
=
ÜÜ  
new
ÜÜ! $
BinaryFormatter
ÜÜ% 4
(
ÜÜ4 5
)
ÜÜ5 6
;
ÜÜ6 7
using
áá 
(
áá 
var
áá 
ms
áá 
=
áá 
new
áá 
MemoryStream
áá  ,
(
áá, -
)
áá- .
)
áá. /
{
àà 
bf
ââ 
.
ââ 
	Serialize
ââ 
(
ââ 
ms
ââ 
,
ââ  
data
ââ! %
)
ââ% &
;
ââ& '
dataSerialized
ää 
=
ää  
ms
ää! #
.
ää# $
ToArray
ää$ +
(
ää+ ,
)
ää, -
;
ää- .
}
ãã C
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_75b
åå A
.
ååA B
GoodB2GSink
ååB M
(
ååM N
dataSerialized
ååN \
,
åå] ^
req
åå_ b
,
ååb c
resp
ååd h
)
ååi j
;
ååj k
}
çç 	
catch
éé 
(
éé $
SerializationException
éé %
exceptSerialize
éé& 5
)
éé5 6
{
èè 	
IO
êê 
.
êê 
Logger
êê 
.
êê 
Log
êê 
(
êê 
NLog
êê 
.
êê 
LogLevel
êê '
.
êê' (
Warn
êê( ,
,
êê, -
$str
êê. X
,
êêX Y
exceptSerialize
êêZ i
)
êêi j
;
êêj k
}
ëë 	
}
íí 
}îî 
}ïï ≤8
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_75b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_75b ;
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
,5 6
HttpRequest7 B
reqC F
,F G
HttpResponseH T
respU Y
)Y Z
{   
try!! 
{"" 	
int## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
int)) 
))) 
binForm)) #
.))# $
Deserialize))$ /
())/ 0
	memStream))0 9
)))9 :
;)): ;
}** 
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
catch// 
(// "
SerializationException// %
exceptSerialize//& 5
)//5 6
{00 	
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 
.11 
LogLevel11 '
.11' (
Warn11( ,
,11, -
$str11. Y
,11Y Z
exceptSerialize11[ j
)11j k
;11k l
}22 	
}33 
public88 

static88 
void88 
GoodG2BSink88 "
(88" #
byte88# '
[88' (
]88( )
dataSerialized88* 8
,889 :
HttpRequest88; F
req88G J
,88J K
HttpResponse88L X
resp88Y ]
)88] ^
{99 
try:: 
{;; 	
int<< 
data<< 
;<< 
var== 
binForm== 
=== 
new== 
BinaryFormatter== -
(==- .
)==. /
;==/ 0
using>> 
(>> 
var>> 
	memStream>>  
=>>! "
new>># &
MemoryStream>>' 3
(>>3 4
)>>4 5
)>>5 6
{?? 
	memStream@@ 
.@@ 
Write@@ 
(@@  
dataSerialized@@  .
,@@. /
$num@@0 1
,@@1 2
dataSerialized@@3 A
.@@A B
Length@@B H
)@@H I
;@@I J
	memStreamAA 
.AA 
SeekAA 
(AA 
$numAA  
,AA  !

SeekOriginAA" ,
.AA, -
BeginAA- 2
)AA2 3
;AA3 4
dataBB 
=BB 
(BB 
intBB 
)BB 
binFormBB #
.BB# $
DeserializeBB$ /
(BB/ 0
	memStreamBB0 9
)BB9 :
;BB: ;
}CC 
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
catchHH 
(HH "
SerializationExceptionHH %
exceptSerializeHH& 5
)HH5 6
{II 	
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ 
.JJ 
LogLevelJJ '
.JJ' (
WarnJJ( ,
,JJ, -
$strJJ. Y
,JJY Z
exceptSerializeJJ[ j
)JJj k
;JJk l
}KK 	
}LL 
publicOO 

staticOO 
voidOO 
GoodB2GSinkOO "
(OO" #
byteOO# '
[OO' (
]OO( )
dataSerializedOO* 8
,OO9 :
HttpRequestOO; F
reqOOG J
,OOJ K
HttpResponseOOL X
respOOY ]
)OO] ^
{PP 
tryQQ 
{RR 	
intSS 
dataSS 
;SS 
varTT 
binFormTT 
=TT 
newTT 
BinaryFormatterTT -
(TT- .
)TT. /
;TT/ 0
usingUU 
(UU 
varUU 
	memStreamUU  
=UU! "
newUU# &
MemoryStreamUU' 3
(UU3 4
)UU4 5
)UU5 6
{VV 
	memStreamWW 
.WW 
WriteWW 
(WW  
dataSerializedWW  .
,WW. /
$numWW0 1
,WW1 2
dataSerializedWW3 A
.WWA B
LengthWWB H
)WWH I
;WWI J
	memStreamXX 
.XX 
SeekXX 
(XX 
$numXX  
,XX  !

SeekOriginXX" ,
.XX, -
BeginXX- 2
)XX2 3
;XX3 4
dataYY 
=YY 
(YY 
intYY 
)YY 
binFormYY #
.YY# $
DeserializeYY$ /
(YY/ 0
	memStreamYY0 9
)YY9 :
;YY: ;
}ZZ 
if\\ 
(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ #
+^^$ %
data^^& *
+^^+ ,
$str^^- 2
+^^3 4
(^^5 6
$num^^6 9
%^^: ;
data^^< @
)^^@ A
+^^B C
$str^^D H
)^^H I
;^^I J
}__ 
else`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb D
)bbD E
;bbE F
}cc 
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. Y
,ggY Z
exceptSerializegg[ j
)ggj k
;ggk l
}hh 	
}ii 
}kk 
}ll ú)
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81a ;
:< =
AbstractTestCaseWeb> Q
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{!! 	
if"" 
("" 
req"" 
."" 
QueryString"" 
[""  
$str""  $
]""$ %
!=""& (
null"") -
)""- .
{## 
try$$ 
{%% 
data&& 
=&& 
int&& 
.&& 
Parse&& $
(&&$ %
req&&% (
.&&( )
QueryString&&) 4
[&&4 5
$str&&5 9
]&&9 :
)&&: ;
;&&; <
}'' 
catch(( 
((( 
FormatException(( &
exceptNumberFormat((' 9
)((9 :
{)) 
IO** 
.** 
Logger** 
.** 
Log** !
(**! "
NLog**" &
.**& '
LogLevel**' /
.**/ 0
Warn**0 4
,**4 5
exceptNumberFormat**6 H
,**H I
$str	**J Ä
)
**Ä Å
;
**Å Ç
}++ 
},, 
}-- 	E
9CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_base.. A

baseObject..B L
=..M N
new..O RE
8CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_bad	..S ã
(
..ã å
)
..å ç
;
..ç é

baseObject// 
.// 
Action// 
(// 
data// 
,//  
req//! $
,//$ %
resp//& *
)//* +
;//+ ,
}00 
public33 

override33 
void33 
Good33 
(33 
HttpRequest33 )
req33* -
,33- .
HttpResponse33/ ;
resp33< @
)33@ A
{44 
GoodG2B55 
(55 
req55 
,55 
resp55 
)55 
;55 
GoodB2G66 
(66 
req66 
,66 
resp66 
)66 
;66 
}77 
private:: 
void:: 
GoodG2B:: 
(:: 
HttpRequest:: $
req::% (
,::( )
HttpResponse::* 6
resp::7 ;
)::; <
{;; 
int<< 
data<< 
;<< 
data>> 
=>> 
$num>> 
;>> E
9CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_base?? A

baseObject??B L
=??M N
new??O RI
<CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_goodG2B	??S è
(
??è ê
)
??ê ë
;
??ë í

baseObject@@ 
.@@ 
Action@@ 
(@@ 
data@@ 
,@@  
req@@! $
,@@$ %
resp@@& *
)@@* +
;@@+ ,
}AA 
privateDD 
voidDD 
GoodB2GDD 
(DD 
HttpRequestDD $
reqDD% (
,DD( )
HttpResponseDD* 6
respDD7 ;
)DD; <
{EE 
intFF 
dataFF 
;FF 
dataGG 
=GG 
intGG 
.GG 
MinValueGG 
;GG 
{II 	
ifJJ 
(JJ 
reqJJ 
.JJ 
QueryStringJJ 
[JJ  
$strJJ  $
]JJ$ %
!=JJ& (
nullJJ) -
)JJ- .
{KK 
tryLL 
{MM 
dataNN 
=NN 
intNN 
.NN 
ParseNN $
(NN$ %
reqNN% (
.NN( )
QueryStringNN) 4
[NN4 5
$strNN5 9
]NN9 :
)NN: ;
;NN; <
}OO 
catchPP 
(PP 
FormatExceptionPP &
exceptNumberFormatPP' 9
)PP9 :
{QQ 
IORR 
.RR 
LoggerRR 
.RR 
LogRR !
(RR! "
NLogRR" &
.RR& '
LogLevelRR' /
.RR/ 0
WarnRR0 4
,RR4 5
exceptNumberFormatRR6 H
,RRH I
$str	RRJ Ä
)
RRÄ Å
;
RRÅ Ç
}SS 
}TT 
}UU 	E
9CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_baseVV A

baseObjectVVB L
=VVM N
newVVO RI
<CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_goodB2G	VVS è
(
VVè ê
)
VVê ë
;
VVë í

baseObjectWW 
.WW 
ActionWW 
(WW 
dataWW 
,WW  
reqWW! $
,WW$ %
respWW& *
)WW* +
;WW+ ,
}XX 
}ZZ 
}[[ Œ
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_bad.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class D
8CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_bad >
:? @E
9CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_baseA z
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
}"" 
}## …
≤C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_base.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
abstract 
class	 E
9CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_base H
{ 
public 

abstract 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
;N O
} 
} ˚

µC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_goodB2G.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class H
<CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_goodB2G B
:C DE
9CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_baseE ~
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
if   

(   
data   
!=   
$num   
)   
{!! 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
%""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
IO&& 
.&& 
	WriteLine&& 
(&& 
$str&& @
)&&@ A
;&&A B
}'' 	
}(( 
})) 
}** ÷
µC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_goodG2B.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class H
<CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_goodG2B B
:C DE
9CWE369_Divide_by_Zero__int_QueryString_Web_modulo_81_baseE ~
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
,) *
HttpRequest+ 6
req7 :
,: ;
HttpResponse< H
respI M
)M N
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
}## 
}$$ ¸
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_01.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_01 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data   
=   
(   
new   
Random   
(   
)   
)   
.   
Next   "
(  " #
)  # $
;  $ %
IO## 

.##
 
	WriteLine## 
(## 
$str##  
+##! "
data### '
+##( )
$str##* /
+##0 1
(##2 3
$num##3 6
/##7 8
data##9 =
)##= >
+##? @
$str##A E
)##E F
;##F G
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
)'' 
{(( 
GoodG2B)) 
()) 
))) 
;)) 
GoodB2G** 
(** 
)** 
;** 
}++ 
private.. 
void.. 
GoodG2B.. 
(.. 
).. 
{// 
int00 
data00 
;00 
data22 
=22 
$num22 
;22 
IO55 

.55
 
	WriteLine55 
(55 
$str55  
+55! "
data55# '
+55( )
$str55* /
+550 1
(552 3
$num553 6
/557 8
data559 =
)55= >
+55? @
$str55A E
)55E F
;55F G
}66 
private99 
void99 
GoodB2G99 
(99 
)99 
{:: 
int;; 
data;; 
;;; 
data== 
=== 
(== 
new== 
Random== 
(== 
)== 
)== 
.== 
Next== "
(==" #
)==# $
;==$ %
if?? 

(?? 
data?? 
!=?? 
$num?? 
)?? 
{@@ 	
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA 
+AA  !
dataAA" &
+AA' (
$strAA) .
+AA/ 0
(AA1 2
$numAA2 5
/AA6 7
dataAA8 <
)AA< =
+AA> ?
$strAA@ D
)AAD E
;AAE F
}BB 	
elseCC 
{DD 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE @
)EE@ A
;EEA B
}FF 	
}GG 
}II 
}JJ Ê2
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_02.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_02 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
true 
) 
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
true** 
)** 
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. $
+..% &
data..' +
+.., -
$str... 3
+..4 5
(..6 7
$num..7 :
/..; <
data..= A
)..A B
+..C D
$str..E I
)..I J
;..J K
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
false77 
)77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
trueBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
trueNN 
)NN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
trueYY 
)YY 
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] $
+]]% &
data]]' +
+]], -
$str]]. 3
+]]4 5
(]]6 7
$num]]7 :
/]]; <
data]]= A
)]]A B
+]]C D
$str]]E I
)]]I J
;]]J K
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
trueee 
)ee 
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
falsepp 
)pp 
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
/zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
true
áá 
)
áá 
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
true
íí 
)
íí 
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
/
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ¿5
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_03.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_03 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
$num 
== 
$num 
) 
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
$num** 
==** 
$num** 
)** 
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. $
+..% &
data..' +
+.., -
$str... 3
+..4 5
(..6 7
$num..7 :
/..; <
data..= A
)..A B
+..C D
$str..E I
)..I J
;..J K
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
$num77 
!=77 
$num77 
)77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
$numBB 
==BB 
$numBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
$numNN 
==NN 
$numNN 
)NN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
$numYY 
==YY 
$numYY 
)YY 
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] $
+]]% &
data]]' +
+]], -
$str]]. 3
+]]4 5
(]]6 7
$num]]7 :
/]]; <
data]]= A
)]]A B
+]]C D
$str]]E I
)]]I J
;]]J K
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
$numee 
==ee 
$numee 
)ee 
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
$numpp 
!=pp 
$numpp 
)pp 
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
/zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
$num
áá 
==
áá 
$num
áá 
)
áá 
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
$num
íí 
==
íí 
$num
íí 
)
íí 
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
/
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ∆6
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_04.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_04 1
:2 3
AbstractTestCase4 D
{ 
private   
const   
bool   
PRIVATE_CONST_TRUE   )
=  * +
true  , 0
;  0 1
private!! 
const!! 
bool!! 
PRIVATE_CONST_FALSE!! *
=!!+ ,
false!!- 2
;!!2 3
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
;%% 
if&& 

(&& 
PRIVATE_CONST_TRUE&& 
)&& 
{'' 	
data)) 
=)) 
()) 
new)) 
Random)) 
()) 
)))  
)))  !
.))! "
Next))" &
())& '
)))' (
;))( )
}** 	
else++ 
{,, 	
data// 
=// 
$num// 
;// 
}00 	
if11 

(11 
PRIVATE_CONST_TRUE11 
)11 
{22 	
IO55 
.55 
	WriteLine55 
(55 
$str55 $
+55% &
data55' +
+55, -
$str55. 3
+554 5
(556 7
$num557 :
/55; <
data55= A
)55A B
+55C D
$str55E I
)55I J
;55J K
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
);; 
{<< 
int== 
data== 
;== 
if>> 

(>> 
PRIVATE_CONST_FALSE>> 
)>>  
{?? 	
dataBB 
=BB 
$numBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
ifII 

(II 
PRIVATE_CONST_TRUEII 
)II 
{JJ 	
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM $
+MM% &
dataMM' +
+MM, -
$strMM. 3
+MM4 5
(MM6 7
$numMM7 :
/MM; <
dataMM= A
)MMA B
+MMC D
$strMME I
)MMI J
;MMJ K
}NN 	
}OO 
privateRR 
voidRR 
GoodG2B2RR 
(RR 
)RR 
{SS 
intTT 
dataTT 
;TT 
ifUU 

(UU 
PRIVATE_CONST_TRUEUU 
)UU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
elseZZ 
{[[ 	
data^^ 
=^^ 
$num^^ 
;^^ 
}__ 	
if`` 

(`` 
PRIVATE_CONST_TRUE`` 
)`` 
{aa 	
IOdd 
.dd 
	WriteLinedd 
(dd 
$strdd $
+dd% &
datadd' +
+dd, -
$strdd. 3
+dd4 5
(dd6 7
$numdd7 :
/dd; <
datadd= A
)ddA B
+ddC D
$strddE I
)ddI J
;ddJ K
}ee 	
}ff 
privateii 
voidii 
GoodB2G1ii 
(ii 
)ii 
{jj 
intkk 
datakk 
;kk 
ifll 

(ll 
PRIVATE_CONST_TRUEll 
)ll 
{mm 	
dataoo 
=oo 
(oo 
newoo 
Randomoo 
(oo 
)oo  
)oo  !
.oo! "
Nextoo" &
(oo& '
)oo' (
;oo( )
}pp 	
elseqq 
{rr 	
datauu 
=uu 
$numuu 
;uu 
}vv 	
ifww 

(ww 
PRIVATE_CONST_FALSEww 
)ww  
{xx 	
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz /
)zz/ 0
;zz0 1
}{{ 	
else|| 
{}} 	
if 
( 
data 
!= 
$num 
) 
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
	WriteLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ #
+
ÅÅ$ %
data
ÅÅ& *
+
ÅÅ+ ,
$str
ÅÅ- 2
+
ÅÅ3 4
(
ÅÅ5 6
$num
ÅÅ6 9
/
ÅÅ: ;
data
ÅÅ< @
)
ÅÅ@ A
+
ÅÅB C
$str
ÅÅD H
)
ÅÅH I
;
ÅÅI J
}
ÇÇ 
else
ÉÉ 
{
ÑÑ 
IO
ÖÖ 
.
ÖÖ 
	WriteLine
ÖÖ 
(
ÖÖ 
$str
ÖÖ D
)
ÖÖD E
;
ÖÖE F
}
ÜÜ 
}
áá 	
}
àà 
private
ãã 
void
ãã 
GoodB2G2
ãã 
(
ãã 
)
ãã 
{
åå 
int
çç 
data
çç 
;
çç 
if
éé 

(
éé  
PRIVATE_CONST_TRUE
éé 
)
éé 
{
èè 	
data
ëë 
=
ëë 
(
ëë 
new
ëë 
Random
ëë 
(
ëë 
)
ëë  
)
ëë  !
.
ëë! "
Next
ëë" &
(
ëë& '
)
ëë' (
;
ëë( )
}
íí 	
else
ìì 
{
îî 	
data
óó 
=
óó 
$num
óó 
;
óó 
}
òò 	
if
ôô 

(
ôô  
PRIVATE_CONST_TRUE
ôô 
)
ôô 
{
öö 	
if
úú 
(
úú 
data
úú 
!=
úú 
$num
úú 
)
úú 
{
ùù 
IO
ûû 
.
ûû 
	WriteLine
ûû 
(
ûû 
$str
ûû #
+
ûû$ %
data
ûû& *
+
ûû+ ,
$str
ûû- 2
+
ûû3 4
(
ûû5 6
$num
ûû6 9
/
ûû: ;
data
ûû< @
)
ûû@ A
+
ûûB C
$str
ûûD H
)
ûûH I
;
ûûI J
}
üü 
else
†† 
{
°° 
IO
¢¢ 
.
¢¢ 
	WriteLine
¢¢ 
(
¢¢ 
$str
¢¢ D
)
¢¢D E
;
¢¢E F
}
££ 
}
§§ 	
}
•• 
public
ßß 

override
ßß 
void
ßß 
Good
ßß 
(
ßß 
)
ßß 
{
®® 
GoodG2B1
©© 
(
©© 
)
©© 
;
©© 
GoodG2B2
™™ 
(
™™ 
)
™™ 
;
™™ 
GoodB2G1
´´ 
(
´´ 
)
´´ 
;
´´ 
GoodB2G2
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
}
≠≠ 
}ØØ 
}∞∞  5
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_05.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_05 1
:2 3
AbstractTestCase4 D
{ 
private 
bool 
privateTrue 
= 
true #
;# $
private   
bool   
privateFalse   
=   
false    %
;  % &
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
int$$ 
data$$ 
;$$ 
if%% 

(%% 
privateTrue%% 
)%% 
{&& 	
data(( 
=(( 
((( 
new(( 
Random(( 
((( 
)((  
)((  !
.((! "
Next((" &
(((& '
)((' (
;((( )
})) 	
else** 
{++ 	
data.. 
=.. 
$num.. 
;.. 
}// 	
if00 

(00 
privateTrue00 
)00 
{11 	
IO44 
.44 
	WriteLine44 
(44 
$str44 $
+44% &
data44' +
+44, -
$str44. 3
+444 5
(446 7
$num447 :
/44; <
data44= A
)44A B
+44C D
$str44E I
)44I J
;44J K
}55 	
}66 
private:: 
void:: 
GoodG2B1:: 
(:: 
):: 
{;; 
int<< 
data<< 
;<< 
if== 

(== 
privateFalse== 
)== 
{>> 	
dataAA 
=AA 
$numAA 
;AA 
}BB 	
elseCC 
{DD 	
dataFF 
=FF 
$numFF 
;FF 
}GG 	
ifHH 

(HH 
privateTrueHH 
)HH 
{II 	
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL $
+LL% &
dataLL' +
+LL, -
$strLL. 3
+LL4 5
(LL6 7
$numLL7 :
/LL; <
dataLL= A
)LLA B
+LLC D
$strLLE I
)LLI J
;LLJ K
}MM 	
}NN 
privateQQ 
voidQQ 
GoodG2B2QQ 
(QQ 
)QQ 
{RR 
intSS 
dataSS 
;SS 
ifTT 

(TT 
privateTrueTT 
)TT 
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
privateTrue__ 
)__ 
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc $
+cc% &
datacc' +
+cc, -
$strcc. 3
+cc4 5
(cc6 7
$numcc7 :
/cc; <
datacc= A
)ccA B
+ccC D
$strccE I
)ccI J
;ccJ K
}dd 	
}ee 
privatehh 
voidhh 
GoodB2G1hh 
(hh 
)hh 
{ii 
intjj 
datajj 
;jj 
ifkk 

(kk 
privateTruekk 
)kk 
{ll 	
datann 
=nn 
(nn 
newnn 
Randomnn 
(nn 
)nn  
)nn  !
.nn! "
Nextnn" &
(nn& '
)nn' (
;nn( )
}oo 	
elsepp 
{qq 	
datatt 
=tt 
$numtt 
;tt 
}uu 	
ifvv 

(vv 
privateFalsevv 
)vv 
{ww 	
IOyy 
.yy 
	WriteLineyy 
(yy 
$stryy /
)yy/ 0
;yy0 1
}zz 	
else{{ 
{|| 	
if~~ 
(~~ 
data~~ 
!=~~ 
$num~~ 
)~~ 
{ 
IO
ÄÄ 
.
ÄÄ 
	WriteLine
ÄÄ 
(
ÄÄ 
$str
ÄÄ #
+
ÄÄ$ %
data
ÄÄ& *
+
ÄÄ+ ,
$str
ÄÄ- 2
+
ÄÄ3 4
(
ÄÄ5 6
$num
ÄÄ6 9
/
ÄÄ: ;
data
ÄÄ< @
)
ÄÄ@ A
+
ÄÄB C
$str
ÄÄD H
)
ÄÄH I
;
ÄÄI J
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
	WriteLine
ÑÑ 
(
ÑÑ 
$str
ÑÑ D
)
ÑÑD E
;
ÑÑE F
}
ÖÖ 
}
ÜÜ 	
}
áá 
private
ää 
void
ää 
GoodB2G2
ää 
(
ää 
)
ää 
{
ãã 
int
åå 
data
åå 
;
åå 
if
çç 

(
çç 
privateTrue
çç 
)
çç 
{
éé 	
data
êê 
=
êê 
(
êê 
new
êê 
Random
êê 
(
êê 
)
êê  
)
êê  !
.
êê! "
Next
êê" &
(
êê& '
)
êê' (
;
êê( )
}
ëë 	
else
íí 
{
ìì 	
data
ññ 
=
ññ 
$num
ññ 
;
ññ 
}
óó 	
if
òò 

(
òò 
privateTrue
òò 
)
òò 
{
ôô 	
if
õõ 
(
õõ 
data
õõ 
!=
õõ 
$num
õõ 
)
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù #
+
ùù$ %
data
ùù& *
+
ùù+ ,
$str
ùù- 2
+
ùù3 4
(
ùù5 6
$num
ùù6 9
/
ùù: ;
data
ùù< @
)
ùù@ A
+
ùùB C
$str
ùùD H
)
ùùH I
;
ùùI J
}
ûû 
else
üü 
{
†† 
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° D
)
°°D E
;
°°E F
}
¢¢ 
}
££ 	
}
§§ 
public
¶¶ 

override
¶¶ 
void
¶¶ 
Good
¶¶ 
(
¶¶ 
)
¶¶ 
{
ßß 
GoodG2B1
®® 
(
®® 
)
®® 
;
®® 
GoodG2B2
©© 
(
©© 
)
©© 
;
©© 
GoodB2G1
™™ 
(
™™ 
)
™™ 
;
™™ 
GoodB2G2
´´ 
(
´´ 
)
´´ 
;
´´ 
}
¨¨ 
}ÆÆ 
}ØØ Î7
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_06.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_06 1
:2 3
AbstractTestCase4 D
{ 
private 
const 
int 
PRIVATE_CONST_FIVE (
=) *
$num+ ,
;, -
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
int## 
data## 
;## 
if$$ 

($$ 
PRIVATE_CONST_FIVE$$ 
==$$  
$num$$  !
)$$! "
{%% 	
data'' 
='' 
('' 
new'' 
Random'' 
('' 
)''  
)''  !
.''! "
Next''" &
(''& '
)''' (
;''( )
}(( 	
else)) 
{** 	
data-- 
=-- 
$num-- 
;-- 
}.. 	
if// 

(// 
PRIVATE_CONST_FIVE// 
==//  
$num//  !
)//! "
{00 	
IO33 
.33 
	WriteLine33 
(33 
$str33 $
+33% &
data33' +
+33, -
$str33. 3
+334 5
(336 7
$num337 :
/33; <
data33= A
)33A B
+33C D
$str33E I
)33I J
;33J K
}44 	
}55 
private99 
void99 
GoodG2B199 
(99 
)99 
{:: 
int;; 
data;; 
;;; 
if<< 

(<< 
PRIVATE_CONST_FIVE<< 
!=<<  
$num<<  !
)<<! "
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
elseBB 
{CC 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
ifGG 

(GG 
PRIVATE_CONST_FIVEGG 
==GG  
$numGG  !
)GG! "
{HH 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK $
+KK% &
dataKK' +
+KK, -
$strKK. 3
+KK4 5
(KK6 7
$numKK7 :
/KK; <
dataKK= A
)KKA B
+KKC D
$strKKE I
)KKI J
;KKJ K
}LL 	
}MM 
privatePP 
voidPP 
GoodG2B2PP 
(PP 
)PP 
{QQ 
intRR 
dataRR 
;RR 
ifSS 

(SS 
PRIVATE_CONST_FIVESS 
==SS  
$numSS  !
)SS! "
{TT 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
elseXX 
{YY 	
data\\ 
=\\ 
$num\\ 
;\\ 
}]] 	
if^^ 

(^^ 
PRIVATE_CONST_FIVE^^ 
==^^  
$num^^  !
)^^! "
{__ 	
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb $
+bb% &
databb' +
+bb, -
$strbb. 3
+bb4 5
(bb6 7
$numbb7 :
/bb; <
databb= A
)bbA B
+bbC D
$strbbE I
)bbI J
;bbJ K
}cc 	
}dd 
privategg 
voidgg 
GoodB2G1gg 
(gg 
)gg 
{hh 
intii 
dataii 
;ii 
ifjj 

(jj 
PRIVATE_CONST_FIVEjj 
==jj  
$numjj  !
)jj! "
{kk 	
datamm 
=mm 
(mm 
newmm 
Randommm 
(mm 
)mm  
)mm  !
.mm! "
Nextmm" &
(mm& '
)mm' (
;mm( )
}nn 	
elseoo 
{pp 	
datass 
=ss 
$numss 
;ss 
}tt 	
ifuu 

(uu 
PRIVATE_CONST_FIVEuu 
!=uu  
$numuu  !
)uu! "
{vv 	
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx /
)xx/ 0
;xx0 1
}yy 	
elsezz 
{{{ 	
if}} 
(}} 
data}} 
!=}} 
$num}} 
)}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str #
+$ %
data& *
++ ,
$str- 2
+3 4
(5 6
$num6 9
/: ;
data< @
)@ A
+B C
$strD H
)H I
;I J
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
	WriteLine
ÉÉ 
(
ÉÉ 
$str
ÉÉ D
)
ÉÉD E
;
ÉÉE F
}
ÑÑ 
}
ÖÖ 	
}
ÜÜ 
private
ââ 
void
ââ 
GoodB2G2
ââ 
(
ââ 
)
ââ 
{
ää 
int
ãã 
data
ãã 
;
ãã 
if
åå 

(
åå  
PRIVATE_CONST_FIVE
åå 
==
åå  
$num
åå  !
)
åå! "
{
çç 	
data
èè 
=
èè 
(
èè 
new
èè 
Random
èè 
(
èè 
)
èè  
)
èè  !
.
èè! "
Next
èè" &
(
èè& '
)
èè' (
;
èè( )
}
êê 	
else
ëë 
{
íí 	
data
ïï 
=
ïï 
$num
ïï 
;
ïï 
}
ññ 	
if
óó 

(
óó  
PRIVATE_CONST_FIVE
óó 
==
óó  
$num
óó  !
)
óó! "
{
òò 	
if
öö 
(
öö 
data
öö 
!=
öö 
$num
öö 
)
öö 
{
õõ 
IO
úú 
.
úú 
	WriteLine
úú 
(
úú 
$str
úú #
+
úú$ %
data
úú& *
+
úú+ ,
$str
úú- 2
+
úú3 4
(
úú5 6
$num
úú6 9
/
úú: ;
data
úú< @
)
úú@ A
+
úúB C
$str
úúD H
)
úúH I
;
úúI J
}
ùù 
else
ûû 
{
üü 
IO
†† 
.
†† 
	WriteLine
†† 
(
†† 
$str
†† D
)
††D E
;
††E F
}
°° 
}
¢¢ 	
}
££ 
public
•• 

override
•• 
void
•• 
Good
•• 
(
•• 
)
•• 
{
¶¶ 
GoodG2B1
ßß 
(
ßß 
)
ßß 
;
ßß 
GoodG2B2
®® 
(
®® 
)
®® 
;
®® 
GoodB2G1
©© 
(
©© 
)
©© 
;
©© 
GoodB2G2
™™ 
(
™™ 
)
™™ 
;
™™ 
}
´´ 
}≠≠ 
}ÆÆ ã7
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_07.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_07 1
:2 3
AbstractTestCase4 D
{ 
private 
int 
privateFive 
= 
$num 
;  
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
int## 
data## 
;## 
if$$ 

($$ 
privateFive$$ 
==$$ 
$num$$ 
)$$ 
{%% 	
data'' 
='' 
('' 
new'' 
Random'' 
('' 
)''  
)''  !
.''! "
Next''" &
(''& '
)''' (
;''( )
}(( 	
else)) 
{** 	
data-- 
=-- 
$num-- 
;-- 
}.. 	
if// 

(// 
privateFive// 
==// 
$num// 
)// 
{00 	
IO33 
.33 
	WriteLine33 
(33 
$str33 $
+33% &
data33' +
+33, -
$str33. 3
+334 5
(336 7
$num337 :
/33; <
data33= A
)33A B
+33C D
$str33E I
)33I J
;33J K
}44 	
}55 
private99 
void99 
GoodG2B199 
(99 
)99 
{:: 
int;; 
data;; 
;;; 
if<< 

(<< 
privateFive<< 
!=<< 
$num<< 
)<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
elseBB 
{CC 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
ifGG 

(GG 
privateFiveGG 
==GG 
$numGG 
)GG 
{HH 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK $
+KK% &
dataKK' +
+KK, -
$strKK. 3
+KK4 5
(KK6 7
$numKK7 :
/KK; <
dataKK= A
)KKA B
+KKC D
$strKKE I
)KKI J
;KKJ K
}LL 	
}MM 
privatePP 
voidPP 
GoodG2B2PP 
(PP 
)PP 
{QQ 
intRR 
dataRR 
;RR 
ifSS 

(SS 
privateFiveSS 
==SS 
$numSS 
)SS 
{TT 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
elseXX 
{YY 	
data\\ 
=\\ 
$num\\ 
;\\ 
}]] 	
if^^ 

(^^ 
privateFive^^ 
==^^ 
$num^^ 
)^^ 
{__ 	
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb $
+bb% &
databb' +
+bb, -
$strbb. 3
+bb4 5
(bb6 7
$numbb7 :
/bb; <
databb= A
)bbA B
+bbC D
$strbbE I
)bbI J
;bbJ K
}cc 	
}dd 
privategg 
voidgg 
GoodB2G1gg 
(gg 
)gg 
{hh 
intii 
dataii 
;ii 
ifjj 

(jj 
privateFivejj 
==jj 
$numjj 
)jj 
{kk 	
datamm 
=mm 
(mm 
newmm 
Randommm 
(mm 
)mm  
)mm  !
.mm! "
Nextmm" &
(mm& '
)mm' (
;mm( )
}nn 	
elseoo 
{pp 	
datass 
=ss 
$numss 
;ss 
}tt 	
ifuu 

(uu 
privateFiveuu 
!=uu 
$numuu 
)uu 
{vv 	
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx /
)xx/ 0
;xx0 1
}yy 	
elsezz 
{{{ 	
if}} 
(}} 
data}} 
!=}} 
$num}} 
)}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str #
+$ %
data& *
++ ,
$str- 2
+3 4
(5 6
$num6 9
/: ;
data< @
)@ A
+B C
$strD H
)H I
;I J
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
	WriteLine
ÉÉ 
(
ÉÉ 
$str
ÉÉ D
)
ÉÉD E
;
ÉÉE F
}
ÑÑ 
}
ÖÖ 	
}
ÜÜ 
private
ââ 
void
ââ 
GoodB2G2
ââ 
(
ââ 
)
ââ 
{
ää 
int
ãã 
data
ãã 
;
ãã 
if
åå 

(
åå 
privateFive
åå 
==
åå 
$num
åå 
)
åå 
{
çç 	
data
èè 
=
èè 
(
èè 
new
èè 
Random
èè 
(
èè 
)
èè  
)
èè  !
.
èè! "
Next
èè" &
(
èè& '
)
èè' (
;
èè( )
}
êê 	
else
ëë 
{
íí 	
data
ïï 
=
ïï 
$num
ïï 
;
ïï 
}
ññ 	
if
óó 

(
óó 
privateFive
óó 
==
óó 
$num
óó 
)
óó 
{
òò 	
if
öö 
(
öö 
data
öö 
!=
öö 
$num
öö 
)
öö 
{
õõ 
IO
úú 
.
úú 
	WriteLine
úú 
(
úú 
$str
úú #
+
úú$ %
data
úú& *
+
úú+ ,
$str
úú- 2
+
úú3 4
(
úú5 6
$num
úú6 9
/
úú: ;
data
úú< @
)
úú@ A
+
úúB C
$str
úúD H
)
úúH I
;
úúI J
}
ùù 
else
ûû 
{
üü 
IO
†† 
.
†† 
	WriteLine
†† 
(
†† 
$str
†† D
)
††D E
;
††E F
}
°° 
}
¢¢ 	
}
££ 
public
•• 

override
•• 
void
•• 
Good
•• 
(
•• 
)
•• 
{
¶¶ 
GoodG2B1
ßß 
(
ßß 
)
ßß 
;
ßß 
GoodG2B2
®® 
(
®® 
)
®® 
;
®® 
GoodB2G1
©© 
(
©© 
)
©© 
;
©© 
GoodB2G2
™™ 
(
™™ 
)
™™ 
;
™™ 
}
´´ 
}≠≠ 
}ÆÆ û:
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_08.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_08 1
:2 3
AbstractTestCase4 D
{ 
private 
static 
bool 
PrivateReturnsTrue *
(* +
)+ ,
{   
return!! 
true!! 
;!! 
}"" 
private$$ 
static$$ 
bool$$ 
PrivateReturnsFalse$$ +
($$+ ,
)$$, -
{%% 
return&& 
false&& 
;&& 
}'' 
public)) 

override)) 
void)) 
Bad)) 
()) 
))) 
{** 
int++ 
data++ 
;++ 
if,, 

(,, 
PrivateReturnsTrue,, 
(,, 
),,  
),,  !
{-- 	
data// 
=// 
(// 
new// 
Random// 
(// 
)//  
)//  !
.//! "
Next//" &
(//& '
)//' (
;//( )
}00 	
else11 
{22 	
data55 
=55 
$num55 
;55 
}66 	
if77 

(77 
PrivateReturnsTrue77 
(77 
)77  
)77  !
{88 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; $
+;;% &
data;;' +
+;;, -
$str;;. 3
+;;4 5
(;;6 7
$num;;7 :
/;;; <
data;;= A
);;A B
+;;C D
$str;;E I
);;I J
;;;J K
}<< 	
}== 
privateAA 
voidAA 
GoodG2B1AA 
(AA 
)AA 
{BB 
intCC 
dataCC 
;CC 
ifDD 

(DD 
PrivateReturnsFalseDD 
(DD  
)DD  !
)DD! "
{EE 	
dataHH 
=HH 
$numHH 
;HH 
}II 	
elseJJ 
{KK 	
dataMM 
=MM 
$numMM 
;MM 
}NN 	
ifOO 

(OO 
PrivateReturnsTrueOO 
(OO 
)OO  
)OO  !
{PP 	
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS $
+SS% &
dataSS' +
+SS, -
$strSS. 3
+SS4 5
(SS6 7
$numSS7 :
/SS; <
dataSS= A
)SSA B
+SSC D
$strSSE I
)SSI J
;SSJ K
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
)XX 
{YY 
intZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
PrivateReturnsTrue[[ 
([[ 
)[[  
)[[  !
{\\ 	
data^^ 
=^^ 
$num^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
$numdd 
;dd 
}ee 	
ifff 

(ff 
PrivateReturnsTrueff 
(ff 
)ff  
)ff  !
{gg 	
IOjj 
.jj 
	WriteLinejj 
(jj 
$strjj $
+jj% &
datajj' +
+jj, -
$strjj. 3
+jj4 5
(jj6 7
$numjj7 :
/jj; <
datajj= A
)jjA B
+jjC D
$strjjE I
)jjI J
;jjJ K
}kk 	
}ll 
privateoo 
voidoo 
GoodB2G1oo 
(oo 
)oo 
{pp 
intqq 
dataqq 
;qq 
ifrr 

(rr 
PrivateReturnsTruerr 
(rr 
)rr  
)rr  !
{ss 	
datauu 
=uu 
(uu 
newuu 
Randomuu 
(uu 
)uu  
)uu  !
.uu! "
Nextuu" &
(uu& '
)uu' (
;uu( )
}vv 	
elseww 
{xx 	
data{{ 
={{ 
$num{{ 
;{{ 
}|| 	
if}} 

(}} 
PrivateReturnsFalse}} 
(}}  
)}}  !
)}}! "
{~~ 	
IO
ÄÄ 
.
ÄÄ 
	WriteLine
ÄÄ 
(
ÄÄ 
$str
ÄÄ /
)
ÄÄ/ 0
;
ÄÄ0 1
}
ÅÅ 	
else
ÇÇ 
{
ÉÉ 	
if
ÖÖ 
(
ÖÖ 
data
ÖÖ 
!=
ÖÖ 
$num
ÖÖ 
)
ÖÖ 
{
ÜÜ 
IO
áá 
.
áá 
	WriteLine
áá 
(
áá 
$str
áá #
+
áá$ %
data
áá& *
+
áá+ ,
$str
áá- 2
+
áá3 4
(
áá5 6
$num
áá6 9
/
áá: ;
data
áá< @
)
áá@ A
+
ááB C
$str
ááD H
)
ááH I
;
ááI J
}
àà 
else
ââ 
{
ää 
IO
ãã 
.
ãã 
	WriteLine
ãã 
(
ãã 
$str
ãã D
)
ããD E
;
ããE F
}
åå 
}
çç 	
}
éé 
private
ëë 
void
ëë 
GoodB2G2
ëë 
(
ëë 
)
ëë 
{
íí 
int
ìì 
data
ìì 
;
ìì 
if
îî 

(
îî  
PrivateReturnsTrue
îî 
(
îî 
)
îî  
)
îî  !
{
ïï 	
data
óó 
=
óó 
(
óó 
new
óó 
Random
óó 
(
óó 
)
óó  
)
óó  !
.
óó! "
Next
óó" &
(
óó& '
)
óó' (
;
óó( )
}
òò 	
else
ôô 
{
öö 	
data
ùù 
=
ùù 
$num
ùù 
;
ùù 
}
ûû 	
if
üü 

(
üü  
PrivateReturnsTrue
üü 
(
üü 
)
üü  
)
üü  !
{
†† 	
if
¢¢ 
(
¢¢ 
data
¢¢ 
!=
¢¢ 
$num
¢¢ 
)
¢¢ 
{
££ 
IO
§§ 
.
§§ 
	WriteLine
§§ 
(
§§ 
$str
§§ #
+
§§$ %
data
§§& *
+
§§+ ,
$str
§§- 2
+
§§3 4
(
§§5 6
$num
§§6 9
/
§§: ;
data
§§< @
)
§§@ A
+
§§B C
$str
§§D H
)
§§H I
;
§§I J
}
•• 
else
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® D
)
®®D E
;
®®E F
}
©© 
}
™™ 	
}
´´ 
public
≠≠ 

override
≠≠ 
void
≠≠ 
Good
≠≠ 
(
≠≠ 
)
≠≠ 
{
ÆÆ 
GoodG2B1
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
GoodG2B2
∞∞ 
(
∞∞ 
)
∞∞ 
;
∞∞ 
GoodB2G1
±± 
(
±± 
)
±± 
;
±± 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
;
≤≤ 
}
≥≥ 
}µµ 
}∂∂ ƒ6
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_09.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_09 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_TRUE #
)# $
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.**  
STATIC_READONLY_TRUE** #
)**# $
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. $
+..% &
data..' +
+.., -
$str... 3
+..4 5
(..6 7
$num..7 :
/..; <
data..= A
)..A B
+..C D
$str..E I
)..I J
;..J K
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
IO77 
.77 !
STATIC_READONLY_FALSE77 $
)77$ %
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB  
STATIC_READONLY_TRUEBB #
)BB# $
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN  
STATIC_READONLY_TRUENN #
)NN# $
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY  
STATIC_READONLY_TRUEYY #
)YY# $
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] $
+]]% &
data]]' +
+]], -
$str]]. 3
+]]4 5
(]]6 7
$num]]7 :
/]]; <
data]]= A
)]]A B
+]]C D
$str]]E I
)]]I J
;]]J K
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee  
STATIC_READONLY_TRUEee #
)ee# $
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp !
STATIC_READONLY_FALSEpp $
)pp$ %
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
/zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
IO
áá 
.
áá "
STATIC_READONLY_TRUE
áá #
)
áá# $
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
IO
íí 
.
íí "
STATIC_READONLY_TRUE
íí #
)
íí# $
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
/
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ‡5
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_10.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_10 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
. 

staticTrue 
) 
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.** 

staticTrue** 
)** 
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. $
+..% &
data..' +
+.., -
$str... 3
+..4 5
(..6 7
$num..7 :
/..; <
data..= A
)..A B
+..C D
$str..E I
)..I J
;..J K
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
IO77 
.77 
staticFalse77 
)77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB 

staticTrueBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN 

staticTrueNN 
)NN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY 

staticTrueYY 
)YY 
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] $
+]]% &
data]]' +
+]], -
$str]]. 3
+]]4 5
(]]6 7
$num]]7 :
/]]; <
data]]= A
)]]A B
+]]C D
$str]]E I
)]]I J
;]]J K
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee 

staticTrueee 
)ee 
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp 
staticFalsepp 
)pp 
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
/zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
IO
áá 
.
áá 

staticTrue
áá 
)
áá 
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
IO
íí 
.
íí 

staticTrue
íí 
)
íí 
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
/
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ⁄8
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_11.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_11 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
. 
StaticReturnsTrue  
(  !
)! "
)" #
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(**
 
IO** 
.** 
StaticReturnsTrue** 
(**  
)**  !
)**! "
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. $
+..% &
data..' +
+.., -
$str... 3
+..4 5
(..6 7
$num..7 :
/..; <
data..= A
)..A B
+..C D
$str..E I
)..I J
;..J K
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
IO77 
.77 
StaticReturnsFalse77 !
(77! "
)77" #
)77# $
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB 
StaticReturnsTrueBB  
(BB  !
)BB! "
)BB" #
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN 
StaticReturnsTrueNN  
(NN  !
)NN! "
)NN" #
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY 
StaticReturnsTrueYY  
(YY  !
)YY! "
)YY" #
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] $
+]]% &
data]]' +
+]], -
$str]]. 3
+]]4 5
(]]6 7
$num]]7 :
/]]; <
data]]= A
)]]A B
+]]C D
$str]]E I
)]]I J
;]]J K
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee 
StaticReturnsTrueee  
(ee  !
)ee! "
)ee" #
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp 
StaticReturnsFalsepp !
(pp! "
)pp" #
)pp# $
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
/zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
IO
áá 
.
áá 
StaticReturnsTrue
áá  
(
áá  !
)
áá! "
)
áá" #
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
IO
íí 
.
íí 
StaticReturnsTrue
íí  
(
íí  !
)
íí! "
)
íí" #
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
/
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ¶0
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_12.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_12 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

(
 
IO 
. $
StaticReturnsTrueOrFalse &
(& '
)' (
)( )
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

())
 
IO)) 
.)) $
StaticReturnsTrueOrFalse)) &
())& '
)))' (
)))( )
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
else// 
{00 	
if22 
(22 
data22 
!=22 
$num22 
)22 
{33 
IO44 
.44 
	WriteLine44 
(44 
$str44 #
+44$ %
data44& *
+44+ ,
$str44- 2
+443 4
(445 6
$num446 9
/44: ;
data44< @
)44@ A
+44B C
$str44D H
)44H I
;44I J
}55 
else66 
{77 
IO88 
.88 
	WriteLine88 
(88 
$str88 D
)88D E
;88E F
}99 
}:: 	
};; 
private@@ 
void@@ 
GoodG2B@@ 
(@@ 
)@@ 
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC
 
IOCC 
.CC $
StaticReturnsTrueOrFalseCC &
(CC& '
)CC' (
)CC( )
{DD 	
dataFF 
=FF 
$numFF 
;FF 
}GG 	
elseHH 
{II 	
dataKK 
=KK 
$numKK 
;KK 
}LL 	
ifMM 

(MM
 
IOMM 
.MM $
StaticReturnsTrueOrFalseMM &
(MM& '
)MM' (
)MM( )
{NN 	
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ $
+QQ% &
dataQQ' +
+QQ, -
$strQQ. 3
+QQ4 5
(QQ6 7
$numQQ7 :
/QQ; <
dataQQ= A
)QQA B
+QQC D
$strQQE I
)QQI J
;QQJ K
}RR 	
elseSS 
{TT 	
IOWW 
.WW 
	WriteLineWW 
(WW 
$strWW $
+WW% &
dataWW' +
+WW, -
$strWW. 3
+WW4 5
(WW6 7
$numWW7 :
/WW; <
dataWW= A
)WWA B
+WWC D
$strWWE I
)WWI J
;WWJ K
}XX 	
}YY 
private]] 
void]] 
GoodB2G]] 
(]] 
)]] 
{^^ 
int__ 
data__ 
;__ 
if`` 

(``
 
IO`` 
.`` $
StaticReturnsTrueOrFalse`` &
(``& '
)``' (
)``( )
{aa 	
datacc 
=cc 
(cc 
newcc 
Randomcc 
(cc 
)cc  
)cc  !
.cc! "
Nextcc" &
(cc& '
)cc' (
;cc( )
}dd 	
elseee 
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
ifjj 

(jj
 
IOjj 
.jj $
StaticReturnsTrueOrFalsejj &
(jj& '
)jj' (
)jj( )
{kk 	
ifmm 
(mm 
datamm 
!=mm 
$nummm 
)mm 
{nn 
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo #
+oo$ %
dataoo& *
+oo+ ,
$stroo- 2
+oo3 4
(oo5 6
$numoo6 9
/oo: ;
dataoo< @
)oo@ A
+ooB C
$strooD H
)ooH I
;ooI J
}pp 
elseqq 
{rr 
IOss 
.ss 
	WriteLiness 
(ss 
$strss D
)ssD E
;ssE F
}tt 
}uu 	
elsevv 
{ww 	
ifyy 
(yy 
datayy 
!=yy 
$numyy 
)yy 
{zz 
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ #
+{{$ %
data{{& *
+{{+ ,
$str{{- 2
+{{3 4
({{5 6
$num{{6 9
/{{: ;
data{{< @
){{@ A
+{{B C
$str{{D H
){{H I
;{{I J
}|| 
else}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str D
)D E
;E F
}
ÄÄ 
}
ÅÅ 	
}
ÇÇ 
public
ÑÑ 

override
ÑÑ 
void
ÑÑ 
Good
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÜÜ 
GoodG2B
áá 
(
áá 
)
áá 
;
áá 
GoodB2G
àà 
(
àà 
)
àà 
;
àà 
}
ââ 
}ãã 
}åå û9
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_13.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_13 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_FIVE #
==# %
$num% &
)& '
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.**  
STATIC_READONLY_FIVE** #
==**# %
$num**% &
)**& '
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. $
+..% &
data..' +
+.., -
$str... 3
+..4 5
(..6 7
$num..7 :
/..; <
data..= A
)..A B
+..C D
$str..E I
)..I J
;..J K
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
IO77 
.77  
STATIC_READONLY_FIVE77 #
!=77# %
$num77% &
)77& '
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB  
STATIC_READONLY_FIVEBB #
==BB# %
$numBB% &
)BB& '
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN  
STATIC_READONLY_FIVENN #
==NN# %
$numNN% &
)NN& '
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY  
STATIC_READONLY_FIVEYY #
==YY# %
$numYY% &
)YY& '
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] $
+]]% &
data]]' +
+]], -
$str]]. 3
+]]4 5
(]]6 7
$num]]7 :
/]]; <
data]]= A
)]]A B
+]]C D
$str]]E I
)]]I J
;]]J K
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee  
STATIC_READONLY_FIVEee #
==ee# %
$numee% &
)ee& '
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp  
STATIC_READONLY_FIVEpp #
!=pp# %
$numpp% &
)pp& '
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
/zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
IO
áá 
.
áá "
STATIC_READONLY_FIVE
áá #
==
áá# %
$num
áá% &
)
áá& '
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
IO
íí 
.
íí "
STATIC_READONLY_FIVE
íí #
==
íí# %
$num
íí% &
)
íí& '
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
/
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ∫8
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_14.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_14 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
. 

staticFive 
== 
$num 
) 
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.** 

staticFive** 
==** 
$num** 
)** 
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. $
+..% &
data..' +
+.., -
$str... 3
+..4 5
(..6 7
$num..7 :
/..; <
data..= A
)..A B
+..C D
$str..E I
)..I J
;..J K
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
IO77 
.77 

staticFive77 
!=77 
$num77 
)77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB 

staticFiveBB 
==BB 
$numBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN 

staticFiveNN 
==NN 
$numNN 
)NN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY 

staticFiveYY 
==YY 
$numYY 
)YY 
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] $
+]]% &
data]]' +
+]], -
$str]]. 3
+]]4 5
(]]6 7
$num]]7 :
/]]; <
data]]= A
)]]A B
+]]C D
$str]]E I
)]]I J
;]]J K
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee 

staticFiveee 
==ee 
$numee 
)ee 
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp 

staticFivepp 
!=pp 
$numpp 
)pp 
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
/zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
IO
áá 
.
áá 

staticFive
áá 
==
áá 
$num
áá 
)
áá 
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
IO
íí 
.
íí 

staticFive
íí 
==
íí 
$num
íí 
)
íí 
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
/
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ÄB
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_15.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_15 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
switch 
( 
$num 
) 
{   	
case!! 
$num!! 
:!! 
data## 
=## 
(## 
new## 
Random## 
(## 
)##  
)##  !
.##! "
Next##" &
(##& '
)##' (
;##( )
break$$ 
;$$ 
default%% 
:%% 
data(( 
=(( 
$num(( 
;(( 
break)) 
;)) 
}** 	
switch++ 
(++ 
$num++ 
)++ 
{,, 	
case-- 
$num-- 
:-- 
IO00 
.00 
	WriteLine00 
(00 
$str00 $
+00% &
data00' +
+00, -
$str00. 3
+004 5
(006 7
$num007 :
/00; <
data00= A
)00A B
+00C D
$str00E I
)00I J
;00J K
break11 
;11 
default22 
:22 
IO44 
.44 
	WriteLine44 
(44 
$str44 /
)44/ 0
;440 1
break55 
;55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
);; 
{<< 
int== 
data== 
;== 
switch>> 
(>> 
$num>> 
)>> 
{?? 	
case@@ 
$num@@ 
:@@ 
dataCC 
=CC 
$numCC 
;CC 
breakDD 
;DD 
defaultEE 
:EE 
dataGG 
=GG 
$numGG 
;GG 
breakHH 
;HH 
}II 	
switchJJ 
(JJ 
$numJJ 
)JJ 
{KK 	
caseLL 
$numLL 
:LL 
IOOO 
.OO 
	WriteLineOO 
(OO 
$strOO $
+OO% &
dataOO' +
+OO, -
$strOO. 3
+OO4 5
(OO6 7
$numOO7 :
/OO; <
dataOO= A
)OOA B
+OOC D
$strOOE I
)OOI J
;OOJ K
breakPP 
;PP 
defaultQQ 
:QQ 
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS /
)SS/ 0
;SS0 1
breakTT 
;TT 
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
)YY 
{ZZ 
int[[ 
data[[ 
;[[ 
switch\\ 
(\\ 
$num\\ 
)\\ 
{]] 	
case^^ 
$num^^ 
:^^ 
data`` 
=`` 
$num`` 
;`` 
breakaa 
;aa 
defaultbb 
:bb 
dataee 
=ee 
$numee 
;ee 
breakff 
;ff 
}gg 	
switchhh 
(hh 
$numhh 
)hh 
{ii 	
casejj 
$numjj 
:jj 
IOmm 
.mm 
	WriteLinemm 
(mm 
$strmm $
+mm% &
datamm' +
+mm, -
$strmm. 3
+mm4 5
(mm6 7
$nummm7 :
/mm; <
datamm= A
)mmA B
+mmC D
$strmmE I
)mmI J
;mmJ K
breaknn 
;nn 
defaultoo 
:oo 
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
breakrr 
;rr 
}ss 	
}tt 
privateww 
voidww 
GoodB2G1ww 
(ww 
)ww 
{xx 
intyy 
datayy 
;yy 
switchzz 
(zz 
$numzz 
)zz 
{{{ 	
case|| 
$num|| 
:|| 
data~~ 
=~~ 
(~~ 
new~~ 
Random~~ 
(~~ 
)~~  
)~~  !
.~~! "
Next~~" &
(~~& '
)~~' (
;~~( )
break 
; 
default
ÄÄ 
:
ÄÄ 
data
ÉÉ 
=
ÉÉ 
$num
ÉÉ 
;
ÉÉ 
break
ÑÑ 
;
ÑÑ 
}
ÖÖ 	
switch
ÜÜ 
(
ÜÜ 
$num
ÜÜ 
)
ÜÜ 
{
áá 	
case
àà 
$num
àà 
:
àà 
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
break
ãã 
;
ãã 
default
åå 
:
åå 
if
éé 
(
éé 
data
éé 
!=
éé 
$num
éé 
)
éé 
{
èè 
IO
êê 
.
êê 
	WriteLine
êê 
(
êê 
$str
êê #
+
êê$ %
data
êê& *
+
êê+ ,
$str
êê- 2
+
êê3 4
(
êê5 6
$num
êê6 9
/
êê: ;
data
êê< @
)
êê@ A
+
êêB C
$str
êêD H
)
êêH I
;
êêI J
}
ëë 
else
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî D
)
îîD E
;
îîE F
}
ïï 
break
ññ 
;
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
)
õõ 
{
úú 
int
ùù 
data
ùù 
;
ùù 
switch
ûû 
(
ûû 
$num
ûû 
)
ûû 
{
üü 	
case
†† 
$num
†† 
:
†† 
data
¢¢ 
=
¢¢ 
(
¢¢ 
new
¢¢ 
Random
¢¢ 
(
¢¢ 
)
¢¢  
)
¢¢  !
.
¢¢! "
Next
¢¢" &
(
¢¢& '
)
¢¢' (
;
¢¢( )
break
££ 
;
££ 
default
§§ 
:
§§ 
data
ßß 
=
ßß 
$num
ßß 
;
ßß 
break
®® 
;
®® 
}
©© 	
switch
™™ 
(
™™ 
$num
™™ 
)
™™ 
{
´´ 	
case
¨¨ 
$num
¨¨ 
:
¨¨ 
if
ÆÆ 
(
ÆÆ 
data
ÆÆ 
!=
ÆÆ 
$num
ÆÆ 
)
ÆÆ 
{
ØØ 
IO
∞∞ 
.
∞∞ 
	WriteLine
∞∞ 
(
∞∞ 
$str
∞∞ #
+
∞∞$ %
data
∞∞& *
+
∞∞+ ,
$str
∞∞- 2
+
∞∞3 4
(
∞∞5 6
$num
∞∞6 9
/
∞∞: ;
data
∞∞< @
)
∞∞@ A
+
∞∞B C
$str
∞∞D H
)
∞∞H I
;
∞∞I J
}
±± 
else
≤≤ 
{
≥≥ 
IO
¥¥ 
.
¥¥ 
	WriteLine
¥¥ 
(
¥¥ 
$str
¥¥ D
)
¥¥D E
;
¥¥E F
}
µµ 
break
∂∂ 
;
∂∂ 
default
∑∑ 
:
∑∑ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ /
)
ππ/ 0
;
ππ0 1
break
∫∫ 
;
∫∫ 
}
ªª 	
}
ºº 
public
ææ 

override
ææ 
void
ææ 
Good
ææ 
(
ææ 
)
ææ 
{
øø 
GoodG2B1
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
GoodG2B2
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
GoodB2G1
¬¬ 
(
¬¬ 
)
¬¬ 
;
¬¬ 
GoodB2G2
√√ 
(
√√ 
)
√√ 
;
√√ 
}
ƒƒ 
}∆∆ 
}«« é
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_16.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_16 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
while 
( 
true 
) 
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
break## 
;## 
}$$ 	
while%% 
(%% 
true%% 
)%% 
{&& 	
IO)) 
.)) 
	WriteLine)) 
()) 
$str)) $
+))% &
data))' +
+)), -
$str)). 3
+))4 5
())6 7
$num))7 :
/)); <
data))= A
)))A B
+))C D
$str))E I
)))I J
;))J K
break** 
;** 
}++ 	
},, 
private00 
void00 
GoodG2B00 
(00 
)00 
{11 
int22 
data22 
;22 
while33 
(33 
true33 
)33 
{44 	
data66 
=66 
$num66 
;66 
break77 
;77 
}88 	
while99 
(99 
true99 
)99 
{:: 	
IO== 
.== 
	WriteLine== 
(== 
$str== $
+==% &
data==' +
+==, -
$str==. 3
+==4 5
(==6 7
$num==7 :
/==; <
data=== A
)==A B
+==C D
$str==E I
)==I J
;==J K
break>> 
;>> 
}?? 	
}@@ 
privateCC 
voidCC 
GoodB2GCC 
(CC 
)CC 
{DD 
intEE 
dataEE 
;EE 
whileFF 
(FF 
trueFF 
)FF 
{GG 	
dataII 
=II 
(II 
newII 
RandomII 
(II 
)II  
)II  !
.II! "
NextII" &
(II& '
)II' (
;II( )
breakJJ 
;JJ 
}KK 	
whileLL 
(LL 
trueLL 
)LL 
{MM 	
ifOO 
(OO 
dataOO 
!=OO 
$numOO 
)OO 
{PP 
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ #
+QQ$ %
dataQQ& *
+QQ+ ,
$strQQ- 2
+QQ3 4
(QQ5 6
$numQQ6 9
/QQ: ;
dataQQ< @
)QQ@ A
+QQB C
$strQQD H
)QQH I
;QQI J
}RR 
elseSS 
{TT 
IOUU 
.UU 
	WriteLineUU 
(UU 
$strUU D
)UUD E
;UUE F
}VV 
breakWW 
;WW 
}XX 	
}YY 
public[[ 

override[[ 
void[[ 
Good[[ 
([[ 
)[[ 
{\\ 
GoodG2B]] 
(]] 
)]] 
;]] 
GoodB2G^^ 
(^^ 
)^^ 
;^^ 
}__ 
}aa 
}bb Ì
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_17.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_17 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data$$ 
=$$ 
($$ 
new$$ 
Random$$ 
($$ 
)$$ 
)$$ 
.$$ 
Next$$ "
($$" #
)$$# $
;$$$ %
for%% 
(%% 
int%% 
j%% 
=%% 
$num%% 
;%% 
j%% 
<%% 
$num%% 
;%% 
j%%  
++%%  "
)%%" #
{&& 	
IO)) 
.)) 
	WriteLine)) 
()) 
$str)) $
+))% &
data))' +
+)), -
$str)). 3
+))4 5
())6 7
$num))7 :
/)); <
data))= A
)))A B
+))C D
$str))E I
)))I J
;))J K
}** 	
}++ 
private// 
void// 
GoodG2B// 
(// 
)// 
{00 
int11 
data11 
;11 
data33 
=33 
$num33 
;33 
for44 
(44 
int44 
j44 
=44 
$num44 
;44 
j44 
<44 
$num44 
;44 
j44  
++44  "
)44" #
{55 	
IO88 
.88 
	WriteLine88 
(88 
$str88 $
+88% &
data88' +
+88, -
$str88. 3
+884 5
(886 7
$num887 :
/88; <
data88= A
)88A B
+88C D
$str88E I
)88I J
;88J K
}99 	
}:: 
private== 
void== 
GoodB2G== 
(== 
)== 
{>> 
int?? 
data?? 
;?? 
dataAA 
=AA 
(AA 
newAA 
RandomAA 
(AA 
)AA 
)AA 
.AA 
NextAA "
(AA" #
)AA# $
;AA$ %
forBB 
(BB 
intBB 
kBB 
=BB 
$numBB 
;BB 
kBB 
<BB 
$numBB 
;BB 
kBB  
++BB  "
)BB" #
{CC 	
ifEE 
(EE 
dataEE 
!=EE 
$numEE 
)EE 
{FF 
IOGG 
.GG 
	WriteLineGG 
(GG 
$strGG #
+GG$ %
dataGG& *
+GG+ ,
$strGG- 2
+GG3 4
(GG5 6
$numGG6 9
/GG: ;
dataGG< @
)GG@ A
+GGB C
$strGGD H
)GGH I
;GGI J
}HH 
elseII 
{JJ 
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK D
)KKD E
;KKE F
}LL 
}MM 	
}NN 
publicPP 

overridePP 
voidPP 
GoodPP 
(PP 
)PP 
{QQ 
GoodG2BRR 
(RR 
)RR 
;RR 
GoodB2GSS 
(SS 
)SS 
;SS 
}TT 
}VV 
}WW ˘1
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_21.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_21 1
:2 3
AbstractTestCase4 D
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public 

override 
void 
Bad 
( 
) 
{   
int!! 
data!! 
;!! 
data## 
=## 
(## 
new## 
Random## 
(## 
)## 
)## 
.## 
Next## "
(##" #
)### $
;##$ %

badPrivate$$ 
=$$ 
true$$ 
;$$ 
BadSink%% 
(%% 
data%% 
)%% 
;%% 
}&& 
private(( 
void(( 
BadSink(( 
((( 
int(( 
data(( !
)((" #
{)) 
if** 

(** 

badPrivate** 
)** 
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. $
+..% &
data..' +
+.., -
$str... 3
+..4 5
(..6 7
$num..7 :
/..; <
data..= A
)..A B
+..C D
$str..E I
)..I J
;..J K
}// 	
}00 
private33 
bool33 
goodB2G1Private33  
=33! "
false33# (
;33( )
private44 
bool44 
goodB2G2Private44  
=44! "
false44# (
;44( )
private55 
bool55 
goodG2BPrivate55 
=55  !
false55" '
;55' (
public77 

override77 
void77 
Good77 
(77 
)77 
{88 
GoodB2G199 
(99 
)99 
;99 
GoodB2G2:: 
(:: 
):: 
;:: 
GoodG2B;; 
(;; 
);; 
;;; 
}<< 
private?? 
void?? 
GoodB2G1?? 
(?? 
)?? 
{@@ 
intAA 
dataAA 
;AA 
dataCC 
=CC 
(CC 
newCC 
RandomCC 
(CC 
)CC 
)CC 
.CC 
NextCC "
(CC" #
)CC# $
;CC$ %
goodB2G1PrivateDD 
=DD 
falseDD 
;DD  
GoodB2G1SinkEE 
(EE 
dataEE 
)EE 
;EE 
}FF 
privateHH 
voidHH 
GoodB2G1SinkHH 
(HH 
intHH !
dataHH" &
)HH' (
{II 
ifJJ 

(JJ 
goodB2G1PrivateJJ 
)JJ 
{KK 	
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM /
)MM/ 0
;MM0 1
}NN 	
elseOO 
{PP 	
ifRR 
(RR 
dataRR 
!=RR 
$numRR 
)RR 
{SS 
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT #
+TT$ %
dataTT& *
+TT+ ,
$strTT- 2
+TT3 4
(TT5 6
$numTT6 9
/TT: ;
dataTT< @
)TT@ A
+TTB C
$strTTD H
)TTH I
;TTI J
}UU 
elseVV 
{WW 
IOXX 
.XX 
	WriteLineXX 
(XX 
$strXX D
)XXD E
;XXE F
}YY 
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodB2G2^^ 
(^^ 
)^^ 
{__ 
int`` 
data`` 
;`` 
databb 
=bb 
(bb 
newbb 
Randombb 
(bb 
)bb 
)bb 
.bb 
Nextbb "
(bb" #
)bb# $
;bb$ %
goodB2G2Privatecc 
=cc 
truecc 
;cc 
GoodB2G2Sinkdd 
(dd 
datadd 
)dd 
;dd 
}ee 
privategg 
voidgg 
GoodB2G2Sinkgg 
(gg 
intgg !
datagg" &
)gg' (
{hh 
ifii 

(ii 
goodB2G2Privateii 
)ii 
{jj 	
ifll 
(ll 
datall 
!=ll 
$numll 
)ll 
{mm 
IOnn 
.nn 
	WriteLinenn 
(nn 
$strnn #
+nn$ %
datann& *
+nn+ ,
$strnn- 2
+nn3 4
(nn5 6
$numnn6 9
/nn: ;
datann< @
)nn@ A
+nnB C
$strnnD H
)nnH I
;nnI J
}oo 
elsepp 
{qq 
IOrr 
.rr 
	WriteLinerr 
(rr 
$strrr D
)rrD E
;rrE F
}ss 
}tt 	
}uu 
privatexx 
voidxx 
GoodG2Bxx 
(xx 
)xx 
{yy 
intzz 
datazz 
;zz 
data|| 
=|| 
$num|| 
;|| 
goodG2BPrivate}} 
=}} 
true}} 
;}} 
GoodG2BSink~~ 
(~~ 
data~~ 
)~~ 
;~~ 
} 
private
ÅÅ 
void
ÅÅ 
GoodG2BSink
ÅÅ 
(
ÅÅ 
int
ÅÅ  
data
ÅÅ! %
)
ÅÅ& '
{
ÇÇ 
if
ÉÉ 

(
ÉÉ 
goodG2BPrivate
ÉÉ 
)
ÉÉ 
{
ÑÑ 	
IO
áá 
.
áá 
	WriteLine
áá 
(
áá 
$str
áá $
+
áá% &
data
áá' +
+
áá, -
$str
áá. 3
+
áá4 5
(
áá6 7
$num
áá7 :
/
áá; <
data
áá= A
)
ááA B
+
ááC D
$str
ááE I
)
ááI J
;
ááJ K
}
àà 	
}
ââ 
}ãã 
}åå Ë
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_22a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_22a 2
:3 4
AbstractTestCase5 E
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
= 
$num 
; 
data!! 
=!! 
(!! 
new!! 
Random!! 
(!! 
)!! 
)!! 
.!! 
Next!! "
(!!" #
)!!# $
;!!$ %
badPublicStatic"" 
="" 
true"" 
;"" 8
,CWE369_Divide_by_Zero__int_Random_divide_22b## 4
.##4 5
BadSink##5 <
(##< =
data##= A
)##B C
;##C D
}$$ 
public'' 

static'' 
bool''  
goodB2G1PublicStatic'' +
='', -
false''. 3
;''3 4
public(( 

static(( 
bool((  
goodB2G2PublicStatic(( +
=((, -
false((. 3
;((3 4
public)) 

static)) 
bool)) 
goodG2BPublicStatic)) *
=))+ ,
false))- 2
;))2 3
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodB2G1-- 
(-- 
)-- 
;-- 
GoodB2G2.. 
(.. 
).. 
;.. 
GoodG2B// 
(// 
)// 
;// 
}00 
private33 
void33 
GoodB2G133 
(33 
)33 
{44 
int55 
data55 
=55 
$num55 
;55 
data77 
=77 
(77 
new77 
Random77 
(77 
)77 
)77 
.77 
Next77 "
(77" #
)77# $
;77$ % 
goodB2G1PublicStatic88 
=88 
false88 $
;88$ %8
,CWE369_Divide_by_Zero__int_Random_divide_22b99 4
.994 5
GoodB2G1Sink995 A
(99A B
data99B F
)99G H
;99H I
}:: 
private== 
void== 
GoodB2G2== 
(== 
)== 
{>> 
int?? 
data?? 
=?? 
$num?? 
;?? 
dataAA 
=AA 
(AA 
newAA 
RandomAA 
(AA 
)AA 
)AA 
.AA 
NextAA "
(AA" #
)AA# $
;AA$ % 
goodB2G2PublicStaticBB 
=BB 
trueBB #
;BB# $8
,CWE369_Divide_by_Zero__int_Random_divide_22bCC 4
.CC4 5
GoodB2G2SinkCC5 A
(CCA B
dataCCB F
)CCG H
;CCH I
}DD 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
intII 
dataII 
=II 
$numII 
;II 
dataKK 
=KK 
$numKK 
;KK 
goodG2BPublicStaticLL 
=LL 
trueLL "
;LL" #8
,CWE369_Divide_by_Zero__int_Random_divide_22bMM 4
.MM4 5
GoodG2BSinkMM5 @
(MM@ A
dataMMA E
)MMF G
;MMG H
}NN 
}PP 
}QQ ì 
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_22b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_22b 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
if 

( 8
,CWE369_Divide_by_Zero__int_Random_divide_22a 8
.8 9
badPublicStatic9 H
)H I
{ 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" $
+""% &
data""' +
+"", -
$str"". 3
+""4 5
(""6 7
$num""7 :
/""; <
data""= A
)""A B
+""C D
$str""E I
)""I J
;""J K
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
}** 
public// 

static// 
void// 
GoodB2G1Sink// #
(//# $
int//$ '
data//( ,
)//- .
{00 
if11 

(11 8
,CWE369_Divide_by_Zero__int_Random_divide_22a11 8
.118 9 
goodB2G1PublicStatic119 M
)11M N
{22 	
data55 
=55 
$num55 
;55 
}66 	
else77 
{88 	
if:: 
(:: 
data:: 
!=:: 
$num:: 
):: 
{;; 
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< #
+<<$ %
data<<& *
+<<+ ,
$str<<- 2
+<<3 4
(<<5 6
$num<<6 9
/<<: ;
data<<< @
)<<@ A
+<<B C
$str<<D H
)<<H I
;<<I J
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ D
)@@D E
;@@E F
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2G2SinkFF #
(FF# $
intFF$ '
dataFF( ,
)FF- .
{GG 
ifHH 

(HH 8
,CWE369_Divide_by_Zero__int_Random_divide_22aHH 8
.HH8 9 
goodB2G2PublicStaticHH9 M
)HHM N
{II 	
ifKK 
(KK 
dataKK 
!=KK 
$numKK 
)KK 
{LL 
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM #
+MM$ %
dataMM& *
+MM+ ,
$strMM- 2
+MM3 4
(MM5 6
$numMM6 9
/MM: ;
dataMM< @
)MM@ A
+MMB C
$strMMD H
)MMH I
;MMI J
}NN 
elseOO 
{PP 
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ D
)QQD E
;QQE F
}RR 
}SS 	
elseTT 
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
}ZZ 
public]] 

static]] 
void]] 
GoodG2BSink]] "
(]]" #
int]]# &
data]]' +
)]], -
{^^ 
if__ 

(__ 8
,CWE369_Divide_by_Zero__int_Random_divide_22a__ 8
.__8 9
goodG2BPublicStatic__9 L
)__L M
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc $
+cc% &
datacc' +
+cc, -
$strcc. 3
+cc4 5
(cc6 7
$numcc7 :
/cc; <
datacc= A
)ccA B
+ccC D
$strccE I
)ccI J
;ccJ K
}dd 	
elseee 
{ff 	
dataii 
=ii 
$numii 
;ii 
}jj 	
}kk 
}mm 
}nn ©
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_31.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_31 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
dataCopy 
; 
{ 	
int   
data   
;   
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
dataCopy## 
=## 
data## 
;## 
}$$ 	
{%% 	
int&& 
data&& 
=&& 
dataCopy&& 
;&&  
IO)) 
.)) 
	WriteLine)) 
()) 
$str)) $
+))% &
data))' +
+)), -
$str)). 3
+))4 5
())6 7
$num))7 :
/)); <
data))= A
)))A B
+))C D
$str))E I
)))I J
;))J K
}** 	
}++ 
public.. 

override.. 
void.. 
Good.. 
(.. 
).. 
{// 
GoodG2B00 
(00 
)00 
;00 
GoodB2G11 
(11 
)11 
;11 
}22 
private55 
void55 
GoodG2B55 
(55 
)55 
{66 
int77 
dataCopy77 
;77 
{88 	
int99 
data99 
;99 
data;; 
=;; 
$num;; 
;;; 
dataCopy<< 
=<< 
data<< 
;<< 
}== 	
{>> 	
int?? 
data?? 
=?? 
dataCopy?? 
;??  
IOBB 
.BB 
	WriteLineBB 
(BB 
$strBB $
+BB% &
dataBB' +
+BB, -
$strBB. 3
+BB4 5
(BB6 7
$numBB7 :
/BB; <
dataBB= A
)BBA B
+BBC D
$strBBE I
)BBI J
;BBJ K
}CC 	
}DD 
privateGG 
voidGG 
GoodB2GGG 
(GG 
)GG 
{HH 
intII 
dataCopyII 
;II 
{JJ 	
intKK 
dataKK 
;KK 
dataMM 
=MM 
(MM 
newMM 
RandomMM 
(MM 
)MM  
)MM  !
.MM! "
NextMM" &
(MM& '
)MM' (
;MM( )
dataCopyNN 
=NN 
dataNN 
;NN 
}OO 	
{PP 	
intQQ 
dataQQ 
=QQ 
dataCopyQQ 
;QQ  
ifSS 
(SS 
dataSS 
!=SS 
$numSS 
)SS 
{TT 
IOUU 
.UU 
	WriteLineUU 
(UU 
$strUU #
+UU$ %
dataUU& *
+UU+ ,
$strUU- 2
+UU3 4
(UU5 6
$numUU6 9
/UU: ;
dataUU< @
)UU@ A
+UUB C
$strUUD H
)UUH I
;UUI J
}VV 
elseWW 
{XX 
IOYY 
.YY 
	WriteLineYY 
(YY 
$strYY D
)YYD E
;YYE F
}ZZ 
}[[ 	
}\\ 
}^^ 
}__ Ω
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_41.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_41 1
:2 3
AbstractTestCase4 D
{ 
private 
static 
void 
BadSink 
(  
int  #
data$ (
)) *
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
;%% 
data'' 
='' 
('' 
new'' 
Random'' 
('' 
)'' 
)'' 
.'' 
Next'' "
(''" #
)''# $
;''$ %
BadSink(( 
((( 
data(( 
)(( 
;(( 
})) 
public,, 

override,, 
void,, 
Good,, 
(,, 
),, 
{-- 
GoodG2B.. 
(.. 
).. 
;.. 
GoodB2G// 
(// 
)// 
;// 
}00 
private22 
static22 
void22 
GoodG2BSink22 #
(22# $
int22$ '
data22( ,
)22- .
{33 
IO66 

.66
 
	WriteLine66 
(66 
$str66  
+66! "
data66# '
+66( )
$str66* /
+660 1
(662 3
$num663 6
/667 8
data669 =
)66= >
+66? @
$str66A E
)66E F
;66F G
}77 
private:: 
static:: 
void:: 
GoodG2B:: 
(::  
)::  !
{;; 
int<< 
data<< 
;<< 
data>> 
=>> 
$num>> 
;>> 
GoodG2BSink?? 
(?? 
data?? 
)?? 
;?? 
}@@ 
privateBB 
staticBB 
voidBB 
GoodB2GSinkBB #
(BB# $
intBB$ '
dataBB( ,
)BB- .
{CC 
ifEE 

(EE 
dataEE 
!=EE 
$numEE 
)EE 
{FF 	
IOGG 
.GG 
	WriteLineGG 
(GG 
$strGG 
+GG  !
dataGG" &
+GG' (
$strGG) .
+GG/ 0
(GG1 2
$numGG2 5
/GG6 7
dataGG8 <
)GG< =
+GG> ?
$strGG@ D
)GGD E
;GGE F
}HH 	
elseII 
{JJ 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK @
)KK@ A
;KKA B
}LL 	
}MM 
privatePP 
staticPP 
voidPP 
GoodB2GPP 
(PP  
)PP  !
{QQ 
intRR 
dataRR 
;RR 
dataTT 
=TT 
(TT 
newTT 
RandomTT 
(TT 
)TT 
)TT 
.TT 
NextTT "
(TT" #
)TT# $
;TT$ %
GoodB2GSinkUU 
(UU 
dataUU 
)UU 
;UU 
}VV 
}XX 
}YY ‹
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_42.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_42 1
:2 3
AbstractTestCase4 D
{ 
private 
static 
int 
	BadSource  
(  !
)! "
{ 
int 
data 
; 
data   
=   
(   
new   
Random   
(   
)   
)   
.   
Next   "
(  " #
)  # $
;  $ %
return!! 
data!! 
;!! 
}"" 
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
int&& 
data&& 
=&& 
	BadSource&& 
(&& 
)&& 
;&& 
IO)) 

.))
 
	WriteLine)) 
()) 
$str))  
+))! "
data))# '
+))( )
$str))* /
+))0 1
())2 3
$num))3 6
/))7 8
data))9 =
)))= >
+))? @
$str))A E
)))E F
;))F G
}** 
private.. 
static.. 
int.. 
GoodG2BSource.. $
(..$ %
)..% &
{// 
int00 
data00 
;00 
data22 
=22 
$num22 
;22 
return33 
data33 
;33 
}44 
private66 
static66 
void66 
GoodG2B66 
(66  
)66  !
{77 
int88 
data88 
=88 
GoodG2BSource88  
(88  !
)88! "
;88" #
IO;; 

.;;
 
	WriteLine;; 
(;; 
$str;;  
+;;! "
data;;# '
+;;( )
$str;;* /
+;;0 1
(;;2 3
$num;;3 6
/;;7 8
data;;9 =
);;= >
+;;? @
$str;;A E
);;E F
;;;F G
}<< 
private?? 
static?? 
int?? 
GoodB2GSource?? $
(??$ %
)??% &
{@@ 
intAA 
dataAA 
;AA 
dataCC 
=CC 
(CC 
newCC 
RandomCC 
(CC 
)CC 
)CC 
.CC 
NextCC "
(CC" #
)CC# $
;CC$ %
returnDD 
dataDD 
;DD 
}EE 
privateGG 
staticGG 
voidGG 
GoodB2GGG 
(GG  
)GG  !
{HH 
intII 
dataII 
=II 
GoodB2GSourceII  
(II  !
)II! "
;II" #
ifKK 

(KK 
dataKK 
!=KK 
$numKK 
)KK 
{LL 	
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM 
+MM  !
dataMM" &
+MM' (
$strMM) .
+MM/ 0
(MM1 2
$numMM2 5
/MM6 7
dataMM8 <
)MM< =
+MM> ?
$strMM@ D
)MMD E
;MME F
}NN 	
elseOO 
{PP 	
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ @
)QQ@ A
;QQA B
}RR 	
}SS 
publicUU 

overrideUU 
voidUU 
GoodUU 
(UU 
)UU 
{VV 
GoodG2BWW 
(WW 
)WW 
;WW 
GoodB2GXX 
(XX 
)XX 
;XX 
}YY 
}[[ 
}\\ Å!
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_45.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_divide_45 1
:2 3
AbstractTestCase4 D
{ 
private 
int 
dataBad 
; 
private 
int 
dataGoodG2B 
; 
private 
int 
dataGoodB2G 
; 
private   
void   
BadSink   
(   
)   
{!! 
int"" 
data"" 
="" 
dataBad"" 
;"" 
IO%% 

.%%
 
	WriteLine%% 
(%% 
$str%%  
+%%! "
data%%# '
+%%( )
$str%%* /
+%%0 1
(%%2 3
$num%%3 6
/%%7 8
data%%9 =
)%%= >
+%%? @
$str%%A E
)%%E F
;%%F G
}&& 
public(( 

override(( 
void(( 
Bad(( 
((( 
)(( 
{)) 
int** 
data** 
;** 
data,, 
=,, 
(,, 
new,, 
Random,, 
(,, 
),, 
),, 
.,, 
Next,, "
(,," #
),,# $
;,,$ %
dataBad-- 
=-- 
data-- 
;-- 
BadSink.. 
(.. 
).. 
;.. 
}// 
public22 

override22 
void22 
Good22 
(22 
)22 
{33 
GoodG2B44 
(44 
)44 
;44 
GoodB2G55 
(55 
)55 
;55 
}66 
private88 
void88 
GoodG2BSink88 
(88 
)88 
{99 
int:: 
data:: 
=:: 
dataGoodG2B:: 
;:: 
IO== 

.==
 
	WriteLine== 
(== 
$str==  
+==! "
data==# '
+==( )
$str==* /
+==0 1
(==2 3
$num==3 6
/==7 8
data==9 =
)=== >
+==? @
$str==A E
)==E F
;==F G
}>> 
privateAA 
voidAA 
GoodG2BAA 
(AA 
)AA 
{BB 
intCC 
dataCC 
;CC 
dataEE 
=EE 
$numEE 
;EE 
dataGoodG2BFF 
=FF 
dataFF 
;FF 
GoodG2BSinkGG 
(GG 
)GG 
;GG 
}HH 
privateJJ 
voidJJ 
GoodB2GSinkJJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
=LL 
dataGoodB2GLL 
;LL 
ifNN 

(NN 
dataNN 
!=NN 
$numNN 
)NN 
{OO 	
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP 
+PP  !
dataPP" &
+PP' (
$strPP) .
+PP/ 0
(PP1 2
$numPP2 5
/PP6 7
dataPP8 <
)PP< =
+PP> ?
$strPP@ D
)PPD E
;PPE F
}QQ 	
elseRR 
{SS 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT @
)TT@ A
;TTA B
}UU 	
}VV 
privateYY 
voidYY 
GoodB2GYY 
(YY 
)YY 
{ZZ 
int[[ 
data[[ 
;[[ 
data]] 
=]] 
(]] 
new]] 
Random]] 
(]] 
)]] 
)]] 
.]] 
Next]] "
(]]" #
)]]# $
;]]$ %
dataGoodB2G^^ 
=^^ 
data^^ 
;^^ 
GoodB2GSink__ 
(__ 
)__ 
;__ 
}`` 
}bb 
}cc ê
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_51a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_51a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %8
,CWE369_Divide_by_Zero__int_Random_divide_51b 4
.4 5
BadSink5 <
(< =
data= A
)C D
;D E
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
int,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 8
,CWE369_Divide_by_Zero__int_Random_divide_51b// 4
.//4 5
GoodG2BSink//5 @
(//@ A
data//A E
)//G H
;//H I
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
int55 
data55 
;55 
data77 
=77 
(77 
new77 
Random77 
(77 
)77 
)77 
.77 
Next77 "
(77" #
)77# $
;77$ %8
,CWE369_Divide_by_Zero__int_Random_divide_51b88 4
.884 5
GoodB2GSink885 @
(88@ A
data88A E
)88G H
;88H I
}99 
};; 
}<< ‰
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_51b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_51b 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< ê
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_52a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_52a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %8
,CWE369_Divide_by_Zero__int_Random_divide_52b 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
int,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 8
,CWE369_Divide_by_Zero__int_Random_divide_52b// 4
.//4 5
GoodG2BSink//5 @
(//@ A
data//A E
)//F G
;//G H
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
int55 
data55 
;55 
data77 
=77 
(77 
new77 
Random77 
(77 
)77 
)77 
.77 
Next77 "
(77" #
)77# $
;77$ %8
,CWE369_Divide_by_Zero__int_Random_divide_52b88 4
.884 5
GoodB2GSink885 @
(88@ A
data88A E
)88F G
;88G H
}99 
};; 
}<< ˆ

•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_52b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_52b 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 8
,CWE369_Divide_by_Zero__int_Random_divide_52c 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 8
,CWE369_Divide_by_Zero__int_Random_divide_52c&& 4
.&&4 5
GoodG2BSink&&5 @
(&&@ A
data&&A E
)&&F G
;&&G H
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 8
,CWE369_Divide_by_Zero__int_Random_divide_52c,, 4
.,,4 5
GoodB2GSink,,5 @
(,,@ A
data,,A E
),,F G
;,,G H
}-- 
}// 
}00 ‰
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_52c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_52c 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< ê
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_53a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_53a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %8
,CWE369_Divide_by_Zero__int_Random_divide_53b 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
int,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 8
,CWE369_Divide_by_Zero__int_Random_divide_53b// 4
.//4 5
GoodG2BSink//5 @
(//@ A
data//A E
)//F G
;//G H
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
int55 
data55 
;55 
data77 
=77 
(77 
new77 
Random77 
(77 
)77 
)77 
.77 
Next77 "
(77" #
)77# $
;77$ %8
,CWE369_Divide_by_Zero__int_Random_divide_53b88 4
.884 5
GoodB2GSink885 @
(88@ A
data88A E
)88F G
;88G H
}99 
};; 
}<< ˆ

•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_53b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_53b 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 8
,CWE369_Divide_by_Zero__int_Random_divide_53c 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 8
,CWE369_Divide_by_Zero__int_Random_divide_53c&& 4
.&&4 5
GoodG2BSink&&5 @
(&&@ A
data&&A E
)&&F G
;&&G H
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 8
,CWE369_Divide_by_Zero__int_Random_divide_53c,, 4
.,,4 5
GoodB2GSink,,5 @
(,,@ A
data,,A E
),,F G
;,,G H
}-- 
}// 
}00 ˆ

•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_53c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_53c 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 8
,CWE369_Divide_by_Zero__int_Random_divide_53d 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 8
,CWE369_Divide_by_Zero__int_Random_divide_53d&& 4
.&&4 5
GoodG2BSink&&5 @
(&&@ A
data&&A E
)&&F G
;&&G H
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 8
,CWE369_Divide_by_Zero__int_Random_divide_53d,, 4
.,,4 5
GoodB2GSink,,5 @
(,,@ A
data,,A E
),,F G
;,,G H
}-- 
}// 
}00 ‰
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_53d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_53d 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< ê
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_54a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_54a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %8
,CWE369_Divide_by_Zero__int_Random_divide_54b 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
int,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 8
,CWE369_Divide_by_Zero__int_Random_divide_54b// 4
.//4 5
GoodG2BSink//5 @
(//@ A
data//A E
)//F G
;//G H
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
int55 
data55 
;55 
data77 
=77 
(77 
new77 
Random77 
(77 
)77 
)77 
.77 
Next77 "
(77" #
)77# $
;77$ %8
,CWE369_Divide_by_Zero__int_Random_divide_54b88 4
.884 5
GoodB2GSink885 @
(88@ A
data88A E
)88F G
;88G H
}99 
};; 
}<< ˆ

•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_54b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_54b 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 8
,CWE369_Divide_by_Zero__int_Random_divide_54c 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 8
,CWE369_Divide_by_Zero__int_Random_divide_54c&& 4
.&&4 5
GoodG2BSink&&5 @
(&&@ A
data&&A E
)&&F G
;&&G H
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 8
,CWE369_Divide_by_Zero__int_Random_divide_54c,, 4
.,,4 5
GoodB2GSink,,5 @
(,,@ A
data,,A E
),,F G
;,,G H
}-- 
}// 
}00 ˆ

•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_54c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_54c 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 8
,CWE369_Divide_by_Zero__int_Random_divide_54d 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 8
,CWE369_Divide_by_Zero__int_Random_divide_54d&& 4
.&&4 5
GoodG2BSink&&5 @
(&&@ A
data&&A E
)&&F G
;&&G H
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 8
,CWE369_Divide_by_Zero__int_Random_divide_54d,, 4
.,,4 5
GoodB2GSink,,5 @
(,,@ A
data,,A E
),,F G
;,,G H
}-- 
}// 
}00 ˆ

•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_54d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_54d 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 8
,CWE369_Divide_by_Zero__int_Random_divide_54e 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 8
,CWE369_Divide_by_Zero__int_Random_divide_54e&& 4
.&&4 5
GoodG2BSink&&5 @
(&&@ A
data&&A E
)&&F G
;&&G H
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 8
,CWE369_Divide_by_Zero__int_Random_divide_54e,, 4
.,,4 5
GoodB2GSink,,5 @
(,,@ A
data,,A E
),,F G
;,,G H
}-- 
}// 
}00 ‰
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_54e.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_54e 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Û
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_61a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_61a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
= 8
,CWE369_Divide_by_Zero__int_Random_divide_61b ?
.? @
	BadSource@ I
(I J
)J K
;K L
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
GoodB2G(( 
((( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
),,  !
{-- 
int.. 
data.. 
=.. 8
,CWE369_Divide_by_Zero__int_Random_divide_61b.. ?
...? @
GoodG2BSource..@ M
(..M N
)..N O
;..O P
IO11 

.11
 
	WriteLine11 
(11 
$str11  
+11! "
data11# '
+11( )
$str11* /
+110 1
(112 3
$num113 6
/117 8
data119 =
)11= >
+11? @
$str11A E
)11E F
;11F G
}22 
private55 
static55 
void55 
GoodB2G55 
(55  
)55  !
{66 
int77 
data77 
=77 8
,CWE369_Divide_by_Zero__int_Random_divide_61b77 ?
.77? @
GoodB2GSource77@ M
(77M N
)77N O
;77O P
if99 

(99 
data99 
!=99 
$num99 
)99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; 
+;;  !
data;;" &
+;;' (
$str;;) .
+;;/ 0
(;;1 2
$num;;2 5
/;;6 7
data;;8 <
);;< =
+;;> ?
$str;;@ D
);;D E
;;;E F
}<< 	
else== 
{>> 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? @
)??@ A
;??A B
}@@ 	
}AA 
}CC 
}DD »
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_61b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_61b 2
{ 
public 

static 
int 
	BadSource 
(  
)  !
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %
return 
data 
; 
}   
public%% 

static%% 
int%% 
GoodG2BSource%% #
(%%# $
)%%$ %
{&& 
int'' 
data'' 
;'' 
data)) 
=)) 
$num)) 
;)) 
return** 
data** 
;** 
}++ 
public.. 

static.. 
int.. 
GoodB2GSource.. #
(..# $
)..$ %
{// 
int00 
data00 
;00 
data22 
=22 
(22 
new22 
Random22 
(22 
)22 
)22 
.22 
Next22 "
(22" #
)22# $
;22$ %
return33 
data33 
;33 
}44 
}66 
}77 Œ
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_66a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_66a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %
int 
[ 
] 
	dataArray 
= 
new 
int !
[! "
$num" #
]# $
;$ %
	dataArray   
[   
$num   
]   
=   
data   
;   8
,CWE369_Divide_by_Zero__int_Random_divide_66b!! 4
.!!4 5
BadSink!!5 <
(!!< =
	dataArray!!= F
)!!H I
;!!I J
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
GoodB2G(( 
((( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
),,  !
{-- 
int.. 
data.. 
;.. 
data00 
=00 
$num00 
;00 
int11 
[11 
]11 
	dataArray11 
=11 
new11 
int11 !
[11! "
$num11" #
]11# $
;11$ %
	dataArray22 
[22 
$num22 
]22 
=22 
data22 
;22 8
,CWE369_Divide_by_Zero__int_Random_divide_66b33 4
.334 5
GoodG2BSink335 @
(33@ A
	dataArray33A J
)33L M
;33M N
}44 
private77 
static77 
void77 
GoodB2G77 
(77  
)77  !
{88 
int99 
data99 
;99 
data;; 
=;; 
(;; 
new;; 
Random;; 
(;; 
);; 
);; 
.;; 
Next;; "
(;;" #
);;# $
;;;$ %
int<< 
[<< 
]<< 
	dataArray<< 
=<< 
new<< 
int<< !
[<<! "
$num<<" #
]<<# $
;<<$ %
	dataArray== 
[== 
$num== 
]== 
=== 
data== 
;== 8
,CWE369_Divide_by_Zero__int_Random_divide_66b>> 4
.>>4 5
GoodB2GSink>>5 @
(>>@ A
	dataArray>>A J
)>>L M
;>>M N
}?? 
}AA 
}BB Â
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_66b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_66b 2
{ 
public 

static 
void 
BadSink 
( 
int "
[" #
]# $
	dataArray% .
)/ 0
{ 
int 
data 
= 
	dataArray 
[ 
$num 
] 
;  
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
int''# &
[''& '
]''' (
	dataArray'') 2
)''3 4
{(( 
int)) 
data)) 
=)) 
	dataArray)) 
[)) 
$num)) 
])) 
;))  
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
int00# &
[00& '
]00' (
	dataArray00) 2
)003 4
{11 
int22 
data22 
=22 
	dataArray22 
[22 
$num22 
]22 
;22  
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? õ
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_67a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_67a 2
:3 4
AbstractTestCase5 E
{ 
public 

class 
	Container 
{ 
public 
int 
containerOne 
;  
} 
public 

override 
void 
Bad 
( 
) 
{   
int!! 
data!! 
;!! 
data## 
=## 
(## 
new## 
Random## 
(## 
)## 
)## 
.## 
Next## "
(##" #
)### $
;##$ %
	Container$$ 
dataContainer$$ 
=$$  !
new$$" %
	Container$$& /
($$/ 0
)$$0 1
;$$1 2
dataContainer%% 
.%% 
containerOne%% "
=%%# $
data%%% )
;%%) *8
,CWE369_Divide_by_Zero__int_Random_divide_67b&& 4
.&&4 5
BadSink&&5 <
(&&< =
dataContainer&&= J
)&&L M
;&&M N
}'' 
public** 

override** 
void** 
Good** 
(** 
)** 
{++ 
GoodG2B,, 
(,, 
),, 
;,, 
GoodB2G-- 
(-- 
)-- 
;-- 
}.. 
private11 
static11 
void11 
GoodG2B11 
(11  
)11  !
{22 
int33 
data33 
;33 
data55 
=55 
$num55 
;55 
	Container66 
dataContainer66 
=66  !
new66" %
	Container66& /
(66/ 0
)660 1
;661 2
dataContainer77 
.77 
containerOne77 "
=77# $
data77% )
;77) *8
,CWE369_Divide_by_Zero__int_Random_divide_67b88 4
.884 5
GoodG2BSink885 @
(88@ A
dataContainer88A N
)88P Q
;88Q R
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
(@@ 
new@@ 
Random@@ 
(@@ 
)@@ 
)@@ 
.@@ 
Next@@ "
(@@" #
)@@# $
;@@$ %
	ContainerAA 
dataContainerAA 
=AA  !
newAA" %
	ContainerAA& /
(AA/ 0
)AA0 1
;AA1 2
dataContainerBB 
.BB 
containerOneBB "
=BB# $
dataBB% )
;BB) *8
,CWE369_Divide_by_Zero__int_Random_divide_67bCC 4
.CC4 5
GoodB2GSinkCC5 @
(CC@ A
dataContainerCCA N
)CCP Q
;CCQ R
}DD 
}FF 
}GG ˚
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_67b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_67b 2
{ 
public 

static 
void 
BadSink 
( 8
,CWE369_Divide_by_Zero__int_Random_divide_67a K
.K L
	ContainerL U
dataContainerV c
)d e
{ 
int 
data 
= 
dataContainer  
.  !
containerOne! -
;- .
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #8
,CWE369_Divide_by_Zero__int_Random_divide_67a''# O
.''O P
	Container''P Y
dataContainer''Z g
)''h i
{(( 
int)) 
data)) 
=)) 
dataContainer))  
.))  !
containerOne))! -
;))- .
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #8
,CWE369_Divide_by_Zero__int_Random_divide_67a00# O
.00O P
	Container00P Y
dataContainer00Z g
)00h i
{11 
int22 
data22 
=22 
dataContainer22  
.22  !
containerOne22! -
;22- .
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ∆
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_68a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_68a 2
:3 4
AbstractTestCase5 E
{ 
public 

static 
int 
data 
; 
public 

override 
void 
Bad 
( 
) 
{ 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %8
,CWE369_Divide_by_Zero__int_Random_divide_68b   4
.  4 5
BadSink  5 <
(  < =
)  = >
;  > ?
}!! 
public$$ 

override$$ 
void$$ 
Good$$ 
($$ 
)$$ 
{%% 
GoodG2B&& 
(&& 
)&& 
;&& 
GoodB2G'' 
('' 
)'' 
;'' 
}(( 
private++ 
static++ 
void++ 
GoodG2B++ 
(++  
)++  !
{,, 
data.. 
=.. 
$num.. 
;.. 8
,CWE369_Divide_by_Zero__int_Random_divide_68b// 4
.//4 5
GoodG2BSink//5 @
(//@ A
)//A B
;//B C
}00 
private33 
static33 
void33 
GoodB2G33 
(33  
)33  !
{44 
data66 
=66 
(66 
new66 
Random66 
(66 
)66 
)66 
.66 
Next66 "
(66" #
)66# $
;66$ %8
,CWE369_Divide_by_Zero__int_Random_divide_68b77 4
.774 5
GoodB2GSink775 @
(77@ A
)77A B
;77B C
}88 
}:: 
};; œ
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_68b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_68b 2
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
int 
data 
= 8
,CWE369_Divide_by_Zero__int_Random_divide_68a ?
.? @
data@ D
;D E
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
)''# $
{(( 
int)) 
data)) 
=)) 8
,CWE369_Divide_by_Zero__int_Random_divide_68a)) ?
.))? @
data))@ D
;))D E
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
)00# $
{11 
int22 
data22 
=22 8
,CWE369_Divide_by_Zero__int_Random_divide_68a22 ?
.22? @
data22@ D
;22D E
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? Œ
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_71a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_71a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %8
,CWE369_Divide_by_Zero__int_Random_divide_71b 4
.4 5
BadSink5 <
(< =
(= >
Object> D
)D E
dataE I
)K L
;L M
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
static** 
void** 
GoodG2B** 
(**  
)**  !
{++ 
int,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 8
,CWE369_Divide_by_Zero__int_Random_divide_71b// 4
.//4 5
GoodG2BSink//5 @
(//@ A
(//A B
Object//B H
)//H I
data//I M
)//O P
;//P Q
}00 
private33 
static33 
void33 
GoodB2G33 
(33  
)33  !
{44 
int55 
data55 
;55 
data77 
=77 
(77 
new77 
Random77 
(77 
)77 
)77 
.77 
Next77 "
(77" #
)77# $
;77$ %8
,CWE369_Divide_by_Zero__int_Random_divide_71b88 4
.884 5
GoodB2GSink885 @
(88@ A
(88A B
Object88B H
)88H I
data88I M
)88O P
;88P Q
}99 
};; 
}<< ó
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_71b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_71b 2
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
int 
data 
= 
( 
int 
) 

dataObject "
;" #
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
Object((# )

dataObject((* 4
)((5 6
{)) 
int** 
data** 
=** 
(** 
int** 
)** 

dataObject** "
;**" #
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
Object11# )

dataObject11* 4
)115 6
{22 
int33 
data33 
=33 
(33 
int33 
)33 

dataObject33 "
;33" #
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ æ 
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_72a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_72a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %
	Hashtable   
dataHashtable   
=    !
new  " %
	Hashtable  & /
(  / 0
$num  0 1
)  1 2
;  2 3
dataHashtable!! 
.!! 
Add!! 
(!! 
$num!! 
,!! 
data!! !
)!!! "
;!!" #
dataHashtable"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" !
)""! "
;""" #
dataHashtable## 
.## 
Add## 
(## 
$num## 
,## 
data## !
)##! "
;##" #8
,CWE369_Divide_by_Zero__int_Random_divide_72b$$ 4
.$$4 5
BadSink$$5 <
($$< =
dataHashtable$$= J
)$$L M
;$$M N
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
int11 
data11 
;11 
data33 
=33 
$num33 
;33 
	Hashtable44 
dataHashtable44 
=44  !
new44" %
	Hashtable44& /
(44/ 0
$num440 1
)441 2
;442 3
dataHashtable55 
.55 
Add55 
(55 
$num55 
,55 
data55 !
)55! "
;55" #
dataHashtable66 
.66 
Add66 
(66 
$num66 
,66 
data66 !
)66! "
;66" #
dataHashtable77 
.77 
Add77 
(77 
$num77 
,77 
data77 !
)77! "
;77" #8
,CWE369_Divide_by_Zero__int_Random_divide_72b88 4
.884 5
GoodG2BSink885 @
(88@ A
dataHashtable88A N
)88P Q
;88Q R
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
(@@ 
new@@ 
Random@@ 
(@@ 
)@@ 
)@@ 
.@@ 
Next@@ "
(@@" #
)@@# $
;@@$ %
	HashtableAA 
dataHashtableAA 
=AA  !
newAA" %
	HashtableAA& /
(AA/ 0
$numAA0 1
)AA1 2
;AA2 3
dataHashtableBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB !
)BB! "
;BB" #
dataHashtableCC 
.CC 
AddCC 
(CC 
$numCC 
,CC 
dataCC !
)CC! "
;CC" #
dataHashtableDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD !
)DD! "
;DD" #8
,CWE369_Divide_by_Zero__int_Random_divide_72bEE 4
.EE4 5
GoodB2GSinkEE5 @
(EE@ A
dataHashtableEEA N
)EEP Q
;EEQ R
}FF 
}HH 
}II ¬
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_72b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_72b 2
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
int 
data 
= 
( 
int 
) 
dataHashtable &
[& '
$num' (
]( )
;) *
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
	Hashtable((# ,
dataHashtable((- :
)((; <
{)) 
int** 
data** 
=** 
(** 
int** 
)** 
dataHashtable** &
[**& '
$num**' (
]**( )
;**) *
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
	Hashtable11# ,
dataHashtable11- :
)11; <
{22 
int33 
data33 
=33 
(33 
int33 
)33 
dataHashtable33 &
[33& '
$num33' (
]33( )
;33) *
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ≤ 
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_73a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_73a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %

LinkedList   
<   
int   
>   
dataLinkedList   &
=  ' (
new  ) ,

LinkedList  - 7
<  7 8
int  8 ;
>  ; <
(  < =
)  = >
;  > ?
dataLinkedList!! 
.!! 
AddLast!! 
(!! 
data!! #
)!!# $
;!!$ %
dataLinkedList"" 
."" 
AddLast"" 
("" 
data"" #
)""# $
;""$ %
dataLinkedList## 
.## 
AddLast## 
(## 
data## #
)### $
;##$ %8
,CWE369_Divide_by_Zero__int_Random_divide_73b$$ 4
.$$4 5
BadSink$$5 <
($$< =
dataLinkedList$$= K
)$$M N
;$$N O
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
int11 
data11 
;11 
data33 
=33 
$num33 
;33 

LinkedList44 
<44 
int44 
>44 
dataLinkedList44 &
=44' (
new44) ,

LinkedList44- 7
<447 8
int448 ;
>44; <
(44< =
)44= >
;44> ?
dataLinkedList55 
.55 
AddLast55 
(55 
data55 #
)55# $
;55$ %
dataLinkedList66 
.66 
AddLast66 
(66 
data66 #
)66# $
;66$ %
dataLinkedList77 
.77 
AddLast77 
(77 
data77 #
)77# $
;77$ %8
,CWE369_Divide_by_Zero__int_Random_divide_73b88 4
.884 5
GoodG2BSink885 @
(88@ A
dataLinkedList88A O
)88Q R
;88R S
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
(@@ 
new@@ 
Random@@ 
(@@ 
)@@ 
)@@ 
.@@ 
Next@@ "
(@@" #
)@@# $
;@@$ %

LinkedListAA 
<AA 
intAA 
>AA 
dataLinkedListAA &
=AA' (
newAA) ,

LinkedListAA- 7
<AA7 8
intAA8 ;
>AA; <
(AA< =
)AA= >
;AA> ?
dataLinkedListBB 
.BB 
AddLastBB 
(BB 
dataBB #
)BB# $
;BB$ %
dataLinkedListCC 
.CC 
AddLastCC 
(CC 
dataCC #
)CC# $
;CC$ %
dataLinkedListDD 
.DD 
AddLastDD 
(DD 
dataDD #
)DD# $
;DD$ %8
,CWE369_Divide_by_Zero__int_Random_divide_73bEE 4
.EE4 5
GoodB2GSinkEE5 @
(EE@ A
dataLinkedListEEA O
)EEQ R
;EER S
}FF 
}HH 
}II Ñ
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_73b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_73b 2
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
int* -
>- .
dataLinkedList/ =
)> ?
{ 
int 
data 
= 
dataLinkedList !
.! "
Last" &
.& '
Value' ,
;, -
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #

LinkedList((# -
<((- .
int((. 1
>((1 2
dataLinkedList((3 A
)((B C
{)) 
int** 
data** 
=** 
dataLinkedList** !
.**! "
Last**" &
.**& '
Value**' ,
;**, -
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

LinkedList11# -
<11- .
int11. 1
>111 2
dataLinkedList113 A
)11B C
{22 
int33 
data33 
=33 
dataLinkedList33 !
.33! "
Last33" &
.33& '
Value33' ,
;33, -
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ˜#
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_74a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_74a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %

Dictionary   
<   
int   
,   
int   
>   
dataDictionary   *
=  + ,
new  - 0

Dictionary  1 ;
<  ; <
int  < ?
,  ? @
int  @ C
>  C D
(  D E
)  E F
;  F G
dataDictionary!! 
.!! 
Add!! 
(!! 
$num!! 
,!! 
data!! "
)!!" #
;!!# $
dataDictionary"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" "
)""" #
;""# $
dataDictionary## 
.## 
Add## 
(## 
$num## 
,## 
data## "
)##" #
;### $8
,CWE369_Divide_by_Zero__int_Random_divide_74b$$ 4
.$$4 5
BadSink$$5 <
($$< =
dataDictionary$$= K
)$$M N
;$$N O
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
int11 
data11 
;11 
data33 
=33 
$num33 
;33 

Dictionary44 
<44 
int44 
,44 
int44 
>44 
dataDictionary44 *
=44+ ,
new44- 0

Dictionary441 ;
<44; <
int44< ?
,44? @
int44@ C
>44C D
(44D E
)44E F
;44F G
dataDictionary55 
.55 
Add55 
(55 
$num55 
,55 
data55 "
)55" #
;55# $
dataDictionary66 
.66 
Add66 
(66 
$num66 
,66 
data66 "
)66" #
;66# $
dataDictionary77 
.77 
Add77 
(77 
$num77 
,77 
data77 "
)77" #
;77# $8
,CWE369_Divide_by_Zero__int_Random_divide_74b88 4
.884 5
GoodG2BSink885 @
(88@ A
dataDictionary88A O
)88Q R
;88R S
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
(@@ 
new@@ 
Random@@ 
(@@ 
)@@ 
)@@ 
.@@ 
Next@@ "
(@@" #
)@@# $
;@@$ %

DictionaryAA 
<AA 
intAA 
,AA 
intAA 
>AA 
dataDictionaryAA *
=AA+ ,
newAA- 0

DictionaryAA1 ;
<AA; <
intAA< ?
,AA? @
intAA@ C
>AAC D
(AAD E
)AAE F
;AAF G
dataDictionaryBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB "
)BB" #
;BB# $
dataDictionaryCC 
.CC 
AddCC 
(CC 
$numCC 
,CC 
dataCC "
)CC" #
;CC# $
dataDictionaryDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD "
)DD" #
;DD# $8
,CWE369_Divide_by_Zero__int_Random_divide_74bEE 4
.EE4 5
GoodB2GSinkEE5 @
(EE@ A
dataDictionaryEEA O
)EEQ R
;EER S
}FF 
}HH 
}II ´
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_74b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_74b 2
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
int. 1
>1 2
dataDictionary3 A
)B C
{ 
int 
data 
= 
dataDictionary !
[! "
$num" #
]# $
;$ %
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( #
(((# $

Dictionary(($ .
<((. /
int((/ 2
,((2 3
int((3 6
>((6 7
dataDictionary((8 F
)((G H
{)) 
int** 
data** 
=** 
dataDictionary** !
[**! "
$num**" #
]**# $
;**$ %
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

Dictionary11# -
<11- .
int11. 1
,111 2
int112 5
>115 6
dataDictionary117 E
)11F G
{22 
int33 
data33 
=33 
dataDictionary33 !
[33! "
$num33" #
]33# $
;33$ %
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ Å0
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_75a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_75a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data!! 
=!! 
(!! 
new!! 
Random!! 
(!! 
)!! 
)!! 
.!! 
Next!! "
(!!" #
)!!# $
;!!$ %
byte## 
[## 
]## 
dataSerialized## 
=## 
null##  $
;##$ %
try$$ 
{%% 	
BinaryFormatter&& 
bf&& 
=&&  
new&&! $
BinaryFormatter&&% 4
(&&4 5
)&&5 6
;&&6 7
using'' 
('' 
var'' 
ms'' 
='' 
new'' 
MemoryStream''  ,
('', -
)''- .
)''. /
{(( 
bf)) 
.)) 
	Serialize)) 
()) 
ms)) 
,))  
data))! %
)))% &
;))& '
dataSerialized** 
=**  
ms**! #
.**# $
ToArray**$ +
(**+ ,
)**, -
;**- .
}++ 8
,CWE369_Divide_by_Zero__int_Random_divide_75b,, 8
.,,8 9
BadSink,,9 @
(,,@ A
dataSerialized,,A O
),,Q R
;,,R S
}-- 	
catch.. 
(.. "
SerializationException.. %
exceptSerialize..& 5
)..5 6
{// 	
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 
.00 
LogLevel00 '
.00' (
Warn00( ,
,00, -
$str00. X
,00X Y
exceptSerialize00Z i
)00i j
;00j k
}11 	
}22 
public55 

override55 
void55 
Good55 
(55 
)55 
{66 
GoodG2B77 
(77 
)77 
;77 
GoodB2G88 
(88 
)88 
;88 
}99 
private<< 
static<< 
void<< 
GoodG2B<< 
(<<  
)<<  !
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
(@@ 
new@@ 
Random@@ 
(@@ 
)@@ 
)@@ 
.@@ 
Next@@ "
(@@" #
)@@# $
;@@$ %
byteBB 
[BB 
]BB 
dataSerializedBB 
=BB 
nullBB  $
;BB$ %
tryCC 
{DD 	
BinaryFormatterEE 
bfEE 
=EE  
newEE! $
BinaryFormatterEE% 4
(EE4 5
)EE5 6
;EE6 7
usingFF 
(FF 
varFF 
msFF 
=FF 
newFF 
MemoryStreamFF  ,
(FF, -
)FF- .
)FF. /
{GG 
bfHH 
.HH 
	SerializeHH 
(HH 
msHH 
,HH  
dataHH! %
)HH% &
;HH& '
dataSerializedII 
=II  
msII! #
.II# $
ToArrayII$ +
(II+ ,
)II, -
;II- .
}JJ 8
,CWE369_Divide_by_Zero__int_Random_divide_75bKK 8
.KK8 9
GoodG2BSinkKK9 D
(KKD E
dataSerializedKKE S
)KKU V
;KKV W
}LL 	
catchMM 
(MM "
SerializationExceptionMM %
exceptSerializeMM& 5
)MM5 6
{NN 	
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO 
.OO 
LogLevelOO '
.OO' (
WarnOO( ,
,OO, -
$strOO. X
,OOX Y
exceptSerializeOOZ i
)OOi j
;OOj k
}PP 	
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
intVV 
dataVV 
;VV 
dataXX 
=XX 
(XX 
newXX 
RandomXX 
(XX 
)XX 
)XX 
.XX 
NextXX "
(XX" #
)XX# $
;XX$ %
byteZZ 
[ZZ 
]ZZ 
dataSerializedZZ 
=ZZ 
nullZZ  $
;ZZ$ %
try[[ 
{\\ 	
BinaryFormatter]] 
bf]] 
=]]  
new]]! $
BinaryFormatter]]% 4
(]]4 5
)]]5 6
;]]6 7
using^^ 
(^^ 
var^^ 
ms^^ 
=^^ 
new^^ 
MemoryStream^^  ,
(^^, -
)^^- .
)^^. /
{__ 
bf`` 
.`` 
	Serialize`` 
(`` 
ms`` 
,``  
data``! %
)``% &
;``& '
dataSerializedaa 
=aa  
msaa! #
.aa# $
ToArrayaa$ +
(aa+ ,
)aa, -
;aa- .
}bb 8
,CWE369_Divide_by_Zero__int_Random_divide_75bcc 8
.cc8 9
GoodB2GSinkcc9 D
(ccD E
dataSerializedccE S
)ccU V
;ccV W
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. X
,ggX Y
exceptSerializeggZ i
)ggi j
;ggj k
}hh 	
}ii 
}kk 
}ll ƒ5
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_75b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_75b 2
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
int## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
int)) 
))) 
binForm)) #
.))# $
Deserialize))$ /
())/ 0
	memStream))0 9
)))9 :
;)): ;
}** 
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
catch// 
(// "
SerializationException// %
exceptSerialize//& 5
)//5 6
{00 	
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 
.11 
LogLevel11 '
.11' (
Warn11( ,
,11, -
$str11. Y
,11Y Z
exceptSerialize11[ j
)11j k
;11k l
}22 	
}33 
public88 

static88 
void88 
GoodG2BSink88 "
(88" #
byte88# '
[88' (
]88( )
dataSerialized88* 8
)889 :
{99 
try:: 
{;; 	
int<< 
data<< 
;<< 
var== 
binForm== 
=== 
new== 
BinaryFormatter== -
(==- .
)==. /
;==/ 0
using>> 
(>> 
var>> 
	memStream>>  
=>>! "
new>># &
MemoryStream>>' 3
(>>3 4
)>>4 5
)>>5 6
{?? 
	memStream@@ 
.@@ 
Write@@ 
(@@  
dataSerialized@@  .
,@@. /
$num@@0 1
,@@1 2
dataSerialized@@3 A
.@@A B
Length@@B H
)@@H I
;@@I J
	memStreamAA 
.AA 
SeekAA 
(AA 
$numAA  
,AA  !

SeekOriginAA" ,
.AA, -
BeginAA- 2
)AA2 3
;AA3 4
dataBB 
=BB 
(BB 
intBB 
)BB 
binFormBB #
.BB# $
DeserializeBB$ /
(BB/ 0
	memStreamBB0 9
)BB9 :
;BB: ;
}CC 
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
catchHH 
(HH "
SerializationExceptionHH %
exceptSerializeHH& 5
)HH5 6
{II 	
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ 
.JJ 
LogLevelJJ '
.JJ' (
WarnJJ( ,
,JJ, -
$strJJ. Y
,JJY Z
exceptSerializeJJ[ j
)JJj k
;JJk l
}KK 	
}LL 
publicOO 

staticOO 
voidOO 
GoodB2GSinkOO "
(OO" #
byteOO# '
[OO' (
]OO( )
dataSerializedOO* 8
)OO9 :
{PP 
tryQQ 
{RR 	
intSS 
dataSS 
;SS 
varTT 
binFormTT 
=TT 
newTT 
BinaryFormatterTT -
(TT- .
)TT. /
;TT/ 0
usingUU 
(UU 
varUU 
	memStreamUU  
=UU! "
newUU# &
MemoryStreamUU' 3
(UU3 4
)UU4 5
)UU5 6
{VV 
	memStreamWW 
.WW 
WriteWW 
(WW  
dataSerializedWW  .
,WW. /
$numWW0 1
,WW1 2
dataSerializedWW3 A
.WWA B
LengthWWB H
)WWH I
;WWI J
	memStreamXX 
.XX 
SeekXX 
(XX 
$numXX  
,XX  !

SeekOriginXX" ,
.XX, -
BeginXX- 2
)XX2 3
;XX3 4
dataYY 
=YY 
(YY 
intYY 
)YY 
binFormYY #
.YY# $
DeserializeYY$ /
(YY/ 0
	memStreamYY0 9
)YY9 :
;YY: ;
}ZZ 
if\\ 
(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ #
+^^$ %
data^^& *
+^^+ ,
$str^^- 2
+^^3 4
(^^5 6
$num^^6 9
/^^: ;
data^^< @
)^^@ A
+^^B C
$str^^D H
)^^H I
;^^I J
}__ 
else`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb D
)bbD E
;bbE F
}cc 
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. Y
,ggY Z
exceptSerializegg[ j
)ggj k
;ggk l
}hh 	
}ii 
}kk 
}ll …
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_81a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_divide_81a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %<
0CWE369_Divide_by_Zero__int_Random_divide_81_base 8

baseObject9 C
=D E
newF I;
/CWE369_Divide_by_Zero__int_Random_divide_81_badJ y
(y z
)z {
;{ |

baseObject   
.   
Action   
(   
data   
)    
;    !
}!! 
public$$ 

override$$ 
void$$ 
Good$$ 
($$ 
)$$ 
{%% 
GoodG2B&& 
(&& 
)&& 
;&& 
GoodB2G'' 
('' 
)'' 
;'' 
}(( 
private++ 
void++ 
GoodG2B++ 
(++ 
)++ 
{,, 
int-- 
data-- 
;-- 
data// 
=// 
$num// 
;// <
0CWE369_Divide_by_Zero__int_Random_divide_81_base00 8

baseObject009 C
=00D E
new00F I?
3CWE369_Divide_by_Zero__int_Random_divide_81_goodG2B00J }
(00} ~
)00~ 
;	00 Ä

baseObject11 
.11 
Action11 
(11 
data11 
)11  
;11  !
}22 
private55 
void55 
GoodB2G55 
(55 
)55 
{66 
int77 
data77 
;77 
data99 
=99 
(99 
new99 
Random99 
(99 
)99 
)99 
.99 
Next99 "
(99" #
)99# $
;99$ %<
0CWE369_Divide_by_Zero__int_Random_divide_81_base:: 8

baseObject::9 C
=::D E
new::F I?
3CWE369_Divide_by_Zero__int_Random_divide_81_goodB2G::J }
(::} ~
)::~ 
;	:: Ä

baseObject;; 
.;; 
Action;; 
(;; 
data;; 
);;  
;;;  !
}<< 
}>> 
}?? ø
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_81_bad.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ;
/CWE369_Divide_by_Zero__int_Random_divide_81_bad 5
:6 7<
0CWE369_Divide_by_Zero__int_Random_divide_81_base8 h
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
}"" 
}## √
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_81_base.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
abstract 
class	 <
0CWE369_Divide_by_Zero__int_Random_divide_81_base ?
{ 
public 

abstract 
void 
Action 
(  
int  #
data$ (
)) *
;* +
} 
} Ï	
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_81_goodB2G.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Random_divide_81_goodB2G 9
:: ;<
0CWE369_Divide_by_Zero__int_Random_divide_81_base< l
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
if   

(   
data   
!=   
$num   
)   
{!! 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
/""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
IO&& 
.&& 
	WriteLine&& 
(&& 
$str&& @
)&&@ A
;&&A B
}'' 	
}(( 
})) 
}** «
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_divide_81_goodG2B.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Random_divide_81_goodG2B 9
:: ;<
0CWE369_Divide_by_Zero__int_Random_divide_81_base< l
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
}## 
}$$ ¸
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_01.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_01 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data   
=   
(   
new   
Random   
(   
)   
)   
.   
Next   "
(  " #
)  # $
;  $ %
IO## 

.##
 
	WriteLine## 
(## 
$str## 
+## 
data## "
+### $
$str##% *
+##+ ,
(##- .
$num##. 1
%##2 3
data##4 8
)##8 9
+##: ;
$str##< @
)##@ A
;##A B
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
)'' 
{(( 
GoodG2B)) 
()) 
))) 
;)) 
GoodB2G** 
(** 
)** 
;** 
}++ 
private.. 
void.. 
GoodG2B.. 
(.. 
).. 
{// 
int00 
data00 
;00 
data22 
=22 
$num22 
;22 
IO55 

.55
 
	WriteLine55 
(55 
$str55 
+55 
data55 "
+55# $
$str55% *
+55+ ,
(55- .
$num55. 1
%552 3
data554 8
)558 9
+55: ;
$str55< @
)55@ A
;55A B
}66 
private99 
void99 
GoodB2G99 
(99 
)99 
{:: 
int;; 
data;; 
;;; 
data== 
=== 
(== 
new== 
Random== 
(== 
)== 
)== 
.== 
Next== "
(==" #
)==# $
;==$ %
if?? 

(?? 
data?? 
!=?? 
$num?? 
)?? 
{@@ 	
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA 
+AA  !
dataAA" &
+AA' (
$strAA) .
+AA/ 0
(AA1 2
$numAA2 5
%AA6 7
dataAA8 <
)AA< =
+AA> ?
$strAA@ D
)AAD E
;AAE F
}BB 	
elseCC 
{DD 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE @
)EE@ A
;EEA B
}FF 	
}GG 
}II 
}JJ Ê2
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_02.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_02 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
true 
) 
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
true** 
)** 
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. 
+..  !
data.." &
+..' (
$str..) .
+../ 0
(..1 2
$num..2 5
%..6 7
data..8 <
)..< =
+..> ?
$str..@ D
)..D E
;..E F
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
false77 
)77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
trueBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
trueNN 
)NN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
trueYY 
)YY 
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] 
+]]  !
data]]" &
+]]' (
$str]]) .
+]]/ 0
(]]1 2
$num]]2 5
%]]6 7
data]]8 <
)]]< =
+]]> ?
$str]]@ D
)]]D E
;]]E F
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
trueee 
)ee 
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
falsepp 
)pp 
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
%zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
true
áá 
)
áá 
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
true
íí 
)
íí 
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
%
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ¿5
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_03.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_03 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
$num 
== 
$num 
) 
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
$num** 
==** 
$num** 
)** 
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. 
+..  !
data.." &
+..' (
$str..) .
+../ 0
(..1 2
$num..2 5
%..6 7
data..8 <
)..< =
+..> ?
$str..@ D
)..D E
;..E F
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
$num77 
!=77 
$num77 
)77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
$numBB 
==BB 
$numBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
$numNN 
==NN 
$numNN 
)NN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
$numYY 
==YY 
$numYY 
)YY 
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] 
+]]  !
data]]" &
+]]' (
$str]]) .
+]]/ 0
(]]1 2
$num]]2 5
%]]6 7
data]]8 <
)]]< =
+]]> ?
$str]]@ D
)]]D E
;]]E F
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
$numee 
==ee 
$numee 
)ee 
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
$numpp 
!=pp 
$numpp 
)pp 
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
%zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
$num
áá 
==
áá 
$num
áá 
)
áá 
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
$num
íí 
==
íí 
$num
íí 
)
íí 
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
%
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ∆6
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_04.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_04 1
:2 3
AbstractTestCase4 D
{ 
private   
const   
bool   
PRIVATE_CONST_TRUE   )
=  * +
true  , 0
;  0 1
private!! 
const!! 
bool!! 
PRIVATE_CONST_FALSE!! *
=!!+ ,
false!!- 2
;!!2 3
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
;%% 
if&& 

(&& 
PRIVATE_CONST_TRUE&& 
)&& 
{'' 	
data)) 
=)) 
()) 
new)) 
Random)) 
()) 
)))  
)))  !
.))! "
Next))" &
())& '
)))' (
;))( )
}** 	
else++ 
{,, 	
data// 
=// 
$num// 
;// 
}00 	
if11 

(11 
PRIVATE_CONST_TRUE11 
)11 
{22 	
IO55 
.55 
	WriteLine55 
(55 
$str55 
+55  !
data55" &
+55' (
$str55) .
+55/ 0
(551 2
$num552 5
%556 7
data558 <
)55< =
+55> ?
$str55@ D
)55D E
;55E F
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
);; 
{<< 
int== 
data== 
;== 
if>> 

(>> 
PRIVATE_CONST_FALSE>> 
)>>  
{?? 	
dataBB 
=BB 
$numBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
ifII 

(II 
PRIVATE_CONST_TRUEII 
)II 
{JJ 	
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM 
+MM  !
dataMM" &
+MM' (
$strMM) .
+MM/ 0
(MM1 2
$numMM2 5
%MM6 7
dataMM8 <
)MM< =
+MM> ?
$strMM@ D
)MMD E
;MME F
}NN 	
}OO 
privateRR 
voidRR 
GoodG2B2RR 
(RR 
)RR 
{SS 
intTT 
dataTT 
;TT 
ifUU 

(UU 
PRIVATE_CONST_TRUEUU 
)UU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
elseZZ 
{[[ 	
data^^ 
=^^ 
$num^^ 
;^^ 
}__ 	
if`` 

(`` 
PRIVATE_CONST_TRUE`` 
)`` 
{aa 	
IOdd 
.dd 
	WriteLinedd 
(dd 
$strdd 
+dd  !
datadd" &
+dd' (
$strdd) .
+dd/ 0
(dd1 2
$numdd2 5
%dd6 7
datadd8 <
)dd< =
+dd> ?
$strdd@ D
)ddD E
;ddE F
}ee 	
}ff 
privateii 
voidii 
GoodB2G1ii 
(ii 
)ii 
{jj 
intkk 
datakk 
;kk 
ifll 

(ll 
PRIVATE_CONST_TRUEll 
)ll 
{mm 	
dataoo 
=oo 
(oo 
newoo 
Randomoo 
(oo 
)oo  
)oo  !
.oo! "
Nextoo" &
(oo& '
)oo' (
;oo( )
}pp 	
elseqq 
{rr 	
datauu 
=uu 
$numuu 
;uu 
}vv 	
ifww 

(ww 
PRIVATE_CONST_FALSEww 
)ww  
{xx 	
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz /
)zz/ 0
;zz0 1
}{{ 	
else|| 
{}} 	
if 
( 
data 
!= 
$num 
) 
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
	WriteLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ #
+
ÅÅ$ %
data
ÅÅ& *
+
ÅÅ+ ,
$str
ÅÅ- 2
+
ÅÅ3 4
(
ÅÅ5 6
$num
ÅÅ6 9
%
ÅÅ: ;
data
ÅÅ< @
)
ÅÅ@ A
+
ÅÅB C
$str
ÅÅD H
)
ÅÅH I
;
ÅÅI J
}
ÇÇ 
else
ÉÉ 
{
ÑÑ 
IO
ÖÖ 
.
ÖÖ 
	WriteLine
ÖÖ 
(
ÖÖ 
$str
ÖÖ D
)
ÖÖD E
;
ÖÖE F
}
ÜÜ 
}
áá 	
}
àà 
private
ãã 
void
ãã 
GoodB2G2
ãã 
(
ãã 
)
ãã 
{
åå 
int
çç 
data
çç 
;
çç 
if
éé 

(
éé  
PRIVATE_CONST_TRUE
éé 
)
éé 
{
èè 	
data
ëë 
=
ëë 
(
ëë 
new
ëë 
Random
ëë 
(
ëë 
)
ëë  
)
ëë  !
.
ëë! "
Next
ëë" &
(
ëë& '
)
ëë' (
;
ëë( )
}
íí 	
else
ìì 
{
îî 	
data
óó 
=
óó 
$num
óó 
;
óó 
}
òò 	
if
ôô 

(
ôô  
PRIVATE_CONST_TRUE
ôô 
)
ôô 
{
öö 	
if
úú 
(
úú 
data
úú 
!=
úú 
$num
úú 
)
úú 
{
ùù 
IO
ûû 
.
ûû 
	WriteLine
ûû 
(
ûû 
$str
ûû #
+
ûû$ %
data
ûû& *
+
ûû+ ,
$str
ûû- 2
+
ûû3 4
(
ûû5 6
$num
ûû6 9
%
ûû: ;
data
ûû< @
)
ûû@ A
+
ûûB C
$str
ûûD H
)
ûûH I
;
ûûI J
}
üü 
else
†† 
{
°° 
IO
¢¢ 
.
¢¢ 
	WriteLine
¢¢ 
(
¢¢ 
$str
¢¢ D
)
¢¢D E
;
¢¢E F
}
££ 
}
§§ 	
}
•• 
public
ßß 

override
ßß 
void
ßß 
Good
ßß 
(
ßß 
)
ßß 
{
®® 
GoodG2B1
©© 
(
©© 
)
©© 
;
©© 
GoodG2B2
™™ 
(
™™ 
)
™™ 
;
™™ 
GoodB2G1
´´ 
(
´´ 
)
´´ 
;
´´ 
GoodB2G2
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
}
≠≠ 
}ØØ 
}∞∞  5
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_05.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_05 1
:2 3
AbstractTestCase4 D
{ 
private 
bool 
privateTrue 
= 
true #
;# $
private   
bool   
privateFalse   
=   
false    %
;  % &
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
int$$ 
data$$ 
;$$ 
if%% 

(%% 
privateTrue%% 
)%% 
{&& 	
data(( 
=(( 
((( 
new(( 
Random(( 
((( 
)((  
)((  !
.((! "
Next((" &
(((& '
)((' (
;((( )
})) 	
else** 
{++ 	
data.. 
=.. 
$num.. 
;.. 
}// 	
if00 

(00 
privateTrue00 
)00 
{11 	
IO44 
.44 
	WriteLine44 
(44 
$str44 
+44  !
data44" &
+44' (
$str44) .
+44/ 0
(441 2
$num442 5
%446 7
data448 <
)44< =
+44> ?
$str44@ D
)44D E
;44E F
}55 	
}66 
private:: 
void:: 
GoodG2B1:: 
(:: 
):: 
{;; 
int<< 
data<< 
;<< 
if== 

(== 
privateFalse== 
)== 
{>> 	
dataAA 
=AA 
$numAA 
;AA 
}BB 	
elseCC 
{DD 	
dataFF 
=FF 
$numFF 
;FF 
}GG 	
ifHH 

(HH 
privateTrueHH 
)HH 
{II 	
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL 
+LL  !
dataLL" &
+LL' (
$strLL) .
+LL/ 0
(LL1 2
$numLL2 5
%LL6 7
dataLL8 <
)LL< =
+LL> ?
$strLL@ D
)LLD E
;LLE F
}MM 	
}NN 
privateQQ 
voidQQ 
GoodG2B2QQ 
(QQ 
)QQ 
{RR 
intSS 
dataSS 
;SS 
ifTT 

(TT 
privateTrueTT 
)TT 
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
privateTrue__ 
)__ 
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc 
+cc  !
datacc" &
+cc' (
$strcc) .
+cc/ 0
(cc1 2
$numcc2 5
%cc6 7
datacc8 <
)cc< =
+cc> ?
$strcc@ D
)ccD E
;ccE F
}dd 	
}ee 
privatehh 
voidhh 
GoodB2G1hh 
(hh 
)hh 
{ii 
intjj 
datajj 
;jj 
ifkk 

(kk 
privateTruekk 
)kk 
{ll 	
datann 
=nn 
(nn 
newnn 
Randomnn 
(nn 
)nn  
)nn  !
.nn! "
Nextnn" &
(nn& '
)nn' (
;nn( )
}oo 	
elsepp 
{qq 	
datatt 
=tt 
$numtt 
;tt 
}uu 	
ifvv 

(vv 
privateFalsevv 
)vv 
{ww 	
IOyy 
.yy 
	WriteLineyy 
(yy 
$stryy /
)yy/ 0
;yy0 1
}zz 	
else{{ 
{|| 	
if~~ 
(~~ 
data~~ 
!=~~ 
$num~~ 
)~~ 
{ 
IO
ÄÄ 
.
ÄÄ 
	WriteLine
ÄÄ 
(
ÄÄ 
$str
ÄÄ #
+
ÄÄ$ %
data
ÄÄ& *
+
ÄÄ+ ,
$str
ÄÄ- 2
+
ÄÄ3 4
(
ÄÄ5 6
$num
ÄÄ6 9
%
ÄÄ: ;
data
ÄÄ< @
)
ÄÄ@ A
+
ÄÄB C
$str
ÄÄD H
)
ÄÄH I
;
ÄÄI J
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
IO
ÑÑ 
.
ÑÑ 
	WriteLine
ÑÑ 
(
ÑÑ 
$str
ÑÑ D
)
ÑÑD E
;
ÑÑE F
}
ÖÖ 
}
ÜÜ 	
}
áá 
private
ää 
void
ää 
GoodB2G2
ää 
(
ää 
)
ää 
{
ãã 
int
åå 
data
åå 
;
åå 
if
çç 

(
çç 
privateTrue
çç 
)
çç 
{
éé 	
data
êê 
=
êê 
(
êê 
new
êê 
Random
êê 
(
êê 
)
êê  
)
êê  !
.
êê! "
Next
êê" &
(
êê& '
)
êê' (
;
êê( )
}
ëë 	
else
íí 
{
ìì 	
data
ññ 
=
ññ 
$num
ññ 
;
ññ 
}
óó 	
if
òò 

(
òò 
privateTrue
òò 
)
òò 
{
ôô 	
if
õõ 
(
õõ 
data
õõ 
!=
õõ 
$num
õõ 
)
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù #
+
ùù$ %
data
ùù& *
+
ùù+ ,
$str
ùù- 2
+
ùù3 4
(
ùù5 6
$num
ùù6 9
%
ùù: ;
data
ùù< @
)
ùù@ A
+
ùùB C
$str
ùùD H
)
ùùH I
;
ùùI J
}
ûû 
else
üü 
{
†† 
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° D
)
°°D E
;
°°E F
}
¢¢ 
}
££ 	
}
§§ 
public
¶¶ 

override
¶¶ 
void
¶¶ 
Good
¶¶ 
(
¶¶ 
)
¶¶ 
{
ßß 
GoodG2B1
®® 
(
®® 
)
®® 
;
®® 
GoodG2B2
©© 
(
©© 
)
©© 
;
©© 
GoodB2G1
™™ 
(
™™ 
)
™™ 
;
™™ 
GoodB2G2
´´ 
(
´´ 
)
´´ 
;
´´ 
}
¨¨ 
}ÆÆ 
}ØØ Î7
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_06.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_06 1
:2 3
AbstractTestCase4 D
{ 
private 
const 
int 
PRIVATE_CONST_FIVE (
=) *
$num+ ,
;, -
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
int## 
data## 
;## 
if$$ 

($$ 
PRIVATE_CONST_FIVE$$ 
==$$  
$num$$  !
)$$! "
{%% 	
data'' 
='' 
('' 
new'' 
Random'' 
('' 
)''  
)''  !
.''! "
Next''" &
(''& '
)''' (
;''( )
}(( 	
else)) 
{** 	
data-- 
=-- 
$num-- 
;-- 
}.. 	
if// 

(// 
PRIVATE_CONST_FIVE// 
==//  
$num//  !
)//! "
{00 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
}55 
private99 
void99 
GoodG2B199 
(99 
)99 
{:: 
int;; 
data;; 
;;; 
if<< 

(<< 
PRIVATE_CONST_FIVE<< 
!=<<  
$num<<  !
)<<! "
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
elseBB 
{CC 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
ifGG 

(GG 
PRIVATE_CONST_FIVEGG 
==GG  
$numGG  !
)GG! "
{HH 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK 
+KK  !
dataKK" &
+KK' (
$strKK) .
+KK/ 0
(KK1 2
$numKK2 5
%KK6 7
dataKK8 <
)KK< =
+KK> ?
$strKK@ D
)KKD E
;KKE F
}LL 	
}MM 
privatePP 
voidPP 
GoodG2B2PP 
(PP 
)PP 
{QQ 
intRR 
dataRR 
;RR 
ifSS 

(SS 
PRIVATE_CONST_FIVESS 
==SS  
$numSS  !
)SS! "
{TT 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
elseXX 
{YY 	
data\\ 
=\\ 
$num\\ 
;\\ 
}]] 	
if^^ 

(^^ 
PRIVATE_CONST_FIVE^^ 
==^^  
$num^^  !
)^^! "
{__ 	
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb 
+bb  !
databb" &
+bb' (
$strbb) .
+bb/ 0
(bb1 2
$numbb2 5
%bb6 7
databb8 <
)bb< =
+bb> ?
$strbb@ D
)bbD E
;bbE F
}cc 	
}dd 
privategg 
voidgg 
GoodB2G1gg 
(gg 
)gg 
{hh 
intii 
dataii 
;ii 
ifjj 

(jj 
PRIVATE_CONST_FIVEjj 
==jj  
$numjj  !
)jj! "
{kk 	
datamm 
=mm 
(mm 
newmm 
Randommm 
(mm 
)mm  
)mm  !
.mm! "
Nextmm" &
(mm& '
)mm' (
;mm( )
}nn 	
elseoo 
{pp 	
datass 
=ss 
$numss 
;ss 
}tt 	
ifuu 

(uu 
PRIVATE_CONST_FIVEuu 
!=uu  
$numuu  !
)uu! "
{vv 	
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx /
)xx/ 0
;xx0 1
}yy 	
elsezz 
{{{ 	
if}} 
(}} 
data}} 
!=}} 
$num}} 
)}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str #
+$ %
data& *
++ ,
$str- 2
+3 4
(5 6
$num6 9
%: ;
data< @
)@ A
+B C
$strD H
)H I
;I J
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
	WriteLine
ÉÉ 
(
ÉÉ 
$str
ÉÉ D
)
ÉÉD E
;
ÉÉE F
}
ÑÑ 
}
ÖÖ 	
}
ÜÜ 
private
ââ 
void
ââ 
GoodB2G2
ââ 
(
ââ 
)
ââ 
{
ää 
int
ãã 
data
ãã 
;
ãã 
if
åå 

(
åå  
PRIVATE_CONST_FIVE
åå 
==
åå  
$num
åå  !
)
åå! "
{
çç 	
data
èè 
=
èè 
(
èè 
new
èè 
Random
èè 
(
èè 
)
èè  
)
èè  !
.
èè! "
Next
èè" &
(
èè& '
)
èè' (
;
èè( )
}
êê 	
else
ëë 
{
íí 	
data
ïï 
=
ïï 
$num
ïï 
;
ïï 
}
ññ 	
if
óó 

(
óó  
PRIVATE_CONST_FIVE
óó 
==
óó  
$num
óó  !
)
óó! "
{
òò 	
if
öö 
(
öö 
data
öö 
!=
öö 
$num
öö 
)
öö 
{
õõ 
IO
úú 
.
úú 
	WriteLine
úú 
(
úú 
$str
úú #
+
úú$ %
data
úú& *
+
úú+ ,
$str
úú- 2
+
úú3 4
(
úú5 6
$num
úú6 9
%
úú: ;
data
úú< @
)
úú@ A
+
úúB C
$str
úúD H
)
úúH I
;
úúI J
}
ùù 
else
ûû 
{
üü 
IO
†† 
.
†† 
	WriteLine
†† 
(
†† 
$str
†† D
)
††D E
;
††E F
}
°° 
}
¢¢ 	
}
££ 
public
•• 

override
•• 
void
•• 
Good
•• 
(
•• 
)
•• 
{
¶¶ 
GoodG2B1
ßß 
(
ßß 
)
ßß 
;
ßß 
GoodG2B2
®® 
(
®® 
)
®® 
;
®® 
GoodB2G1
©© 
(
©© 
)
©© 
;
©© 
GoodB2G2
™™ 
(
™™ 
)
™™ 
;
™™ 
}
´´ 
}≠≠ 
}ÆÆ ã7
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_07.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_07 1
:2 3
AbstractTestCase4 D
{ 
private 
int 
privateFive 
= 
$num 
;  
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
int## 
data## 
;## 
if$$ 

($$ 
privateFive$$ 
==$$ 
$num$$ 
)$$ 
{%% 	
data'' 
='' 
('' 
new'' 
Random'' 
('' 
)''  
)''  !
.''! "
Next''" &
(''& '
)''' (
;''( )
}(( 	
else)) 
{** 	
data-- 
=-- 
$num-- 
;-- 
}.. 	
if// 

(// 
privateFive// 
==// 
$num// 
)// 
{00 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
}55 
private99 
void99 
GoodG2B199 
(99 
)99 
{:: 
int;; 
data;; 
;;; 
if<< 

(<< 
privateFive<< 
!=<< 
$num<< 
)<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
elseBB 
{CC 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
ifGG 

(GG 
privateFiveGG 
==GG 
$numGG 
)GG 
{HH 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK 
+KK  !
dataKK" &
+KK' (
$strKK) .
+KK/ 0
(KK1 2
$numKK2 5
%KK6 7
dataKK8 <
)KK< =
+KK> ?
$strKK@ D
)KKD E
;KKE F
}LL 	
}MM 
privatePP 
voidPP 
GoodG2B2PP 
(PP 
)PP 
{QQ 
intRR 
dataRR 
;RR 
ifSS 

(SS 
privateFiveSS 
==SS 
$numSS 
)SS 
{TT 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
elseXX 
{YY 	
data\\ 
=\\ 
$num\\ 
;\\ 
}]] 	
if^^ 

(^^ 
privateFive^^ 
==^^ 
$num^^ 
)^^ 
{__ 	
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb 
+bb  !
databb" &
+bb' (
$strbb) .
+bb/ 0
(bb1 2
$numbb2 5
%bb6 7
databb8 <
)bb< =
+bb> ?
$strbb@ D
)bbD E
;bbE F
}cc 	
}dd 
privategg 
voidgg 
GoodB2G1gg 
(gg 
)gg 
{hh 
intii 
dataii 
;ii 
ifjj 

(jj 
privateFivejj 
==jj 
$numjj 
)jj 
{kk 	
datamm 
=mm 
(mm 
newmm 
Randommm 
(mm 
)mm  
)mm  !
.mm! "
Nextmm" &
(mm& '
)mm' (
;mm( )
}nn 	
elseoo 
{pp 	
datass 
=ss 
$numss 
;ss 
}tt 	
ifuu 

(uu 
privateFiveuu 
!=uu 
$numuu 
)uu 
{vv 	
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx /
)xx/ 0
;xx0 1
}yy 	
elsezz 
{{{ 	
if}} 
(}} 
data}} 
!=}} 
$num}} 
)}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str #
+$ %
data& *
++ ,
$str- 2
+3 4
(5 6
$num6 9
%: ;
data< @
)@ A
+B C
$strD H
)H I
;I J
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
	WriteLine
ÉÉ 
(
ÉÉ 
$str
ÉÉ D
)
ÉÉD E
;
ÉÉE F
}
ÑÑ 
}
ÖÖ 	
}
ÜÜ 
private
ââ 
void
ââ 
GoodB2G2
ââ 
(
ââ 
)
ââ 
{
ää 
int
ãã 
data
ãã 
;
ãã 
if
åå 

(
åå 
privateFive
åå 
==
åå 
$num
åå 
)
åå 
{
çç 	
data
èè 
=
èè 
(
èè 
new
èè 
Random
èè 
(
èè 
)
èè  
)
èè  !
.
èè! "
Next
èè" &
(
èè& '
)
èè' (
;
èè( )
}
êê 	
else
ëë 
{
íí 	
data
ïï 
=
ïï 
$num
ïï 
;
ïï 
}
ññ 	
if
óó 

(
óó 
privateFive
óó 
==
óó 
$num
óó 
)
óó 
{
òò 	
if
öö 
(
öö 
data
öö 
!=
öö 
$num
öö 
)
öö 
{
õõ 
IO
úú 
.
úú 
	WriteLine
úú 
(
úú 
$str
úú #
+
úú$ %
data
úú& *
+
úú+ ,
$str
úú- 2
+
úú3 4
(
úú5 6
$num
úú6 9
%
úú: ;
data
úú< @
)
úú@ A
+
úúB C
$str
úúD H
)
úúH I
;
úúI J
}
ùù 
else
ûû 
{
üü 
IO
†† 
.
†† 
	WriteLine
†† 
(
†† 
$str
†† D
)
††D E
;
††E F
}
°° 
}
¢¢ 	
}
££ 
public
•• 

override
•• 
void
•• 
Good
•• 
(
•• 
)
•• 
{
¶¶ 
GoodG2B1
ßß 
(
ßß 
)
ßß 
;
ßß 
GoodG2B2
®® 
(
®® 
)
®® 
;
®® 
GoodB2G1
©© 
(
©© 
)
©© 
;
©© 
GoodB2G2
™™ 
(
™™ 
)
™™ 
;
™™ 
}
´´ 
}≠≠ 
}ÆÆ û:
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_08.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_08 1
:2 3
AbstractTestCase4 D
{ 
private 
static 
bool 
PrivateReturnsTrue *
(* +
)+ ,
{   
return!! 
true!! 
;!! 
}"" 
private$$ 
static$$ 
bool$$ 
PrivateReturnsFalse$$ +
($$+ ,
)$$, -
{%% 
return&& 
false&& 
;&& 
}'' 
public)) 

override)) 
void)) 
Bad)) 
()) 
))) 
{** 
int++ 
data++ 
;++ 
if,, 

(,, 
PrivateReturnsTrue,, 
(,, 
),,  
),,  !
{-- 	
data// 
=// 
(// 
new// 
Random// 
(// 
)//  
)//  !
.//! "
Next//" &
(//& '
)//' (
;//( )
}00 	
else11 
{22 	
data55 
=55 
$num55 
;55 
}66 	
if77 

(77 
PrivateReturnsTrue77 
(77 
)77  
)77  !
{88 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; 
+;;  !
data;;" &
+;;' (
$str;;) .
+;;/ 0
(;;1 2
$num;;2 5
%;;6 7
data;;8 <
);;< =
+;;> ?
$str;;@ D
);;D E
;;;E F
}<< 	
}== 
privateAA 
voidAA 
GoodG2B1AA 
(AA 
)AA 
{BB 
intCC 
dataCC 
;CC 
ifDD 

(DD 
PrivateReturnsFalseDD 
(DD  
)DD  !
)DD! "
{EE 	
dataHH 
=HH 
$numHH 
;HH 
}II 	
elseJJ 
{KK 	
dataMM 
=MM 
$numMM 
;MM 
}NN 	
ifOO 

(OO 
PrivateReturnsTrueOO 
(OO 
)OO  
)OO  !
{PP 	
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS 
+SS  !
dataSS" &
+SS' (
$strSS) .
+SS/ 0
(SS1 2
$numSS2 5
%SS6 7
dataSS8 <
)SS< =
+SS> ?
$strSS@ D
)SSD E
;SSE F
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
)XX 
{YY 
intZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
PrivateReturnsTrue[[ 
([[ 
)[[  
)[[  !
{\\ 	
data^^ 
=^^ 
$num^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
$numdd 
;dd 
}ee 	
ifff 

(ff 
PrivateReturnsTrueff 
(ff 
)ff  
)ff  !
{gg 	
IOjj 
.jj 
	WriteLinejj 
(jj 
$strjj 
+jj  !
datajj" &
+jj' (
$strjj) .
+jj/ 0
(jj1 2
$numjj2 5
%jj6 7
datajj8 <
)jj< =
+jj> ?
$strjj@ D
)jjD E
;jjE F
}kk 	
}ll 
privateoo 
voidoo 
GoodB2G1oo 
(oo 
)oo 
{pp 
intqq 
dataqq 
;qq 
ifrr 

(rr 
PrivateReturnsTruerr 
(rr 
)rr  
)rr  !
{ss 	
datauu 
=uu 
(uu 
newuu 
Randomuu 
(uu 
)uu  
)uu  !
.uu! "
Nextuu" &
(uu& '
)uu' (
;uu( )
}vv 	
elseww 
{xx 	
data{{ 
={{ 
$num{{ 
;{{ 
}|| 	
if}} 

(}} 
PrivateReturnsFalse}} 
(}}  
)}}  !
)}}! "
{~~ 	
IO
ÄÄ 
.
ÄÄ 
	WriteLine
ÄÄ 
(
ÄÄ 
$str
ÄÄ /
)
ÄÄ/ 0
;
ÄÄ0 1
}
ÅÅ 	
else
ÇÇ 
{
ÉÉ 	
if
ÖÖ 
(
ÖÖ 
data
ÖÖ 
!=
ÖÖ 
$num
ÖÖ 
)
ÖÖ 
{
ÜÜ 
IO
áá 
.
áá 
	WriteLine
áá 
(
áá 
$str
áá #
+
áá$ %
data
áá& *
+
áá+ ,
$str
áá- 2
+
áá3 4
(
áá5 6
$num
áá6 9
%
áá: ;
data
áá< @
)
áá@ A
+
ááB C
$str
ááD H
)
ááH I
;
ááI J
}
àà 
else
ââ 
{
ää 
IO
ãã 
.
ãã 
	WriteLine
ãã 
(
ãã 
$str
ãã D
)
ããD E
;
ããE F
}
åå 
}
çç 	
}
éé 
private
ëë 
void
ëë 
GoodB2G2
ëë 
(
ëë 
)
ëë 
{
íí 
int
ìì 
data
ìì 
;
ìì 
if
îî 

(
îî  
PrivateReturnsTrue
îî 
(
îî 
)
îî  
)
îî  !
{
ïï 	
data
óó 
=
óó 
(
óó 
new
óó 
Random
óó 
(
óó 
)
óó  
)
óó  !
.
óó! "
Next
óó" &
(
óó& '
)
óó' (
;
óó( )
}
òò 	
else
ôô 
{
öö 	
data
ùù 
=
ùù 
$num
ùù 
;
ùù 
}
ûû 	
if
üü 

(
üü  
PrivateReturnsTrue
üü 
(
üü 
)
üü  
)
üü  !
{
†† 	
if
¢¢ 
(
¢¢ 
data
¢¢ 
!=
¢¢ 
$num
¢¢ 
)
¢¢ 
{
££ 
IO
§§ 
.
§§ 
	WriteLine
§§ 
(
§§ 
$str
§§ #
+
§§$ %
data
§§& *
+
§§+ ,
$str
§§- 2
+
§§3 4
(
§§5 6
$num
§§6 9
%
§§: ;
data
§§< @
)
§§@ A
+
§§B C
$str
§§D H
)
§§H I
;
§§I J
}
•• 
else
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® D
)
®®D E
;
®®E F
}
©© 
}
™™ 	
}
´´ 
public
≠≠ 

override
≠≠ 
void
≠≠ 
Good
≠≠ 
(
≠≠ 
)
≠≠ 
{
ÆÆ 
GoodG2B1
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
GoodG2B2
∞∞ 
(
∞∞ 
)
∞∞ 
;
∞∞ 
GoodB2G1
±± 
(
±± 
)
±± 
;
±± 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
;
≤≤ 
}
≥≥ 
}µµ 
}∂∂ ƒ6
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_09.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_09 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_TRUE #
)# $
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.**  
STATIC_READONLY_TRUE** #
)**# $
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. 
+..  !
data.." &
+..' (
$str..) .
+../ 0
(..1 2
$num..2 5
%..6 7
data..8 <
)..< =
+..> ?
$str..@ D
)..D E
;..E F
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
IO77 
.77 !
STATIC_READONLY_FALSE77 $
)77$ %
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB  
STATIC_READONLY_TRUEBB #
)BB# $
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN  
STATIC_READONLY_TRUENN #
)NN# $
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY  
STATIC_READONLY_TRUEYY #
)YY# $
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] 
+]]  !
data]]" &
+]]' (
$str]]) .
+]]/ 0
(]]1 2
$num]]2 5
%]]6 7
data]]8 <
)]]< =
+]]> ?
$str]]@ D
)]]D E
;]]E F
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee  
STATIC_READONLY_TRUEee #
)ee# $
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp !
STATIC_READONLY_FALSEpp $
)pp$ %
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
%zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
IO
áá 
.
áá "
STATIC_READONLY_TRUE
áá #
)
áá# $
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
IO
íí 
.
íí "
STATIC_READONLY_TRUE
íí #
)
íí# $
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
%
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ‡5
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_10.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_10 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
. 

staticTrue 
) 
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.** 

staticTrue** 
)** 
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. 
+..  !
data.." &
+..' (
$str..) .
+../ 0
(..1 2
$num..2 5
%..6 7
data..8 <
)..< =
+..> ?
$str..@ D
)..D E
;..E F
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
IO77 
.77 
staticFalse77 
)77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB 

staticTrueBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN 

staticTrueNN 
)NN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY 

staticTrueYY 
)YY 
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] 
+]]  !
data]]" &
+]]' (
$str]]) .
+]]/ 0
(]]1 2
$num]]2 5
%]]6 7
data]]8 <
)]]< =
+]]> ?
$str]]@ D
)]]D E
;]]E F
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee 

staticTrueee 
)ee 
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp 
staticFalsepp 
)pp 
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
%zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
IO
áá 
.
áá 

staticTrue
áá 
)
áá 
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
IO
íí 
.
íí 

staticTrue
íí 
)
íí 
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
%
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ⁄8
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_11.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_11 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
. 
StaticReturnsTrue  
(  !
)! "
)" #
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(**
 
IO** 
.** 
StaticReturnsTrue** 
(**  
)**  !
)**! "
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. 
+..  !
data.." &
+..' (
$str..) .
+../ 0
(..1 2
$num..2 5
%..6 7
data..8 <
)..< =
+..> ?
$str..@ D
)..D E
;..E F
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
IO77 
.77 
StaticReturnsFalse77 !
(77! "
)77" #
)77# $
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB 
StaticReturnsTrueBB  
(BB  !
)BB! "
)BB" #
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN 
StaticReturnsTrueNN  
(NN  !
)NN! "
)NN" #
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY 
StaticReturnsTrueYY  
(YY  !
)YY! "
)YY" #
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] 
+]]  !
data]]" &
+]]' (
$str]]) .
+]]/ 0
(]]1 2
$num]]2 5
%]]6 7
data]]8 <
)]]< =
+]]> ?
$str]]@ D
)]]D E
;]]E F
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee 
StaticReturnsTrueee  
(ee  !
)ee! "
)ee" #
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp 
StaticReturnsFalsepp !
(pp! "
)pp" #
)pp# $
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
%zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
IO
áá 
.
áá 
StaticReturnsTrue
áá  
(
áá  !
)
áá! "
)
áá" #
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
IO
íí 
.
íí 
StaticReturnsTrue
íí  
(
íí  !
)
íí! "
)
íí" #
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
%
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ¶0
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_12.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_12 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

(
 
IO 
. $
StaticReturnsTrueOrFalse &
(& '
)' (
)( )
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

())
 
IO)) 
.)) $
StaticReturnsTrueOrFalse)) &
())& '
)))' (
)))( )
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
else// 
{00 	
if22 
(22 
data22 
!=22 
$num22 
)22 
{33 
IO44 
.44 
	WriteLine44 
(44 
$str44 #
+44$ %
data44& *
+44+ ,
$str44- 2
+443 4
(445 6
$num446 9
%44: ;
data44< @
)44@ A
+44B C
$str44D H
)44H I
;44I J
}55 
else66 
{77 
IO88 
.88 
	WriteLine88 
(88 
$str88 D
)88D E
;88E F
}99 
}:: 	
};; 
private@@ 
void@@ 
GoodG2B@@ 
(@@ 
)@@ 
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC
 
IOCC 
.CC $
StaticReturnsTrueOrFalseCC &
(CC& '
)CC' (
)CC( )
{DD 	
dataFF 
=FF 
$numFF 
;FF 
}GG 	
elseHH 
{II 	
dataKK 
=KK 
$numKK 
;KK 
}LL 	
ifMM 

(MM
 
IOMM 
.MM $
StaticReturnsTrueOrFalseMM &
(MM& '
)MM' (
)MM( )
{NN 	
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ 
+QQ  !
dataQQ" &
+QQ' (
$strQQ) .
+QQ/ 0
(QQ1 2
$numQQ2 5
%QQ6 7
dataQQ8 <
)QQ< =
+QQ> ?
$strQQ@ D
)QQD E
;QQE F
}RR 	
elseSS 
{TT 	
IOWW 
.WW 
	WriteLineWW 
(WW 
$strWW 
+WW  !
dataWW" &
+WW' (
$strWW) .
+WW/ 0
(WW1 2
$numWW2 5
%WW6 7
dataWW8 <
)WW< =
+WW> ?
$strWW@ D
)WWD E
;WWE F
}XX 	
}YY 
private]] 
void]] 
GoodB2G]] 
(]] 
)]] 
{^^ 
int__ 
data__ 
;__ 
if`` 

(``
 
IO`` 
.`` $
StaticReturnsTrueOrFalse`` &
(``& '
)``' (
)``( )
{aa 	
datacc 
=cc 
(cc 
newcc 
Randomcc 
(cc 
)cc  
)cc  !
.cc! "
Nextcc" &
(cc& '
)cc' (
;cc( )
}dd 	
elseee 
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
ifjj 

(jj
 
IOjj 
.jj $
StaticReturnsTrueOrFalsejj &
(jj& '
)jj' (
)jj( )
{kk 	
ifmm 
(mm 
datamm 
!=mm 
$nummm 
)mm 
{nn 
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo #
+oo$ %
dataoo& *
+oo+ ,
$stroo- 2
+oo3 4
(oo5 6
$numoo6 9
%oo: ;
dataoo< @
)oo@ A
+ooB C
$strooD H
)ooH I
;ooI J
}pp 
elseqq 
{rr 
IOss 
.ss 
	WriteLiness 
(ss 
$strss D
)ssD E
;ssE F
}tt 
}uu 	
elsevv 
{ww 	
ifyy 
(yy 
datayy 
!=yy 
$numyy 
)yy 
{zz 
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ #
+{{$ %
data{{& *
+{{+ ,
$str{{- 2
+{{3 4
({{5 6
$num{{6 9
%{{: ;
data{{< @
){{@ A
+{{B C
$str{{D H
){{H I
;{{I J
}|| 
else}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str D
)D E
;E F
}
ÄÄ 
}
ÅÅ 	
}
ÇÇ 
public
ÑÑ 

override
ÑÑ 
void
ÑÑ 
Good
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÜÜ 
GoodG2B
áá 
(
áá 
)
áá 
;
áá 
GoodB2G
àà 
(
àà 
)
àà 
;
àà 
}
ââ 
}ãã 
}åå û9
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_13.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_13 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_FIVE #
==# %
$num% &
)& '
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.**  
STATIC_READONLY_FIVE** #
==**# %
$num**% &
)**& '
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. 
+..  !
data.." &
+..' (
$str..) .
+../ 0
(..1 2
$num..2 5
%..6 7
data..8 <
)..< =
+..> ?
$str..@ D
)..D E
;..E F
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
IO77 
.77  
STATIC_READONLY_FIVE77 #
!=77# %
$num77% &
)77& '
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB  
STATIC_READONLY_FIVEBB #
==BB# %
$numBB% &
)BB& '
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN  
STATIC_READONLY_FIVENN #
==NN# %
$numNN% &
)NN& '
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY  
STATIC_READONLY_FIVEYY #
==YY# %
$numYY% &
)YY& '
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] 
+]]  !
data]]" &
+]]' (
$str]]) .
+]]/ 0
(]]1 2
$num]]2 5
%]]6 7
data]]8 <
)]]< =
+]]> ?
$str]]@ D
)]]D E
;]]E F
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee  
STATIC_READONLY_FIVEee #
==ee# %
$numee% &
)ee& '
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp  
STATIC_READONLY_FIVEpp #
!=pp# %
$numpp% &
)pp& '
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
%zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
IO
áá 
.
áá "
STATIC_READONLY_FIVE
áá #
==
áá# %
$num
áá% &
)
áá& '
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
IO
íí 
.
íí "
STATIC_READONLY_FIVE
íí #
==
íí# %
$num
íí% &
)
íí& '
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
%
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ∫8
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_14.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_14 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
. 

staticFive 
== 
$num 
) 
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
if** 

(** 
IO** 
.** 

staticFive** 
==** 
$num** 
)** 
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. 
+..  !
data.." &
+..' (
$str..) .
+../ 0
(..1 2
$num..2 5
%..6 7
data..8 <
)..< =
+..> ?
$str..@ D
)..D E
;..E F
}// 	
}00 
private44 
void44 
GoodG2B144 
(44 
)44 
{55 
int66 
data66 
;66 
if77 

(77 
IO77 
.77 

staticFive77 
!=77 
$num77 
)77 
{88 	
data;; 
=;; 
$num;; 
;;; 
}<< 	
else== 
{>> 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB 

staticFiveBB 
==BB 
$numBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateKK 
voidKK 
GoodG2B2KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
ifNN 

(NN 
IONN 
.NN 

staticFiveNN 
==NN 
$numNN 
)NN 
{OO 	
dataQQ 
=QQ 
$numQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
ifYY 

(YY 
IOYY 
.YY 

staticFiveYY 
==YY 
$numYY 
)YY 
{ZZ 	
IO]] 
.]] 
	WriteLine]] 
(]] 
$str]] 
+]]  !
data]]" &
+]]' (
$str]]) .
+]]/ 0
(]]1 2
$num]]2 5
%]]6 7
data]]8 <
)]]< =
+]]> ?
$str]]@ D
)]]D E
;]]E F
}^^ 	
}__ 
privatebb 
voidbb 
GoodB2G1bb 
(bb 
)bb 
{cc 
intdd 
datadd 
;dd 
ifee 

(ee 
IOee 
.ee 

staticFiveee 
==ee 
$numee 
)ee 
{ff 	
datahh 
=hh 
(hh 
newhh 
Randomhh 
(hh 
)hh  
)hh  !
.hh! "
Nexthh" &
(hh& '
)hh' (
;hh( )
}ii 	
elsejj 
{kk 	
datann 
=nn 
$numnn 
;nn 
}oo 	
ifpp 

(pp 
IOpp 
.pp 

staticFivepp 
!=pp 
$numpp 
)pp 
{qq 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
}tt 	
elseuu 
{vv 	
ifxx 
(xx 
dataxx 
!=xx 
$numxx 
)xx 
{yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz #
+zz$ %
datazz& *
+zz+ ,
$strzz- 2
+zz3 4
(zz5 6
$numzz6 9
%zz: ;
datazz< @
)zz@ A
+zzB C
$strzzD H
)zzH I
;zzI J
}{{ 
else|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ D
)~~D E
;~~E F
} 
}
ÄÄ 	
}
ÅÅ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
int
ÜÜ 
data
ÜÜ 
;
ÜÜ 
if
áá 

(
áá 
IO
áá 
.
áá 

staticFive
áá 
==
áá 
$num
áá 
)
áá 
{
àà 	
data
ää 
=
ää 
(
ää 
new
ää 
Random
ää 
(
ää 
)
ää  
)
ää  !
.
ää! "
Next
ää" &
(
ää& '
)
ää' (
;
ää( )
}
ãã 	
else
åå 
{
çç 	
data
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 	
if
íí 

(
íí 
IO
íí 
.
íí 

staticFive
íí 
==
íí 
$num
íí 
)
íí 
{
ìì 	
if
ïï 
(
ïï 
data
ïï 
!=
ïï 
$num
ïï 
)
ïï 
{
ññ 
IO
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó #
+
óó$ %
data
óó& *
+
óó+ ,
$str
óó- 2
+
óó3 4
(
óó5 6
$num
óó6 9
%
óó: ;
data
óó< @
)
óó@ A
+
óóB C
$str
óóD H
)
óóH I
;
óóI J
}
òò 
else
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ D
)
õõD E
;
õõE F
}
úú 
}
ùù 	
}
ûû 
public
†† 

override
†† 
void
†† 
Good
†† 
(
†† 
)
†† 
{
°° 
GoodG2B1
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodG2B2
££ 
(
££ 
)
££ 
;
££ 
GoodB2G1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G2
•• 
(
•• 
)
•• 
;
•• 
}
¶¶ 
}®® 
}©© ÄB
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_15.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_15 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
switch 
( 
$num 
) 
{   	
case!! 
$num!! 
:!! 
data## 
=## 
(## 
new## 
Random## 
(## 
)##  
)##  !
.##! "
Next##" &
(##& '
)##' (
;##( )
break$$ 
;$$ 
default%% 
:%% 
data(( 
=(( 
$num(( 
;(( 
break)) 
;)) 
}** 	
switch++ 
(++ 
$num++ 
)++ 
{,, 	
case-- 
$num-- 
:-- 
IO00 
.00 
	WriteLine00 
(00 
$str00 
+00  !
data00" &
+00' (
$str00) .
+00/ 0
(001 2
$num002 5
%006 7
data008 <
)00< =
+00> ?
$str00@ D
)00D E
;00E F
break11 
;11 
default22 
:22 
IO44 
.44 
	WriteLine44 
(44 
$str44 /
)44/ 0
;440 1
break55 
;55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
);; 
{<< 
int== 
data== 
;== 
switch>> 
(>> 
$num>> 
)>> 
{?? 	
case@@ 
$num@@ 
:@@ 
dataCC 
=CC 
$numCC 
;CC 
breakDD 
;DD 
defaultEE 
:EE 
dataGG 
=GG 
$numGG 
;GG 
breakHH 
;HH 
}II 	
switchJJ 
(JJ 
$numJJ 
)JJ 
{KK 	
caseLL 
$numLL 
:LL 
IOOO 
.OO 
	WriteLineOO 
(OO 
$strOO 
+OO  !
dataOO" &
+OO' (
$strOO) .
+OO/ 0
(OO1 2
$numOO2 5
%OO6 7
dataOO8 <
)OO< =
+OO> ?
$strOO@ D
)OOD E
;OOE F
breakPP 
;PP 
defaultQQ 
:QQ 
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS /
)SS/ 0
;SS0 1
breakTT 
;TT 
}UU 	
}VV 
privateYY 
voidYY 
GoodG2B2YY 
(YY 
)YY 
{ZZ 
int[[ 
data[[ 
;[[ 
switch\\ 
(\\ 
$num\\ 
)\\ 
{]] 	
case^^ 
$num^^ 
:^^ 
data`` 
=`` 
$num`` 
;`` 
breakaa 
;aa 
defaultbb 
:bb 
dataee 
=ee 
$numee 
;ee 
breakff 
;ff 
}gg 	
switchhh 
(hh 
$numhh 
)hh 
{ii 	
casejj 
$numjj 
:jj 
IOmm 
.mm 
	WriteLinemm 
(mm 
$strmm 
+mm  !
datamm" &
+mm' (
$strmm) .
+mm/ 0
(mm1 2
$nummm2 5
%mm6 7
datamm8 <
)mm< =
+mm> ?
$strmm@ D
)mmD E
;mmE F
breaknn 
;nn 
defaultoo 
:oo 
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
breakrr 
;rr 
}ss 	
}tt 
privateww 
voidww 
GoodB2G1ww 
(ww 
)ww 
{xx 
intyy 
datayy 
;yy 
switchzz 
(zz 
$numzz 
)zz 
{{{ 	
case|| 
$num|| 
:|| 
data~~ 
=~~ 
(~~ 
new~~ 
Random~~ 
(~~ 
)~~  
)~~  !
.~~! "
Next~~" &
(~~& '
)~~' (
;~~( )
break 
; 
default
ÄÄ 
:
ÄÄ 
data
ÉÉ 
=
ÉÉ 
$num
ÉÉ 
;
ÉÉ 
break
ÑÑ 
;
ÑÑ 
}
ÖÖ 	
switch
ÜÜ 
(
ÜÜ 
$num
ÜÜ 
)
ÜÜ 
{
áá 	
case
àà 
$num
àà 
:
àà 
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
break
ãã 
;
ãã 
default
åå 
:
åå 
if
éé 
(
éé 
data
éé 
!=
éé 
$num
éé 
)
éé 
{
èè 
IO
êê 
.
êê 
	WriteLine
êê 
(
êê 
$str
êê #
+
êê$ %
data
êê& *
+
êê+ ,
$str
êê- 2
+
êê3 4
(
êê5 6
$num
êê6 9
%
êê: ;
data
êê< @
)
êê@ A
+
êêB C
$str
êêD H
)
êêH I
;
êêI J
}
ëë 
else
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî D
)
îîD E
;
îîE F
}
ïï 
break
ññ 
;
ññ 
}
óó 	
}
òò 
private
õõ 
void
õõ 
GoodB2G2
õõ 
(
õõ 
)
õõ 
{
úú 
int
ùù 
data
ùù 
;
ùù 
switch
ûû 
(
ûû 
$num
ûû 
)
ûû 
{
üü 	
case
†† 
$num
†† 
:
†† 
data
¢¢ 
=
¢¢ 
(
¢¢ 
new
¢¢ 
Random
¢¢ 
(
¢¢ 
)
¢¢  
)
¢¢  !
.
¢¢! "
Next
¢¢" &
(
¢¢& '
)
¢¢' (
;
¢¢( )
break
££ 
;
££ 
default
§§ 
:
§§ 
data
ßß 
=
ßß 
$num
ßß 
;
ßß 
break
®® 
;
®® 
}
©© 	
switch
™™ 
(
™™ 
$num
™™ 
)
™™ 
{
´´ 	
case
¨¨ 
$num
¨¨ 
:
¨¨ 
if
ÆÆ 
(
ÆÆ 
data
ÆÆ 
!=
ÆÆ 
$num
ÆÆ 
)
ÆÆ 
{
ØØ 
IO
∞∞ 
.
∞∞ 
	WriteLine
∞∞ 
(
∞∞ 
$str
∞∞ #
+
∞∞$ %
data
∞∞& *
+
∞∞+ ,
$str
∞∞- 2
+
∞∞3 4
(
∞∞5 6
$num
∞∞6 9
%
∞∞: ;
data
∞∞< @
)
∞∞@ A
+
∞∞B C
$str
∞∞D H
)
∞∞H I
;
∞∞I J
}
±± 
else
≤≤ 
{
≥≥ 
IO
¥¥ 
.
¥¥ 
	WriteLine
¥¥ 
(
¥¥ 
$str
¥¥ D
)
¥¥D E
;
¥¥E F
}
µµ 
break
∂∂ 
;
∂∂ 
default
∑∑ 
:
∑∑ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ /
)
ππ/ 0
;
ππ0 1
break
∫∫ 
;
∫∫ 
}
ªª 	
}
ºº 
public
ææ 

override
ææ 
void
ææ 
Good
ææ 
(
ææ 
)
ææ 
{
øø 
GoodG2B1
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
GoodG2B2
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
GoodB2G1
¬¬ 
(
¬¬ 
)
¬¬ 
;
¬¬ 
GoodB2G2
√√ 
(
√√ 
)
√√ 
;
√√ 
}
ƒƒ 
}∆∆ 
}«« é
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_16.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_16 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
while 
( 
true 
) 
{   	
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
break## 
;## 
}$$ 	
while%% 
(%% 
true%% 
)%% 
{&& 	
IO)) 
.)) 
	WriteLine)) 
()) 
$str)) 
+))  !
data))" &
+))' (
$str))) .
+))/ 0
())1 2
$num))2 5
%))6 7
data))8 <
)))< =
+))> ?
$str))@ D
)))D E
;))E F
break** 
;** 
}++ 	
},, 
private00 
void00 
GoodG2B00 
(00 
)00 
{11 
int22 
data22 
;22 
while33 
(33 
true33 
)33 
{44 	
data66 
=66 
$num66 
;66 
break77 
;77 
}88 	
while99 
(99 
true99 
)99 
{:: 	
IO== 
.== 
	WriteLine== 
(== 
$str== 
+==  !
data==" &
+==' (
$str==) .
+==/ 0
(==1 2
$num==2 5
%==6 7
data==8 <
)==< =
+==> ?
$str==@ D
)==D E
;==E F
break>> 
;>> 
}?? 	
}@@ 
privateCC 
voidCC 
GoodB2GCC 
(CC 
)CC 
{DD 
intEE 
dataEE 
;EE 
whileFF 
(FF 
trueFF 
)FF 
{GG 	
dataII 
=II 
(II 
newII 
RandomII 
(II 
)II  
)II  !
.II! "
NextII" &
(II& '
)II' (
;II( )
breakJJ 
;JJ 
}KK 	
whileLL 
(LL 
trueLL 
)LL 
{MM 	
ifOO 
(OO 
dataOO 
!=OO 
$numOO 
)OO 
{PP 
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ #
+QQ$ %
dataQQ& *
+QQ+ ,
$strQQ- 2
+QQ3 4
(QQ5 6
$numQQ6 9
%QQ: ;
dataQQ< @
)QQ@ A
+QQB C
$strQQD H
)QQH I
;QQI J
}RR 
elseSS 
{TT 
IOUU 
.UU 
	WriteLineUU 
(UU 
$strUU D
)UUD E
;UUE F
}VV 
breakWW 
;WW 
}XX 	
}YY 
public[[ 

override[[ 
void[[ 
Good[[ 
([[ 
)[[ 
{\\ 
GoodG2B]] 
(]] 
)]] 
;]] 
GoodB2G^^ 
(^^ 
)^^ 
;^^ 
}__ 
}aa 
}bb Ì
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_17.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_17 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data$$ 
=$$ 
($$ 
new$$ 
Random$$ 
($$ 
)$$ 
)$$ 
.$$ 
Next$$ "
($$" #
)$$# $
;$$$ %
for%% 
(%% 
int%% 
j%% 
=%% 
$num%% 
;%% 
j%% 
<%% 
$num%% 
;%% 
j%%  
++%%  "
)%%" #
{&& 	
IO)) 
.)) 
	WriteLine)) 
()) 
$str)) 
+))  !
data))" &
+))' (
$str))) .
+))/ 0
())1 2
$num))2 5
%))6 7
data))8 <
)))< =
+))> ?
$str))@ D
)))D E
;))E F
}** 	
}++ 
private// 
void// 
GoodG2B// 
(// 
)// 
{00 
int11 
data11 
;11 
data33 
=33 
$num33 
;33 
for44 
(44 
int44 
j44 
=44 
$num44 
;44 
j44 
<44 
$num44 
;44 
j44  
++44  "
)44" #
{55 	
IO88 
.88 
	WriteLine88 
(88 
$str88 
+88  !
data88" &
+88' (
$str88) .
+88/ 0
(881 2
$num882 5
%886 7
data888 <
)88< =
+88> ?
$str88@ D
)88D E
;88E F
}99 	
}:: 
private== 
void== 
GoodB2G== 
(== 
)== 
{>> 
int?? 
data?? 
;?? 
dataAA 
=AA 
(AA 
newAA 
RandomAA 
(AA 
)AA 
)AA 
.AA 
NextAA "
(AA" #
)AA# $
;AA$ %
forBB 
(BB 
intBB 
kBB 
=BB 
$numBB 
;BB 
kBB 
<BB 
$numBB 
;BB 
kBB  
++BB  "
)BB" #
{CC 	
ifEE 
(EE 
dataEE 
!=EE 
$numEE 
)EE 
{FF 
IOGG 
.GG 
	WriteLineGG 
(GG 
$strGG #
+GG$ %
dataGG& *
+GG+ ,
$strGG- 2
+GG3 4
(GG5 6
$numGG6 9
%GG: ;
dataGG< @
)GG@ A
+GGB C
$strGGD H
)GGH I
;GGI J
}HH 
elseII 
{JJ 
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK D
)KKD E
;KKE F
}LL 
}MM 	
}NN 
publicPP 

overridePP 
voidPP 
GoodPP 
(PP 
)PP 
{QQ 
GoodG2BRR 
(RR 
)RR 
;RR 
GoodB2GSS 
(SS 
)SS 
;SS 
}TT 
}VV 
}WW ˘1
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_21.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_21 1
:2 3
AbstractTestCase4 D
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public 

override 
void 
Bad 
( 
) 
{   
int!! 
data!! 
;!! 
data## 
=## 
(## 
new## 
Random## 
(## 
)## 
)## 
.## 
Next## "
(##" #
)### $
;##$ %

badPrivate$$ 
=$$ 
true$$ 
;$$ 
BadSink%% 
(%% 
data%% 
)%% 
;%% 
}&& 
private(( 
void(( 
BadSink(( 
((( 
int(( 
data(( !
)((" #
{)) 
if** 

(** 

badPrivate** 
)** 
{++ 	
IO.. 
... 
	WriteLine.. 
(.. 
$str.. 
+..  !
data.." &
+..' (
$str..) .
+../ 0
(..1 2
$num..2 5
%..6 7
data..8 <
)..< =
+..> ?
$str..@ D
)..D E
;..E F
}// 	
}00 
private33 
bool33 
goodB2G1Private33  
=33! "
false33# (
;33( )
private44 
bool44 
goodB2G2Private44  
=44! "
false44# (
;44( )
private55 
bool55 
goodG2BPrivate55 
=55  !
false55" '
;55' (
public77 

override77 
void77 
Good77 
(77 
)77 
{88 
GoodB2G199 
(99 
)99 
;99 
GoodB2G2:: 
(:: 
):: 
;:: 
GoodG2B;; 
(;; 
);; 
;;; 
}<< 
private?? 
void?? 
GoodB2G1?? 
(?? 
)?? 
{@@ 
intAA 
dataAA 
;AA 
dataCC 
=CC 
(CC 
newCC 
RandomCC 
(CC 
)CC 
)CC 
.CC 
NextCC "
(CC" #
)CC# $
;CC$ %
goodB2G1PrivateDD 
=DD 
falseDD 
;DD  
GoodB2G1SinkEE 
(EE 
dataEE 
)EE 
;EE 
}FF 
privateHH 
voidHH 
GoodB2G1SinkHH 
(HH 
intHH !
dataHH" &
)HH' (
{II 
ifJJ 

(JJ 
goodB2G1PrivateJJ 
)JJ 
{KK 	
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM /
)MM/ 0
;MM0 1
}NN 	
elseOO 
{PP 	
ifRR 
(RR 
dataRR 
!=RR 
$numRR 
)RR 
{SS 
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT #
+TT$ %
dataTT& *
+TT+ ,
$strTT- 2
+TT3 4
(TT5 6
$numTT6 9
%TT: ;
dataTT< @
)TT@ A
+TTB C
$strTTD H
)TTH I
;TTI J
}UU 
elseVV 
{WW 
IOXX 
.XX 
	WriteLineXX 
(XX 
$strXX D
)XXD E
;XXE F
}YY 
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodB2G2^^ 
(^^ 
)^^ 
{__ 
int`` 
data`` 
;`` 
databb 
=bb 
(bb 
newbb 
Randombb 
(bb 
)bb 
)bb 
.bb 
Nextbb "
(bb" #
)bb# $
;bb$ %
goodB2G2Privatecc 
=cc 
truecc 
;cc 
GoodB2G2Sinkdd 
(dd 
datadd 
)dd 
;dd 
}ee 
privategg 
voidgg 
GoodB2G2Sinkgg 
(gg 
intgg !
datagg" &
)gg' (
{hh 
ifii 

(ii 
goodB2G2Privateii 
)ii 
{jj 	
ifll 
(ll 
datall 
!=ll 
$numll 
)ll 
{mm 
IOnn 
.nn 
	WriteLinenn 
(nn 
$strnn #
+nn$ %
datann& *
+nn+ ,
$strnn- 2
+nn3 4
(nn5 6
$numnn6 9
%nn: ;
datann< @
)nn@ A
+nnB C
$strnnD H
)nnH I
;nnI J
}oo 
elsepp 
{qq 
IOrr 
.rr 
	WriteLinerr 
(rr 
$strrr D
)rrD E
;rrE F
}ss 
}tt 	
}uu 
privatexx 
voidxx 
GoodG2Bxx 
(xx 
)xx 
{yy 
intzz 
datazz 
;zz 
data|| 
=|| 
$num|| 
;|| 
goodG2BPrivate}} 
=}} 
true}} 
;}} 
GoodG2BSink~~ 
(~~ 
data~~ 
)~~ 
;~~ 
} 
private
ÅÅ 
void
ÅÅ 
GoodG2BSink
ÅÅ 
(
ÅÅ 
int
ÅÅ  
data
ÅÅ! %
)
ÅÅ& '
{
ÇÇ 
if
ÉÉ 

(
ÉÉ 
goodG2BPrivate
ÉÉ 
)
ÉÉ 
{
ÑÑ 	
IO
áá 
.
áá 
	WriteLine
áá 
(
áá 
$str
áá 
+
áá  !
data
áá" &
+
áá' (
$str
áá) .
+
áá/ 0
(
áá1 2
$num
áá2 5
%
áá6 7
data
áá8 <
)
áá< =
+
áá> ?
$str
áá@ D
)
ááD E
;
ááE F
}
àà 	
}
ââ 
}ãã 
}åå Ë
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_22a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_22a 2
:3 4
AbstractTestCase5 E
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
= 
$num 
; 
data!! 
=!! 
(!! 
new!! 
Random!! 
(!! 
)!! 
)!! 
.!! 
Next!! "
(!!" #
)!!# $
;!!$ %
badPublicStatic"" 
="" 
true"" 
;"" 8
,CWE369_Divide_by_Zero__int_Random_modulo_22b## 4
.##4 5
BadSink##5 <
(##< =
data##= A
)##B C
;##C D
}$$ 
public'' 

static'' 
bool''  
goodB2G1PublicStatic'' +
='', -
false''. 3
;''3 4
public(( 

static(( 
bool((  
goodB2G2PublicStatic(( +
=((, -
false((. 3
;((3 4
public)) 

static)) 
bool)) 
goodG2BPublicStatic)) *
=))+ ,
false))- 2
;))2 3
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodB2G1-- 
(-- 
)-- 
;-- 
GoodB2G2.. 
(.. 
).. 
;.. 
GoodG2B// 
(// 
)// 
;// 
}00 
private33 
void33 
GoodB2G133 
(33 
)33 
{44 
int55 
data55 
=55 
$num55 
;55 
data77 
=77 
(77 
new77 
Random77 
(77 
)77 
)77 
.77 
Next77 "
(77" #
)77# $
;77$ % 
goodB2G1PublicStatic88 
=88 
false88 $
;88$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_22b99 4
.994 5
GoodB2G1Sink995 A
(99A B
data99B F
)99G H
;99H I
}:: 
private== 
void== 
GoodB2G2== 
(== 
)== 
{>> 
int?? 
data?? 
=?? 
$num?? 
;?? 
dataAA 
=AA 
(AA 
newAA 
RandomAA 
(AA 
)AA 
)AA 
.AA 
NextAA "
(AA" #
)AA# $
;AA$ % 
goodB2G2PublicStaticBB 
=BB 
trueBB #
;BB# $8
,CWE369_Divide_by_Zero__int_Random_modulo_22bCC 4
.CC4 5
GoodB2G2SinkCC5 A
(CCA B
dataCCB F
)CCG H
;CCH I
}DD 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
intII 
dataII 
=II 
$numII 
;II 
dataKK 
=KK 
$numKK 
;KK 
goodG2BPublicStaticLL 
=LL 
trueLL "
;LL" #8
,CWE369_Divide_by_Zero__int_Random_modulo_22bMM 4
.MM4 5
GoodG2BSinkMM5 @
(MM@ A
dataMMA E
)MMF G
;MMG H
}NN 
}PP 
}QQ ì 
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_22b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_22b 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
if 

( 8
,CWE369_Divide_by_Zero__int_Random_modulo_22a 8
.8 9
badPublicStatic9 H
)H I
{ 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
%""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
}** 
public// 

static// 
void// 
GoodB2G1Sink// #
(//# $
int//$ '
data//( ,
)//- .
{00 
if11 

(11 8
,CWE369_Divide_by_Zero__int_Random_modulo_22a11 8
.118 9 
goodB2G1PublicStatic119 M
)11M N
{22 	
data55 
=55 
$num55 
;55 
}66 	
else77 
{88 	
if:: 
(:: 
data:: 
!=:: 
$num:: 
):: 
{;; 
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< #
+<<$ %
data<<& *
+<<+ ,
$str<<- 2
+<<3 4
(<<5 6
$num<<6 9
%<<: ;
data<<< @
)<<@ A
+<<B C
$str<<D H
)<<H I
;<<I J
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ D
)@@D E
;@@E F
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2G2SinkFF #
(FF# $
intFF$ '
dataFF( ,
)FF- .
{GG 
ifHH 

(HH 8
,CWE369_Divide_by_Zero__int_Random_modulo_22aHH 8
.HH8 9 
goodB2G2PublicStaticHH9 M
)HHM N
{II 	
ifKK 
(KK 
dataKK 
!=KK 
$numKK 
)KK 
{LL 
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM #
+MM$ %
dataMM& *
+MM+ ,
$strMM- 2
+MM3 4
(MM5 6
$numMM6 9
%MM: ;
dataMM< @
)MM@ A
+MMB C
$strMMD H
)MMH I
;MMI J
}NN 
elseOO 
{PP 
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ D
)QQD E
;QQE F
}RR 
}SS 	
elseTT 
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
}ZZ 
public]] 

static]] 
void]] 
GoodG2BSink]] "
(]]" #
int]]# &
data]]' +
)]], -
{^^ 
if__ 

(__ 8
,CWE369_Divide_by_Zero__int_Random_modulo_22a__ 8
.__8 9
goodG2BPublicStatic__9 L
)__L M
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc 
+cc  !
datacc" &
+cc' (
$strcc) .
+cc/ 0
(cc1 2
$numcc2 5
%cc6 7
datacc8 <
)cc< =
+cc> ?
$strcc@ D
)ccD E
;ccE F
}dd 	
elseee 
{ff 	
dataii 
=ii 
$numii 
;ii 
}jj 	
}kk 
}mm 
}nn ©
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_31.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_31 1
:2 3
AbstractTestCase4 D
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
dataCopy 
; 
{ 	
int   
data   
;   
data"" 
="" 
("" 
new"" 
Random"" 
("" 
)""  
)""  !
.""! "
Next""" &
(""& '
)""' (
;""( )
dataCopy## 
=## 
data## 
;## 
}$$ 	
{%% 	
int&& 
data&& 
=&& 
dataCopy&& 
;&&  
IO)) 
.)) 
	WriteLine)) 
()) 
$str)) 
+))  !
data))" &
+))' (
$str))) .
+))/ 0
())1 2
$num))2 5
%))6 7
data))8 <
)))< =
+))> ?
$str))@ D
)))D E
;))E F
}** 	
}++ 
public.. 

override.. 
void.. 
Good.. 
(.. 
).. 
{// 
GoodG2B00 
(00 
)00 
;00 
GoodB2G11 
(11 
)11 
;11 
}22 
private55 
void55 
GoodG2B55 
(55 
)55 
{66 
int77 
dataCopy77 
;77 
{88 	
int99 
data99 
;99 
data;; 
=;; 
$num;; 
;;; 
dataCopy<< 
=<< 
data<< 
;<< 
}== 	
{>> 	
int?? 
data?? 
=?? 
dataCopy?? 
;??  
IOBB 
.BB 
	WriteLineBB 
(BB 
$strBB 
+BB  !
dataBB" &
+BB' (
$strBB) .
+BB/ 0
(BB1 2
$numBB2 5
%BB6 7
dataBB8 <
)BB< =
+BB> ?
$strBB@ D
)BBD E
;BBE F
}CC 	
}DD 
privateGG 
voidGG 
GoodB2GGG 
(GG 
)GG 
{HH 
intII 
dataCopyII 
;II 
{JJ 	
intKK 
dataKK 
;KK 
dataMM 
=MM 
(MM 
newMM 
RandomMM 
(MM 
)MM  
)MM  !
.MM! "
NextMM" &
(MM& '
)MM' (
;MM( )
dataCopyNN 
=NN 
dataNN 
;NN 
}OO 	
{PP 	
intQQ 
dataQQ 
=QQ 
dataCopyQQ 
;QQ  
ifSS 
(SS 
dataSS 
!=SS 
$numSS 
)SS 
{TT 
IOUU 
.UU 
	WriteLineUU 
(UU 
$strUU #
+UU$ %
dataUU& *
+UU+ ,
$strUU- 2
+UU3 4
(UU5 6
$numUU6 9
%UU: ;
dataUU< @
)UU@ A
+UUB C
$strUUD H
)UUH I
;UUI J
}VV 
elseWW 
{XX 
IOYY 
.YY 
	WriteLineYY 
(YY 
$strYY D
)YYD E
;YYE F
}ZZ 
}[[ 	
}\\ 
}^^ 
}__ Ω
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_41.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_41 1
:2 3
AbstractTestCase4 D
{ 
private 
static 
void 
BadSink 
(  
int  #
data$ (
)) *
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
;%% 
data'' 
='' 
('' 
new'' 
Random'' 
('' 
)'' 
)'' 
.'' 
Next'' "
(''" #
)''# $
;''$ %
BadSink(( 
((( 
data(( 
)(( 
;(( 
})) 
public,, 

override,, 
void,, 
Good,, 
(,, 
),, 
{-- 
GoodG2B.. 
(.. 
).. 
;.. 
GoodB2G// 
(// 
)// 
;// 
}00 
private22 
static22 
void22 
GoodG2BSink22 #
(22# $
int22$ '
data22( ,
)22- .
{33 
IO66 

.66
 
	WriteLine66 
(66 
$str66 
+66 
data66 "
+66# $
$str66% *
+66+ ,
(66- .
$num66. 1
%662 3
data664 8
)668 9
+66: ;
$str66< @
)66@ A
;66A B
}77 
private:: 
static:: 
void:: 
GoodG2B:: 
(::  
)::  !
{;; 
int<< 
data<< 
;<< 
data>> 
=>> 
$num>> 
;>> 
GoodG2BSink?? 
(?? 
data?? 
)?? 
;?? 
}@@ 
privateBB 
staticBB 
voidBB 
GoodB2GSinkBB #
(BB# $
intBB$ '
dataBB( ,
)BB- .
{CC 
ifEE 

(EE 
dataEE 
!=EE 
$numEE 
)EE 
{FF 	
IOGG 
.GG 
	WriteLineGG 
(GG 
$strGG 
+GG  !
dataGG" &
+GG' (
$strGG) .
+GG/ 0
(GG1 2
$numGG2 5
%GG6 7
dataGG8 <
)GG< =
+GG> ?
$strGG@ D
)GGD E
;GGE F
}HH 	
elseII 
{JJ 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK @
)KK@ A
;KKA B
}LL 	
}MM 
privatePP 
staticPP 
voidPP 
GoodB2GPP 
(PP  
)PP  !
{QQ 
intRR 
dataRR 
;RR 
dataTT 
=TT 
(TT 
newTT 
RandomTT 
(TT 
)TT 
)TT 
.TT 
NextTT "
(TT" #
)TT# $
;TT$ %
GoodB2GSinkUU 
(UU 
dataUU 
)UU 
;UU 
}VV 
}XX 
}YY ‹
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_42.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_42 1
:2 3
AbstractTestCase4 D
{ 
private 
static 
int 
	BadSource  
(  !
)! "
{ 
int 
data 
; 
data   
=   
(   
new   
Random   
(   
)   
)   
.   
Next   "
(  " #
)  # $
;  $ %
return!! 
data!! 
;!! 
}"" 
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
int&& 
data&& 
=&& 
	BadSource&& 
(&& 
)&& 
;&& 
IO)) 

.))
 
	WriteLine)) 
()) 
$str)) 
+)) 
data)) "
+))# $
$str))% *
+))+ ,
())- .
$num)). 1
%))2 3
data))4 8
)))8 9
+)): ;
$str))< @
)))@ A
;))A B
}** 
private.. 
static.. 
int.. 
GoodG2BSource.. $
(..$ %
)..% &
{// 
int00 
data00 
;00 
data22 
=22 
$num22 
;22 
return33 
data33 
;33 
}44 
private66 
static66 
void66 
GoodG2B66 
(66  
)66  !
{77 
int88 
data88 
=88 
GoodG2BSource88  
(88  !
)88! "
;88" #
IO;; 

.;;
 
	WriteLine;; 
(;; 
$str;; 
+;; 
data;; "
+;;# $
$str;;% *
+;;+ ,
(;;- .
$num;;. 1
%;;2 3
data;;4 8
);;8 9
+;;: ;
$str;;< @
);;@ A
;;;A B
}<< 
private?? 
static?? 
int?? 
GoodB2GSource?? $
(??$ %
)??% &
{@@ 
intAA 
dataAA 
;AA 
dataCC 
=CC 
(CC 
newCC 
RandomCC 
(CC 
)CC 
)CC 
.CC 
NextCC "
(CC" #
)CC# $
;CC$ %
returnDD 
dataDD 
;DD 
}EE 
privateGG 
staticGG 
voidGG 
GoodB2GGG 
(GG  
)GG  !
{HH 
intII 
dataII 
=II 
GoodB2GSourceII  
(II  !
)II! "
;II" #
ifKK 

(KK 
dataKK 
!=KK 
$numKK 
)KK 
{LL 	
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM 
+MM  !
dataMM" &
+MM' (
$strMM) .
+MM/ 0
(MM1 2
$numMM2 5
%MM6 7
dataMM8 <
)MM< =
+MM> ?
$strMM@ D
)MMD E
;MME F
}NN 	
elseOO 
{PP 	
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ @
)QQ@ A
;QQA B
}RR 	
}SS 
publicUU 

overrideUU 
voidUU 
GoodUU 
(UU 
)UU 
{VV 
GoodG2BWW 
(WW 
)WW 
;WW 
GoodB2GXX 
(XX 
)XX 
;XX 
}YY 
}[[ 
}\\ Å!
§C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_45.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 7
+CWE369_Divide_by_Zero__int_Random_modulo_45 1
:2 3
AbstractTestCase4 D
{ 
private 
int 
dataBad 
; 
private 
int 
dataGoodG2B 
; 
private 
int 
dataGoodB2G 
; 
private   
void   
BadSink   
(   
)   
{!! 
int"" 
data"" 
="" 
dataBad"" 
;"" 
IO%% 

.%%
 
	WriteLine%% 
(%% 
$str%% 
+%% 
data%% "
+%%# $
$str%%% *
+%%+ ,
(%%- .
$num%%. 1
%%%2 3
data%%4 8
)%%8 9
+%%: ;
$str%%< @
)%%@ A
;%%A B
}&& 
public(( 

override(( 
void(( 
Bad(( 
((( 
)(( 
{)) 
int** 
data** 
;** 
data,, 
=,, 
(,, 
new,, 
Random,, 
(,, 
),, 
),, 
.,, 
Next,, "
(,," #
),,# $
;,,$ %
dataBad-- 
=-- 
data-- 
;-- 
BadSink.. 
(.. 
).. 
;.. 
}// 
public22 

override22 
void22 
Good22 
(22 
)22 
{33 
GoodG2B44 
(44 
)44 
;44 
GoodB2G55 
(55 
)55 
;55 
}66 
private88 
void88 
GoodG2BSink88 
(88 
)88 
{99 
int:: 
data:: 
=:: 
dataGoodG2B:: 
;:: 
IO== 

.==
 
	WriteLine== 
(== 
$str== 
+== 
data== "
+==# $
$str==% *
+==+ ,
(==- .
$num==. 1
%==2 3
data==4 8
)==8 9
+==: ;
$str==< @
)==@ A
;==A B
}>> 
privateAA 
voidAA 
GoodG2BAA 
(AA 
)AA 
{BB 
intCC 
dataCC 
;CC 
dataEE 
=EE 
$numEE 
;EE 
dataGoodG2BFF 
=FF 
dataFF 
;FF 
GoodG2BSinkGG 
(GG 
)GG 
;GG 
}HH 
privateJJ 
voidJJ 
GoodB2GSinkJJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
=LL 
dataGoodB2GLL 
;LL 
ifNN 

(NN 
dataNN 
!=NN 
$numNN 
)NN 
{OO 	
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP 
+PP  !
dataPP" &
+PP' (
$strPP) .
+PP/ 0
(PP1 2
$numPP2 5
%PP6 7
dataPP8 <
)PP< =
+PP> ?
$strPP@ D
)PPD E
;PPE F
}QQ 	
elseRR 
{SS 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT @
)TT@ A
;TTA B
}UU 	
}VV 
privateYY 
voidYY 
GoodB2GYY 
(YY 
)YY 
{ZZ 
int[[ 
data[[ 
;[[ 
data]] 
=]] 
(]] 
new]] 
Random]] 
(]] 
)]] 
)]] 
.]] 
Next]] "
(]]" #
)]]# $
;]]$ %
dataGoodB2G^^ 
=^^ 
data^^ 
;^^ 
GoodB2GSink__ 
(__ 
)__ 
;__ 
}`` 
}bb 
}cc ê
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_51a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_51a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_51b 4
.4 5
BadSink5 <
(< =
data= A
)C D
;D E
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
int,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 8
,CWE369_Divide_by_Zero__int_Random_modulo_51b// 4
.//4 5
GoodG2BSink//5 @
(//@ A
data//A E
)//G H
;//H I
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
int55 
data55 
;55 
data77 
=77 
(77 
new77 
Random77 
(77 
)77 
)77 
.77 
Next77 "
(77" #
)77# $
;77$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_51b88 4
.884 5
GoodB2GSink885 @
(88@ A
data88A E
)88G H
;88H I
}99 
};; 
}<< ‰
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_51b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_51b 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< ê
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_52a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_52a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_52b 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
int,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 8
,CWE369_Divide_by_Zero__int_Random_modulo_52b// 4
.//4 5
GoodG2BSink//5 @
(//@ A
data//A E
)//F G
;//G H
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
int55 
data55 
;55 
data77 
=77 
(77 
new77 
Random77 
(77 
)77 
)77 
.77 
Next77 "
(77" #
)77# $
;77$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_52b88 4
.884 5
GoodB2GSink885 @
(88@ A
data88A E
)88F G
;88G H
}99 
};; 
}<< ˆ

•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_52b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_52b 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 8
,CWE369_Divide_by_Zero__int_Random_modulo_52c 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 8
,CWE369_Divide_by_Zero__int_Random_modulo_52c&& 4
.&&4 5
GoodG2BSink&&5 @
(&&@ A
data&&A E
)&&F G
;&&G H
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 8
,CWE369_Divide_by_Zero__int_Random_modulo_52c,, 4
.,,4 5
GoodB2GSink,,5 @
(,,@ A
data,,A E
),,F G
;,,G H
}-- 
}// 
}00 ‰
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_52c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_52c 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< ê
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_53a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_53a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_53b 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
int,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 8
,CWE369_Divide_by_Zero__int_Random_modulo_53b// 4
.//4 5
GoodG2BSink//5 @
(//@ A
data//A E
)//F G
;//G H
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
int55 
data55 
;55 
data77 
=77 
(77 
new77 
Random77 
(77 
)77 
)77 
.77 
Next77 "
(77" #
)77# $
;77$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_53b88 4
.884 5
GoodB2GSink885 @
(88@ A
data88A E
)88F G
;88G H
}99 
};; 
}<< ˆ

•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_53b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_53b 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 8
,CWE369_Divide_by_Zero__int_Random_modulo_53c 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 8
,CWE369_Divide_by_Zero__int_Random_modulo_53c&& 4
.&&4 5
GoodG2BSink&&5 @
(&&@ A
data&&A E
)&&F G
;&&G H
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 8
,CWE369_Divide_by_Zero__int_Random_modulo_53c,, 4
.,,4 5
GoodB2GSink,,5 @
(,,@ A
data,,A E
),,F G
;,,G H
}-- 
}// 
}00 ˆ

•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_53c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_53c 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 8
,CWE369_Divide_by_Zero__int_Random_modulo_53d 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 8
,CWE369_Divide_by_Zero__int_Random_modulo_53d&& 4
.&&4 5
GoodG2BSink&&5 @
(&&@ A
data&&A E
)&&F G
;&&G H
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 8
,CWE369_Divide_by_Zero__int_Random_modulo_53d,, 4
.,,4 5
GoodB2GSink,,5 @
(,,@ A
data,,A E
),,F G
;,,G H
}-- 
}// 
}00 ‰
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_53d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_53d 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< ê
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_54a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_54a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_54b 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
int,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 8
,CWE369_Divide_by_Zero__int_Random_modulo_54b// 4
.//4 5
GoodG2BSink//5 @
(//@ A
data//A E
)//F G
;//G H
}00 
private33 
void33 
GoodB2G33 
(33 
)33 
{44 
int55 
data55 
;55 
data77 
=77 
(77 
new77 
Random77 
(77 
)77 
)77 
.77 
Next77 "
(77" #
)77# $
;77$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_54b88 4
.884 5
GoodB2GSink885 @
(88@ A
data88A E
)88F G
;88G H
}99 
};; 
}<< ˆ

•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_54b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_54b 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 8
,CWE369_Divide_by_Zero__int_Random_modulo_54c 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 8
,CWE369_Divide_by_Zero__int_Random_modulo_54c&& 4
.&&4 5
GoodG2BSink&&5 @
(&&@ A
data&&A E
)&&F G
;&&G H
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 8
,CWE369_Divide_by_Zero__int_Random_modulo_54c,, 4
.,,4 5
GoodB2GSink,,5 @
(,,@ A
data,,A E
),,F G
;,,G H
}-- 
}// 
}00 ˆ

•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_54c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_54c 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 8
,CWE369_Divide_by_Zero__int_Random_modulo_54d 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 8
,CWE369_Divide_by_Zero__int_Random_modulo_54d&& 4
.&&4 5
GoodG2BSink&&5 @
(&&@ A
data&&A E
)&&F G
;&&G H
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 8
,CWE369_Divide_by_Zero__int_Random_modulo_54d,, 4
.,,4 5
GoodB2GSink,,5 @
(,,@ A
data,,A E
),,F G
;,,G H
}-- 
}// 
}00 ˆ

•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_54d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_54d 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 8
,CWE369_Divide_by_Zero__int_Random_modulo_54e 4
.4 5
BadSink5 <
(< =
data= A
)B C
;C D
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 8
,CWE369_Divide_by_Zero__int_Random_modulo_54e&& 4
.&&4 5
GoodG2BSink&&5 @
(&&@ A
data&&A E
)&&F G
;&&G H
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 8
,CWE369_Divide_by_Zero__int_Random_modulo_54e,, 4
.,,4 5
GoodB2GSink,,5 @
(,,@ A
data,,A E
),,F G
;,,G H
}-- 
}// 
}00 ‰
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_54e.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_54e 2
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Û
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_61a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_61a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
= 8
,CWE369_Divide_by_Zero__int_Random_modulo_61b ?
.? @
	BadSource@ I
(I J
)J K
;K L
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
GoodB2G(( 
((( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
),,  !
{-- 
int.. 
data.. 
=.. 8
,CWE369_Divide_by_Zero__int_Random_modulo_61b.. ?
...? @
GoodG2BSource..@ M
(..M N
)..N O
;..O P
IO11 

.11
 
	WriteLine11 
(11 
$str11 
+11 
data11 "
+11# $
$str11% *
+11+ ,
(11- .
$num11. 1
%112 3
data114 8
)118 9
+11: ;
$str11< @
)11@ A
;11A B
}22 
private55 
static55 
void55 
GoodB2G55 
(55  
)55  !
{66 
int77 
data77 
=77 8
,CWE369_Divide_by_Zero__int_Random_modulo_61b77 ?
.77? @
GoodB2GSource77@ M
(77M N
)77N O
;77O P
if99 

(99 
data99 
!=99 
$num99 
)99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; 
+;;  !
data;;" &
+;;' (
$str;;) .
+;;/ 0
(;;1 2
$num;;2 5
%;;6 7
data;;8 <
);;< =
+;;> ?
$str;;@ D
);;D E
;;;E F
}<< 	
else== 
{>> 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? @
)??@ A
;??A B
}@@ 	
}AA 
}CC 
}DD »
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_61b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_61b 2
{ 
public 

static 
int 
	BadSource 
(  
)  !
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %
return 
data 
; 
}   
public%% 

static%% 
int%% 
GoodG2BSource%% #
(%%# $
)%%$ %
{&& 
int'' 
data'' 
;'' 
data)) 
=)) 
$num)) 
;)) 
return** 
data** 
;** 
}++ 
public.. 

static.. 
int.. 
GoodB2GSource.. #
(..# $
)..$ %
{// 
int00 
data00 
;00 
data22 
=22 
(22 
new22 
Random22 
(22 
)22 
)22 
.22 
Next22 "
(22" #
)22# $
;22$ %
return33 
data33 
;33 
}44 
}66 
}77 Œ
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_66a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_66a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %
int 
[ 
] 
	dataArray 
= 
new 
int !
[! "
$num" #
]# $
;$ %
	dataArray   
[   
$num   
]   
=   
data   
;   8
,CWE369_Divide_by_Zero__int_Random_modulo_66b!! 4
.!!4 5
BadSink!!5 <
(!!< =
	dataArray!!= F
)!!H I
;!!I J
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
GoodB2G(( 
((( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
),,  !
{-- 
int.. 
data.. 
;.. 
data00 
=00 
$num00 
;00 
int11 
[11 
]11 
	dataArray11 
=11 
new11 
int11 !
[11! "
$num11" #
]11# $
;11$ %
	dataArray22 
[22 
$num22 
]22 
=22 
data22 
;22 8
,CWE369_Divide_by_Zero__int_Random_modulo_66b33 4
.334 5
GoodG2BSink335 @
(33@ A
	dataArray33A J
)33L M
;33M N
}44 
private77 
static77 
void77 
GoodB2G77 
(77  
)77  !
{88 
int99 
data99 
;99 
data;; 
=;; 
(;; 
new;; 
Random;; 
(;; 
);; 
);; 
.;; 
Next;; "
(;;" #
);;# $
;;;$ %
int<< 
[<< 
]<< 
	dataArray<< 
=<< 
new<< 
int<< !
[<<! "
$num<<" #
]<<# $
;<<$ %
	dataArray== 
[== 
$num== 
]== 
=== 
data== 
;== 8
,CWE369_Divide_by_Zero__int_Random_modulo_66b>> 4
.>>4 5
GoodB2GSink>>5 @
(>>@ A
	dataArray>>A J
)>>L M
;>>M N
}?? 
}AA 
}BB Â
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_66b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_66b 2
{ 
public 

static 
void 
BadSink 
( 
int "
[" #
]# $
	dataArray% .
)/ 0
{ 
int 
data 
= 
	dataArray 
[ 
$num 
] 
;  
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
int''# &
[''& '
]''' (
	dataArray'') 2
)''3 4
{(( 
int)) 
data)) 
=)) 
	dataArray)) 
[)) 
$num)) 
])) 
;))  
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
int00# &
[00& '
]00' (
	dataArray00) 2
)003 4
{11 
int22 
data22 
=22 
	dataArray22 
[22 
$num22 
]22 
;22  
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? õ
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_67a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_67a 2
:3 4
AbstractTestCase5 E
{ 
public 

class 
	Container 
{ 
public 
int 
containerOne 
;  
} 
public 

override 
void 
Bad 
( 
) 
{   
int!! 
data!! 
;!! 
data## 
=## 
(## 
new## 
Random## 
(## 
)## 
)## 
.## 
Next## "
(##" #
)### $
;##$ %
	Container$$ 
dataContainer$$ 
=$$  !
new$$" %
	Container$$& /
($$/ 0
)$$0 1
;$$1 2
dataContainer%% 
.%% 
containerOne%% "
=%%# $
data%%% )
;%%) *8
,CWE369_Divide_by_Zero__int_Random_modulo_67b&& 4
.&&4 5
BadSink&&5 <
(&&< =
dataContainer&&= J
)&&L M
;&&M N
}'' 
public** 

override** 
void** 
Good** 
(** 
)** 
{++ 
GoodG2B,, 
(,, 
),, 
;,, 
GoodB2G-- 
(-- 
)-- 
;-- 
}.. 
private11 
static11 
void11 
GoodG2B11 
(11  
)11  !
{22 
int33 
data33 
;33 
data55 
=55 
$num55 
;55 
	Container66 
dataContainer66 
=66  !
new66" %
	Container66& /
(66/ 0
)660 1
;661 2
dataContainer77 
.77 
containerOne77 "
=77# $
data77% )
;77) *8
,CWE369_Divide_by_Zero__int_Random_modulo_67b88 4
.884 5
GoodG2BSink885 @
(88@ A
dataContainer88A N
)88P Q
;88Q R
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
(@@ 
new@@ 
Random@@ 
(@@ 
)@@ 
)@@ 
.@@ 
Next@@ "
(@@" #
)@@# $
;@@$ %
	ContainerAA 
dataContainerAA 
=AA  !
newAA" %
	ContainerAA& /
(AA/ 0
)AA0 1
;AA1 2
dataContainerBB 
.BB 
containerOneBB "
=BB# $
dataBB% )
;BB) *8
,CWE369_Divide_by_Zero__int_Random_modulo_67bCC 4
.CC4 5
GoodB2GSinkCC5 @
(CC@ A
dataContainerCCA N
)CCP Q
;CCQ R
}DD 
}FF 
}GG ˚
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_67b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_67b 2
{ 
public 

static 
void 
BadSink 
( 8
,CWE369_Divide_by_Zero__int_Random_modulo_67a K
.K L
	ContainerL U
dataContainerV c
)d e
{ 
int 
data 
= 
dataContainer  
.  !
containerOne! -
;- .
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #8
,CWE369_Divide_by_Zero__int_Random_modulo_67a''# O
.''O P
	Container''P Y
dataContainer''Z g
)''h i
{(( 
int)) 
data)) 
=)) 
dataContainer))  
.))  !
containerOne))! -
;))- .
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #8
,CWE369_Divide_by_Zero__int_Random_modulo_67a00# O
.00O P
	Container00P Y
dataContainer00Z g
)00h i
{11 
int22 
data22 
=22 
dataContainer22  
.22  !
containerOne22! -
;22- .
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ∆
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_68a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_68a 2
:3 4
AbstractTestCase5 E
{ 
public 

static 
int 
data 
; 
public 

override 
void 
Bad 
( 
) 
{ 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_68b   4
.  4 5
BadSink  5 <
(  < =
)  = >
;  > ?
}!! 
public$$ 

override$$ 
void$$ 
Good$$ 
($$ 
)$$ 
{%% 
GoodG2B&& 
(&& 
)&& 
;&& 
GoodB2G'' 
('' 
)'' 
;'' 
}(( 
private++ 
static++ 
void++ 
GoodG2B++ 
(++  
)++  !
{,, 
data.. 
=.. 
$num.. 
;.. 8
,CWE369_Divide_by_Zero__int_Random_modulo_68b// 4
.//4 5
GoodG2BSink//5 @
(//@ A
)//A B
;//B C
}00 
private33 
static33 
void33 
GoodB2G33 
(33  
)33  !
{44 
data66 
=66 
(66 
new66 
Random66 
(66 
)66 
)66 
.66 
Next66 "
(66" #
)66# $
;66$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_68b77 4
.774 5
GoodB2GSink775 @
(77@ A
)77A B
;77B C
}88 
}:: 
};; œ
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_68b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_68b 2
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
int 
data 
= 8
,CWE369_Divide_by_Zero__int_Random_modulo_68a ?
.? @
data@ D
;D E
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
)''# $
{(( 
int)) 
data)) 
=)) 8
,CWE369_Divide_by_Zero__int_Random_modulo_68a)) ?
.))? @
data))@ D
;))D E
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
)00# $
{11 
int22 
data22 
=22 8
,CWE369_Divide_by_Zero__int_Random_modulo_68a22 ?
.22? @
data22@ D
;22D E
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? Œ
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_71a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_71a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_71b 4
.4 5
BadSink5 <
(< =
(= >
Object> D
)D E
dataE I
)K L
;L M
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
static** 
void** 
GoodG2B** 
(**  
)**  !
{++ 
int,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. 8
,CWE369_Divide_by_Zero__int_Random_modulo_71b// 4
.//4 5
GoodG2BSink//5 @
(//@ A
(//A B
Object//B H
)//H I
data//I M
)//O P
;//P Q
}00 
private33 
static33 
void33 
GoodB2G33 
(33  
)33  !
{44 
int55 
data55 
;55 
data77 
=77 
(77 
new77 
Random77 
(77 
)77 
)77 
.77 
Next77 "
(77" #
)77# $
;77$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_71b88 4
.884 5
GoodB2GSink885 @
(88@ A
(88A B
Object88B H
)88H I
data88I M
)88O P
;88P Q
}99 
};; 
}<< ó
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_71b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_71b 2
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
int 
data 
= 
( 
int 
) 

dataObject "
;" #
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
Object((# )

dataObject((* 4
)((5 6
{)) 
int** 
data** 
=** 
(** 
int** 
)** 

dataObject** "
;**" #
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
Object11# )

dataObject11* 4
)115 6
{22 
int33 
data33 
=33 
(33 
int33 
)33 

dataObject33 "
;33" #
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ æ 
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_72a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_72a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %
	Hashtable   
dataHashtable   
=    !
new  " %
	Hashtable  & /
(  / 0
$num  0 1
)  1 2
;  2 3
dataHashtable!! 
.!! 
Add!! 
(!! 
$num!! 
,!! 
data!! !
)!!! "
;!!" #
dataHashtable"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" !
)""! "
;""" #
dataHashtable## 
.## 
Add## 
(## 
$num## 
,## 
data## !
)##! "
;##" #8
,CWE369_Divide_by_Zero__int_Random_modulo_72b$$ 4
.$$4 5
BadSink$$5 <
($$< =
dataHashtable$$= J
)$$L M
;$$M N
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
int11 
data11 
;11 
data33 
=33 
$num33 
;33 
	Hashtable44 
dataHashtable44 
=44  !
new44" %
	Hashtable44& /
(44/ 0
$num440 1
)441 2
;442 3
dataHashtable55 
.55 
Add55 
(55 
$num55 
,55 
data55 !
)55! "
;55" #
dataHashtable66 
.66 
Add66 
(66 
$num66 
,66 
data66 !
)66! "
;66" #
dataHashtable77 
.77 
Add77 
(77 
$num77 
,77 
data77 !
)77! "
;77" #8
,CWE369_Divide_by_Zero__int_Random_modulo_72b88 4
.884 5
GoodG2BSink885 @
(88@ A
dataHashtable88A N
)88P Q
;88Q R
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
(@@ 
new@@ 
Random@@ 
(@@ 
)@@ 
)@@ 
.@@ 
Next@@ "
(@@" #
)@@# $
;@@$ %
	HashtableAA 
dataHashtableAA 
=AA  !
newAA" %
	HashtableAA& /
(AA/ 0
$numAA0 1
)AA1 2
;AA2 3
dataHashtableBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB !
)BB! "
;BB" #
dataHashtableCC 
.CC 
AddCC 
(CC 
$numCC 
,CC 
dataCC !
)CC! "
;CC" #
dataHashtableDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD !
)DD! "
;DD" #8
,CWE369_Divide_by_Zero__int_Random_modulo_72bEE 4
.EE4 5
GoodB2GSinkEE5 @
(EE@ A
dataHashtableEEA N
)EEP Q
;EEQ R
}FF 
}HH 
}II ¬
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_72b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_72b 2
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
int 
data 
= 
( 
int 
) 
dataHashtable &
[& '
$num' (
]( )
;) *
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
	Hashtable((# ,
dataHashtable((- :
)((; <
{)) 
int** 
data** 
=** 
(** 
int** 
)** 
dataHashtable** &
[**& '
$num**' (
]**( )
;**) *
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
	Hashtable11# ,
dataHashtable11- :
)11; <
{22 
int33 
data33 
=33 
(33 
int33 
)33 
dataHashtable33 &
[33& '
$num33' (
]33( )
;33) *
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ≤ 
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_73a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_73a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %

LinkedList   
<   
int   
>   
dataLinkedList   &
=  ' (
new  ) ,

LinkedList  - 7
<  7 8
int  8 ;
>  ; <
(  < =
)  = >
;  > ?
dataLinkedList!! 
.!! 
AddLast!! 
(!! 
data!! #
)!!# $
;!!$ %
dataLinkedList"" 
."" 
AddLast"" 
("" 
data"" #
)""# $
;""$ %
dataLinkedList## 
.## 
AddLast## 
(## 
data## #
)### $
;##$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_73b$$ 4
.$$4 5
BadSink$$5 <
($$< =
dataLinkedList$$= K
)$$M N
;$$N O
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
int11 
data11 
;11 
data33 
=33 
$num33 
;33 

LinkedList44 
<44 
int44 
>44 
dataLinkedList44 &
=44' (
new44) ,

LinkedList44- 7
<447 8
int448 ;
>44; <
(44< =
)44= >
;44> ?
dataLinkedList55 
.55 
AddLast55 
(55 
data55 #
)55# $
;55$ %
dataLinkedList66 
.66 
AddLast66 
(66 
data66 #
)66# $
;66$ %
dataLinkedList77 
.77 
AddLast77 
(77 
data77 #
)77# $
;77$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_73b88 4
.884 5
GoodG2BSink885 @
(88@ A
dataLinkedList88A O
)88Q R
;88R S
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
(@@ 
new@@ 
Random@@ 
(@@ 
)@@ 
)@@ 
.@@ 
Next@@ "
(@@" #
)@@# $
;@@$ %

LinkedListAA 
<AA 
intAA 
>AA 
dataLinkedListAA &
=AA' (
newAA) ,

LinkedListAA- 7
<AA7 8
intAA8 ;
>AA; <
(AA< =
)AA= >
;AA> ?
dataLinkedListBB 
.BB 
AddLastBB 
(BB 
dataBB #
)BB# $
;BB$ %
dataLinkedListCC 
.CC 
AddLastCC 
(CC 
dataCC #
)CC# $
;CC$ %
dataLinkedListDD 
.DD 
AddLastDD 
(DD 
dataDD #
)DD# $
;DD$ %8
,CWE369_Divide_by_Zero__int_Random_modulo_73bEE 4
.EE4 5
GoodB2GSinkEE5 @
(EE@ A
dataLinkedListEEA O
)EEQ R
;EER S
}FF 
}HH 
}II Ñ
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_73b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_73b 2
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
int* -
>- .
dataLinkedList/ =
)> ?
{ 
int 
data 
= 
dataLinkedList !
.! "
Last" &
.& '
Value' ,
;, -
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #

LinkedList((# -
<((- .
int((. 1
>((1 2
dataLinkedList((3 A
)((B C
{)) 
int** 
data** 
=** 
dataLinkedList** !
.**! "
Last**" &
.**& '
Value**' ,
;**, -
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

LinkedList11# -
<11- .
int11. 1
>111 2
dataLinkedList113 A
)11B C
{22 
int33 
data33 
=33 
dataLinkedList33 !
.33! "
Last33" &
.33& '
Value33' ,
;33, -
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ˜#
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_74a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_74a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %

Dictionary   
<   
int   
,   
int   
>   
dataDictionary   *
=  + ,
new  - 0

Dictionary  1 ;
<  ; <
int  < ?
,  ? @
int  @ C
>  C D
(  D E
)  E F
;  F G
dataDictionary!! 
.!! 
Add!! 
(!! 
$num!! 
,!! 
data!! "
)!!" #
;!!# $
dataDictionary"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" "
)""" #
;""# $
dataDictionary## 
.## 
Add## 
(## 
$num## 
,## 
data## "
)##" #
;### $8
,CWE369_Divide_by_Zero__int_Random_modulo_74b$$ 4
.$$4 5
BadSink$$5 <
($$< =
dataDictionary$$= K
)$$M N
;$$N O
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
int11 
data11 
;11 
data33 
=33 
$num33 
;33 

Dictionary44 
<44 
int44 
,44 
int44 
>44 
dataDictionary44 *
=44+ ,
new44- 0

Dictionary441 ;
<44; <
int44< ?
,44? @
int44@ C
>44C D
(44D E
)44E F
;44F G
dataDictionary55 
.55 
Add55 
(55 
$num55 
,55 
data55 "
)55" #
;55# $
dataDictionary66 
.66 
Add66 
(66 
$num66 
,66 
data66 "
)66" #
;66# $
dataDictionary77 
.77 
Add77 
(77 
$num77 
,77 
data77 "
)77" #
;77# $8
,CWE369_Divide_by_Zero__int_Random_modulo_74b88 4
.884 5
GoodG2BSink885 @
(88@ A
dataDictionary88A O
)88Q R
;88R S
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
)<<  !
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
(@@ 
new@@ 
Random@@ 
(@@ 
)@@ 
)@@ 
.@@ 
Next@@ "
(@@" #
)@@# $
;@@$ %

DictionaryAA 
<AA 
intAA 
,AA 
intAA 
>AA 
dataDictionaryAA *
=AA+ ,
newAA- 0

DictionaryAA1 ;
<AA; <
intAA< ?
,AA? @
intAA@ C
>AAC D
(AAD E
)AAE F
;AAF G
dataDictionaryBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB "
)BB" #
;BB# $
dataDictionaryCC 
.CC 
AddCC 
(CC 
$numCC 
,CC 
dataCC "
)CC" #
;CC# $
dataDictionaryDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD "
)DD" #
;DD# $8
,CWE369_Divide_by_Zero__int_Random_modulo_74bEE 4
.EE4 5
GoodB2GSinkEE5 @
(EE@ A
dataDictionaryEEA O
)EEQ R
;EER S
}FF 
}HH 
}II ´
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_74b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_74b 2
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
int. 1
>1 2
dataDictionary3 A
)B C
{ 
int 
data 
= 
dataDictionary !
[! "
$num" #
]# $
;$ %
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( #
(((# $

Dictionary(($ .
<((. /
int((/ 2
,((2 3
int((3 6
>((6 7
dataDictionary((8 F
)((G H
{)) 
int** 
data** 
=** 
dataDictionary** !
[**! "
$num**" #
]**# $
;**$ %
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

Dictionary11# -
<11- .
int11. 1
,111 2
int112 5
>115 6
dataDictionary117 E
)11F G
{22 
int33 
data33 
=33 
dataDictionary33 !
[33! "
$num33" #
]33# $
;33$ %
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ Å0
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_75a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_75a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data!! 
=!! 
(!! 
new!! 
Random!! 
(!! 
)!! 
)!! 
.!! 
Next!! "
(!!" #
)!!# $
;!!$ %
byte## 
[## 
]## 
dataSerialized## 
=## 
null##  $
;##$ %
try$$ 
{%% 	
BinaryFormatter&& 
bf&& 
=&&  
new&&! $
BinaryFormatter&&% 4
(&&4 5
)&&5 6
;&&6 7
using'' 
('' 
var'' 
ms'' 
='' 
new'' 
MemoryStream''  ,
('', -
)''- .
)''. /
{(( 
bf)) 
.)) 
	Serialize)) 
()) 
ms)) 
,))  
data))! %
)))% &
;))& '
dataSerialized** 
=**  
ms**! #
.**# $
ToArray**$ +
(**+ ,
)**, -
;**- .
}++ 8
,CWE369_Divide_by_Zero__int_Random_modulo_75b,, 8
.,,8 9
BadSink,,9 @
(,,@ A
dataSerialized,,A O
),,Q R
;,,R S
}-- 	
catch.. 
(.. "
SerializationException.. %
exceptSerialize..& 5
)..5 6
{// 	
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 
.00 
LogLevel00 '
.00' (
Warn00( ,
,00, -
$str00. X
,00X Y
exceptSerialize00Z i
)00i j
;00j k
}11 	
}22 
public55 

override55 
void55 
Good55 
(55 
)55 
{66 
GoodG2B77 
(77 
)77 
;77 
GoodB2G88 
(88 
)88 
;88 
}99 
private<< 
static<< 
void<< 
GoodG2B<< 
(<<  
)<<  !
{== 
int>> 
data>> 
;>> 
data@@ 
=@@ 
(@@ 
new@@ 
Random@@ 
(@@ 
)@@ 
)@@ 
.@@ 
Next@@ "
(@@" #
)@@# $
;@@$ %
byteBB 
[BB 
]BB 
dataSerializedBB 
=BB 
nullBB  $
;BB$ %
tryCC 
{DD 	
BinaryFormatterEE 
bfEE 
=EE  
newEE! $
BinaryFormatterEE% 4
(EE4 5
)EE5 6
;EE6 7
usingFF 
(FF 
varFF 
msFF 
=FF 
newFF 
MemoryStreamFF  ,
(FF, -
)FF- .
)FF. /
{GG 
bfHH 
.HH 
	SerializeHH 
(HH 
msHH 
,HH  
dataHH! %
)HH% &
;HH& '
dataSerializedII 
=II  
msII! #
.II# $
ToArrayII$ +
(II+ ,
)II, -
;II- .
}JJ 8
,CWE369_Divide_by_Zero__int_Random_modulo_75bKK 8
.KK8 9
GoodG2BSinkKK9 D
(KKD E
dataSerializedKKE S
)KKU V
;KKV W
}LL 	
catchMM 
(MM "
SerializationExceptionMM %
exceptSerializeMM& 5
)MM5 6
{NN 	
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO 
.OO 
LogLevelOO '
.OO' (
WarnOO( ,
,OO, -
$strOO. X
,OOX Y
exceptSerializeOOZ i
)OOi j
;OOj k
}PP 	
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
intVV 
dataVV 
;VV 
dataXX 
=XX 
(XX 
newXX 
RandomXX 
(XX 
)XX 
)XX 
.XX 
NextXX "
(XX" #
)XX# $
;XX$ %
byteZZ 
[ZZ 
]ZZ 
dataSerializedZZ 
=ZZ 
nullZZ  $
;ZZ$ %
try[[ 
{\\ 	
BinaryFormatter]] 
bf]] 
=]]  
new]]! $
BinaryFormatter]]% 4
(]]4 5
)]]5 6
;]]6 7
using^^ 
(^^ 
var^^ 
ms^^ 
=^^ 
new^^ 
MemoryStream^^  ,
(^^, -
)^^- .
)^^. /
{__ 
bf`` 
.`` 
	Serialize`` 
(`` 
ms`` 
,``  
data``! %
)``% &
;``& '
dataSerializedaa 
=aa  
msaa! #
.aa# $
ToArrayaa$ +
(aa+ ,
)aa, -
;aa- .
}bb 8
,CWE369_Divide_by_Zero__int_Random_modulo_75bcc 8
.cc8 9
GoodB2GSinkcc9 D
(ccD E
dataSerializedccE S
)ccU V
;ccV W
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. X
,ggX Y
exceptSerializeggZ i
)ggi j
;ggj k
}hh 	
}ii 
}kk 
}ll ƒ5
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_75b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_75b 2
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
int## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
int)) 
))) 
binForm)) #
.))# $
Deserialize))$ /
())/ 0
	memStream))0 9
)))9 :
;)): ;
}** 
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
catch// 
(// "
SerializationException// %
exceptSerialize//& 5
)//5 6
{00 	
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 
.11 
LogLevel11 '
.11' (
Warn11( ,
,11, -
$str11. Y
,11Y Z
exceptSerialize11[ j
)11j k
;11k l
}22 	
}33 
public88 

static88 
void88 
GoodG2BSink88 "
(88" #
byte88# '
[88' (
]88( )
dataSerialized88* 8
)889 :
{99 
try:: 
{;; 	
int<< 
data<< 
;<< 
var== 
binForm== 
=== 
new== 
BinaryFormatter== -
(==- .
)==. /
;==/ 0
using>> 
(>> 
var>> 
	memStream>>  
=>>! "
new>># &
MemoryStream>>' 3
(>>3 4
)>>4 5
)>>5 6
{?? 
	memStream@@ 
.@@ 
Write@@ 
(@@  
dataSerialized@@  .
,@@. /
$num@@0 1
,@@1 2
dataSerialized@@3 A
.@@A B
Length@@B H
)@@H I
;@@I J
	memStreamAA 
.AA 
SeekAA 
(AA 
$numAA  
,AA  !

SeekOriginAA" ,
.AA, -
BeginAA- 2
)AA2 3
;AA3 4
dataBB 
=BB 
(BB 
intBB 
)BB 
binFormBB #
.BB# $
DeserializeBB$ /
(BB/ 0
	memStreamBB0 9
)BB9 :
;BB: ;
}CC 
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
catchHH 
(HH "
SerializationExceptionHH %
exceptSerializeHH& 5
)HH5 6
{II 	
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ 
.JJ 
LogLevelJJ '
.JJ' (
WarnJJ( ,
,JJ, -
$strJJ. Y
,JJY Z
exceptSerializeJJ[ j
)JJj k
;JJk l
}KK 	
}LL 
publicOO 

staticOO 
voidOO 
GoodB2GSinkOO "
(OO" #
byteOO# '
[OO' (
]OO( )
dataSerializedOO* 8
)OO9 :
{PP 
tryQQ 
{RR 	
intSS 
dataSS 
;SS 
varTT 
binFormTT 
=TT 
newTT 
BinaryFormatterTT -
(TT- .
)TT. /
;TT/ 0
usingUU 
(UU 
varUU 
	memStreamUU  
=UU! "
newUU# &
MemoryStreamUU' 3
(UU3 4
)UU4 5
)UU5 6
{VV 
	memStreamWW 
.WW 
WriteWW 
(WW  
dataSerializedWW  .
,WW. /
$numWW0 1
,WW1 2
dataSerializedWW3 A
.WWA B
LengthWWB H
)WWH I
;WWI J
	memStreamXX 
.XX 
SeekXX 
(XX 
$numXX  
,XX  !

SeekOriginXX" ,
.XX, -
BeginXX- 2
)XX2 3
;XX3 4
dataYY 
=YY 
(YY 
intYY 
)YY 
binFormYY #
.YY# $
DeserializeYY$ /
(YY/ 0
	memStreamYY0 9
)YY9 :
;YY: ;
}ZZ 
if\\ 
(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ #
+^^$ %
data^^& *
+^^+ ,
$str^^- 2
+^^3 4
(^^5 6
$num^^6 9
%^^: ;
data^^< @
)^^@ A
+^^B C
$str^^D H
)^^H I
;^^I J
}__ 
else`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb D
)bbD E
;bbE F
}cc 
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. Y
,ggY Z
exceptSerializegg[ j
)ggj k
;ggk l
}hh 	
}ii 
}kk 
}ll …
•C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_81a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 8
,CWE369_Divide_by_Zero__int_Random_modulo_81a 2
:3 4
AbstractTestCase5 E
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
( 
new 
Random 
( 
) 
) 
. 
Next "
(" #
)# $
;$ %<
0CWE369_Divide_by_Zero__int_Random_modulo_81_base 8

baseObject9 C
=D E
newF I;
/CWE369_Divide_by_Zero__int_Random_modulo_81_badJ y
(y z
)z {
;{ |

baseObject   
.   
Action   
(   
data   
)    
;    !
}!! 
public$$ 

override$$ 
void$$ 
Good$$ 
($$ 
)$$ 
{%% 
GoodG2B&& 
(&& 
)&& 
;&& 
GoodB2G'' 
('' 
)'' 
;'' 
}(( 
private++ 
void++ 
GoodG2B++ 
(++ 
)++ 
{,, 
int-- 
data-- 
;-- 
data// 
=// 
$num// 
;// <
0CWE369_Divide_by_Zero__int_Random_modulo_81_base00 8

baseObject009 C
=00D E
new00F I?
3CWE369_Divide_by_Zero__int_Random_modulo_81_goodG2B00J }
(00} ~
)00~ 
;	00 Ä

baseObject11 
.11 
Action11 
(11 
data11 
)11  
;11  !
}22 
private55 
void55 
GoodB2G55 
(55 
)55 
{66 
int77 
data77 
;77 
data99 
=99 
(99 
new99 
Random99 
(99 
)99 
)99 
.99 
Next99 "
(99" #
)99# $
;99$ %<
0CWE369_Divide_by_Zero__int_Random_modulo_81_base:: 8

baseObject::9 C
=::D E
new::F I?
3CWE369_Divide_by_Zero__int_Random_modulo_81_goodB2G::J }
(::} ~
)::~ 
;	:: Ä

baseObject;; 
.;; 
Action;; 
(;; 
data;; 
);;  
;;;  !
}<< 
}>> 
}?? ø
®C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_81_bad.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ;
/CWE369_Divide_by_Zero__int_Random_modulo_81_bad 5
:6 7<
0CWE369_Divide_by_Zero__int_Random_modulo_81_base8 h
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
}"" 
}## √
©C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_81_base.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
abstract 
class	 <
0CWE369_Divide_by_Zero__int_Random_modulo_81_base ?
{ 
public 

abstract 
void 
Action 
(  
int  #
data$ (
)) *
;* +
} 
} Ï	
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_81_goodB2G.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Random_modulo_81_goodB2G 9
:: ;<
0CWE369_Divide_by_Zero__int_Random_modulo_81_base< l
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
if   

(   
data   
!=   
$num   
)   
{!! 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
%""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
IO&& 
.&& 
	WriteLine&& 
(&& 
$str&& @
)&&@ A
;&&A B
}'' 	
}(( 
})) 
}** «
¨C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_Random_modulo_81_goodG2B.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class ?
3CWE369_Divide_by_Zero__int_Random_modulo_81_goodG2B 9
:: ;<
0CWE369_Divide_by_Zero__int_Random_modulo_81_base< l
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
}## 
}$$ ⁄,
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_01.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_01 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
data!! 
=!! 
int!! 
.!! 
MinValue!! 
;!! 
{"" 	
try$$ 
{%% 
string'' 
stringNumber'' #
=''$ %
Console''& -
.''- .
ReadLine''. 6
(''6 7
)''7 8
;''8 9
if(( 
((( 
stringNumber((  
!=((! #
null(($ (
)((( )
{)) 
try** 
{++ 
data,, 
=,, 
int,, "
.,," #
Parse,,# (
(,,( )
stringNumber,,) 5
.,,5 6
Trim,,6 :
(,,: ;
),,; <
),,< =
;,,= >
}-- 
catch.. 
(.. 
FormatException.. )
exceptNumberFormat..* <
)..< =
{// 
IO00 
.00 
Logger00 !
.00! "
Log00" %
(00% &
NLog00& *
.00* +
LogLevel00+ 3
.003 4
Warn004 8
,008 9
exceptNumberFormat00: L
,00L M
$str	00N Ä
)
00Ä Å
;
00Å Ç
}11 
}22 
}33 
catch44 
(44 
IOException44 
exceptIO44 '
)44' (
{55 
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 "
.66" #
LogLevel66# +
.66+ ,
Warn66, 0
,660 1
exceptIO662 :
,66: ;
$str66< W
)66W X
;66X Y
}77 
}88 	
IO;; 

.;;
 
	WriteLine;; 
(;; 
$str;;  
+;;! "
data;;# '
+;;( )
$str;;* /
+;;0 1
(;;2 3
$num;;3 6
/;;7 8
data;;9 =
);;= >
+;;? @
$str;;A E
);;E F
;;;F G
}<< 
public?? 

override?? 
void?? 
Good?? 
(?? 
)?? 
{@@ 
GoodG2BAA 
(AA 
)AA 
;AA 
GoodB2GBB 
(BB 
)BB 
;BB 
}CC 
privateFF 
voidFF 
GoodG2BFF 
(FF 
)FF 
{GG 
intHH 
dataHH 
;HH 
dataJJ 
=JJ 
$numJJ 
;JJ 
IOMM 

.MM
 
	WriteLineMM 
(MM 
$strMM  
+MM! "
dataMM# '
+MM( )
$strMM* /
+MM0 1
(MM2 3
$numMM3 6
/MM7 8
dataMM9 =
)MM= >
+MM? @
$strMMA E
)MME F
;MMF G
}NN 
privateQQ 
voidQQ 
GoodB2GQQ 
(QQ 
)QQ 
{RR 
intSS 
dataSS 
;SS 
dataTT 
=TT 
intTT 
.TT 
MinValueTT 
;TT 
{UU 	
tryWW 
{XX 
stringZZ 
stringNumberZZ #
=ZZ$ %
ConsoleZZ& -
.ZZ- .
ReadLineZZ. 6
(ZZ6 7
)ZZ7 8
;ZZ8 9
if[[ 
([[ 
stringNumber[[  
!=[[! #
null[[$ (
)[[( )
{\\ 
try]] 
{^^ 
data__ 
=__ 
int__ "
.__" #
Parse__# (
(__( )
stringNumber__) 5
.__5 6
Trim__6 :
(__: ;
)__; <
)__< =
;__= >
}`` 
catchaa 
(aa 
FormatExceptionaa )
exceptNumberFormataa* <
)aa< =
{bb 
IOcc 
.cc 
Loggercc !
.cc! "
Logcc" %
(cc% &
NLogcc& *
.cc* +
LogLevelcc+ 3
.cc3 4
Warncc4 8
,cc8 9
exceptNumberFormatcc: L
,ccL M
$str	ccN Ä
)
ccÄ Å
;
ccÅ Ç
}dd 
}ee 
}ff 
catchgg 
(gg 
IOExceptiongg 
exceptIOgg '
)gg' (
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptIOii2 :
,ii: ;
$strii< W
)iiW X
;iiX Y
}jj 
}kk 	
ifmm 

(mm 
datamm 
!=mm 
$nummm 
)mm 
{nn 	
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo 
+oo  !
dataoo" &
+oo' (
$stroo) .
+oo/ 0
(oo1 2
$numoo2 5
/oo6 7
dataoo8 <
)oo< =
+oo> ?
$stroo@ D
)ooD E
;ooE F
}pp 	
elseqq 
{rr 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss @
)ss@ A
;ssA B
}tt 	
}uu 
}ww 
}xx ÛV
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_02.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_02 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
true!! 
)!! 
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
trueBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
falseOO 
)OO 
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
trueZZ 
)ZZ 
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ $
+^^% &
data^^' +
+^^, -
$str^^. 3
+^^4 5
(^^6 7
$num^^7 :
/^^; <
data^^= A
)^^A B
+^^C D
$str^^E I
)^^I J
;^^J K
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
trueff 
)ff 
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
trueqq 
)qq 
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu $
+uu% &
datauu' +
+uu, -
$struu. 3
+uu4 5
(uu6 7
$numuu7 :
/uu; <
datauu= A
)uuA B
+uuC D
$struuE I
)uuI J
;uuJ K
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
true}} 
)}} 
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
false
ûû 
)
ûû 
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
/
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
true
µµ 
)
µµ 
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
true
÷÷ 
)
÷÷ 
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
/
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ —Y
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_03.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_03 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
$num!! 
==!! 
$num!! 
)!! 
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
$numBB 
==BB 
$numBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
$numOO 
!=OO 
$numOO 
)OO 
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
$numZZ 
==ZZ 
$numZZ 
)ZZ 
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ $
+^^% &
data^^' +
+^^, -
$str^^. 3
+^^4 5
(^^6 7
$num^^7 :
/^^; <
data^^= A
)^^A B
+^^C D
$str^^E I
)^^I J
;^^J K
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
$numff 
==ff 
$numff 
)ff 
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
$numqq 
==qq 
$numqq 
)qq 
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu $
+uu% &
datauu' +
+uu, -
$struu. 3
+uu4 5
(uu6 7
$numuu7 :
/uu; <
datauu= A
)uuA B
+uuC D
$struuE I
)uuI J
;uuJ K
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
$num}} 
==}} 
$num}} 
)}} 
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
$num
ûû 
!=
ûû 
$num
ûû 
)
ûû 
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
/
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
$num
µµ 
==
µµ 
$num
µµ 
)
µµ 
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
$num
÷÷ 
==
÷÷ 
$num
÷÷ 
)
÷÷ 
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
/
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ ΩZ
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_04.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_04 3
:4 5
AbstractTestCase6 F
{ 
private"" 
const"" 
bool"" 
PRIVATE_CONST_TRUE"" )
=""* +
true"", 0
;""0 1
private## 
const## 
bool## 
PRIVATE_CONST_FALSE## *
=##+ ,
false##- 2
;##2 3
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
int'' 
data'' 
;'' 
if(( 

((( 
PRIVATE_CONST_TRUE(( 
)(( 
{)) 	
data** 
=** 
int** 
.** 
MinValue** 
;**  
{++ 
try-- 
{.. 
string00 
stringNumber00 '
=00( )
Console00* 1
.001 2
ReadLine002 :
(00: ;
)00; <
;00< =
if11 
(11 
stringNumber11 $
!=11% '
null11( ,
)11, -
{22 
try33 
{44 
data55  
=55! "
int55# &
.55& '
Parse55' ,
(55, -
stringNumber55- 9
.559 :
Trim55: >
(55> ?
)55? @
)55@ A
;55A B
}66 
catch77 
(77 
FormatException77 -
exceptNumberFormat77. @
)77@ A
{88 
IO99 
.99 
Logger99 %
.99% &
Log99& )
(99) *
NLog99* .
.99. /
LogLevel99/ 7
.997 8
Warn998 <
,99< =
exceptNumberFormat99> P
,99P Q
$str	99R Ñ
)
99Ñ Ö
;
99Ö Ü
}:: 
};; 
}<< 
catch== 
(== 
IOException== "
exceptIO==# +
)==+ ,
{>> 
IO?? 
.?? 
Logger?? 
.?? 
Log?? !
(??! "
NLog??" &
.??& '
LogLevel??' /
.??/ 0
Warn??0 4
,??4 5
exceptIO??6 >
,??> ?
$str??@ [
)??[ \
;??\ ]
}@@ 
}AA 
}BB 	
elseCC 
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
ifII 

(II 
PRIVATE_CONST_TRUEII 
)II 
{JJ 	
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM $
+MM% &
dataMM' +
+MM, -
$strMM. 3
+MM4 5
(MM6 7
$numMM7 :
/MM; <
dataMM= A
)MMA B
+MMC D
$strMME I
)MMI J
;MMJ K
}NN 	
}OO 
privateSS 
voidSS 
GoodG2B1SS 
(SS 
)SS 
{TT 
intUU 
dataUU 
;UU 
ifVV 

(VV 
PRIVATE_CONST_FALSEVV 
)VV  
{WW 	
dataZZ 
=ZZ 
$numZZ 
;ZZ 
}[[ 	
else\\ 
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
ifaa 

(aa 
PRIVATE_CONST_TRUEaa 
)aa 
{bb 	
IOee 
.ee 
	WriteLineee 
(ee 
$stree $
+ee% &
dataee' +
+ee, -
$stree. 3
+ee4 5
(ee6 7
$numee7 :
/ee; <
dataee= A
)eeA B
+eeC D
$streeE I
)eeI J
;eeJ K
}ff 	
}gg 
privatejj 
voidjj 
GoodG2B2jj 
(jj 
)jj 
{kk 
intll 
datall 
;ll 
ifmm 

(mm 
PRIVATE_CONST_TRUEmm 
)mm 
{nn 	
datapp 
=pp 
$numpp 
;pp 
}qq 	
elserr 
{ss 	
datavv 
=vv 
$numvv 
;vv 
}ww 	
ifxx 

(xx 
PRIVATE_CONST_TRUExx 
)xx 
{yy 	
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| $
+||% &
data||' +
+||, -
$str||. 3
+||4 5
(||6 7
$num||7 :
/||; <
data||= A
)||A B
+||C D
$str||E I
)||I J
;||J K
}}} 	
}~~ 
private
ÅÅ 
void
ÅÅ 
GoodB2G1
ÅÅ 
(
ÅÅ 
)
ÅÅ 
{
ÇÇ 
int
ÉÉ 
data
ÉÉ 
;
ÉÉ 
if
ÑÑ 

(
ÑÑ  
PRIVATE_CONST_TRUE
ÑÑ 
)
ÑÑ 
{
ÖÖ 	
data
ÜÜ 
=
ÜÜ 
int
ÜÜ 
.
ÜÜ 
MinValue
ÜÜ 
;
ÜÜ  
{
áá 
try
ââ 
{
ää 
string
åå 
stringNumber
åå '
=
åå( )
Console
åå* 1
.
åå1 2
ReadLine
åå2 :
(
åå: ;
)
åå; <
;
åå< =
if
çç 
(
çç 
stringNumber
çç $
!=
çç% '
null
çç( ,
)
çç, -
{
éé 
try
èè 
{
êê 
data
ëë  
=
ëë! "
int
ëë# &
.
ëë& '
Parse
ëë' ,
(
ëë, -
stringNumber
ëë- 9
.
ëë9 :
Trim
ëë: >
(
ëë> ?
)
ëë? @
)
ëë@ A
;
ëëA B
}
íí 
catch
ìì 
(
ìì 
FormatException
ìì - 
exceptNumberFormat
ìì. @
)
ìì@ A
{
îî 
IO
ïï 
.
ïï 
Logger
ïï %
.
ïï% &
Log
ïï& )
(
ïï) *
NLog
ïï* .
.
ïï. /
LogLevel
ïï/ 7
.
ïï7 8
Warn
ïï8 <
,
ïï< = 
exceptNumberFormat
ïï> P
,
ïïP Q
$strïïR Ñ
)ïïÑ Ö
;ïïÖ Ü
}
ññ 
}
óó 
}
òò 
catch
ôô 
(
ôô 
IOException
ôô "
exceptIO
ôô# +
)
ôô+ ,
{
öö 
IO
õõ 
.
õõ 
Logger
õõ 
.
õõ 
Log
õõ !
(
õõ! "
NLog
õõ" &
.
õõ& '
LogLevel
õõ' /
.
õõ/ 0
Warn
õõ0 4
,
õõ4 5
exceptIO
õõ6 >
,
õõ> ?
$str
õõ@ [
)
õõ[ \
;
õõ\ ]
}
úú 
}
ùù 
}
ûû 	
else
üü 
{
†† 	
data
££ 
=
££ 
$num
££ 
;
££ 
}
§§ 	
if
•• 

(
•• !
PRIVATE_CONST_FALSE
•• 
)
••  
{
¶¶ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
©© 	
else
™™ 
{
´´ 	
if
≠≠ 
(
≠≠ 
data
≠≠ 
!=
≠≠ 
$num
≠≠ 
)
≠≠ 
{
ÆÆ 
IO
ØØ 
.
ØØ 
	WriteLine
ØØ 
(
ØØ 
$str
ØØ #
+
ØØ$ %
data
ØØ& *
+
ØØ+ ,
$str
ØØ- 2
+
ØØ3 4
(
ØØ5 6
$num
ØØ6 9
/
ØØ: ;
data
ØØ< @
)
ØØ@ A
+
ØØB C
$str
ØØD H
)
ØØH I
;
ØØI J
}
∞∞ 
else
±± 
{
≤≤ 
IO
≥≥ 
.
≥≥ 
	WriteLine
≥≥ 
(
≥≥ 
$str
≥≥ D
)
≥≥D E
;
≥≥E F
}
¥¥ 
}
µµ 	
}
∂∂ 
private
ππ 
void
ππ 
GoodB2G2
ππ 
(
ππ 
)
ππ 
{
∫∫ 
int
ªª 
data
ªª 
;
ªª 
if
ºº 

(
ºº  
PRIVATE_CONST_TRUE
ºº 
)
ºº 
{
ΩΩ 	
data
ææ 
=
ææ 
int
ææ 
.
ææ 
MinValue
ææ 
;
ææ  
{
øø 
try
¡¡ 
{
¬¬ 
string
ƒƒ 
stringNumber
ƒƒ '
=
ƒƒ( )
Console
ƒƒ* 1
.
ƒƒ1 2
ReadLine
ƒƒ2 :
(
ƒƒ: ;
)
ƒƒ; <
;
ƒƒ< =
if
≈≈ 
(
≈≈ 
stringNumber
≈≈ $
!=
≈≈% '
null
≈≈( ,
)
≈≈, -
{
∆∆ 
try
«« 
{
»» 
data
……  
=
……! "
int
……# &
.
……& '
Parse
……' ,
(
……, -
stringNumber
……- 9
.
……9 :
Trim
……: >
(
……> ?
)
……? @
)
……@ A
;
……A B
}
   
catch
ÀÀ 
(
ÀÀ 
FormatException
ÀÀ - 
exceptNumberFormat
ÀÀ. @
)
ÀÀ@ A
{
ÃÃ 
IO
ÕÕ 
.
ÕÕ 
Logger
ÕÕ %
.
ÕÕ% &
Log
ÕÕ& )
(
ÕÕ) *
NLog
ÕÕ* .
.
ÕÕ. /
LogLevel
ÕÕ/ 7
.
ÕÕ7 8
Warn
ÕÕ8 <
,
ÕÕ< = 
exceptNumberFormat
ÕÕ> P
,
ÕÕP Q
$strÕÕR Ñ
)ÕÕÑ Ö
;ÕÕÖ Ü
}
ŒŒ 
}
œœ 
}
–– 
catch
—— 
(
—— 
IOException
—— "
exceptIO
——# +
)
——+ ,
{
““ 
IO
”” 
.
”” 
Logger
”” 
.
”” 
Log
”” !
(
””! "
NLog
””" &
.
””& '
LogLevel
””' /
.
””/ 0
Warn
””0 4
,
””4 5
exceptIO
””6 >
,
””> ?
$str
””@ [
)
””[ \
;
””\ ]
}
‘‘ 
}
’’ 
}
÷÷ 	
else
◊◊ 
{
ÿÿ 	
data
€€ 
=
€€ 
$num
€€ 
;
€€ 
}
‹‹ 	
if
›› 

(
››  
PRIVATE_CONST_TRUE
›› 
)
›› 
{
ﬁﬁ 	
if
‡‡ 
(
‡‡ 
data
‡‡ 
!=
‡‡ 
$num
‡‡ 
)
‡‡ 
{
·· 
IO
‚‚ 
.
‚‚ 
	WriteLine
‚‚ 
(
‚‚ 
$str
‚‚ #
+
‚‚$ %
data
‚‚& *
+
‚‚+ ,
$str
‚‚- 2
+
‚‚3 4
(
‚‚5 6
$num
‚‚6 9
/
‚‚: ;
data
‚‚< @
)
‚‚@ A
+
‚‚B C
$str
‚‚D H
)
‚‚H I
;
‚‚I J
}
„„ 
else
‰‰ 
{
ÂÂ 
IO
ÊÊ 
.
ÊÊ 
	WriteLine
ÊÊ 
(
ÊÊ 
$str
ÊÊ D
)
ÊÊD E
;
ÊÊE F
}
ÁÁ 
}
ËË 	
}
ÈÈ 
public
ÎÎ 

override
ÎÎ 
void
ÎÎ 
Good
ÎÎ 
(
ÎÎ 
)
ÎÎ 
{
ÏÏ 
GoodG2B1
ÌÌ 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
GoodG2B2
ÓÓ 
(
ÓÓ 
)
ÓÓ 
;
ÓÓ 
GoodB2G1
ÔÔ 
(
ÔÔ 
)
ÔÔ 
;
ÔÔ 
GoodB2G2
 
(
 
)
 
;
 
}
ÒÒ 
}ÛÛ 
}ÙÙ √Y
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_05.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_05 3
:4 5
AbstractTestCase6 F
{ 
private!! 
bool!! 
privateTrue!! 
=!! 
true!! #
;!!# $
private"" 
bool"" 
privateFalse"" 
="" 
false""  %
;""% &
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
int&& 
data&& 
;&& 
if'' 

('' 
privateTrue'' 
)'' 
{(( 	
data)) 
=)) 
int)) 
.)) 
MinValue)) 
;))  
{** 
try,, 
{-- 
string// 
stringNumber// '
=//( )
Console//* 1
.//1 2
ReadLine//2 :
(//: ;
)//; <
;//< =
if00 
(00 
stringNumber00 $
!=00% '
null00( ,
)00, -
{11 
try22 
{33 
data44  
=44! "
int44# &
.44& '
Parse44' ,
(44, -
stringNumber44- 9
.449 :
Trim44: >
(44> ?
)44? @
)44@ A
;44A B
}55 
catch66 
(66 
FormatException66 -
exceptNumberFormat66. @
)66@ A
{77 
IO88 
.88 
Logger88 %
.88% &
Log88& )
(88) *
NLog88* .
.88. /
LogLevel88/ 7
.887 8
Warn888 <
,88< =
exceptNumberFormat88> P
,88P Q
$str	88R Ñ
)
88Ñ Ö
;
88Ö Ü
}99 
}:: 
};; 
catch<< 
(<< 
IOException<< "
exceptIO<<# +
)<<+ ,
{== 
IO>> 
.>> 
Logger>> 
.>> 
Log>> !
(>>! "
NLog>>" &
.>>& '
LogLevel>>' /
.>>/ 0
Warn>>0 4
,>>4 5
exceptIO>>6 >
,>>> ?
$str>>@ [
)>>[ \
;>>\ ]
}?? 
}@@ 
}AA 	
elseBB 
{CC 	
dataFF 
=FF 
$numFF 
;FF 
}GG 	
ifHH 

(HH 
privateTrueHH 
)HH 
{II 	
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL $
+LL% &
dataLL' +
+LL, -
$strLL. 3
+LL4 5
(LL6 7
$numLL7 :
/LL; <
dataLL= A
)LLA B
+LLC D
$strLLE I
)LLI J
;LLJ K
}MM 	
}NN 
privateRR 
voidRR 
GoodG2B1RR 
(RR 
)RR 
{SS 
intTT 
dataTT 
;TT 
ifUU 

(UU 
privateFalseUU 
)UU 
{VV 	
dataYY 
=YY 
$numYY 
;YY 
}ZZ 	
else[[ 
{\\ 	
data^^ 
=^^ 
$num^^ 
;^^ 
}__ 	
if`` 

(`` 
privateTrue`` 
)`` 
{aa 	
IOdd 
.dd 
	WriteLinedd 
(dd 
$strdd $
+dd% &
datadd' +
+dd, -
$strdd. 3
+dd4 5
(dd6 7
$numdd7 :
/dd; <
datadd= A
)ddA B
+ddC D
$strddE I
)ddI J
;ddJ K
}ee 	
}ff 
privateii 
voidii 
GoodG2B2ii 
(ii 
)ii 
{jj 
intkk 
datakk 
;kk 
ifll 

(ll 
privateTruell 
)ll 
{mm 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
$numuu 
;uu 
}vv 	
ifww 

(ww 
privateTrueww 
)ww 
{xx 	
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ $
+{{% &
data{{' +
+{{, -
$str{{. 3
+{{4 5
({{6 7
$num{{7 :
/{{; <
data{{= A
){{A B
+{{C D
$str{{E I
){{I J
;{{J K
}|| 	
}}} 
private
ÄÄ 
void
ÄÄ 
GoodB2G1
ÄÄ 
(
ÄÄ 
)
ÄÄ 
{
ÅÅ 
int
ÇÇ 
data
ÇÇ 
;
ÇÇ 
if
ÉÉ 

(
ÉÉ 
privateTrue
ÉÉ 
)
ÉÉ 
{
ÑÑ 	
data
ÖÖ 
=
ÖÖ 
int
ÖÖ 
.
ÖÖ 
MinValue
ÖÖ 
;
ÖÖ  
{
ÜÜ 
try
àà 
{
ââ 
string
ãã 
stringNumber
ãã '
=
ãã( )
Console
ãã* 1
.
ãã1 2
ReadLine
ãã2 :
(
ãã: ;
)
ãã; <
;
ãã< =
if
åå 
(
åå 
stringNumber
åå $
!=
åå% '
null
åå( ,
)
åå, -
{
çç 
try
éé 
{
èè 
data
êê  
=
êê! "
int
êê# &
.
êê& '
Parse
êê' ,
(
êê, -
stringNumber
êê- 9
.
êê9 :
Trim
êê: >
(
êê> ?
)
êê? @
)
êê@ A
;
êêA B
}
ëë 
catch
íí 
(
íí 
FormatException
íí - 
exceptNumberFormat
íí. @
)
íí@ A
{
ìì 
IO
îî 
.
îî 
Logger
îî %
.
îî% &
Log
îî& )
(
îî) *
NLog
îî* .
.
îî. /
LogLevel
îî/ 7
.
îî7 8
Warn
îî8 <
,
îî< = 
exceptNumberFormat
îî> P
,
îîP Q
$strîîR Ñ
)îîÑ Ö
;îîÖ Ü
}
ïï 
}
ññ 
}
óó 
catch
òò 
(
òò 
IOException
òò "
exceptIO
òò# +
)
òò+ ,
{
ôô 
IO
öö 
.
öö 
Logger
öö 
.
öö 
Log
öö !
(
öö! "
NLog
öö" &
.
öö& '
LogLevel
öö' /
.
öö/ 0
Warn
öö0 4
,
öö4 5
exceptIO
öö6 >
,
öö> ?
$str
öö@ [
)
öö[ \
;
öö\ ]
}
õõ 
}
úú 
}
ùù 	
else
ûû 
{
üü 	
data
¢¢ 
=
¢¢ 
$num
¢¢ 
;
¢¢ 
}
££ 	
if
§§ 

(
§§ 
privateFalse
§§ 
)
§§ 
{
•• 	
IO
ßß 
.
ßß 
	WriteLine
ßß 
(
ßß 
$str
ßß /
)
ßß/ 0
;
ßß0 1
}
®® 	
else
©© 
{
™™ 	
if
¨¨ 
(
¨¨ 
data
¨¨ 
!=
¨¨ 
$num
¨¨ 
)
¨¨ 
{
≠≠ 
IO
ÆÆ 
.
ÆÆ 
	WriteLine
ÆÆ 
(
ÆÆ 
$str
ÆÆ #
+
ÆÆ$ %
data
ÆÆ& *
+
ÆÆ+ ,
$str
ÆÆ- 2
+
ÆÆ3 4
(
ÆÆ5 6
$num
ÆÆ6 9
/
ÆÆ: ;
data
ÆÆ< @
)
ÆÆ@ A
+
ÆÆB C
$str
ÆÆD H
)
ÆÆH I
;
ÆÆI J
}
ØØ 
else
∞∞ 
{
±± 
IO
≤≤ 
.
≤≤ 
	WriteLine
≤≤ 
(
≤≤ 
$str
≤≤ D
)
≤≤D E
;
≤≤E F
}
≥≥ 
}
¥¥ 	
}
µµ 
private
∏∏ 
void
∏∏ 
GoodB2G2
∏∏ 
(
∏∏ 
)
∏∏ 
{
ππ 
int
∫∫ 
data
∫∫ 
;
∫∫ 
if
ªª 

(
ªª 
privateTrue
ªª 
)
ªª 
{
ºº 	
data
ΩΩ 
=
ΩΩ 
int
ΩΩ 
.
ΩΩ 
MinValue
ΩΩ 
;
ΩΩ  
{
ææ 
try
¿¿ 
{
¡¡ 
string
√√ 
stringNumber
√√ '
=
√√( )
Console
√√* 1
.
√√1 2
ReadLine
√√2 :
(
√√: ;
)
√√; <
;
√√< =
if
ƒƒ 
(
ƒƒ 
stringNumber
ƒƒ $
!=
ƒƒ% '
null
ƒƒ( ,
)
ƒƒ, -
{
≈≈ 
try
∆∆ 
{
«« 
data
»»  
=
»»! "
int
»»# &
.
»»& '
Parse
»»' ,
(
»», -
stringNumber
»»- 9
.
»»9 :
Trim
»»: >
(
»»> ?
)
»»? @
)
»»@ A
;
»»A B
}
…… 
catch
   
(
   
FormatException
   - 
exceptNumberFormat
  . @
)
  @ A
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ %
.
ÃÃ% &
Log
ÃÃ& )
(
ÃÃ) *
NLog
ÃÃ* .
.
ÃÃ. /
LogLevel
ÃÃ/ 7
.
ÃÃ7 8
Warn
ÃÃ8 <
,
ÃÃ< = 
exceptNumberFormat
ÃÃ> P
,
ÃÃP Q
$strÃÃR Ñ
)ÃÃÑ Ö
;ÃÃÖ Ü
}
ÕÕ 
}
ŒŒ 
}
œœ 
catch
–– 
(
–– 
IOException
–– "
exceptIO
––# +
)
––+ ,
{
—— 
IO
““ 
.
““ 
Logger
““ 
.
““ 
Log
““ !
(
““! "
NLog
““" &
.
““& '
LogLevel
““' /
.
““/ 0
Warn
““0 4
,
““4 5
exceptIO
““6 >
,
““> ?
$str
““@ [
)
““[ \
;
““\ ]
}
”” 
}
‘‘ 
}
’’ 	
else
÷÷ 
{
◊◊ 	
data
⁄⁄ 
=
⁄⁄ 
$num
⁄⁄ 
;
⁄⁄ 
}
€€ 	
if
‹‹ 

(
‹‹ 
privateTrue
‹‹ 
)
‹‹ 
{
›› 	
if
ﬂﬂ 
(
ﬂﬂ 
data
ﬂﬂ 
!=
ﬂﬂ 
$num
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
IO
·· 
.
·· 
	WriteLine
·· 
(
·· 
$str
·· #
+
··$ %
data
··& *
+
··+ ,
$str
··- 2
+
··3 4
(
··5 6
$num
··6 9
/
··: ;
data
··< @
)
··@ A
+
··B C
$str
··D H
)
··H I
;
··I J
}
‚‚ 
else
„„ 
{
‰‰ 
IO
ÂÂ 
.
ÂÂ 
	WriteLine
ÂÂ 
(
ÂÂ 
$str
ÂÂ D
)
ÂÂD E
;
ÂÂE F
}
ÊÊ 
}
ÁÁ 	
}
ËË 
public
ÍÍ 

override
ÍÍ 
void
ÍÍ 
Good
ÍÍ 
(
ÍÍ 
)
ÍÍ 
{
ÎÎ 
GoodG2B1
ÏÏ 
(
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodG2B2
ÌÌ 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
GoodB2G1
ÓÓ 
(
ÓÓ 
)
ÓÓ 
;
ÓÓ 
GoodB2G2
ÔÔ 
(
ÔÔ 
)
ÔÔ 
;
ÔÔ 
}
 
}ÚÚ 
}ÛÛ à\
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_06.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_06 3
:4 5
AbstractTestCase6 F
{ 
private!! 
const!! 
int!! 
PRIVATE_CONST_FIVE!! (
=!!) *
$num!!+ ,
;!!, -
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
;%% 
if&& 

(&& 
PRIVATE_CONST_FIVE&& 
==&&  
$num&&  !
)&&! "
{'' 	
data(( 
=(( 
int(( 
.(( 
MinValue(( 
;((  
{)) 
try++ 
{,, 
string.. 
stringNumber.. '
=..( )
Console..* 1
...1 2
ReadLine..2 :
(..: ;
)..; <
;..< =
if// 
(// 
stringNumber// $
!=//% '
null//( ,
)//, -
{00 
try11 
{22 
data33  
=33! "
int33# &
.33& '
Parse33' ,
(33, -
stringNumber33- 9
.339 :
Trim33: >
(33> ?
)33? @
)33@ A
;33A B
}44 
catch55 
(55 
FormatException55 -
exceptNumberFormat55. @
)55@ A
{66 
IO77 
.77 
Logger77 %
.77% &
Log77& )
(77) *
NLog77* .
.77. /
LogLevel77/ 7
.777 8
Warn778 <
,77< =
exceptNumberFormat77> P
,77P Q
$str	77R Ñ
)
77Ñ Ö
;
77Ö Ü
}88 
}99 
}:: 
catch;; 
(;; 
IOException;; "
exceptIO;;# +
);;+ ,
{<< 
IO== 
.== 
Logger== 
.== 
Log== !
(==! "
NLog==" &
.==& '
LogLevel==' /
.==/ 0
Warn==0 4
,==4 5
exceptIO==6 >
,==> ?
$str==@ [
)==[ \
;==\ ]
}>> 
}?? 
}@@ 	
elseAA 
{BB 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
ifGG 

(GG 
PRIVATE_CONST_FIVEGG 
==GG  
$numGG  !
)GG! "
{HH 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK $
+KK% &
dataKK' +
+KK, -
$strKK. 3
+KK4 5
(KK6 7
$numKK7 :
/KK; <
dataKK= A
)KKA B
+KKC D
$strKKE I
)KKI J
;KKJ K
}LL 	
}MM 
privateQQ 
voidQQ 
GoodG2B1QQ 
(QQ 
)QQ 
{RR 
intSS 
dataSS 
;SS 
ifTT 

(TT 
PRIVATE_CONST_FIVETT 
!=TT  
$numTT  !
)TT! "
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
elseZZ 
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
PRIVATE_CONST_FIVE__ 
==__  
$num__  !
)__! "
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc $
+cc% &
datacc' +
+cc, -
$strcc. 3
+cc4 5
(cc6 7
$numcc7 :
/cc; <
datacc= A
)ccA B
+ccC D
$strccE I
)ccI J
;ccJ K
}dd 	
}ee 
privatehh 
voidhh 
GoodG2B2hh 
(hh 
)hh 
{ii 
intjj 
datajj 
;jj 
ifkk 

(kk 
PRIVATE_CONST_FIVEkk 
==kk  
$numkk  !
)kk! "
{ll 	
datann 
=nn 
$numnn 
;nn 
}oo 	
elsepp 
{qq 	
datatt 
=tt 
$numtt 
;tt 
}uu 	
ifvv 

(vv 
PRIVATE_CONST_FIVEvv 
==vv  
$numvv  !
)vv! "
{ww 	
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz $
+zz% &
datazz' +
+zz, -
$strzz. 3
+zz4 5
(zz6 7
$numzz7 :
/zz; <
datazz= A
)zzA B
+zzC D
$strzzE I
)zzI J
;zzJ K
}{{ 	
}|| 
private 
void 
GoodB2G1 
( 
) 
{
ÄÄ 
int
ÅÅ 
data
ÅÅ 
;
ÅÅ 
if
ÇÇ 

(
ÇÇ  
PRIVATE_CONST_FIVE
ÇÇ 
==
ÇÇ  
$num
ÇÇ  !
)
ÇÇ! "
{
ÉÉ 	
data
ÑÑ 
=
ÑÑ 
int
ÑÑ 
.
ÑÑ 
MinValue
ÑÑ 
;
ÑÑ  
{
ÖÖ 
try
áá 
{
àà 
string
ää 
stringNumber
ää '
=
ää( )
Console
ää* 1
.
ää1 2
ReadLine
ää2 :
(
ää: ;
)
ää; <
;
ää< =
if
ãã 
(
ãã 
stringNumber
ãã $
!=
ãã% '
null
ãã( ,
)
ãã, -
{
åå 
try
çç 
{
éé 
data
èè  
=
èè! "
int
èè# &
.
èè& '
Parse
èè' ,
(
èè, -
stringNumber
èè- 9
.
èè9 :
Trim
èè: >
(
èè> ?
)
èè? @
)
èè@ A
;
èèA B
}
êê 
catch
ëë 
(
ëë 
FormatException
ëë - 
exceptNumberFormat
ëë. @
)
ëë@ A
{
íí 
IO
ìì 
.
ìì 
Logger
ìì %
.
ìì% &
Log
ìì& )
(
ìì) *
NLog
ìì* .
.
ìì. /
LogLevel
ìì/ 7
.
ìì7 8
Warn
ìì8 <
,
ìì< = 
exceptNumberFormat
ìì> P
,
ììP Q
$strììR Ñ
)ììÑ Ö
;ììÖ Ü
}
îî 
}
ïï 
}
ññ 
catch
óó 
(
óó 
IOException
óó "
exceptIO
óó# +
)
óó+ ,
{
òò 
IO
ôô 
.
ôô 
Logger
ôô 
.
ôô 
Log
ôô !
(
ôô! "
NLog
ôô" &
.
ôô& '
LogLevel
ôô' /
.
ôô/ 0
Warn
ôô0 4
,
ôô4 5
exceptIO
ôô6 >
,
ôô> ?
$str
ôô@ [
)
ôô[ \
;
ôô\ ]
}
öö 
}
õõ 
}
úú 	
else
ùù 
{
ûû 	
data
°° 
=
°° 
$num
°° 
;
°° 
}
¢¢ 	
if
££ 

(
££  
PRIVATE_CONST_FIVE
££ 
!=
££  
$num
££  !
)
££! "
{
§§ 	
IO
¶¶ 
.
¶¶ 
	WriteLine
¶¶ 
(
¶¶ 
$str
¶¶ /
)
¶¶/ 0
;
¶¶0 1
}
ßß 	
else
®® 
{
©© 	
if
´´ 
(
´´ 
data
´´ 
!=
´´ 
$num
´´ 
)
´´ 
{
¨¨ 
IO
≠≠ 
.
≠≠ 
	WriteLine
≠≠ 
(
≠≠ 
$str
≠≠ #
+
≠≠$ %
data
≠≠& *
+
≠≠+ ,
$str
≠≠- 2
+
≠≠3 4
(
≠≠5 6
$num
≠≠6 9
/
≠≠: ;
data
≠≠< @
)
≠≠@ A
+
≠≠B C
$str
≠≠D H
)
≠≠H I
;
≠≠I J
}
ÆÆ 
else
ØØ 
{
∞∞ 
IO
±± 
.
±± 
	WriteLine
±± 
(
±± 
$str
±± D
)
±±D E
;
±±E F
}
≤≤ 
}
≥≥ 	
}
¥¥ 
private
∑∑ 
void
∑∑ 
GoodB2G2
∑∑ 
(
∑∑ 
)
∑∑ 
{
∏∏ 
int
ππ 
data
ππ 
;
ππ 
if
∫∫ 

(
∫∫  
PRIVATE_CONST_FIVE
∫∫ 
==
∫∫  
$num
∫∫  !
)
∫∫! "
{
ªª 	
data
ºº 
=
ºº 
int
ºº 
.
ºº 
MinValue
ºº 
;
ºº  
{
ΩΩ 
try
øø 
{
¿¿ 
string
¬¬ 
stringNumber
¬¬ '
=
¬¬( )
Console
¬¬* 1
.
¬¬1 2
ReadLine
¬¬2 :
(
¬¬: ;
)
¬¬; <
;
¬¬< =
if
√√ 
(
√√ 
stringNumber
√√ $
!=
√√% '
null
√√( ,
)
√√, -
{
ƒƒ 
try
≈≈ 
{
∆∆ 
data
««  
=
««! "
int
««# &
.
««& '
Parse
««' ,
(
««, -
stringNumber
««- 9
.
««9 :
Trim
««: >
(
««> ?
)
««? @
)
««@ A
;
««A B
}
»» 
catch
…… 
(
…… 
FormatException
…… - 
exceptNumberFormat
……. @
)
……@ A
{
   
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ %
.
ÀÀ% &
Log
ÀÀ& )
(
ÀÀ) *
NLog
ÀÀ* .
.
ÀÀ. /
LogLevel
ÀÀ/ 7
.
ÀÀ7 8
Warn
ÀÀ8 <
,
ÀÀ< = 
exceptNumberFormat
ÀÀ> P
,
ÀÀP Q
$strÀÀR Ñ
)ÀÀÑ Ö
;ÀÀÖ Ü
}
ÃÃ 
}
ÕÕ 
}
ŒŒ 
catch
œœ 
(
œœ 
IOException
œœ "
exceptIO
œœ# +
)
œœ+ ,
{
–– 
IO
—— 
.
—— 
Logger
—— 
.
—— 
Log
—— !
(
——! "
NLog
——" &
.
——& '
LogLevel
——' /
.
——/ 0
Warn
——0 4
,
——4 5
exceptIO
——6 >
,
——> ?
$str
——@ [
)
——[ \
;
——\ ]
}
““ 
}
”” 
}
‘‘ 	
else
’’ 
{
÷÷ 	
data
ŸŸ 
=
ŸŸ 
$num
ŸŸ 
;
ŸŸ 
}
⁄⁄ 	
if
€€ 

(
€€  
PRIVATE_CONST_FIVE
€€ 
==
€€  
$num
€€  !
)
€€! "
{
‹‹ 	
if
ﬁﬁ 
(
ﬁﬁ 
data
ﬁﬁ 
!=
ﬁﬁ 
$num
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
IO
‡‡ 
.
‡‡ 
	WriteLine
‡‡ 
(
‡‡ 
$str
‡‡ #
+
‡‡$ %
data
‡‡& *
+
‡‡+ ,
$str
‡‡- 2
+
‡‡3 4
(
‡‡5 6
$num
‡‡6 9
/
‡‡: ;
data
‡‡< @
)
‡‡@ A
+
‡‡B C
$str
‡‡D H
)
‡‡H I
;
‡‡I J
}
·· 
else
‚‚ 
{
„„ 
IO
‰‰ 
.
‰‰ 
	WriteLine
‰‰ 
(
‰‰ 
$str
‰‰ D
)
‰‰D E
;
‰‰E F
}
ÂÂ 
}
ÊÊ 	
}
ÁÁ 
public
ÈÈ 

override
ÈÈ 
void
ÈÈ 
Good
ÈÈ 
(
ÈÈ 
)
ÈÈ 
{
ÍÍ 
GoodG2B1
ÎÎ 
(
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodG2B2
ÏÏ 
(
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodB2G1
ÌÌ 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
GoodB2G2
ÓÓ 
(
ÓÓ 
)
ÓÓ 
;
ÓÓ 
}
ÔÔ 
}ÒÒ 
}ÚÚ ®[
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_07.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_07 3
:4 5
AbstractTestCase6 F
{ 
private!! 
int!! 
privateFive!! 
=!! 
$num!! 
;!!  
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
;%% 
if&& 

(&& 
privateFive&& 
==&& 
$num&& 
)&& 
{'' 	
data(( 
=(( 
int(( 
.(( 
MinValue(( 
;((  
{)) 
try++ 
{,, 
string.. 
stringNumber.. '
=..( )
Console..* 1
...1 2
ReadLine..2 :
(..: ;
)..; <
;..< =
if// 
(// 
stringNumber// $
!=//% '
null//( ,
)//, -
{00 
try11 
{22 
data33  
=33! "
int33# &
.33& '
Parse33' ,
(33, -
stringNumber33- 9
.339 :
Trim33: >
(33> ?
)33? @
)33@ A
;33A B
}44 
catch55 
(55 
FormatException55 -
exceptNumberFormat55. @
)55@ A
{66 
IO77 
.77 
Logger77 %
.77% &
Log77& )
(77) *
NLog77* .
.77. /
LogLevel77/ 7
.777 8
Warn778 <
,77< =
exceptNumberFormat77> P
,77P Q
$str	77R Ñ
)
77Ñ Ö
;
77Ö Ü
}88 
}99 
}:: 
catch;; 
(;; 
IOException;; "
exceptIO;;# +
);;+ ,
{<< 
IO== 
.== 
Logger== 
.== 
Log== !
(==! "
NLog==" &
.==& '
LogLevel==' /
.==/ 0
Warn==0 4
,==4 5
exceptIO==6 >
,==> ?
$str==@ [
)==[ \
;==\ ]
}>> 
}?? 
}@@ 	
elseAA 
{BB 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
ifGG 

(GG 
privateFiveGG 
==GG 
$numGG 
)GG 
{HH 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK $
+KK% &
dataKK' +
+KK, -
$strKK. 3
+KK4 5
(KK6 7
$numKK7 :
/KK; <
dataKK= A
)KKA B
+KKC D
$strKKE I
)KKI J
;KKJ K
}LL 	
}MM 
privateQQ 
voidQQ 
GoodG2B1QQ 
(QQ 
)QQ 
{RR 
intSS 
dataSS 
;SS 
ifTT 

(TT 
privateFiveTT 
!=TT 
$numTT 
)TT 
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
elseZZ 
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
privateFive__ 
==__ 
$num__ 
)__ 
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc $
+cc% &
datacc' +
+cc, -
$strcc. 3
+cc4 5
(cc6 7
$numcc7 :
/cc; <
datacc= A
)ccA B
+ccC D
$strccE I
)ccI J
;ccJ K
}dd 	
}ee 
privatehh 
voidhh 
GoodG2B2hh 
(hh 
)hh 
{ii 
intjj 
datajj 
;jj 
ifkk 

(kk 
privateFivekk 
==kk 
$numkk 
)kk 
{ll 	
datann 
=nn 
$numnn 
;nn 
}oo 	
elsepp 
{qq 	
datatt 
=tt 
$numtt 
;tt 
}uu 	
ifvv 

(vv 
privateFivevv 
==vv 
$numvv 
)vv 
{ww 	
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz $
+zz% &
datazz' +
+zz, -
$strzz. 3
+zz4 5
(zz6 7
$numzz7 :
/zz; <
datazz= A
)zzA B
+zzC D
$strzzE I
)zzI J
;zzJ K
}{{ 	
}|| 
private 
void 
GoodB2G1 
( 
) 
{
ÄÄ 
int
ÅÅ 
data
ÅÅ 
;
ÅÅ 
if
ÇÇ 

(
ÇÇ 
privateFive
ÇÇ 
==
ÇÇ 
$num
ÇÇ 
)
ÇÇ 
{
ÉÉ 	
data
ÑÑ 
=
ÑÑ 
int
ÑÑ 
.
ÑÑ 
MinValue
ÑÑ 
;
ÑÑ  
{
ÖÖ 
try
áá 
{
àà 
string
ää 
stringNumber
ää '
=
ää( )
Console
ää* 1
.
ää1 2
ReadLine
ää2 :
(
ää: ;
)
ää; <
;
ää< =
if
ãã 
(
ãã 
stringNumber
ãã $
!=
ãã% '
null
ãã( ,
)
ãã, -
{
åå 
try
çç 
{
éé 
data
èè  
=
èè! "
int
èè# &
.
èè& '
Parse
èè' ,
(
èè, -
stringNumber
èè- 9
.
èè9 :
Trim
èè: >
(
èè> ?
)
èè? @
)
èè@ A
;
èèA B
}
êê 
catch
ëë 
(
ëë 
FormatException
ëë - 
exceptNumberFormat
ëë. @
)
ëë@ A
{
íí 
IO
ìì 
.
ìì 
Logger
ìì %
.
ìì% &
Log
ìì& )
(
ìì) *
NLog
ìì* .
.
ìì. /
LogLevel
ìì/ 7
.
ìì7 8
Warn
ìì8 <
,
ìì< = 
exceptNumberFormat
ìì> P
,
ììP Q
$strììR Ñ
)ììÑ Ö
;ììÖ Ü
}
îî 
}
ïï 
}
ññ 
catch
óó 
(
óó 
IOException
óó "
exceptIO
óó# +
)
óó+ ,
{
òò 
IO
ôô 
.
ôô 
Logger
ôô 
.
ôô 
Log
ôô !
(
ôô! "
NLog
ôô" &
.
ôô& '
LogLevel
ôô' /
.
ôô/ 0
Warn
ôô0 4
,
ôô4 5
exceptIO
ôô6 >
,
ôô> ?
$str
ôô@ [
)
ôô[ \
;
ôô\ ]
}
öö 
}
õõ 
}
úú 	
else
ùù 
{
ûû 	
data
°° 
=
°° 
$num
°° 
;
°° 
}
¢¢ 	
if
££ 

(
££ 
privateFive
££ 
!=
££ 
$num
££ 
)
££ 
{
§§ 	
IO
¶¶ 
.
¶¶ 
	WriteLine
¶¶ 
(
¶¶ 
$str
¶¶ /
)
¶¶/ 0
;
¶¶0 1
}
ßß 	
else
®® 
{
©© 	
if
´´ 
(
´´ 
data
´´ 
!=
´´ 
$num
´´ 
)
´´ 
{
¨¨ 
IO
≠≠ 
.
≠≠ 
	WriteLine
≠≠ 
(
≠≠ 
$str
≠≠ #
+
≠≠$ %
data
≠≠& *
+
≠≠+ ,
$str
≠≠- 2
+
≠≠3 4
(
≠≠5 6
$num
≠≠6 9
/
≠≠: ;
data
≠≠< @
)
≠≠@ A
+
≠≠B C
$str
≠≠D H
)
≠≠H I
;
≠≠I J
}
ÆÆ 
else
ØØ 
{
∞∞ 
IO
±± 
.
±± 
	WriteLine
±± 
(
±± 
$str
±± D
)
±±D E
;
±±E F
}
≤≤ 
}
≥≥ 	
}
¥¥ 
private
∑∑ 
void
∑∑ 
GoodB2G2
∑∑ 
(
∑∑ 
)
∑∑ 
{
∏∏ 
int
ππ 
data
ππ 
;
ππ 
if
∫∫ 

(
∫∫ 
privateFive
∫∫ 
==
∫∫ 
$num
∫∫ 
)
∫∫ 
{
ªª 	
data
ºº 
=
ºº 
int
ºº 
.
ºº 
MinValue
ºº 
;
ºº  
{
ΩΩ 
try
øø 
{
¿¿ 
string
¬¬ 
stringNumber
¬¬ '
=
¬¬( )
Console
¬¬* 1
.
¬¬1 2
ReadLine
¬¬2 :
(
¬¬: ;
)
¬¬; <
;
¬¬< =
if
√√ 
(
√√ 
stringNumber
√√ $
!=
√√% '
null
√√( ,
)
√√, -
{
ƒƒ 
try
≈≈ 
{
∆∆ 
data
««  
=
««! "
int
««# &
.
««& '
Parse
««' ,
(
««, -
stringNumber
««- 9
.
««9 :
Trim
««: >
(
««> ?
)
««? @
)
««@ A
;
««A B
}
»» 
catch
…… 
(
…… 
FormatException
…… - 
exceptNumberFormat
……. @
)
……@ A
{
   
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ %
.
ÀÀ% &
Log
ÀÀ& )
(
ÀÀ) *
NLog
ÀÀ* .
.
ÀÀ. /
LogLevel
ÀÀ/ 7
.
ÀÀ7 8
Warn
ÀÀ8 <
,
ÀÀ< = 
exceptNumberFormat
ÀÀ> P
,
ÀÀP Q
$strÀÀR Ñ
)ÀÀÑ Ö
;ÀÀÖ Ü
}
ÃÃ 
}
ÕÕ 
}
ŒŒ 
catch
œœ 
(
œœ 
IOException
œœ "
exceptIO
œœ# +
)
œœ+ ,
{
–– 
IO
—— 
.
—— 
Logger
—— 
.
—— 
Log
—— !
(
——! "
NLog
——" &
.
——& '
LogLevel
——' /
.
——/ 0
Warn
——0 4
,
——4 5
exceptIO
——6 >
,
——> ?
$str
——@ [
)
——[ \
;
——\ ]
}
““ 
}
”” 
}
‘‘ 	
else
’’ 
{
÷÷ 	
data
ŸŸ 
=
ŸŸ 
$num
ŸŸ 
;
ŸŸ 
}
⁄⁄ 	
if
€€ 

(
€€ 
privateFive
€€ 
==
€€ 
$num
€€ 
)
€€ 
{
‹‹ 	
if
ﬁﬁ 
(
ﬁﬁ 
data
ﬁﬁ 
!=
ﬁﬁ 
$num
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
IO
‡‡ 
.
‡‡ 
	WriteLine
‡‡ 
(
‡‡ 
$str
‡‡ #
+
‡‡$ %
data
‡‡& *
+
‡‡+ ,
$str
‡‡- 2
+
‡‡3 4
(
‡‡5 6
$num
‡‡6 9
/
‡‡: ;
data
‡‡< @
)
‡‡@ A
+
‡‡B C
$str
‡‡D H
)
‡‡H I
;
‡‡I J
}
·· 
else
‚‚ 
{
„„ 
IO
‰‰ 
.
‰‰ 
	WriteLine
‰‰ 
(
‰‰ 
$str
‰‰ D
)
‰‰D E
;
‰‰E F
}
ÂÂ 
}
ÊÊ 	
}
ÁÁ 
public
ÈÈ 

override
ÈÈ 
void
ÈÈ 
Good
ÈÈ 
(
ÈÈ 
)
ÈÈ 
{
ÍÍ 
GoodG2B1
ÎÎ 
(
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodG2B2
ÏÏ 
(
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodB2G1
ÌÌ 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
GoodB2G2
ÓÓ 
(
ÓÓ 
)
ÓÓ 
;
ÓÓ 
}
ÔÔ 
}ÒÒ 
}ÚÚ ß^
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_08.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_08 3
:4 5
AbstractTestCase6 F
{ 
private!! 
static!! 
bool!! 
PrivateReturnsTrue!! *
(!!* +
)!!+ ,
{"" 
return## 
true## 
;## 
}$$ 
private&& 
static&& 
bool&& 
PrivateReturnsFalse&& +
(&&+ ,
)&&, -
{'' 
return(( 
false(( 
;(( 
})) 
public++ 

override++ 
void++ 
Bad++ 
(++ 
)++ 
{,, 
int-- 
data-- 
;-- 
if.. 

(.. 
PrivateReturnsTrue.. 
(.. 
)..  
)..  !
{// 	
data00 
=00 
int00 
.00 
MinValue00 
;00  
{11 
try33 
{44 
string66 
stringNumber66 '
=66( )
Console66* 1
.661 2
ReadLine662 :
(66: ;
)66; <
;66< =
if77 
(77 
stringNumber77 $
!=77% '
null77( ,
)77, -
{88 
try99 
{:: 
data;;  
=;;! "
int;;# &
.;;& '
Parse;;' ,
(;;, -
stringNumber;;- 9
.;;9 :
Trim;;: >
(;;> ?
);;? @
);;@ A
;;;A B
}<< 
catch== 
(== 
FormatException== -
exceptNumberFormat==. @
)==@ A
{>> 
IO?? 
.?? 
Logger?? %
.??% &
Log??& )
(??) *
NLog??* .
.??. /
LogLevel??/ 7
.??7 8
Warn??8 <
,??< =
exceptNumberFormat??> P
,??P Q
$str	??R Ñ
)
??Ñ Ö
;
??Ö Ü
}@@ 
}AA 
}BB 
catchCC 
(CC 
IOExceptionCC "
exceptIOCC# +
)CC+ ,
{DD 
IOEE 
.EE 
LoggerEE 
.EE 
LogEE !
(EE! "
NLogEE" &
.EE& '
LogLevelEE' /
.EE/ 0
WarnEE0 4
,EE4 5
exceptIOEE6 >
,EE> ?
$strEE@ [
)EE[ \
;EE\ ]
}FF 
}GG 
}HH 	
elseII 
{JJ 	
dataMM 
=MM 
$numMM 
;MM 
}NN 	
ifOO 

(OO 
PrivateReturnsTrueOO 
(OO 
)OO  
)OO  !
{PP 	
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS $
+SS% &
dataSS' +
+SS, -
$strSS. 3
+SS4 5
(SS6 7
$numSS7 :
/SS; <
dataSS= A
)SSA B
+SSC D
$strSSE I
)SSI J
;SSJ K
}TT 	
}UU 
privateYY 
voidYY 
GoodG2B1YY 
(YY 
)YY 
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
PrivateReturnsFalse\\ 
(\\  
)\\  !
)\\! "
{]] 	
data`` 
=`` 
$num`` 
;`` 
}aa 	
elsebb 
{cc 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
PrivateReturnsTruegg 
(gg 
)gg  
)gg  !
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk $
+kk% &
datakk' +
+kk, -
$strkk. 3
+kk4 5
(kk6 7
$numkk7 :
/kk; <
datakk= A
)kkA B
+kkC D
$strkkE I
)kkI J
;kkJ K
}ll 	
}mm 
privatepp 
voidpp 
GoodG2B2pp 
(pp 
)pp 
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
PrivateReturnsTruess 
(ss 
)ss  
)ss  !
{tt 	
datavv 
=vv 
$numvv 
;vv 
}ww 	
elsexx 
{yy 	
data|| 
=|| 
$num|| 
;|| 
}}} 	
if~~ 

(~~ 
PrivateReturnsTrue~~ 
(~~ 
)~~  
)~~  !
{ 	
IO
ÇÇ 
.
ÇÇ 
	WriteLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ $
+
ÇÇ% &
data
ÇÇ' +
+
ÇÇ, -
$str
ÇÇ. 3
+
ÇÇ4 5
(
ÇÇ6 7
$num
ÇÇ7 :
/
ÇÇ; <
data
ÇÇ= A
)
ÇÇA B
+
ÇÇC D
$str
ÇÇE I
)
ÇÇI J
;
ÇÇJ K
}
ÉÉ 	
}
ÑÑ 
private
áá 
void
áá 
GoodB2G1
áá 
(
áá 
)
áá 
{
àà 
int
ââ 
data
ââ 
;
ââ 
if
ää 

(
ää  
PrivateReturnsTrue
ää 
(
ää 
)
ää  
)
ää  !
{
ãã 	
data
åå 
=
åå 
int
åå 
.
åå 
MinValue
åå 
;
åå  
{
çç 
try
èè 
{
êê 
string
íí 
stringNumber
íí '
=
íí( )
Console
íí* 1
.
íí1 2
ReadLine
íí2 :
(
íí: ;
)
íí; <
;
íí< =
if
ìì 
(
ìì 
stringNumber
ìì $
!=
ìì% '
null
ìì( ,
)
ìì, -
{
îî 
try
ïï 
{
ññ 
data
óó  
=
óó! "
int
óó# &
.
óó& '
Parse
óó' ,
(
óó, -
stringNumber
óó- 9
.
óó9 :
Trim
óó: >
(
óó> ?
)
óó? @
)
óó@ A
;
óóA B
}
òò 
catch
ôô 
(
ôô 
FormatException
ôô - 
exceptNumberFormat
ôô. @
)
ôô@ A
{
öö 
IO
õõ 
.
õõ 
Logger
õõ %
.
õõ% &
Log
õõ& )
(
õõ) *
NLog
õõ* .
.
õõ. /
LogLevel
õõ/ 7
.
õõ7 8
Warn
õõ8 <
,
õõ< = 
exceptNumberFormat
õõ> P
,
õõP Q
$strõõR Ñ
)õõÑ Ö
;õõÖ Ü
}
úú 
}
ùù 
}
ûû 
catch
üü 
(
üü 
IOException
üü "
exceptIO
üü# +
)
üü+ ,
{
†† 
IO
°° 
.
°° 
Logger
°° 
.
°° 
Log
°° !
(
°°! "
NLog
°°" &
.
°°& '
LogLevel
°°' /
.
°°/ 0
Warn
°°0 4
,
°°4 5
exceptIO
°°6 >
,
°°> ?
$str
°°@ [
)
°°[ \
;
°°\ ]
}
¢¢ 
}
££ 
}
§§ 	
else
•• 
{
¶¶ 	
data
©© 
=
©© 
$num
©© 
;
©© 
}
™™ 	
if
´´ 

(
´´ !
PrivateReturnsFalse
´´ 
(
´´  
)
´´  !
)
´´! "
{
¨¨ 	
IO
ÆÆ 
.
ÆÆ 
	WriteLine
ÆÆ 
(
ÆÆ 
$str
ÆÆ /
)
ÆÆ/ 0
;
ÆÆ0 1
}
ØØ 	
else
∞∞ 
{
±± 	
if
≥≥ 
(
≥≥ 
data
≥≥ 
!=
≥≥ 
$num
≥≥ 
)
≥≥ 
{
¥¥ 
IO
µµ 
.
µµ 
	WriteLine
µµ 
(
µµ 
$str
µµ #
+
µµ$ %
data
µµ& *
+
µµ+ ,
$str
µµ- 2
+
µµ3 4
(
µµ5 6
$num
µµ6 9
/
µµ: ;
data
µµ< @
)
µµ@ A
+
µµB C
$str
µµD H
)
µµH I
;
µµI J
}
∂∂ 
else
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ D
)
ππD E
;
ππE F
}
∫∫ 
}
ªª 	
}
ºº 
private
øø 
void
øø 
GoodB2G2
øø 
(
øø 
)
øø 
{
¿¿ 
int
¡¡ 
data
¡¡ 
;
¡¡ 
if
¬¬ 

(
¬¬  
PrivateReturnsTrue
¬¬ 
(
¬¬ 
)
¬¬  
)
¬¬  !
{
√√ 	
data
ƒƒ 
=
ƒƒ 
int
ƒƒ 
.
ƒƒ 
MinValue
ƒƒ 
;
ƒƒ  
{
≈≈ 
try
«« 
{
»» 
string
   
stringNumber
   '
=
  ( )
Console
  * 1
.
  1 2
ReadLine
  2 :
(
  : ;
)
  ; <
;
  < =
if
ÀÀ 
(
ÀÀ 
stringNumber
ÀÀ $
!=
ÀÀ% '
null
ÀÀ( ,
)
ÀÀ, -
{
ÃÃ 
try
ÕÕ 
{
ŒŒ 
data
œœ  
=
œœ! "
int
œœ# &
.
œœ& '
Parse
œœ' ,
(
œœ, -
stringNumber
œœ- 9
.
œœ9 :
Trim
œœ: >
(
œœ> ?
)
œœ? @
)
œœ@ A
;
œœA B
}
–– 
catch
—— 
(
—— 
FormatException
—— - 
exceptNumberFormat
——. @
)
——@ A
{
““ 
IO
”” 
.
”” 
Logger
”” %
.
””% &
Log
””& )
(
””) *
NLog
””* .
.
””. /
LogLevel
””/ 7
.
””7 8
Warn
””8 <
,
””< = 
exceptNumberFormat
””> P
,
””P Q
$str””R Ñ
)””Ñ Ö
;””Ö Ü
}
‘‘ 
}
’’ 
}
÷÷ 
catch
◊◊ 
(
◊◊ 
IOException
◊◊ "
exceptIO
◊◊# +
)
◊◊+ ,
{
ÿÿ 
IO
ŸŸ 
.
ŸŸ 
Logger
ŸŸ 
.
ŸŸ 
Log
ŸŸ !
(
ŸŸ! "
NLog
ŸŸ" &
.
ŸŸ& '
LogLevel
ŸŸ' /
.
ŸŸ/ 0
Warn
ŸŸ0 4
,
ŸŸ4 5
exceptIO
ŸŸ6 >
,
ŸŸ> ?
$str
ŸŸ@ [
)
ŸŸ[ \
;
ŸŸ\ ]
}
⁄⁄ 
}
€€ 
}
‹‹ 	
else
›› 
{
ﬁﬁ 	
data
·· 
=
·· 
$num
·· 
;
·· 
}
‚‚ 	
if
„„ 

(
„„  
PrivateReturnsTrue
„„ 
(
„„ 
)
„„  
)
„„  !
{
‰‰ 	
if
ÊÊ 
(
ÊÊ 
data
ÊÊ 
!=
ÊÊ 
$num
ÊÊ 
)
ÊÊ 
{
ÁÁ 
IO
ËË 
.
ËË 
	WriteLine
ËË 
(
ËË 
$str
ËË #
+
ËË$ %
data
ËË& *
+
ËË+ ,
$str
ËË- 2
+
ËË3 4
(
ËË5 6
$num
ËË6 9
/
ËË: ;
data
ËË< @
)
ËË@ A
+
ËËB C
$str
ËËD H
)
ËËH I
;
ËËI J
}
ÈÈ 
else
ÍÍ 
{
ÎÎ 
IO
ÏÏ 
.
ÏÏ 
	WriteLine
ÏÏ 
(
ÏÏ 
$str
ÏÏ D
)
ÏÏD E
;
ÏÏE F
}
ÌÌ 
}
ÓÓ 	
}
ÔÔ 
public
ÒÒ 

override
ÒÒ 
void
ÒÒ 
Good
ÒÒ 
(
ÒÒ 
)
ÒÒ 
{
ÚÚ 
GoodG2B1
ÛÛ 
(
ÛÛ 
)
ÛÛ 
;
ÛÛ 
GoodG2B2
ÙÙ 
(
ÙÙ 
)
ÙÙ 
;
ÙÙ 
GoodB2G1
ıı 
(
ıı 
)
ıı 
;
ıı 
GoodB2G2
ˆˆ 
(
ˆˆ 
)
ˆˆ 
;
ˆˆ 
}
˜˜ 
}˘˘ 
}˙˙ ’Z
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_09.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_09 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
IO!! 
.!!  
STATIC_READONLY_TRUE!! #
)!!# $
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB  
STATIC_READONLY_TRUEBB #
)BB# $
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO !
STATIC_READONLY_FALSEOO $
)OO$ %
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ  
STATIC_READONLY_TRUEZZ #
)ZZ# $
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ $
+^^% &
data^^' +
+^^, -
$str^^. 3
+^^4 5
(^^6 7
$num^^7 :
/^^; <
data^^= A
)^^A B
+^^C D
$str^^E I
)^^I J
;^^J K
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
IOff 
.ff  
STATIC_READONLY_TRUEff #
)ff# $
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
IOqq 
.qq  
STATIC_READONLY_TRUEqq #
)qq# $
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu $
+uu% &
datauu' +
+uu, -
$struu. 3
+uu4 5
(uu6 7
$numuu7 :
/uu; <
datauu= A
)uuA B
+uuC D
$struuE I
)uuI J
;uuJ K
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
IO}} 
.}}  
STATIC_READONLY_TRUE}} #
)}}# $
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
IO
ûû 
.
ûû #
STATIC_READONLY_FALSE
ûû $
)
ûû$ %
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
/
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
IO
µµ 
.
µµ "
STATIC_READONLY_TRUE
µµ #
)
µµ# $
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
IO
÷÷ 
.
÷÷ "
STATIC_READONLY_TRUE
÷÷ #
)
÷÷# $
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
/
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ ÒY
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_10.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_10 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
IO!! 
.!! 

staticTrue!! 
)!! 
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB 

staticTrueBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO 
staticFalseOO 
)OO 
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ 

staticTrueZZ 
)ZZ 
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ $
+^^% &
data^^' +
+^^, -
$str^^. 3
+^^4 5
(^^6 7
$num^^7 :
/^^; <
data^^= A
)^^A B
+^^C D
$str^^E I
)^^I J
;^^J K
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
IOff 
.ff 

staticTrueff 
)ff 
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
IOqq 
.qq 

staticTrueqq 
)qq 
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu $
+uu% &
datauu' +
+uu, -
$struu. 3
+uu4 5
(uu6 7
$numuu7 :
/uu; <
datauu= A
)uuA B
+uuC D
$struuE I
)uuI J
;uuJ K
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
IO}} 
.}} 

staticTrue}} 
)}} 
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
IO
ûû 
.
ûû 
staticFalse
ûû 
)
ûû 
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
/
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
IO
µµ 
.
µµ 

staticTrue
µµ 
)
µµ 
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
IO
÷÷ 
.
÷÷ 

staticTrue
÷÷ 
)
÷÷ 
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
/
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ Ô\
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_11.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_11 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
IO!! 
.!! 
StaticReturnsTrue!!  
(!!  !
)!!! "
)!!" #
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB
 
IOBB 
.BB 
StaticReturnsTrueBB 
(BB  
)BB  !
)BB! "
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO 
StaticReturnsFalseOO !
(OO! "
)OO" #
)OO# $
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ 
StaticReturnsTrueZZ  
(ZZ  !
)ZZ! "
)ZZ" #
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ $
+^^% &
data^^' +
+^^, -
$str^^. 3
+^^4 5
(^^6 7
$num^^7 :
/^^; <
data^^= A
)^^A B
+^^C D
$str^^E I
)^^I J
;^^J K
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
IOff 
.ff 
StaticReturnsTrueff  
(ff  !
)ff! "
)ff" #
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
IOqq 
.qq 
StaticReturnsTrueqq  
(qq  !
)qq! "
)qq" #
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu $
+uu% &
datauu' +
+uu, -
$struu. 3
+uu4 5
(uu6 7
$numuu7 :
/uu; <
datauu= A
)uuA B
+uuC D
$struuE I
)uuI J
;uuJ K
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
IO}} 
.}} 
StaticReturnsTrue}}  
(}}  !
)}}! "
)}}" #
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
IO
ûû 
.
ûû  
StaticReturnsFalse
ûû !
(
ûû! "
)
ûû" #
)
ûû# $
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
/
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
IO
µµ 
.
µµ 
StaticReturnsTrue
µµ  
(
µµ  !
)
µµ! "
)
µµ" #
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
IO
÷÷ 
.
÷÷ 
StaticReturnsTrue
÷÷  
(
÷÷  !
)
÷÷! "
)
÷÷" #
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
/
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ ÅU
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_12.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_12 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!!
 
IO!! 
.!! $
StaticReturnsTrueOrFalse!! &
(!!& '
)!!' (
)!!( )
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA
 
IOAA 
.AA $
StaticReturnsTrueOrFalseAA &
(AA& '
)AA' (
)AA( )
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE $
+EE% &
dataEE' +
+EE, -
$strEE. 3
+EE4 5
(EE6 7
$numEE7 :
/EE; <
dataEE= A
)EEA B
+EEC D
$strEEE I
)EEI J
;EEJ K
}FF 	
elseGG 
{HH 	
ifJJ 
(JJ 
dataJJ 
!=JJ 
$numJJ 
)JJ 
{KK 
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL #
+LL$ %
dataLL& *
+LL+ ,
$strLL- 2
+LL3 4
(LL5 6
$numLL6 9
/LL: ;
dataLL< @
)LL@ A
+LLB C
$strLLD H
)LLH I
;LLI J
}MM 
elseNN 
{OO 
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP D
)PPD E
;PPE F
}QQ 
}RR 	
}SS 
privateXX 
voidXX 
GoodG2BXX 
(XX 
)XX 
{YY 
intZZ 
dataZZ 
;ZZ 
if[[ 

([[
 
IO[[ 
.[[ $
StaticReturnsTrueOrFalse[[ &
([[& '
)[[' (
)[[( )
{\\ 	
data^^ 
=^^ 
$num^^ 
;^^ 
}__ 	
else`` 
{aa 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee
 
IOee 
.ee $
StaticReturnsTrueOrFalseee &
(ee& '
)ee' (
)ee( )
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii $
+ii% &
dataii' +
+ii, -
$strii. 3
+ii4 5
(ii6 7
$numii7 :
/ii; <
dataii= A
)iiA B
+iiC D
$striiE I
)iiI J
;iiJ K
}jj 	
elsekk 
{ll 	
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo $
+oo% &
dataoo' +
+oo, -
$stroo. 3
+oo4 5
(oo6 7
$numoo7 :
/oo; <
dataoo= A
)ooA B
+ooC D
$strooE I
)ooI J
;ooJ K
}pp 	
}qq 
privateuu 
voiduu 
GoodB2Guu 
(uu 
)uu 
{vv 
intww 
dataww 
;ww 
ifxx 

(xx
 
IOxx 
.xx $
StaticReturnsTrueOrFalsexx &
(xx& '
)xx' (
)xx( )
{yy 	
datazz 
=zz 
intzz 
.zz 
MinValuezz 
;zz  
{{{ 
try}} 
{~~ 
string
ÄÄ 
stringNumber
ÄÄ '
=
ÄÄ( )
Console
ÄÄ* 1
.
ÄÄ1 2
ReadLine
ÄÄ2 :
(
ÄÄ: ;
)
ÄÄ; <
;
ÄÄ< =
if
ÅÅ 
(
ÅÅ 
stringNumber
ÅÅ $
!=
ÅÅ% '
null
ÅÅ( ,
)
ÅÅ, -
{
ÇÇ 
try
ÉÉ 
{
ÑÑ 
data
ÖÖ  
=
ÖÖ! "
int
ÖÖ# &
.
ÖÖ& '
Parse
ÖÖ' ,
(
ÖÖ, -
stringNumber
ÖÖ- 9
.
ÖÖ9 :
Trim
ÖÖ: >
(
ÖÖ> ?
)
ÖÖ? @
)
ÖÖ@ A
;
ÖÖA B
}
ÜÜ 
catch
áá 
(
áá 
FormatException
áá - 
exceptNumberFormat
áá. @
)
áá@ A
{
àà 
IO
ââ 
.
ââ 
Logger
ââ %
.
ââ% &
Log
ââ& )
(
ââ) *
NLog
ââ* .
.
ââ. /
LogLevel
ââ/ 7
.
ââ7 8
Warn
ââ8 <
,
ââ< = 
exceptNumberFormat
ââ> P
,
ââP Q
$strââR Ñ
)ââÑ Ö
;ââÖ Ü
}
ää 
}
ãã 
}
åå 
catch
çç 
(
çç 
IOException
çç "
exceptIO
çç# +
)
çç+ ,
{
éé 
IO
èè 
.
èè 
Logger
èè 
.
èè 
Log
èè !
(
èè! "
NLog
èè" &
.
èè& '
LogLevel
èè' /
.
èè/ 0
Warn
èè0 4
,
èè4 5
exceptIO
èè6 >
,
èè> ?
$str
èè@ [
)
èè[ \
;
èè\ ]
}
êê 
}
ëë 
}
íí 	
else
ìì 
{
îî 	
data
ïï 
=
ïï 
int
ïï 
.
ïï 
MinValue
ïï 
;
ïï  
{
ññ 
try
òò 
{
ôô 
string
õõ 
stringNumber
õõ '
=
õõ( )
Console
õõ* 1
.
õõ1 2
ReadLine
õõ2 :
(
õõ: ;
)
õõ; <
;
õõ< =
if
úú 
(
úú 
stringNumber
úú $
!=
úú% '
null
úú( ,
)
úú, -
{
ùù 
try
ûû 
{
üü 
data
††  
=
††! "
int
††# &
.
††& '
Parse
††' ,
(
††, -
stringNumber
††- 9
.
††9 :
Trim
††: >
(
††> ?
)
††? @
)
††@ A
;
††A B
}
°° 
catch
¢¢ 
(
¢¢ 
FormatException
¢¢ - 
exceptNumberFormat
¢¢. @
)
¢¢@ A
{
££ 
IO
§§ 
.
§§ 
Logger
§§ %
.
§§% &
Log
§§& )
(
§§) *
NLog
§§* .
.
§§. /
LogLevel
§§/ 7
.
§§7 8
Warn
§§8 <
,
§§< = 
exceptNumberFormat
§§> P
,
§§P Q
$str§§R Ñ
)§§Ñ Ö
;§§Ö Ü
}
•• 
}
¶¶ 
}
ßß 
catch
®® 
(
®® 
IOException
®® "
exceptIO
®®# +
)
®®+ ,
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5
exceptIO
™™6 >
,
™™> ?
$str
™™@ [
)
™™[ \
;
™™\ ]
}
´´ 
}
¨¨ 
}
≠≠ 	
if
ÆÆ 

(
ÆÆ
 
IO
ÆÆ 
.
ÆÆ &
StaticReturnsTrueOrFalse
ÆÆ &
(
ÆÆ& '
)
ÆÆ' (
)
ÆÆ( )
{
ØØ 	
if
±± 
(
±± 
data
±± 
!=
±± 
$num
±± 
)
±± 
{
≤≤ 
IO
≥≥ 
.
≥≥ 
	WriteLine
≥≥ 
(
≥≥ 
$str
≥≥ #
+
≥≥$ %
data
≥≥& *
+
≥≥+ ,
$str
≥≥- 2
+
≥≥3 4
(
≥≥5 6
$num
≥≥6 9
/
≥≥: ;
data
≥≥< @
)
≥≥@ A
+
≥≥B C
$str
≥≥D H
)
≥≥H I
;
≥≥I J
}
¥¥ 
else
µµ 
{
∂∂ 
IO
∑∑ 
.
∑∑ 
	WriteLine
∑∑ 
(
∑∑ 
$str
∑∑ D
)
∑∑D E
;
∑∑E F
}
∏∏ 
}
ππ 	
else
∫∫ 
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
/
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
)
»» 
{
   
GoodG2B
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 
}œœ 
}–– ≥]
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_13.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_13 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
IO!! 
.!!  
STATIC_READONLY_FIVE!! #
==!!# %
$num!!% &
)!!& '
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB  
STATIC_READONLY_FIVEBB #
==BB# %
$numBB% &
)BB& '
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO  
STATIC_READONLY_FIVEOO #
!=OO# %
$numOO% &
)OO& '
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ  
STATIC_READONLY_FIVEZZ #
==ZZ# %
$numZZ% &
)ZZ& '
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ $
+^^% &
data^^' +
+^^, -
$str^^. 3
+^^4 5
(^^6 7
$num^^7 :
/^^; <
data^^= A
)^^A B
+^^C D
$str^^E I
)^^I J
;^^J K
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
IOff 
.ff  
STATIC_READONLY_FIVEff #
==ff# %
$numff% &
)ff& '
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
IOqq 
.qq  
STATIC_READONLY_FIVEqq #
==qq# %
$numqq% &
)qq& '
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu $
+uu% &
datauu' +
+uu, -
$struu. 3
+uu4 5
(uu6 7
$numuu7 :
/uu; <
datauu= A
)uuA B
+uuC D
$struuE I
)uuI J
;uuJ K
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
IO}} 
.}}  
STATIC_READONLY_FIVE}} #
==}}# %
$num}}% &
)}}& '
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
IO
ûû 
.
ûû "
STATIC_READONLY_FIVE
ûû #
!=
ûû# %
$num
ûû% &
)
ûû& '
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
/
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
IO
µµ 
.
µµ "
STATIC_READONLY_FIVE
µµ #
==
µµ# %
$num
µµ% &
)
µµ& '
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
IO
÷÷ 
.
÷÷ "
STATIC_READONLY_FIVE
÷÷ #
==
÷÷# %
$num
÷÷% &
)
÷÷& '
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
/
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ œ\
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_14.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_14 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
IO!! 
.!! 

staticFive!! 
==!! 
$num!! 
)!! 
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB 

staticFiveBB 
==BB 
$numBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO 

staticFiveOO 
!=OO 
$numOO 
)OO 
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ 

staticFiveZZ 
==ZZ 
$numZZ 
)ZZ 
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ $
+^^% &
data^^' +
+^^, -
$str^^. 3
+^^4 5
(^^6 7
$num^^7 :
/^^; <
data^^= A
)^^A B
+^^C D
$str^^E I
)^^I J
;^^J K
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
IOff 
.ff 

staticFiveff 
==ff 
$numff 
)ff 
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
IOqq 
.qq 

staticFiveqq 
==qq 
$numqq 
)qq 
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu $
+uu% &
datauu' +
+uu, -
$struu. 3
+uu4 5
(uu6 7
$numuu7 :
/uu; <
datauu= A
)uuA B
+uuC D
$struuE I
)uuI J
;uuJ K
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
IO}} 
.}} 

staticFive}} 
==}} 
$num}} 
)}} 
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
IO
ûû 
.
ûû 

staticFive
ûû 
!=
ûû 
$num
ûû 
)
ûû 
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
/
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
IO
µµ 
.
µµ 

staticFive
µµ 
==
µµ 
$num
µµ 
)
µµ 
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
IO
÷÷ 
.
÷÷ 

staticFive
÷÷ 
==
÷÷ 
$num
÷÷ 
)
÷÷ 
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
/
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ õf
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_15.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_15 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
switch!! 
(!! 
$num!! 
)!! 
{"" 	
case## 
$num## 
:## 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$  
{%% 
try'' 
{(( 
string** 
stringNumber** '
=**( )
Console*** 1
.**1 2
ReadLine**2 :
(**: ;
)**; <
;**< =
if++ 
(++ 
stringNumber++ $
!=++% '
null++( ,
)++, -
{,, 
try-- 
{.. 
data//  
=//! "
int//# &
.//& '
Parse//' ,
(//, -
stringNumber//- 9
.//9 :
Trim//: >
(//> ?
)//? @
)//@ A
;//A B
}00 
catch11 
(11 
FormatException11 -
exceptNumberFormat11. @
)11@ A
{22 
IO33 
.33 
Logger33 %
.33% &
Log33& )
(33) *
NLog33* .
.33. /
LogLevel33/ 7
.337 8
Warn338 <
,33< =
exceptNumberFormat33> P
,33P Q
$str	33R Ñ
)
33Ñ Ö
;
33Ö Ü
}44 
}55 
}66 
catch77 
(77 
IOException77 "
exceptIO77# +
)77+ ,
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptIO996 >
,99> ?
$str99@ [
)99[ \
;99\ ]
}:: 
};; 
break<< 
;<< 
default== 
:== 
data@@ 
=@@ 
$num@@ 
;@@ 
breakAA 
;AA 
}BB 	
switchCC 
(CC 
$numCC 
)CC 
{DD 	
caseEE 
$numEE 
:EE 
IOHH 
.HH 
	WriteLineHH 
(HH 
$strHH $
+HH% &
dataHH' +
+HH, -
$strHH. 3
+HH4 5
(HH6 7
$numHH7 :
/HH; <
dataHH= A
)HHA B
+HHC D
$strHHE I
)HHI J
;HHJ K
breakII 
;II 
defaultJJ 
:JJ 
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL /
)LL/ 0
;LL0 1
breakMM 
;MM 
}NN 	
}OO 
privateSS 
voidSS 
GoodG2B1SS 
(SS 
)SS 
{TT 
intUU 
dataUU 
;UU 
switchVV 
(VV 
$numVV 
)VV 
{WW 	
caseXX 
$numXX 
:XX 
data[[ 
=[[ 
$num[[ 
;[[ 
break\\ 
;\\ 
default]] 
:]] 
data__ 
=__ 
$num__ 
;__ 
break`` 
;`` 
}aa 	
switchbb 
(bb 
$numbb 
)bb 
{cc 	
casedd 
$numdd 
:dd 
IOgg 
.gg 
	WriteLinegg 
(gg 
$strgg $
+gg% &
datagg' +
+gg, -
$strgg. 3
+gg4 5
(gg6 7
$numgg7 :
/gg; <
datagg= A
)ggA B
+ggC D
$strggE I
)ggI J
;ggJ K
breakhh 
;hh 
defaultii 
:ii 
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk /
)kk/ 0
;kk0 1
breakll 
;ll 
}mm 	
}nn 
privateqq 
voidqq 
GoodG2B2qq 
(qq 
)qq 
{rr 
intss 
datass 
;ss 
switchtt 
(tt 
$numtt 
)tt 
{uu 	
casevv 
$numvv 
:vv 
dataxx 
=xx 
$numxx 
;xx 
breakyy 
;yy 
defaultzz 
:zz 
data}} 
=}} 
$num}} 
;}} 
break~~ 
;~~ 
} 	
switch
ÄÄ 
(
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
{
ÅÅ 	
case
ÇÇ 
$num
ÇÇ 
:
ÇÇ 
IO
ÖÖ 
.
ÖÖ 
	WriteLine
ÖÖ 
(
ÖÖ 
$str
ÖÖ $
+
ÖÖ% &
data
ÖÖ' +
+
ÖÖ, -
$str
ÖÖ. 3
+
ÖÖ4 5
(
ÖÖ6 7
$num
ÖÖ7 :
/
ÖÖ; <
data
ÖÖ= A
)
ÖÖA B
+
ÖÖC D
$str
ÖÖE I
)
ÖÖI J
;
ÖÖJ K
break
ÜÜ 
;
ÜÜ 
default
áá 
:
áá 
IO
ââ 
.
ââ 
	WriteLine
ââ 
(
ââ 
$str
ââ /
)
ââ/ 0
;
ââ0 1
break
ää 
;
ää 
}
ãã 	
}
åå 
private
èè 
void
èè 
GoodB2G1
èè 
(
èè 
)
èè 
{
êê 
int
ëë 
data
ëë 
;
ëë 
switch
íí 
(
íí 
$num
íí 
)
íí 
{
ìì 	
case
îî 
$num
îî 
:
îî 
data
ïï 
=
ïï 
int
ïï 
.
ïï 
MinValue
ïï 
;
ïï  
{
ññ 
try
òò 
{
ôô 
string
õõ 
stringNumber
õõ '
=
õõ( )
Console
õõ* 1
.
õõ1 2
ReadLine
õõ2 :
(
õõ: ;
)
õõ; <
;
õõ< =
if
úú 
(
úú 
stringNumber
úú $
!=
úú% '
null
úú( ,
)
úú, -
{
ùù 
try
ûû 
{
üü 
data
††  
=
††! "
int
††# &
.
††& '
Parse
††' ,
(
††, -
stringNumber
††- 9
.
††9 :
Trim
††: >
(
††> ?
)
††? @
)
††@ A
;
††A B
}
°° 
catch
¢¢ 
(
¢¢ 
FormatException
¢¢ - 
exceptNumberFormat
¢¢. @
)
¢¢@ A
{
££ 
IO
§§ 
.
§§ 
Logger
§§ %
.
§§% &
Log
§§& )
(
§§) *
NLog
§§* .
.
§§. /
LogLevel
§§/ 7
.
§§7 8
Warn
§§8 <
,
§§< = 
exceptNumberFormat
§§> P
,
§§P Q
$str§§R Ñ
)§§Ñ Ö
;§§Ö Ü
}
•• 
}
¶¶ 
}
ßß 
catch
®® 
(
®® 
IOException
®® "
exceptIO
®®# +
)
®®+ ,
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5
exceptIO
™™6 >
,
™™> ?
$str
™™@ [
)
™™[ \
;
™™\ ]
}
´´ 
}
¨¨ 
break
≠≠ 
;
≠≠ 
default
ÆÆ 
:
ÆÆ 
data
±± 
=
±± 
$num
±± 
;
±± 
break
≤≤ 
;
≤≤ 
}
≥≥ 	
switch
¥¥ 
(
¥¥ 
$num
¥¥ 
)
¥¥ 
{
µµ 	
case
∂∂ 
$num
∂∂ 
:
∂∂ 
IO
∏∏ 
.
∏∏ 
	WriteLine
∏∏ 
(
∏∏ 
$str
∏∏ /
)
∏∏/ 0
;
∏∏0 1
break
ππ 
;
ππ 
default
∫∫ 
:
∫∫ 
if
ºº 
(
ºº 
data
ºº 
!=
ºº 
$num
ºº 
)
ºº 
{
ΩΩ 
IO
ææ 
.
ææ 
	WriteLine
ææ 
(
ææ 
$str
ææ #
+
ææ$ %
data
ææ& *
+
ææ+ ,
$str
ææ- 2
+
ææ3 4
(
ææ5 6
$num
ææ6 9
/
ææ: ;
data
ææ< @
)
ææ@ A
+
ææB C
$str
ææD H
)
ææH I
;
ææI J
}
øø 
else
¿¿ 
{
¡¡ 
IO
¬¬ 
.
¬¬ 
	WriteLine
¬¬ 
(
¬¬ 
$str
¬¬ D
)
¬¬D E
;
¬¬E F
}
√√ 
break
ƒƒ 
;
ƒƒ 
}
≈≈ 	
}
∆∆ 
private
…… 
void
…… 
GoodB2G2
…… 
(
…… 
)
…… 
{
   
int
ÀÀ 
data
ÀÀ 
;
ÀÀ 
switch
ÃÃ 
(
ÃÃ 
$num
ÃÃ 
)
ÃÃ 
{
ÕÕ 	
case
ŒŒ 
$num
ŒŒ 
:
ŒŒ 
data
œœ 
=
œœ 
int
œœ 
.
œœ 
MinValue
œœ 
;
œœ  
{
–– 
try
““ 
{
”” 
string
’’ 
stringNumber
’’ '
=
’’( )
Console
’’* 1
.
’’1 2
ReadLine
’’2 :
(
’’: ;
)
’’; <
;
’’< =
if
÷÷ 
(
÷÷ 
stringNumber
÷÷ $
!=
÷÷% '
null
÷÷( ,
)
÷÷, -
{
◊◊ 
try
ÿÿ 
{
ŸŸ 
data
⁄⁄  
=
⁄⁄! "
int
⁄⁄# &
.
⁄⁄& '
Parse
⁄⁄' ,
(
⁄⁄, -
stringNumber
⁄⁄- 9
.
⁄⁄9 :
Trim
⁄⁄: >
(
⁄⁄> ?
)
⁄⁄? @
)
⁄⁄@ A
;
⁄⁄A B
}
€€ 
catch
‹‹ 
(
‹‹ 
FormatException
‹‹ - 
exceptNumberFormat
‹‹. @
)
‹‹@ A
{
›› 
IO
ﬁﬁ 
.
ﬁﬁ 
Logger
ﬁﬁ %
.
ﬁﬁ% &
Log
ﬁﬁ& )
(
ﬁﬁ) *
NLog
ﬁﬁ* .
.
ﬁﬁ. /
LogLevel
ﬁﬁ/ 7
.
ﬁﬁ7 8
Warn
ﬁﬁ8 <
,
ﬁﬁ< = 
exceptNumberFormat
ﬁﬁ> P
,
ﬁﬁP Q
$strﬁﬁR Ñ
)ﬁﬁÑ Ö
;ﬁﬁÖ Ü
}
ﬂﬂ 
}
‡‡ 
}
·· 
catch
‚‚ 
(
‚‚ 
IOException
‚‚ "
exceptIO
‚‚# +
)
‚‚+ ,
{
„„ 
IO
‰‰ 
.
‰‰ 
Logger
‰‰ 
.
‰‰ 
Log
‰‰ !
(
‰‰! "
NLog
‰‰" &
.
‰‰& '
LogLevel
‰‰' /
.
‰‰/ 0
Warn
‰‰0 4
,
‰‰4 5
exceptIO
‰‰6 >
,
‰‰> ?
$str
‰‰@ [
)
‰‰[ \
;
‰‰\ ]
}
ÂÂ 
}
ÊÊ 
break
ÁÁ 
;
ÁÁ 
default
ËË 
:
ËË 
data
ÎÎ 
=
ÎÎ 
$num
ÎÎ 
;
ÎÎ 
break
ÏÏ 
;
ÏÏ 
}
ÌÌ 	
switch
ÓÓ 
(
ÓÓ 
$num
ÓÓ 
)
ÓÓ 
{
ÔÔ 	
case
 
$num
 
:
 
if
ÚÚ 
(
ÚÚ 
data
ÚÚ 
!=
ÚÚ 
$num
ÚÚ 
)
ÚÚ 
{
ÛÛ 
IO
ÙÙ 
.
ÙÙ 
	WriteLine
ÙÙ 
(
ÙÙ 
$str
ÙÙ #
+
ÙÙ$ %
data
ÙÙ& *
+
ÙÙ+ ,
$str
ÙÙ- 2
+
ÙÙ3 4
(
ÙÙ5 6
$num
ÙÙ6 9
/
ÙÙ: ;
data
ÙÙ< @
)
ÙÙ@ A
+
ÙÙB C
$str
ÙÙD H
)
ÙÙH I
;
ÙÙI J
}
ıı 
else
ˆˆ 
{
˜˜ 
IO
¯¯ 
.
¯¯ 
	WriteLine
¯¯ 
(
¯¯ 
$str
¯¯ D
)
¯¯D E
;
¯¯E F
}
˘˘ 
break
˙˙ 
;
˙˙ 
default
˚˚ 
:
˚˚ 
IO
˝˝ 
.
˝˝ 
	WriteLine
˝˝ 
(
˝˝ 
$str
˝˝ /
)
˝˝/ 0
;
˝˝0 1
break
˛˛ 
;
˛˛ 
}
ˇˇ 	
}
ÄÄ 
public
ÇÇ 

override
ÇÇ 
void
ÇÇ 
Good
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
GoodG2B1
ÑÑ 
(
ÑÑ 
)
ÑÑ 
;
ÑÑ 
GoodG2B2
ÖÖ 
(
ÖÖ 
)
ÖÖ 
;
ÖÖ 
GoodB2G1
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
GoodB2G2
áá 
(
áá 
)
áá 
;
áá 
}
àà 
}ää 
}ãã Æ3
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_16.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_16 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
while!! 
(!! 
true!! 
)!! 
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
break;; 
;;; 
}<< 	
while== 
(== 
true== 
)== 
{>> 	
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA $
+AA% &
dataAA' +
+AA, -
$strAA. 3
+AA4 5
(AA6 7
$numAA7 :
/AA; <
dataAA= A
)AAA B
+AAC D
$strAAE I
)AAI J
;AAJ K
breakBB 
;BB 
}CC 	
}DD 
privateHH 
voidHH 
GoodG2BHH 
(HH 
)HH 
{II 
intJJ 
dataJJ 
;JJ 
whileKK 
(KK 
trueKK 
)KK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
breakOO 
;OO 
}PP 	
whileQQ 
(QQ 
trueQQ 
)QQ 
{RR 	
IOUU 
.UU 
	WriteLineUU 
(UU 
$strUU $
+UU% &
dataUU' +
+UU, -
$strUU. 3
+UU4 5
(UU6 7
$numUU7 :
/UU; <
dataUU= A
)UUA B
+UUC D
$strUUE I
)UUI J
;UUJ K
breakVV 
;VV 
}WW 	
}XX 
private[[ 
void[[ 
GoodB2G[[ 
([[ 
)[[ 
{\\ 
int]] 
data]] 
;]] 
while^^ 
(^^ 
true^^ 
)^^ 
{__ 	
data`` 
=`` 
int`` 
.`` 
MinValue`` 
;``  
{aa 
trycc 
{dd 
stringff 
stringNumberff '
=ff( )
Consoleff* 1
.ff1 2
ReadLineff2 :
(ff: ;
)ff; <
;ff< =
ifgg 
(gg 
stringNumbergg $
!=gg% '
nullgg( ,
)gg, -
{hh 
tryii 
{jj 
datakk  
=kk! "
intkk# &
.kk& '
Parsekk' ,
(kk, -
stringNumberkk- 9
.kk9 :
Trimkk: >
(kk> ?
)kk? @
)kk@ A
;kkA B
}ll 
catchmm 
(mm 
FormatExceptionmm -
exceptNumberFormatmm. @
)mm@ A
{nn 
IOoo 
.oo 
Loggeroo %
.oo% &
Logoo& )
(oo) *
NLogoo* .
.oo. /
LogLeveloo/ 7
.oo7 8
Warnoo8 <
,oo< =
exceptNumberFormatoo> P
,ooP Q
$str	ooR Ñ
)
ooÑ Ö
;
ooÖ Ü
}pp 
}qq 
}rr 
catchss 
(ss 
IOExceptionss "
exceptIOss# +
)ss+ ,
{tt 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu !
(uu! "
NLoguu" &
.uu& '
LogLeveluu' /
.uu/ 0
Warnuu0 4
,uu4 5
exceptIOuu6 >
,uu> ?
$struu@ [
)uu[ \
;uu\ ]
}vv 
}ww 
breakxx 
;xx 
}yy 	
whilezz 
(zz 
truezz 
)zz 
{{{ 	
if}} 
(}} 
data}} 
!=}} 
$num}} 
)}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str #
+$ %
data& *
++ ,
$str- 2
+3 4
(5 6
$num6 9
/: ;
data< @
)@ A
+B C
$strD H
)H I
;I J
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
	WriteLine
ÉÉ 
(
ÉÉ 
$str
ÉÉ D
)
ÉÉD E
;
ÉÉE F
}
ÑÑ 
break
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
}
áá 
public
ââ 

override
ââ 
void
ââ 
Good
ââ 
(
ââ 
)
ââ 
{
ää 
GoodG2B
ãã 
(
ãã 
)
ãã 
;
ãã 
GoodB2G
åå 
(
åå 
)
åå 
;
åå 
}
çç 
}èè 
}êê ·2
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_17.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_17 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
data%% 
=%% 
int%% 
.%% 
MinValue%% 
;%% 
{&& 	
try(( 
{)) 
string++ 
stringNumber++ #
=++$ %
Console++& -
.++- .
ReadLine++. 6
(++6 7
)++7 8
;++8 9
if,, 
(,, 
stringNumber,,  
!=,,! #
null,,$ (
),,( )
{-- 
try.. 
{// 
data00 
=00 
int00 "
.00" #
Parse00# (
(00( )
stringNumber00) 5
.005 6
Trim006 :
(00: ;
)00; <
)00< =
;00= >
}11 
catch22 
(22 
FormatException22 )
exceptNumberFormat22* <
)22< =
{33 
IO44 
.44 
Logger44 !
.44! "
Log44" %
(44% &
NLog44& *
.44* +
LogLevel44+ 3
.443 4
Warn444 8
,448 9
exceptNumberFormat44: L
,44L M
$str	44N Ä
)
44Ä Å
;
44Å Ç
}55 
}66 
}77 
catch88 
(88 
IOException88 
exceptIO88 '
)88' (
{99 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptIO::2 :
,::: ;
$str::< W
)::W X
;::X Y
};; 
}<< 	
for== 
(== 
int== 
j== 
=== 
$num== 
;== 
j== 
<== 
$num== 
;== 
j==  
++==  "
)==" #
{>> 	
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA $
+AA% &
dataAA' +
+AA, -
$strAA. 3
+AA4 5
(AA6 7
$numAA7 :
/AA; <
dataAA= A
)AAA B
+AAC D
$strAAE I
)AAI J
;AAJ K
}BB 	
}CC 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
intII 
dataII 
;II 
dataKK 
=KK 
$numKK 
;KK 
forLL 
(LL 
intLL 
jLL 
=LL 
$numLL 
;LL 
jLL 
<LL 
$numLL 
;LL 
jLL  
++LL  "
)LL" #
{MM 	
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP $
+PP% &
dataPP' +
+PP, -
$strPP. 3
+PP4 5
(PP6 7
$numPP7 :
/PP; <
dataPP= A
)PPA B
+PPC D
$strPPE I
)PPI J
;PPJ K
}QQ 	
}RR 
privateUU 
voidUU 
GoodB2GUU 
(UU 
)UU 
{VV 
intWW 
dataWW 
;WW 
dataXX 
=XX 
intXX 
.XX 
MinValueXX 
;XX 
{YY 	
try[[ 
{\\ 
string^^ 
stringNumber^^ #
=^^$ %
Console^^& -
.^^- .
ReadLine^^. 6
(^^6 7
)^^7 8
;^^8 9
if__ 
(__ 
stringNumber__  
!=__! #
null__$ (
)__( )
{`` 
tryaa 
{bb 
datacc 
=cc 
intcc "
.cc" #
Parsecc# (
(cc( )
stringNumbercc) 5
.cc5 6
Trimcc6 :
(cc: ;
)cc; <
)cc< =
;cc= >
}dd 
catchee 
(ee 
FormatExceptionee )
exceptNumberFormatee* <
)ee< =
{ff 
IOgg 
.gg 
Loggergg !
.gg! "
Loggg" %
(gg% &
NLoggg& *
.gg* +
LogLevelgg+ 3
.gg3 4
Warngg4 8
,gg8 9
exceptNumberFormatgg: L
,ggL M
$str	ggN Ä
)
ggÄ Å
;
ggÅ Ç
}hh 
}ii 
}jj 
catchkk 
(kk 
IOExceptionkk 
exceptIOkk '
)kk' (
{ll 
IOmm 
.mm 
Loggermm 
.mm 
Logmm 
(mm 
NLogmm "
.mm" #
LogLevelmm# +
.mm+ ,
Warnmm, 0
,mm0 1
exceptIOmm2 :
,mm: ;
$strmm< W
)mmW X
;mmX Y
}nn 
}oo 	
forpp 
(pp 
intpp 
kpp 
=pp 
$numpp 
;pp 
kpp 
<pp 
$numpp 
;pp 
kpp  
++pp  "
)pp" #
{qq 	
ifss 
(ss 
datass 
!=ss 
$numss 
)ss 
{tt 
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu #
+uu$ %
datauu& *
+uu+ ,
$struu- 2
+uu3 4
(uu5 6
$numuu6 9
/uu: ;
datauu< @
)uu@ A
+uuB C
$struuD H
)uuH I
;uuI J
}vv 
elseww 
{xx 
IOyy 
.yy 
	WriteLineyy 
(yy 
$stryy D
)yyD E
;yyE F
}zz 
}{{ 	
}|| 
public~~ 

override~~ 
void~~ 
Good~~ 
(~~ 
)~~ 
{ 
GoodG2B
ÄÄ 
(
ÄÄ 
)
ÄÄ 
;
ÄÄ 
GoodB2G
ÅÅ 
(
ÅÅ 
)
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}ÑÑ 
}ÖÖ ÜV
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_21.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_21 3
:4 5
AbstractTestCase6 F
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
int## 
data## 
;## 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$ 
{%% 	
try'' 
{(( 
string** 
stringNumber** #
=**$ %
Console**& -
.**- .
ReadLine**. 6
(**6 7
)**7 8
;**8 9
if++ 
(++ 
stringNumber++  
!=++! #
null++$ (
)++( )
{,, 
try-- 
{.. 
data// 
=// 
int// "
.//" #
Parse//# (
(//( )
stringNumber//) 5
.//5 6
Trim//6 :
(//: ;
)//; <
)//< =
;//= >
}00 
catch11 
(11 
FormatException11 )
exceptNumberFormat11* <
)11< =
{22 
IO33 
.33 
Logger33 !
.33! "
Log33" %
(33% &
NLog33& *
.33* +
LogLevel33+ 3
.333 4
Warn334 8
,338 9
exceptNumberFormat33: L
,33L M
$str	33N Ä
)
33Ä Å
;
33Å Ç
}44 
}55 
}66 
catch77 
(77 
IOException77 
exceptIO77 '
)77' (
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
exceptIO992 :
,99: ;
$str99< W
)99W X
;99X Y
}:: 
};; 	

badPrivate<< 
=<< 
true<< 
;<< 
BadSink== 
(== 
data== 
)== 
;== 
}>> 
private@@ 
void@@ 
BadSink@@ 
(@@ 
int@@ 
data@@ !
)@@" #
{AA 
ifBB 

(BB 

badPrivateBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
}HH 
privateKK 
boolKK 
goodB2G1PrivateKK  
=KK! "
falseKK# (
;KK( )
privateLL 
boolLL 
goodB2G2PrivateLL  
=LL! "
falseLL# (
;LL( )
privateMM 
boolMM 
goodG2BPrivateMM 
=MM  !
falseMM" '
;MM' (
publicOO 

overrideOO 
voidOO 
GoodOO 
(OO 
)OO 
{PP 
GoodB2G1QQ 
(QQ 
)QQ 
;QQ 
GoodB2G2RR 
(RR 
)RR 
;RR 
GoodG2BSS 
(SS 
)SS 
;SS 
}TT 
privateWW 
voidWW 
GoodB2G1WW 
(WW 
)WW 
{XX 
intYY 
dataYY 
;YY 
dataZZ 
=ZZ 
intZZ 
.ZZ 
MinValueZZ 
;ZZ 
{[[ 	
try]] 
{^^ 
string`` 
stringNumber`` #
=``$ %
Console``& -
.``- .
ReadLine``. 6
(``6 7
)``7 8
;``8 9
ifaa 
(aa 
stringNumberaa  
!=aa! #
nullaa$ (
)aa( )
{bb 
trycc 
{dd 
dataee 
=ee 
intee "
.ee" #
Parseee# (
(ee( )
stringNumberee) 5
.ee5 6
Trimee6 :
(ee: ;
)ee; <
)ee< =
;ee= >
}ff 
catchgg 
(gg 
FormatExceptiongg )
exceptNumberFormatgg* <
)gg< =
{hh 
IOii 
.ii 
Loggerii !
.ii! "
Logii" %
(ii% &
NLogii& *
.ii* +
LogLevelii+ 3
.ii3 4
Warnii4 8
,ii8 9
exceptNumberFormatii: L
,iiL M
$str	iiN Ä
)
iiÄ Å
;
iiÅ Ç
}jj 
}kk 
}ll 
catchmm 
(mm 
IOExceptionmm 
exceptIOmm '
)mm' (
{nn 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptIOoo2 :
,oo: ;
$stroo< W
)ooW X
;ooX Y
}pp 
}qq 	
goodB2G1Privaterr 
=rr 
falserr 
;rr  
GoodB2G1Sinkss 
(ss 
datass 
)ss 
;ss 
}tt 
privatevv 
voidvv 
GoodB2G1Sinkvv 
(vv 
intvv !
datavv" &
)vv' (
{ww 
ifxx 

(xx 
goodB2G1Privatexx 
)xx 
{yy 	
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ /
){{/ 0
;{{0 1
}|| 	
else}} 
{~~ 	
if
ÄÄ 
(
ÄÄ 
data
ÄÄ 
!=
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
{
ÅÅ 
IO
ÇÇ 
.
ÇÇ 
	WriteLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ #
+
ÇÇ$ %
data
ÇÇ& *
+
ÇÇ+ ,
$str
ÇÇ- 2
+
ÇÇ3 4
(
ÇÇ5 6
$num
ÇÇ6 9
/
ÇÇ: ;
data
ÇÇ< @
)
ÇÇ@ A
+
ÇÇB C
$str
ÇÇD H
)
ÇÇH I
;
ÇÇI J
}
ÉÉ 
else
ÑÑ 
{
ÖÖ 
IO
ÜÜ 
.
ÜÜ 
	WriteLine
ÜÜ 
(
ÜÜ 
$str
ÜÜ D
)
ÜÜD E
;
ÜÜE F
}
áá 
}
àà 	
}
ââ 
private
åå 
void
åå 
GoodB2G2
åå 
(
åå 
)
åå 
{
çç 
int
éé 
data
éé 
;
éé 
data
èè 
=
èè 
int
èè 
.
èè 
MinValue
èè 
;
èè 
{
êê 	
try
íí 
{
ìì 
string
ïï 
stringNumber
ïï #
=
ïï$ %
Console
ïï& -
.
ïï- .
ReadLine
ïï. 6
(
ïï6 7
)
ïï7 8
;
ïï8 9
if
ññ 
(
ññ 
stringNumber
ññ  
!=
ññ! #
null
ññ$ (
)
ññ( )
{
óó 
try
òò 
{
ôô 
data
öö 
=
öö 
int
öö "
.
öö" #
Parse
öö# (
(
öö( )
stringNumber
öö) 5
.
öö5 6
Trim
öö6 :
(
öö: ;
)
öö; <
)
öö< =
;
öö= >
}
õõ 
catch
úú 
(
úú 
FormatException
úú ) 
exceptNumberFormat
úú* <
)
úú< =
{
ùù 
IO
ûû 
.
ûû 
Logger
ûû !
.
ûû! "
Log
ûû" %
(
ûû% &
NLog
ûû& *
.
ûû* +
LogLevel
ûû+ 3
.
ûû3 4
Warn
ûû4 8
,
ûû8 9 
exceptNumberFormat
ûû: L
,
ûûL M
$strûûN Ä
)ûûÄ Å
;ûûÅ Ç
}
üü 
}
†† 
}
°° 
catch
¢¢ 
(
¢¢ 
IOException
¢¢ 
exceptIO
¢¢ '
)
¢¢' (
{
££ 
IO
§§ 
.
§§ 
Logger
§§ 
.
§§ 
Log
§§ 
(
§§ 
NLog
§§ "
.
§§" #
LogLevel
§§# +
.
§§+ ,
Warn
§§, 0
,
§§0 1
exceptIO
§§2 :
,
§§: ;
$str
§§< W
)
§§W X
;
§§X Y
}
•• 
}
¶¶ 	
goodB2G2Private
ßß 
=
ßß 
true
ßß 
;
ßß 
GoodB2G2Sink
®® 
(
®® 
data
®® 
)
®® 
;
®® 
}
©© 
private
´´ 
void
´´ 
GoodB2G2Sink
´´ 
(
´´ 
int
´´ !
data
´´" &
)
´´' (
{
¨¨ 
if
≠≠ 

(
≠≠ 
goodB2G2Private
≠≠ 
)
≠≠ 
{
ÆÆ 	
if
∞∞ 
(
∞∞ 
data
∞∞ 
!=
∞∞ 
$num
∞∞ 
)
∞∞ 
{
±± 
IO
≤≤ 
.
≤≤ 
	WriteLine
≤≤ 
(
≤≤ 
$str
≤≤ #
+
≤≤$ %
data
≤≤& *
+
≤≤+ ,
$str
≤≤- 2
+
≤≤3 4
(
≤≤5 6
$num
≤≤6 9
/
≤≤: ;
data
≤≤< @
)
≤≤@ A
+
≤≤B C
$str
≤≤D H
)
≤≤H I
;
≤≤I J
}
≥≥ 
else
¥¥ 
{
µµ 
IO
∂∂ 
.
∂∂ 
	WriteLine
∂∂ 
(
∂∂ 
$str
∂∂ D
)
∂∂D E
;
∂∂E F
}
∑∑ 
}
∏∏ 	
}
ππ 
private
ºº 
void
ºº 
GoodG2B
ºº 
(
ºº 
)
ºº 
{
ΩΩ 
int
ææ 
data
ææ 
;
ææ 
data
¿¿ 
=
¿¿ 
$num
¿¿ 
;
¿¿ 
goodG2BPrivate
¡¡ 
=
¡¡ 
true
¡¡ 
;
¡¡ 
GoodG2BSink
¬¬ 
(
¬¬ 
data
¬¬ 
)
¬¬ 
;
¬¬ 
}
√√ 
private
≈≈ 
void
≈≈ 
GoodG2BSink
≈≈ 
(
≈≈ 
int
≈≈  
data
≈≈! %
)
≈≈& '
{
∆∆ 
if
«« 

(
«« 
goodG2BPrivate
«« 
)
«« 
{
»» 	
IO
ÀÀ 
.
ÀÀ 
	WriteLine
ÀÀ 
(
ÀÀ 
$str
ÀÀ $
+
ÀÀ% &
data
ÀÀ' +
+
ÀÀ, -
$str
ÀÀ. 3
+
ÀÀ4 5
(
ÀÀ6 7
$num
ÀÀ7 :
/
ÀÀ; <
data
ÀÀ= A
)
ÀÀA B
+
ÀÀC D
$str
ÀÀE I
)
ÀÀI J
;
ÀÀJ K
}
ÃÃ 	
}
ÕÕ 
}œœ 
}–– ¡?
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_22a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_22a 4
:5 6
AbstractTestCase7 G
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public 

override 
void 
Bad 
( 
) 
{   
int!! 
data!! 
=!! 
$num!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;"" 
{## 	
try%% 
{&& 
string(( 
stringNumber(( #
=(($ %
Console((& -
.((- .
ReadLine((. 6
(((6 7
)((7 8
;((8 9
if)) 
()) 
stringNumber))  
!=))! #
null))$ (
)))( )
{** 
try++ 
{,, 
data-- 
=-- 
int-- "
.--" #
Parse--# (
(--( )
stringNumber--) 5
.--5 6
Trim--6 :
(--: ;
)--; <
)--< =
;--= >
}.. 
catch// 
(// 
FormatException// )
exceptNumberFormat//* <
)//< =
{00 
IO11 
.11 
Logger11 !
.11! "
Log11" %
(11% &
NLog11& *
.11* +
LogLevel11+ 3
.113 4
Warn114 8
,118 9
exceptNumberFormat11: L
,11L M
$str	11N Ä
)
11Ä Å
;
11Å Ç
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
}99 	
badPublicStatic:: 
=:: 
true:: 
;:: :
.CWE369_Divide_by_Zero__int_ReadLine_divide_22b;; 6
.;;6 7
BadSink;;7 >
(;;> ?
data;;? C
);;D E
;;;E F
}<< 
public?? 

static?? 
bool??  
goodB2G1PublicStatic?? +
=??, -
false??. 3
;??3 4
public@@ 

static@@ 
bool@@  
goodB2G2PublicStatic@@ +
=@@, -
false@@. 3
;@@3 4
publicAA 

staticAA 
boolAA 
goodG2BPublicStaticAA *
=AA+ ,
falseAA- 2
;AA2 3
publicCC 

overrideCC 
voidCC 
GoodCC 
(CC 
)CC 
{DD 
GoodB2G1EE 
(EE 
)EE 
;EE 
GoodB2G2FF 
(FF 
)FF 
;FF 
GoodG2BGG 
(GG 
)GG 
;GG 
}HH 
privateKK 
voidKK 
GoodB2G1KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
=MM 
$numMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{OO 	
tryQQ 
{RR 
stringTT 
stringNumberTT #
=TT$ %
ConsoleTT& -
.TT- .
ReadLineTT. 6
(TT6 7
)TT7 8
;TT8 9
ifUU 
(UU 
stringNumberUU  
!=UU! #
nullUU$ (
)UU( )
{VV 
tryWW 
{XX 
dataYY 
=YY 
intYY "
.YY" #
ParseYY# (
(YY( )
stringNumberYY) 5
.YY5 6
TrimYY6 :
(YY: ;
)YY; <
)YY< =
;YY= >
}ZZ 
catch[[ 
([[ 
FormatException[[ )
exceptNumberFormat[[* <
)[[< =
{\\ 
IO]] 
.]] 
Logger]] !
.]]! "
Log]]" %
(]]% &
NLog]]& *
.]]* +
LogLevel]]+ 3
.]]3 4
Warn]]4 8
,]]8 9
exceptNumberFormat]]: L
,]]L M
$str	]]N Ä
)
]]Ä Å
;
]]Å Ç
}^^ 
}__ 
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptIOcc2 :
,cc: ;
$strcc< W
)ccW X
;ccX Y
}dd 
}ee 	 
goodB2G1PublicStaticff 
=ff 
falseff $
;ff$ %:
.CWE369_Divide_by_Zero__int_ReadLine_divide_22bgg 6
.gg6 7
GoodB2G1Sinkgg7 C
(ggC D
dataggD H
)ggI J
;ggJ K
}hh 
privatekk 
voidkk 
GoodB2G2kk 
(kk 
)kk 
{ll 
intmm 
datamm 
=mm 
$nummm 
;mm 
datann 
=nn 
intnn 
.nn 
MinValuenn 
;nn 
{oo 	
tryqq 
{rr 
stringtt 
stringNumbertt #
=tt$ %
Consolett& -
.tt- .
ReadLinett. 6
(tt6 7
)tt7 8
;tt8 9
ifuu 
(uu 
stringNumberuu  
!=uu! #
nulluu$ (
)uu( )
{vv 
tryww 
{xx 
datayy 
=yy 
intyy "
.yy" #
Parseyy# (
(yy( )
stringNumberyy) 5
.yy5 6
Trimyy6 :
(yy: ;
)yy; <
)yy< =
;yy= >
}zz 
catch{{ 
({{ 
FormatException{{ )
exceptNumberFormat{{* <
){{< =
{|| 
IO}} 
.}} 
Logger}} !
.}}! "
Log}}" %
(}}% &
NLog}}& *
.}}* +
LogLevel}}+ 3
.}}3 4
Warn}}4 8
,}}8 9
exceptNumberFormat}}: L
,}}L M
$str	}}N Ä
)
}}Ä Å
;
}}Å Ç
}~~ 
} 
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
IOException
ÅÅ 
exceptIO
ÅÅ '
)
ÅÅ' (
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
Logger
ÉÉ 
.
ÉÉ 
Log
ÉÉ 
(
ÉÉ 
NLog
ÉÉ "
.
ÉÉ" #
LogLevel
ÉÉ# +
.
ÉÉ+ ,
Warn
ÉÉ, 0
,
ÉÉ0 1
exceptIO
ÉÉ2 :
,
ÉÉ: ;
$str
ÉÉ< W
)
ÉÉW X
;
ÉÉX Y
}
ÑÑ 
}
ÖÖ 	"
goodB2G2PublicStatic
ÜÜ 
=
ÜÜ 
true
ÜÜ #
;
ÜÜ# $<
.CWE369_Divide_by_Zero__int_ReadLine_divide_22b
áá 6
.
áá6 7
GoodB2G2Sink
áá7 C
(
ááC D
data
ááD H
)
ááI J
;
ááJ K
}
àà 
private
ãã 
void
ãã 
GoodG2B
ãã 
(
ãã 
)
ãã 
{
åå 
int
çç 
data
çç 
=
çç 
$num
çç 
;
çç 
data
èè 
=
èè 
$num
èè 
;
èè !
goodG2BPublicStatic
êê 
=
êê 
true
êê "
;
êê" #<
.CWE369_Divide_by_Zero__int_ReadLine_divide_22b
ëë 6
.
ëë6 7
GoodG2BSink
ëë7 B
(
ëëB C
data
ëëC G
)
ëëH I
;
ëëI J
}
íí 
}îî 
}ïï ü 
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_22b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_22b 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
if 

( :
.CWE369_Divide_by_Zero__int_ReadLine_divide_22a :
.: ;
badPublicStatic; J
)J K
{ 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" $
+""% &
data""' +
+"", -
$str"". 3
+""4 5
(""6 7
$num""7 :
/""; <
data""= A
)""A B
+""C D
$str""E I
)""I J
;""J K
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
}** 
public// 

static// 
void// 
GoodB2G1Sink// #
(//# $
int//$ '
data//( ,
)//- .
{00 
if11 

(11 :
.CWE369_Divide_by_Zero__int_ReadLine_divide_22a11 :
.11: ; 
goodB2G1PublicStatic11; O
)11O P
{22 	
data55 
=55 
$num55 
;55 
}66 	
else77 
{88 	
if:: 
(:: 
data:: 
!=:: 
$num:: 
):: 
{;; 
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< #
+<<$ %
data<<& *
+<<+ ,
$str<<- 2
+<<3 4
(<<5 6
$num<<6 9
/<<: ;
data<<< @
)<<@ A
+<<B C
$str<<D H
)<<H I
;<<I J
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ D
)@@D E
;@@E F
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2G2SinkFF #
(FF# $
intFF$ '
dataFF( ,
)FF- .
{GG 
ifHH 

(HH :
.CWE369_Divide_by_Zero__int_ReadLine_divide_22aHH :
.HH: ; 
goodB2G2PublicStaticHH; O
)HHO P
{II 	
ifKK 
(KK 
dataKK 
!=KK 
$numKK 
)KK 
{LL 
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM #
+MM$ %
dataMM& *
+MM+ ,
$strMM- 2
+MM3 4
(MM5 6
$numMM6 9
/MM: ;
dataMM< @
)MM@ A
+MMB C
$strMMD H
)MMH I
;MMI J
}NN 
elseOO 
{PP 
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ D
)QQD E
;QQE F
}RR 
}SS 	
elseTT 
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
}ZZ 
public]] 

static]] 
void]] 
GoodG2BSink]] "
(]]" #
int]]# &
data]]' +
)]], -
{^^ 
if__ 

(__ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_22a__ :
.__: ;
goodG2BPublicStatic__; N
)__N O
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc $
+cc% &
datacc' +
+cc, -
$strcc. 3
+cc4 5
(cc6 7
$numcc7 :
/cc; <
datacc= A
)ccA B
+ccC D
$strccE I
)ccI J
;ccJ K
}dd 	
elseee 
{ff 	
dataii 
=ii 
$numii 
;ii 
}jj 	
}kk 
}mm 
}nn Ÿ3
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_31.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_31 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
dataCopy   
;   
{!! 	
int"" 
data"" 
;"" 
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
dataCopy;; 
=;; 
data;; 
;;; 
}<< 	
{== 	
int>> 
data>> 
=>> 
dataCopy>> 
;>>  
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA $
+AA% &
dataAA' +
+AA, -
$strAA. 3
+AA4 5
(AA6 7
$numAA7 :
/AA; <
dataAA= A
)AAA B
+AAC D
$strAAE I
)AAI J
;AAJ K
}BB 	
}CC 
publicFF 

overrideFF 
voidFF 
GoodFF 
(FF 
)FF 
{GG 
GoodG2BHH 
(HH 
)HH 
;HH 
GoodB2GII 
(II 
)II 
;II 
}JJ 
privateMM 
voidMM 
GoodG2BMM 
(MM 
)MM 
{NN 
intOO 
dataCopyOO 
;OO 
{PP 	
intQQ 
dataQQ 
;QQ 
dataSS 
=SS 
$numSS 
;SS 
dataCopyTT 
=TT 
dataTT 
;TT 
}UU 	
{VV 	
intWW 
dataWW 
=WW 
dataCopyWW 
;WW  
IOZZ 
.ZZ 
	WriteLineZZ 
(ZZ 
$strZZ $
+ZZ% &
dataZZ' +
+ZZ, -
$strZZ. 3
+ZZ4 5
(ZZ6 7
$numZZ7 :
/ZZ; <
dataZZ= A
)ZZA B
+ZZC D
$strZZE I
)ZZI J
;ZZJ K
}[[ 	
}\\ 
private__ 
void__ 
GoodB2G__ 
(__ 
)__ 
{`` 
intaa 
dataCopyaa 
;aa 
{bb 	
intcc 
datacc 
;cc 
datadd 
=dd 
intdd 
.dd 
MinValuedd 
;dd  
{ee 
trygg 
{hh 
stringjj 
stringNumberjj '
=jj( )
Consolejj* 1
.jj1 2
ReadLinejj2 :
(jj: ;
)jj; <
;jj< =
ifkk 
(kk 
stringNumberkk $
!=kk% '
nullkk( ,
)kk, -
{ll 
trymm 
{nn 
dataoo  
=oo! "
intoo# &
.oo& '
Parseoo' ,
(oo, -
stringNumberoo- 9
.oo9 :
Trimoo: >
(oo> ?
)oo? @
)oo@ A
;ooA B
}pp 
catchqq 
(qq 
FormatExceptionqq -
exceptNumberFormatqq. @
)qq@ A
{rr 
IOss 
.ss 
Loggerss %
.ss% &
Logss& )
(ss) *
NLogss* .
.ss. /
LogLevelss/ 7
.ss7 8
Warnss8 <
,ss< =
exceptNumberFormatss> P
,ssP Q
$str	ssR Ñ
)
ssÑ Ö
;
ssÖ Ü
}tt 
}uu 
}vv 
catchww 
(ww 
IOExceptionww "
exceptIOww# +
)ww+ ,
{xx 
IOyy 
.yy 
Loggeryy 
.yy 
Logyy !
(yy! "
NLogyy" &
.yy& '
LogLevelyy' /
.yy/ 0
Warnyy0 4
,yy4 5
exceptIOyy6 >
,yy> ?
$stryy@ [
)yy[ \
;yy\ ]
}zz 
}{{ 
dataCopy|| 
=|| 
data|| 
;|| 
}}} 	
{~~ 	
int 
data 
= 
dataCopy 
;  
if
ÅÅ 
(
ÅÅ 
data
ÅÅ 
!=
ÅÅ 
$num
ÅÅ 
)
ÅÅ 
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
	WriteLine
ÉÉ 
(
ÉÉ 
$str
ÉÉ #
+
ÉÉ$ %
data
ÉÉ& *
+
ÉÉ+ ,
$str
ÉÉ- 2
+
ÉÉ3 4
(
ÉÉ5 6
$num
ÉÉ6 9
/
ÉÉ: ;
data
ÉÉ< @
)
ÉÉ@ A
+
ÉÉB C
$str
ÉÉD H
)
ÉÉH I
;
ÉÉI J
}
ÑÑ 
else
ÖÖ 
{
ÜÜ 
IO
áá 
.
áá 
	WriteLine
áá 
(
áá 
$str
áá D
)
ááD E
;
ááE F
}
àà 
}
ââ 	
}
ää 
}åå 
}çç —3
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_41.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_41 3
:4 5
AbstractTestCase6 F
{ 
private 
static 
void 
BadSink 
(  
int  #
data$ (
)) *
{ 
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
int'' 
data'' 
;'' 
data(( 
=(( 
int(( 
.(( 
MinValue(( 
;(( 
{)) 	
try++ 
{,, 
string.. 
stringNumber.. #
=..$ %
Console..& -
...- .
ReadLine... 6
(..6 7
)..7 8
;..8 9
if// 
(// 
stringNumber//  
!=//! #
null//$ (
)//( )
{00 
try11 
{22 
data33 
=33 
int33 "
.33" #
Parse33# (
(33( )
stringNumber33) 5
.335 6
Trim336 :
(33: ;
)33; <
)33< =
;33= >
}44 
catch55 
(55 
FormatException55 )
exceptNumberFormat55* <
)55< =
{66 
IO77 
.77 
Logger77 !
.77! "
Log77" %
(77% &
NLog77& *
.77* +
LogLevel77+ 3
.773 4
Warn774 8
,778 9
exceptNumberFormat77: L
,77L M
$str	77N Ä
)
77Ä Å
;
77Å Ç
}88 
}99 
}:: 
catch;; 
(;; 
IOException;; 
exceptIO;; '
);;' (
{<< 
IO== 
.== 
Logger== 
.== 
Log== 
(== 
NLog== "
.==" #
LogLevel==# +
.==+ ,
Warn==, 0
,==0 1
exceptIO==2 :
,==: ;
$str==< W
)==W X
;==X Y
}>> 
}?? 	
BadSink@@ 
(@@ 
data@@ 
)@@ 
;@@ 
}AA 
publicDD 

overrideDD 
voidDD 
GoodDD 
(DD 
)DD 
{EE 
GoodG2BFF 
(FF 
)FF 
;FF 
GoodB2GGG 
(GG 
)GG 
;GG 
}HH 
privateJJ 
staticJJ 
voidJJ 
GoodG2BSinkJJ #
(JJ# $
intJJ$ '
dataJJ( ,
)JJ- .
{KK 
IONN 

.NN
 
	WriteLineNN 
(NN 
$strNN  
+NN! "
dataNN# '
+NN( )
$strNN* /
+NN0 1
(NN2 3
$numNN3 6
/NN7 8
dataNN9 =
)NN= >
+NN? @
$strNNA E
)NNE F
;NNF G
}OO 
privateRR 
staticRR 
voidRR 
GoodG2BRR 
(RR  
)RR  !
{SS 
intTT 
dataTT 
;TT 
dataVV 
=VV 
$numVV 
;VV 
GoodG2BSinkWW 
(WW 
dataWW 
)WW 
;WW 
}XX 
privateZZ 
staticZZ 
voidZZ 
GoodB2GSinkZZ #
(ZZ# $
intZZ$ '
dataZZ( ,
)ZZ- .
{[[ 
if]] 

(]] 
data]] 
!=]] 
$num]] 
)]] 
{^^ 	
IO__ 
.__ 
	WriteLine__ 
(__ 
$str__ 
+__  !
data__" &
+__' (
$str__) .
+__/ 0
(__1 2
$num__2 5
/__6 7
data__8 <
)__< =
+__> ?
$str__@ D
)__D E
;__E F
}`` 	
elseaa 
{bb 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc @
)cc@ A
;ccA B
}dd 	
}ee 
privatehh 
statichh 
voidhh 
GoodB2Ghh 
(hh  
)hh  !
{ii 
intjj 
datajj 
;jj 
datakk 
=kk 
intkk 
.kk 
MinValuekk 
;kk 
{ll 	
trynn 
{oo 
stringqq 
stringNumberqq #
=qq$ %
Consoleqq& -
.qq- .
ReadLineqq. 6
(qq6 7
)qq7 8
;qq8 9
ifrr 
(rr 
stringNumberrr  
!=rr! #
nullrr$ (
)rr( )
{ss 
trytt 
{uu 
datavv 
=vv 
intvv "
.vv" #
Parsevv# (
(vv( )
stringNumbervv) 5
.vv5 6
Trimvv6 :
(vv: ;
)vv; <
)vv< =
;vv= >
}ww 
catchxx 
(xx 
FormatExceptionxx )
exceptNumberFormatxx* <
)xx< =
{yy 
IOzz 
.zz 
Loggerzz !
.zz! "
Logzz" %
(zz% &
NLogzz& *
.zz* +
LogLevelzz+ 3
.zz3 4
Warnzz4 8
,zz8 9
exceptNumberFormatzz: L
,zzL M
$str	zzN Ä
)
zzÄ Å
;
zzÅ Ç
}{{ 
}|| 
}}} 
catch~~ 
(~~ 
IOException~~ 
exceptIO~~ '
)~~' (
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ 
.
ÄÄ 
Log
ÄÄ 
(
ÄÄ 
NLog
ÄÄ "
.
ÄÄ" #
LogLevel
ÄÄ# +
.
ÄÄ+ ,
Warn
ÄÄ, 0
,
ÄÄ0 1
exceptIO
ÄÄ2 :
,
ÄÄ: ;
$str
ÄÄ< W
)
ÄÄW X
;
ÄÄX Y
}
ÅÅ 
}
ÇÇ 	
GoodB2GSink
ÉÉ 
(
ÉÉ 
data
ÉÉ 
)
ÉÉ 
;
ÉÉ 
}
ÑÑ 
}ÜÜ 
}áá ‚4
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_42.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_42 3
:4 5
AbstractTestCase6 F
{ 
private 
static 
int 
	BadSource  
(  !
)! "
{ 
int   
data   
;   
data!! 
=!! 
int!! 
.!! 
MinValue!! 
;!! 
{"" 	
try$$ 
{%% 
string'' 
stringNumber'' #
=''$ %
Console''& -
.''- .
ReadLine''. 6
(''6 7
)''7 8
;''8 9
if(( 
((( 
stringNumber((  
!=((! #
null(($ (
)((( )
{)) 
try** 
{++ 
data,, 
=,, 
int,, "
.,," #
Parse,,# (
(,,( )
stringNumber,,) 5
.,,5 6
Trim,,6 :
(,,: ;
),,; <
),,< =
;,,= >
}-- 
catch.. 
(.. 
FormatException.. )
exceptNumberFormat..* <
)..< =
{// 
IO00 
.00 
Logger00 !
.00! "
Log00" %
(00% &
NLog00& *
.00* +
LogLevel00+ 3
.003 4
Warn004 8
,008 9
exceptNumberFormat00: L
,00L M
$str	00N Ä
)
00Ä Å
;
00Å Ç
}11 
}22 
}33 
catch44 
(44 
IOException44 
exceptIO44 '
)44' (
{55 
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 "
.66" #
LogLevel66# +
.66+ ,
Warn66, 0
,660 1
exceptIO662 :
,66: ;
$str66< W
)66W X
;66X Y
}77 
}88 	
return99 
data99 
;99 
}:: 
public<< 

override<< 
void<< 
Bad<< 
(<< 
)<< 
{== 
int>> 
data>> 
=>> 
	BadSource>> 
(>> 
)>> 
;>> 
IOAA 

.AA
 
	WriteLineAA 
(AA 
$strAA  
+AA! "
dataAA# '
+AA( )
$strAA* /
+AA0 1
(AA2 3
$numAA3 6
/AA7 8
dataAA9 =
)AA= >
+AA? @
$strAAA E
)AAE F
;AAF G
}BB 
privateFF 
staticFF 
intFF 
GoodG2BSourceFF $
(FF$ %
)FF% &
{GG 
intHH 
dataHH 
;HH 
dataJJ 
=JJ 
$numJJ 
;JJ 
returnKK 
dataKK 
;KK 
}LL 
privateNN 
staticNN 
voidNN 
GoodG2BNN 
(NN  
)NN  !
{OO 
intPP 
dataPP 
=PP 
GoodG2BSourcePP  
(PP  !
)PP! "
;PP" #
IOSS 

.SS
 
	WriteLineSS 
(SS 
$strSS  
+SS! "
dataSS# '
+SS( )
$strSS* /
+SS0 1
(SS2 3
$numSS3 6
/SS7 8
dataSS9 =
)SS= >
+SS? @
$strSSA E
)SSE F
;SSF G
}TT 
privateWW 
staticWW 
intWW 
GoodB2GSourceWW $
(WW$ %
)WW% &
{XX 
intYY 
dataYY 
;YY 
dataZZ 
=ZZ 
intZZ 
.ZZ 
MinValueZZ 
;ZZ 
{[[ 	
try]] 
{^^ 
string`` 
stringNumber`` #
=``$ %
Console``& -
.``- .
ReadLine``. 6
(``6 7
)``7 8
;``8 9
ifaa 
(aa 
stringNumberaa  
!=aa! #
nullaa$ (
)aa( )
{bb 
trycc 
{dd 
dataee 
=ee 
intee "
.ee" #
Parseee# (
(ee( )
stringNumberee) 5
.ee5 6
Trimee6 :
(ee: ;
)ee; <
)ee< =
;ee= >
}ff 
catchgg 
(gg 
FormatExceptiongg )
exceptNumberFormatgg* <
)gg< =
{hh 
IOii 
.ii 
Loggerii !
.ii! "
Logii" %
(ii% &
NLogii& *
.ii* +
LogLevelii+ 3
.ii3 4
Warnii4 8
,ii8 9
exceptNumberFormatii: L
,iiL M
$str	iiN Ä
)
iiÄ Å
;
iiÅ Ç
}jj 
}kk 
}ll 
catchmm 
(mm 
IOExceptionmm 
exceptIOmm '
)mm' (
{nn 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptIOoo2 :
,oo: ;
$stroo< W
)ooW X
;ooX Y
}pp 
}qq 	
returnrr 
datarr 
;rr 
}ss 
privateuu 
staticuu 
voiduu 
GoodB2Guu 
(uu  
)uu  !
{vv 
intww 
dataww 
=ww 
GoodB2GSourceww  
(ww  !
)ww! "
;ww" #
ifyy 

(yy 
datayy 
!=yy 
$numyy 
)yy 
{zz 	
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ 
+{{  !
data{{" &
+{{' (
$str{{) .
+{{/ 0
({{1 2
$num{{2 5
/{{6 7
data{{8 <
){{< =
+{{> ?
$str{{@ D
){{D E
;{{E F
}|| 	
else}} 
{~~ 	
IO 
. 
	WriteLine 
( 
$str @
)@ A
;A B
}
ÄÄ 	
}
ÅÅ 
public
ÉÉ 

override
ÉÉ 
void
ÉÉ 
Good
ÉÉ 
(
ÉÉ 
)
ÉÉ 
{
ÑÑ 
GoodG2B
ÖÖ 
(
ÖÖ 
)
ÖÖ 
;
ÖÖ 
GoodB2G
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
}
áá 
}ââ 
}ää ›7
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_45.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_divide_45 3
:4 5
AbstractTestCase6 F
{ 
private 
int 
dataBad 
; 
private 
int 
dataGoodG2B 
; 
private   
int   
dataGoodB2G   
;   
private"" 
void"" 
BadSink"" 
("" 
)"" 
{## 
int$$ 
data$$ 
=$$ 
dataBad$$ 
;$$ 
IO'' 

.''
 
	WriteLine'' 
('' 
$str''  
+''! "
data''# '
+''( )
$str''* /
+''0 1
(''2 3
$num''3 6
/''7 8
data''9 =
)''= >
+''? @
$str''A E
)''E F
;''F G
}(( 
public** 

override** 
void** 
Bad** 
(** 
)** 
{++ 
int,, 
data,, 
;,, 
data-- 
=-- 
int-- 
.-- 
MinValue-- 
;-- 
{.. 	
try00 
{11 
string33 
stringNumber33 #
=33$ %
Console33& -
.33- .
ReadLine33. 6
(336 7
)337 8
;338 9
if44 
(44 
stringNumber44  
!=44! #
null44$ (
)44( )
{55 
try66 
{77 
data88 
=88 
int88 "
.88" #
Parse88# (
(88( )
stringNumber88) 5
.885 6
Trim886 :
(88: ;
)88; <
)88< =
;88= >
}99 
catch:: 
(:: 
FormatException:: )
exceptNumberFormat::* <
)::< =
{;; 
IO<< 
.<< 
Logger<< !
.<<! "
Log<<" %
(<<% &
NLog<<& *
.<<* +
LogLevel<<+ 3
.<<3 4
Warn<<4 8
,<<8 9
exceptNumberFormat<<: L
,<<L M
$str	<<N Ä
)
<<Ä Å
;
<<Å Ç
}== 
}>> 
}?? 
catch@@ 
(@@ 
IOException@@ 
exceptIO@@ '
)@@' (
{AA 
IOBB 
.BB 
LoggerBB 
.BB 
LogBB 
(BB 
NLogBB "
.BB" #
LogLevelBB# +
.BB+ ,
WarnBB, 0
,BB0 1
exceptIOBB2 :
,BB: ;
$strBB< W
)BBW X
;BBX Y
}CC 
}DD 	
dataBadEE 
=EE 
dataEE 
;EE 
BadSinkFF 
(FF 
)FF 
;FF 
}GG 
publicJJ 

overrideJJ 
voidJJ 
GoodJJ 
(JJ 
)JJ 
{KK 
GoodG2BLL 
(LL 
)LL 
;LL 
GoodB2GMM 
(MM 
)MM 
;MM 
}NN 
privatePP 
voidPP 
GoodG2BSinkPP 
(PP 
)PP 
{QQ 
intRR 
dataRR 
=RR 
dataGoodG2BRR 
;RR 
IOUU 

.UU
 
	WriteLineUU 
(UU 
$strUU  
+UU! "
dataUU# '
+UU( )
$strUU* /
+UU0 1
(UU2 3
$numUU3 6
/UU7 8
dataUU9 =
)UU= >
+UU? @
$strUUA E
)UUE F
;UUF G
}VV 
privateYY 
voidYY 
GoodG2BYY 
(YY 
)YY 
{ZZ 
int[[ 
data[[ 
;[[ 
data]] 
=]] 
$num]] 
;]] 
dataGoodG2B^^ 
=^^ 
data^^ 
;^^ 
GoodG2BSink__ 
(__ 
)__ 
;__ 
}`` 
privatebb 
voidbb 
GoodB2GSinkbb 
(bb 
)bb 
{cc 
intdd 
datadd 
=dd 
dataGoodB2Gdd 
;dd 
ifff 

(ff 
dataff 
!=ff 
$numff 
)ff 
{gg 	
IOhh 
.hh 
	WriteLinehh 
(hh 
$strhh 
+hh  !
datahh" &
+hh' (
$strhh) .
+hh/ 0
(hh1 2
$numhh2 5
/hh6 7
datahh8 <
)hh< =
+hh> ?
$strhh@ D
)hhD E
;hhE F
}ii 	
elsejj 
{kk 	
IOll 
.ll 
	WriteLinell 
(ll 
$strll @
)ll@ A
;llA B
}mm 	
}nn 
privateqq 
voidqq 
GoodB2Gqq 
(qq 
)qq 
{rr 
intss 
datass 
;ss 
datatt 
=tt 
inttt 
.tt 
MinValuett 
;tt 
{uu 	
tryww 
{xx 
stringzz 
stringNumberzz #
=zz$ %
Consolezz& -
.zz- .
ReadLinezz. 6
(zz6 7
)zz7 8
;zz8 9
if{{ 
({{ 
stringNumber{{  
!={{! #
null{{$ (
){{( )
{|| 
try}} 
{~~ 
data 
= 
int "
." #
Parse# (
(( )
stringNumber) 5
.5 6
Trim6 :
(: ;
); <
)< =
;= >
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
FormatException
ÅÅ ) 
exceptNumberFormat
ÅÅ* <
)
ÅÅ< =
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
Logger
ÉÉ !
.
ÉÉ! "
Log
ÉÉ" %
(
ÉÉ% &
NLog
ÉÉ& *
.
ÉÉ* +
LogLevel
ÉÉ+ 3
.
ÉÉ3 4
Warn
ÉÉ4 8
,
ÉÉ8 9 
exceptNumberFormat
ÉÉ: L
,
ÉÉL M
$strÉÉN Ä
)ÉÉÄ Å
;ÉÉÅ Ç
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 
catch
áá 
(
áá 
IOException
áá 
exceptIO
áá '
)
áá' (
{
àà 
IO
ââ 
.
ââ 
Logger
ââ 
.
ââ 
Log
ââ 
(
ââ 
NLog
ââ "
.
ââ" #
LogLevel
ââ# +
.
ââ+ ,
Warn
ââ, 0
,
ââ0 1
exceptIO
ââ2 :
,
ââ: ;
$str
ââ< W
)
ââW X
;
ââX Y
}
ää 
}
ãã 	
dataGoodB2G
åå 
=
åå 
data
åå 
;
åå 
GoodB2GSink
çç 
(
çç 
)
çç 
;
çç 
}
éé 
}êê 
}ëë Ù&
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_51a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_51a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	:
.CWE369_Divide_by_Zero__int_ReadLine_divide_51b77 6
.776 7
BadSink777 >
(77> ?
data77? C
)77E F
;77F G
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
intDD 
dataDD 
;DD 
dataFF 
=FF 
$numFF 
;FF :
.CWE369_Divide_by_Zero__int_ReadLine_divide_51bGG 6
.GG6 7
GoodG2BSinkGG7 B
(GGB C
dataGGC G
)GGI J
;GGJ K
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{OO 	
tryQQ 
{RR 
stringTT 
stringNumberTT #
=TT$ %
ConsoleTT& -
.TT- .
ReadLineTT. 6
(TT6 7
)TT7 8
;TT8 9
ifUU 
(UU 
stringNumberUU  
!=UU! #
nullUU$ (
)UU( )
{VV 
tryWW 
{XX 
dataYY 
=YY 
intYY "
.YY" #
ParseYY# (
(YY( )
stringNumberYY) 5
.YY5 6
TrimYY6 :
(YY: ;
)YY; <
)YY< =
;YY= >
}ZZ 
catch[[ 
([[ 
FormatException[[ )
exceptNumberFormat[[* <
)[[< =
{\\ 
IO]] 
.]] 
Logger]] !
.]]! "
Log]]" %
(]]% &
NLog]]& *
.]]* +
LogLevel]]+ 3
.]]3 4
Warn]]4 8
,]]8 9
exceptNumberFormat]]: L
,]]L M
$str	]]N Ä
)
]]Ä Å
;
]]Å Ç
}^^ 
}__ 
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptIOcc2 :
,cc: ;
$strcc< W
)ccW X
;ccX Y
}dd 
}ee 	:
.CWE369_Divide_by_Zero__int_ReadLine_divide_51bff 6
.ff6 7
GoodB2GSinkff7 B
(ffB C
dataffC G
)ffI J
;ffJ K
}gg 
}ii 
}jj Ë
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_51b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_51b 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Ù&
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_52a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_52a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	:
.CWE369_Divide_by_Zero__int_ReadLine_divide_52b77 6
.776 7
BadSink777 >
(77> ?
data77? C
)77D E
;77E F
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
intDD 
dataDD 
;DD 
dataFF 
=FF 
$numFF 
;FF :
.CWE369_Divide_by_Zero__int_ReadLine_divide_52bGG 6
.GG6 7
GoodG2BSinkGG7 B
(GGB C
dataGGC G
)GGH I
;GGI J
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{OO 	
tryQQ 
{RR 
stringTT 
stringNumberTT #
=TT$ %
ConsoleTT& -
.TT- .
ReadLineTT. 6
(TT6 7
)TT7 8
;TT8 9
ifUU 
(UU 
stringNumberUU  
!=UU! #
nullUU$ (
)UU( )
{VV 
tryWW 
{XX 
dataYY 
=YY 
intYY "
.YY" #
ParseYY# (
(YY( )
stringNumberYY) 5
.YY5 6
TrimYY6 :
(YY: ;
)YY; <
)YY< =
;YY= >
}ZZ 
catch[[ 
([[ 
FormatException[[ )
exceptNumberFormat[[* <
)[[< =
{\\ 
IO]] 
.]] 
Logger]] !
.]]! "
Log]]" %
(]]% &
NLog]]& *
.]]* +
LogLevel]]+ 3
.]]3 4
Warn]]4 8
,]]8 9
exceptNumberFormat]]: L
,]]L M
$str	]]N Ä
)
]]Ä Å
;
]]Å Ç
}^^ 
}__ 
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptIOcc2 :
,cc: ;
$strcc< W
)ccW X
;ccX Y
}dd 
}ee 	:
.CWE369_Divide_by_Zero__int_ReadLine_divide_52bff 6
.ff6 7
GoodB2GSinkff7 B
(ffB C
dataffC G
)ffH I
;ffI J
}gg 
}ii 
}jj Ä
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_52b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_52b 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_52c 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% :
.CWE369_Divide_by_Zero__int_ReadLine_divide_52c&& 6
.&&6 7
GoodG2BSink&&7 B
(&&B C
data&&C G
)&&H I
;&&I J
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_52c,, 6
.,,6 7
GoodB2GSink,,7 B
(,,B C
data,,C G
),,H I
;,,I J
}-- 
}// 
}00 Ë
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_52c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_52c 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Ù&
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_53a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_53a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	:
.CWE369_Divide_by_Zero__int_ReadLine_divide_53b77 6
.776 7
BadSink777 >
(77> ?
data77? C
)77D E
;77E F
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
intDD 
dataDD 
;DD 
dataFF 
=FF 
$numFF 
;FF :
.CWE369_Divide_by_Zero__int_ReadLine_divide_53bGG 6
.GG6 7
GoodG2BSinkGG7 B
(GGB C
dataGGC G
)GGH I
;GGI J
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{OO 	
tryQQ 
{RR 
stringTT 
stringNumberTT #
=TT$ %
ConsoleTT& -
.TT- .
ReadLineTT. 6
(TT6 7
)TT7 8
;TT8 9
ifUU 
(UU 
stringNumberUU  
!=UU! #
nullUU$ (
)UU( )
{VV 
tryWW 
{XX 
dataYY 
=YY 
intYY "
.YY" #
ParseYY# (
(YY( )
stringNumberYY) 5
.YY5 6
TrimYY6 :
(YY: ;
)YY; <
)YY< =
;YY= >
}ZZ 
catch[[ 
([[ 
FormatException[[ )
exceptNumberFormat[[* <
)[[< =
{\\ 
IO]] 
.]] 
Logger]] !
.]]! "
Log]]" %
(]]% &
NLog]]& *
.]]* +
LogLevel]]+ 3
.]]3 4
Warn]]4 8
,]]8 9
exceptNumberFormat]]: L
,]]L M
$str	]]N Ä
)
]]Ä Å
;
]]Å Ç
}^^ 
}__ 
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptIOcc2 :
,cc: ;
$strcc< W
)ccW X
;ccX Y
}dd 
}ee 	:
.CWE369_Divide_by_Zero__int_ReadLine_divide_53bff 6
.ff6 7
GoodB2GSinkff7 B
(ffB C
dataffC G
)ffH I
;ffI J
}gg 
}ii 
}jj Ä
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_53b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_53b 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_53c 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% :
.CWE369_Divide_by_Zero__int_ReadLine_divide_53c&& 6
.&&6 7
GoodG2BSink&&7 B
(&&B C
data&&C G
)&&H I
;&&I J
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_53c,, 6
.,,6 7
GoodB2GSink,,7 B
(,,B C
data,,C G
),,H I
;,,I J
}-- 
}// 
}00 Ä
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_53c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_53c 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_53d 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% :
.CWE369_Divide_by_Zero__int_ReadLine_divide_53d&& 6
.&&6 7
GoodG2BSink&&7 B
(&&B C
data&&C G
)&&H I
;&&I J
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_53d,, 6
.,,6 7
GoodB2GSink,,7 B
(,,B C
data,,C G
),,H I
;,,I J
}-- 
}// 
}00 Ë
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_53d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_53d 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Ù&
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_54a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	:
.CWE369_Divide_by_Zero__int_ReadLine_divide_54b77 6
.776 7
BadSink777 >
(77> ?
data77? C
)77D E
;77E F
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
intDD 
dataDD 
;DD 
dataFF 
=FF 
$numFF 
;FF :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54bGG 6
.GG6 7
GoodG2BSinkGG7 B
(GGB C
dataGGC G
)GGH I
;GGI J
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{OO 	
tryQQ 
{RR 
stringTT 
stringNumberTT #
=TT$ %
ConsoleTT& -
.TT- .
ReadLineTT. 6
(TT6 7
)TT7 8
;TT8 9
ifUU 
(UU 
stringNumberUU  
!=UU! #
nullUU$ (
)UU( )
{VV 
tryWW 
{XX 
dataYY 
=YY 
intYY "
.YY" #
ParseYY# (
(YY( )
stringNumberYY) 5
.YY5 6
TrimYY6 :
(YY: ;
)YY; <
)YY< =
;YY= >
}ZZ 
catch[[ 
([[ 
FormatException[[ )
exceptNumberFormat[[* <
)[[< =
{\\ 
IO]] 
.]] 
Logger]] !
.]]! "
Log]]" %
(]]% &
NLog]]& *
.]]* +
LogLevel]]+ 3
.]]3 4
Warn]]4 8
,]]8 9
exceptNumberFormat]]: L
,]]L M
$str	]]N Ä
)
]]Ä Å
;
]]Å Ç
}^^ 
}__ 
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptIOcc2 :
,cc: ;
$strcc< W
)ccW X
;ccX Y
}dd 
}ee 	:
.CWE369_Divide_by_Zero__int_ReadLine_divide_54bff 6
.ff6 7
GoodB2GSinkff7 B
(ffB C
dataffC G
)ffH I
;ffI J
}gg 
}ii 
}jj Ä
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_54b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54b 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54c 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54c&& 6
.&&6 7
GoodG2BSink&&7 B
(&&B C
data&&C G
)&&H I
;&&I J
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54c,, 6
.,,6 7
GoodB2GSink,,7 B
(,,B C
data,,C G
),,H I
;,,I J
}-- 
}// 
}00 Ä
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_54c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54c 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54d 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54d&& 6
.&&6 7
GoodG2BSink&&7 B
(&&B C
data&&C G
)&&H I
;&&I J
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54d,, 6
.,,6 7
GoodB2GSink,,7 B
(,,B C
data,,C G
),,H I
;,,I J
}-- 
}// 
}00 Ä
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_54d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54d 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54e 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54e&& 6
.&&6 7
GoodG2BSink&&7 B
(&&B C
data&&C G
)&&H I
;&&I J
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54e,, 6
.,,6 7
GoodB2GSink,,7 B
(,,B C
data,,C G
),,H I
;,,I J
}-- 
}// 
}00 Ë
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_54e.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_54e 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< ˝
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_61a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_61a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
= :
.CWE369_Divide_by_Zero__int_ReadLine_divide_61b A
.A B
	BadSourceB K
(K L
)L M
;M N
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
GoodB2G(( 
((( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
),,  !
{-- 
int.. 
data.. 
=.. :
.CWE369_Divide_by_Zero__int_ReadLine_divide_61b.. A
...A B
GoodG2BSource..B O
(..O P
)..P Q
;..Q R
IO11 

.11
 
	WriteLine11 
(11 
$str11  
+11! "
data11# '
+11( )
$str11* /
+110 1
(112 3
$num113 6
/117 8
data119 =
)11= >
+11? @
$str11A E
)11E F
;11F G
}22 
private55 
static55 
void55 
GoodB2G55 
(55  
)55  !
{66 
int77 
data77 
=77 :
.CWE369_Divide_by_Zero__int_ReadLine_divide_61b77 A
.77A B
GoodB2GSource77B O
(77O P
)77P Q
;77Q R
if99 

(99 
data99 
!=99 
$num99 
)99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; 
+;;  !
data;;" &
+;;' (
$str;;) .
+;;/ 0
(;;1 2
$num;;2 5
/;;6 7
data;;8 <
);;< =
+;;> ?
$str;;@ D
);;D E
;;;E F
}<< 	
else== 
{>> 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? @
)??@ A
;??A B
}@@ 	
}AA 
}CC 
}DD ¶"
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_61b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_61b 4
{ 
public 

static 
int 
	BadSource 
(  
)  !
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	
return77 
data77 
;77 
}88 
public== 

static== 
int== 
GoodG2BSource== #
(==# $
)==$ %
{>> 
int?? 
data?? 
;?? 
dataAA 
=AA 
$numAA 
;AA 
returnBB 
dataBB 
;BB 
}CC 
publicFF 

staticFF 
intFF 
GoodB2GSourceFF #
(FF# $
)FF$ %
{GG 
intHH 
dataHH 
;HH 
dataII 
=II 
intII 
.II 
MinValueII 
;II 
{JJ 	
tryLL 
{MM 
stringOO 
stringNumberOO #
=OO$ %
ConsoleOO& -
.OO- .
ReadLineOO. 6
(OO6 7
)OO7 8
;OO8 9
ifPP 
(PP 
stringNumberPP  
!=PP! #
nullPP$ (
)PP( )
{QQ 
tryRR 
{SS 
dataTT 
=TT 
intTT "
.TT" #
ParseTT# (
(TT( )
stringNumberTT) 5
.TT5 6
TrimTT6 :
(TT: ;
)TT; <
)TT< =
;TT= >
}UU 
catchVV 
(VV 
FormatExceptionVV )
exceptNumberFormatVV* <
)VV< =
{WW 
IOXX 
.XX 
LoggerXX !
.XX! "
LogXX" %
(XX% &
NLogXX& *
.XX* +
LogLevelXX+ 3
.XX3 4
WarnXX4 8
,XX8 9
exceptNumberFormatXX: L
,XXL M
$str	XXN Ä
)
XXÄ Å
;
XXÅ Ç
}YY 
}ZZ 
}[[ 
catch\\ 
(\\ 
IOException\\ 
exceptIO\\ '
)\\' (
{]] 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
exceptIO^^2 :
,^^: ;
$str^^< W
)^^W X
;^^X Y
}__ 
}`` 	
returnaa 
dataaa 
;aa 
}bb 
}dd 
}ee ≤.
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_66a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_66a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	
int77 
[77 
]77 
	dataArray77 
=77 
new77 
int77 !
[77! "
$num77" #
]77# $
;77$ %
	dataArray88 
[88 
$num88 
]88 
=88 
data88 
;88 :
.CWE369_Divide_by_Zero__int_ReadLine_divide_66b99 6
.996 7
BadSink997 >
(99> ?
	dataArray99? H
)99J K
;99K L
}:: 
public== 

override== 
void== 
Good== 
(== 
)== 
{>> 
GoodG2B?? 
(?? 
)?? 
;?? 
GoodB2G@@ 
(@@ 
)@@ 
;@@ 
}AA 
privateDD 
staticDD 
voidDD 
GoodG2BDD 
(DD  
)DD  !
{EE 
intFF 
dataFF 
;FF 
dataHH 
=HH 
$numHH 
;HH 
intII 
[II 
]II 
	dataArrayII 
=II 
newII 
intII !
[II! "
$numII" #
]II# $
;II$ %
	dataArrayJJ 
[JJ 
$numJJ 
]JJ 
=JJ 
dataJJ 
;JJ :
.CWE369_Divide_by_Zero__int_ReadLine_divide_66bKK 6
.KK6 7
GoodG2BSinkKK7 B
(KKB C
	dataArrayKKC L
)KKN O
;KKO P
}LL 
privateOO 
staticOO 
voidOO 
GoodB2GOO 
(OO  
)OO  !
{PP 
intQQ 
dataQQ 
;QQ 
dataRR 
=RR 
intRR 
.RR 
MinValueRR 
;RR 
{SS 	
tryUU 
{VV 
stringXX 
stringNumberXX #
=XX$ %
ConsoleXX& -
.XX- .
ReadLineXX. 6
(XX6 7
)XX7 8
;XX8 9
ifYY 
(YY 
stringNumberYY  
!=YY! #
nullYY$ (
)YY( )
{ZZ 
try[[ 
{\\ 
data]] 
=]] 
int]] "
.]]" #
Parse]]# (
(]]( )
stringNumber]]) 5
.]]5 6
Trim]]6 :
(]]: ;
)]]; <
)]]< =
;]]= >
}^^ 
catch__ 
(__ 
FormatException__ )
exceptNumberFormat__* <
)__< =
{`` 
IOaa 
.aa 
Loggeraa !
.aa! "
Logaa" %
(aa% &
NLogaa& *
.aa* +
LogLevelaa+ 3
.aa3 4
Warnaa4 8
,aa8 9
exceptNumberFormataa: L
,aaL M
$str	aaN Ä
)
aaÄ Å
;
aaÅ Ç
}bb 
}cc 
}dd 
catchee 
(ee 
IOExceptionee 
exceptIOee '
)ee' (
{ff 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptIOgg2 :
,gg: ;
$strgg< W
)ggW X
;ggX Y
}hh 
}ii 	
intjj 
[jj 
]jj 
	dataArrayjj 
=jj 
newjj 
intjj !
[jj! "
$numjj" #
]jj# $
;jj$ %
	dataArraykk 
[kk 
$numkk 
]kk 
=kk 
datakk 
;kk :
.CWE369_Divide_by_Zero__int_ReadLine_divide_66bll 6
.ll6 7
GoodB2GSinkll7 B
(llB C
	dataArrayllC L
)llN O
;llO P
}mm 
}oo 
}pp È
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_66b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_66b 4
{ 
public 

static 
void 
BadSink 
( 
int "
[" #
]# $
	dataArray% .
)/ 0
{ 
int 
data 
= 
	dataArray 
[ 
$num 
] 
;  
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
int''# &
[''& '
]''' (
	dataArray'') 2
)''3 4
{(( 
int)) 
data)) 
=)) 
	dataArray)) 
[)) 
$num)) 
])) 
;))  
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
int00# &
[00& '
]00' (
	dataArray00) 2
)003 4
{11 
int22 
data22 
=22 
	dataArray22 
[22 
$num22 
]22 
;22  
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ˇ.
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_67a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_67a 4
:5 6
AbstractTestCase7 G
{ 
public 

class 
	Container 
{ 
public 
int 
containerOne 
;  
} 
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
int## 
data## 
;## 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$ 
{%% 	
try'' 
{(( 
string** 
stringNumber** #
=**$ %
Console**& -
.**- .
ReadLine**. 6
(**6 7
)**7 8
;**8 9
if++ 
(++ 
stringNumber++  
!=++! #
null++$ (
)++( )
{,, 
try-- 
{.. 
data// 
=// 
int// "
.//" #
Parse//# (
(//( )
stringNumber//) 5
.//5 6
Trim//6 :
(//: ;
)//; <
)//< =
;//= >
}00 
catch11 
(11 
FormatException11 )
exceptNumberFormat11* <
)11< =
{22 
IO33 
.33 
Logger33 !
.33! "
Log33" %
(33% &
NLog33& *
.33* +
LogLevel33+ 3
.333 4
Warn334 8
,338 9
exceptNumberFormat33: L
,33L M
$str	33N Ä
)
33Ä Å
;
33Å Ç
}44 
}55 
}66 
catch77 
(77 
IOException77 
exceptIO77 '
)77' (
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
exceptIO992 :
,99: ;
$str99< W
)99W X
;99X Y
}:: 
};; 	
	Container<< 
dataContainer<< 
=<<  !
new<<" %
	Container<<& /
(<</ 0
)<<0 1
;<<1 2
dataContainer== 
.== 
containerOne== "
===# $
data==% )
;==) *:
.CWE369_Divide_by_Zero__int_ReadLine_divide_67b>> 6
.>>6 7
BadSink>>7 >
(>>> ?
dataContainer>>? L
)>>N O
;>>O P
}?? 
publicBB 

overrideBB 
voidBB 
GoodBB 
(BB 
)BB 
{CC 
GoodG2BDD 
(DD 
)DD 
;DD 
GoodB2GEE 
(EE 
)EE 
;EE 
}FF 
privateII 
staticII 
voidII 
GoodG2BII 
(II  
)II  !
{JJ 
intKK 
dataKK 
;KK 
dataMM 
=MM 
$numMM 
;MM 
	ContainerNN 
dataContainerNN 
=NN  !
newNN" %
	ContainerNN& /
(NN/ 0
)NN0 1
;NN1 2
dataContainerOO 
.OO 
containerOneOO "
=OO# $
dataOO% )
;OO) *:
.CWE369_Divide_by_Zero__int_ReadLine_divide_67bPP 6
.PP6 7
GoodG2BSinkPP7 B
(PPB C
dataContainerPPC P
)PPR S
;PPS T
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
intVV 
dataVV 
;VV 
dataWW 
=WW 
intWW 
.WW 
MinValueWW 
;WW 
{XX 	
tryZZ 
{[[ 
string]] 
stringNumber]] #
=]]$ %
Console]]& -
.]]- .
ReadLine]]. 6
(]]6 7
)]]7 8
;]]8 9
if^^ 
(^^ 
stringNumber^^  
!=^^! #
null^^$ (
)^^( )
{__ 
try`` 
{aa 
databb 
=bb 
intbb "
.bb" #
Parsebb# (
(bb( )
stringNumberbb) 5
.bb5 6
Trimbb6 :
(bb: ;
)bb; <
)bb< =
;bb= >
}cc 
catchdd 
(dd 
FormatExceptiondd )
exceptNumberFormatdd* <
)dd< =
{ee 
IOff 
.ff 
Loggerff !
.ff! "
Logff" %
(ff% &
NLogff& *
.ff* +
LogLevelff+ 3
.ff3 4
Warnff4 8
,ff8 9
exceptNumberFormatff: L
,ffL M
$str	ffN Ä
)
ffÄ Å
;
ffÅ Ç
}gg 
}hh 
}ii 
catchjj 
(jj 
IOExceptionjj 
exceptIOjj '
)jj' (
{kk 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptIOll2 :
,ll: ;
$strll< W
)llW X
;llX Y
}mm 
}nn 	
	Containeroo 
dataContaineroo 
=oo  !
newoo" %
	Containeroo& /
(oo/ 0
)oo0 1
;oo1 2
dataContainerpp 
.pp 
containerOnepp "
=pp# $
datapp% )
;pp) *:
.CWE369_Divide_by_Zero__int_ReadLine_divide_67bqq 6
.qq6 7
GoodB2GSinkqq7 B
(qqB C
dataContainerqqC P
)qqR S
;qqS T
}rr 
}tt 
}uu Ö
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_67b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_67b 4
{ 
public 

static 
void 
BadSink 
( :
.CWE369_Divide_by_Zero__int_ReadLine_divide_67a M
.M N
	ContainerN W
dataContainerX e
)f g
{ 
int 
data 
= 
dataContainer  
.  !
containerOne! -
;- .
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #:
.CWE369_Divide_by_Zero__int_ReadLine_divide_67a''# Q
.''Q R
	Container''R [
dataContainer''\ i
)''j k
{(( 
int)) 
data)) 
=)) 
dataContainer))  
.))  !
containerOne))! -
;))- .
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #:
.CWE369_Divide_by_Zero__int_ReadLine_divide_67a00# Q
.00Q R
	Container00R [
dataContainer00\ i
)00j k
{11 
int22 
data22 
=22 
dataContainer22  
.22  !
containerOne22! -
;22- .
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ™&
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_68a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_68a 4
:5 6
AbstractTestCase7 G
{ 
public 

static 
int 
data 
; 
public 

override 
void 
Bad 
( 
) 
{ 
data   
=   
int   
.   
MinValue   
;   
{!! 	
try## 
{$$ 
string&& 
stringNumber&& #
=&&$ %
Console&&& -
.&&- .
ReadLine&&. 6
(&&6 7
)&&7 8
;&&8 9
if'' 
('' 
stringNumber''  
!=''! #
null''$ (
)''( )
{(( 
try)) 
{** 
data++ 
=++ 
int++ "
.++" #
Parse++# (
(++( )
stringNumber++) 5
.++5 6
Trim++6 :
(++: ;
)++; <
)++< =
;++= >
},, 
catch-- 
(-- 
FormatException-- )
exceptNumberFormat--* <
)--< =
{.. 
IO// 
.// 
Logger// !
.//! "
Log//" %
(//% &
NLog//& *
.//* +
LogLevel//+ 3
.//3 4
Warn//4 8
,//8 9
exceptNumberFormat//: L
,//L M
$str	//N Ä
)
//Ä Å
;
//Å Ç
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	:
.CWE369_Divide_by_Zero__int_ReadLine_divide_68b88 6
.886 7
BadSink887 >
(88> ?
)88? @
;88@ A
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
)<< 
{== 
GoodG2B>> 
(>> 
)>> 
;>> 
GoodB2G?? 
(?? 
)?? 
;?? 
}@@ 
privateCC 
staticCC 
voidCC 
GoodG2BCC 
(CC  
)CC  !
{DD 
dataFF 
=FF 
$numFF 
;FF :
.CWE369_Divide_by_Zero__int_ReadLine_divide_68bGG 6
.GG6 7
GoodG2BSinkGG7 B
(GGB C
)GGC D
;GGD E
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
)KK  !
{LL 
dataMM 
=MM 
intMM 
.MM 
MinValueMM 
;MM 
{NN 	
tryPP 
{QQ 
stringSS 
stringNumberSS #
=SS$ %
ConsoleSS& -
.SS- .
ReadLineSS. 6
(SS6 7
)SS7 8
;SS8 9
ifTT 
(TT 
stringNumberTT  
!=TT! #
nullTT$ (
)TT( )
{UU 
tryVV 
{WW 
dataXX 
=XX 
intXX "
.XX" #
ParseXX# (
(XX( )
stringNumberXX) 5
.XX5 6
TrimXX6 :
(XX: ;
)XX; <
)XX< =
;XX= >
}YY 
catchZZ 
(ZZ 
FormatExceptionZZ )
exceptNumberFormatZZ* <
)ZZ< =
{[[ 
IO\\ 
.\\ 
Logger\\ !
.\\! "
Log\\" %
(\\% &
NLog\\& *
.\\* +
LogLevel\\+ 3
.\\3 4
Warn\\4 8
,\\8 9
exceptNumberFormat\\: L
,\\L M
$str	\\N Ä
)
\\Ä Å
;
\\Å Ç
}]] 
}^^ 
}__ 
catch`` 
(`` 
IOException`` 
exceptIO`` '
)``' (
{aa 
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb "
.bb" #
LogLevelbb# +
.bb+ ,
Warnbb, 0
,bb0 1
exceptIObb2 :
,bb: ;
$strbb< W
)bbW X
;bbX Y
}cc 
}dd 	:
.CWE369_Divide_by_Zero__int_ReadLine_divide_68bee 6
.ee6 7
GoodB2GSinkee7 B
(eeB C
)eeC D
;eeD E
}ff 
}hh 
}ii Ÿ
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_68b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_68b 4
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
int 
data 
= :
.CWE369_Divide_by_Zero__int_ReadLine_divide_68a A
.A B
dataB F
;F G
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
)''# $
{(( 
int)) 
data)) 
=)) :
.CWE369_Divide_by_Zero__int_ReadLine_divide_68a)) A
.))A B
data))B F
;))F G
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
)00# $
{11 
int22 
data22 
=22 :
.CWE369_Divide_by_Zero__int_ReadLine_divide_68a22 A
.22A B
data22B F
;22F G
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ≤(
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_71a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_71a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	:
.CWE369_Divide_by_Zero__int_ReadLine_divide_71b77 6
.776 7
BadSink777 >
(77> ?
(77? @
Object77@ F
)77F G
data77G K
)77M N
;77N O
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
staticBB 
voidBB 
GoodG2BBB 
(BB  
)BB  !
{CC 
intDD 
dataDD 
;DD 
dataFF 
=FF 
$numFF 
;FF :
.CWE369_Divide_by_Zero__int_ReadLine_divide_71bGG 6
.GG6 7
GoodG2BSinkGG7 B
(GGB C
(GGC D
ObjectGGD J
)GGJ K
dataGGK O
)GGQ R
;GGR S
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
)KK  !
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{OO 	
tryQQ 
{RR 
stringTT 
stringNumberTT #
=TT$ %
ConsoleTT& -
.TT- .
ReadLineTT. 6
(TT6 7
)TT7 8
;TT8 9
ifUU 
(UU 
stringNumberUU  
!=UU! #
nullUU$ (
)UU( )
{VV 
tryWW 
{XX 
dataYY 
=YY 
intYY "
.YY" #
ParseYY# (
(YY( )
stringNumberYY) 5
.YY5 6
TrimYY6 :
(YY: ;
)YY; <
)YY< =
;YY= >
}ZZ 
catch[[ 
([[ 
FormatException[[ )
exceptNumberFormat[[* <
)[[< =
{\\ 
IO]] 
.]] 
Logger]] !
.]]! "
Log]]" %
(]]% &
NLog]]& *
.]]* +
LogLevel]]+ 3
.]]3 4
Warn]]4 8
,]]8 9
exceptNumberFormat]]: L
,]]L M
$str	]]N Ä
)
]]Ä Å
;
]]Å Ç
}^^ 
}__ 
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptIOcc2 :
,cc: ;
$strcc< W
)ccW X
;ccX Y
}dd 
}ee 	:
.CWE369_Divide_by_Zero__int_ReadLine_divide_71bff 6
.ff6 7
GoodB2GSinkff7 B
(ffB C
(ffC D
ObjectffD J
)ffJ K
dataffK O
)ffQ R
;ffR S
}gg 
}ii 
}jj õ
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_71b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_71b 4
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
int 
data 
= 
( 
int 
) 

dataObject "
;" #
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
Object((# )

dataObject((* 4
)((5 6
{)) 
int** 
data** 
=** 
(** 
int** 
)** 

dataObject** "
;**" #
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
Object11# )

dataObject11* 4
)115 6
{22 
int33 
data33 
=33 
(33 
int33 
)33 

dataObject33 "
;33" #
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ¢6
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_72a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_72a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{!! 	
try## 
{$$ 
string&& 
stringNumber&& #
=&&$ %
Console&&& -
.&&- .
ReadLine&&. 6
(&&6 7
)&&7 8
;&&8 9
if'' 
('' 
stringNumber''  
!=''! #
null''$ (
)''( )
{(( 
try)) 
{** 
data++ 
=++ 
int++ "
.++" #
Parse++# (
(++( )
stringNumber++) 5
.++5 6
Trim++6 :
(++: ;
)++; <
)++< =
;++= >
},, 
catch-- 
(-- 
FormatException-- )
exceptNumberFormat--* <
)--< =
{.. 
IO// 
.// 
Logger// !
.//! "
Log//" %
(//% &
NLog//& *
.//* +
LogLevel//+ 3
.//3 4
Warn//4 8
,//8 9
exceptNumberFormat//: L
,//L M
$str	//N Ä
)
//Ä Å
;
//Å Ç
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	
	Hashtable88 
dataHashtable88 
=88  !
new88" %
	Hashtable88& /
(88/ 0
$num880 1
)881 2
;882 3
dataHashtable99 
.99 
Add99 
(99 
$num99 
,99 
data99 !
)99! "
;99" #
dataHashtable:: 
.:: 
Add:: 
(:: 
$num:: 
,:: 
data:: !
)::! "
;::" #
dataHashtable;; 
.;; 
Add;; 
(;; 
$num;; 
,;; 
data;; !
);;! "
;;;" #:
.CWE369_Divide_by_Zero__int_ReadLine_divide_72b<< 6
.<<6 7
BadSink<<7 >
(<<> ?
dataHashtable<<? L
)<<N O
;<<O P
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
intII 
dataII 
;II 
dataKK 
=KK 
$numKK 
;KK 
	HashtableLL 
dataHashtableLL 
=LL  !
newLL" %
	HashtableLL& /
(LL/ 0
$numLL0 1
)LL1 2
;LL2 3
dataHashtableMM 
.MM 
AddMM 
(MM 
$numMM 
,MM 
dataMM !
)MM! "
;MM" #
dataHashtableNN 
.NN 
AddNN 
(NN 
$numNN 
,NN 
dataNN !
)NN! "
;NN" #
dataHashtableOO 
.OO 
AddOO 
(OO 
$numOO 
,OO 
dataOO !
)OO! "
;OO" #:
.CWE369_Divide_by_Zero__int_ReadLine_divide_72bPP 6
.PP6 7
GoodG2BSinkPP7 B
(PPB C
dataHashtablePPC P
)PPR S
;PPS T
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
intVV 
dataVV 
;VV 
dataWW 
=WW 
intWW 
.WW 
MinValueWW 
;WW 
{XX 	
tryZZ 
{[[ 
string]] 
stringNumber]] #
=]]$ %
Console]]& -
.]]- .
ReadLine]]. 6
(]]6 7
)]]7 8
;]]8 9
if^^ 
(^^ 
stringNumber^^  
!=^^! #
null^^$ (
)^^( )
{__ 
try`` 
{aa 
databb 
=bb 
intbb "
.bb" #
Parsebb# (
(bb( )
stringNumberbb) 5
.bb5 6
Trimbb6 :
(bb: ;
)bb; <
)bb< =
;bb= >
}cc 
catchdd 
(dd 
FormatExceptiondd )
exceptNumberFormatdd* <
)dd< =
{ee 
IOff 
.ff 
Loggerff !
.ff! "
Logff" %
(ff% &
NLogff& *
.ff* +
LogLevelff+ 3
.ff3 4
Warnff4 8
,ff8 9
exceptNumberFormatff: L
,ffL M
$str	ffN Ä
)
ffÄ Å
;
ffÅ Ç
}gg 
}hh 
}ii 
catchjj 
(jj 
IOExceptionjj 
exceptIOjj '
)jj' (
{kk 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptIOll2 :
,ll: ;
$strll< W
)llW X
;llX Y
}mm 
}nn 	
	Hashtableoo 
dataHashtableoo 
=oo  !
newoo" %
	Hashtableoo& /
(oo/ 0
$numoo0 1
)oo1 2
;oo2 3
dataHashtablepp 
.pp 
Addpp 
(pp 
$numpp 
,pp 
datapp !
)pp! "
;pp" #
dataHashtableqq 
.qq 
Addqq 
(qq 
$numqq 
,qq 
dataqq !
)qq! "
;qq" #
dataHashtablerr 
.rr 
Addrr 
(rr 
$numrr 
,rr 
datarr !
)rr! "
;rr" #:
.CWE369_Divide_by_Zero__int_ReadLine_divide_72bss 6
.ss6 7
GoodB2GSinkss7 B
(ssB C
dataHashtablessC P
)ssR S
;ssS T
}tt 
}vv 
}ww ∆
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_72b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_72b 4
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
int 
data 
= 
( 
int 
) 
dataHashtable &
[& '
$num' (
]( )
;) *
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
	Hashtable((# ,
dataHashtable((- :
)((; <
{)) 
int** 
data** 
=** 
(** 
int** 
)** 
dataHashtable** &
[**& '
$num**' (
]**( )
;**) *
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
	Hashtable11# ,
dataHashtable11- :
)11; <
{22 
int33 
data33 
=33 
(33 
int33 
)33 
dataHashtable33 &
[33& '
$num33' (
]33( )
;33) *
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ñ6
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_73a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_73a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{!! 	
try## 
{$$ 
string&& 
stringNumber&& #
=&&$ %
Console&&& -
.&&- .
ReadLine&&. 6
(&&6 7
)&&7 8
;&&8 9
if'' 
('' 
stringNumber''  
!=''! #
null''$ (
)''( )
{(( 
try)) 
{** 
data++ 
=++ 
int++ "
.++" #
Parse++# (
(++( )
stringNumber++) 5
.++5 6
Trim++6 :
(++: ;
)++; <
)++< =
;++= >
},, 
catch-- 
(-- 
FormatException-- )
exceptNumberFormat--* <
)--< =
{.. 
IO// 
.// 
Logger// !
.//! "
Log//" %
(//% &
NLog//& *
.//* +
LogLevel//+ 3
.//3 4
Warn//4 8
,//8 9
exceptNumberFormat//: L
,//L M
$str	//N Ä
)
//Ä Å
;
//Å Ç
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	

LinkedList88 
<88 
int88 
>88 
dataLinkedList88 &
=88' (
new88) ,

LinkedList88- 7
<887 8
int888 ;
>88; <
(88< =
)88= >
;88> ?
dataLinkedList99 
.99 
AddLast99 
(99 
data99 #
)99# $
;99$ %
dataLinkedList:: 
.:: 
AddLast:: 
(:: 
data:: #
)::# $
;::$ %
dataLinkedList;; 
.;; 
AddLast;; 
(;; 
data;; #
);;# $
;;;$ %:
.CWE369_Divide_by_Zero__int_ReadLine_divide_73b<< 6
.<<6 7
BadSink<<7 >
(<<> ?
dataLinkedList<<? M
)<<O P
;<<P Q
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
intII 
dataII 
;II 
dataKK 
=KK 
$numKK 
;KK 

LinkedListLL 
<LL 
intLL 
>LL 
dataLinkedListLL &
=LL' (
newLL) ,

LinkedListLL- 7
<LL7 8
intLL8 ;
>LL; <
(LL< =
)LL= >
;LL> ?
dataLinkedListMM 
.MM 
AddLastMM 
(MM 
dataMM #
)MM# $
;MM$ %
dataLinkedListNN 
.NN 
AddLastNN 
(NN 
dataNN #
)NN# $
;NN$ %
dataLinkedListOO 
.OO 
AddLastOO 
(OO 
dataOO #
)OO# $
;OO$ %:
.CWE369_Divide_by_Zero__int_ReadLine_divide_73bPP 6
.PP6 7
GoodG2BSinkPP7 B
(PPB C
dataLinkedListPPC Q
)PPS T
;PPT U
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
intVV 
dataVV 
;VV 
dataWW 
=WW 
intWW 
.WW 
MinValueWW 
;WW 
{XX 	
tryZZ 
{[[ 
string]] 
stringNumber]] #
=]]$ %
Console]]& -
.]]- .
ReadLine]]. 6
(]]6 7
)]]7 8
;]]8 9
if^^ 
(^^ 
stringNumber^^  
!=^^! #
null^^$ (
)^^( )
{__ 
try`` 
{aa 
databb 
=bb 
intbb "
.bb" #
Parsebb# (
(bb( )
stringNumberbb) 5
.bb5 6
Trimbb6 :
(bb: ;
)bb; <
)bb< =
;bb= >
}cc 
catchdd 
(dd 
FormatExceptiondd )
exceptNumberFormatdd* <
)dd< =
{ee 
IOff 
.ff 
Loggerff !
.ff! "
Logff" %
(ff% &
NLogff& *
.ff* +
LogLevelff+ 3
.ff3 4
Warnff4 8
,ff8 9
exceptNumberFormatff: L
,ffL M
$str	ffN Ä
)
ffÄ Å
;
ffÅ Ç
}gg 
}hh 
}ii 
catchjj 
(jj 
IOExceptionjj 
exceptIOjj '
)jj' (
{kk 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptIOll2 :
,ll: ;
$strll< W
)llW X
;llX Y
}mm 
}nn 	

LinkedListoo 
<oo 
intoo 
>oo 
dataLinkedListoo &
=oo' (
newoo) ,

LinkedListoo- 7
<oo7 8
intoo8 ;
>oo; <
(oo< =
)oo= >
;oo> ?
dataLinkedListpp 
.pp 
AddLastpp 
(pp 
datapp #
)pp# $
;pp$ %
dataLinkedListqq 
.qq 
AddLastqq 
(qq 
dataqq #
)qq# $
;qq$ %
dataLinkedListrr 
.rr 
AddLastrr 
(rr 
datarr #
)rr# $
;rr$ %:
.CWE369_Divide_by_Zero__int_ReadLine_divide_73bss 6
.ss6 7
GoodB2GSinkss7 B
(ssB C
dataLinkedListssC Q
)ssS T
;ssT U
}tt 
}vv 
}ww à
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_73b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_73b 4
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
int* -
>- .
dataLinkedList/ =
)> ?
{ 
int 
data 
= 
dataLinkedList !
.! "
Last" &
.& '
Value' ,
;, -
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #

LinkedList((# -
<((- .
int((. 1
>((1 2
dataLinkedList((3 A
)((B C
{)) 
int** 
data** 
=** 
dataLinkedList** !
.**! "
Last**" &
.**& '
Value**' ,
;**, -
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

LinkedList11# -
<11- .
int11. 1
>111 2
dataLinkedList113 A
)11B C
{22 
int33 
data33 
=33 
dataLinkedList33 !
.33! "
Last33" &
.33& '
Value33' ,
;33, -
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ €9
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_74a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_74a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{!! 	
try## 
{$$ 
string&& 
stringNumber&& #
=&&$ %
Console&&& -
.&&- .
ReadLine&&. 6
(&&6 7
)&&7 8
;&&8 9
if'' 
('' 
stringNumber''  
!=''! #
null''$ (
)''( )
{(( 
try)) 
{** 
data++ 
=++ 
int++ "
.++" #
Parse++# (
(++( )
stringNumber++) 5
.++5 6
Trim++6 :
(++: ;
)++; <
)++< =
;++= >
},, 
catch-- 
(-- 
FormatException-- )
exceptNumberFormat--* <
)--< =
{.. 
IO// 
.// 
Logger// !
.//! "
Log//" %
(//% &
NLog//& *
.//* +
LogLevel//+ 3
.//3 4
Warn//4 8
,//8 9
exceptNumberFormat//: L
,//L M
$str	//N Ä
)
//Ä Å
;
//Å Ç
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	

Dictionary88 
<88 
int88 
,88 
int88 
>88 
dataDictionary88 *
=88+ ,
new88- 0

Dictionary881 ;
<88; <
int88< ?
,88? @
int88@ C
>88C D
(88D E
)88E F
;88F G
dataDictionary99 
.99 
Add99 
(99 
$num99 
,99 
data99 "
)99" #
;99# $
dataDictionary:: 
.:: 
Add:: 
(:: 
$num:: 
,:: 
data:: "
)::" #
;::# $
dataDictionary;; 
.;; 
Add;; 
(;; 
$num;; 
,;; 
data;; "
);;" #
;;;# $:
.CWE369_Divide_by_Zero__int_ReadLine_divide_74b<< 6
.<<6 7
BadSink<<7 >
(<<> ?
dataDictionary<<? M
)<<O P
;<<P Q
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
intII 
dataII 
;II 
dataKK 
=KK 
$numKK 
;KK 

DictionaryLL 
<LL 
intLL 
,LL 
intLL 
>LL 
dataDictionaryLL *
=LL+ ,
newLL- 0

DictionaryLL1 ;
<LL; <
intLL< ?
,LL? @
intLL@ C
>LLC D
(LLD E
)LLE F
;LLF G
dataDictionaryMM 
.MM 
AddMM 
(MM 
$numMM 
,MM 
dataMM "
)MM" #
;MM# $
dataDictionaryNN 
.NN 
AddNN 
(NN 
$numNN 
,NN 
dataNN "
)NN" #
;NN# $
dataDictionaryOO 
.OO 
AddOO 
(OO 
$numOO 
,OO 
dataOO "
)OO" #
;OO# $:
.CWE369_Divide_by_Zero__int_ReadLine_divide_74bPP 6
.PP6 7
GoodG2BSinkPP7 B
(PPB C
dataDictionaryPPC Q
)PPS T
;PPT U
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
intVV 
dataVV 
;VV 
dataWW 
=WW 
intWW 
.WW 
MinValueWW 
;WW 
{XX 	
tryZZ 
{[[ 
string]] 
stringNumber]] #
=]]$ %
Console]]& -
.]]- .
ReadLine]]. 6
(]]6 7
)]]7 8
;]]8 9
if^^ 
(^^ 
stringNumber^^  
!=^^! #
null^^$ (
)^^( )
{__ 
try`` 
{aa 
databb 
=bb 
intbb "
.bb" #
Parsebb# (
(bb( )
stringNumberbb) 5
.bb5 6
Trimbb6 :
(bb: ;
)bb; <
)bb< =
;bb= >
}cc 
catchdd 
(dd 
FormatExceptiondd )
exceptNumberFormatdd* <
)dd< =
{ee 
IOff 
.ff 
Loggerff !
.ff! "
Logff" %
(ff% &
NLogff& *
.ff* +
LogLevelff+ 3
.ff3 4
Warnff4 8
,ff8 9
exceptNumberFormatff: L
,ffL M
$str	ffN Ä
)
ffÄ Å
;
ffÅ Ç
}gg 
}hh 
}ii 
catchjj 
(jj 
IOExceptionjj 
exceptIOjj '
)jj' (
{kk 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptIOll2 :
,ll: ;
$strll< W
)llW X
;llX Y
}mm 
}nn 	

Dictionaryoo 
<oo 
intoo 
,oo 
intoo 
>oo 
dataDictionaryoo *
=oo+ ,
newoo- 0

Dictionaryoo1 ;
<oo; <
intoo< ?
,oo? @
intoo@ C
>ooC D
(ooD E
)ooE F
;ooF G
dataDictionarypp 
.pp 
Addpp 
(pp 
$numpp 
,pp 
datapp "
)pp" #
;pp# $
dataDictionaryqq 
.qq 
Addqq 
(qq 
$numqq 
,qq 
dataqq "
)qq" #
;qq# $
dataDictionaryrr 
.rr 
Addrr 
(rr 
$numrr 
,rr 
datarr "
)rr" #
;rr# $:
.CWE369_Divide_by_Zero__int_ReadLine_divide_74bss 6
.ss6 7
GoodB2GSinkss7 B
(ssB C
dataDictionaryssC Q
)ssS T
;ssT U
}tt 
}vv 
}ww Ø
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_74b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_74b 4
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
int. 1
>1 2
dataDictionary3 A
)B C
{ 
int 
data 
= 
dataDictionary !
[! "
$num" #
]# $
;$ %
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( #
(((# $

Dictionary(($ .
<((. /
int((/ 2
,((2 3
int((3 6
>((6 7
dataDictionary((8 F
)((G H
{)) 
int** 
data** 
=** 
dataDictionary** !
[**! "
$num**" #
]**# $
;**$ %
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

Dictionary11# -
<11- .
int11. 1
,111 2
int112 5
>115 6
dataDictionary117 E
)11F G
{22 
int33 
data33 
=33 
dataDictionary33 !
[33! "
$num33" #
]33# $
;33$ %
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ¿S
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_75a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_75a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
data!! 
=!! 
int!! 
.!! 
MinValue!! 
;!! 
{"" 	
try$$ 
{%% 
string'' 
stringNumber'' #
=''$ %
Console''& -
.''- .
ReadLine''. 6
(''6 7
)''7 8
;''8 9
if(( 
((( 
stringNumber((  
!=((! #
null(($ (
)((( )
{)) 
try** 
{++ 
data,, 
=,, 
int,, "
.,," #
Parse,,# (
(,,( )
stringNumber,,) 5
.,,5 6
Trim,,6 :
(,,: ;
),,; <
),,< =
;,,= >
}-- 
catch.. 
(.. 
FormatException.. )
exceptNumberFormat..* <
)..< =
{// 
IO00 
.00 
Logger00 !
.00! "
Log00" %
(00% &
NLog00& *
.00* +
LogLevel00+ 3
.003 4
Warn004 8
,008 9
exceptNumberFormat00: L
,00L M
$str	00N Ä
)
00Ä Å
;
00Å Ç
}11 
}22 
}33 
catch44 
(44 
IOException44 
exceptIO44 '
)44' (
{55 
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 "
.66" #
LogLevel66# +
.66+ ,
Warn66, 0
,660 1
exceptIO662 :
,66: ;
$str66< W
)66W X
;66X Y
}77 
}88 	
byte:: 
[:: 
]:: 
dataSerialized:: 
=:: 
null::  $
;::$ %
try;; 
{<< 	
BinaryFormatter== 
bf== 
===  
new==! $
BinaryFormatter==% 4
(==4 5
)==5 6
;==6 7
using>> 
(>> 
var>> 
ms>> 
=>> 
new>> 
MemoryStream>>  ,
(>>, -
)>>- .
)>>. /
{?? 
bf@@ 
.@@ 
	Serialize@@ 
(@@ 
ms@@ 
,@@  
data@@! %
)@@% &
;@@& '
dataSerializedAA 
=AA  
msAA! #
.AA# $
ToArrayAA$ +
(AA+ ,
)AA, -
;AA- .
}BB :
.CWE369_Divide_by_Zero__int_ReadLine_divide_75bCC :
.CC: ;
BadSinkCC; B
(CCB C
dataSerializedCCC Q
)CCS T
;CCT U
}DD 	
catchEE 
(EE "
SerializationExceptionEE %
exceptSerializeEE& 5
)EE5 6
{FF 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
$strGG. X
,GGX Y
exceptSerializeGGZ i
)GGi j
;GGj k
}HH 	
}II 
publicLL 

overrideLL 
voidLL 
GoodLL 
(LL 
)LL 
{MM 
GoodG2BNN 
(NN 
)NN 
;NN 
GoodB2GOO 
(OO 
)OO 
;OO 
}PP 
privateSS 
staticSS 
voidSS 
GoodG2BSS 
(SS  
)SS  !
{TT 
intUU 
dataUU 
;UU 
dataVV 
=VV 
intVV 
.VV 
MinValueVV 
;VV 
{WW 	
tryYY 
{ZZ 
string\\ 
stringNumber\\ #
=\\$ %
Console\\& -
.\\- .
ReadLine\\. 6
(\\6 7
)\\7 8
;\\8 9
if]] 
(]] 
stringNumber]]  
!=]]! #
null]]$ (
)]]( )
{^^ 
try__ 
{`` 
dataaa 
=aa 
intaa "
.aa" #
Parseaa# (
(aa( )
stringNumberaa) 5
.aa5 6
Trimaa6 :
(aa: ;
)aa; <
)aa< =
;aa= >
}bb 
catchcc 
(cc 
FormatExceptioncc )
exceptNumberFormatcc* <
)cc< =
{dd 
IOee 
.ee 
Loggeree !
.ee! "
Logee" %
(ee% &
NLogee& *
.ee* +
LogLevelee+ 3
.ee3 4
Warnee4 8
,ee8 9
exceptNumberFormatee: L
,eeL M
$str	eeN Ä
)
eeÄ Å
;
eeÅ Ç
}ff 
}gg 
}hh 
catchii 
(ii 
IOExceptionii 
exceptIOii '
)ii' (
{jj 
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk "
.kk" #
LogLevelkk# +
.kk+ ,
Warnkk, 0
,kk0 1
exceptIOkk2 :
,kk: ;
$strkk< W
)kkW X
;kkX Y
}ll 
}mm 	
byteoo 
[oo 
]oo 
dataSerializedoo 
=oo 
nulloo  $
;oo$ %
trypp 
{qq 	
BinaryFormatterrr 
bfrr 
=rr  
newrr! $
BinaryFormatterrr% 4
(rr4 5
)rr5 6
;rr6 7
usingss 
(ss 
varss 
msss 
=ss 
newss 
MemoryStreamss  ,
(ss, -
)ss- .
)ss. /
{tt 
bfuu 
.uu 
	Serializeuu 
(uu 
msuu 
,uu  
datauu! %
)uu% &
;uu& '
dataSerializedvv 
=vv  
msvv! #
.vv# $
ToArrayvv$ +
(vv+ ,
)vv, -
;vv- .
}ww :
.CWE369_Divide_by_Zero__int_ReadLine_divide_75bxx :
.xx: ;
GoodG2BSinkxx; F
(xxF G
dataSerializedxxG U
)xxW X
;xxX Y
}yy 	
catchzz 
(zz "
SerializationExceptionzz %
exceptSerializezz& 5
)zz5 6
{{{ 	
IO|| 
.|| 
Logger|| 
.|| 
Log|| 
(|| 
NLog|| 
.|| 
LogLevel|| '
.||' (
Warn||( ,
,||, -
$str||. X
,||X Y
exceptSerialize||Z i
)||i j
;||j k
}}} 	
}~~ 
private
ÅÅ 
static
ÅÅ 
void
ÅÅ 
GoodB2G
ÅÅ 
(
ÅÅ  
)
ÅÅ  !
{
ÇÇ 
int
ÉÉ 
data
ÉÉ 
;
ÉÉ 
data
ÑÑ 
=
ÑÑ 
int
ÑÑ 
.
ÑÑ 
MinValue
ÑÑ 
;
ÑÑ 
{
ÖÖ 	
try
áá 
{
àà 
string
ää 
stringNumber
ää #
=
ää$ %
Console
ää& -
.
ää- .
ReadLine
ää. 6
(
ää6 7
)
ää7 8
;
ää8 9
if
ãã 
(
ãã 
stringNumber
ãã  
!=
ãã! #
null
ãã$ (
)
ãã( )
{
åå 
try
çç 
{
éé 
data
èè 
=
èè 
int
èè "
.
èè" #
Parse
èè# (
(
èè( )
stringNumber
èè) 5
.
èè5 6
Trim
èè6 :
(
èè: ;
)
èè; <
)
èè< =
;
èè= >
}
êê 
catch
ëë 
(
ëë 
FormatException
ëë ) 
exceptNumberFormat
ëë* <
)
ëë< =
{
íí 
IO
ìì 
.
ìì 
Logger
ìì !
.
ìì! "
Log
ìì" %
(
ìì% &
NLog
ìì& *
.
ìì* +
LogLevel
ìì+ 3
.
ìì3 4
Warn
ìì4 8
,
ìì8 9 
exceptNumberFormat
ìì: L
,
ììL M
$strììN Ä
)ììÄ Å
;ììÅ Ç
}
îî 
}
ïï 
}
ññ 
catch
óó 
(
óó 
IOException
óó 
exceptIO
óó '
)
óó' (
{
òò 
IO
ôô 
.
ôô 
Logger
ôô 
.
ôô 
Log
ôô 
(
ôô 
NLog
ôô "
.
ôô" #
LogLevel
ôô# +
.
ôô+ ,
Warn
ôô, 0
,
ôô0 1
exceptIO
ôô2 :
,
ôô: ;
$str
ôô< W
)
ôôW X
;
ôôX Y
}
öö 
}
õõ 	
byte
ùù 
[
ùù 
]
ùù 
dataSerialized
ùù 
=
ùù 
null
ùù  $
;
ùù$ %
try
ûû 
{
üü 	
BinaryFormatter
†† 
bf
†† 
=
††  
new
††! $
BinaryFormatter
††% 4
(
††4 5
)
††5 6
;
††6 7
using
°° 
(
°° 
var
°° 
ms
°° 
=
°° 
new
°° 
MemoryStream
°°  ,
(
°°, -
)
°°- .
)
°°. /
{
¢¢ 
bf
££ 
.
££ 
	Serialize
££ 
(
££ 
ms
££ 
,
££  
data
££! %
)
££% &
;
££& '
dataSerialized
§§ 
=
§§  
ms
§§! #
.
§§# $
ToArray
§§$ +
(
§§+ ,
)
§§, -
;
§§- .
}
•• <
.CWE369_Divide_by_Zero__int_ReadLine_divide_75b
¶¶ :
.
¶¶: ;
GoodB2GSink
¶¶; F
(
¶¶F G
dataSerialized
¶¶G U
)
¶¶W X
;
¶¶X Y
}
ßß 	
catch
®® 
(
®® $
SerializationException
®® %
exceptSerialize
®®& 5
)
®®5 6
{
©© 	
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ 
(
™™ 
NLog
™™ 
.
™™ 
LogLevel
™™ '
.
™™' (
Warn
™™( ,
,
™™, -
$str
™™. X
,
™™X Y
exceptSerialize
™™Z i
)
™™i j
;
™™j k
}
´´ 	
}
¨¨ 
}ÆÆ 
}ØØ »5
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_75b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_75b 4
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
int## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
int)) 
))) 
binForm)) #
.))# $
Deserialize))$ /
())/ 0
	memStream))0 9
)))9 :
;)): ;
}** 
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
catch// 
(// "
SerializationException// %
exceptSerialize//& 5
)//5 6
{00 	
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 
.11 
LogLevel11 '
.11' (
Warn11( ,
,11, -
$str11. Y
,11Y Z
exceptSerialize11[ j
)11j k
;11k l
}22 	
}33 
public88 

static88 
void88 
GoodG2BSink88 "
(88" #
byte88# '
[88' (
]88( )
dataSerialized88* 8
)889 :
{99 
try:: 
{;; 	
int<< 
data<< 
;<< 
var== 
binForm== 
=== 
new== 
BinaryFormatter== -
(==- .
)==. /
;==/ 0
using>> 
(>> 
var>> 
	memStream>>  
=>>! "
new>># &
MemoryStream>>' 3
(>>3 4
)>>4 5
)>>5 6
{?? 
	memStream@@ 
.@@ 
Write@@ 
(@@  
dataSerialized@@  .
,@@. /
$num@@0 1
,@@1 2
dataSerialized@@3 A
.@@A B
Length@@B H
)@@H I
;@@I J
	memStreamAA 
.AA 
SeekAA 
(AA 
$numAA  
,AA  !

SeekOriginAA" ,
.AA, -
BeginAA- 2
)AA2 3
;AA3 4
dataBB 
=BB 
(BB 
intBB 
)BB 
binFormBB #
.BB# $
DeserializeBB$ /
(BB/ 0
	memStreamBB0 9
)BB9 :
;BB: ;
}CC 
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
catchHH 
(HH "
SerializationExceptionHH %
exceptSerializeHH& 5
)HH5 6
{II 	
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ 
.JJ 
LogLevelJJ '
.JJ' (
WarnJJ( ,
,JJ, -
$strJJ. Y
,JJY Z
exceptSerializeJJ[ j
)JJj k
;JJk l
}KK 	
}LL 
publicOO 

staticOO 
voidOO 
GoodB2GSinkOO "
(OO" #
byteOO# '
[OO' (
]OO( )
dataSerializedOO* 8
)OO9 :
{PP 
tryQQ 
{RR 	
intSS 
dataSS 
;SS 
varTT 
binFormTT 
=TT 
newTT 
BinaryFormatterTT -
(TT- .
)TT. /
;TT/ 0
usingUU 
(UU 
varUU 
	memStreamUU  
=UU! "
newUU# &
MemoryStreamUU' 3
(UU3 4
)UU4 5
)UU5 6
{VV 
	memStreamWW 
.WW 
WriteWW 
(WW  
dataSerializedWW  .
,WW. /
$numWW0 1
,WW1 2
dataSerializedWW3 A
.WWA B
LengthWWB H
)WWH I
;WWI J
	memStreamXX 
.XX 
SeekXX 
(XX 
$numXX  
,XX  !

SeekOriginXX" ,
.XX, -
BeginXX- 2
)XX2 3
;XX3 4
dataYY 
=YY 
(YY 
intYY 
)YY 
binFormYY #
.YY# $
DeserializeYY$ /
(YY/ 0
	memStreamYY0 9
)YY9 :
;YY: ;
}ZZ 
if\\ 
(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ #
+^^$ %
data^^& *
+^^+ ,
$str^^- 2
+^^3 4
(^^5 6
$num^^6 9
/^^: ;
data^^< @
)^^@ A
+^^B C
$str^^D H
)^^H I
;^^I J
}__ 
else`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb D
)bbD E
;bbE F
}cc 
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. Y
,ggY Z
exceptSerializegg[ j
)ggj k
;ggk l
}hh 	
}ii 
}kk 
}ll ¿+
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_81a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_divide_81a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	>
2CWE369_Divide_by_Zero__int_ReadLine_divide_81_base77 :

baseObject77; E
=77F G
new77H K=
1CWE369_Divide_by_Zero__int_ReadLine_divide_81_bad77L }
(77} ~
)77~ 
;	77 Ä

baseObject88 
.88 
Action88 
(88 
data88 
)88  
;88  !
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
)<< 
{== 
GoodG2B>> 
(>> 
)>> 
;>> 
GoodB2G?? 
(?? 
)?? 
;?? 
}@@ 
privateCC 
voidCC 
GoodG2BCC 
(CC 
)CC 
{DD 
intEE 
dataEE 
;EE 
dataGG 
=GG 
$numGG 
;GG >
2CWE369_Divide_by_Zero__int_ReadLine_divide_81_baseHH :

baseObjectHH; E
=HHF G
newHHH KB
5CWE369_Divide_by_Zero__int_ReadLine_divide_81_goodG2B	HHL Å
(
HHÅ Ç
)
HHÇ É
;
HHÉ Ñ

baseObjectII 
.II 
ActionII 
(II 
dataII 
)II  
;II  !
}JJ 
privateMM 
voidMM 
GoodB2GMM 
(MM 
)MM 
{NN 
intOO 
dataOO 
;OO 
dataPP 
=PP 
intPP 
.PP 
MinValuePP 
;PP 
{QQ 	
trySS 
{TT 
stringVV 
stringNumberVV #
=VV$ %
ConsoleVV& -
.VV- .
ReadLineVV. 6
(VV6 7
)VV7 8
;VV8 9
ifWW 
(WW 
stringNumberWW  
!=WW! #
nullWW$ (
)WW( )
{XX 
tryYY 
{ZZ 
data[[ 
=[[ 
int[[ "
.[[" #
Parse[[# (
([[( )
stringNumber[[) 5
.[[5 6
Trim[[6 :
([[: ;
)[[; <
)[[< =
;[[= >
}\\ 
catch]] 
(]] 
FormatException]] )
exceptNumberFormat]]* <
)]]< =
{^^ 
IO__ 
.__ 
Logger__ !
.__! "
Log__" %
(__% &
NLog__& *
.__* +
LogLevel__+ 3
.__3 4
Warn__4 8
,__8 9
exceptNumberFormat__: L
,__L M
$str	__N Ä
)
__Ä Å
;
__Å Ç
}`` 
}aa 
}bb 
catchcc 
(cc 
IOExceptioncc 
exceptIOcc '
)cc' (
{dd 
IOee 
.ee 
Loggeree 
.ee 
Logee 
(ee 
NLogee "
.ee" #
LogLevelee# +
.ee+ ,
Warnee, 0
,ee0 1
exceptIOee2 :
,ee: ;
$stree< W
)eeW X
;eeX Y
}ff 
}gg 	>
2CWE369_Divide_by_Zero__int_ReadLine_divide_81_basehh :

baseObjecthh; E
=hhF G
newhhH KB
5CWE369_Divide_by_Zero__int_ReadLine_divide_81_goodB2G	hhL Å
(
hhÅ Ç
)
hhÇ É
;
hhÉ Ñ

baseObjectii 
.ii 
Actionii 
(ii 
dataii 
)ii  
;ii  !
}jj 
}ll 
}mm ≈
™C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_81_bad.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class =
1CWE369_Divide_by_Zero__int_ReadLine_divide_81_bad 7
:8 9>
2CWE369_Divide_by_Zero__int_ReadLine_divide_81_base: l
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
}"" 
}## «
´C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_81_base.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
abstract 
class	 >
2CWE369_Divide_by_Zero__int_ReadLine_divide_81_base A
{ 
public 

abstract 
void 
Action 
(  
int  #
data$ (
)) *
;* +
} 
} Ú	
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_81_goodB2G.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_ReadLine_divide_81_goodB2G ;
:< =>
2CWE369_Divide_by_Zero__int_ReadLine_divide_81_base> p
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
if   

(   
data   
!=   
$num   
)   
{!! 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
/""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
IO&& 
.&& 
	WriteLine&& 
(&& 
$str&& @
)&&@ A
;&&A B
}'' 	
}(( 
})) 
}** Õ
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_divide_81_goodG2B.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_ReadLine_divide_81_goodG2B ;
:< =>
2CWE369_Divide_by_Zero__int_ReadLine_divide_81_base> p
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
}## 
}$$ ⁄,
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_01.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_01 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
data!! 
=!! 
int!! 
.!! 
MinValue!! 
;!! 
{"" 	
try$$ 
{%% 
string'' 
stringNumber'' #
=''$ %
Console''& -
.''- .
ReadLine''. 6
(''6 7
)''7 8
;''8 9
if(( 
((( 
stringNumber((  
!=((! #
null(($ (
)((( )
{)) 
try** 
{++ 
data,, 
=,, 
int,, "
.,," #
Parse,,# (
(,,( )
stringNumber,,) 5
.,,5 6
Trim,,6 :
(,,: ;
),,; <
),,< =
;,,= >
}-- 
catch.. 
(.. 
FormatException.. )
exceptNumberFormat..* <
)..< =
{// 
IO00 
.00 
Logger00 !
.00! "
Log00" %
(00% &
NLog00& *
.00* +
LogLevel00+ 3
.003 4
Warn004 8
,008 9
exceptNumberFormat00: L
,00L M
$str	00N Ä
)
00Ä Å
;
00Å Ç
}11 
}22 
}33 
catch44 
(44 
IOException44 
exceptIO44 '
)44' (
{55 
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 "
.66" #
LogLevel66# +
.66+ ,
Warn66, 0
,660 1
exceptIO662 :
,66: ;
$str66< W
)66W X
;66X Y
}77 
}88 	
IO;; 

.;;
 
	WriteLine;; 
(;; 
$str;; 
+;; 
data;; "
+;;# $
$str;;% *
+;;+ ,
(;;- .
$num;;. 1
%;;2 3
data;;4 8
);;8 9
+;;: ;
$str;;< @
);;@ A
;;;A B
}<< 
public?? 

override?? 
void?? 
Good?? 
(?? 
)?? 
{@@ 
GoodG2BAA 
(AA 
)AA 
;AA 
GoodB2GBB 
(BB 
)BB 
;BB 
}CC 
privateFF 
voidFF 
GoodG2BFF 
(FF 
)FF 
{GG 
intHH 
dataHH 
;HH 
dataJJ 
=JJ 
$numJJ 
;JJ 
IOMM 

.MM
 
	WriteLineMM 
(MM 
$strMM 
+MM 
dataMM "
+MM# $
$strMM% *
+MM+ ,
(MM- .
$numMM. 1
%MM2 3
dataMM4 8
)MM8 9
+MM: ;
$strMM< @
)MM@ A
;MMA B
}NN 
privateQQ 
voidQQ 
GoodB2GQQ 
(QQ 
)QQ 
{RR 
intSS 
dataSS 
;SS 
dataTT 
=TT 
intTT 
.TT 
MinValueTT 
;TT 
{UU 	
tryWW 
{XX 
stringZZ 
stringNumberZZ #
=ZZ$ %
ConsoleZZ& -
.ZZ- .
ReadLineZZ. 6
(ZZ6 7
)ZZ7 8
;ZZ8 9
if[[ 
([[ 
stringNumber[[  
!=[[! #
null[[$ (
)[[( )
{\\ 
try]] 
{^^ 
data__ 
=__ 
int__ "
.__" #
Parse__# (
(__( )
stringNumber__) 5
.__5 6
Trim__6 :
(__: ;
)__; <
)__< =
;__= >
}`` 
catchaa 
(aa 
FormatExceptionaa )
exceptNumberFormataa* <
)aa< =
{bb 
IOcc 
.cc 
Loggercc !
.cc! "
Logcc" %
(cc% &
NLogcc& *
.cc* +
LogLevelcc+ 3
.cc3 4
Warncc4 8
,cc8 9
exceptNumberFormatcc: L
,ccL M
$str	ccN Ä
)
ccÄ Å
;
ccÅ Ç
}dd 
}ee 
}ff 
catchgg 
(gg 
IOExceptiongg 
exceptIOgg '
)gg' (
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptIOii2 :
,ii: ;
$strii< W
)iiW X
;iiX Y
}jj 
}kk 	
ifmm 

(mm 
datamm 
!=mm 
$nummm 
)mm 
{nn 	
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo 
+oo  !
dataoo" &
+oo' (
$stroo) .
+oo/ 0
(oo1 2
$numoo2 5
%oo6 7
dataoo8 <
)oo< =
+oo> ?
$stroo@ D
)ooD E
;ooE F
}pp 	
elseqq 
{rr 	
IOss 
.ss 
	WriteLiness 
(ss 
$strss @
)ss@ A
;ssA B
}tt 	
}uu 
}ww 
}xx ÛV
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_02.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_02 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
true!! 
)!! 
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
trueBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
falseOO 
)OO 
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
trueZZ 
)ZZ 
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ 
+^^  !
data^^" &
+^^' (
$str^^) .
+^^/ 0
(^^1 2
$num^^2 5
%^^6 7
data^^8 <
)^^< =
+^^> ?
$str^^@ D
)^^D E
;^^E F
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
trueff 
)ff 
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
trueqq 
)qq 
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu 
+uu  !
datauu" &
+uu' (
$struu) .
+uu/ 0
(uu1 2
$numuu2 5
%uu6 7
datauu8 <
)uu< =
+uu> ?
$struu@ D
)uuD E
;uuE F
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
true}} 
)}} 
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
false
ûû 
)
ûû 
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
%
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
true
µµ 
)
µµ 
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
true
÷÷ 
)
÷÷ 
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
%
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ —Y
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_03.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_03 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
$num!! 
==!! 
$num!! 
)!! 
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
$numBB 
==BB 
$numBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
$numOO 
!=OO 
$numOO 
)OO 
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
$numZZ 
==ZZ 
$numZZ 
)ZZ 
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ 
+^^  !
data^^" &
+^^' (
$str^^) .
+^^/ 0
(^^1 2
$num^^2 5
%^^6 7
data^^8 <
)^^< =
+^^> ?
$str^^@ D
)^^D E
;^^E F
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
$numff 
==ff 
$numff 
)ff 
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
$numqq 
==qq 
$numqq 
)qq 
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu 
+uu  !
datauu" &
+uu' (
$struu) .
+uu/ 0
(uu1 2
$numuu2 5
%uu6 7
datauu8 <
)uu< =
+uu> ?
$struu@ D
)uuD E
;uuE F
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
$num}} 
==}} 
$num}} 
)}} 
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
$num
ûû 
!=
ûû 
$num
ûû 
)
ûû 
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
%
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
$num
µµ 
==
µµ 
$num
µµ 
)
µµ 
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
$num
÷÷ 
==
÷÷ 
$num
÷÷ 
)
÷÷ 
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
%
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ ΩZ
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_04.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_04 3
:4 5
AbstractTestCase6 F
{ 
private"" 
const"" 
bool"" 
PRIVATE_CONST_TRUE"" )
=""* +
true"", 0
;""0 1
private## 
const## 
bool## 
PRIVATE_CONST_FALSE## *
=##+ ,
false##- 2
;##2 3
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
int'' 
data'' 
;'' 
if(( 

((( 
PRIVATE_CONST_TRUE(( 
)(( 
{)) 	
data** 
=** 
int** 
.** 
MinValue** 
;**  
{++ 
try-- 
{.. 
string00 
stringNumber00 '
=00( )
Console00* 1
.001 2
ReadLine002 :
(00: ;
)00; <
;00< =
if11 
(11 
stringNumber11 $
!=11% '
null11( ,
)11, -
{22 
try33 
{44 
data55  
=55! "
int55# &
.55& '
Parse55' ,
(55, -
stringNumber55- 9
.559 :
Trim55: >
(55> ?
)55? @
)55@ A
;55A B
}66 
catch77 
(77 
FormatException77 -
exceptNumberFormat77. @
)77@ A
{88 
IO99 
.99 
Logger99 %
.99% &
Log99& )
(99) *
NLog99* .
.99. /
LogLevel99/ 7
.997 8
Warn998 <
,99< =
exceptNumberFormat99> P
,99P Q
$str	99R Ñ
)
99Ñ Ö
;
99Ö Ü
}:: 
};; 
}<< 
catch== 
(== 
IOException== "
exceptIO==# +
)==+ ,
{>> 
IO?? 
.?? 
Logger?? 
.?? 
Log?? !
(??! "
NLog??" &
.??& '
LogLevel??' /
.??/ 0
Warn??0 4
,??4 5
exceptIO??6 >
,??> ?
$str??@ [
)??[ \
;??\ ]
}@@ 
}AA 
}BB 	
elseCC 
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
ifII 

(II 
PRIVATE_CONST_TRUEII 
)II 
{JJ 	
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM 
+MM  !
dataMM" &
+MM' (
$strMM) .
+MM/ 0
(MM1 2
$numMM2 5
%MM6 7
dataMM8 <
)MM< =
+MM> ?
$strMM@ D
)MMD E
;MME F
}NN 	
}OO 
privateSS 
voidSS 
GoodG2B1SS 
(SS 
)SS 
{TT 
intUU 
dataUU 
;UU 
ifVV 

(VV 
PRIVATE_CONST_FALSEVV 
)VV  
{WW 	
dataZZ 
=ZZ 
$numZZ 
;ZZ 
}[[ 	
else\\ 
{]] 	
data__ 
=__ 
$num__ 
;__ 
}`` 	
ifaa 

(aa 
PRIVATE_CONST_TRUEaa 
)aa 
{bb 	
IOee 
.ee 
	WriteLineee 
(ee 
$stree 
+ee  !
dataee" &
+ee' (
$stree) .
+ee/ 0
(ee1 2
$numee2 5
%ee6 7
dataee8 <
)ee< =
+ee> ?
$stree@ D
)eeD E
;eeE F
}ff 	
}gg 
privatejj 
voidjj 
GoodG2B2jj 
(jj 
)jj 
{kk 
intll 
datall 
;ll 
ifmm 

(mm 
PRIVATE_CONST_TRUEmm 
)mm 
{nn 	
datapp 
=pp 
$numpp 
;pp 
}qq 	
elserr 
{ss 	
datavv 
=vv 
$numvv 
;vv 
}ww 	
ifxx 

(xx 
PRIVATE_CONST_TRUExx 
)xx 
{yy 	
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| 
+||  !
data||" &
+||' (
$str||) .
+||/ 0
(||1 2
$num||2 5
%||6 7
data||8 <
)||< =
+||> ?
$str||@ D
)||D E
;||E F
}}} 	
}~~ 
private
ÅÅ 
void
ÅÅ 
GoodB2G1
ÅÅ 
(
ÅÅ 
)
ÅÅ 
{
ÇÇ 
int
ÉÉ 
data
ÉÉ 
;
ÉÉ 
if
ÑÑ 

(
ÑÑ  
PRIVATE_CONST_TRUE
ÑÑ 
)
ÑÑ 
{
ÖÖ 	
data
ÜÜ 
=
ÜÜ 
int
ÜÜ 
.
ÜÜ 
MinValue
ÜÜ 
;
ÜÜ  
{
áá 
try
ââ 
{
ää 
string
åå 
stringNumber
åå '
=
åå( )
Console
åå* 1
.
åå1 2
ReadLine
åå2 :
(
åå: ;
)
åå; <
;
åå< =
if
çç 
(
çç 
stringNumber
çç $
!=
çç% '
null
çç( ,
)
çç, -
{
éé 
try
èè 
{
êê 
data
ëë  
=
ëë! "
int
ëë# &
.
ëë& '
Parse
ëë' ,
(
ëë, -
stringNumber
ëë- 9
.
ëë9 :
Trim
ëë: >
(
ëë> ?
)
ëë? @
)
ëë@ A
;
ëëA B
}
íí 
catch
ìì 
(
ìì 
FormatException
ìì - 
exceptNumberFormat
ìì. @
)
ìì@ A
{
îî 
IO
ïï 
.
ïï 
Logger
ïï %
.
ïï% &
Log
ïï& )
(
ïï) *
NLog
ïï* .
.
ïï. /
LogLevel
ïï/ 7
.
ïï7 8
Warn
ïï8 <
,
ïï< = 
exceptNumberFormat
ïï> P
,
ïïP Q
$strïïR Ñ
)ïïÑ Ö
;ïïÖ Ü
}
ññ 
}
óó 
}
òò 
catch
ôô 
(
ôô 
IOException
ôô "
exceptIO
ôô# +
)
ôô+ ,
{
öö 
IO
õõ 
.
õõ 
Logger
õõ 
.
õõ 
Log
õõ !
(
õõ! "
NLog
õõ" &
.
õõ& '
LogLevel
õõ' /
.
õõ/ 0
Warn
õõ0 4
,
õõ4 5
exceptIO
õõ6 >
,
õõ> ?
$str
õõ@ [
)
õõ[ \
;
õõ\ ]
}
úú 
}
ùù 
}
ûû 	
else
üü 
{
†† 	
data
££ 
=
££ 
$num
££ 
;
££ 
}
§§ 	
if
•• 

(
•• !
PRIVATE_CONST_FALSE
•• 
)
••  
{
¶¶ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
©© 	
else
™™ 
{
´´ 	
if
≠≠ 
(
≠≠ 
data
≠≠ 
!=
≠≠ 
$num
≠≠ 
)
≠≠ 
{
ÆÆ 
IO
ØØ 
.
ØØ 
	WriteLine
ØØ 
(
ØØ 
$str
ØØ #
+
ØØ$ %
data
ØØ& *
+
ØØ+ ,
$str
ØØ- 2
+
ØØ3 4
(
ØØ5 6
$num
ØØ6 9
%
ØØ: ;
data
ØØ< @
)
ØØ@ A
+
ØØB C
$str
ØØD H
)
ØØH I
;
ØØI J
}
∞∞ 
else
±± 
{
≤≤ 
IO
≥≥ 
.
≥≥ 
	WriteLine
≥≥ 
(
≥≥ 
$str
≥≥ D
)
≥≥D E
;
≥≥E F
}
¥¥ 
}
µµ 	
}
∂∂ 
private
ππ 
void
ππ 
GoodB2G2
ππ 
(
ππ 
)
ππ 
{
∫∫ 
int
ªª 
data
ªª 
;
ªª 
if
ºº 

(
ºº  
PRIVATE_CONST_TRUE
ºº 
)
ºº 
{
ΩΩ 	
data
ææ 
=
ææ 
int
ææ 
.
ææ 
MinValue
ææ 
;
ææ  
{
øø 
try
¡¡ 
{
¬¬ 
string
ƒƒ 
stringNumber
ƒƒ '
=
ƒƒ( )
Console
ƒƒ* 1
.
ƒƒ1 2
ReadLine
ƒƒ2 :
(
ƒƒ: ;
)
ƒƒ; <
;
ƒƒ< =
if
≈≈ 
(
≈≈ 
stringNumber
≈≈ $
!=
≈≈% '
null
≈≈( ,
)
≈≈, -
{
∆∆ 
try
«« 
{
»» 
data
……  
=
……! "
int
……# &
.
……& '
Parse
……' ,
(
……, -
stringNumber
……- 9
.
……9 :
Trim
……: >
(
……> ?
)
……? @
)
……@ A
;
……A B
}
   
catch
ÀÀ 
(
ÀÀ 
FormatException
ÀÀ - 
exceptNumberFormat
ÀÀ. @
)
ÀÀ@ A
{
ÃÃ 
IO
ÕÕ 
.
ÕÕ 
Logger
ÕÕ %
.
ÕÕ% &
Log
ÕÕ& )
(
ÕÕ) *
NLog
ÕÕ* .
.
ÕÕ. /
LogLevel
ÕÕ/ 7
.
ÕÕ7 8
Warn
ÕÕ8 <
,
ÕÕ< = 
exceptNumberFormat
ÕÕ> P
,
ÕÕP Q
$strÕÕR Ñ
)ÕÕÑ Ö
;ÕÕÖ Ü
}
ŒŒ 
}
œœ 
}
–– 
catch
—— 
(
—— 
IOException
—— "
exceptIO
——# +
)
——+ ,
{
““ 
IO
”” 
.
”” 
Logger
”” 
.
”” 
Log
”” !
(
””! "
NLog
””" &
.
””& '
LogLevel
””' /
.
””/ 0
Warn
””0 4
,
””4 5
exceptIO
””6 >
,
””> ?
$str
””@ [
)
””[ \
;
””\ ]
}
‘‘ 
}
’’ 
}
÷÷ 	
else
◊◊ 
{
ÿÿ 	
data
€€ 
=
€€ 
$num
€€ 
;
€€ 
}
‹‹ 	
if
›› 

(
››  
PRIVATE_CONST_TRUE
›› 
)
›› 
{
ﬁﬁ 	
if
‡‡ 
(
‡‡ 
data
‡‡ 
!=
‡‡ 
$num
‡‡ 
)
‡‡ 
{
·· 
IO
‚‚ 
.
‚‚ 
	WriteLine
‚‚ 
(
‚‚ 
$str
‚‚ #
+
‚‚$ %
data
‚‚& *
+
‚‚+ ,
$str
‚‚- 2
+
‚‚3 4
(
‚‚5 6
$num
‚‚6 9
%
‚‚: ;
data
‚‚< @
)
‚‚@ A
+
‚‚B C
$str
‚‚D H
)
‚‚H I
;
‚‚I J
}
„„ 
else
‰‰ 
{
ÂÂ 
IO
ÊÊ 
.
ÊÊ 
	WriteLine
ÊÊ 
(
ÊÊ 
$str
ÊÊ D
)
ÊÊD E
;
ÊÊE F
}
ÁÁ 
}
ËË 	
}
ÈÈ 
public
ÎÎ 

override
ÎÎ 
void
ÎÎ 
Good
ÎÎ 
(
ÎÎ 
)
ÎÎ 
{
ÏÏ 
GoodG2B1
ÌÌ 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
GoodG2B2
ÓÓ 
(
ÓÓ 
)
ÓÓ 
;
ÓÓ 
GoodB2G1
ÔÔ 
(
ÔÔ 
)
ÔÔ 
;
ÔÔ 
GoodB2G2
 
(
 
)
 
;
 
}
ÒÒ 
}ÛÛ 
}ÙÙ √Y
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_05.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_05 3
:4 5
AbstractTestCase6 F
{ 
private!! 
bool!! 
privateTrue!! 
=!! 
true!! #
;!!# $
private"" 
bool"" 
privateFalse"" 
="" 
false""  %
;""% &
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
int&& 
data&& 
;&& 
if'' 

('' 
privateTrue'' 
)'' 
{(( 	
data)) 
=)) 
int)) 
.)) 
MinValue)) 
;))  
{** 
try,, 
{-- 
string// 
stringNumber// '
=//( )
Console//* 1
.//1 2
ReadLine//2 :
(//: ;
)//; <
;//< =
if00 
(00 
stringNumber00 $
!=00% '
null00( ,
)00, -
{11 
try22 
{33 
data44  
=44! "
int44# &
.44& '
Parse44' ,
(44, -
stringNumber44- 9
.449 :
Trim44: >
(44> ?
)44? @
)44@ A
;44A B
}55 
catch66 
(66 
FormatException66 -
exceptNumberFormat66. @
)66@ A
{77 
IO88 
.88 
Logger88 %
.88% &
Log88& )
(88) *
NLog88* .
.88. /
LogLevel88/ 7
.887 8
Warn888 <
,88< =
exceptNumberFormat88> P
,88P Q
$str	88R Ñ
)
88Ñ Ö
;
88Ö Ü
}99 
}:: 
};; 
catch<< 
(<< 
IOException<< "
exceptIO<<# +
)<<+ ,
{== 
IO>> 
.>> 
Logger>> 
.>> 
Log>> !
(>>! "
NLog>>" &
.>>& '
LogLevel>>' /
.>>/ 0
Warn>>0 4
,>>4 5
exceptIO>>6 >
,>>> ?
$str>>@ [
)>>[ \
;>>\ ]
}?? 
}@@ 
}AA 	
elseBB 
{CC 	
dataFF 
=FF 
$numFF 
;FF 
}GG 	
ifHH 

(HH 
privateTrueHH 
)HH 
{II 	
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL 
+LL  !
dataLL" &
+LL' (
$strLL) .
+LL/ 0
(LL1 2
$numLL2 5
%LL6 7
dataLL8 <
)LL< =
+LL> ?
$strLL@ D
)LLD E
;LLE F
}MM 	
}NN 
privateRR 
voidRR 
GoodG2B1RR 
(RR 
)RR 
{SS 
intTT 
dataTT 
;TT 
ifUU 

(UU 
privateFalseUU 
)UU 
{VV 	
dataYY 
=YY 
$numYY 
;YY 
}ZZ 	
else[[ 
{\\ 	
data^^ 
=^^ 
$num^^ 
;^^ 
}__ 	
if`` 

(`` 
privateTrue`` 
)`` 
{aa 	
IOdd 
.dd 
	WriteLinedd 
(dd 
$strdd 
+dd  !
datadd" &
+dd' (
$strdd) .
+dd/ 0
(dd1 2
$numdd2 5
%dd6 7
datadd8 <
)dd< =
+dd> ?
$strdd@ D
)ddD E
;ddE F
}ee 	
}ff 
privateii 
voidii 
GoodG2B2ii 
(ii 
)ii 
{jj 
intkk 
datakk 
;kk 
ifll 

(ll 
privateTruell 
)ll 
{mm 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
$numuu 
;uu 
}vv 	
ifww 

(ww 
privateTrueww 
)ww 
{xx 	
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ 
+{{  !
data{{" &
+{{' (
$str{{) .
+{{/ 0
({{1 2
$num{{2 5
%{{6 7
data{{8 <
){{< =
+{{> ?
$str{{@ D
){{D E
;{{E F
}|| 	
}}} 
private
ÄÄ 
void
ÄÄ 
GoodB2G1
ÄÄ 
(
ÄÄ 
)
ÄÄ 
{
ÅÅ 
int
ÇÇ 
data
ÇÇ 
;
ÇÇ 
if
ÉÉ 

(
ÉÉ 
privateTrue
ÉÉ 
)
ÉÉ 
{
ÑÑ 	
data
ÖÖ 
=
ÖÖ 
int
ÖÖ 
.
ÖÖ 
MinValue
ÖÖ 
;
ÖÖ  
{
ÜÜ 
try
àà 
{
ââ 
string
ãã 
stringNumber
ãã '
=
ãã( )
Console
ãã* 1
.
ãã1 2
ReadLine
ãã2 :
(
ãã: ;
)
ãã; <
;
ãã< =
if
åå 
(
åå 
stringNumber
åå $
!=
åå% '
null
åå( ,
)
åå, -
{
çç 
try
éé 
{
èè 
data
êê  
=
êê! "
int
êê# &
.
êê& '
Parse
êê' ,
(
êê, -
stringNumber
êê- 9
.
êê9 :
Trim
êê: >
(
êê> ?
)
êê? @
)
êê@ A
;
êêA B
}
ëë 
catch
íí 
(
íí 
FormatException
íí - 
exceptNumberFormat
íí. @
)
íí@ A
{
ìì 
IO
îî 
.
îî 
Logger
îî %
.
îî% &
Log
îî& )
(
îî) *
NLog
îî* .
.
îî. /
LogLevel
îî/ 7
.
îî7 8
Warn
îî8 <
,
îî< = 
exceptNumberFormat
îî> P
,
îîP Q
$strîîR Ñ
)îîÑ Ö
;îîÖ Ü
}
ïï 
}
ññ 
}
óó 
catch
òò 
(
òò 
IOException
òò "
exceptIO
òò# +
)
òò+ ,
{
ôô 
IO
öö 
.
öö 
Logger
öö 
.
öö 
Log
öö !
(
öö! "
NLog
öö" &
.
öö& '
LogLevel
öö' /
.
öö/ 0
Warn
öö0 4
,
öö4 5
exceptIO
öö6 >
,
öö> ?
$str
öö@ [
)
öö[ \
;
öö\ ]
}
õõ 
}
úú 
}
ùù 	
else
ûû 
{
üü 	
data
¢¢ 
=
¢¢ 
$num
¢¢ 
;
¢¢ 
}
££ 	
if
§§ 

(
§§ 
privateFalse
§§ 
)
§§ 
{
•• 	
IO
ßß 
.
ßß 
	WriteLine
ßß 
(
ßß 
$str
ßß /
)
ßß/ 0
;
ßß0 1
}
®® 	
else
©© 
{
™™ 	
if
¨¨ 
(
¨¨ 
data
¨¨ 
!=
¨¨ 
$num
¨¨ 
)
¨¨ 
{
≠≠ 
IO
ÆÆ 
.
ÆÆ 
	WriteLine
ÆÆ 
(
ÆÆ 
$str
ÆÆ #
+
ÆÆ$ %
data
ÆÆ& *
+
ÆÆ+ ,
$str
ÆÆ- 2
+
ÆÆ3 4
(
ÆÆ5 6
$num
ÆÆ6 9
%
ÆÆ: ;
data
ÆÆ< @
)
ÆÆ@ A
+
ÆÆB C
$str
ÆÆD H
)
ÆÆH I
;
ÆÆI J
}
ØØ 
else
∞∞ 
{
±± 
IO
≤≤ 
.
≤≤ 
	WriteLine
≤≤ 
(
≤≤ 
$str
≤≤ D
)
≤≤D E
;
≤≤E F
}
≥≥ 
}
¥¥ 	
}
µµ 
private
∏∏ 
void
∏∏ 
GoodB2G2
∏∏ 
(
∏∏ 
)
∏∏ 
{
ππ 
int
∫∫ 
data
∫∫ 
;
∫∫ 
if
ªª 

(
ªª 
privateTrue
ªª 
)
ªª 
{
ºº 	
data
ΩΩ 
=
ΩΩ 
int
ΩΩ 
.
ΩΩ 
MinValue
ΩΩ 
;
ΩΩ  
{
ææ 
try
¿¿ 
{
¡¡ 
string
√√ 
stringNumber
√√ '
=
√√( )
Console
√√* 1
.
√√1 2
ReadLine
√√2 :
(
√√: ;
)
√√; <
;
√√< =
if
ƒƒ 
(
ƒƒ 
stringNumber
ƒƒ $
!=
ƒƒ% '
null
ƒƒ( ,
)
ƒƒ, -
{
≈≈ 
try
∆∆ 
{
«« 
data
»»  
=
»»! "
int
»»# &
.
»»& '
Parse
»»' ,
(
»», -
stringNumber
»»- 9
.
»»9 :
Trim
»»: >
(
»»> ?
)
»»? @
)
»»@ A
;
»»A B
}
…… 
catch
   
(
   
FormatException
   - 
exceptNumberFormat
  . @
)
  @ A
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ %
.
ÃÃ% &
Log
ÃÃ& )
(
ÃÃ) *
NLog
ÃÃ* .
.
ÃÃ. /
LogLevel
ÃÃ/ 7
.
ÃÃ7 8
Warn
ÃÃ8 <
,
ÃÃ< = 
exceptNumberFormat
ÃÃ> P
,
ÃÃP Q
$strÃÃR Ñ
)ÃÃÑ Ö
;ÃÃÖ Ü
}
ÕÕ 
}
ŒŒ 
}
œœ 
catch
–– 
(
–– 
IOException
–– "
exceptIO
––# +
)
––+ ,
{
—— 
IO
““ 
.
““ 
Logger
““ 
.
““ 
Log
““ !
(
““! "
NLog
““" &
.
““& '
LogLevel
““' /
.
““/ 0
Warn
““0 4
,
““4 5
exceptIO
““6 >
,
““> ?
$str
““@ [
)
““[ \
;
““\ ]
}
”” 
}
‘‘ 
}
’’ 	
else
÷÷ 
{
◊◊ 	
data
⁄⁄ 
=
⁄⁄ 
$num
⁄⁄ 
;
⁄⁄ 
}
€€ 	
if
‹‹ 

(
‹‹ 
privateTrue
‹‹ 
)
‹‹ 
{
›› 	
if
ﬂﬂ 
(
ﬂﬂ 
data
ﬂﬂ 
!=
ﬂﬂ 
$num
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
IO
·· 
.
·· 
	WriteLine
·· 
(
·· 
$str
·· #
+
··$ %
data
··& *
+
··+ ,
$str
··- 2
+
··3 4
(
··5 6
$num
··6 9
%
··: ;
data
··< @
)
··@ A
+
··B C
$str
··D H
)
··H I
;
··I J
}
‚‚ 
else
„„ 
{
‰‰ 
IO
ÂÂ 
.
ÂÂ 
	WriteLine
ÂÂ 
(
ÂÂ 
$str
ÂÂ D
)
ÂÂD E
;
ÂÂE F
}
ÊÊ 
}
ÁÁ 	
}
ËË 
public
ÍÍ 

override
ÍÍ 
void
ÍÍ 
Good
ÍÍ 
(
ÍÍ 
)
ÍÍ 
{
ÎÎ 
GoodG2B1
ÏÏ 
(
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodG2B2
ÌÌ 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
GoodB2G1
ÓÓ 
(
ÓÓ 
)
ÓÓ 
;
ÓÓ 
GoodB2G2
ÔÔ 
(
ÔÔ 
)
ÔÔ 
;
ÔÔ 
}
 
}ÚÚ 
}ÛÛ à\
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_06.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_06 3
:4 5
AbstractTestCase6 F
{ 
private!! 
const!! 
int!! 
PRIVATE_CONST_FIVE!! (
=!!) *
$num!!+ ,
;!!, -
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
;%% 
if&& 

(&& 
PRIVATE_CONST_FIVE&& 
==&&  
$num&&  !
)&&! "
{'' 	
data(( 
=(( 
int(( 
.(( 
MinValue(( 
;((  
{)) 
try++ 
{,, 
string.. 
stringNumber.. '
=..( )
Console..* 1
...1 2
ReadLine..2 :
(..: ;
)..; <
;..< =
if// 
(// 
stringNumber// $
!=//% '
null//( ,
)//, -
{00 
try11 
{22 
data33  
=33! "
int33# &
.33& '
Parse33' ,
(33, -
stringNumber33- 9
.339 :
Trim33: >
(33> ?
)33? @
)33@ A
;33A B
}44 
catch55 
(55 
FormatException55 -
exceptNumberFormat55. @
)55@ A
{66 
IO77 
.77 
Logger77 %
.77% &
Log77& )
(77) *
NLog77* .
.77. /
LogLevel77/ 7
.777 8
Warn778 <
,77< =
exceptNumberFormat77> P
,77P Q
$str	77R Ñ
)
77Ñ Ö
;
77Ö Ü
}88 
}99 
}:: 
catch;; 
(;; 
IOException;; "
exceptIO;;# +
);;+ ,
{<< 
IO== 
.== 
Logger== 
.== 
Log== !
(==! "
NLog==" &
.==& '
LogLevel==' /
.==/ 0
Warn==0 4
,==4 5
exceptIO==6 >
,==> ?
$str==@ [
)==[ \
;==\ ]
}>> 
}?? 
}@@ 	
elseAA 
{BB 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
ifGG 

(GG 
PRIVATE_CONST_FIVEGG 
==GG  
$numGG  !
)GG! "
{HH 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK 
+KK  !
dataKK" &
+KK' (
$strKK) .
+KK/ 0
(KK1 2
$numKK2 5
%KK6 7
dataKK8 <
)KK< =
+KK> ?
$strKK@ D
)KKD E
;KKE F
}LL 	
}MM 
privateQQ 
voidQQ 
GoodG2B1QQ 
(QQ 
)QQ 
{RR 
intSS 
dataSS 
;SS 
ifTT 

(TT 
PRIVATE_CONST_FIVETT 
!=TT  
$numTT  !
)TT! "
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
elseZZ 
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
PRIVATE_CONST_FIVE__ 
==__  
$num__  !
)__! "
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc 
+cc  !
datacc" &
+cc' (
$strcc) .
+cc/ 0
(cc1 2
$numcc2 5
%cc6 7
datacc8 <
)cc< =
+cc> ?
$strcc@ D
)ccD E
;ccE F
}dd 	
}ee 
privatehh 
voidhh 
GoodG2B2hh 
(hh 
)hh 
{ii 
intjj 
datajj 
;jj 
ifkk 

(kk 
PRIVATE_CONST_FIVEkk 
==kk  
$numkk  !
)kk! "
{ll 	
datann 
=nn 
$numnn 
;nn 
}oo 	
elsepp 
{qq 	
datatt 
=tt 
$numtt 
;tt 
}uu 	
ifvv 

(vv 
PRIVATE_CONST_FIVEvv 
==vv  
$numvv  !
)vv! "
{ww 	
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz 
+zz  !
datazz" &
+zz' (
$strzz) .
+zz/ 0
(zz1 2
$numzz2 5
%zz6 7
datazz8 <
)zz< =
+zz> ?
$strzz@ D
)zzD E
;zzE F
}{{ 	
}|| 
private 
void 
GoodB2G1 
( 
) 
{
ÄÄ 
int
ÅÅ 
data
ÅÅ 
;
ÅÅ 
if
ÇÇ 

(
ÇÇ  
PRIVATE_CONST_FIVE
ÇÇ 
==
ÇÇ  
$num
ÇÇ  !
)
ÇÇ! "
{
ÉÉ 	
data
ÑÑ 
=
ÑÑ 
int
ÑÑ 
.
ÑÑ 
MinValue
ÑÑ 
;
ÑÑ  
{
ÖÖ 
try
áá 
{
àà 
string
ää 
stringNumber
ää '
=
ää( )
Console
ää* 1
.
ää1 2
ReadLine
ää2 :
(
ää: ;
)
ää; <
;
ää< =
if
ãã 
(
ãã 
stringNumber
ãã $
!=
ãã% '
null
ãã( ,
)
ãã, -
{
åå 
try
çç 
{
éé 
data
èè  
=
èè! "
int
èè# &
.
èè& '
Parse
èè' ,
(
èè, -
stringNumber
èè- 9
.
èè9 :
Trim
èè: >
(
èè> ?
)
èè? @
)
èè@ A
;
èèA B
}
êê 
catch
ëë 
(
ëë 
FormatException
ëë - 
exceptNumberFormat
ëë. @
)
ëë@ A
{
íí 
IO
ìì 
.
ìì 
Logger
ìì %
.
ìì% &
Log
ìì& )
(
ìì) *
NLog
ìì* .
.
ìì. /
LogLevel
ìì/ 7
.
ìì7 8
Warn
ìì8 <
,
ìì< = 
exceptNumberFormat
ìì> P
,
ììP Q
$strììR Ñ
)ììÑ Ö
;ììÖ Ü
}
îî 
}
ïï 
}
ññ 
catch
óó 
(
óó 
IOException
óó "
exceptIO
óó# +
)
óó+ ,
{
òò 
IO
ôô 
.
ôô 
Logger
ôô 
.
ôô 
Log
ôô !
(
ôô! "
NLog
ôô" &
.
ôô& '
LogLevel
ôô' /
.
ôô/ 0
Warn
ôô0 4
,
ôô4 5
exceptIO
ôô6 >
,
ôô> ?
$str
ôô@ [
)
ôô[ \
;
ôô\ ]
}
öö 
}
õõ 
}
úú 	
else
ùù 
{
ûû 	
data
°° 
=
°° 
$num
°° 
;
°° 
}
¢¢ 	
if
££ 

(
££  
PRIVATE_CONST_FIVE
££ 
!=
££  
$num
££  !
)
££! "
{
§§ 	
IO
¶¶ 
.
¶¶ 
	WriteLine
¶¶ 
(
¶¶ 
$str
¶¶ /
)
¶¶/ 0
;
¶¶0 1
}
ßß 	
else
®® 
{
©© 	
if
´´ 
(
´´ 
data
´´ 
!=
´´ 
$num
´´ 
)
´´ 
{
¨¨ 
IO
≠≠ 
.
≠≠ 
	WriteLine
≠≠ 
(
≠≠ 
$str
≠≠ #
+
≠≠$ %
data
≠≠& *
+
≠≠+ ,
$str
≠≠- 2
+
≠≠3 4
(
≠≠5 6
$num
≠≠6 9
%
≠≠: ;
data
≠≠< @
)
≠≠@ A
+
≠≠B C
$str
≠≠D H
)
≠≠H I
;
≠≠I J
}
ÆÆ 
else
ØØ 
{
∞∞ 
IO
±± 
.
±± 
	WriteLine
±± 
(
±± 
$str
±± D
)
±±D E
;
±±E F
}
≤≤ 
}
≥≥ 	
}
¥¥ 
private
∑∑ 
void
∑∑ 
GoodB2G2
∑∑ 
(
∑∑ 
)
∑∑ 
{
∏∏ 
int
ππ 
data
ππ 
;
ππ 
if
∫∫ 

(
∫∫  
PRIVATE_CONST_FIVE
∫∫ 
==
∫∫  
$num
∫∫  !
)
∫∫! "
{
ªª 	
data
ºº 
=
ºº 
int
ºº 
.
ºº 
MinValue
ºº 
;
ºº  
{
ΩΩ 
try
øø 
{
¿¿ 
string
¬¬ 
stringNumber
¬¬ '
=
¬¬( )
Console
¬¬* 1
.
¬¬1 2
ReadLine
¬¬2 :
(
¬¬: ;
)
¬¬; <
;
¬¬< =
if
√√ 
(
√√ 
stringNumber
√√ $
!=
√√% '
null
√√( ,
)
√√, -
{
ƒƒ 
try
≈≈ 
{
∆∆ 
data
««  
=
««! "
int
««# &
.
««& '
Parse
««' ,
(
««, -
stringNumber
««- 9
.
««9 :
Trim
««: >
(
««> ?
)
««? @
)
««@ A
;
««A B
}
»» 
catch
…… 
(
…… 
FormatException
…… - 
exceptNumberFormat
……. @
)
……@ A
{
   
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ %
.
ÀÀ% &
Log
ÀÀ& )
(
ÀÀ) *
NLog
ÀÀ* .
.
ÀÀ. /
LogLevel
ÀÀ/ 7
.
ÀÀ7 8
Warn
ÀÀ8 <
,
ÀÀ< = 
exceptNumberFormat
ÀÀ> P
,
ÀÀP Q
$strÀÀR Ñ
)ÀÀÑ Ö
;ÀÀÖ Ü
}
ÃÃ 
}
ÕÕ 
}
ŒŒ 
catch
œœ 
(
œœ 
IOException
œœ "
exceptIO
œœ# +
)
œœ+ ,
{
–– 
IO
—— 
.
—— 
Logger
—— 
.
—— 
Log
—— !
(
——! "
NLog
——" &
.
——& '
LogLevel
——' /
.
——/ 0
Warn
——0 4
,
——4 5
exceptIO
——6 >
,
——> ?
$str
——@ [
)
——[ \
;
——\ ]
}
““ 
}
”” 
}
‘‘ 	
else
’’ 
{
÷÷ 	
data
ŸŸ 
=
ŸŸ 
$num
ŸŸ 
;
ŸŸ 
}
⁄⁄ 	
if
€€ 

(
€€  
PRIVATE_CONST_FIVE
€€ 
==
€€  
$num
€€  !
)
€€! "
{
‹‹ 	
if
ﬁﬁ 
(
ﬁﬁ 
data
ﬁﬁ 
!=
ﬁﬁ 
$num
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
IO
‡‡ 
.
‡‡ 
	WriteLine
‡‡ 
(
‡‡ 
$str
‡‡ #
+
‡‡$ %
data
‡‡& *
+
‡‡+ ,
$str
‡‡- 2
+
‡‡3 4
(
‡‡5 6
$num
‡‡6 9
%
‡‡: ;
data
‡‡< @
)
‡‡@ A
+
‡‡B C
$str
‡‡D H
)
‡‡H I
;
‡‡I J
}
·· 
else
‚‚ 
{
„„ 
IO
‰‰ 
.
‰‰ 
	WriteLine
‰‰ 
(
‰‰ 
$str
‰‰ D
)
‰‰D E
;
‰‰E F
}
ÂÂ 
}
ÊÊ 	
}
ÁÁ 
public
ÈÈ 

override
ÈÈ 
void
ÈÈ 
Good
ÈÈ 
(
ÈÈ 
)
ÈÈ 
{
ÍÍ 
GoodG2B1
ÎÎ 
(
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodG2B2
ÏÏ 
(
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodB2G1
ÌÌ 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
GoodB2G2
ÓÓ 
(
ÓÓ 
)
ÓÓ 
;
ÓÓ 
}
ÔÔ 
}ÒÒ 
}ÚÚ ®[
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_07.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_07 3
:4 5
AbstractTestCase6 F
{ 
private!! 
int!! 
privateFive!! 
=!! 
$num!! 
;!!  
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
;%% 
if&& 

(&& 
privateFive&& 
==&& 
$num&& 
)&& 
{'' 	
data(( 
=(( 
int(( 
.(( 
MinValue(( 
;((  
{)) 
try++ 
{,, 
string.. 
stringNumber.. '
=..( )
Console..* 1
...1 2
ReadLine..2 :
(..: ;
)..; <
;..< =
if// 
(// 
stringNumber// $
!=//% '
null//( ,
)//, -
{00 
try11 
{22 
data33  
=33! "
int33# &
.33& '
Parse33' ,
(33, -
stringNumber33- 9
.339 :
Trim33: >
(33> ?
)33? @
)33@ A
;33A B
}44 
catch55 
(55 
FormatException55 -
exceptNumberFormat55. @
)55@ A
{66 
IO77 
.77 
Logger77 %
.77% &
Log77& )
(77) *
NLog77* .
.77. /
LogLevel77/ 7
.777 8
Warn778 <
,77< =
exceptNumberFormat77> P
,77P Q
$str	77R Ñ
)
77Ñ Ö
;
77Ö Ü
}88 
}99 
}:: 
catch;; 
(;; 
IOException;; "
exceptIO;;# +
);;+ ,
{<< 
IO== 
.== 
Logger== 
.== 
Log== !
(==! "
NLog==" &
.==& '
LogLevel==' /
.==/ 0
Warn==0 4
,==4 5
exceptIO==6 >
,==> ?
$str==@ [
)==[ \
;==\ ]
}>> 
}?? 
}@@ 	
elseAA 
{BB 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
ifGG 

(GG 
privateFiveGG 
==GG 
$numGG 
)GG 
{HH 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK 
+KK  !
dataKK" &
+KK' (
$strKK) .
+KK/ 0
(KK1 2
$numKK2 5
%KK6 7
dataKK8 <
)KK< =
+KK> ?
$strKK@ D
)KKD E
;KKE F
}LL 	
}MM 
privateQQ 
voidQQ 
GoodG2B1QQ 
(QQ 
)QQ 
{RR 
intSS 
dataSS 
;SS 
ifTT 

(TT 
privateFiveTT 
!=TT 
$numTT 
)TT 
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
elseZZ 
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
privateFive__ 
==__ 
$num__ 
)__ 
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc 
+cc  !
datacc" &
+cc' (
$strcc) .
+cc/ 0
(cc1 2
$numcc2 5
%cc6 7
datacc8 <
)cc< =
+cc> ?
$strcc@ D
)ccD E
;ccE F
}dd 	
}ee 
privatehh 
voidhh 
GoodG2B2hh 
(hh 
)hh 
{ii 
intjj 
datajj 
;jj 
ifkk 

(kk 
privateFivekk 
==kk 
$numkk 
)kk 
{ll 	
datann 
=nn 
$numnn 
;nn 
}oo 	
elsepp 
{qq 	
datatt 
=tt 
$numtt 
;tt 
}uu 	
ifvv 

(vv 
privateFivevv 
==vv 
$numvv 
)vv 
{ww 	
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz 
+zz  !
datazz" &
+zz' (
$strzz) .
+zz/ 0
(zz1 2
$numzz2 5
%zz6 7
datazz8 <
)zz< =
+zz> ?
$strzz@ D
)zzD E
;zzE F
}{{ 	
}|| 
private 
void 
GoodB2G1 
( 
) 
{
ÄÄ 
int
ÅÅ 
data
ÅÅ 
;
ÅÅ 
if
ÇÇ 

(
ÇÇ 
privateFive
ÇÇ 
==
ÇÇ 
$num
ÇÇ 
)
ÇÇ 
{
ÉÉ 	
data
ÑÑ 
=
ÑÑ 
int
ÑÑ 
.
ÑÑ 
MinValue
ÑÑ 
;
ÑÑ  
{
ÖÖ 
try
áá 
{
àà 
string
ää 
stringNumber
ää '
=
ää( )
Console
ää* 1
.
ää1 2
ReadLine
ää2 :
(
ää: ;
)
ää; <
;
ää< =
if
ãã 
(
ãã 
stringNumber
ãã $
!=
ãã% '
null
ãã( ,
)
ãã, -
{
åå 
try
çç 
{
éé 
data
èè  
=
èè! "
int
èè# &
.
èè& '
Parse
èè' ,
(
èè, -
stringNumber
èè- 9
.
èè9 :
Trim
èè: >
(
èè> ?
)
èè? @
)
èè@ A
;
èèA B
}
êê 
catch
ëë 
(
ëë 
FormatException
ëë - 
exceptNumberFormat
ëë. @
)
ëë@ A
{
íí 
IO
ìì 
.
ìì 
Logger
ìì %
.
ìì% &
Log
ìì& )
(
ìì) *
NLog
ìì* .
.
ìì. /
LogLevel
ìì/ 7
.
ìì7 8
Warn
ìì8 <
,
ìì< = 
exceptNumberFormat
ìì> P
,
ììP Q
$strììR Ñ
)ììÑ Ö
;ììÖ Ü
}
îî 
}
ïï 
}
ññ 
catch
óó 
(
óó 
IOException
óó "
exceptIO
óó# +
)
óó+ ,
{
òò 
IO
ôô 
.
ôô 
Logger
ôô 
.
ôô 
Log
ôô !
(
ôô! "
NLog
ôô" &
.
ôô& '
LogLevel
ôô' /
.
ôô/ 0
Warn
ôô0 4
,
ôô4 5
exceptIO
ôô6 >
,
ôô> ?
$str
ôô@ [
)
ôô[ \
;
ôô\ ]
}
öö 
}
õõ 
}
úú 	
else
ùù 
{
ûû 	
data
°° 
=
°° 
$num
°° 
;
°° 
}
¢¢ 	
if
££ 

(
££ 
privateFive
££ 
!=
££ 
$num
££ 
)
££ 
{
§§ 	
IO
¶¶ 
.
¶¶ 
	WriteLine
¶¶ 
(
¶¶ 
$str
¶¶ /
)
¶¶/ 0
;
¶¶0 1
}
ßß 	
else
®® 
{
©© 	
if
´´ 
(
´´ 
data
´´ 
!=
´´ 
$num
´´ 
)
´´ 
{
¨¨ 
IO
≠≠ 
.
≠≠ 
	WriteLine
≠≠ 
(
≠≠ 
$str
≠≠ #
+
≠≠$ %
data
≠≠& *
+
≠≠+ ,
$str
≠≠- 2
+
≠≠3 4
(
≠≠5 6
$num
≠≠6 9
%
≠≠: ;
data
≠≠< @
)
≠≠@ A
+
≠≠B C
$str
≠≠D H
)
≠≠H I
;
≠≠I J
}
ÆÆ 
else
ØØ 
{
∞∞ 
IO
±± 
.
±± 
	WriteLine
±± 
(
±± 
$str
±± D
)
±±D E
;
±±E F
}
≤≤ 
}
≥≥ 	
}
¥¥ 
private
∑∑ 
void
∑∑ 
GoodB2G2
∑∑ 
(
∑∑ 
)
∑∑ 
{
∏∏ 
int
ππ 
data
ππ 
;
ππ 
if
∫∫ 

(
∫∫ 
privateFive
∫∫ 
==
∫∫ 
$num
∫∫ 
)
∫∫ 
{
ªª 	
data
ºº 
=
ºº 
int
ºº 
.
ºº 
MinValue
ºº 
;
ºº  
{
ΩΩ 
try
øø 
{
¿¿ 
string
¬¬ 
stringNumber
¬¬ '
=
¬¬( )
Console
¬¬* 1
.
¬¬1 2
ReadLine
¬¬2 :
(
¬¬: ;
)
¬¬; <
;
¬¬< =
if
√√ 
(
√√ 
stringNumber
√√ $
!=
√√% '
null
√√( ,
)
√√, -
{
ƒƒ 
try
≈≈ 
{
∆∆ 
data
««  
=
««! "
int
««# &
.
««& '
Parse
««' ,
(
««, -
stringNumber
««- 9
.
««9 :
Trim
««: >
(
««> ?
)
««? @
)
««@ A
;
««A B
}
»» 
catch
…… 
(
…… 
FormatException
…… - 
exceptNumberFormat
……. @
)
……@ A
{
   
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ %
.
ÀÀ% &
Log
ÀÀ& )
(
ÀÀ) *
NLog
ÀÀ* .
.
ÀÀ. /
LogLevel
ÀÀ/ 7
.
ÀÀ7 8
Warn
ÀÀ8 <
,
ÀÀ< = 
exceptNumberFormat
ÀÀ> P
,
ÀÀP Q
$strÀÀR Ñ
)ÀÀÑ Ö
;ÀÀÖ Ü
}
ÃÃ 
}
ÕÕ 
}
ŒŒ 
catch
œœ 
(
œœ 
IOException
œœ "
exceptIO
œœ# +
)
œœ+ ,
{
–– 
IO
—— 
.
—— 
Logger
—— 
.
—— 
Log
—— !
(
——! "
NLog
——" &
.
——& '
LogLevel
——' /
.
——/ 0
Warn
——0 4
,
——4 5
exceptIO
——6 >
,
——> ?
$str
——@ [
)
——[ \
;
——\ ]
}
““ 
}
”” 
}
‘‘ 	
else
’’ 
{
÷÷ 	
data
ŸŸ 
=
ŸŸ 
$num
ŸŸ 
;
ŸŸ 
}
⁄⁄ 	
if
€€ 

(
€€ 
privateFive
€€ 
==
€€ 
$num
€€ 
)
€€ 
{
‹‹ 	
if
ﬁﬁ 
(
ﬁﬁ 
data
ﬁﬁ 
!=
ﬁﬁ 
$num
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
IO
‡‡ 
.
‡‡ 
	WriteLine
‡‡ 
(
‡‡ 
$str
‡‡ #
+
‡‡$ %
data
‡‡& *
+
‡‡+ ,
$str
‡‡- 2
+
‡‡3 4
(
‡‡5 6
$num
‡‡6 9
%
‡‡: ;
data
‡‡< @
)
‡‡@ A
+
‡‡B C
$str
‡‡D H
)
‡‡H I
;
‡‡I J
}
·· 
else
‚‚ 
{
„„ 
IO
‰‰ 
.
‰‰ 
	WriteLine
‰‰ 
(
‰‰ 
$str
‰‰ D
)
‰‰D E
;
‰‰E F
}
ÂÂ 
}
ÊÊ 	
}
ÁÁ 
public
ÈÈ 

override
ÈÈ 
void
ÈÈ 
Good
ÈÈ 
(
ÈÈ 
)
ÈÈ 
{
ÍÍ 
GoodG2B1
ÎÎ 
(
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodG2B2
ÏÏ 
(
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodB2G1
ÌÌ 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
GoodB2G2
ÓÓ 
(
ÓÓ 
)
ÓÓ 
;
ÓÓ 
}
ÔÔ 
}ÒÒ 
}ÚÚ ß^
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_08.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_08 3
:4 5
AbstractTestCase6 F
{ 
private!! 
static!! 
bool!! 
PrivateReturnsTrue!! *
(!!* +
)!!+ ,
{"" 
return## 
true## 
;## 
}$$ 
private&& 
static&& 
bool&& 
PrivateReturnsFalse&& +
(&&+ ,
)&&, -
{'' 
return(( 
false(( 
;(( 
})) 
public++ 

override++ 
void++ 
Bad++ 
(++ 
)++ 
{,, 
int-- 
data-- 
;-- 
if.. 

(.. 
PrivateReturnsTrue.. 
(.. 
)..  
)..  !
{// 	
data00 
=00 
int00 
.00 
MinValue00 
;00  
{11 
try33 
{44 
string66 
stringNumber66 '
=66( )
Console66* 1
.661 2
ReadLine662 :
(66: ;
)66; <
;66< =
if77 
(77 
stringNumber77 $
!=77% '
null77( ,
)77, -
{88 
try99 
{:: 
data;;  
=;;! "
int;;# &
.;;& '
Parse;;' ,
(;;, -
stringNumber;;- 9
.;;9 :
Trim;;: >
(;;> ?
);;? @
);;@ A
;;;A B
}<< 
catch== 
(== 
FormatException== -
exceptNumberFormat==. @
)==@ A
{>> 
IO?? 
.?? 
Logger?? %
.??% &
Log??& )
(??) *
NLog??* .
.??. /
LogLevel??/ 7
.??7 8
Warn??8 <
,??< =
exceptNumberFormat??> P
,??P Q
$str	??R Ñ
)
??Ñ Ö
;
??Ö Ü
}@@ 
}AA 
}BB 
catchCC 
(CC 
IOExceptionCC "
exceptIOCC# +
)CC+ ,
{DD 
IOEE 
.EE 
LoggerEE 
.EE 
LogEE !
(EE! "
NLogEE" &
.EE& '
LogLevelEE' /
.EE/ 0
WarnEE0 4
,EE4 5
exceptIOEE6 >
,EE> ?
$strEE@ [
)EE[ \
;EE\ ]
}FF 
}GG 
}HH 	
elseII 
{JJ 	
dataMM 
=MM 
$numMM 
;MM 
}NN 	
ifOO 

(OO 
PrivateReturnsTrueOO 
(OO 
)OO  
)OO  !
{PP 	
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS 
+SS  !
dataSS" &
+SS' (
$strSS) .
+SS/ 0
(SS1 2
$numSS2 5
%SS6 7
dataSS8 <
)SS< =
+SS> ?
$strSS@ D
)SSD E
;SSE F
}TT 	
}UU 
privateYY 
voidYY 
GoodG2B1YY 
(YY 
)YY 
{ZZ 
int[[ 
data[[ 
;[[ 
if\\ 

(\\ 
PrivateReturnsFalse\\ 
(\\  
)\\  !
)\\! "
{]] 	
data`` 
=`` 
$num`` 
;`` 
}aa 	
elsebb 
{cc 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg 
PrivateReturnsTruegg 
(gg 
)gg  
)gg  !
{hh 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk 
+kk  !
datakk" &
+kk' (
$strkk) .
+kk/ 0
(kk1 2
$numkk2 5
%kk6 7
datakk8 <
)kk< =
+kk> ?
$strkk@ D
)kkD E
;kkE F
}ll 	
}mm 
privatepp 
voidpp 
GoodG2B2pp 
(pp 
)pp 
{qq 
intrr 
datarr 
;rr 
ifss 

(ss 
PrivateReturnsTruess 
(ss 
)ss  
)ss  !
{tt 	
datavv 
=vv 
$numvv 
;vv 
}ww 	
elsexx 
{yy 	
data|| 
=|| 
$num|| 
;|| 
}}} 	
if~~ 

(~~ 
PrivateReturnsTrue~~ 
(~~ 
)~~  
)~~  !
{ 	
IO
ÇÇ 
.
ÇÇ 
	WriteLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ 
+
ÇÇ  !
data
ÇÇ" &
+
ÇÇ' (
$str
ÇÇ) .
+
ÇÇ/ 0
(
ÇÇ1 2
$num
ÇÇ2 5
%
ÇÇ6 7
data
ÇÇ8 <
)
ÇÇ< =
+
ÇÇ> ?
$str
ÇÇ@ D
)
ÇÇD E
;
ÇÇE F
}
ÉÉ 	
}
ÑÑ 
private
áá 
void
áá 
GoodB2G1
áá 
(
áá 
)
áá 
{
àà 
int
ââ 
data
ââ 
;
ââ 
if
ää 

(
ää  
PrivateReturnsTrue
ää 
(
ää 
)
ää  
)
ää  !
{
ãã 	
data
åå 
=
åå 
int
åå 
.
åå 
MinValue
åå 
;
åå  
{
çç 
try
èè 
{
êê 
string
íí 
stringNumber
íí '
=
íí( )
Console
íí* 1
.
íí1 2
ReadLine
íí2 :
(
íí: ;
)
íí; <
;
íí< =
if
ìì 
(
ìì 
stringNumber
ìì $
!=
ìì% '
null
ìì( ,
)
ìì, -
{
îî 
try
ïï 
{
ññ 
data
óó  
=
óó! "
int
óó# &
.
óó& '
Parse
óó' ,
(
óó, -
stringNumber
óó- 9
.
óó9 :
Trim
óó: >
(
óó> ?
)
óó? @
)
óó@ A
;
óóA B
}
òò 
catch
ôô 
(
ôô 
FormatException
ôô - 
exceptNumberFormat
ôô. @
)
ôô@ A
{
öö 
IO
õõ 
.
õõ 
Logger
õõ %
.
õõ% &
Log
õõ& )
(
õõ) *
NLog
õõ* .
.
õõ. /
LogLevel
õõ/ 7
.
õõ7 8
Warn
õõ8 <
,
õõ< = 
exceptNumberFormat
õõ> P
,
õõP Q
$strõõR Ñ
)õõÑ Ö
;õõÖ Ü
}
úú 
}
ùù 
}
ûû 
catch
üü 
(
üü 
IOException
üü "
exceptIO
üü# +
)
üü+ ,
{
†† 
IO
°° 
.
°° 
Logger
°° 
.
°° 
Log
°° !
(
°°! "
NLog
°°" &
.
°°& '
LogLevel
°°' /
.
°°/ 0
Warn
°°0 4
,
°°4 5
exceptIO
°°6 >
,
°°> ?
$str
°°@ [
)
°°[ \
;
°°\ ]
}
¢¢ 
}
££ 
}
§§ 	
else
•• 
{
¶¶ 	
data
©© 
=
©© 
$num
©© 
;
©© 
}
™™ 	
if
´´ 

(
´´ !
PrivateReturnsFalse
´´ 
(
´´  
)
´´  !
)
´´! "
{
¨¨ 	
IO
ÆÆ 
.
ÆÆ 
	WriteLine
ÆÆ 
(
ÆÆ 
$str
ÆÆ /
)
ÆÆ/ 0
;
ÆÆ0 1
}
ØØ 	
else
∞∞ 
{
±± 	
if
≥≥ 
(
≥≥ 
data
≥≥ 
!=
≥≥ 
$num
≥≥ 
)
≥≥ 
{
¥¥ 
IO
µµ 
.
µµ 
	WriteLine
µµ 
(
µµ 
$str
µµ #
+
µµ$ %
data
µµ& *
+
µµ+ ,
$str
µµ- 2
+
µµ3 4
(
µµ5 6
$num
µµ6 9
%
µµ: ;
data
µµ< @
)
µµ@ A
+
µµB C
$str
µµD H
)
µµH I
;
µµI J
}
∂∂ 
else
∑∑ 
{
∏∏ 
IO
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ D
)
ππD E
;
ππE F
}
∫∫ 
}
ªª 	
}
ºº 
private
øø 
void
øø 
GoodB2G2
øø 
(
øø 
)
øø 
{
¿¿ 
int
¡¡ 
data
¡¡ 
;
¡¡ 
if
¬¬ 

(
¬¬  
PrivateReturnsTrue
¬¬ 
(
¬¬ 
)
¬¬  
)
¬¬  !
{
√√ 	
data
ƒƒ 
=
ƒƒ 
int
ƒƒ 
.
ƒƒ 
MinValue
ƒƒ 
;
ƒƒ  
{
≈≈ 
try
«« 
{
»» 
string
   
stringNumber
   '
=
  ( )
Console
  * 1
.
  1 2
ReadLine
  2 :
(
  : ;
)
  ; <
;
  < =
if
ÀÀ 
(
ÀÀ 
stringNumber
ÀÀ $
!=
ÀÀ% '
null
ÀÀ( ,
)
ÀÀ, -
{
ÃÃ 
try
ÕÕ 
{
ŒŒ 
data
œœ  
=
œœ! "
int
œœ# &
.
œœ& '
Parse
œœ' ,
(
œœ, -
stringNumber
œœ- 9
.
œœ9 :
Trim
œœ: >
(
œœ> ?
)
œœ? @
)
œœ@ A
;
œœA B
}
–– 
catch
—— 
(
—— 
FormatException
—— - 
exceptNumberFormat
——. @
)
——@ A
{
““ 
IO
”” 
.
”” 
Logger
”” %
.
””% &
Log
””& )
(
””) *
NLog
””* .
.
””. /
LogLevel
””/ 7
.
””7 8
Warn
””8 <
,
””< = 
exceptNumberFormat
””> P
,
””P Q
$str””R Ñ
)””Ñ Ö
;””Ö Ü
}
‘‘ 
}
’’ 
}
÷÷ 
catch
◊◊ 
(
◊◊ 
IOException
◊◊ "
exceptIO
◊◊# +
)
◊◊+ ,
{
ÿÿ 
IO
ŸŸ 
.
ŸŸ 
Logger
ŸŸ 
.
ŸŸ 
Log
ŸŸ !
(
ŸŸ! "
NLog
ŸŸ" &
.
ŸŸ& '
LogLevel
ŸŸ' /
.
ŸŸ/ 0
Warn
ŸŸ0 4
,
ŸŸ4 5
exceptIO
ŸŸ6 >
,
ŸŸ> ?
$str
ŸŸ@ [
)
ŸŸ[ \
;
ŸŸ\ ]
}
⁄⁄ 
}
€€ 
}
‹‹ 	
else
›› 
{
ﬁﬁ 	
data
·· 
=
·· 
$num
·· 
;
·· 
}
‚‚ 	
if
„„ 

(
„„  
PrivateReturnsTrue
„„ 
(
„„ 
)
„„  
)
„„  !
{
‰‰ 	
if
ÊÊ 
(
ÊÊ 
data
ÊÊ 
!=
ÊÊ 
$num
ÊÊ 
)
ÊÊ 
{
ÁÁ 
IO
ËË 
.
ËË 
	WriteLine
ËË 
(
ËË 
$str
ËË #
+
ËË$ %
data
ËË& *
+
ËË+ ,
$str
ËË- 2
+
ËË3 4
(
ËË5 6
$num
ËË6 9
%
ËË: ;
data
ËË< @
)
ËË@ A
+
ËËB C
$str
ËËD H
)
ËËH I
;
ËËI J
}
ÈÈ 
else
ÍÍ 
{
ÎÎ 
IO
ÏÏ 
.
ÏÏ 
	WriteLine
ÏÏ 
(
ÏÏ 
$str
ÏÏ D
)
ÏÏD E
;
ÏÏE F
}
ÌÌ 
}
ÓÓ 	
}
ÔÔ 
public
ÒÒ 

override
ÒÒ 
void
ÒÒ 
Good
ÒÒ 
(
ÒÒ 
)
ÒÒ 
{
ÚÚ 
GoodG2B1
ÛÛ 
(
ÛÛ 
)
ÛÛ 
;
ÛÛ 
GoodG2B2
ÙÙ 
(
ÙÙ 
)
ÙÙ 
;
ÙÙ 
GoodB2G1
ıı 
(
ıı 
)
ıı 
;
ıı 
GoodB2G2
ˆˆ 
(
ˆˆ 
)
ˆˆ 
;
ˆˆ 
}
˜˜ 
}˘˘ 
}˙˙ ’Z
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_09.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_09 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
IO!! 
.!!  
STATIC_READONLY_TRUE!! #
)!!# $
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB  
STATIC_READONLY_TRUEBB #
)BB# $
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO !
STATIC_READONLY_FALSEOO $
)OO$ %
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ  
STATIC_READONLY_TRUEZZ #
)ZZ# $
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ 
+^^  !
data^^" &
+^^' (
$str^^) .
+^^/ 0
(^^1 2
$num^^2 5
%^^6 7
data^^8 <
)^^< =
+^^> ?
$str^^@ D
)^^D E
;^^E F
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
IOff 
.ff  
STATIC_READONLY_TRUEff #
)ff# $
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
IOqq 
.qq  
STATIC_READONLY_TRUEqq #
)qq# $
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu 
+uu  !
datauu" &
+uu' (
$struu) .
+uu/ 0
(uu1 2
$numuu2 5
%uu6 7
datauu8 <
)uu< =
+uu> ?
$struu@ D
)uuD E
;uuE F
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
IO}} 
.}}  
STATIC_READONLY_TRUE}} #
)}}# $
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
IO
ûû 
.
ûû #
STATIC_READONLY_FALSE
ûû $
)
ûû$ %
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
%
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
IO
µµ 
.
µµ "
STATIC_READONLY_TRUE
µµ #
)
µµ# $
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
IO
÷÷ 
.
÷÷ "
STATIC_READONLY_TRUE
÷÷ #
)
÷÷# $
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
%
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ ÒY
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_10.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_10 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
IO!! 
.!! 

staticTrue!! 
)!! 
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB 

staticTrueBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO 
staticFalseOO 
)OO 
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ 

staticTrueZZ 
)ZZ 
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ 
+^^  !
data^^" &
+^^' (
$str^^) .
+^^/ 0
(^^1 2
$num^^2 5
%^^6 7
data^^8 <
)^^< =
+^^> ?
$str^^@ D
)^^D E
;^^E F
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
IOff 
.ff 

staticTrueff 
)ff 
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
IOqq 
.qq 

staticTrueqq 
)qq 
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu 
+uu  !
datauu" &
+uu' (
$struu) .
+uu/ 0
(uu1 2
$numuu2 5
%uu6 7
datauu8 <
)uu< =
+uu> ?
$struu@ D
)uuD E
;uuE F
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
IO}} 
.}} 

staticTrue}} 
)}} 
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
IO
ûû 
.
ûû 
staticFalse
ûû 
)
ûû 
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
%
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
IO
µµ 
.
µµ 

staticTrue
µµ 
)
µµ 
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
IO
÷÷ 
.
÷÷ 

staticTrue
÷÷ 
)
÷÷ 
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
%
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ Ô\
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_11.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_11 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
IO!! 
.!! 
StaticReturnsTrue!!  
(!!  !
)!!! "
)!!" #
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB
 
IOBB 
.BB 
StaticReturnsTrueBB 
(BB  
)BB  !
)BB! "
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO 
StaticReturnsFalseOO !
(OO! "
)OO" #
)OO# $
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ 
StaticReturnsTrueZZ  
(ZZ  !
)ZZ! "
)ZZ" #
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ 
+^^  !
data^^" &
+^^' (
$str^^) .
+^^/ 0
(^^1 2
$num^^2 5
%^^6 7
data^^8 <
)^^< =
+^^> ?
$str^^@ D
)^^D E
;^^E F
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
IOff 
.ff 
StaticReturnsTrueff  
(ff  !
)ff! "
)ff" #
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
IOqq 
.qq 
StaticReturnsTrueqq  
(qq  !
)qq! "
)qq" #
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu 
+uu  !
datauu" &
+uu' (
$struu) .
+uu/ 0
(uu1 2
$numuu2 5
%uu6 7
datauu8 <
)uu< =
+uu> ?
$struu@ D
)uuD E
;uuE F
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
IO}} 
.}} 
StaticReturnsTrue}}  
(}}  !
)}}! "
)}}" #
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
IO
ûû 
.
ûû  
StaticReturnsFalse
ûû !
(
ûû! "
)
ûû" #
)
ûû# $
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
%
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
IO
µµ 
.
µµ 
StaticReturnsTrue
µµ  
(
µµ  !
)
µµ! "
)
µµ" #
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
IO
÷÷ 
.
÷÷ 
StaticReturnsTrue
÷÷  
(
÷÷  !
)
÷÷! "
)
÷÷" #
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
%
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ ÅU
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_12.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_12 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!!
 
IO!! 
.!! $
StaticReturnsTrueOrFalse!! &
(!!& '
)!!' (
)!!( )
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA
 
IOAA 
.AA $
StaticReturnsTrueOrFalseAA &
(AA& '
)AA' (
)AA( )
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE 
+EE  !
dataEE" &
+EE' (
$strEE) .
+EE/ 0
(EE1 2
$numEE2 5
%EE6 7
dataEE8 <
)EE< =
+EE> ?
$strEE@ D
)EED E
;EEE F
}FF 	
elseGG 
{HH 	
ifJJ 
(JJ 
dataJJ 
!=JJ 
$numJJ 
)JJ 
{KK 
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL #
+LL$ %
dataLL& *
+LL+ ,
$strLL- 2
+LL3 4
(LL5 6
$numLL6 9
%LL: ;
dataLL< @
)LL@ A
+LLB C
$strLLD H
)LLH I
;LLI J
}MM 
elseNN 
{OO 
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP D
)PPD E
;PPE F
}QQ 
}RR 	
}SS 
privateXX 
voidXX 
GoodG2BXX 
(XX 
)XX 
{YY 
intZZ 
dataZZ 
;ZZ 
if[[ 

([[
 
IO[[ 
.[[ $
StaticReturnsTrueOrFalse[[ &
([[& '
)[[' (
)[[( )
{\\ 	
data^^ 
=^^ 
$num^^ 
;^^ 
}__ 	
else`` 
{aa 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee
 
IOee 
.ee $
StaticReturnsTrueOrFalseee &
(ee& '
)ee' (
)ee( )
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii 
+ii  !
dataii" &
+ii' (
$strii) .
+ii/ 0
(ii1 2
$numii2 5
%ii6 7
dataii8 <
)ii< =
+ii> ?
$strii@ D
)iiD E
;iiE F
}jj 	
elsekk 
{ll 	
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo 
+oo  !
dataoo" &
+oo' (
$stroo) .
+oo/ 0
(oo1 2
$numoo2 5
%oo6 7
dataoo8 <
)oo< =
+oo> ?
$stroo@ D
)ooD E
;ooE F
}pp 	
}qq 
privateuu 
voiduu 
GoodB2Guu 
(uu 
)uu 
{vv 
intww 
dataww 
;ww 
ifxx 

(xx
 
IOxx 
.xx $
StaticReturnsTrueOrFalsexx &
(xx& '
)xx' (
)xx( )
{yy 	
datazz 
=zz 
intzz 
.zz 
MinValuezz 
;zz  
{{{ 
try}} 
{~~ 
string
ÄÄ 
stringNumber
ÄÄ '
=
ÄÄ( )
Console
ÄÄ* 1
.
ÄÄ1 2
ReadLine
ÄÄ2 :
(
ÄÄ: ;
)
ÄÄ; <
;
ÄÄ< =
if
ÅÅ 
(
ÅÅ 
stringNumber
ÅÅ $
!=
ÅÅ% '
null
ÅÅ( ,
)
ÅÅ, -
{
ÇÇ 
try
ÉÉ 
{
ÑÑ 
data
ÖÖ  
=
ÖÖ! "
int
ÖÖ# &
.
ÖÖ& '
Parse
ÖÖ' ,
(
ÖÖ, -
stringNumber
ÖÖ- 9
.
ÖÖ9 :
Trim
ÖÖ: >
(
ÖÖ> ?
)
ÖÖ? @
)
ÖÖ@ A
;
ÖÖA B
}
ÜÜ 
catch
áá 
(
áá 
FormatException
áá - 
exceptNumberFormat
áá. @
)
áá@ A
{
àà 
IO
ââ 
.
ââ 
Logger
ââ %
.
ââ% &
Log
ââ& )
(
ââ) *
NLog
ââ* .
.
ââ. /
LogLevel
ââ/ 7
.
ââ7 8
Warn
ââ8 <
,
ââ< = 
exceptNumberFormat
ââ> P
,
ââP Q
$strââR Ñ
)ââÑ Ö
;ââÖ Ü
}
ää 
}
ãã 
}
åå 
catch
çç 
(
çç 
IOException
çç "
exceptIO
çç# +
)
çç+ ,
{
éé 
IO
èè 
.
èè 
Logger
èè 
.
èè 
Log
èè !
(
èè! "
NLog
èè" &
.
èè& '
LogLevel
èè' /
.
èè/ 0
Warn
èè0 4
,
èè4 5
exceptIO
èè6 >
,
èè> ?
$str
èè@ [
)
èè[ \
;
èè\ ]
}
êê 
}
ëë 
}
íí 	
else
ìì 
{
îî 	
data
ïï 
=
ïï 
int
ïï 
.
ïï 
MinValue
ïï 
;
ïï  
{
ññ 
try
òò 
{
ôô 
string
õõ 
stringNumber
õõ '
=
õõ( )
Console
õõ* 1
.
õõ1 2
ReadLine
õõ2 :
(
õõ: ;
)
õõ; <
;
õõ< =
if
úú 
(
úú 
stringNumber
úú $
!=
úú% '
null
úú( ,
)
úú, -
{
ùù 
try
ûû 
{
üü 
data
††  
=
††! "
int
††# &
.
††& '
Parse
††' ,
(
††, -
stringNumber
††- 9
.
††9 :
Trim
††: >
(
††> ?
)
††? @
)
††@ A
;
††A B
}
°° 
catch
¢¢ 
(
¢¢ 
FormatException
¢¢ - 
exceptNumberFormat
¢¢. @
)
¢¢@ A
{
££ 
IO
§§ 
.
§§ 
Logger
§§ %
.
§§% &
Log
§§& )
(
§§) *
NLog
§§* .
.
§§. /
LogLevel
§§/ 7
.
§§7 8
Warn
§§8 <
,
§§< = 
exceptNumberFormat
§§> P
,
§§P Q
$str§§R Ñ
)§§Ñ Ö
;§§Ö Ü
}
•• 
}
¶¶ 
}
ßß 
catch
®® 
(
®® 
IOException
®® "
exceptIO
®®# +
)
®®+ ,
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5
exceptIO
™™6 >
,
™™> ?
$str
™™@ [
)
™™[ \
;
™™\ ]
}
´´ 
}
¨¨ 
}
≠≠ 	
if
ÆÆ 

(
ÆÆ
 
IO
ÆÆ 
.
ÆÆ &
StaticReturnsTrueOrFalse
ÆÆ &
(
ÆÆ& '
)
ÆÆ' (
)
ÆÆ( )
{
ØØ 	
if
±± 
(
±± 
data
±± 
!=
±± 
$num
±± 
)
±± 
{
≤≤ 
IO
≥≥ 
.
≥≥ 
	WriteLine
≥≥ 
(
≥≥ 
$str
≥≥ #
+
≥≥$ %
data
≥≥& *
+
≥≥+ ,
$str
≥≥- 2
+
≥≥3 4
(
≥≥5 6
$num
≥≥6 9
%
≥≥: ;
data
≥≥< @
)
≥≥@ A
+
≥≥B C
$str
≥≥D H
)
≥≥H I
;
≥≥I J
}
¥¥ 
else
µµ 
{
∂∂ 
IO
∑∑ 
.
∑∑ 
	WriteLine
∑∑ 
(
∑∑ 
$str
∑∑ D
)
∑∑D E
;
∑∑E F
}
∏∏ 
}
ππ 	
else
∫∫ 
{
ªª 	
if
ΩΩ 
(
ΩΩ 
data
ΩΩ 
!=
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
IO
øø 
.
øø 
	WriteLine
øø 
(
øø 
$str
øø #
+
øø$ %
data
øø& *
+
øø+ ,
$str
øø- 2
+
øø3 4
(
øø5 6
$num
øø6 9
%
øø: ;
data
øø< @
)
øø@ A
+
øøB C
$str
øøD H
)
øøH I
;
øøI J
}
¿¿ 
else
¡¡ 
{
¬¬ 
IO
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
$str
√√ D
)
√√D E
;
√√E F
}
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
)
»» 
{
   
GoodG2B
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 
}œœ 
}–– ≥]
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_13.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_13 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
IO!! 
.!!  
STATIC_READONLY_FIVE!! #
==!!# %
$num!!% &
)!!& '
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB  
STATIC_READONLY_FIVEBB #
==BB# %
$numBB% &
)BB& '
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO  
STATIC_READONLY_FIVEOO #
!=OO# %
$numOO% &
)OO& '
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ  
STATIC_READONLY_FIVEZZ #
==ZZ# %
$numZZ% &
)ZZ& '
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ 
+^^  !
data^^" &
+^^' (
$str^^) .
+^^/ 0
(^^1 2
$num^^2 5
%^^6 7
data^^8 <
)^^< =
+^^> ?
$str^^@ D
)^^D E
;^^E F
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
IOff 
.ff  
STATIC_READONLY_FIVEff #
==ff# %
$numff% &
)ff& '
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
IOqq 
.qq  
STATIC_READONLY_FIVEqq #
==qq# %
$numqq% &
)qq& '
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu 
+uu  !
datauu" &
+uu' (
$struu) .
+uu/ 0
(uu1 2
$numuu2 5
%uu6 7
datauu8 <
)uu< =
+uu> ?
$struu@ D
)uuD E
;uuE F
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
IO}} 
.}}  
STATIC_READONLY_FIVE}} #
==}}# %
$num}}% &
)}}& '
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
IO
ûû 
.
ûû "
STATIC_READONLY_FIVE
ûû #
!=
ûû# %
$num
ûû% &
)
ûû& '
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
%
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
IO
µµ 
.
µµ "
STATIC_READONLY_FIVE
µµ #
==
µµ# %
$num
µµ% &
)
µµ& '
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
IO
÷÷ 
.
÷÷ "
STATIC_READONLY_FIVE
÷÷ #
==
÷÷# %
$num
÷÷% &
)
÷÷& '
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
%
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ œ\
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_14.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_14 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
if!! 

(!! 
IO!! 
.!! 

staticFive!! 
==!! 
$num!! 
)!! 
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
ifBB 

(BB 
IOBB 
.BB 

staticFiveBB 
==BB 
$numBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
intNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO 

staticFiveOO 
!=OO 
$numOO 
)OO 
{PP 	
dataSS 
=SS 
$numSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ 

staticFiveZZ 
==ZZ 
$numZZ 
)ZZ 
{[[ 	
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ 
+^^  !
data^^" &
+^^' (
$str^^) .
+^^/ 0
(^^1 2
$num^^2 5
%^^6 7
data^^8 <
)^^< =
+^^> ?
$str^^@ D
)^^D E
;^^E F
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
)cc 
{dd 
intee 
dataee 
;ee 
ifff 

(ff 
IOff 
.ff 

staticFiveff 
==ff 
$numff 
)ff 
{gg 	
dataii 
=ii 
$numii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
$numoo 
;oo 
}pp 	
ifqq 

(qq 
IOqq 
.qq 

staticFiveqq 
==qq 
$numqq 
)qq 
{rr 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu 
+uu  !
datauu" &
+uu' (
$struu) .
+uu/ 0
(uu1 2
$numuu2 5
%uu6 7
datauu8 <
)uu< =
+uu> ?
$struu@ D
)uuD E
;uuE F
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
int|| 
data|| 
;|| 
if}} 

(}} 
IO}} 
.}} 

staticFive}} 
==}} 
$num}} 
)}} 
{~~ 	
data 
= 
int 
. 
MinValue 
;  
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
string
ÖÖ 
stringNumber
ÖÖ '
=
ÖÖ( )
Console
ÖÖ* 1
.
ÖÖ1 2
ReadLine
ÖÖ2 :
(
ÖÖ: ;
)
ÖÖ; <
;
ÖÖ< =
if
ÜÜ 
(
ÜÜ 
stringNumber
ÜÜ $
!=
ÜÜ% '
null
ÜÜ( ,
)
ÜÜ, -
{
áá 
try
àà 
{
ââ 
data
ää  
=
ää! "
int
ää# &
.
ää& '
Parse
ää' ,
(
ää, -
stringNumber
ää- 9
.
ää9 :
Trim
ää: >
(
ää> ?
)
ää? @
)
ää@ A
;
ääA B
}
ãã 
catch
åå 
(
åå 
FormatException
åå - 
exceptNumberFormat
åå. @
)
åå@ A
{
çç 
IO
éé 
.
éé 
Logger
éé %
.
éé% &
Log
éé& )
(
éé) *
NLog
éé* .
.
éé. /
LogLevel
éé/ 7
.
éé7 8
Warn
éé8 <
,
éé< = 
exceptNumberFormat
éé> P
,
ééP Q
$strééR Ñ
)ééÑ Ö
;ééÖ Ü
}
èè 
}
êê 
}
ëë 
catch
íí 
(
íí 
IOException
íí "
exceptIO
íí# +
)
íí+ ,
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
}
óó 	
else
òò 
{
ôô 	
data
úú 
=
úú 
$num
úú 
;
úú 
}
ùù 	
if
ûû 

(
ûû 
IO
ûû 
.
ûû 

staticFive
ûû 
!=
ûû 
$num
ûû 
)
ûû 
{
üü 	
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° /
)
°°/ 0
;
°°0 1
}
¢¢ 	
else
££ 
{
§§ 	
if
¶¶ 
(
¶¶ 
data
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® #
+
®®$ %
data
®®& *
+
®®+ ,
$str
®®- 2
+
®®3 4
(
®®5 6
$num
®®6 9
%
®®: ;
data
®®< @
)
®®@ A
+
®®B C
$str
®®D H
)
®®H I
;
®®I J
}
©© 
else
™™ 
{
´´ 
IO
¨¨ 
.
¨¨ 
	WriteLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
}
≠≠ 
}
ÆÆ 	
}
ØØ 
private
≤≤ 
void
≤≤ 
GoodB2G2
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
int
¥¥ 
data
¥¥ 
;
¥¥ 
if
µµ 

(
µµ 
IO
µµ 
.
µµ 

staticFive
µµ 
==
µµ 
$num
µµ 
)
µµ 
{
∂∂ 	
data
∑∑ 
=
∑∑ 
int
∑∑ 
.
∑∑ 
MinValue
∑∑ 
;
∑∑  
{
∏∏ 
try
∫∫ 
{
ªª 
string
ΩΩ 
stringNumber
ΩΩ '
=
ΩΩ( )
Console
ΩΩ* 1
.
ΩΩ1 2
ReadLine
ΩΩ2 :
(
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
if
ææ 
(
ææ 
stringNumber
ææ $
!=
ææ% '
null
ææ( ,
)
ææ, -
{
øø 
try
¿¿ 
{
¡¡ 
data
¬¬  
=
¬¬! "
int
¬¬# &
.
¬¬& '
Parse
¬¬' ,
(
¬¬, -
stringNumber
¬¬- 9
.
¬¬9 :
Trim
¬¬: >
(
¬¬> ?
)
¬¬? @
)
¬¬@ A
;
¬¬A B
}
√√ 
catch
ƒƒ 
(
ƒƒ 
FormatException
ƒƒ - 
exceptNumberFormat
ƒƒ. @
)
ƒƒ@ A
{
≈≈ 
IO
∆∆ 
.
∆∆ 
Logger
∆∆ %
.
∆∆% &
Log
∆∆& )
(
∆∆) *
NLog
∆∆* .
.
∆∆. /
LogLevel
∆∆/ 7
.
∆∆7 8
Warn
∆∆8 <
,
∆∆< = 
exceptNumberFormat
∆∆> P
,
∆∆P Q
$str∆∆R Ñ
)∆∆Ñ Ö
;∆∆Ö Ü
}
«« 
}
»» 
}
…… 
catch
   
(
   
IOException
   "
exceptIO
  # +
)
  + ,
{
ÀÀ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 
}
œœ 	
else
–– 
{
—— 	
data
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
}
’’ 	
if
÷÷ 

(
÷÷ 
IO
÷÷ 
.
÷÷ 

staticFive
÷÷ 
==
÷÷ 
$num
÷÷ 
)
÷÷ 
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
data
ŸŸ 
!=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
IO
€€ 
.
€€ 
	WriteLine
€€ 
(
€€ 
$str
€€ #
+
€€$ %
data
€€& *
+
€€+ ,
$str
€€- 2
+
€€3 4
(
€€5 6
$num
€€6 9
%
€€: ;
data
€€< @
)
€€@ A
+
€€B C
$str
€€D H
)
€€H I
;
€€I J
}
‹‹ 
else
›› 
{
ﬁﬁ 
IO
ﬂﬂ 
.
ﬂﬂ 
	WriteLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ D
)
ﬂﬂD E
;
ﬂﬂE F
}
‡‡ 
}
·· 	
}
‚‚ 
public
‰‰ 

override
‰‰ 
void
‰‰ 
Good
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
GoodG2B1
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
GoodG2B2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G1
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G2
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}ÏÏ 
}ÌÌ õf
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_15.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_15 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
switch!! 
(!! 
$num!! 
)!! 
{"" 	
case## 
$num## 
:## 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$  
{%% 
try'' 
{(( 
string** 
stringNumber** '
=**( )
Console*** 1
.**1 2
ReadLine**2 :
(**: ;
)**; <
;**< =
if++ 
(++ 
stringNumber++ $
!=++% '
null++( ,
)++, -
{,, 
try-- 
{.. 
data//  
=//! "
int//# &
.//& '
Parse//' ,
(//, -
stringNumber//- 9
.//9 :
Trim//: >
(//> ?
)//? @
)//@ A
;//A B
}00 
catch11 
(11 
FormatException11 -
exceptNumberFormat11. @
)11@ A
{22 
IO33 
.33 
Logger33 %
.33% &
Log33& )
(33) *
NLog33* .
.33. /
LogLevel33/ 7
.337 8
Warn338 <
,33< =
exceptNumberFormat33> P
,33P Q
$str	33R Ñ
)
33Ñ Ö
;
33Ö Ü
}44 
}55 
}66 
catch77 
(77 
IOException77 "
exceptIO77# +
)77+ ,
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptIO996 >
,99> ?
$str99@ [
)99[ \
;99\ ]
}:: 
};; 
break<< 
;<< 
default== 
:== 
data@@ 
=@@ 
$num@@ 
;@@ 
breakAA 
;AA 
}BB 	
switchCC 
(CC 
$numCC 
)CC 
{DD 	
caseEE 
$numEE 
:EE 
IOHH 
.HH 
	WriteLineHH 
(HH 
$strHH 
+HH  !
dataHH" &
+HH' (
$strHH) .
+HH/ 0
(HH1 2
$numHH2 5
%HH6 7
dataHH8 <
)HH< =
+HH> ?
$strHH@ D
)HHD E
;HHE F
breakII 
;II 
defaultJJ 
:JJ 
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL /
)LL/ 0
;LL0 1
breakMM 
;MM 
}NN 	
}OO 
privateSS 
voidSS 
GoodG2B1SS 
(SS 
)SS 
{TT 
intUU 
dataUU 
;UU 
switchVV 
(VV 
$numVV 
)VV 
{WW 	
caseXX 
$numXX 
:XX 
data[[ 
=[[ 
$num[[ 
;[[ 
break\\ 
;\\ 
default]] 
:]] 
data__ 
=__ 
$num__ 
;__ 
break`` 
;`` 
}aa 	
switchbb 
(bb 
$numbb 
)bb 
{cc 	
casedd 
$numdd 
:dd 
IOgg 
.gg 
	WriteLinegg 
(gg 
$strgg 
+gg  !
datagg" &
+gg' (
$strgg) .
+gg/ 0
(gg1 2
$numgg2 5
%gg6 7
datagg8 <
)gg< =
+gg> ?
$strgg@ D
)ggD E
;ggE F
breakhh 
;hh 
defaultii 
:ii 
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk /
)kk/ 0
;kk0 1
breakll 
;ll 
}mm 	
}nn 
privateqq 
voidqq 
GoodG2B2qq 
(qq 
)qq 
{rr 
intss 
datass 
;ss 
switchtt 
(tt 
$numtt 
)tt 
{uu 	
casevv 
$numvv 
:vv 
dataxx 
=xx 
$numxx 
;xx 
breakyy 
;yy 
defaultzz 
:zz 
data}} 
=}} 
$num}} 
;}} 
break~~ 
;~~ 
} 	
switch
ÄÄ 
(
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
{
ÅÅ 	
case
ÇÇ 
$num
ÇÇ 
:
ÇÇ 
IO
ÖÖ 
.
ÖÖ 
	WriteLine
ÖÖ 
(
ÖÖ 
$str
ÖÖ 
+
ÖÖ  !
data
ÖÖ" &
+
ÖÖ' (
$str
ÖÖ) .
+
ÖÖ/ 0
(
ÖÖ1 2
$num
ÖÖ2 5
%
ÖÖ6 7
data
ÖÖ8 <
)
ÖÖ< =
+
ÖÖ> ?
$str
ÖÖ@ D
)
ÖÖD E
;
ÖÖE F
break
ÜÜ 
;
ÜÜ 
default
áá 
:
áá 
IO
ââ 
.
ââ 
	WriteLine
ââ 
(
ââ 
$str
ââ /
)
ââ/ 0
;
ââ0 1
break
ää 
;
ää 
}
ãã 	
}
åå 
private
èè 
void
èè 
GoodB2G1
èè 
(
èè 
)
èè 
{
êê 
int
ëë 
data
ëë 
;
ëë 
switch
íí 
(
íí 
$num
íí 
)
íí 
{
ìì 	
case
îî 
$num
îî 
:
îî 
data
ïï 
=
ïï 
int
ïï 
.
ïï 
MinValue
ïï 
;
ïï  
{
ññ 
try
òò 
{
ôô 
string
õõ 
stringNumber
õõ '
=
õõ( )
Console
õõ* 1
.
õõ1 2
ReadLine
õõ2 :
(
õõ: ;
)
õõ; <
;
õõ< =
if
úú 
(
úú 
stringNumber
úú $
!=
úú% '
null
úú( ,
)
úú, -
{
ùù 
try
ûû 
{
üü 
data
††  
=
††! "
int
††# &
.
††& '
Parse
††' ,
(
††, -
stringNumber
††- 9
.
††9 :
Trim
††: >
(
††> ?
)
††? @
)
††@ A
;
††A B
}
°° 
catch
¢¢ 
(
¢¢ 
FormatException
¢¢ - 
exceptNumberFormat
¢¢. @
)
¢¢@ A
{
££ 
IO
§§ 
.
§§ 
Logger
§§ %
.
§§% &
Log
§§& )
(
§§) *
NLog
§§* .
.
§§. /
LogLevel
§§/ 7
.
§§7 8
Warn
§§8 <
,
§§< = 
exceptNumberFormat
§§> P
,
§§P Q
$str§§R Ñ
)§§Ñ Ö
;§§Ö Ü
}
•• 
}
¶¶ 
}
ßß 
catch
®® 
(
®® 
IOException
®® "
exceptIO
®®# +
)
®®+ ,
{
©© 
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ !
(
™™! "
NLog
™™" &
.
™™& '
LogLevel
™™' /
.
™™/ 0
Warn
™™0 4
,
™™4 5
exceptIO
™™6 >
,
™™> ?
$str
™™@ [
)
™™[ \
;
™™\ ]
}
´´ 
}
¨¨ 
break
≠≠ 
;
≠≠ 
default
ÆÆ 
:
ÆÆ 
data
±± 
=
±± 
$num
±± 
;
±± 
break
≤≤ 
;
≤≤ 
}
≥≥ 	
switch
¥¥ 
(
¥¥ 
$num
¥¥ 
)
¥¥ 
{
µµ 	
case
∂∂ 
$num
∂∂ 
:
∂∂ 
IO
∏∏ 
.
∏∏ 
	WriteLine
∏∏ 
(
∏∏ 
$str
∏∏ /
)
∏∏/ 0
;
∏∏0 1
break
ππ 
;
ππ 
default
∫∫ 
:
∫∫ 
if
ºº 
(
ºº 
data
ºº 
!=
ºº 
$num
ºº 
)
ºº 
{
ΩΩ 
IO
ææ 
.
ææ 
	WriteLine
ææ 
(
ææ 
$str
ææ #
+
ææ$ %
data
ææ& *
+
ææ+ ,
$str
ææ- 2
+
ææ3 4
(
ææ5 6
$num
ææ6 9
%
ææ: ;
data
ææ< @
)
ææ@ A
+
ææB C
$str
ææD H
)
ææH I
;
ææI J
}
øø 
else
¿¿ 
{
¡¡ 
IO
¬¬ 
.
¬¬ 
	WriteLine
¬¬ 
(
¬¬ 
$str
¬¬ D
)
¬¬D E
;
¬¬E F
}
√√ 
break
ƒƒ 
;
ƒƒ 
}
≈≈ 	
}
∆∆ 
private
…… 
void
…… 
GoodB2G2
…… 
(
…… 
)
…… 
{
   
int
ÀÀ 
data
ÀÀ 
;
ÀÀ 
switch
ÃÃ 
(
ÃÃ 
$num
ÃÃ 
)
ÃÃ 
{
ÕÕ 	
case
ŒŒ 
$num
ŒŒ 
:
ŒŒ 
data
œœ 
=
œœ 
int
œœ 
.
œœ 
MinValue
œœ 
;
œœ  
{
–– 
try
““ 
{
”” 
string
’’ 
stringNumber
’’ '
=
’’( )
Console
’’* 1
.
’’1 2
ReadLine
’’2 :
(
’’: ;
)
’’; <
;
’’< =
if
÷÷ 
(
÷÷ 
stringNumber
÷÷ $
!=
÷÷% '
null
÷÷( ,
)
÷÷, -
{
◊◊ 
try
ÿÿ 
{
ŸŸ 
data
⁄⁄  
=
⁄⁄! "
int
⁄⁄# &
.
⁄⁄& '
Parse
⁄⁄' ,
(
⁄⁄, -
stringNumber
⁄⁄- 9
.
⁄⁄9 :
Trim
⁄⁄: >
(
⁄⁄> ?
)
⁄⁄? @
)
⁄⁄@ A
;
⁄⁄A B
}
€€ 
catch
‹‹ 
(
‹‹ 
FormatException
‹‹ - 
exceptNumberFormat
‹‹. @
)
‹‹@ A
{
›› 
IO
ﬁﬁ 
.
ﬁﬁ 
Logger
ﬁﬁ %
.
ﬁﬁ% &
Log
ﬁﬁ& )
(
ﬁﬁ) *
NLog
ﬁﬁ* .
.
ﬁﬁ. /
LogLevel
ﬁﬁ/ 7
.
ﬁﬁ7 8
Warn
ﬁﬁ8 <
,
ﬁﬁ< = 
exceptNumberFormat
ﬁﬁ> P
,
ﬁﬁP Q
$strﬁﬁR Ñ
)ﬁﬁÑ Ö
;ﬁﬁÖ Ü
}
ﬂﬂ 
}
‡‡ 
}
·· 
catch
‚‚ 
(
‚‚ 
IOException
‚‚ "
exceptIO
‚‚# +
)
‚‚+ ,
{
„„ 
IO
‰‰ 
.
‰‰ 
Logger
‰‰ 
.
‰‰ 
Log
‰‰ !
(
‰‰! "
NLog
‰‰" &
.
‰‰& '
LogLevel
‰‰' /
.
‰‰/ 0
Warn
‰‰0 4
,
‰‰4 5
exceptIO
‰‰6 >
,
‰‰> ?
$str
‰‰@ [
)
‰‰[ \
;
‰‰\ ]
}
ÂÂ 
}
ÊÊ 
break
ÁÁ 
;
ÁÁ 
default
ËË 
:
ËË 
data
ÎÎ 
=
ÎÎ 
$num
ÎÎ 
;
ÎÎ 
break
ÏÏ 
;
ÏÏ 
}
ÌÌ 	
switch
ÓÓ 
(
ÓÓ 
$num
ÓÓ 
)
ÓÓ 
{
ÔÔ 	
case
 
$num
 
:
 
if
ÚÚ 
(
ÚÚ 
data
ÚÚ 
!=
ÚÚ 
$num
ÚÚ 
)
ÚÚ 
{
ÛÛ 
IO
ÙÙ 
.
ÙÙ 
	WriteLine
ÙÙ 
(
ÙÙ 
$str
ÙÙ #
+
ÙÙ$ %
data
ÙÙ& *
+
ÙÙ+ ,
$str
ÙÙ- 2
+
ÙÙ3 4
(
ÙÙ5 6
$num
ÙÙ6 9
%
ÙÙ: ;
data
ÙÙ< @
)
ÙÙ@ A
+
ÙÙB C
$str
ÙÙD H
)
ÙÙH I
;
ÙÙI J
}
ıı 
else
ˆˆ 
{
˜˜ 
IO
¯¯ 
.
¯¯ 
	WriteLine
¯¯ 
(
¯¯ 
$str
¯¯ D
)
¯¯D E
;
¯¯E F
}
˘˘ 
break
˙˙ 
;
˙˙ 
default
˚˚ 
:
˚˚ 
IO
˝˝ 
.
˝˝ 
	WriteLine
˝˝ 
(
˝˝ 
$str
˝˝ /
)
˝˝/ 0
;
˝˝0 1
break
˛˛ 
;
˛˛ 
}
ˇˇ 	
}
ÄÄ 
public
ÇÇ 

override
ÇÇ 
void
ÇÇ 
Good
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
GoodG2B1
ÑÑ 
(
ÑÑ 
)
ÑÑ 
;
ÑÑ 
GoodG2B2
ÖÖ 
(
ÖÖ 
)
ÖÖ 
;
ÖÖ 
GoodB2G1
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
GoodB2G2
áá 
(
áá 
)
áá 
;
áá 
}
àà 
}ää 
}ãã Æ3
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_16.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_16 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
while!! 
(!! 
true!! 
)!! 
{"" 	
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
break;; 
;;; 
}<< 	
while== 
(== 
true== 
)== 
{>> 	
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA 
+AA  !
dataAA" &
+AA' (
$strAA) .
+AA/ 0
(AA1 2
$numAA2 5
%AA6 7
dataAA8 <
)AA< =
+AA> ?
$strAA@ D
)AAD E
;AAE F
breakBB 
;BB 
}CC 	
}DD 
privateHH 
voidHH 
GoodG2BHH 
(HH 
)HH 
{II 
intJJ 
dataJJ 
;JJ 
whileKK 
(KK 
trueKK 
)KK 
{LL 	
dataNN 
=NN 
$numNN 
;NN 
breakOO 
;OO 
}PP 	
whileQQ 
(QQ 
trueQQ 
)QQ 
{RR 	
IOUU 
.UU 
	WriteLineUU 
(UU 
$strUU 
+UU  !
dataUU" &
+UU' (
$strUU) .
+UU/ 0
(UU1 2
$numUU2 5
%UU6 7
dataUU8 <
)UU< =
+UU> ?
$strUU@ D
)UUD E
;UUE F
breakVV 
;VV 
}WW 	
}XX 
private[[ 
void[[ 
GoodB2G[[ 
([[ 
)[[ 
{\\ 
int]] 
data]] 
;]] 
while^^ 
(^^ 
true^^ 
)^^ 
{__ 	
data`` 
=`` 
int`` 
.`` 
MinValue`` 
;``  
{aa 
trycc 
{dd 
stringff 
stringNumberff '
=ff( )
Consoleff* 1
.ff1 2
ReadLineff2 :
(ff: ;
)ff; <
;ff< =
ifgg 
(gg 
stringNumbergg $
!=gg% '
nullgg( ,
)gg, -
{hh 
tryii 
{jj 
datakk  
=kk! "
intkk# &
.kk& '
Parsekk' ,
(kk, -
stringNumberkk- 9
.kk9 :
Trimkk: >
(kk> ?
)kk? @
)kk@ A
;kkA B
}ll 
catchmm 
(mm 
FormatExceptionmm -
exceptNumberFormatmm. @
)mm@ A
{nn 
IOoo 
.oo 
Loggeroo %
.oo% &
Logoo& )
(oo) *
NLogoo* .
.oo. /
LogLeveloo/ 7
.oo7 8
Warnoo8 <
,oo< =
exceptNumberFormatoo> P
,ooP Q
$str	ooR Ñ
)
ooÑ Ö
;
ooÖ Ü
}pp 
}qq 
}rr 
catchss 
(ss 
IOExceptionss "
exceptIOss# +
)ss+ ,
{tt 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu !
(uu! "
NLoguu" &
.uu& '
LogLeveluu' /
.uu/ 0
Warnuu0 4
,uu4 5
exceptIOuu6 >
,uu> ?
$struu@ [
)uu[ \
;uu\ ]
}vv 
}ww 
breakxx 
;xx 
}yy 	
whilezz 
(zz 
truezz 
)zz 
{{{ 	
if}} 
(}} 
data}} 
!=}} 
$num}} 
)}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str #
+$ %
data& *
++ ,
$str- 2
+3 4
(5 6
$num6 9
%: ;
data< @
)@ A
+B C
$strD H
)H I
;I J
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
	WriteLine
ÉÉ 
(
ÉÉ 
$str
ÉÉ D
)
ÉÉD E
;
ÉÉE F
}
ÑÑ 
break
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
}
áá 
public
ââ 

override
ââ 
void
ââ 
Good
ââ 
(
ââ 
)
ââ 
{
ää 
GoodG2B
ãã 
(
ãã 
)
ãã 
;
ãã 
GoodB2G
åå 
(
åå 
)
åå 
;
åå 
}
çç 
}èè 
}êê ·2
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_17.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_17 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
data%% 
=%% 
int%% 
.%% 
MinValue%% 
;%% 
{&& 	
try(( 
{)) 
string++ 
stringNumber++ #
=++$ %
Console++& -
.++- .
ReadLine++. 6
(++6 7
)++7 8
;++8 9
if,, 
(,, 
stringNumber,,  
!=,,! #
null,,$ (
),,( )
{-- 
try.. 
{// 
data00 
=00 
int00 "
.00" #
Parse00# (
(00( )
stringNumber00) 5
.005 6
Trim006 :
(00: ;
)00; <
)00< =
;00= >
}11 
catch22 
(22 
FormatException22 )
exceptNumberFormat22* <
)22< =
{33 
IO44 
.44 
Logger44 !
.44! "
Log44" %
(44% &
NLog44& *
.44* +
LogLevel44+ 3
.443 4
Warn444 8
,448 9
exceptNumberFormat44: L
,44L M
$str	44N Ä
)
44Ä Å
;
44Å Ç
}55 
}66 
}77 
catch88 
(88 
IOException88 
exceptIO88 '
)88' (
{99 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptIO::2 :
,::: ;
$str::< W
)::W X
;::X Y
};; 
}<< 	
for== 
(== 
int== 
j== 
=== 
$num== 
;== 
j== 
<== 
$num== 
;== 
j==  
++==  "
)==" #
{>> 	
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA 
+AA  !
dataAA" &
+AA' (
$strAA) .
+AA/ 0
(AA1 2
$numAA2 5
%AA6 7
dataAA8 <
)AA< =
+AA> ?
$strAA@ D
)AAD E
;AAE F
}BB 	
}CC 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
intII 
dataII 
;II 
dataKK 
=KK 
$numKK 
;KK 
forLL 
(LL 
intLL 
jLL 
=LL 
$numLL 
;LL 
jLL 
<LL 
$numLL 
;LL 
jLL  
++LL  "
)LL" #
{MM 	
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP 
+PP  !
dataPP" &
+PP' (
$strPP) .
+PP/ 0
(PP1 2
$numPP2 5
%PP6 7
dataPP8 <
)PP< =
+PP> ?
$strPP@ D
)PPD E
;PPE F
}QQ 	
}RR 
privateUU 
voidUU 
GoodB2GUU 
(UU 
)UU 
{VV 
intWW 
dataWW 
;WW 
dataXX 
=XX 
intXX 
.XX 
MinValueXX 
;XX 
{YY 	
try[[ 
{\\ 
string^^ 
stringNumber^^ #
=^^$ %
Console^^& -
.^^- .
ReadLine^^. 6
(^^6 7
)^^7 8
;^^8 9
if__ 
(__ 
stringNumber__  
!=__! #
null__$ (
)__( )
{`` 
tryaa 
{bb 
datacc 
=cc 
intcc "
.cc" #
Parsecc# (
(cc( )
stringNumbercc) 5
.cc5 6
Trimcc6 :
(cc: ;
)cc; <
)cc< =
;cc= >
}dd 
catchee 
(ee 
FormatExceptionee )
exceptNumberFormatee* <
)ee< =
{ff 
IOgg 
.gg 
Loggergg !
.gg! "
Loggg" %
(gg% &
NLoggg& *
.gg* +
LogLevelgg+ 3
.gg3 4
Warngg4 8
,gg8 9
exceptNumberFormatgg: L
,ggL M
$str	ggN Ä
)
ggÄ Å
;
ggÅ Ç
}hh 
}ii 
}jj 
catchkk 
(kk 
IOExceptionkk 
exceptIOkk '
)kk' (
{ll 
IOmm 
.mm 
Loggermm 
.mm 
Logmm 
(mm 
NLogmm "
.mm" #
LogLevelmm# +
.mm+ ,
Warnmm, 0
,mm0 1
exceptIOmm2 :
,mm: ;
$strmm< W
)mmW X
;mmX Y
}nn 
}oo 	
forpp 
(pp 
intpp 
kpp 
=pp 
$numpp 
;pp 
kpp 
<pp 
$numpp 
;pp 
kpp  
++pp  "
)pp" #
{qq 	
ifss 
(ss 
datass 
!=ss 
$numss 
)ss 
{tt 
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu #
+uu$ %
datauu& *
+uu+ ,
$struu- 2
+uu3 4
(uu5 6
$numuu6 9
%uu: ;
datauu< @
)uu@ A
+uuB C
$struuD H
)uuH I
;uuI J
}vv 
elseww 
{xx 
IOyy 
.yy 
	WriteLineyy 
(yy 
$stryy D
)yyD E
;yyE F
}zz 
}{{ 	
}|| 
public~~ 

override~~ 
void~~ 
Good~~ 
(~~ 
)~~ 
{ 
GoodG2B
ÄÄ 
(
ÄÄ 
)
ÄÄ 
;
ÄÄ 
GoodB2G
ÅÅ 
(
ÅÅ 
)
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}ÑÑ 
}ÖÖ ÜV
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_21.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_21 3
:4 5
AbstractTestCase6 F
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
int## 
data## 
;## 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$ 
{%% 	
try'' 
{(( 
string** 
stringNumber** #
=**$ %
Console**& -
.**- .
ReadLine**. 6
(**6 7
)**7 8
;**8 9
if++ 
(++ 
stringNumber++  
!=++! #
null++$ (
)++( )
{,, 
try-- 
{.. 
data// 
=// 
int// "
.//" #
Parse//# (
(//( )
stringNumber//) 5
.//5 6
Trim//6 :
(//: ;
)//; <
)//< =
;//= >
}00 
catch11 
(11 
FormatException11 )
exceptNumberFormat11* <
)11< =
{22 
IO33 
.33 
Logger33 !
.33! "
Log33" %
(33% &
NLog33& *
.33* +
LogLevel33+ 3
.333 4
Warn334 8
,338 9
exceptNumberFormat33: L
,33L M
$str	33N Ä
)
33Ä Å
;
33Å Ç
}44 
}55 
}66 
catch77 
(77 
IOException77 
exceptIO77 '
)77' (
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
exceptIO992 :
,99: ;
$str99< W
)99W X
;99X Y
}:: 
};; 	

badPrivate<< 
=<< 
true<< 
;<< 
BadSink== 
(== 
data== 
)== 
;== 
}>> 
private@@ 
void@@ 
BadSink@@ 
(@@ 
int@@ 
data@@ !
)@@" #
{AA 
ifBB 

(BB 

badPrivateBB 
)BB 
{CC 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
}HH 
privateKK 
boolKK 
goodB2G1PrivateKK  
=KK! "
falseKK# (
;KK( )
privateLL 
boolLL 
goodB2G2PrivateLL  
=LL! "
falseLL# (
;LL( )
privateMM 
boolMM 
goodG2BPrivateMM 
=MM  !
falseMM" '
;MM' (
publicOO 

overrideOO 
voidOO 
GoodOO 
(OO 
)OO 
{PP 
GoodB2G1QQ 
(QQ 
)QQ 
;QQ 
GoodB2G2RR 
(RR 
)RR 
;RR 
GoodG2BSS 
(SS 
)SS 
;SS 
}TT 
privateWW 
voidWW 
GoodB2G1WW 
(WW 
)WW 
{XX 
intYY 
dataYY 
;YY 
dataZZ 
=ZZ 
intZZ 
.ZZ 
MinValueZZ 
;ZZ 
{[[ 	
try]] 
{^^ 
string`` 
stringNumber`` #
=``$ %
Console``& -
.``- .
ReadLine``. 6
(``6 7
)``7 8
;``8 9
ifaa 
(aa 
stringNumberaa  
!=aa! #
nullaa$ (
)aa( )
{bb 
trycc 
{dd 
dataee 
=ee 
intee "
.ee" #
Parseee# (
(ee( )
stringNumberee) 5
.ee5 6
Trimee6 :
(ee: ;
)ee; <
)ee< =
;ee= >
}ff 
catchgg 
(gg 
FormatExceptiongg )
exceptNumberFormatgg* <
)gg< =
{hh 
IOii 
.ii 
Loggerii !
.ii! "
Logii" %
(ii% &
NLogii& *
.ii* +
LogLevelii+ 3
.ii3 4
Warnii4 8
,ii8 9
exceptNumberFormatii: L
,iiL M
$str	iiN Ä
)
iiÄ Å
;
iiÅ Ç
}jj 
}kk 
}ll 
catchmm 
(mm 
IOExceptionmm 
exceptIOmm '
)mm' (
{nn 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptIOoo2 :
,oo: ;
$stroo< W
)ooW X
;ooX Y
}pp 
}qq 	
goodB2G1Privaterr 
=rr 
falserr 
;rr  
GoodB2G1Sinkss 
(ss 
datass 
)ss 
;ss 
}tt 
privatevv 
voidvv 
GoodB2G1Sinkvv 
(vv 
intvv !
datavv" &
)vv' (
{ww 
ifxx 

(xx 
goodB2G1Privatexx 
)xx 
{yy 	
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ /
){{/ 0
;{{0 1
}|| 	
else}} 
{~~ 	
if
ÄÄ 
(
ÄÄ 
data
ÄÄ 
!=
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
{
ÅÅ 
IO
ÇÇ 
.
ÇÇ 
	WriteLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ #
+
ÇÇ$ %
data
ÇÇ& *
+
ÇÇ+ ,
$str
ÇÇ- 2
+
ÇÇ3 4
(
ÇÇ5 6
$num
ÇÇ6 9
%
ÇÇ: ;
data
ÇÇ< @
)
ÇÇ@ A
+
ÇÇB C
$str
ÇÇD H
)
ÇÇH I
;
ÇÇI J
}
ÉÉ 
else
ÑÑ 
{
ÖÖ 
IO
ÜÜ 
.
ÜÜ 
	WriteLine
ÜÜ 
(
ÜÜ 
$str
ÜÜ D
)
ÜÜD E
;
ÜÜE F
}
áá 
}
àà 	
}
ââ 
private
åå 
void
åå 
GoodB2G2
åå 
(
åå 
)
åå 
{
çç 
int
éé 
data
éé 
;
éé 
data
èè 
=
èè 
int
èè 
.
èè 
MinValue
èè 
;
èè 
{
êê 	
try
íí 
{
ìì 
string
ïï 
stringNumber
ïï #
=
ïï$ %
Console
ïï& -
.
ïï- .
ReadLine
ïï. 6
(
ïï6 7
)
ïï7 8
;
ïï8 9
if
ññ 
(
ññ 
stringNumber
ññ  
!=
ññ! #
null
ññ$ (
)
ññ( )
{
óó 
try
òò 
{
ôô 
data
öö 
=
öö 
int
öö "
.
öö" #
Parse
öö# (
(
öö( )
stringNumber
öö) 5
.
öö5 6
Trim
öö6 :
(
öö: ;
)
öö; <
)
öö< =
;
öö= >
}
õõ 
catch
úú 
(
úú 
FormatException
úú ) 
exceptNumberFormat
úú* <
)
úú< =
{
ùù 
IO
ûû 
.
ûû 
Logger
ûû !
.
ûû! "
Log
ûû" %
(
ûû% &
NLog
ûû& *
.
ûû* +
LogLevel
ûû+ 3
.
ûû3 4
Warn
ûû4 8
,
ûû8 9 
exceptNumberFormat
ûû: L
,
ûûL M
$strûûN Ä
)ûûÄ Å
;ûûÅ Ç
}
üü 
}
†† 
}
°° 
catch
¢¢ 
(
¢¢ 
IOException
¢¢ 
exceptIO
¢¢ '
)
¢¢' (
{
££ 
IO
§§ 
.
§§ 
Logger
§§ 
.
§§ 
Log
§§ 
(
§§ 
NLog
§§ "
.
§§" #
LogLevel
§§# +
.
§§+ ,
Warn
§§, 0
,
§§0 1
exceptIO
§§2 :
,
§§: ;
$str
§§< W
)
§§W X
;
§§X Y
}
•• 
}
¶¶ 	
goodB2G2Private
ßß 
=
ßß 
true
ßß 
;
ßß 
GoodB2G2Sink
®® 
(
®® 
data
®® 
)
®® 
;
®® 
}
©© 
private
´´ 
void
´´ 
GoodB2G2Sink
´´ 
(
´´ 
int
´´ !
data
´´" &
)
´´' (
{
¨¨ 
if
≠≠ 

(
≠≠ 
goodB2G2Private
≠≠ 
)
≠≠ 
{
ÆÆ 	
if
∞∞ 
(
∞∞ 
data
∞∞ 
!=
∞∞ 
$num
∞∞ 
)
∞∞ 
{
±± 
IO
≤≤ 
.
≤≤ 
	WriteLine
≤≤ 
(
≤≤ 
$str
≤≤ #
+
≤≤$ %
data
≤≤& *
+
≤≤+ ,
$str
≤≤- 2
+
≤≤3 4
(
≤≤5 6
$num
≤≤6 9
%
≤≤: ;
data
≤≤< @
)
≤≤@ A
+
≤≤B C
$str
≤≤D H
)
≤≤H I
;
≤≤I J
}
≥≥ 
else
¥¥ 
{
µµ 
IO
∂∂ 
.
∂∂ 
	WriteLine
∂∂ 
(
∂∂ 
$str
∂∂ D
)
∂∂D E
;
∂∂E F
}
∑∑ 
}
∏∏ 	
}
ππ 
private
ºº 
void
ºº 
GoodG2B
ºº 
(
ºº 
)
ºº 
{
ΩΩ 
int
ææ 
data
ææ 
;
ææ 
data
¿¿ 
=
¿¿ 
$num
¿¿ 
;
¿¿ 
goodG2BPrivate
¡¡ 
=
¡¡ 
true
¡¡ 
;
¡¡ 
GoodG2BSink
¬¬ 
(
¬¬ 
data
¬¬ 
)
¬¬ 
;
¬¬ 
}
√√ 
private
≈≈ 
void
≈≈ 
GoodG2BSink
≈≈ 
(
≈≈ 
int
≈≈  
data
≈≈! %
)
≈≈& '
{
∆∆ 
if
«« 

(
«« 
goodG2BPrivate
«« 
)
«« 
{
»» 	
IO
ÀÀ 
.
ÀÀ 
	WriteLine
ÀÀ 
(
ÀÀ 
$str
ÀÀ 
+
ÀÀ  !
data
ÀÀ" &
+
ÀÀ' (
$str
ÀÀ) .
+
ÀÀ/ 0
(
ÀÀ1 2
$num
ÀÀ2 5
%
ÀÀ6 7
data
ÀÀ8 <
)
ÀÀ< =
+
ÀÀ> ?
$str
ÀÀ@ D
)
ÀÀD E
;
ÀÀE F
}
ÃÃ 	
}
ÕÕ 
}œœ 
}–– ¡?
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_22a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_22a 4
:5 6
AbstractTestCase7 G
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public 

override 
void 
Bad 
( 
) 
{   
int!! 
data!! 
=!! 
$num!! 
;!! 
data"" 
="" 
int"" 
."" 
MinValue"" 
;"" 
{## 	
try%% 
{&& 
string(( 
stringNumber(( #
=(($ %
Console((& -
.((- .
ReadLine((. 6
(((6 7
)((7 8
;((8 9
if)) 
()) 
stringNumber))  
!=))! #
null))$ (
)))( )
{** 
try++ 
{,, 
data-- 
=-- 
int-- "
.--" #
Parse--# (
(--( )
stringNumber--) 5
.--5 6
Trim--6 :
(--: ;
)--; <
)--< =
;--= >
}.. 
catch// 
(// 
FormatException// )
exceptNumberFormat//* <
)//< =
{00 
IO11 
.11 
Logger11 !
.11! "
Log11" %
(11% &
NLog11& *
.11* +
LogLevel11+ 3
.113 4
Warn114 8
,118 9
exceptNumberFormat11: L
,11L M
$str	11N Ä
)
11Ä Å
;
11Å Ç
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
}99 	
badPublicStatic:: 
=:: 
true:: 
;:: :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_22b;; 6
.;;6 7
BadSink;;7 >
(;;> ?
data;;? C
);;D E
;;;E F
}<< 
public?? 

static?? 
bool??  
goodB2G1PublicStatic?? +
=??, -
false??. 3
;??3 4
public@@ 

static@@ 
bool@@  
goodB2G2PublicStatic@@ +
=@@, -
false@@. 3
;@@3 4
publicAA 

staticAA 
boolAA 
goodG2BPublicStaticAA *
=AA+ ,
falseAA- 2
;AA2 3
publicCC 

overrideCC 
voidCC 
GoodCC 
(CC 
)CC 
{DD 
GoodB2G1EE 
(EE 
)EE 
;EE 
GoodB2G2FF 
(FF 
)FF 
;FF 
GoodG2BGG 
(GG 
)GG 
;GG 
}HH 
privateKK 
voidKK 
GoodB2G1KK 
(KK 
)KK 
{LL 
intMM 
dataMM 
=MM 
$numMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{OO 	
tryQQ 
{RR 
stringTT 
stringNumberTT #
=TT$ %
ConsoleTT& -
.TT- .
ReadLineTT. 6
(TT6 7
)TT7 8
;TT8 9
ifUU 
(UU 
stringNumberUU  
!=UU! #
nullUU$ (
)UU( )
{VV 
tryWW 
{XX 
dataYY 
=YY 
intYY "
.YY" #
ParseYY# (
(YY( )
stringNumberYY) 5
.YY5 6
TrimYY6 :
(YY: ;
)YY; <
)YY< =
;YY= >
}ZZ 
catch[[ 
([[ 
FormatException[[ )
exceptNumberFormat[[* <
)[[< =
{\\ 
IO]] 
.]] 
Logger]] !
.]]! "
Log]]" %
(]]% &
NLog]]& *
.]]* +
LogLevel]]+ 3
.]]3 4
Warn]]4 8
,]]8 9
exceptNumberFormat]]: L
,]]L M
$str	]]N Ä
)
]]Ä Å
;
]]Å Ç
}^^ 
}__ 
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptIOcc2 :
,cc: ;
$strcc< W
)ccW X
;ccX Y
}dd 
}ee 	 
goodB2G1PublicStaticff 
=ff 
falseff $
;ff$ %:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_22bgg 6
.gg6 7
GoodB2G1Sinkgg7 C
(ggC D
dataggD H
)ggI J
;ggJ K
}hh 
privatekk 
voidkk 
GoodB2G2kk 
(kk 
)kk 
{ll 
intmm 
datamm 
=mm 
$nummm 
;mm 
datann 
=nn 
intnn 
.nn 
MinValuenn 
;nn 
{oo 	
tryqq 
{rr 
stringtt 
stringNumbertt #
=tt$ %
Consolett& -
.tt- .
ReadLinett. 6
(tt6 7
)tt7 8
;tt8 9
ifuu 
(uu 
stringNumberuu  
!=uu! #
nulluu$ (
)uu( )
{vv 
tryww 
{xx 
datayy 
=yy 
intyy "
.yy" #
Parseyy# (
(yy( )
stringNumberyy) 5
.yy5 6
Trimyy6 :
(yy: ;
)yy; <
)yy< =
;yy= >
}zz 
catch{{ 
({{ 
FormatException{{ )
exceptNumberFormat{{* <
){{< =
{|| 
IO}} 
.}} 
Logger}} !
.}}! "
Log}}" %
(}}% &
NLog}}& *
.}}* +
LogLevel}}+ 3
.}}3 4
Warn}}4 8
,}}8 9
exceptNumberFormat}}: L
,}}L M
$str	}}N Ä
)
}}Ä Å
;
}}Å Ç
}~~ 
} 
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
IOException
ÅÅ 
exceptIO
ÅÅ '
)
ÅÅ' (
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
Logger
ÉÉ 
.
ÉÉ 
Log
ÉÉ 
(
ÉÉ 
NLog
ÉÉ "
.
ÉÉ" #
LogLevel
ÉÉ# +
.
ÉÉ+ ,
Warn
ÉÉ, 0
,
ÉÉ0 1
exceptIO
ÉÉ2 :
,
ÉÉ: ;
$str
ÉÉ< W
)
ÉÉW X
;
ÉÉX Y
}
ÑÑ 
}
ÖÖ 	"
goodB2G2PublicStatic
ÜÜ 
=
ÜÜ 
true
ÜÜ #
;
ÜÜ# $<
.CWE369_Divide_by_Zero__int_ReadLine_modulo_22b
áá 6
.
áá6 7
GoodB2G2Sink
áá7 C
(
ááC D
data
ááD H
)
ááI J
;
ááJ K
}
àà 
private
ãã 
void
ãã 
GoodG2B
ãã 
(
ãã 
)
ãã 
{
åå 
int
çç 
data
çç 
=
çç 
$num
çç 
;
çç 
data
èè 
=
èè 
$num
èè 
;
èè !
goodG2BPublicStatic
êê 
=
êê 
true
êê "
;
êê" #<
.CWE369_Divide_by_Zero__int_ReadLine_modulo_22b
ëë 6
.
ëë6 7
GoodG2BSink
ëë7 B
(
ëëB C
data
ëëC G
)
ëëH I
;
ëëI J
}
íí 
}îî 
}ïï ü 
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_22b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_22b 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
if 

( :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_22a :
.: ;
badPublicStatic; J
)J K
{ 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
%""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
}** 
public// 

static// 
void// 
GoodB2G1Sink// #
(//# $
int//$ '
data//( ,
)//- .
{00 
if11 

(11 :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_22a11 :
.11: ; 
goodB2G1PublicStatic11; O
)11O P
{22 	
data55 
=55 
$num55 
;55 
}66 	
else77 
{88 	
if:: 
(:: 
data:: 
!=:: 
$num:: 
):: 
{;; 
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< #
+<<$ %
data<<& *
+<<+ ,
$str<<- 2
+<<3 4
(<<5 6
$num<<6 9
%<<: ;
data<<< @
)<<@ A
+<<B C
$str<<D H
)<<H I
;<<I J
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ D
)@@D E
;@@E F
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2G2SinkFF #
(FF# $
intFF$ '
dataFF( ,
)FF- .
{GG 
ifHH 

(HH :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_22aHH :
.HH: ; 
goodB2G2PublicStaticHH; O
)HHO P
{II 	
ifKK 
(KK 
dataKK 
!=KK 
$numKK 
)KK 
{LL 
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM #
+MM$ %
dataMM& *
+MM+ ,
$strMM- 2
+MM3 4
(MM5 6
$numMM6 9
%MM: ;
dataMM< @
)MM@ A
+MMB C
$strMMD H
)MMH I
;MMI J
}NN 
elseOO 
{PP 
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ D
)QQD E
;QQE F
}RR 
}SS 	
elseTT 
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
}ZZ 
public]] 

static]] 
void]] 
GoodG2BSink]] "
(]]" #
int]]# &
data]]' +
)]], -
{^^ 
if__ 

(__ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_22a__ :
.__: ;
goodG2BPublicStatic__; N
)__N O
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc 
+cc  !
datacc" &
+cc' (
$strcc) .
+cc/ 0
(cc1 2
$numcc2 5
%cc6 7
datacc8 <
)cc< =
+cc> ?
$strcc@ D
)ccD E
;ccE F
}dd 	
elseee 
{ff 	
dataii 
=ii 
$numii 
;ii 
}jj 	
}kk 
}mm 
}nn Ÿ3
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_31.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_31 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
dataCopy   
;   
{!! 	
int"" 
data"" 
;"" 
data## 
=## 
int## 
.## 
MinValue## 
;##  
{$$ 
try&& 
{'' 
string)) 
stringNumber)) '
=))( )
Console))* 1
.))1 2
ReadLine))2 :
()): ;
))); <
;))< =
if** 
(** 
stringNumber** $
!=**% '
null**( ,
)**, -
{++ 
try,, 
{-- 
data..  
=..! "
int..# &
...& '
Parse..' ,
(.., -
stringNumber..- 9
...9 :
Trim..: >
(..> ?
)..? @
)..@ A
;..A B
}// 
catch00 
(00 
FormatException00 -
exceptNumberFormat00. @
)00@ A
{11 
IO22 
.22 
Logger22 %
.22% &
Log22& )
(22) *
NLog22* .
.22. /
LogLevel22/ 7
.227 8
Warn228 <
,22< =
exceptNumberFormat22> P
,22P Q
$str	22R Ñ
)
22Ñ Ö
;
22Ö Ü
}33 
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
dataCopy;; 
=;; 
data;; 
;;; 
}<< 	
{== 	
int>> 
data>> 
=>> 
dataCopy>> 
;>>  
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA 
+AA  !
dataAA" &
+AA' (
$strAA) .
+AA/ 0
(AA1 2
$numAA2 5
%AA6 7
dataAA8 <
)AA< =
+AA> ?
$strAA@ D
)AAD E
;AAE F
}BB 	
}CC 
publicFF 

overrideFF 
voidFF 
GoodFF 
(FF 
)FF 
{GG 
GoodG2BHH 
(HH 
)HH 
;HH 
GoodB2GII 
(II 
)II 
;II 
}JJ 
privateMM 
voidMM 
GoodG2BMM 
(MM 
)MM 
{NN 
intOO 
dataCopyOO 
;OO 
{PP 	
intQQ 
dataQQ 
;QQ 
dataSS 
=SS 
$numSS 
;SS 
dataCopyTT 
=TT 
dataTT 
;TT 
}UU 	
{VV 	
intWW 
dataWW 
=WW 
dataCopyWW 
;WW  
IOZZ 
.ZZ 
	WriteLineZZ 
(ZZ 
$strZZ 
+ZZ  !
dataZZ" &
+ZZ' (
$strZZ) .
+ZZ/ 0
(ZZ1 2
$numZZ2 5
%ZZ6 7
dataZZ8 <
)ZZ< =
+ZZ> ?
$strZZ@ D
)ZZD E
;ZZE F
}[[ 	
}\\ 
private__ 
void__ 
GoodB2G__ 
(__ 
)__ 
{`` 
intaa 
dataCopyaa 
;aa 
{bb 	
intcc 
datacc 
;cc 
datadd 
=dd 
intdd 
.dd 
MinValuedd 
;dd  
{ee 
trygg 
{hh 
stringjj 
stringNumberjj '
=jj( )
Consolejj* 1
.jj1 2
ReadLinejj2 :
(jj: ;
)jj; <
;jj< =
ifkk 
(kk 
stringNumberkk $
!=kk% '
nullkk( ,
)kk, -
{ll 
trymm 
{nn 
dataoo  
=oo! "
intoo# &
.oo& '
Parseoo' ,
(oo, -
stringNumberoo- 9
.oo9 :
Trimoo: >
(oo> ?
)oo? @
)oo@ A
;ooA B
}pp 
catchqq 
(qq 
FormatExceptionqq -
exceptNumberFormatqq. @
)qq@ A
{rr 
IOss 
.ss 
Loggerss %
.ss% &
Logss& )
(ss) *
NLogss* .
.ss. /
LogLevelss/ 7
.ss7 8
Warnss8 <
,ss< =
exceptNumberFormatss> P
,ssP Q
$str	ssR Ñ
)
ssÑ Ö
;
ssÖ Ü
}tt 
}uu 
}vv 
catchww 
(ww 
IOExceptionww "
exceptIOww# +
)ww+ ,
{xx 
IOyy 
.yy 
Loggeryy 
.yy 
Logyy !
(yy! "
NLogyy" &
.yy& '
LogLevelyy' /
.yy/ 0
Warnyy0 4
,yy4 5
exceptIOyy6 >
,yy> ?
$stryy@ [
)yy[ \
;yy\ ]
}zz 
}{{ 
dataCopy|| 
=|| 
data|| 
;|| 
}}} 	
{~~ 	
int 
data 
= 
dataCopy 
;  
if
ÅÅ 
(
ÅÅ 
data
ÅÅ 
!=
ÅÅ 
$num
ÅÅ 
)
ÅÅ 
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
	WriteLine
ÉÉ 
(
ÉÉ 
$str
ÉÉ #
+
ÉÉ$ %
data
ÉÉ& *
+
ÉÉ+ ,
$str
ÉÉ- 2
+
ÉÉ3 4
(
ÉÉ5 6
$num
ÉÉ6 9
%
ÉÉ: ;
data
ÉÉ< @
)
ÉÉ@ A
+
ÉÉB C
$str
ÉÉD H
)
ÉÉH I
;
ÉÉI J
}
ÑÑ 
else
ÖÖ 
{
ÜÜ 
IO
áá 
.
áá 
	WriteLine
áá 
(
áá 
$str
áá D
)
ááD E
;
ááE F
}
àà 
}
ââ 	
}
ää 
}åå 
}çç —3
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_41.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_41 3
:4 5
AbstractTestCase6 F
{ 
private 
static 
void 
BadSink 
(  
int  #
data$ (
)) *
{ 
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
int'' 
data'' 
;'' 
data(( 
=(( 
int(( 
.(( 
MinValue(( 
;(( 
{)) 	
try++ 
{,, 
string.. 
stringNumber.. #
=..$ %
Console..& -
...- .
ReadLine... 6
(..6 7
)..7 8
;..8 9
if// 
(// 
stringNumber//  
!=//! #
null//$ (
)//( )
{00 
try11 
{22 
data33 
=33 
int33 "
.33" #
Parse33# (
(33( )
stringNumber33) 5
.335 6
Trim336 :
(33: ;
)33; <
)33< =
;33= >
}44 
catch55 
(55 
FormatException55 )
exceptNumberFormat55* <
)55< =
{66 
IO77 
.77 
Logger77 !
.77! "
Log77" %
(77% &
NLog77& *
.77* +
LogLevel77+ 3
.773 4
Warn774 8
,778 9
exceptNumberFormat77: L
,77L M
$str	77N Ä
)
77Ä Å
;
77Å Ç
}88 
}99 
}:: 
catch;; 
(;; 
IOException;; 
exceptIO;; '
);;' (
{<< 
IO== 
.== 
Logger== 
.== 
Log== 
(== 
NLog== "
.==" #
LogLevel==# +
.==+ ,
Warn==, 0
,==0 1
exceptIO==2 :
,==: ;
$str==< W
)==W X
;==X Y
}>> 
}?? 	
BadSink@@ 
(@@ 
data@@ 
)@@ 
;@@ 
}AA 
publicDD 

overrideDD 
voidDD 
GoodDD 
(DD 
)DD 
{EE 
GoodG2BFF 
(FF 
)FF 
;FF 
GoodB2GGG 
(GG 
)GG 
;GG 
}HH 
privateJJ 
staticJJ 
voidJJ 
GoodG2BSinkJJ #
(JJ# $
intJJ$ '
dataJJ( ,
)JJ- .
{KK 
IONN 

.NN
 
	WriteLineNN 
(NN 
$strNN 
+NN 
dataNN "
+NN# $
$strNN% *
+NN+ ,
(NN- .
$numNN. 1
%NN2 3
dataNN4 8
)NN8 9
+NN: ;
$strNN< @
)NN@ A
;NNA B
}OO 
privateRR 
staticRR 
voidRR 
GoodG2BRR 
(RR  
)RR  !
{SS 
intTT 
dataTT 
;TT 
dataVV 
=VV 
$numVV 
;VV 
GoodG2BSinkWW 
(WW 
dataWW 
)WW 
;WW 
}XX 
privateZZ 
staticZZ 
voidZZ 
GoodB2GSinkZZ #
(ZZ# $
intZZ$ '
dataZZ( ,
)ZZ- .
{[[ 
if]] 

(]] 
data]] 
!=]] 
$num]] 
)]] 
{^^ 	
IO__ 
.__ 
	WriteLine__ 
(__ 
$str__ 
+__  !
data__" &
+__' (
$str__) .
+__/ 0
(__1 2
$num__2 5
%__6 7
data__8 <
)__< =
+__> ?
$str__@ D
)__D E
;__E F
}`` 	
elseaa 
{bb 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc @
)cc@ A
;ccA B
}dd 	
}ee 
privatehh 
statichh 
voidhh 
GoodB2Ghh 
(hh  
)hh  !
{ii 
intjj 
datajj 
;jj 
datakk 
=kk 
intkk 
.kk 
MinValuekk 
;kk 
{ll 	
trynn 
{oo 
stringqq 
stringNumberqq #
=qq$ %
Consoleqq& -
.qq- .
ReadLineqq. 6
(qq6 7
)qq7 8
;qq8 9
ifrr 
(rr 
stringNumberrr  
!=rr! #
nullrr$ (
)rr( )
{ss 
trytt 
{uu 
datavv 
=vv 
intvv "
.vv" #
Parsevv# (
(vv( )
stringNumbervv) 5
.vv5 6
Trimvv6 :
(vv: ;
)vv; <
)vv< =
;vv= >
}ww 
catchxx 
(xx 
FormatExceptionxx )
exceptNumberFormatxx* <
)xx< =
{yy 
IOzz 
.zz 
Loggerzz !
.zz! "
Logzz" %
(zz% &
NLogzz& *
.zz* +
LogLevelzz+ 3
.zz3 4
Warnzz4 8
,zz8 9
exceptNumberFormatzz: L
,zzL M
$str	zzN Ä
)
zzÄ Å
;
zzÅ Ç
}{{ 
}|| 
}}} 
catch~~ 
(~~ 
IOException~~ 
exceptIO~~ '
)~~' (
{ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ 
.
ÄÄ 
Log
ÄÄ 
(
ÄÄ 
NLog
ÄÄ "
.
ÄÄ" #
LogLevel
ÄÄ# +
.
ÄÄ+ ,
Warn
ÄÄ, 0
,
ÄÄ0 1
exceptIO
ÄÄ2 :
,
ÄÄ: ;
$str
ÄÄ< W
)
ÄÄW X
;
ÄÄX Y
}
ÅÅ 
}
ÇÇ 	
GoodB2GSink
ÉÉ 
(
ÉÉ 
data
ÉÉ 
)
ÉÉ 
;
ÉÉ 
}
ÑÑ 
}ÜÜ 
}áá ‚4
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_42.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_42 3
:4 5
AbstractTestCase6 F
{ 
private 
static 
int 
	BadSource  
(  !
)! "
{ 
int   
data   
;   
data!! 
=!! 
int!! 
.!! 
MinValue!! 
;!! 
{"" 	
try$$ 
{%% 
string'' 
stringNumber'' #
=''$ %
Console''& -
.''- .
ReadLine''. 6
(''6 7
)''7 8
;''8 9
if(( 
((( 
stringNumber((  
!=((! #
null(($ (
)((( )
{)) 
try** 
{++ 
data,, 
=,, 
int,, "
.,," #
Parse,,# (
(,,( )
stringNumber,,) 5
.,,5 6
Trim,,6 :
(,,: ;
),,; <
),,< =
;,,= >
}-- 
catch.. 
(.. 
FormatException.. )
exceptNumberFormat..* <
)..< =
{// 
IO00 
.00 
Logger00 !
.00! "
Log00" %
(00% &
NLog00& *
.00* +
LogLevel00+ 3
.003 4
Warn004 8
,008 9
exceptNumberFormat00: L
,00L M
$str	00N Ä
)
00Ä Å
;
00Å Ç
}11 
}22 
}33 
catch44 
(44 
IOException44 
exceptIO44 '
)44' (
{55 
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 "
.66" #
LogLevel66# +
.66+ ,
Warn66, 0
,660 1
exceptIO662 :
,66: ;
$str66< W
)66W X
;66X Y
}77 
}88 	
return99 
data99 
;99 
}:: 
public<< 

override<< 
void<< 
Bad<< 
(<< 
)<< 
{== 
int>> 
data>> 
=>> 
	BadSource>> 
(>> 
)>> 
;>> 
IOAA 

.AA
 
	WriteLineAA 
(AA 
$strAA 
+AA 
dataAA "
+AA# $
$strAA% *
+AA+ ,
(AA- .
$numAA. 1
%AA2 3
dataAA4 8
)AA8 9
+AA: ;
$strAA< @
)AA@ A
;AAA B
}BB 
privateFF 
staticFF 
intFF 
GoodG2BSourceFF $
(FF$ %
)FF% &
{GG 
intHH 
dataHH 
;HH 
dataJJ 
=JJ 
$numJJ 
;JJ 
returnKK 
dataKK 
;KK 
}LL 
privateNN 
staticNN 
voidNN 
GoodG2BNN 
(NN  
)NN  !
{OO 
intPP 
dataPP 
=PP 
GoodG2BSourcePP  
(PP  !
)PP! "
;PP" #
IOSS 

.SS
 
	WriteLineSS 
(SS 
$strSS 
+SS 
dataSS "
+SS# $
$strSS% *
+SS+ ,
(SS- .
$numSS. 1
%SS2 3
dataSS4 8
)SS8 9
+SS: ;
$strSS< @
)SS@ A
;SSA B
}TT 
privateWW 
staticWW 
intWW 
GoodB2GSourceWW $
(WW$ %
)WW% &
{XX 
intYY 
dataYY 
;YY 
dataZZ 
=ZZ 
intZZ 
.ZZ 
MinValueZZ 
;ZZ 
{[[ 	
try]] 
{^^ 
string`` 
stringNumber`` #
=``$ %
Console``& -
.``- .
ReadLine``. 6
(``6 7
)``7 8
;``8 9
ifaa 
(aa 
stringNumberaa  
!=aa! #
nullaa$ (
)aa( )
{bb 
trycc 
{dd 
dataee 
=ee 
intee "
.ee" #
Parseee# (
(ee( )
stringNumberee) 5
.ee5 6
Trimee6 :
(ee: ;
)ee; <
)ee< =
;ee= >
}ff 
catchgg 
(gg 
FormatExceptiongg )
exceptNumberFormatgg* <
)gg< =
{hh 
IOii 
.ii 
Loggerii !
.ii! "
Logii" %
(ii% &
NLogii& *
.ii* +
LogLevelii+ 3
.ii3 4
Warnii4 8
,ii8 9
exceptNumberFormatii: L
,iiL M
$str	iiN Ä
)
iiÄ Å
;
iiÅ Ç
}jj 
}kk 
}ll 
catchmm 
(mm 
IOExceptionmm 
exceptIOmm '
)mm' (
{nn 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptIOoo2 :
,oo: ;
$stroo< W
)ooW X
;ooX Y
}pp 
}qq 	
returnrr 
datarr 
;rr 
}ss 
privateuu 
staticuu 
voiduu 
GoodB2Guu 
(uu  
)uu  !
{vv 
intww 
dataww 
=ww 
GoodB2GSourceww  
(ww  !
)ww! "
;ww" #
ifyy 

(yy 
datayy 
!=yy 
$numyy 
)yy 
{zz 	
IO{{ 
.{{ 
	WriteLine{{ 
({{ 
$str{{ 
+{{  !
data{{" &
+{{' (
$str{{) .
+{{/ 0
({{1 2
$num{{2 5
%{{6 7
data{{8 <
){{< =
+{{> ?
$str{{@ D
){{D E
;{{E F
}|| 	
else}} 
{~~ 	
IO 
. 
	WriteLine 
( 
$str @
)@ A
;A B
}
ÄÄ 	
}
ÅÅ 
public
ÉÉ 

override
ÉÉ 
void
ÉÉ 
Good
ÉÉ 
(
ÉÉ 
)
ÉÉ 
{
ÑÑ 
GoodG2B
ÖÖ 
(
ÖÖ 
)
ÖÖ 
;
ÖÖ 
GoodB2G
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
}
áá 
}ââ 
}ää ›7
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_45.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_ReadLine_modulo_45 3
:4 5
AbstractTestCase6 F
{ 
private 
int 
dataBad 
; 
private 
int 
dataGoodG2B 
; 
private   
int   
dataGoodB2G   
;   
private"" 
void"" 
BadSink"" 
("" 
)"" 
{## 
int$$ 
data$$ 
=$$ 
dataBad$$ 
;$$ 
IO'' 

.''
 
	WriteLine'' 
('' 
$str'' 
+'' 
data'' "
+''# $
$str''% *
+''+ ,
(''- .
$num''. 1
%''2 3
data''4 8
)''8 9
+'': ;
$str''< @
)''@ A
;''A B
}(( 
public** 

override** 
void** 
Bad** 
(** 
)** 
{++ 
int,, 
data,, 
;,, 
data-- 
=-- 
int-- 
.-- 
MinValue-- 
;-- 
{.. 	
try00 
{11 
string33 
stringNumber33 #
=33$ %
Console33& -
.33- .
ReadLine33. 6
(336 7
)337 8
;338 9
if44 
(44 
stringNumber44  
!=44! #
null44$ (
)44( )
{55 
try66 
{77 
data88 
=88 
int88 "
.88" #
Parse88# (
(88( )
stringNumber88) 5
.885 6
Trim886 :
(88: ;
)88; <
)88< =
;88= >
}99 
catch:: 
(:: 
FormatException:: )
exceptNumberFormat::* <
)::< =
{;; 
IO<< 
.<< 
Logger<< !
.<<! "
Log<<" %
(<<% &
NLog<<& *
.<<* +
LogLevel<<+ 3
.<<3 4
Warn<<4 8
,<<8 9
exceptNumberFormat<<: L
,<<L M
$str	<<N Ä
)
<<Ä Å
;
<<Å Ç
}== 
}>> 
}?? 
catch@@ 
(@@ 
IOException@@ 
exceptIO@@ '
)@@' (
{AA 
IOBB 
.BB 
LoggerBB 
.BB 
LogBB 
(BB 
NLogBB "
.BB" #
LogLevelBB# +
.BB+ ,
WarnBB, 0
,BB0 1
exceptIOBB2 :
,BB: ;
$strBB< W
)BBW X
;BBX Y
}CC 
}DD 	
dataBadEE 
=EE 
dataEE 
;EE 
BadSinkFF 
(FF 
)FF 
;FF 
}GG 
publicJJ 

overrideJJ 
voidJJ 
GoodJJ 
(JJ 
)JJ 
{KK 
GoodG2BLL 
(LL 
)LL 
;LL 
GoodB2GMM 
(MM 
)MM 
;MM 
}NN 
privatePP 
voidPP 
GoodG2BSinkPP 
(PP 
)PP 
{QQ 
intRR 
dataRR 
=RR 
dataGoodG2BRR 
;RR 
IOUU 

.UU
 
	WriteLineUU 
(UU 
$strUU 
+UU 
dataUU "
+UU# $
$strUU% *
+UU+ ,
(UU- .
$numUU. 1
%UU2 3
dataUU4 8
)UU8 9
+UU: ;
$strUU< @
)UU@ A
;UUA B
}VV 
privateYY 
voidYY 
GoodG2BYY 
(YY 
)YY 
{ZZ 
int[[ 
data[[ 
;[[ 
data]] 
=]] 
$num]] 
;]] 
dataGoodG2B^^ 
=^^ 
data^^ 
;^^ 
GoodG2BSink__ 
(__ 
)__ 
;__ 
}`` 
privatebb 
voidbb 
GoodB2GSinkbb 
(bb 
)bb 
{cc 
intdd 
datadd 
=dd 
dataGoodB2Gdd 
;dd 
ifff 

(ff 
dataff 
!=ff 
$numff 
)ff 
{gg 	
IOhh 
.hh 
	WriteLinehh 
(hh 
$strhh 
+hh  !
datahh" &
+hh' (
$strhh) .
+hh/ 0
(hh1 2
$numhh2 5
%hh6 7
datahh8 <
)hh< =
+hh> ?
$strhh@ D
)hhD E
;hhE F
}ii 	
elsejj 
{kk 	
IOll 
.ll 
	WriteLinell 
(ll 
$strll @
)ll@ A
;llA B
}mm 	
}nn 
privateqq 
voidqq 
GoodB2Gqq 
(qq 
)qq 
{rr 
intss 
datass 
;ss 
datatt 
=tt 
inttt 
.tt 
MinValuett 
;tt 
{uu 	
tryww 
{xx 
stringzz 
stringNumberzz #
=zz$ %
Consolezz& -
.zz- .
ReadLinezz. 6
(zz6 7
)zz7 8
;zz8 9
if{{ 
({{ 
stringNumber{{  
!={{! #
null{{$ (
){{( )
{|| 
try}} 
{~~ 
data 
= 
int "
." #
Parse# (
(( )
stringNumber) 5
.5 6
Trim6 :
(: ;
); <
)< =
;= >
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
FormatException
ÅÅ ) 
exceptNumberFormat
ÅÅ* <
)
ÅÅ< =
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
Logger
ÉÉ !
.
ÉÉ! "
Log
ÉÉ" %
(
ÉÉ% &
NLog
ÉÉ& *
.
ÉÉ* +
LogLevel
ÉÉ+ 3
.
ÉÉ3 4
Warn
ÉÉ4 8
,
ÉÉ8 9 
exceptNumberFormat
ÉÉ: L
,
ÉÉL M
$strÉÉN Ä
)ÉÉÄ Å
;ÉÉÅ Ç
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 
catch
áá 
(
áá 
IOException
áá 
exceptIO
áá '
)
áá' (
{
àà 
IO
ââ 
.
ââ 
Logger
ââ 
.
ââ 
Log
ââ 
(
ââ 
NLog
ââ "
.
ââ" #
LogLevel
ââ# +
.
ââ+ ,
Warn
ââ, 0
,
ââ0 1
exceptIO
ââ2 :
,
ââ: ;
$str
ââ< W
)
ââW X
;
ââX Y
}
ää 
}
ãã 	
dataGoodB2G
åå 
=
åå 
data
åå 
;
åå 
GoodB2GSink
çç 
(
çç 
)
çç 
;
çç 
}
éé 
}êê 
}ëë Ù&
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_51a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_51a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_51b77 6
.776 7
BadSink777 >
(77> ?
data77? C
)77E F
;77F G
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
intDD 
dataDD 
;DD 
dataFF 
=FF 
$numFF 
;FF :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_51bGG 6
.GG6 7
GoodG2BSinkGG7 B
(GGB C
dataGGC G
)GGI J
;GGJ K
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{OO 	
tryQQ 
{RR 
stringTT 
stringNumberTT #
=TT$ %
ConsoleTT& -
.TT- .
ReadLineTT. 6
(TT6 7
)TT7 8
;TT8 9
ifUU 
(UU 
stringNumberUU  
!=UU! #
nullUU$ (
)UU( )
{VV 
tryWW 
{XX 
dataYY 
=YY 
intYY "
.YY" #
ParseYY# (
(YY( )
stringNumberYY) 5
.YY5 6
TrimYY6 :
(YY: ;
)YY; <
)YY< =
;YY= >
}ZZ 
catch[[ 
([[ 
FormatException[[ )
exceptNumberFormat[[* <
)[[< =
{\\ 
IO]] 
.]] 
Logger]] !
.]]! "
Log]]" %
(]]% &
NLog]]& *
.]]* +
LogLevel]]+ 3
.]]3 4
Warn]]4 8
,]]8 9
exceptNumberFormat]]: L
,]]L M
$str	]]N Ä
)
]]Ä Å
;
]]Å Ç
}^^ 
}__ 
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptIOcc2 :
,cc: ;
$strcc< W
)ccW X
;ccX Y
}dd 
}ee 	:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_51bff 6
.ff6 7
GoodB2GSinkff7 B
(ffB C
dataffC G
)ffI J
;ffJ K
}gg 
}ii 
}jj Ë
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_51b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_51b 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Ù&
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_52a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_52a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_52b77 6
.776 7
BadSink777 >
(77> ?
data77? C
)77D E
;77E F
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
intDD 
dataDD 
;DD 
dataFF 
=FF 
$numFF 
;FF :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_52bGG 6
.GG6 7
GoodG2BSinkGG7 B
(GGB C
dataGGC G
)GGH I
;GGI J
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{OO 	
tryQQ 
{RR 
stringTT 
stringNumberTT #
=TT$ %
ConsoleTT& -
.TT- .
ReadLineTT. 6
(TT6 7
)TT7 8
;TT8 9
ifUU 
(UU 
stringNumberUU  
!=UU! #
nullUU$ (
)UU( )
{VV 
tryWW 
{XX 
dataYY 
=YY 
intYY "
.YY" #
ParseYY# (
(YY( )
stringNumberYY) 5
.YY5 6
TrimYY6 :
(YY: ;
)YY; <
)YY< =
;YY= >
}ZZ 
catch[[ 
([[ 
FormatException[[ )
exceptNumberFormat[[* <
)[[< =
{\\ 
IO]] 
.]] 
Logger]] !
.]]! "
Log]]" %
(]]% &
NLog]]& *
.]]* +
LogLevel]]+ 3
.]]3 4
Warn]]4 8
,]]8 9
exceptNumberFormat]]: L
,]]L M
$str	]]N Ä
)
]]Ä Å
;
]]Å Ç
}^^ 
}__ 
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptIOcc2 :
,cc: ;
$strcc< W
)ccW X
;ccX Y
}dd 
}ee 	:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_52bff 6
.ff6 7
GoodB2GSinkff7 B
(ffB C
dataffC G
)ffH I
;ffI J
}gg 
}ii 
}jj Ä
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_52b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_52b 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_52c 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_52c&& 6
.&&6 7
GoodG2BSink&&7 B
(&&B C
data&&C G
)&&H I
;&&I J
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_52c,, 6
.,,6 7
GoodB2GSink,,7 B
(,,B C
data,,C G
),,H I
;,,I J
}-- 
}// 
}00 Ë
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_52c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_52c 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Ù&
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_53a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53b77 6
.776 7
BadSink777 >
(77> ?
data77? C
)77D E
;77E F
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
intDD 
dataDD 
;DD 
dataFF 
=FF 
$numFF 
;FF :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53bGG 6
.GG6 7
GoodG2BSinkGG7 B
(GGB C
dataGGC G
)GGH I
;GGI J
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{OO 	
tryQQ 
{RR 
stringTT 
stringNumberTT #
=TT$ %
ConsoleTT& -
.TT- .
ReadLineTT. 6
(TT6 7
)TT7 8
;TT8 9
ifUU 
(UU 
stringNumberUU  
!=UU! #
nullUU$ (
)UU( )
{VV 
tryWW 
{XX 
dataYY 
=YY 
intYY "
.YY" #
ParseYY# (
(YY( )
stringNumberYY) 5
.YY5 6
TrimYY6 :
(YY: ;
)YY; <
)YY< =
;YY= >
}ZZ 
catch[[ 
([[ 
FormatException[[ )
exceptNumberFormat[[* <
)[[< =
{\\ 
IO]] 
.]] 
Logger]] !
.]]! "
Log]]" %
(]]% &
NLog]]& *
.]]* +
LogLevel]]+ 3
.]]3 4
Warn]]4 8
,]]8 9
exceptNumberFormat]]: L
,]]L M
$str	]]N Ä
)
]]Ä Å
;
]]Å Ç
}^^ 
}__ 
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptIOcc2 :
,cc: ;
$strcc< W
)ccW X
;ccX Y
}dd 
}ee 	:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53bff 6
.ff6 7
GoodB2GSinkff7 B
(ffB C
dataffC G
)ffH I
;ffI J
}gg 
}ii 
}jj Ä
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_53b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53b 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53c 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53c&& 6
.&&6 7
GoodG2BSink&&7 B
(&&B C
data&&C G
)&&H I
;&&I J
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53c,, 6
.,,6 7
GoodB2GSink,,7 B
(,,B C
data,,C G
),,H I
;,,I J
}-- 
}// 
}00 Ä
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_53c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53c 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53d 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53d&& 6
.&&6 7
GoodG2BSink&&7 B
(&&B C
data&&C G
)&&H I
;&&I J
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53d,, 6
.,,6 7
GoodB2GSink,,7 B
(,,B C
data,,C G
),,H I
;,,I J
}-- 
}// 
}00 Ë
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_53d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53d 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Ù&
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_54a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54b77 6
.776 7
BadSink777 >
(77> ?
data77? C
)77D E
;77E F
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
intDD 
dataDD 
;DD 
dataFF 
=FF 
$numFF 
;FF :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54bGG 6
.GG6 7
GoodG2BSinkGG7 B
(GGB C
dataGGC G
)GGH I
;GGI J
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{OO 	
tryQQ 
{RR 
stringTT 
stringNumberTT #
=TT$ %
ConsoleTT& -
.TT- .
ReadLineTT. 6
(TT6 7
)TT7 8
;TT8 9
ifUU 
(UU 
stringNumberUU  
!=UU! #
nullUU$ (
)UU( )
{VV 
tryWW 
{XX 
dataYY 
=YY 
intYY "
.YY" #
ParseYY# (
(YY( )
stringNumberYY) 5
.YY5 6
TrimYY6 :
(YY: ;
)YY; <
)YY< =
;YY= >
}ZZ 
catch[[ 
([[ 
FormatException[[ )
exceptNumberFormat[[* <
)[[< =
{\\ 
IO]] 
.]] 
Logger]] !
.]]! "
Log]]" %
(]]% &
NLog]]& *
.]]* +
LogLevel]]+ 3
.]]3 4
Warn]]4 8
,]]8 9
exceptNumberFormat]]: L
,]]L M
$str	]]N Ä
)
]]Ä Å
;
]]Å Ç
}^^ 
}__ 
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptIOcc2 :
,cc: ;
$strcc< W
)ccW X
;ccX Y
}dd 
}ee 	:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54bff 6
.ff6 7
GoodB2GSinkff7 B
(ffB C
dataffC G
)ffH I
;ffI J
}gg 
}ii 
}jj Ä
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_54b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54b 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54c 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54c&& 6
.&&6 7
GoodG2BSink&&7 B
(&&B C
data&&C G
)&&H I
;&&I J
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54c,, 6
.,,6 7
GoodB2GSink,,7 B
(,,B C
data,,C G
),,H I
;,,I J
}-- 
}// 
}00 Ä
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_54c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54c 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54d 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54d&& 6
.&&6 7
GoodG2BSink&&7 B
(&&B C
data&&C G
)&&H I
;&&I J
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54d,, 6
.,,6 7
GoodB2GSink,,7 B
(,,B C
data,,C G
),,H I
;,,I J
}-- 
}// 
}00 Ä
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_54d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54d 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54e 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54e&& 6
.&&6 7
GoodG2BSink&&7 B
(&&B C
data&&C G
)&&H I
;&&I J
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54e,, 6
.,,6 7
GoodB2GSink,,7 B
(,,B C
data,,C G
),,H I
;,,I J
}-- 
}// 
}00 Ë
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_54e.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54e 4
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< ˝
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_61a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_61a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
= :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_61b A
.A B
	BadSourceB K
(K L
)L M
;M N
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
GoodB2G(( 
((( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
),,  !
{-- 
int.. 
data.. 
=.. :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_61b.. A
...A B
GoodG2BSource..B O
(..O P
)..P Q
;..Q R
IO11 

.11
 
	WriteLine11 
(11 
$str11 
+11 
data11 "
+11# $
$str11% *
+11+ ,
(11- .
$num11. 1
%112 3
data114 8
)118 9
+11: ;
$str11< @
)11@ A
;11A B
}22 
private55 
static55 
void55 
GoodB2G55 
(55  
)55  !
{66 
int77 
data77 
=77 :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_61b77 A
.77A B
GoodB2GSource77B O
(77O P
)77P Q
;77Q R
if99 

(99 
data99 
!=99 
$num99 
)99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; 
+;;  !
data;;" &
+;;' (
$str;;) .
+;;/ 0
(;;1 2
$num;;2 5
%;;6 7
data;;8 <
);;< =
+;;> ?
$str;;@ D
);;D E
;;;E F
}<< 	
else== 
{>> 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? @
)??@ A
;??A B
}@@ 	
}AA 
}CC 
}DD ¶"
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_61b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_61b 4
{ 
public 

static 
int 
	BadSource 
(  
)  !
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	
return77 
data77 
;77 
}88 
public== 

static== 
int== 
GoodG2BSource== #
(==# $
)==$ %
{>> 
int?? 
data?? 
;?? 
dataAA 
=AA 
$numAA 
;AA 
returnBB 
dataBB 
;BB 
}CC 
publicFF 

staticFF 
intFF 
GoodB2GSourceFF #
(FF# $
)FF$ %
{GG 
intHH 
dataHH 
;HH 
dataII 
=II 
intII 
.II 
MinValueII 
;II 
{JJ 	
tryLL 
{MM 
stringOO 
stringNumberOO #
=OO$ %
ConsoleOO& -
.OO- .
ReadLineOO. 6
(OO6 7
)OO7 8
;OO8 9
ifPP 
(PP 
stringNumberPP  
!=PP! #
nullPP$ (
)PP( )
{QQ 
tryRR 
{SS 
dataTT 
=TT 
intTT "
.TT" #
ParseTT# (
(TT( )
stringNumberTT) 5
.TT5 6
TrimTT6 :
(TT: ;
)TT; <
)TT< =
;TT= >
}UU 
catchVV 
(VV 
FormatExceptionVV )
exceptNumberFormatVV* <
)VV< =
{WW 
IOXX 
.XX 
LoggerXX !
.XX! "
LogXX" %
(XX% &
NLogXX& *
.XX* +
LogLevelXX+ 3
.XX3 4
WarnXX4 8
,XX8 9
exceptNumberFormatXX: L
,XXL M
$str	XXN Ä
)
XXÄ Å
;
XXÅ Ç
}YY 
}ZZ 
}[[ 
catch\\ 
(\\ 
IOException\\ 
exceptIO\\ '
)\\' (
{]] 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
exceptIO^^2 :
,^^: ;
$str^^< W
)^^W X
;^^X Y
}__ 
}`` 	
returnaa 
dataaa 
;aa 
}bb 
}dd 
}ee ≤.
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_66a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_66a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	
int77 
[77 
]77 
	dataArray77 
=77 
new77 
int77 !
[77! "
$num77" #
]77# $
;77$ %
	dataArray88 
[88 
$num88 
]88 
=88 
data88 
;88 :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_66b99 6
.996 7
BadSink997 >
(99> ?
	dataArray99? H
)99J K
;99K L
}:: 
public== 

override== 
void== 
Good== 
(== 
)== 
{>> 
GoodG2B?? 
(?? 
)?? 
;?? 
GoodB2G@@ 
(@@ 
)@@ 
;@@ 
}AA 
privateDD 
staticDD 
voidDD 
GoodG2BDD 
(DD  
)DD  !
{EE 
intFF 
dataFF 
;FF 
dataHH 
=HH 
$numHH 
;HH 
intII 
[II 
]II 
	dataArrayII 
=II 
newII 
intII !
[II! "
$numII" #
]II# $
;II$ %
	dataArrayJJ 
[JJ 
$numJJ 
]JJ 
=JJ 
dataJJ 
;JJ :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_66bKK 6
.KK6 7
GoodG2BSinkKK7 B
(KKB C
	dataArrayKKC L
)KKN O
;KKO P
}LL 
privateOO 
staticOO 
voidOO 
GoodB2GOO 
(OO  
)OO  !
{PP 
intQQ 
dataQQ 
;QQ 
dataRR 
=RR 
intRR 
.RR 
MinValueRR 
;RR 
{SS 	
tryUU 
{VV 
stringXX 
stringNumberXX #
=XX$ %
ConsoleXX& -
.XX- .
ReadLineXX. 6
(XX6 7
)XX7 8
;XX8 9
ifYY 
(YY 
stringNumberYY  
!=YY! #
nullYY$ (
)YY( )
{ZZ 
try[[ 
{\\ 
data]] 
=]] 
int]] "
.]]" #
Parse]]# (
(]]( )
stringNumber]]) 5
.]]5 6
Trim]]6 :
(]]: ;
)]]; <
)]]< =
;]]= >
}^^ 
catch__ 
(__ 
FormatException__ )
exceptNumberFormat__* <
)__< =
{`` 
IOaa 
.aa 
Loggeraa !
.aa! "
Logaa" %
(aa% &
NLogaa& *
.aa* +
LogLevelaa+ 3
.aa3 4
Warnaa4 8
,aa8 9
exceptNumberFormataa: L
,aaL M
$str	aaN Ä
)
aaÄ Å
;
aaÅ Ç
}bb 
}cc 
}dd 
catchee 
(ee 
IOExceptionee 
exceptIOee '
)ee' (
{ff 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptIOgg2 :
,gg: ;
$strgg< W
)ggW X
;ggX Y
}hh 
}ii 	
intjj 
[jj 
]jj 
	dataArrayjj 
=jj 
newjj 
intjj !
[jj! "
$numjj" #
]jj# $
;jj$ %
	dataArraykk 
[kk 
$numkk 
]kk 
=kk 
datakk 
;kk :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_66bll 6
.ll6 7
GoodB2GSinkll7 B
(llB C
	dataArrayllC L
)llN O
;llO P
}mm 
}oo 
}pp È
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_66b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_66b 4
{ 
public 

static 
void 
BadSink 
( 
int "
[" #
]# $
	dataArray% .
)/ 0
{ 
int 
data 
= 
	dataArray 
[ 
$num 
] 
;  
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
int''# &
[''& '
]''' (
	dataArray'') 2
)''3 4
{(( 
int)) 
data)) 
=)) 
	dataArray)) 
[)) 
$num)) 
])) 
;))  
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
int00# &
[00& '
]00' (
	dataArray00) 2
)003 4
{11 
int22 
data22 
=22 
	dataArray22 
[22 
$num22 
]22 
;22  
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ˇ.
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_67a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_67a 4
:5 6
AbstractTestCase7 G
{ 
public 

class 
	Container 
{ 
public 
int 
containerOne 
;  
} 
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
int## 
data## 
;## 
data$$ 
=$$ 
int$$ 
.$$ 
MinValue$$ 
;$$ 
{%% 	
try'' 
{(( 
string** 
stringNumber** #
=**$ %
Console**& -
.**- .
ReadLine**. 6
(**6 7
)**7 8
;**8 9
if++ 
(++ 
stringNumber++  
!=++! #
null++$ (
)++( )
{,, 
try-- 
{.. 
data// 
=// 
int// "
.//" #
Parse//# (
(//( )
stringNumber//) 5
.//5 6
Trim//6 :
(//: ;
)//; <
)//< =
;//= >
}00 
catch11 
(11 
FormatException11 )
exceptNumberFormat11* <
)11< =
{22 
IO33 
.33 
Logger33 !
.33! "
Log33" %
(33% &
NLog33& *
.33* +
LogLevel33+ 3
.333 4
Warn334 8
,338 9
exceptNumberFormat33: L
,33L M
$str	33N Ä
)
33Ä Å
;
33Å Ç
}44 
}55 
}66 
catch77 
(77 
IOException77 
exceptIO77 '
)77' (
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
exceptIO992 :
,99: ;
$str99< W
)99W X
;99X Y
}:: 
};; 	
	Container<< 
dataContainer<< 
=<<  !
new<<" %
	Container<<& /
(<</ 0
)<<0 1
;<<1 2
dataContainer== 
.== 
containerOne== "
===# $
data==% )
;==) *:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_67b>> 6
.>>6 7
BadSink>>7 >
(>>> ?
dataContainer>>? L
)>>N O
;>>O P
}?? 
publicBB 

overrideBB 
voidBB 
GoodBB 
(BB 
)BB 
{CC 
GoodG2BDD 
(DD 
)DD 
;DD 
GoodB2GEE 
(EE 
)EE 
;EE 
}FF 
privateII 
staticII 
voidII 
GoodG2BII 
(II  
)II  !
{JJ 
intKK 
dataKK 
;KK 
dataMM 
=MM 
$numMM 
;MM 
	ContainerNN 
dataContainerNN 
=NN  !
newNN" %
	ContainerNN& /
(NN/ 0
)NN0 1
;NN1 2
dataContainerOO 
.OO 
containerOneOO "
=OO# $
dataOO% )
;OO) *:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_67bPP 6
.PP6 7
GoodG2BSinkPP7 B
(PPB C
dataContainerPPC P
)PPR S
;PPS T
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
intVV 
dataVV 
;VV 
dataWW 
=WW 
intWW 
.WW 
MinValueWW 
;WW 
{XX 	
tryZZ 
{[[ 
string]] 
stringNumber]] #
=]]$ %
Console]]& -
.]]- .
ReadLine]]. 6
(]]6 7
)]]7 8
;]]8 9
if^^ 
(^^ 
stringNumber^^  
!=^^! #
null^^$ (
)^^( )
{__ 
try`` 
{aa 
databb 
=bb 
intbb "
.bb" #
Parsebb# (
(bb( )
stringNumberbb) 5
.bb5 6
Trimbb6 :
(bb: ;
)bb; <
)bb< =
;bb= >
}cc 
catchdd 
(dd 
FormatExceptiondd )
exceptNumberFormatdd* <
)dd< =
{ee 
IOff 
.ff 
Loggerff !
.ff! "
Logff" %
(ff% &
NLogff& *
.ff* +
LogLevelff+ 3
.ff3 4
Warnff4 8
,ff8 9
exceptNumberFormatff: L
,ffL M
$str	ffN Ä
)
ffÄ Å
;
ffÅ Ç
}gg 
}hh 
}ii 
catchjj 
(jj 
IOExceptionjj 
exceptIOjj '
)jj' (
{kk 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptIOll2 :
,ll: ;
$strll< W
)llW X
;llX Y
}mm 
}nn 	
	Containeroo 
dataContaineroo 
=oo  !
newoo" %
	Containeroo& /
(oo/ 0
)oo0 1
;oo1 2
dataContainerpp 
.pp 
containerOnepp "
=pp# $
datapp% )
;pp) *:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_67bqq 6
.qq6 7
GoodB2GSinkqq7 B
(qqB C
dataContainerqqC P
)qqR S
;qqS T
}rr 
}tt 
}uu Ö
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_67b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_67b 4
{ 
public 

static 
void 
BadSink 
( :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_67a M
.M N
	ContainerN W
dataContainerX e
)f g
{ 
int 
data 
= 
dataContainer  
.  !
containerOne! -
;- .
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_67a''# Q
.''Q R
	Container''R [
dataContainer''\ i
)''j k
{(( 
int)) 
data)) 
=)) 
dataContainer))  
.))  !
containerOne))! -
;))- .
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_67a00# Q
.00Q R
	Container00R [
dataContainer00\ i
)00j k
{11 
int22 
data22 
=22 
dataContainer22  
.22  !
containerOne22! -
;22- .
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ™&
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_68a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_68a 4
:5 6
AbstractTestCase7 G
{ 
public 

static 
int 
data 
; 
public 

override 
void 
Bad 
( 
) 
{ 
data   
=   
int   
.   
MinValue   
;   
{!! 	
try## 
{$$ 
string&& 
stringNumber&& #
=&&$ %
Console&&& -
.&&- .
ReadLine&&. 6
(&&6 7
)&&7 8
;&&8 9
if'' 
('' 
stringNumber''  
!=''! #
null''$ (
)''( )
{(( 
try)) 
{** 
data++ 
=++ 
int++ "
.++" #
Parse++# (
(++( )
stringNumber++) 5
.++5 6
Trim++6 :
(++: ;
)++; <
)++< =
;++= >
},, 
catch-- 
(-- 
FormatException-- )
exceptNumberFormat--* <
)--< =
{.. 
IO// 
.// 
Logger// !
.//! "
Log//" %
(//% &
NLog//& *
.//* +
LogLevel//+ 3
.//3 4
Warn//4 8
,//8 9
exceptNumberFormat//: L
,//L M
$str	//N Ä
)
//Ä Å
;
//Å Ç
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_68b88 6
.886 7
BadSink887 >
(88> ?
)88? @
;88@ A
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
)<< 
{== 
GoodG2B>> 
(>> 
)>> 
;>> 
GoodB2G?? 
(?? 
)?? 
;?? 
}@@ 
privateCC 
staticCC 
voidCC 
GoodG2BCC 
(CC  
)CC  !
{DD 
dataFF 
=FF 
$numFF 
;FF :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_68bGG 6
.GG6 7
GoodG2BSinkGG7 B
(GGB C
)GGC D
;GGD E
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
)KK  !
{LL 
dataMM 
=MM 
intMM 
.MM 
MinValueMM 
;MM 
{NN 	
tryPP 
{QQ 
stringSS 
stringNumberSS #
=SS$ %
ConsoleSS& -
.SS- .
ReadLineSS. 6
(SS6 7
)SS7 8
;SS8 9
ifTT 
(TT 
stringNumberTT  
!=TT! #
nullTT$ (
)TT( )
{UU 
tryVV 
{WW 
dataXX 
=XX 
intXX "
.XX" #
ParseXX# (
(XX( )
stringNumberXX) 5
.XX5 6
TrimXX6 :
(XX: ;
)XX; <
)XX< =
;XX= >
}YY 
catchZZ 
(ZZ 
FormatExceptionZZ )
exceptNumberFormatZZ* <
)ZZ< =
{[[ 
IO\\ 
.\\ 
Logger\\ !
.\\! "
Log\\" %
(\\% &
NLog\\& *
.\\* +
LogLevel\\+ 3
.\\3 4
Warn\\4 8
,\\8 9
exceptNumberFormat\\: L
,\\L M
$str	\\N Ä
)
\\Ä Å
;
\\Å Ç
}]] 
}^^ 
}__ 
catch`` 
(`` 
IOException`` 
exceptIO`` '
)``' (
{aa 
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb "
.bb" #
LogLevelbb# +
.bb+ ,
Warnbb, 0
,bb0 1
exceptIObb2 :
,bb: ;
$strbb< W
)bbW X
;bbX Y
}cc 
}dd 	:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_68bee 6
.ee6 7
GoodB2GSinkee7 B
(eeB C
)eeC D
;eeD E
}ff 
}hh 
}ii Ÿ
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_68b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_68b 4
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
int 
data 
= :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_68a A
.A B
dataB F
;F G
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
)''# $
{(( 
int)) 
data)) 
=)) :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_68a)) A
.))A B
data))B F
;))F G
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
)00# $
{11 
int22 
data22 
=22 :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_68a22 A
.22A B
data22B F
;22F G
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ≤(
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_71a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_71a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_71b77 6
.776 7
BadSink777 >
(77> ?
(77? @
Object77@ F
)77F G
data77G K
)77M N
;77N O
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
staticBB 
voidBB 
GoodG2BBB 
(BB  
)BB  !
{CC 
intDD 
dataDD 
;DD 
dataFF 
=FF 
$numFF 
;FF :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_71bGG 6
.GG6 7
GoodG2BSinkGG7 B
(GGB C
(GGC D
ObjectGGD J
)GGJ K
dataGGK O
)GGQ R
;GGR S
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
)KK  !
{LL 
intMM 
dataMM 
;MM 
dataNN 
=NN 
intNN 
.NN 
MinValueNN 
;NN 
{OO 	
tryQQ 
{RR 
stringTT 
stringNumberTT #
=TT$ %
ConsoleTT& -
.TT- .
ReadLineTT. 6
(TT6 7
)TT7 8
;TT8 9
ifUU 
(UU 
stringNumberUU  
!=UU! #
nullUU$ (
)UU( )
{VV 
tryWW 
{XX 
dataYY 
=YY 
intYY "
.YY" #
ParseYY# (
(YY( )
stringNumberYY) 5
.YY5 6
TrimYY6 :
(YY: ;
)YY; <
)YY< =
;YY= >
}ZZ 
catch[[ 
([[ 
FormatException[[ )
exceptNumberFormat[[* <
)[[< =
{\\ 
IO]] 
.]] 
Logger]] !
.]]! "
Log]]" %
(]]% &
NLog]]& *
.]]* +
LogLevel]]+ 3
.]]3 4
Warn]]4 8
,]]8 9
exceptNumberFormat]]: L
,]]L M
$str	]]N Ä
)
]]Ä Å
;
]]Å Ç
}^^ 
}__ 
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptIOcc2 :
,cc: ;
$strcc< W
)ccW X
;ccX Y
}dd 
}ee 	:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_71bff 6
.ff6 7
GoodB2GSinkff7 B
(ffB C
(ffC D
ObjectffD J
)ffJ K
dataffK O
)ffQ R
;ffR S
}gg 
}ii 
}jj õ
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_71b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_71b 4
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
int 
data 
= 
( 
int 
) 

dataObject "
;" #
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
Object((# )

dataObject((* 4
)((5 6
{)) 
int** 
data** 
=** 
(** 
int** 
)** 

dataObject** "
;**" #
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
Object11# )

dataObject11* 4
)115 6
{22 
int33 
data33 
=33 
(33 
int33 
)33 

dataObject33 "
;33" #
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ¢6
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_72a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_72a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{!! 	
try## 
{$$ 
string&& 
stringNumber&& #
=&&$ %
Console&&& -
.&&- .
ReadLine&&. 6
(&&6 7
)&&7 8
;&&8 9
if'' 
('' 
stringNumber''  
!=''! #
null''$ (
)''( )
{(( 
try)) 
{** 
data++ 
=++ 
int++ "
.++" #
Parse++# (
(++( )
stringNumber++) 5
.++5 6
Trim++6 :
(++: ;
)++; <
)++< =
;++= >
},, 
catch-- 
(-- 
FormatException-- )
exceptNumberFormat--* <
)--< =
{.. 
IO// 
.// 
Logger// !
.//! "
Log//" %
(//% &
NLog//& *
.//* +
LogLevel//+ 3
.//3 4
Warn//4 8
,//8 9
exceptNumberFormat//: L
,//L M
$str	//N Ä
)
//Ä Å
;
//Å Ç
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	
	Hashtable88 
dataHashtable88 
=88  !
new88" %
	Hashtable88& /
(88/ 0
$num880 1
)881 2
;882 3
dataHashtable99 
.99 
Add99 
(99 
$num99 
,99 
data99 !
)99! "
;99" #
dataHashtable:: 
.:: 
Add:: 
(:: 
$num:: 
,:: 
data:: !
)::! "
;::" #
dataHashtable;; 
.;; 
Add;; 
(;; 
$num;; 
,;; 
data;; !
);;! "
;;;" #:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_72b<< 6
.<<6 7
BadSink<<7 >
(<<> ?
dataHashtable<<? L
)<<N O
;<<O P
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
intII 
dataII 
;II 
dataKK 
=KK 
$numKK 
;KK 
	HashtableLL 
dataHashtableLL 
=LL  !
newLL" %
	HashtableLL& /
(LL/ 0
$numLL0 1
)LL1 2
;LL2 3
dataHashtableMM 
.MM 
AddMM 
(MM 
$numMM 
,MM 
dataMM !
)MM! "
;MM" #
dataHashtableNN 
.NN 
AddNN 
(NN 
$numNN 
,NN 
dataNN !
)NN! "
;NN" #
dataHashtableOO 
.OO 
AddOO 
(OO 
$numOO 
,OO 
dataOO !
)OO! "
;OO" #:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_72bPP 6
.PP6 7
GoodG2BSinkPP7 B
(PPB C
dataHashtablePPC P
)PPR S
;PPS T
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
intVV 
dataVV 
;VV 
dataWW 
=WW 
intWW 
.WW 
MinValueWW 
;WW 
{XX 	
tryZZ 
{[[ 
string]] 
stringNumber]] #
=]]$ %
Console]]& -
.]]- .
ReadLine]]. 6
(]]6 7
)]]7 8
;]]8 9
if^^ 
(^^ 
stringNumber^^  
!=^^! #
null^^$ (
)^^( )
{__ 
try`` 
{aa 
databb 
=bb 
intbb "
.bb" #
Parsebb# (
(bb( )
stringNumberbb) 5
.bb5 6
Trimbb6 :
(bb: ;
)bb; <
)bb< =
;bb= >
}cc 
catchdd 
(dd 
FormatExceptiondd )
exceptNumberFormatdd* <
)dd< =
{ee 
IOff 
.ff 
Loggerff !
.ff! "
Logff" %
(ff% &
NLogff& *
.ff* +
LogLevelff+ 3
.ff3 4
Warnff4 8
,ff8 9
exceptNumberFormatff: L
,ffL M
$str	ffN Ä
)
ffÄ Å
;
ffÅ Ç
}gg 
}hh 
}ii 
catchjj 
(jj 
IOExceptionjj 
exceptIOjj '
)jj' (
{kk 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptIOll2 :
,ll: ;
$strll< W
)llW X
;llX Y
}mm 
}nn 	
	Hashtableoo 
dataHashtableoo 
=oo  !
newoo" %
	Hashtableoo& /
(oo/ 0
$numoo0 1
)oo1 2
;oo2 3
dataHashtablepp 
.pp 
Addpp 
(pp 
$numpp 
,pp 
datapp !
)pp! "
;pp" #
dataHashtableqq 
.qq 
Addqq 
(qq 
$numqq 
,qq 
dataqq !
)qq! "
;qq" #
dataHashtablerr 
.rr 
Addrr 
(rr 
$numrr 
,rr 
datarr !
)rr! "
;rr" #:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_72bss 6
.ss6 7
GoodB2GSinkss7 B
(ssB C
dataHashtablessC P
)ssR S
;ssS T
}tt 
}vv 
}ww ∆
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_72b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_72b 4
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
int 
data 
= 
( 
int 
) 
dataHashtable &
[& '
$num' (
]( )
;) *
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
	Hashtable((# ,
dataHashtable((- :
)((; <
{)) 
int** 
data** 
=** 
(** 
int** 
)** 
dataHashtable** &
[**& '
$num**' (
]**( )
;**) *
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
	Hashtable11# ,
dataHashtable11- :
)11; <
{22 
int33 
data33 
=33 
(33 
int33 
)33 
dataHashtable33 &
[33& '
$num33' (
]33( )
;33) *
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ñ6
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_73a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_73a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{!! 	
try## 
{$$ 
string&& 
stringNumber&& #
=&&$ %
Console&&& -
.&&- .
ReadLine&&. 6
(&&6 7
)&&7 8
;&&8 9
if'' 
('' 
stringNumber''  
!=''! #
null''$ (
)''( )
{(( 
try)) 
{** 
data++ 
=++ 
int++ "
.++" #
Parse++# (
(++( )
stringNumber++) 5
.++5 6
Trim++6 :
(++: ;
)++; <
)++< =
;++= >
},, 
catch-- 
(-- 
FormatException-- )
exceptNumberFormat--* <
)--< =
{.. 
IO// 
.// 
Logger// !
.//! "
Log//" %
(//% &
NLog//& *
.//* +
LogLevel//+ 3
.//3 4
Warn//4 8
,//8 9
exceptNumberFormat//: L
,//L M
$str	//N Ä
)
//Ä Å
;
//Å Ç
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	

LinkedList88 
<88 
int88 
>88 
dataLinkedList88 &
=88' (
new88) ,

LinkedList88- 7
<887 8
int888 ;
>88; <
(88< =
)88= >
;88> ?
dataLinkedList99 
.99 
AddLast99 
(99 
data99 #
)99# $
;99$ %
dataLinkedList:: 
.:: 
AddLast:: 
(:: 
data:: #
)::# $
;::$ %
dataLinkedList;; 
.;; 
AddLast;; 
(;; 
data;; #
);;# $
;;;$ %:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_73b<< 6
.<<6 7
BadSink<<7 >
(<<> ?
dataLinkedList<<? M
)<<O P
;<<P Q
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
intII 
dataII 
;II 
dataKK 
=KK 
$numKK 
;KK 

LinkedListLL 
<LL 
intLL 
>LL 
dataLinkedListLL &
=LL' (
newLL) ,

LinkedListLL- 7
<LL7 8
intLL8 ;
>LL; <
(LL< =
)LL= >
;LL> ?
dataLinkedListMM 
.MM 
AddLastMM 
(MM 
dataMM #
)MM# $
;MM$ %
dataLinkedListNN 
.NN 
AddLastNN 
(NN 
dataNN #
)NN# $
;NN$ %
dataLinkedListOO 
.OO 
AddLastOO 
(OO 
dataOO #
)OO# $
;OO$ %:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_73bPP 6
.PP6 7
GoodG2BSinkPP7 B
(PPB C
dataLinkedListPPC Q
)PPS T
;PPT U
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
intVV 
dataVV 
;VV 
dataWW 
=WW 
intWW 
.WW 
MinValueWW 
;WW 
{XX 	
tryZZ 
{[[ 
string]] 
stringNumber]] #
=]]$ %
Console]]& -
.]]- .
ReadLine]]. 6
(]]6 7
)]]7 8
;]]8 9
if^^ 
(^^ 
stringNumber^^  
!=^^! #
null^^$ (
)^^( )
{__ 
try`` 
{aa 
databb 
=bb 
intbb "
.bb" #
Parsebb# (
(bb( )
stringNumberbb) 5
.bb5 6
Trimbb6 :
(bb: ;
)bb; <
)bb< =
;bb= >
}cc 
catchdd 
(dd 
FormatExceptiondd )
exceptNumberFormatdd* <
)dd< =
{ee 
IOff 
.ff 
Loggerff !
.ff! "
Logff" %
(ff% &
NLogff& *
.ff* +
LogLevelff+ 3
.ff3 4
Warnff4 8
,ff8 9
exceptNumberFormatff: L
,ffL M
$str	ffN Ä
)
ffÄ Å
;
ffÅ Ç
}gg 
}hh 
}ii 
catchjj 
(jj 
IOExceptionjj 
exceptIOjj '
)jj' (
{kk 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptIOll2 :
,ll: ;
$strll< W
)llW X
;llX Y
}mm 
}nn 	

LinkedListoo 
<oo 
intoo 
>oo 
dataLinkedListoo &
=oo' (
newoo) ,

LinkedListoo- 7
<oo7 8
intoo8 ;
>oo; <
(oo< =
)oo= >
;oo> ?
dataLinkedListpp 
.pp 
AddLastpp 
(pp 
datapp #
)pp# $
;pp$ %
dataLinkedListqq 
.qq 
AddLastqq 
(qq 
dataqq #
)qq# $
;qq$ %
dataLinkedListrr 
.rr 
AddLastrr 
(rr 
datarr #
)rr# $
;rr$ %:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_73bss 6
.ss6 7
GoodB2GSinkss7 B
(ssB C
dataLinkedListssC Q
)ssS T
;ssT U
}tt 
}vv 
}ww à
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_73b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_73b 4
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
int* -
>- .
dataLinkedList/ =
)> ?
{ 
int 
data 
= 
dataLinkedList !
.! "
Last" &
.& '
Value' ,
;, -
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #

LinkedList((# -
<((- .
int((. 1
>((1 2
dataLinkedList((3 A
)((B C
{)) 
int** 
data** 
=** 
dataLinkedList** !
.**! "
Last**" &
.**& '
Value**' ,
;**, -
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

LinkedList11# -
<11- .
int11. 1
>111 2
dataLinkedList113 A
)11B C
{22 
int33 
data33 
=33 
dataLinkedList33 !
.33! "
Last33" &
.33& '
Value33' ,
;33, -
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ €9
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_74a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_74a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data   
=   
int   
.   
MinValue   
;   
{!! 	
try## 
{$$ 
string&& 
stringNumber&& #
=&&$ %
Console&&& -
.&&- .
ReadLine&&. 6
(&&6 7
)&&7 8
;&&8 9
if'' 
('' 
stringNumber''  
!=''! #
null''$ (
)''( )
{(( 
try)) 
{** 
data++ 
=++ 
int++ "
.++" #
Parse++# (
(++( )
stringNumber++) 5
.++5 6
Trim++6 :
(++: ;
)++; <
)++< =
;++= >
},, 
catch-- 
(-- 
FormatException-- )
exceptNumberFormat--* <
)--< =
{.. 
IO// 
.// 
Logger// !
.//! "
Log//" %
(//% &
NLog//& *
.//* +
LogLevel//+ 3
.//3 4
Warn//4 8
,//8 9
exceptNumberFormat//: L
,//L M
$str	//N Ä
)
//Ä Å
;
//Å Ç
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	

Dictionary88 
<88 
int88 
,88 
int88 
>88 
dataDictionary88 *
=88+ ,
new88- 0

Dictionary881 ;
<88; <
int88< ?
,88? @
int88@ C
>88C D
(88D E
)88E F
;88F G
dataDictionary99 
.99 
Add99 
(99 
$num99 
,99 
data99 "
)99" #
;99# $
dataDictionary:: 
.:: 
Add:: 
(:: 
$num:: 
,:: 
data:: "
)::" #
;::# $
dataDictionary;; 
.;; 
Add;; 
(;; 
$num;; 
,;; 
data;; "
);;" #
;;;# $:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_74b<< 6
.<<6 7
BadSink<<7 >
(<<> ?
dataDictionary<<? M
)<<O P
;<<P Q
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
intII 
dataII 
;II 
dataKK 
=KK 
$numKK 
;KK 

DictionaryLL 
<LL 
intLL 
,LL 
intLL 
>LL 
dataDictionaryLL *
=LL+ ,
newLL- 0

DictionaryLL1 ;
<LL; <
intLL< ?
,LL? @
intLL@ C
>LLC D
(LLD E
)LLE F
;LLF G
dataDictionaryMM 
.MM 
AddMM 
(MM 
$numMM 
,MM 
dataMM "
)MM" #
;MM# $
dataDictionaryNN 
.NN 
AddNN 
(NN 
$numNN 
,NN 
dataNN "
)NN" #
;NN# $
dataDictionaryOO 
.OO 
AddOO 
(OO 
$numOO 
,OO 
dataOO "
)OO" #
;OO# $:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_74bPP 6
.PP6 7
GoodG2BSinkPP7 B
(PPB C
dataDictionaryPPC Q
)PPS T
;PPT U
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
intVV 
dataVV 
;VV 
dataWW 
=WW 
intWW 
.WW 
MinValueWW 
;WW 
{XX 	
tryZZ 
{[[ 
string]] 
stringNumber]] #
=]]$ %
Console]]& -
.]]- .
ReadLine]]. 6
(]]6 7
)]]7 8
;]]8 9
if^^ 
(^^ 
stringNumber^^  
!=^^! #
null^^$ (
)^^( )
{__ 
try`` 
{aa 
databb 
=bb 
intbb "
.bb" #
Parsebb# (
(bb( )
stringNumberbb) 5
.bb5 6
Trimbb6 :
(bb: ;
)bb; <
)bb< =
;bb= >
}cc 
catchdd 
(dd 
FormatExceptiondd )
exceptNumberFormatdd* <
)dd< =
{ee 
IOff 
.ff 
Loggerff !
.ff! "
Logff" %
(ff% &
NLogff& *
.ff* +
LogLevelff+ 3
.ff3 4
Warnff4 8
,ff8 9
exceptNumberFormatff: L
,ffL M
$str	ffN Ä
)
ffÄ Å
;
ffÅ Ç
}gg 
}hh 
}ii 
catchjj 
(jj 
IOExceptionjj 
exceptIOjj '
)jj' (
{kk 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptIOll2 :
,ll: ;
$strll< W
)llW X
;llX Y
}mm 
}nn 	

Dictionaryoo 
<oo 
intoo 
,oo 
intoo 
>oo 
dataDictionaryoo *
=oo+ ,
newoo- 0

Dictionaryoo1 ;
<oo; <
intoo< ?
,oo? @
intoo@ C
>ooC D
(ooD E
)ooE F
;ooF G
dataDictionarypp 
.pp 
Addpp 
(pp 
$numpp 
,pp 
datapp "
)pp" #
;pp# $
dataDictionaryqq 
.qq 
Addqq 
(qq 
$numqq 
,qq 
dataqq "
)qq" #
;qq# $
dataDictionaryrr 
.rr 
Addrr 
(rr 
$numrr 
,rr 
datarr "
)rr" #
;rr# $:
.CWE369_Divide_by_Zero__int_ReadLine_modulo_74bss 6
.ss6 7
GoodB2GSinkss7 B
(ssB C
dataDictionaryssC Q
)ssS T
;ssT U
}tt 
}vv 
}ww Ø
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_74b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_74b 4
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
int. 1
>1 2
dataDictionary3 A
)B C
{ 
int 
data 
= 
dataDictionary !
[! "
$num" #
]# $
;$ %
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( #
(((# $

Dictionary(($ .
<((. /
int((/ 2
,((2 3
int((3 6
>((6 7
dataDictionary((8 F
)((G H
{)) 
int** 
data** 
=** 
dataDictionary** !
[**! "
$num**" #
]**# $
;**$ %
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

Dictionary11# -
<11- .
int11. 1
,111 2
int112 5
>115 6
dataDictionary117 E
)11F G
{22 
int33 
data33 
=33 
dataDictionary33 !
[33! "
$num33" #
]33# $
;33$ %
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ¿S
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_75a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_75a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int   
data   
;   
data!! 
=!! 
int!! 
.!! 
MinValue!! 
;!! 
{"" 	
try$$ 
{%% 
string'' 
stringNumber'' #
=''$ %
Console''& -
.''- .
ReadLine''. 6
(''6 7
)''7 8
;''8 9
if(( 
((( 
stringNumber((  
!=((! #
null(($ (
)((( )
{)) 
try** 
{++ 
data,, 
=,, 
int,, "
.,," #
Parse,,# (
(,,( )
stringNumber,,) 5
.,,5 6
Trim,,6 :
(,,: ;
),,; <
),,< =
;,,= >
}-- 
catch.. 
(.. 
FormatException.. )
exceptNumberFormat..* <
)..< =
{// 
IO00 
.00 
Logger00 !
.00! "
Log00" %
(00% &
NLog00& *
.00* +
LogLevel00+ 3
.003 4
Warn004 8
,008 9
exceptNumberFormat00: L
,00L M
$str	00N Ä
)
00Ä Å
;
00Å Ç
}11 
}22 
}33 
catch44 
(44 
IOException44 
exceptIO44 '
)44' (
{55 
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 "
.66" #
LogLevel66# +
.66+ ,
Warn66, 0
,660 1
exceptIO662 :
,66: ;
$str66< W
)66W X
;66X Y
}77 
}88 	
byte:: 
[:: 
]:: 
dataSerialized:: 
=:: 
null::  $
;::$ %
try;; 
{<< 	
BinaryFormatter== 
bf== 
===  
new==! $
BinaryFormatter==% 4
(==4 5
)==5 6
;==6 7
using>> 
(>> 
var>> 
ms>> 
=>> 
new>> 
MemoryStream>>  ,
(>>, -
)>>- .
)>>. /
{?? 
bf@@ 
.@@ 
	Serialize@@ 
(@@ 
ms@@ 
,@@  
data@@! %
)@@% &
;@@& '
dataSerializedAA 
=AA  
msAA! #
.AA# $
ToArrayAA$ +
(AA+ ,
)AA, -
;AA- .
}BB :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_75bCC :
.CC: ;
BadSinkCC; B
(CCB C
dataSerializedCCC Q
)CCS T
;CCT U
}DD 	
catchEE 
(EE "
SerializationExceptionEE %
exceptSerializeEE& 5
)EE5 6
{FF 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
$strGG. X
,GGX Y
exceptSerializeGGZ i
)GGi j
;GGj k
}HH 	
}II 
publicLL 

overrideLL 
voidLL 
GoodLL 
(LL 
)LL 
{MM 
GoodG2BNN 
(NN 
)NN 
;NN 
GoodB2GOO 
(OO 
)OO 
;OO 
}PP 
privateSS 
staticSS 
voidSS 
GoodG2BSS 
(SS  
)SS  !
{TT 
intUU 
dataUU 
;UU 
dataVV 
=VV 
intVV 
.VV 
MinValueVV 
;VV 
{WW 	
tryYY 
{ZZ 
string\\ 
stringNumber\\ #
=\\$ %
Console\\& -
.\\- .
ReadLine\\. 6
(\\6 7
)\\7 8
;\\8 9
if]] 
(]] 
stringNumber]]  
!=]]! #
null]]$ (
)]]( )
{^^ 
try__ 
{`` 
dataaa 
=aa 
intaa "
.aa" #
Parseaa# (
(aa( )
stringNumberaa) 5
.aa5 6
Trimaa6 :
(aa: ;
)aa; <
)aa< =
;aa= >
}bb 
catchcc 
(cc 
FormatExceptioncc )
exceptNumberFormatcc* <
)cc< =
{dd 
IOee 
.ee 
Loggeree !
.ee! "
Logee" %
(ee% &
NLogee& *
.ee* +
LogLevelee+ 3
.ee3 4
Warnee4 8
,ee8 9
exceptNumberFormatee: L
,eeL M
$str	eeN Ä
)
eeÄ Å
;
eeÅ Ç
}ff 
}gg 
}hh 
catchii 
(ii 
IOExceptionii 
exceptIOii '
)ii' (
{jj 
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk "
.kk" #
LogLevelkk# +
.kk+ ,
Warnkk, 0
,kk0 1
exceptIOkk2 :
,kk: ;
$strkk< W
)kkW X
;kkX Y
}ll 
}mm 	
byteoo 
[oo 
]oo 
dataSerializedoo 
=oo 
nulloo  $
;oo$ %
trypp 
{qq 	
BinaryFormatterrr 
bfrr 
=rr  
newrr! $
BinaryFormatterrr% 4
(rr4 5
)rr5 6
;rr6 7
usingss 
(ss 
varss 
msss 
=ss 
newss 
MemoryStreamss  ,
(ss, -
)ss- .
)ss. /
{tt 
bfuu 
.uu 
	Serializeuu 
(uu 
msuu 
,uu  
datauu! %
)uu% &
;uu& '
dataSerializedvv 
=vv  
msvv! #
.vv# $
ToArrayvv$ +
(vv+ ,
)vv, -
;vv- .
}ww :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_75bxx :
.xx: ;
GoodG2BSinkxx; F
(xxF G
dataSerializedxxG U
)xxW X
;xxX Y
}yy 	
catchzz 
(zz "
SerializationExceptionzz %
exceptSerializezz& 5
)zz5 6
{{{ 	
IO|| 
.|| 
Logger|| 
.|| 
Log|| 
(|| 
NLog|| 
.|| 
LogLevel|| '
.||' (
Warn||( ,
,||, -
$str||. X
,||X Y
exceptSerialize||Z i
)||i j
;||j k
}}} 	
}~~ 
private
ÅÅ 
static
ÅÅ 
void
ÅÅ 
GoodB2G
ÅÅ 
(
ÅÅ  
)
ÅÅ  !
{
ÇÇ 
int
ÉÉ 
data
ÉÉ 
;
ÉÉ 
data
ÑÑ 
=
ÑÑ 
int
ÑÑ 
.
ÑÑ 
MinValue
ÑÑ 
;
ÑÑ 
{
ÖÖ 	
try
áá 
{
àà 
string
ää 
stringNumber
ää #
=
ää$ %
Console
ää& -
.
ää- .
ReadLine
ää. 6
(
ää6 7
)
ää7 8
;
ää8 9
if
ãã 
(
ãã 
stringNumber
ãã  
!=
ãã! #
null
ãã$ (
)
ãã( )
{
åå 
try
çç 
{
éé 
data
èè 
=
èè 
int
èè "
.
èè" #
Parse
èè# (
(
èè( )
stringNumber
èè) 5
.
èè5 6
Trim
èè6 :
(
èè: ;
)
èè; <
)
èè< =
;
èè= >
}
êê 
catch
ëë 
(
ëë 
FormatException
ëë ) 
exceptNumberFormat
ëë* <
)
ëë< =
{
íí 
IO
ìì 
.
ìì 
Logger
ìì !
.
ìì! "
Log
ìì" %
(
ìì% &
NLog
ìì& *
.
ìì* +
LogLevel
ìì+ 3
.
ìì3 4
Warn
ìì4 8
,
ìì8 9 
exceptNumberFormat
ìì: L
,
ììL M
$strììN Ä
)ììÄ Å
;ììÅ Ç
}
îî 
}
ïï 
}
ññ 
catch
óó 
(
óó 
IOException
óó 
exceptIO
óó '
)
óó' (
{
òò 
IO
ôô 
.
ôô 
Logger
ôô 
.
ôô 
Log
ôô 
(
ôô 
NLog
ôô "
.
ôô" #
LogLevel
ôô# +
.
ôô+ ,
Warn
ôô, 0
,
ôô0 1
exceptIO
ôô2 :
,
ôô: ;
$str
ôô< W
)
ôôW X
;
ôôX Y
}
öö 
}
õõ 	
byte
ùù 
[
ùù 
]
ùù 
dataSerialized
ùù 
=
ùù 
null
ùù  $
;
ùù$ %
try
ûû 
{
üü 	
BinaryFormatter
†† 
bf
†† 
=
††  
new
††! $
BinaryFormatter
††% 4
(
††4 5
)
††5 6
;
††6 7
using
°° 
(
°° 
var
°° 
ms
°° 
=
°° 
new
°° 
MemoryStream
°°  ,
(
°°, -
)
°°- .
)
°°. /
{
¢¢ 
bf
££ 
.
££ 
	Serialize
££ 
(
££ 
ms
££ 
,
££  
data
££! %
)
££% &
;
££& '
dataSerialized
§§ 
=
§§  
ms
§§! #
.
§§# $
ToArray
§§$ +
(
§§+ ,
)
§§, -
;
§§- .
}
•• <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_75b
¶¶ :
.
¶¶: ;
GoodB2GSink
¶¶; F
(
¶¶F G
dataSerialized
¶¶G U
)
¶¶W X
;
¶¶X Y
}
ßß 	
catch
®® 
(
®® $
SerializationException
®® %
exceptSerialize
®®& 5
)
®®5 6
{
©© 	
IO
™™ 
.
™™ 
Logger
™™ 
.
™™ 
Log
™™ 
(
™™ 
NLog
™™ 
.
™™ 
LogLevel
™™ '
.
™™' (
Warn
™™( ,
,
™™, -
$str
™™. X
,
™™X Y
exceptSerialize
™™Z i
)
™™i j
;
™™j k
}
´´ 	
}
¨¨ 
}ÆÆ 
}ØØ »5
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_75b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_75b 4
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
int## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
int)) 
))) 
binForm)) #
.))# $
Deserialize))$ /
())/ 0
	memStream))0 9
)))9 :
;)): ;
}** 
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
catch// 
(// "
SerializationException// %
exceptSerialize//& 5
)//5 6
{00 	
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 
.11 
LogLevel11 '
.11' (
Warn11( ,
,11, -
$str11. Y
,11Y Z
exceptSerialize11[ j
)11j k
;11k l
}22 	
}33 
public88 

static88 
void88 
GoodG2BSink88 "
(88" #
byte88# '
[88' (
]88( )
dataSerialized88* 8
)889 :
{99 
try:: 
{;; 	
int<< 
data<< 
;<< 
var== 
binForm== 
=== 
new== 
BinaryFormatter== -
(==- .
)==. /
;==/ 0
using>> 
(>> 
var>> 
	memStream>>  
=>>! "
new>># &
MemoryStream>>' 3
(>>3 4
)>>4 5
)>>5 6
{?? 
	memStream@@ 
.@@ 
Write@@ 
(@@  
dataSerialized@@  .
,@@. /
$num@@0 1
,@@1 2
dataSerialized@@3 A
.@@A B
Length@@B H
)@@H I
;@@I J
	memStreamAA 
.AA 
SeekAA 
(AA 
$numAA  
,AA  !

SeekOriginAA" ,
.AA, -
BeginAA- 2
)AA2 3
;AA3 4
dataBB 
=BB 
(BB 
intBB 
)BB 
binFormBB #
.BB# $
DeserializeBB$ /
(BB/ 0
	memStreamBB0 9
)BB9 :
;BB: ;
}CC 
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
catchHH 
(HH "
SerializationExceptionHH %
exceptSerializeHH& 5
)HH5 6
{II 	
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ 
.JJ 
LogLevelJJ '
.JJ' (
WarnJJ( ,
,JJ, -
$strJJ. Y
,JJY Z
exceptSerializeJJ[ j
)JJj k
;JJk l
}KK 	
}LL 
publicOO 

staticOO 
voidOO 
GoodB2GSinkOO "
(OO" #
byteOO# '
[OO' (
]OO( )
dataSerializedOO* 8
)OO9 :
{PP 
tryQQ 
{RR 	
intSS 
dataSS 
;SS 
varTT 
binFormTT 
=TT 
newTT 
BinaryFormatterTT -
(TT- .
)TT. /
;TT/ 0
usingUU 
(UU 
varUU 
	memStreamUU  
=UU! "
newUU# &
MemoryStreamUU' 3
(UU3 4
)UU4 5
)UU5 6
{VV 
	memStreamWW 
.WW 
WriteWW 
(WW  
dataSerializedWW  .
,WW. /
$numWW0 1
,WW1 2
dataSerializedWW3 A
.WWA B
LengthWWB H
)WWH I
;WWI J
	memStreamXX 
.XX 
SeekXX 
(XX 
$numXX  
,XX  !

SeekOriginXX" ,
.XX, -
BeginXX- 2
)XX2 3
;XX3 4
dataYY 
=YY 
(YY 
intYY 
)YY 
binFormYY #
.YY# $
DeserializeYY$ /
(YY/ 0
	memStreamYY0 9
)YY9 :
;YY: ;
}ZZ 
if\\ 
(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ #
+^^$ %
data^^& *
+^^+ ,
$str^^- 2
+^^3 4
(^^5 6
$num^^6 9
%^^: ;
data^^< @
)^^@ A
+^^B C
$str^^D H
)^^H I
;^^I J
}__ 
else`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb D
)bbD E
;bbE F
}cc 
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. Y
,ggY Z
exceptSerializegg[ j
)ggj k
;ggk l
}hh 	
}ii 
}kk 
}ll ¿+
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_81a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class :
.CWE369_Divide_by_Zero__int_ReadLine_modulo_81a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
int 
. 
MinValue 
; 
{   	
try"" 
{## 
string%% 
stringNumber%% #
=%%$ %
Console%%& -
.%%- .
ReadLine%%. 6
(%%6 7
)%%7 8
;%%8 9
if&& 
(&& 
stringNumber&&  
!=&&! #
null&&$ (
)&&( )
{'' 
try(( 
{)) 
data** 
=** 
int** "
.**" #
Parse**# (
(**( )
stringNumber**) 5
.**5 6
Trim**6 :
(**: ;
)**; <
)**< =
;**= >
}++ 
catch,, 
(,, 
FormatException,, )
exceptNumberFormat,,* <
),,< =
{-- 
IO.. 
... 
Logger.. !
...! "
Log.." %
(..% &
NLog..& *
...* +
LogLevel..+ 3
...3 4
Warn..4 8
,..8 9
exceptNumberFormat..: L
,..L M
$str	..N Ä
)
..Ä Å
;
..Å Ç
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	>
2CWE369_Divide_by_Zero__int_ReadLine_modulo_81_base77 :

baseObject77; E
=77F G
new77H K=
1CWE369_Divide_by_Zero__int_ReadLine_modulo_81_bad77L }
(77} ~
)77~ 
;	77 Ä

baseObject88 
.88 
Action88 
(88 
data88 
)88  
;88  !
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
)<< 
{== 
GoodG2B>> 
(>> 
)>> 
;>> 
GoodB2G?? 
(?? 
)?? 
;?? 
}@@ 
privateCC 
voidCC 
GoodG2BCC 
(CC 
)CC 
{DD 
intEE 
dataEE 
;EE 
dataGG 
=GG 
$numGG 
;GG >
2CWE369_Divide_by_Zero__int_ReadLine_modulo_81_baseHH :

baseObjectHH; E
=HHF G
newHHH KB
5CWE369_Divide_by_Zero__int_ReadLine_modulo_81_goodG2B	HHL Å
(
HHÅ Ç
)
HHÇ É
;
HHÉ Ñ

baseObjectII 
.II 
ActionII 
(II 
dataII 
)II  
;II  !
}JJ 
privateMM 
voidMM 
GoodB2GMM 
(MM 
)MM 
{NN 
intOO 
dataOO 
;OO 
dataPP 
=PP 
intPP 
.PP 
MinValuePP 
;PP 
{QQ 	
trySS 
{TT 
stringVV 
stringNumberVV #
=VV$ %
ConsoleVV& -
.VV- .
ReadLineVV. 6
(VV6 7
)VV7 8
;VV8 9
ifWW 
(WW 
stringNumberWW  
!=WW! #
nullWW$ (
)WW( )
{XX 
tryYY 
{ZZ 
data[[ 
=[[ 
int[[ "
.[[" #
Parse[[# (
([[( )
stringNumber[[) 5
.[[5 6
Trim[[6 :
([[: ;
)[[; <
)[[< =
;[[= >
}\\ 
catch]] 
(]] 
FormatException]] )
exceptNumberFormat]]* <
)]]< =
{^^ 
IO__ 
.__ 
Logger__ !
.__! "
Log__" %
(__% &
NLog__& *
.__* +
LogLevel__+ 3
.__3 4
Warn__4 8
,__8 9
exceptNumberFormat__: L
,__L M
$str	__N Ä
)
__Ä Å
;
__Å Ç
}`` 
}aa 
}bb 
catchcc 
(cc 
IOExceptioncc 
exceptIOcc '
)cc' (
{dd 
IOee 
.ee 
Loggeree 
.ee 
Logee 
(ee 
NLogee "
.ee" #
LogLevelee# +
.ee+ ,
Warnee, 0
,ee0 1
exceptIOee2 :
,ee: ;
$stree< W
)eeW X
;eeX Y
}ff 
}gg 	>
2CWE369_Divide_by_Zero__int_ReadLine_modulo_81_basehh :

baseObjecthh; E
=hhF G
newhhH KB
5CWE369_Divide_by_Zero__int_ReadLine_modulo_81_goodB2G	hhL Å
(
hhÅ Ç
)
hhÇ É
;
hhÉ Ñ

baseObjectii 
.ii 
Actionii 
(ii 
dataii 
)ii  
;ii  !
}jj 
}ll 
}mm ≈
™C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_81_bad.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class =
1CWE369_Divide_by_Zero__int_ReadLine_modulo_81_bad 7
:8 9>
2CWE369_Divide_by_Zero__int_ReadLine_modulo_81_base: l
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
}"" 
}## «
´C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_81_base.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
abstract 
class	 >
2CWE369_Divide_by_Zero__int_ReadLine_modulo_81_base A
{ 
public 

abstract 
void 
Action 
(  
int  #
data$ (
)) *
;* +
} 
} Ú	
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_81_goodB2G.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_ReadLine_modulo_81_goodB2G ;
:< =>
2CWE369_Divide_by_Zero__int_ReadLine_modulo_81_base> p
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
if   

(   
data   
!=   
$num   
)   
{!! 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
%""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
IO&& 
.&& 
	WriteLine&& 
(&& 
$str&& @
)&&@ A
;&&A B
}'' 	
}(( 
})) 
}** Õ
ÆC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_ReadLine_modulo_81_goodG2B.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class A
5CWE369_Divide_by_Zero__int_ReadLine_modulo_81_goodG2B ;
:< =>
2CWE369_Divide_by_Zero__int_ReadLine_modulo_81_base> p
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
}## 
}$$ ‹
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_01.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_01 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public&& 

override&& 
void&& 
Good&& 
(&& 
)&& 
{'' 
GoodG2B(( 
((( 
)(( 
;(( 
GoodB2G)) 
()) 
))) 
;)) 
}** 
private-- 
void-- 
GoodG2B-- 
(-- 
)-- 
{.. 
int// 
data// 
;// 
data11 
=11 
$num11 
;11 
IO44 

.44
 
	WriteLine44 
(44 
$str44  
+44! "
data44# '
+44( )
$str44* /
+440 1
(442 3
$num443 6
/447 8
data449 =
)44= >
+44? @
$str44A E
)44E F
;44F G
}55 
private88 
void88 
GoodB2G88 
(88 
)88 
{99 
int:: 
data:: 
;:: 
data;; 
=;; 
$num;; 
;;; 
if== 

(== 
data== 
!=== 
$num== 
)== 
{>> 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? 
+??  !
data??" &
+??' (
$str??) .
+??/ 0
(??1 2
$num??2 5
/??6 7
data??8 <
)??< =
+??> ?
$str??@ D
)??D E
;??E F
}@@ 	
elseAA 
{BB 	
IOCC 
.CC 
	WriteLineCC 
(CC 
$strCC @
)CC@ A
;CCA B
}DD 	
}EE 
}GG 
}HH ¢/
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_02.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_02 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
true 
) 
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

()) 
true)) 
))) 
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
false66 
)66 
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
trueAA 
)AA 
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE $
+EE% &
dataEE' +
+EE, -
$strEE. 3
+EE4 5
(EE6 7
$numEE7 :
/EE; <
dataEE= A
)EEA B
+EEC D
$strEEE I
)EEI J
;EEJ K
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
trueMM 
)MM 
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
trueXX 
)XX 
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ $
+\\% &
data\\' +
+\\, -
$str\\. 3
+\\4 5
(\\6 7
$num\\7 :
/\\; <
data\\= A
)\\A B
+\\C D
$str\\E I
)\\I J
;\\J K
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
truedd 
)dd 
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
falsenn 
)nn 
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
/xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
true
ÖÖ 
)
ÖÖ 
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
true
èè 
)
èè 
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
/
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ ¸1
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_03.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_03 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
$num 
== 
$num 
) 
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

()) 
$num)) 
==)) 
$num)) 
))) 
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
$num66 
!=66 
$num66 
)66 
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
$numAA 
==AA 
$numAA 
)AA 
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE $
+EE% &
dataEE' +
+EE, -
$strEE. 3
+EE4 5
(EE6 7
$numEE7 :
/EE; <
dataEE= A
)EEA B
+EEC D
$strEEE I
)EEI J
;EEJ K
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
$numMM 
==MM 
$numMM 
)MM 
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
$numXX 
==XX 
$numXX 
)XX 
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ $
+\\% &
data\\' +
+\\, -
$str\\. 3
+\\4 5
(\\6 7
$num\\7 :
/\\; <
data\\= A
)\\A B
+\\C D
$str\\E I
)\\I J
;\\J K
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
$numdd 
==dd 
$numdd 
)dd 
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
$numnn 
!=nn 
$numnn 
)nn 
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
/xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
$num
ÖÖ 
==
ÖÖ 
$num
ÖÖ 
)
ÖÖ 
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
$num
èè 
==
èè 
$num
èè 
)
èè 
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
/
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ ﬁ2
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_04.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_04 /
:0 1
AbstractTestCase2 B
{ 
private   
const   
bool   
PRIVATE_CONST_TRUE   )
=  * +
true  , 0
;  0 1
private!! 
const!! 
bool!! 
PRIVATE_CONST_FALSE!! *
=!!+ ,
false!!- 2
;!!2 3
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
;%% 
if&& 

(&& 
PRIVATE_CONST_TRUE&& 
)&& 
{'' 	
data(( 
=(( 
$num(( 
;(( 
})) 	
else** 
{++ 	
data.. 
=.. 
$num.. 
;.. 
}// 	
if00 

(00 
PRIVATE_CONST_TRUE00 
)00 
{11 	
IO44 
.44 
	WriteLine44 
(44 
$str44 $
+44% &
data44' +
+44, -
$str44. 3
+444 5
(446 7
$num447 :
/44; <
data44= A
)44A B
+44C D
$str44E I
)44I J
;44J K
}55 	
}66 
private:: 
void:: 
GoodG2B1:: 
(:: 
):: 
{;; 
int<< 
data<< 
;<< 
if== 

(== 
PRIVATE_CONST_FALSE== 
)==  
{>> 	
dataAA 
=AA 
$numAA 
;AA 
}BB 	
elseCC 
{DD 	
dataFF 
=FF 
$numFF 
;FF 
}GG 	
ifHH 

(HH 
PRIVATE_CONST_TRUEHH 
)HH 
{II 	
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL $
+LL% &
dataLL' +
+LL, -
$strLL. 3
+LL4 5
(LL6 7
$numLL7 :
/LL; <
dataLL= A
)LLA B
+LLC D
$strLLE I
)LLI J
;LLJ K
}MM 	
}NN 
privateQQ 
voidQQ 
GoodG2B2QQ 
(QQ 
)QQ 
{RR 
intSS 
dataSS 
;SS 
ifTT 

(TT 
PRIVATE_CONST_TRUETT 
)TT 
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
PRIVATE_CONST_TRUE__ 
)__ 
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc $
+cc% &
datacc' +
+cc, -
$strcc. 3
+cc4 5
(cc6 7
$numcc7 :
/cc; <
datacc= A
)ccA B
+ccC D
$strccE I
)ccI J
;ccJ K
}dd 	
}ee 
privatehh 
voidhh 
GoodB2G1hh 
(hh 
)hh 
{ii 
intjj 
datajj 
;jj 
ifkk 

(kk 
PRIVATE_CONST_TRUEkk 
)kk 
{ll 	
datamm 
=mm 
$nummm 
;mm 
}nn 	
elseoo 
{pp 	
datass 
=ss 
$numss 
;ss 
}tt 	
ifuu 

(uu 
PRIVATE_CONST_FALSEuu 
)uu  
{vv 	
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx /
)xx/ 0
;xx0 1
}yy 	
elsezz 
{{{ 	
if}} 
(}} 
data}} 
!=}} 
$num}} 
)}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str #
+$ %
data& *
++ ,
$str- 2
+3 4
(5 6
$num6 9
/: ;
data< @
)@ A
+B C
$strD H
)H I
;I J
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
	WriteLine
ÉÉ 
(
ÉÉ 
$str
ÉÉ D
)
ÉÉD E
;
ÉÉE F
}
ÑÑ 
}
ÖÖ 	
}
ÜÜ 
private
ââ 
void
ââ 
GoodB2G2
ââ 
(
ââ 
)
ââ 
{
ää 
int
ãã 
data
ãã 
;
ãã 
if
åå 

(
åå  
PRIVATE_CONST_TRUE
åå 
)
åå 
{
çç 	
data
éé 
=
éé 
$num
éé 
;
éé 
}
èè 	
else
êê 
{
ëë 	
data
îî 
=
îî 
$num
îî 
;
îî 
}
ïï 	
if
ññ 

(
ññ  
PRIVATE_CONST_TRUE
ññ 
)
ññ 
{
óó 	
if
ôô 
(
ôô 
data
ôô 
!=
ôô 
$num
ôô 
)
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ #
+
õõ$ %
data
õõ& *
+
õõ+ ,
$str
õõ- 2
+
õõ3 4
(
õõ5 6
$num
õõ6 9
/
õõ: ;
data
õõ< @
)
õõ@ A
+
õõB C
$str
õõD H
)
õõH I
;
õõI J
}
úú 
else
ùù 
{
ûû 
IO
üü 
.
üü 
	WriteLine
üü 
(
üü 
$str
üü D
)
üüD E
;
üüE F
}
†† 
}
°° 	
}
¢¢ 
public
§§ 

override
§§ 
void
§§ 
Good
§§ 
(
§§ 
)
§§ 
{
•• 
GoodG2B1
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodG2B2
ßß 
(
ßß 
)
ßß 
;
ßß 
GoodB2G1
®® 
(
®® 
)
®® 
;
®® 
GoodB2G2
©© 
(
©© 
)
©© 
;
©© 
}
™™ 
}¨¨ 
}≠≠ ‚1
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_05.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_05 /
:0 1
AbstractTestCase2 B
{ 
private 
bool 
privateTrue 
= 
true #
;# $
private   
bool   
privateFalse   
=   
false    %
;  % &
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
int$$ 
data$$ 
;$$ 
if%% 

(%% 
privateTrue%% 
)%% 
{&& 	
data'' 
='' 
$num'' 
;'' 
}(( 	
else)) 
{** 	
data-- 
=-- 
$num-- 
;-- 
}.. 	
if// 

(// 
privateTrue// 
)// 
{00 	
IO33 
.33 
	WriteLine33 
(33 
$str33 $
+33% &
data33' +
+33, -
$str33. 3
+334 5
(336 7
$num337 :
/33; <
data33= A
)33A B
+33C D
$str33E I
)33I J
;33J K
}44 	
}55 
private99 
void99 
GoodG2B199 
(99 
)99 
{:: 
int;; 
data;; 
;;; 
if<< 

(<< 
privateFalse<< 
)<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
elseBB 
{CC 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
ifGG 

(GG 
privateTrueGG 
)GG 
{HH 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK $
+KK% &
dataKK' +
+KK, -
$strKK. 3
+KK4 5
(KK6 7
$numKK7 :
/KK; <
dataKK= A
)KKA B
+KKC D
$strKKE I
)KKI J
;KKJ K
}LL 	
}MM 
privatePP 
voidPP 
GoodG2B2PP 
(PP 
)PP 
{QQ 
intRR 
dataRR 
;RR 
ifSS 

(SS 
privateTrueSS 
)SS 
{TT 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
elseXX 
{YY 	
data\\ 
=\\ 
$num\\ 
;\\ 
}]] 	
if^^ 

(^^ 
privateTrue^^ 
)^^ 
{__ 	
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb $
+bb% &
databb' +
+bb, -
$strbb. 3
+bb4 5
(bb6 7
$numbb7 :
/bb; <
databb= A
)bbA B
+bbC D
$strbbE I
)bbI J
;bbJ K
}cc 	
}dd 
privategg 
voidgg 
GoodB2G1gg 
(gg 
)gg 
{hh 
intii 
dataii 
;ii 
ifjj 

(jj 
privateTruejj 
)jj 
{kk 	
datall 
=ll 
$numll 
;ll 
}mm 	
elsenn 
{oo 	
datarr 
=rr 
$numrr 
;rr 
}ss 	
iftt 

(tt 
privateFalsett 
)tt 
{uu 	
IOww 
.ww 
	WriteLineww 
(ww 
$strww /
)ww/ 0
;ww0 1
}xx 	
elseyy 
{zz 	
if|| 
(|| 
data|| 
!=|| 
$num|| 
)|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ #
+~~$ %
data~~& *
+~~+ ,
$str~~- 2
+~~3 4
(~~5 6
$num~~6 9
/~~: ;
data~~< @
)~~@ A
+~~B C
$str~~D H
)~~H I
;~~I J
} 
else
ÄÄ 
{
ÅÅ 
IO
ÇÇ 
.
ÇÇ 
	WriteLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ D
)
ÇÇD E
;
ÇÇE F
}
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
private
àà 
void
àà 
GoodB2G2
àà 
(
àà 
)
àà 
{
ââ 
int
ää 
data
ää 
;
ää 
if
ãã 

(
ãã 
privateTrue
ãã 
)
ãã 
{
åå 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
else
èè 
{
êê 	
data
ìì 
=
ìì 
$num
ìì 
;
ìì 
}
îî 	
if
ïï 

(
ïï 
privateTrue
ïï 
)
ïï 
{
ññ 	
if
òò 
(
òò 
data
òò 
!=
òò 
$num
òò 
)
òò 
{
ôô 
IO
öö 
.
öö 
	WriteLine
öö 
(
öö 
$str
öö #
+
öö$ %
data
öö& *
+
öö+ ,
$str
öö- 2
+
öö3 4
(
öö5 6
$num
öö6 9
/
öö: ;
data
öö< @
)
öö@ A
+
ööB C
$str
ööD H
)
ööH I
;
ööI J
}
õõ 
else
úú 
{
ùù 
IO
ûû 
.
ûû 
	WriteLine
ûû 
(
ûû 
$str
ûû D
)
ûûD E
;
ûûE F
}
üü 
}
†† 	
}
°° 
public
££ 

override
££ 
void
££ 
Good
££ 
(
££ 
)
££ 
{
§§ 
GoodG2B1
•• 
(
•• 
)
•• 
;
•• 
GoodG2B2
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G1
ßß 
(
ßß 
)
ßß 
;
ßß 
GoodB2G2
®® 
(
®® 
)
®® 
;
®® 
}
©© 
}´´ 
}¨¨ ß4
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_06.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_06 /
:0 1
AbstractTestCase2 B
{ 
private 
const 
int 
PRIVATE_CONST_FIVE (
=) *
$num+ ,
;, -
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
int## 
data## 
;## 
if$$ 

($$ 
PRIVATE_CONST_FIVE$$ 
==$$  
$num$$  !
)$$! "
{%% 	
data&& 
=&& 
$num&& 
;&& 
}'' 	
else(( 
{)) 	
data,, 
=,, 
$num,, 
;,, 
}-- 	
if.. 

(.. 
PRIVATE_CONST_FIVE.. 
==..  
$num..  !
)..! "
{// 	
IO22 
.22 
	WriteLine22 
(22 
$str22 $
+22% &
data22' +
+22, -
$str22. 3
+224 5
(226 7
$num227 :
/22; <
data22= A
)22A B
+22C D
$str22E I
)22I J
;22J K
}33 	
}44 
private88 
void88 
GoodG2B188 
(88 
)88 
{99 
int:: 
data:: 
;:: 
if;; 

(;; 
PRIVATE_CONST_FIVE;; 
!=;;  
$num;;  !
);;! "
{<< 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
elseAA 
{BB 	
dataDD 
=DD 
$numDD 
;DD 
}EE 	
ifFF 

(FF 
PRIVATE_CONST_FIVEFF 
==FF  
$numFF  !
)FF! "
{GG 	
IOJJ 
.JJ 
	WriteLineJJ 
(JJ 
$strJJ $
+JJ% &
dataJJ' +
+JJ, -
$strJJ. 3
+JJ4 5
(JJ6 7
$numJJ7 :
/JJ; <
dataJJ= A
)JJA B
+JJC D
$strJJE I
)JJI J
;JJJ K
}KK 	
}LL 
privateOO 
voidOO 
GoodG2B2OO 
(OO 
)OO 
{PP 
intQQ 
dataQQ 
;QQ 
ifRR 

(RR 
PRIVATE_CONST_FIVERR 
==RR  
$numRR  !
)RR! "
{SS 	
dataUU 
=UU 
$numUU 
;UU 
}VV 	
elseWW 
{XX 	
data[[ 
=[[ 
$num[[ 
;[[ 
}\\ 	
if]] 

(]] 
PRIVATE_CONST_FIVE]] 
==]]  
$num]]  !
)]]! "
{^^ 	
IOaa 
.aa 
	WriteLineaa 
(aa 
$straa $
+aa% &
dataaa' +
+aa, -
$straa. 3
+aa4 5
(aa6 7
$numaa7 :
/aa; <
dataaa= A
)aaA B
+aaC D
$straaE I
)aaI J
;aaJ K
}bb 	
}cc 
privateff 
voidff 
GoodB2G1ff 
(ff 
)ff 
{gg 
inthh 
datahh 
;hh 
ifii 

(ii 
PRIVATE_CONST_FIVEii 
==ii  
$numii  !
)ii! "
{jj 	
datakk 
=kk 
$numkk 
;kk 
}ll 	
elsemm 
{nn 	
dataqq 
=qq 
$numqq 
;qq 
}rr 	
ifss 

(ss 
PRIVATE_CONST_FIVEss 
!=ss  
$numss  !
)ss! "
{tt 	
IOvv 
.vv 
	WriteLinevv 
(vv 
$strvv /
)vv/ 0
;vv0 1
}ww 	
elsexx 
{yy 	
if{{ 
({{ 
data{{ 
!={{ 
$num{{ 
){{ 
{|| 
IO}} 
.}} 
	WriteLine}} 
(}} 
$str}} #
+}}$ %
data}}& *
+}}+ ,
$str}}- 2
+}}3 4
(}}5 6
$num}}6 9
/}}: ;
data}}< @
)}}@ A
+}}B C
$str}}D H
)}}H I
;}}I J
}~~ 
else 
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
	WriteLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ D
)
ÅÅD E
;
ÅÅE F
}
ÇÇ 
}
ÉÉ 	
}
ÑÑ 
private
áá 
void
áá 
GoodB2G2
áá 
(
áá 
)
áá 
{
àà 
int
ââ 
data
ââ 
;
ââ 
if
ää 

(
ää  
PRIVATE_CONST_FIVE
ää 
==
ää  
$num
ää  !
)
ää! "
{
ãã 	
data
åå 
=
åå 
$num
åå 
;
åå 
}
çç 	
else
éé 
{
èè 	
data
íí 
=
íí 
$num
íí 
;
íí 
}
ìì 	
if
îî 

(
îî  
PRIVATE_CONST_FIVE
îî 
==
îî  
$num
îî  !
)
îî! "
{
ïï 	
if
óó 
(
óó 
data
óó 
!=
óó 
$num
óó 
)
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô #
+
ôô$ %
data
ôô& *
+
ôô+ ,
$str
ôô- 2
+
ôô3 4
(
ôô5 6
$num
ôô6 9
/
ôô: ;
data
ôô< @
)
ôô@ A
+
ôôB C
$str
ôôD H
)
ôôH I
;
ôôI J
}
öö 
else
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù D
)
ùùD E
;
ùùE F
}
ûû 
}
üü 	
}
†† 
public
¢¢ 

override
¢¢ 
void
¢¢ 
Good
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
GoodG2B1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodG2B2
•• 
(
•• 
)
•• 
;
•• 
GoodB2G1
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G2
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 
}™™ 
}´´ «3
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_07.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_07 /
:0 1
AbstractTestCase2 B
{ 
private 
int 
privateFive 
= 
$num 
;  
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
int## 
data## 
;## 
if$$ 

($$ 
privateFive$$ 
==$$ 
$num$$ 
)$$ 
{%% 	
data&& 
=&& 
$num&& 
;&& 
}'' 	
else(( 
{)) 	
data,, 
=,, 
$num,, 
;,, 
}-- 	
if.. 

(.. 
privateFive.. 
==.. 
$num.. 
).. 
{// 	
IO22 
.22 
	WriteLine22 
(22 
$str22 $
+22% &
data22' +
+22, -
$str22. 3
+224 5
(226 7
$num227 :
/22; <
data22= A
)22A B
+22C D
$str22E I
)22I J
;22J K
}33 	
}44 
private88 
void88 
GoodG2B188 
(88 
)88 
{99 
int:: 
data:: 
;:: 
if;; 

(;; 
privateFive;; 
!=;; 
$num;; 
);; 
{<< 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
elseAA 
{BB 	
dataDD 
=DD 
$numDD 
;DD 
}EE 	
ifFF 

(FF 
privateFiveFF 
==FF 
$numFF 
)FF 
{GG 	
IOJJ 
.JJ 
	WriteLineJJ 
(JJ 
$strJJ $
+JJ% &
dataJJ' +
+JJ, -
$strJJ. 3
+JJ4 5
(JJ6 7
$numJJ7 :
/JJ; <
dataJJ= A
)JJA B
+JJC D
$strJJE I
)JJI J
;JJJ K
}KK 	
}LL 
privateOO 
voidOO 
GoodG2B2OO 
(OO 
)OO 
{PP 
intQQ 
dataQQ 
;QQ 
ifRR 

(RR 
privateFiveRR 
==RR 
$numRR 
)RR 
{SS 	
dataUU 
=UU 
$numUU 
;UU 
}VV 	
elseWW 
{XX 	
data[[ 
=[[ 
$num[[ 
;[[ 
}\\ 	
if]] 

(]] 
privateFive]] 
==]] 
$num]] 
)]] 
{^^ 	
IOaa 
.aa 
	WriteLineaa 
(aa 
$straa $
+aa% &
dataaa' +
+aa, -
$straa. 3
+aa4 5
(aa6 7
$numaa7 :
/aa; <
dataaa= A
)aaA B
+aaC D
$straaE I
)aaI J
;aaJ K
}bb 	
}cc 
privateff 
voidff 
GoodB2G1ff 
(ff 
)ff 
{gg 
inthh 
datahh 
;hh 
ifii 

(ii 
privateFiveii 
==ii 
$numii 
)ii 
{jj 	
datakk 
=kk 
$numkk 
;kk 
}ll 	
elsemm 
{nn 	
dataqq 
=qq 
$numqq 
;qq 
}rr 	
ifss 

(ss 
privateFivess 
!=ss 
$numss 
)ss 
{tt 	
IOvv 
.vv 
	WriteLinevv 
(vv 
$strvv /
)vv/ 0
;vv0 1
}ww 	
elsexx 
{yy 	
if{{ 
({{ 
data{{ 
!={{ 
$num{{ 
){{ 
{|| 
IO}} 
.}} 
	WriteLine}} 
(}} 
$str}} #
+}}$ %
data}}& *
+}}+ ,
$str}}- 2
+}}3 4
(}}5 6
$num}}6 9
/}}: ;
data}}< @
)}}@ A
+}}B C
$str}}D H
)}}H I
;}}I J
}~~ 
else 
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
	WriteLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ D
)
ÅÅD E
;
ÅÅE F
}
ÇÇ 
}
ÉÉ 	
}
ÑÑ 
private
áá 
void
áá 
GoodB2G2
áá 
(
áá 
)
áá 
{
àà 
int
ââ 
data
ââ 
;
ââ 
if
ää 

(
ää 
privateFive
ää 
==
ää 
$num
ää 
)
ää 
{
ãã 	
data
åå 
=
åå 
$num
åå 
;
åå 
}
çç 	
else
éé 
{
èè 	
data
íí 
=
íí 
$num
íí 
;
íí 
}
ìì 	
if
îî 

(
îî 
privateFive
îî 
==
îî 
$num
îî 
)
îî 
{
ïï 	
if
óó 
(
óó 
data
óó 
!=
óó 
$num
óó 
)
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô #
+
ôô$ %
data
ôô& *
+
ôô+ ,
$str
ôô- 2
+
ôô3 4
(
ôô5 6
$num
ôô6 9
/
ôô: ;
data
ôô< @
)
ôô@ A
+
ôôB C
$str
ôôD H
)
ôôH I
;
ôôI J
}
öö 
else
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù D
)
ùùD E
;
ùùE F
}
ûû 
}
üü 	
}
†† 
public
¢¢ 

override
¢¢ 
void
¢¢ 
Good
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
GoodG2B1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodG2B2
•• 
(
•• 
)
•• 
;
•• 
GoodB2G1
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G2
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 
}™™ 
}´´ Œ6
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_08.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_08 /
:0 1
AbstractTestCase2 B
{ 
private 
static 
bool 
PrivateReturnsTrue *
(* +
)+ ,
{   
return!! 
true!! 
;!! 
}"" 
private$$ 
static$$ 
bool$$ 
PrivateReturnsFalse$$ +
($$+ ,
)$$, -
{%% 
return&& 
false&& 
;&& 
}'' 
public)) 

override)) 
void)) 
Bad)) 
()) 
))) 
{** 
int++ 
data++ 
;++ 
if,, 

(,, 
PrivateReturnsTrue,, 
(,, 
),,  
),,  !
{-- 	
data.. 
=.. 
$num.. 
;.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
PrivateReturnsTrue66 
(66 
)66  
)66  !
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: $
+::% &
data::' +
+::, -
$str::. 3
+::4 5
(::6 7
$num::7 :
/::; <
data::= A
)::A B
+::C D
$str::E I
)::I J
;::J K
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
)@@ 
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
PrivateReturnsFalseCC 
(CC  
)CC  !
)CC! "
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
PrivateReturnsTrueNN 
(NN 
)NN  
)NN  !
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR $
+RR% &
dataRR' +
+RR, -
$strRR. 3
+RR4 5
(RR6 7
$numRR7 :
/RR; <
dataRR= A
)RRA B
+RRC D
$strRRE I
)RRI J
;RRJ K
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
)WW 
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
PrivateReturnsTrueZZ 
(ZZ 
)ZZ  
)ZZ  !
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
PrivateReturnsTrueee 
(ee 
)ee  
)ee  !
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii $
+ii% &
dataii' +
+ii, -
$strii. 3
+ii4 5
(ii6 7
$numii7 :
/ii; <
dataii= A
)iiA B
+iiC D
$striiE I
)iiI J
;iiJ K
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
)nn 
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
PrivateReturnsTrueqq 
(qq 
)qq  
)qq  !
{rr 	
datass 
=ss 
$numss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
$numyy 
;yy 
}zz 	
if{{ 

({{ 
PrivateReturnsFalse{{ 
({{  
){{  !
){{! "
{|| 	
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ /
)~~/ 0
;~~0 1
} 	
else
ÄÄ 
{
ÅÅ 	
if
ÉÉ 
(
ÉÉ 
data
ÉÉ 
!=
ÉÉ 
$num
ÉÉ 
)
ÉÉ 
{
ÑÑ 
IO
ÖÖ 
.
ÖÖ 
	WriteLine
ÖÖ 
(
ÖÖ 
$str
ÖÖ #
+
ÖÖ$ %
data
ÖÖ& *
+
ÖÖ+ ,
$str
ÖÖ- 2
+
ÖÖ3 4
(
ÖÖ5 6
$num
ÖÖ6 9
/
ÖÖ: ;
data
ÖÖ< @
)
ÖÖ@ A
+
ÖÖB C
$str
ÖÖD H
)
ÖÖH I
;
ÖÖI J
}
ÜÜ 
else
áá 
{
àà 
IO
ââ 
.
ââ 
	WriteLine
ââ 
(
ââ 
$str
ââ D
)
ââD E
;
ââE F
}
ää 
}
ãã 	
}
åå 
private
èè 
void
èè 
GoodB2G2
èè 
(
èè 
)
èè 
{
êê 
int
ëë 
data
ëë 
;
ëë 
if
íí 

(
íí  
PrivateReturnsTrue
íí 
(
íí 
)
íí  
)
íí  !
{
ìì 	
data
îî 
=
îî 
$num
îî 
;
îî 
}
ïï 	
else
ññ 
{
óó 	
data
öö 
=
öö 
$num
öö 
;
öö 
}
õõ 	
if
úú 

(
úú  
PrivateReturnsTrue
úú 
(
úú 
)
úú  
)
úú  !
{
ùù 	
if
üü 
(
üü 
data
üü 
!=
üü 
$num
üü 
)
üü 
{
†† 
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° #
+
°°$ %
data
°°& *
+
°°+ ,
$str
°°- 2
+
°°3 4
(
°°5 6
$num
°°6 9
/
°°: ;
data
°°< @
)
°°@ A
+
°°B C
$str
°°D H
)
°°H I
;
°°I J
}
¢¢ 
else
££ 
{
§§ 
IO
•• 
.
•• 
	WriteLine
•• 
(
•• 
$str
•• D
)
••D E
;
••E F
}
¶¶ 
}
ßß 	
}
®® 
public
™™ 

override
™™ 
void
™™ 
Good
™™ 
(
™™ 
)
™™ 
{
´´ 
GoodG2B1
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
GoodG2B2
≠≠ 
(
≠≠ 
)
≠≠ 
;
≠≠ 
GoodB2G1
ÆÆ 
(
ÆÆ 
)
ÆÆ 
;
ÆÆ 
GoodB2G2
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
}
∞∞ 
}≤≤ 
}≥≥ Ä3
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_09.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_09 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_TRUE #
)# $
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

()) 
IO)) 
.))  
STATIC_READONLY_TRUE)) #
)))# $
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
IO66 
.66 !
STATIC_READONLY_FALSE66 $
)66$ %
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
IOAA 
.AA  
STATIC_READONLY_TRUEAA #
)AA# $
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE $
+EE% &
dataEE' +
+EE, -
$strEE. 3
+EE4 5
(EE6 7
$numEE7 :
/EE; <
dataEE= A
)EEA B
+EEC D
$strEEE I
)EEI J
;EEJ K
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM  
STATIC_READONLY_TRUEMM #
)MM# $
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
IOXX 
.XX  
STATIC_READONLY_TRUEXX #
)XX# $
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ $
+\\% &
data\\' +
+\\, -
$str\\. 3
+\\4 5
(\\6 7
$num\\7 :
/\\; <
data\\= A
)\\A B
+\\C D
$str\\E I
)\\I J
;\\J K
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd  
STATIC_READONLY_TRUEdd #
)dd# $
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn !
STATIC_READONLY_FALSEnn $
)nn$ %
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
/xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ "
STATIC_READONLY_TRUE
ÖÖ #
)
ÖÖ# $
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
IO
èè 
.
èè "
STATIC_READONLY_TRUE
èè #
)
èè# $
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
/
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ ú2
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_10.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_10 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
. 

staticTrue 
) 
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

()) 
IO)) 
.)) 

staticTrue)) 
))) 
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
IO66 
.66 
staticFalse66 
)66 
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
IOAA 
.AA 

staticTrueAA 
)AA 
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE $
+EE% &
dataEE' +
+EE, -
$strEE. 3
+EE4 5
(EE6 7
$numEE7 :
/EE; <
dataEE= A
)EEA B
+EEC D
$strEEE I
)EEI J
;EEJ K
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM 

staticTrueMM 
)MM 
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
IOXX 
.XX 

staticTrueXX 
)XX 
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ $
+\\% &
data\\' +
+\\, -
$str\\. 3
+\\4 5
(\\6 7
$num\\7 :
/\\; <
data\\= A
)\\A B
+\\C D
$str\\E I
)\\I J
;\\J K
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd 

staticTruedd 
)dd 
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn 
staticFalsenn 
)nn 
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
/xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ 

staticTrue
ÖÖ 
)
ÖÖ 
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
IO
èè 
.
èè 

staticTrue
èè 
)
èè 
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
/
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ ñ5
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_11.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_11 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
. 
StaticReturnsTrue  
(  !
)! "
)" #
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

())
 
IO)) 
.)) 
StaticReturnsTrue)) 
())  
)))  !
)))! "
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
IO66 
.66 
StaticReturnsFalse66 !
(66! "
)66" #
)66# $
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
IOAA 
.AA 
StaticReturnsTrueAA  
(AA  !
)AA! "
)AA" #
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE $
+EE% &
dataEE' +
+EE, -
$strEE. 3
+EE4 5
(EE6 7
$numEE7 :
/EE; <
dataEE= A
)EEA B
+EEC D
$strEEE I
)EEI J
;EEJ K
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM 
StaticReturnsTrueMM  
(MM  !
)MM! "
)MM" #
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
IOXX 
.XX 
StaticReturnsTrueXX  
(XX  !
)XX! "
)XX" #
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ $
+\\% &
data\\' +
+\\, -
$str\\. 3
+\\4 5
(\\6 7
$num\\7 :
/\\; <
data\\= A
)\\A B
+\\C D
$str\\E I
)\\I J
;\\J K
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd 
StaticReturnsTruedd  
(dd  !
)dd! "
)dd" #
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn 
StaticReturnsFalsenn !
(nn! "
)nn" #
)nn# $
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
/xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ 
StaticReturnsTrue
ÖÖ  
(
ÖÖ  !
)
ÖÖ! "
)
ÖÖ" #
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
IO
èè 
.
èè 
StaticReturnsTrue
èè  
(
èè  !
)
èè! "
)
èè" #
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
/
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ Ú,
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_12.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_12 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

(
 
IO 
. $
StaticReturnsTrueOrFalse &
(& '
)' (
)( )
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data&& 
=&& 
$num&& 
;&& 
}'' 	
if(( 

(((
 
IO(( 
.(( $
StaticReturnsTrueOrFalse(( &
(((& '
)((' (
)((( )
{)) 	
IO,, 
.,, 
	WriteLine,, 
(,, 
$str,, $
+,,% &
data,,' +
+,,, -
$str,,. 3
+,,4 5
(,,6 7
$num,,7 :
/,,; <
data,,= A
),,A B
+,,C D
$str,,E I
),,I J
;,,J K
}-- 	
else.. 
{// 	
if11 
(11 
data11 
!=11 
$num11 
)11 
{22 
IO33 
.33 
	WriteLine33 
(33 
$str33 #
+33$ %
data33& *
+33+ ,
$str33- 2
+333 4
(335 6
$num336 9
/33: ;
data33< @
)33@ A
+33B C
$str33D H
)33H I
;33I J
}44 
else55 
{66 
IO77 
.77 
	WriteLine77 
(77 
$str77 D
)77D E
;77E F
}88 
}99 	
}:: 
private?? 
void?? 
GoodG2B?? 
(?? 
)?? 
{@@ 
intAA 
dataAA 
;AA 
ifBB 

(BB
 
IOBB 
.BB $
StaticReturnsTrueOrFalseBB &
(BB& '
)BB' (
)BB( )
{CC 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
elseGG 
{HH 	
dataJJ 
=JJ 
$numJJ 
;JJ 
}KK 	
ifLL 

(LL
 
IOLL 
.LL $
StaticReturnsTrueOrFalseLL &
(LL& '
)LL' (
)LL( )
{MM 	
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP $
+PP% &
dataPP' +
+PP, -
$strPP. 3
+PP4 5
(PP6 7
$numPP7 :
/PP; <
dataPP= A
)PPA B
+PPC D
$strPPE I
)PPI J
;PPJ K
}QQ 	
elseRR 
{SS 	
IOVV 
.VV 
	WriteLineVV 
(VV 
$strVV $
+VV% &
dataVV' +
+VV, -
$strVV. 3
+VV4 5
(VV6 7
$numVV7 :
/VV; <
dataVV= A
)VVA B
+VVC D
$strVVE I
)VVI J
;VVJ K
}WW 	
}XX 
private\\ 
void\\ 
GoodB2G\\ 
(\\ 
)\\ 
{]] 
int^^ 
data^^ 
;^^ 
if__ 

(__
 
IO__ 
.__ $
StaticReturnsTrueOrFalse__ &
(__& '
)__' (
)__( )
{`` 	
dataaa 
=aa 
$numaa 
;aa 
}bb 	
elsecc 
{dd 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg
 
IOgg 
.gg $
StaticReturnsTrueOrFalsegg &
(gg& '
)gg' (
)gg( )
{hh 	
ifjj 
(jj 
datajj 
!=jj 
$numjj 
)jj 
{kk 
IOll 
.ll 
	WriteLinell 
(ll 
$strll #
+ll$ %
datall& *
+ll+ ,
$strll- 2
+ll3 4
(ll5 6
$numll6 9
/ll: ;
datall< @
)ll@ A
+llB C
$strllD H
)llH I
;llI J
}mm 
elsenn 
{oo 
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp D
)ppD E
;ppE F
}qq 
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
/xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
public
ÅÅ 

override
ÅÅ 
void
ÅÅ 
Good
ÅÅ 
(
ÅÅ 
)
ÅÅ 
{
ÉÉ 
GoodG2B
ÑÑ 
(
ÑÑ 
)
ÑÑ 
;
ÑÑ 
GoodB2G
ÖÖ 
(
ÖÖ 
)
ÖÖ 
;
ÖÖ 
}
ÜÜ 
}àà 
}ââ ⁄5
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_13.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_13 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_FIVE #
==# %
$num% &
)& '
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

()) 
IO)) 
.))  
STATIC_READONLY_FIVE)) #
==))# %
$num))% &
)))& '
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
IO66 
.66  
STATIC_READONLY_FIVE66 #
!=66# %
$num66% &
)66& '
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
IOAA 
.AA  
STATIC_READONLY_FIVEAA #
==AA# %
$numAA% &
)AA& '
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE $
+EE% &
dataEE' +
+EE, -
$strEE. 3
+EE4 5
(EE6 7
$numEE7 :
/EE; <
dataEE= A
)EEA B
+EEC D
$strEEE I
)EEI J
;EEJ K
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM  
STATIC_READONLY_FIVEMM #
==MM# %
$numMM% &
)MM& '
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
IOXX 
.XX  
STATIC_READONLY_FIVEXX #
==XX# %
$numXX% &
)XX& '
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ $
+\\% &
data\\' +
+\\, -
$str\\. 3
+\\4 5
(\\6 7
$num\\7 :
/\\; <
data\\= A
)\\A B
+\\C D
$str\\E I
)\\I J
;\\J K
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd  
STATIC_READONLY_FIVEdd #
==dd# %
$numdd% &
)dd& '
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn  
STATIC_READONLY_FIVEnn #
!=nn# %
$numnn% &
)nn& '
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
/xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ "
STATIC_READONLY_FIVE
ÖÖ #
==
ÖÖ# %
$num
ÖÖ% &
)
ÖÖ& '
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
IO
èè 
.
èè "
STATIC_READONLY_FIVE
èè #
==
èè# %
$num
èè% &
)
èè& '
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
/
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ ˆ4
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_14.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_14 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
. 

staticFive 
== 
$num 
) 
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

()) 
IO)) 
.)) 

staticFive)) 
==)) 
$num)) 
))) 
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
IO66 
.66 

staticFive66 
!=66 
$num66 
)66 
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
IOAA 
.AA 

staticFiveAA 
==AA 
$numAA 
)AA 
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE $
+EE% &
dataEE' +
+EE, -
$strEE. 3
+EE4 5
(EE6 7
$numEE7 :
/EE; <
dataEE= A
)EEA B
+EEC D
$strEEE I
)EEI J
;EEJ K
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM 

staticFiveMM 
==MM 
$numMM 
)MM 
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
IOXX 
.XX 

staticFiveXX 
==XX 
$numXX 
)XX 
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ $
+\\% &
data\\' +
+\\, -
$str\\. 3
+\\4 5
(\\6 7
$num\\7 :
/\\; <
data\\= A
)\\A B
+\\C D
$str\\E I
)\\I J
;\\J K
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd 

staticFivedd 
==dd 
$numdd 
)dd 
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn 

staticFivenn 
!=nn 
$numnn 
)nn 
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
/xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ 

staticFive
ÖÖ 
==
ÖÖ 
$num
ÖÖ 
)
ÖÖ 
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
IO
èè 
.
èè 

staticFive
èè 
==
èè 
$num
èè 
)
èè 
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
/
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ º>
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_15.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_15 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
switch 
( 
$num 
) 
{   	
case!! 
$num!! 
:!! 
data"" 
="" 
$num"" 
;"" 
break## 
;## 
default$$ 
:$$ 
data'' 
='' 
$num'' 
;'' 
break(( 
;(( 
})) 	
switch** 
(** 
$num** 
)** 
{++ 	
case,, 
$num,, 
:,, 
IO// 
.// 
	WriteLine// 
(// 
$str// $
+//% &
data//' +
+//, -
$str//. 3
+//4 5
(//6 7
$num//7 :
///; <
data//= A
)//A B
+//C D
$str//E I
)//I J
;//J K
break00 
;00 
default11 
:11 
IO33 
.33 
	WriteLine33 
(33 
$str33 /
)33/ 0
;330 1
break44 
;44 
}55 	
}66 
private:: 
void:: 
GoodG2B1:: 
(:: 
):: 
{;; 
int<< 
data<< 
;<< 
switch== 
(== 
$num== 
)== 
{>> 	
case?? 
$num?? 
:?? 
dataBB 
=BB 
$numBB 
;BB 
breakCC 
;CC 
defaultDD 
:DD 
dataFF 
=FF 
$numFF 
;FF 
breakGG 
;GG 
}HH 	
switchII 
(II 
$numII 
)II 
{JJ 	
caseKK 
$numKK 
:KK 
IONN 
.NN 
	WriteLineNN 
(NN 
$strNN $
+NN% &
dataNN' +
+NN, -
$strNN. 3
+NN4 5
(NN6 7
$numNN7 :
/NN; <
dataNN= A
)NNA B
+NNC D
$strNNE I
)NNI J
;NNJ K
breakOO 
;OO 
defaultPP 
:PP 
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR /
)RR/ 0
;RR0 1
breakSS 
;SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
)XX 
{YY 
intZZ 
dataZZ 
;ZZ 
switch[[ 
([[ 
$num[[ 
)[[ 
{\\ 	
case]] 
$num]] 
:]] 
data__ 
=__ 
$num__ 
;__ 
break`` 
;`` 
defaultaa 
:aa 
datadd 
=dd 
$numdd 
;dd 
breakee 
;ee 
}ff 	
switchgg 
(gg 
$numgg 
)gg 
{hh 	
caseii 
$numii 
:ii 
IOll 
.ll 
	WriteLinell 
(ll 
$strll $
+ll% &
datall' +
+ll, -
$strll. 3
+ll4 5
(ll6 7
$numll7 :
/ll; <
datall= A
)llA B
+llC D
$strllE I
)llI J
;llJ K
breakmm 
;mm 
defaultnn 
:nn 
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp /
)pp/ 0
;pp0 1
breakqq 
;qq 
}rr 	
}ss 
privatevv 
voidvv 
GoodB2G1vv 
(vv 
)vv 
{ww 
intxx 
dataxx 
;xx 
switchyy 
(yy 
$numyy 
)yy 
{zz 	
case{{ 
$num{{ 
:{{ 
data|| 
=|| 
$num|| 
;|| 
break}} 
;}} 
default~~ 
:~~ 
data
ÅÅ 
=
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
break
ÇÇ 
;
ÇÇ 
}
ÉÉ 	
switch
ÑÑ 
(
ÑÑ 
$num
ÑÑ 
)
ÑÑ 
{
ÖÖ 	
case
ÜÜ 
$num
ÜÜ 
:
ÜÜ 
IO
àà 
.
àà 
	WriteLine
àà 
(
àà 
$str
àà /
)
àà/ 0
;
àà0 1
break
ââ 
;
ââ 
default
ää 
:
ää 
if
åå 
(
åå 
data
åå 
!=
åå 
$num
åå 
)
åå 
{
çç 
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé #
+
éé$ %
data
éé& *
+
éé+ ,
$str
éé- 2
+
éé3 4
(
éé5 6
$num
éé6 9
/
éé: ;
data
éé< @
)
éé@ A
+
ééB C
$str
ééD H
)
ééH I
;
ééI J
}
èè 
else
êê 
{
ëë 
IO
íí 
.
íí 
	WriteLine
íí 
(
íí 
$str
íí D
)
ííD E
;
ííE F
}
ìì 
break
îî 
;
îî 
}
ïï 	
}
ññ 
private
ôô 
void
ôô 
GoodB2G2
ôô 
(
ôô 
)
ôô 
{
öö 
int
õõ 
data
õõ 
;
õõ 
switch
úú 
(
úú 
$num
úú 
)
úú 
{
ùù 	
case
ûû 
$num
ûû 
:
ûû 
data
üü 
=
üü 
$num
üü 
;
üü 
break
†† 
;
†† 
default
°° 
:
°° 
data
§§ 
=
§§ 
$num
§§ 
;
§§ 
break
•• 
;
•• 
}
¶¶ 	
switch
ßß 
(
ßß 
$num
ßß 
)
ßß 
{
®® 	
case
©© 
$num
©© 
:
©© 
if
´´ 
(
´´ 
data
´´ 
!=
´´ 
$num
´´ 
)
´´ 
{
¨¨ 
IO
≠≠ 
.
≠≠ 
	WriteLine
≠≠ 
(
≠≠ 
$str
≠≠ #
+
≠≠$ %
data
≠≠& *
+
≠≠+ ,
$str
≠≠- 2
+
≠≠3 4
(
≠≠5 6
$num
≠≠6 9
/
≠≠: ;
data
≠≠< @
)
≠≠@ A
+
≠≠B C
$str
≠≠D H
)
≠≠H I
;
≠≠I J
}
ÆÆ 
else
ØØ 
{
∞∞ 
IO
±± 
.
±± 
	WriteLine
±± 
(
±± 
$str
±± D
)
±±D E
;
±±E F
}
≤≤ 
break
≥≥ 
;
≥≥ 
default
¥¥ 
:
¥¥ 
IO
∂∂ 
.
∂∂ 
	WriteLine
∂∂ 
(
∂∂ 
$str
∂∂ /
)
∂∂/ 0
;
∂∂0 1
break
∑∑ 
;
∑∑ 
}
∏∏ 	
}
ππ 
public
ªª 

override
ªª 
void
ªª 
Good
ªª 
(
ªª 
)
ªª 
{
ºº 
GoodG2B1
ΩΩ 
(
ΩΩ 
)
ΩΩ 
;
ΩΩ 
GoodG2B2
ææ 
(
ææ 
)
ææ 
;
ææ 
GoodB2G1
øø 
(
øø 
)
øø 
;
øø 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
}
¡¡ 
}√√ 
}ƒƒ Ó
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_16.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_16 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
while 
( 
true 
) 
{   	
data!! 
=!! 
$num!! 
;!! 
break"" 
;"" 
}## 	
while$$ 
($$ 
true$$ 
)$$ 
{%% 	
IO(( 
.(( 
	WriteLine(( 
((( 
$str(( $
+((% &
data((' +
+((, -
$str((. 3
+((4 5
(((6 7
$num((7 :
/((; <
data((= A
)((A B
+((C D
$str((E I
)((I J
;((J K
break)) 
;)) 
}** 	
}++ 
private// 
void// 
GoodG2B// 
(// 
)// 
{00 
int11 
data11 
;11 
while22 
(22 
true22 
)22 
{33 	
data55 
=55 
$num55 
;55 
break66 
;66 
}77 	
while88 
(88 
true88 
)88 
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< $
+<<% &
data<<' +
+<<, -
$str<<. 3
+<<4 5
(<<6 7
$num<<7 :
/<<; <
data<<= A
)<<A B
+<<C D
$str<<E I
)<<I J
;<<J K
break== 
;== 
}>> 	
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
)BB 
{CC 
intDD 
dataDD 
;DD 
whileEE 
(EE 
trueEE 
)EE 
{FF 	
dataGG 
=GG 
$numGG 
;GG 
breakHH 
;HH 
}II 	
whileJJ 
(JJ 
trueJJ 
)JJ 
{KK 	
ifMM 
(MM 
dataMM 
!=MM 
$numMM 
)MM 
{NN 
IOOO 
.OO 
	WriteLineOO 
(OO 
$strOO #
+OO$ %
dataOO& *
+OO+ ,
$strOO- 2
+OO3 4
(OO5 6
$numOO6 9
/OO: ;
dataOO< @
)OO@ A
+OOB C
$strOOD H
)OOH I
;OOI J
}PP 
elseQQ 
{RR 
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS D
)SSD E
;SSE F
}TT 
breakUU 
;UU 
}VV 	
}WW 
publicYY 

overrideYY 
voidYY 
GoodYY 
(YY 
)YY 
{ZZ 
GoodG2B[[ 
([[ 
)[[ 
;[[ 
GoodB2G\\ 
(\\ 
)\\ 
;\\ 
}]] 
}__ 
}`` Õ
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_17.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_17 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data## 
=## 
$num## 
;## 
for$$ 
($$ 
int$$ 
j$$ 
=$$ 
$num$$ 
;$$ 
j$$ 
<$$ 
$num$$ 
;$$ 
j$$  
++$$  "
)$$" #
{%% 	
IO(( 
.(( 
	WriteLine(( 
((( 
$str(( $
+((% &
data((' +
+((, -
$str((. 3
+((4 5
(((6 7
$num((7 :
/((; <
data((= A
)((A B
+((C D
$str((E I
)((I J
;((J K
})) 	
}** 
private.. 
void.. 
GoodG2B.. 
(.. 
).. 
{// 
int00 
data00 
;00 
data22 
=22 
$num22 
;22 
for33 
(33 
int33 
j33 
=33 
$num33 
;33 
j33 
<33 
$num33 
;33 
j33  
++33  "
)33" #
{44 	
IO77 
.77 
	WriteLine77 
(77 
$str77 $
+77% &
data77' +
+77, -
$str77. 3
+774 5
(776 7
$num777 :
/77; <
data77= A
)77A B
+77C D
$str77E I
)77I J
;77J K
}88 	
}99 
private<< 
void<< 
GoodB2G<< 
(<< 
)<< 
{== 
int>> 
data>> 
;>> 
data?? 
=?? 
$num?? 
;?? 
for@@ 
(@@ 
int@@ 
k@@ 
=@@ 
$num@@ 
;@@ 
k@@ 
<@@ 
$num@@ 
;@@ 
k@@  
++@@  "
)@@" #
{AA 	
ifCC 
(CC 
dataCC 
!=CC 
$numCC 
)CC 
{DD 
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE #
+EE$ %
dataEE& *
+EE+ ,
$strEE- 2
+EE3 4
(EE5 6
$numEE6 9
/EE: ;
dataEE< @
)EE@ A
+EEB C
$strEED H
)EEH I
;EEI J
}FF 
elseGG 
{HH 
IOII 
.II 
	WriteLineII 
(II 
$strII D
)IID E
;IIE F
}JJ 
}KK 	
}LL 
publicNN 

overrideNN 
voidNN 
GoodNN 
(NN 
)NN 
{OO 
GoodG2BPP 
(PP 
)PP 
;PP 
GoodB2GQQ 
(QQ 
)QQ 
;QQ 
}RR 
}TT 
}UU ª.
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_21.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_21 /
:0 1
AbstractTestCase2 B
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public 

override 
void 
Bad 
( 
) 
{   
int!! 
data!! 
;!! 
data"" 
="" 
$num"" 
;"" 

badPrivate## 
=## 
true## 
;## 
BadSink$$ 
($$ 
data$$ 
)$$ 
;$$ 
}%% 
private'' 
void'' 
BadSink'' 
('' 
int'' 
data'' !
)''" #
{(( 
if)) 

()) 

badPrivate)) 
))) 
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
}// 
private22 
bool22 
goodB2G1Private22  
=22! "
false22# (
;22( )
private33 
bool33 
goodB2G2Private33  
=33! "
false33# (
;33( )
private44 
bool44 
goodG2BPrivate44 
=44  !
false44" '
;44' (
public66 

override66 
void66 
Good66 
(66 
)66 
{77 
GoodB2G188 
(88 
)88 
;88 
GoodB2G299 
(99 
)99 
;99 
GoodG2B:: 
(:: 
):: 
;:: 
};; 
private>> 
void>> 
GoodB2G1>> 
(>> 
)>> 
{?? 
int@@ 
data@@ 
;@@ 
dataAA 
=AA 
$numAA 
;AA 
goodB2G1PrivateBB 
=BB 
falseBB 
;BB  
GoodB2G1SinkCC 
(CC 
dataCC 
)CC 
;CC 
}DD 
privateFF 
voidFF 
GoodB2G1SinkFF 
(FF 
intFF !
dataFF" &
)FF' (
{GG 
ifHH 

(HH 
goodB2G1PrivateHH 
)HH 
{II 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK /
)KK/ 0
;KK0 1
}LL 	
elseMM 
{NN 	
ifPP 
(PP 
dataPP 
!=PP 
$numPP 
)PP 
{QQ 
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR #
+RR$ %
dataRR& *
+RR+ ,
$strRR- 2
+RR3 4
(RR5 6
$numRR6 9
/RR: ;
dataRR< @
)RR@ A
+RRB C
$strRRD H
)RRH I
;RRI J
}SS 
elseTT 
{UU 
IOVV 
.VV 
	WriteLineVV 
(VV 
$strVV D
)VVD E
;VVE F
}WW 
}XX 	
}YY 
private\\ 
void\\ 
GoodB2G2\\ 
(\\ 
)\\ 
{]] 
int^^ 
data^^ 
;^^ 
data__ 
=__ 
$num__ 
;__ 
goodB2G2Private`` 
=`` 
true`` 
;`` 
GoodB2G2Sinkaa 
(aa 
dataaa 
)aa 
;aa 
}bb 
privatedd 
voiddd 
GoodB2G2Sinkdd 
(dd 
intdd !
datadd" &
)dd' (
{ee 
ifff 

(ff 
goodB2G2Privateff 
)ff 
{gg 	
ifii 
(ii 
dataii 
!=ii 
$numii 
)ii 
{jj 
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk #
+kk$ %
datakk& *
+kk+ ,
$strkk- 2
+kk3 4
(kk5 6
$numkk6 9
/kk: ;
datakk< @
)kk@ A
+kkB C
$strkkD H
)kkH I
;kkI J
}ll 
elsemm 
{nn 
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo D
)ooD E
;ooE F
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodG2Buu 
(uu 
)uu 
{vv 
intww 
dataww 
;ww 
datayy 
=yy 
$numyy 
;yy 
goodG2BPrivatezz 
=zz 
truezz 
;zz 
GoodG2BSink{{ 
({{ 
data{{ 
){{ 
;{{ 
}|| 
private~~ 
void~~ 
GoodG2BSink~~ 
(~~ 
int~~  
data~~! %
)~~& '
{ 
if
ÄÄ 

(
ÄÄ 
goodG2BPrivate
ÄÄ 
)
ÄÄ 
{
ÅÅ 	
IO
ÑÑ 
.
ÑÑ 
	WriteLine
ÑÑ 
(
ÑÑ 
$str
ÑÑ $
+
ÑÑ% &
data
ÑÑ' +
+
ÑÑ, -
$str
ÑÑ. 3
+
ÑÑ4 5
(
ÑÑ6 7
$num
ÑÑ7 :
/
ÑÑ; <
data
ÑÑ= A
)
ÑÑA B
+
ÑÑC D
$str
ÑÑE I
)
ÑÑI J
;
ÑÑJ K
}
ÖÖ 	
}
ÜÜ 
}àà 
}ââ ≤
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_22a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_22a 0
:1 2
AbstractTestCase3 C
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
= 
$num 
; 
data   
=   
$num   
;   
badPublicStatic!! 
=!! 
true!! 
;!! 6
*CWE369_Divide_by_Zero__int_zero_divide_22b"" 2
.""2 3
BadSink""3 :
("": ;
data""; ?
)""@ A
;""A B
}## 
public&& 

static&& 
bool&&  
goodB2G1PublicStatic&& +
=&&, -
false&&. 3
;&&3 4
public'' 

static'' 
bool''  
goodB2G2PublicStatic'' +
='', -
false''. 3
;''3 4
public(( 

static(( 
bool(( 
goodG2BPublicStatic(( *
=((+ ,
false((- 2
;((2 3
public** 

override** 
void** 
Good** 
(** 
)** 
{++ 
GoodB2G1,, 
(,, 
),, 
;,, 
GoodB2G2-- 
(-- 
)-- 
;-- 
GoodG2B.. 
(.. 
).. 
;.. 
}// 
private22 
void22 
GoodB2G122 
(22 
)22 
{33 
int44 
data44 
=44 
$num44 
;44 
data55 
=55 
$num55 
;55  
goodB2G1PublicStatic66 
=66 
false66 $
;66$ %6
*CWE369_Divide_by_Zero__int_zero_divide_22b77 2
.772 3
GoodB2G1Sink773 ?
(77? @
data77@ D
)77E F
;77F G
}88 
private;; 
void;; 
GoodB2G2;; 
(;; 
);; 
{<< 
int== 
data== 
=== 
$num== 
;== 
data>> 
=>> 
$num>> 
;>>  
goodB2G2PublicStatic?? 
=?? 
true?? #
;??# $6
*CWE369_Divide_by_Zero__int_zero_divide_22b@@ 2
.@@2 3
GoodB2G2Sink@@3 ?
(@@? @
data@@@ D
)@@E F
;@@F G
}AA 
privateDD 
voidDD 
GoodG2BDD 
(DD 
)DD 
{EE 
intFF 
dataFF 
=FF 
$numFF 
;FF 
dataHH 
=HH 
$numHH 
;HH 
goodG2BPublicStaticII 
=II 
trueII "
;II" #6
*CWE369_Divide_by_Zero__int_zero_divide_22bJJ 2
.JJ2 3
GoodG2BSinkJJ3 >
(JJ> ?
dataJJ? C
)JJD E
;JJE F
}KK 
}MM 
}NN á 
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_22b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_22b 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
if 

( 6
*CWE369_Divide_by_Zero__int_zero_divide_22a 6
.6 7
badPublicStatic7 F
)F G
{ 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" $
+""% &
data""' +
+"", -
$str"". 3
+""4 5
(""6 7
$num""7 :
/""; <
data""= A
)""A B
+""C D
$str""E I
)""I J
;""J K
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
}** 
public// 

static// 
void// 
GoodB2G1Sink// #
(//# $
int//$ '
data//( ,
)//- .
{00 
if11 

(11 6
*CWE369_Divide_by_Zero__int_zero_divide_22a11 6
.116 7 
goodB2G1PublicStatic117 K
)11K L
{22 	
data55 
=55 
$num55 
;55 
}66 	
else77 
{88 	
if:: 
(:: 
data:: 
!=:: 
$num:: 
):: 
{;; 
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< #
+<<$ %
data<<& *
+<<+ ,
$str<<- 2
+<<3 4
(<<5 6
$num<<6 9
/<<: ;
data<<< @
)<<@ A
+<<B C
$str<<D H
)<<H I
;<<I J
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ D
)@@D E
;@@E F
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2G2SinkFF #
(FF# $
intFF$ '
dataFF( ,
)FF- .
{GG 
ifHH 

(HH 6
*CWE369_Divide_by_Zero__int_zero_divide_22aHH 6
.HH6 7 
goodB2G2PublicStaticHH7 K
)HHK L
{II 	
ifKK 
(KK 
dataKK 
!=KK 
$numKK 
)KK 
{LL 
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM #
+MM$ %
dataMM& *
+MM+ ,
$strMM- 2
+MM3 4
(MM5 6
$numMM6 9
/MM: ;
dataMM< @
)MM@ A
+MMB C
$strMMD H
)MMH I
;MMI J
}NN 
elseOO 
{PP 
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ D
)QQD E
;QQE F
}RR 
}SS 	
elseTT 
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
}ZZ 
public]] 

static]] 
void]] 
GoodG2BSink]] "
(]]" #
int]]# &
data]]' +
)]], -
{^^ 
if__ 

(__ 6
*CWE369_Divide_by_Zero__int_zero_divide_22a__ 6
.__6 7
goodG2BPublicStatic__7 J
)__J K
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc $
+cc% &
datacc' +
+cc, -
$strcc. 3
+cc4 5
(cc6 7
$numcc7 :
/cc; <
datacc= A
)ccA B
+ccC D
$strccE I
)ccI J
;ccJ K
}dd 	
elseee 
{ff 	
dataii 
=ii 
$numii 
;ii 
}jj 	
}kk 
}mm 
}nn â
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_31.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_31 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
dataCopy 
; 
{ 	
int   
data   
;   
data!! 
=!! 
$num!! 
;!! 
dataCopy"" 
="" 
data"" 
;"" 
}## 	
{$$ 	
int%% 
data%% 
=%% 
dataCopy%% 
;%%  
IO(( 
.(( 
	WriteLine(( 
((( 
$str(( $
+((% &
data((' +
+((, -
$str((. 3
+((4 5
(((6 7
$num((7 :
/((; <
data((= A
)((A B
+((C D
$str((E I
)((I J
;((J K
})) 	
}** 
public-- 

override-- 
void-- 
Good-- 
(-- 
)-- 
{.. 
GoodG2B// 
(// 
)// 
;// 
GoodB2G00 
(00 
)00 
;00 
}11 
private44 
void44 
GoodG2B44 
(44 
)44 
{55 
int66 
dataCopy66 
;66 
{77 	
int88 
data88 
;88 
data:: 
=:: 
$num:: 
;:: 
dataCopy;; 
=;; 
data;; 
;;; 
}<< 	
{== 	
int>> 
data>> 
=>> 
dataCopy>> 
;>>  
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA $
+AA% &
dataAA' +
+AA, -
$strAA. 3
+AA4 5
(AA6 7
$numAA7 :
/AA; <
dataAA= A
)AAA B
+AAC D
$strAAE I
)AAI J
;AAJ K
}BB 	
}CC 
privateFF 
voidFF 
GoodB2GFF 
(FF 
)FF 
{GG 
intHH 
dataCopyHH 
;HH 
{II 	
intJJ 
dataJJ 
;JJ 
dataKK 
=KK 
$numKK 
;KK 
dataCopyLL 
=LL 
dataLL 
;LL 
}MM 	
{NN 	
intOO 
dataOO 
=OO 
dataCopyOO 
;OO  
ifQQ 
(QQ 
dataQQ 
!=QQ 
$numQQ 
)QQ 
{RR 
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS #
+SS$ %
dataSS& *
+SS+ ,
$strSS- 2
+SS3 4
(SS5 6
$numSS6 9
/SS: ;
dataSS< @
)SS@ A
+SSB C
$strSSD H
)SSH I
;SSI J
}TT 
elseUU 
{VV 
IOWW 
.WW 
	WriteLineWW 
(WW 
$strWW D
)WWD E
;WWE F
}XX 
}YY 	
}ZZ 
}\\ 
}]] ù
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_41.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_41 /
:0 1
AbstractTestCase2 B
{ 
private 
static 
void 
BadSink 
(  
int  #
data$ (
)) *
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
;%% 
data&& 
=&& 
$num&& 
;&& 
BadSink'' 
('' 
data'' 
)'' 
;'' 
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodG2B-- 
(-- 
)-- 
;-- 
GoodB2G.. 
(.. 
).. 
;.. 
}// 
private11 
static11 
void11 
GoodG2BSink11 #
(11# $
int11$ '
data11( ,
)11- .
{22 
IO55 

.55
 
	WriteLine55 
(55 
$str55  
+55! "
data55# '
+55( )
$str55* /
+550 1
(552 3
$num553 6
/557 8
data559 =
)55= >
+55? @
$str55A E
)55E F
;55F G
}66 
private99 
static99 
void99 
GoodG2B99 
(99  
)99  !
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== 
GoodG2BSink>> 
(>> 
data>> 
)>> 
;>> 
}?? 
privateAA 
staticAA 
voidAA 
GoodB2GSinkAA #
(AA# $
intAA$ '
dataAA( ,
)AA- .
{BB 
ifDD 

(DD 
dataDD 
!=DD 
$numDD 
)DD 
{EE 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
/FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
elseHH 
{II 	
IOJJ 
.JJ 
	WriteLineJJ 
(JJ 
$strJJ @
)JJ@ A
;JJA B
}KK 	
}LL 
privateOO 
staticOO 
voidOO 
GoodB2GOO 
(OO  
)OO  !
{PP 
intQQ 
dataQQ 
;QQ 
dataRR 
=RR 
$numRR 
;RR 
GoodB2GSinkSS 
(SS 
dataSS 
)SS 
;SS 
}TT 
}VV 
}WW º
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_42.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_42 /
:0 1
AbstractTestCase2 B
{ 
private 
static 
int 
	BadSource  
(  !
)! "
{ 
int 
data 
; 
data 
= 
$num 
; 
return   
data   
;   
}!! 
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
=%% 
	BadSource%% 
(%% 
)%% 
;%% 
IO(( 

.((
 
	WriteLine(( 
((( 
$str((  
+((! "
data((# '
+((( )
$str((* /
+((0 1
(((2 3
$num((3 6
/((7 8
data((9 =
)((= >
+((? @
$str((A E
)((E F
;((F G
})) 
private-- 
static-- 
int-- 
GoodG2BSource-- $
(--$ %
)--% &
{.. 
int// 
data// 
;// 
data11 
=11 
$num11 
;11 
return22 
data22 
;22 
}33 
private55 
static55 
void55 
GoodG2B55 
(55  
)55  !
{66 
int77 
data77 
=77 
GoodG2BSource77  
(77  !
)77! "
;77" #
IO:: 

.::
 
	WriteLine:: 
(:: 
$str::  
+::! "
data::# '
+::( )
$str::* /
+::0 1
(::2 3
$num::3 6
/::7 8
data::9 =
)::= >
+::? @
$str::A E
)::E F
;::F G
};; 
private>> 
static>> 
int>> 
GoodB2GSource>> $
(>>$ %
)>>% &
{?? 
int@@ 
data@@ 
;@@ 
dataAA 
=AA 
$numAA 
;AA 
returnBB 
dataBB 
;BB 
}CC 
privateEE 
staticEE 
voidEE 
GoodB2GEE 
(EE  
)EE  !
{FF 
intGG 
dataGG 
=GG 
GoodB2GSourceGG  
(GG  !
)GG! "
;GG" #
ifII 

(II 
dataII 
!=II 
$numII 
)II 
{JJ 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK 
+KK  !
dataKK" &
+KK' (
$strKK) .
+KK/ 0
(KK1 2
$numKK2 5
/KK6 7
dataKK8 <
)KK< =
+KK> ?
$strKK@ D
)KKD E
;KKE F
}LL 	
elseMM 
{NN 	
IOOO 
.OO 
	WriteLineOO 
(OO 
$strOO @
)OO@ A
;OOA B
}PP 	
}QQ 
publicSS 

overrideSS 
voidSS 
GoodSS 
(SS 
)SS 
{TT 
GoodG2BUU 
(UU 
)UU 
;UU 
GoodB2GVV 
(VV 
)VV 
;VV 
}WW 
}YY 
}ZZ ·
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_45.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_divide_45 /
:0 1
AbstractTestCase2 B
{ 
private 
int 
dataBad 
; 
private 
int 
dataGoodG2B 
; 
private 
int 
dataGoodB2G 
; 
private   
void   
BadSink   
(   
)   
{!! 
int"" 
data"" 
="" 
dataBad"" 
;"" 
IO%% 

.%%
 
	WriteLine%% 
(%% 
$str%%  
+%%! "
data%%# '
+%%( )
$str%%* /
+%%0 1
(%%2 3
$num%%3 6
/%%7 8
data%%9 =
)%%= >
+%%? @
$str%%A E
)%%E F
;%%F G
}&& 
public(( 

override(( 
void(( 
Bad(( 
((( 
)(( 
{)) 
int** 
data** 
;** 
data++ 
=++ 
$num++ 
;++ 
dataBad,, 
=,, 
data,, 
;,, 
BadSink-- 
(-- 
)-- 
;-- 
}.. 
public11 

override11 
void11 
Good11 
(11 
)11 
{22 
GoodG2B33 
(33 
)33 
;33 
GoodB2G44 
(44 
)44 
;44 
}55 
private77 
void77 
GoodG2BSink77 
(77 
)77 
{88 
int99 
data99 
=99 
dataGoodG2B99 
;99 
IO<< 

.<<
 
	WriteLine<< 
(<< 
$str<<  
+<<! "
data<<# '
+<<( )
$str<<* /
+<<0 1
(<<2 3
$num<<3 6
/<<7 8
data<<9 =
)<<= >
+<<? @
$str<<A E
)<<E F
;<<F G
}== 
private@@ 
void@@ 
GoodG2B@@ 
(@@ 
)@@ 
{AA 
intBB 
dataBB 
;BB 
dataDD 
=DD 
$numDD 
;DD 
dataGoodG2BEE 
=EE 
dataEE 
;EE 
GoodG2BSinkFF 
(FF 
)FF 
;FF 
}GG 
privateII 
voidII 
GoodB2GSinkII 
(II 
)II 
{JJ 
intKK 
dataKK 
=KK 
dataGoodB2GKK 
;KK 
ifMM 

(MM 
dataMM 
!=MM 
$numMM 
)MM 
{NN 	
IOOO 
.OO 
	WriteLineOO 
(OO 
$strOO 
+OO  !
dataOO" &
+OO' (
$strOO) .
+OO/ 0
(OO1 2
$numOO2 5
/OO6 7
dataOO8 <
)OO< =
+OO> ?
$strOO@ D
)OOD E
;OOE F
}PP 	
elseQQ 
{RR 	
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS @
)SS@ A
;SSA B
}TT 	
}UU 
privateXX 
voidXX 
GoodB2GXX 
(XX 
)XX 
{YY 
intZZ 
dataZZ 
;ZZ 
data[[ 
=[[ 
$num[[ 
;[[ 
dataGoodB2G\\ 
=\\ 
data\\ 
;\\ 
GoodB2GSink]] 
(]] 
)]] 
;]] 
}^^ 
}`` 
}aa Í
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_51a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_51a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 6
*CWE369_Divide_by_Zero__int_zero_divide_51b 2
.2 3
BadSink3 :
(: ;
data; ?
)A B
;B C
} 
public"" 

override"" 
void"" 
Good"" 
("" 
)"" 
{## 
GoodG2B$$ 
($$ 
)$$ 
;$$ 
GoodB2G%% 
(%% 
)%% 
;%% 
}&& 
private)) 
void)) 
GoodG2B)) 
()) 
))) 
{** 
int++ 
data++ 
;++ 
data-- 
=-- 
$num-- 
;-- 6
*CWE369_Divide_by_Zero__int_zero_divide_51b.. 2
...2 3
GoodG2BSink..3 >
(..> ?
data..? C
)..E F
;..F G
}// 
private22 
void22 
GoodB2G22 
(22 
)22 
{33 
int44 
data44 
;44 
data55 
=55 
$num55 
;55 6
*CWE369_Divide_by_Zero__int_zero_divide_51b66 2
.662 3
GoodB2GSink663 >
(66> ?
data66? C
)66E F
;66F G
}77 
}99 
}:: ‡
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_51b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_51b 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Í
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_52a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_52a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 6
*CWE369_Divide_by_Zero__int_zero_divide_52b 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public"" 

override"" 
void"" 
Good"" 
("" 
)"" 
{## 
GoodG2B$$ 
($$ 
)$$ 
;$$ 
GoodB2G%% 
(%% 
)%% 
;%% 
}&& 
private)) 
void)) 
GoodG2B)) 
()) 
))) 
{** 
int++ 
data++ 
;++ 
data-- 
=-- 
$num-- 
;-- 6
*CWE369_Divide_by_Zero__int_zero_divide_52b.. 2
...2 3
GoodG2BSink..3 >
(..> ?
data..? C
)..D E
;..E F
}// 
private22 
void22 
GoodB2G22 
(22 
)22 
{33 
int44 
data44 
;44 
data55 
=55 
$num55 
;55 6
*CWE369_Divide_by_Zero__int_zero_divide_52b66 2
.662 3
GoodB2GSink663 >
(66> ?
data66? C
)66D E
;66E F
}77 
}99 
}:: Ï

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_52b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_52b 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 6
*CWE369_Divide_by_Zero__int_zero_divide_52c 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 6
*CWE369_Divide_by_Zero__int_zero_divide_52c&& 2
.&&2 3
GoodG2BSink&&3 >
(&&> ?
data&&? C
)&&D E
;&&E F
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 6
*CWE369_Divide_by_Zero__int_zero_divide_52c,, 2
.,,2 3
GoodB2GSink,,3 >
(,,> ?
data,,? C
),,D E
;,,E F
}-- 
}// 
}00 ‡
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_52c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_52c 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Í
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_53a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_53a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 6
*CWE369_Divide_by_Zero__int_zero_divide_53b 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public"" 

override"" 
void"" 
Good"" 
("" 
)"" 
{## 
GoodG2B$$ 
($$ 
)$$ 
;$$ 
GoodB2G%% 
(%% 
)%% 
;%% 
}&& 
private)) 
void)) 
GoodG2B)) 
()) 
))) 
{** 
int++ 
data++ 
;++ 
data-- 
=-- 
$num-- 
;-- 6
*CWE369_Divide_by_Zero__int_zero_divide_53b.. 2
...2 3
GoodG2BSink..3 >
(..> ?
data..? C
)..D E
;..E F
}// 
private22 
void22 
GoodB2G22 
(22 
)22 
{33 
int44 
data44 
;44 
data55 
=55 
$num55 
;55 6
*CWE369_Divide_by_Zero__int_zero_divide_53b66 2
.662 3
GoodB2GSink663 >
(66> ?
data66? C
)66D E
;66E F
}77 
}99 
}:: Ï

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_53b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_53b 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 6
*CWE369_Divide_by_Zero__int_zero_divide_53c 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 6
*CWE369_Divide_by_Zero__int_zero_divide_53c&& 2
.&&2 3
GoodG2BSink&&3 >
(&&> ?
data&&? C
)&&D E
;&&E F
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 6
*CWE369_Divide_by_Zero__int_zero_divide_53c,, 2
.,,2 3
GoodB2GSink,,3 >
(,,> ?
data,,? C
),,D E
;,,E F
}-- 
}// 
}00 Ï

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_53c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_53c 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 6
*CWE369_Divide_by_Zero__int_zero_divide_53d 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 6
*CWE369_Divide_by_Zero__int_zero_divide_53d&& 2
.&&2 3
GoodG2BSink&&3 >
(&&> ?
data&&? C
)&&D E
;&&E F
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 6
*CWE369_Divide_by_Zero__int_zero_divide_53d,, 2
.,,2 3
GoodB2GSink,,3 >
(,,> ?
data,,? C
),,D E
;,,E F
}-- 
}// 
}00 ‡
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_53d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_53d 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Í
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_54a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_54a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 6
*CWE369_Divide_by_Zero__int_zero_divide_54b 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public"" 

override"" 
void"" 
Good"" 
("" 
)"" 
{## 
GoodG2B$$ 
($$ 
)$$ 
;$$ 
GoodB2G%% 
(%% 
)%% 
;%% 
}&& 
private)) 
void)) 
GoodG2B)) 
()) 
))) 
{** 
int++ 
data++ 
;++ 
data-- 
=-- 
$num-- 
;-- 6
*CWE369_Divide_by_Zero__int_zero_divide_54b.. 2
...2 3
GoodG2BSink..3 >
(..> ?
data..? C
)..D E
;..E F
}// 
private22 
void22 
GoodB2G22 
(22 
)22 
{33 
int44 
data44 
;44 
data55 
=55 
$num55 
;55 6
*CWE369_Divide_by_Zero__int_zero_divide_54b66 2
.662 3
GoodB2GSink663 >
(66> ?
data66? C
)66D E
;66E F
}77 
}99 
}:: Ï

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_54b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_54b 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 6
*CWE369_Divide_by_Zero__int_zero_divide_54c 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 6
*CWE369_Divide_by_Zero__int_zero_divide_54c&& 2
.&&2 3
GoodG2BSink&&3 >
(&&> ?
data&&? C
)&&D E
;&&E F
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 6
*CWE369_Divide_by_Zero__int_zero_divide_54c,, 2
.,,2 3
GoodB2GSink,,3 >
(,,> ?
data,,? C
),,D E
;,,E F
}-- 
}// 
}00 Ï

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_54c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_54c 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 6
*CWE369_Divide_by_Zero__int_zero_divide_54d 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 6
*CWE369_Divide_by_Zero__int_zero_divide_54d&& 2
.&&2 3
GoodG2BSink&&3 >
(&&> ?
data&&? C
)&&D E
;&&E F
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 6
*CWE369_Divide_by_Zero__int_zero_divide_54d,, 2
.,,2 3
GoodB2GSink,,3 >
(,,> ?
data,,? C
),,D E
;,,E F
}-- 
}// 
}00 Ï

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_54d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_54d 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 6
*CWE369_Divide_by_Zero__int_zero_divide_54e 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 6
*CWE369_Divide_by_Zero__int_zero_divide_54e&& 2
.&&2 3
GoodG2BSink&&3 >
(&&> ?
data&&? C
)&&D E
;&&E F
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 6
*CWE369_Divide_by_Zero__int_zero_divide_54e,, 2
.,,2 3
GoodB2GSink,,3 >
(,,> ?
data,,? C
),,D E
;,,E F
}-- 
}// 
}00 ‡
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_54e.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_54e 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str**  
+**! "
data**# '
+**( )
$str*** /
+**0 1
(**2 3
$num**3 6
/**7 8
data**9 =
)**= >
+**? @
$str**A E
)**E F
;**F G
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
/336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< È
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_61a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_61a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
= 6
*CWE369_Divide_by_Zero__int_zero_divide_61b =
.= >
	BadSource> G
(G H
)H I
;I J
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
GoodB2G(( 
((( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
),,  !
{-- 
int.. 
data.. 
=.. 6
*CWE369_Divide_by_Zero__int_zero_divide_61b.. =
...= >
GoodG2BSource..> K
(..K L
)..L M
;..M N
IO11 

.11
 
	WriteLine11 
(11 
$str11  
+11! "
data11# '
+11( )
$str11* /
+110 1
(112 3
$num113 6
/117 8
data119 =
)11= >
+11? @
$str11A E
)11E F
;11F G
}22 
private55 
static55 
void55 
GoodB2G55 
(55  
)55  !
{66 
int77 
data77 
=77 6
*CWE369_Divide_by_Zero__int_zero_divide_61b77 =
.77= >
GoodB2GSource77> K
(77K L
)77L M
;77M N
if99 

(99 
data99 
!=99 
$num99 
)99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; 
+;;  !
data;;" &
+;;' (
$str;;) .
+;;/ 0
(;;1 2
$num;;2 5
/;;6 7
data;;8 <
);;< =
+;;> ?
$str;;@ D
);;D E
;;;E F
}<< 	
else== 
{>> 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? @
)??@ A
;??A B
}@@ 	
}AA 
}CC 
}DD ®

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_61b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_61b 0
{ 
public 

static 
int 
	BadSource 
(  
)  !
{ 
int 
data 
; 
data 
= 
$num 
; 
return 
data 
; 
} 
public$$ 

static$$ 
int$$ 
GoodG2BSource$$ #
($$# $
)$$$ %
{%% 
int&& 
data&& 
;&& 
data(( 
=(( 
$num(( 
;(( 
return)) 
data)) 
;)) 
}** 
public-- 

static-- 
int-- 
GoodB2GSource-- #
(--# $
)--$ %
{.. 
int// 
data// 
;// 
data00 
=00 
$num00 
;00 
return11 
data11 
;11 
}22 
}44 
}55 ®
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_66a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_66a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 
int 
[ 
] 
	dataArray 
= 
new 
int !
[! "
$num" #
]# $
;$ %
	dataArray 
[ 
$num 
] 
= 
data 
; 6
*CWE369_Divide_by_Zero__int_zero_divide_66b   2
.  2 3
BadSink  3 :
(  : ;
	dataArray  ; D
)  F G
;  G H
}!! 
public$$ 

override$$ 
void$$ 
Good$$ 
($$ 
)$$ 
{%% 
GoodG2B&& 
(&& 
)&& 
;&& 
GoodB2G'' 
('' 
)'' 
;'' 
}(( 
private++ 
static++ 
void++ 
GoodG2B++ 
(++  
)++  !
{,, 
int-- 
data-- 
;-- 
data// 
=// 
$num// 
;// 
int00 
[00 
]00 
	dataArray00 
=00 
new00 
int00 !
[00! "
$num00" #
]00# $
;00$ %
	dataArray11 
[11 
$num11 
]11 
=11 
data11 
;11 6
*CWE369_Divide_by_Zero__int_zero_divide_66b22 2
.222 3
GoodG2BSink223 >
(22> ?
	dataArray22? H
)22J K
;22K L
}33 
private66 
static66 
void66 
GoodB2G66 
(66  
)66  !
{77 
int88 
data88 
;88 
data99 
=99 
$num99 
;99 
int:: 
[:: 
]:: 
	dataArray:: 
=:: 
new:: 
int:: !
[::! "
$num::" #
]::# $
;::$ %
	dataArray;; 
[;; 
$num;; 
];; 
=;; 
data;; 
;;; 6
*CWE369_Divide_by_Zero__int_zero_divide_66b<< 2
.<<2 3
GoodB2GSink<<3 >
(<<> ?
	dataArray<<? H
)<<J K
;<<K L
}== 
}?? 
}@@ ·
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_66b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_66b 0
{ 
public 

static 
void 
BadSink 
( 
int "
[" #
]# $
	dataArray% .
)/ 0
{ 
int 
data 
= 
	dataArray 
[ 
$num 
] 
;  
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
int''# &
[''& '
]''' (
	dataArray'') 2
)''3 4
{(( 
int)) 
data)) 
=)) 
	dataArray)) 
[)) 
$num)) 
])) 
;))  
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
int00# &
[00& '
]00' (
	dataArray00) 2
)003 4
{11 
int22 
data22 
=22 
	dataArray22 
[22 
$num22 
]22 
;22  
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ı
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_67a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_67a 0
:1 2
AbstractTestCase3 C
{ 
public 

class 
	Container 
{ 
public 
int 
containerOne 
;  
} 
public 

override 
void 
Bad 
( 
) 
{   
int!! 
data!! 
;!! 
data"" 
="" 
$num"" 
;"" 
	Container## 
dataContainer## 
=##  !
new##" %
	Container##& /
(##/ 0
)##0 1
;##1 2
dataContainer$$ 
.$$ 
containerOne$$ "
=$$# $
data$$% )
;$$) *6
*CWE369_Divide_by_Zero__int_zero_divide_67b%% 2
.%%2 3
BadSink%%3 :
(%%: ;
dataContainer%%; H
)%%J K
;%%K L
}&& 
public)) 

override)) 
void)) 
Good)) 
()) 
))) 
{** 
GoodG2B++ 
(++ 
)++ 
;++ 
GoodB2G,, 
(,, 
),, 
;,, 
}-- 
private00 
static00 
void00 
GoodG2B00 
(00  
)00  !
{11 
int22 
data22 
;22 
data44 
=44 
$num44 
;44 
	Container55 
dataContainer55 
=55  !
new55" %
	Container55& /
(55/ 0
)550 1
;551 2
dataContainer66 
.66 
containerOne66 "
=66# $
data66% )
;66) *6
*CWE369_Divide_by_Zero__int_zero_divide_67b77 2
.772 3
GoodG2BSink773 >
(77> ?
dataContainer77? L
)77N O
;77O P
}88 
private;; 
static;; 
void;; 
GoodB2G;; 
(;;  
);;  !
{<< 
int== 
data== 
;== 
data>> 
=>> 
$num>> 
;>> 
	Container?? 
dataContainer?? 
=??  !
new??" %
	Container??& /
(??/ 0
)??0 1
;??1 2
dataContainer@@ 
.@@ 
containerOne@@ "
=@@# $
data@@% )
;@@) *6
*CWE369_Divide_by_Zero__int_zero_divide_67bAA 2
.AA2 3
GoodB2GSinkAA3 >
(AA> ?
dataContainerAA? L
)AAN O
;AAO P
}BB 
}DD 
}EE Ò
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_67b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_67b 0
{ 
public 

static 
void 
BadSink 
( 6
*CWE369_Divide_by_Zero__int_zero_divide_67a I
.I J
	ContainerJ S
dataContainerT a
)b c
{ 
int 
data 
= 
dataContainer  
.  !
containerOne! -
;- .
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #6
*CWE369_Divide_by_Zero__int_zero_divide_67a''# M
.''M N
	Container''N W
dataContainer''X e
)''f g
{(( 
int)) 
data)) 
=)) 
dataContainer))  
.))  !
containerOne))! -
;))- .
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #6
*CWE369_Divide_by_Zero__int_zero_divide_67a00# M
.00M N
	Container00N W
dataContainer00X e
)00f g
{11 
int22 
data22 
=22 
dataContainer22  
.22  !
containerOne22! -
;22- .
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? †
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_68a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_68a 0
:1 2
AbstractTestCase3 C
{ 
public 

static 
int 
data 
; 
public 

override 
void 
Bad 
( 
) 
{ 
data 
= 
$num 
; 6
*CWE369_Divide_by_Zero__int_zero_divide_68b 2
.2 3
BadSink3 :
(: ;
); <
;< =
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
static** 
void** 
GoodG2B** 
(**  
)**  !
{++ 
data-- 
=-- 
$num-- 
;-- 6
*CWE369_Divide_by_Zero__int_zero_divide_68b.. 2
...2 3
GoodG2BSink..3 >
(..> ?
)..? @
;..@ A
}// 
private22 
static22 
void22 
GoodB2G22 
(22  
)22  !
{33 
data44 
=44 
$num44 
;44 6
*CWE369_Divide_by_Zero__int_zero_divide_68b55 2
.552 3
GoodB2GSink553 >
(55> ?
)55? @
;55@ A
}66 
}88 
}99 ≈
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_68b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_68b 0
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
int 
data 
= 6
*CWE369_Divide_by_Zero__int_zero_divide_68a =
.= >
data> B
;B C
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
)''# $
{(( 
int)) 
data)) 
=)) 6
*CWE369_Divide_by_Zero__int_zero_divide_68a)) =
.))= >
data))> B
;))B C
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,,  
+,,! "
data,,# '
+,,( )
$str,,* /
+,,0 1
(,,2 3
$num,,3 6
/,,7 8
data,,9 =
),,= >
+,,? @
$str,,A E
),,E F
;,,F G
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
)00# $
{11 
int22 
data22 
=22 6
*CWE369_Divide_by_Zero__int_zero_divide_68a22 =
.22= >
data22> B
;22B C
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
/666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ®
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_71a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_71a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 6
*CWE369_Divide_by_Zero__int_zero_divide_71b 2
.2 3
BadSink3 :
(: ;
(; <
Object< B
)B C
dataC G
)I J
;J K
} 
public"" 

override"" 
void"" 
Good"" 
("" 
)"" 
{## 
GoodG2B$$ 
($$ 
)$$ 
;$$ 
GoodB2G%% 
(%% 
)%% 
;%% 
}&& 
private)) 
static)) 
void)) 
GoodG2B)) 
())  
)))  !
{** 
int++ 
data++ 
;++ 
data-- 
=-- 
$num-- 
;-- 6
*CWE369_Divide_by_Zero__int_zero_divide_71b.. 2
...2 3
GoodG2BSink..3 >
(..> ?
(..? @
Object..@ F
)..F G
data..G K
)..M N
;..N O
}// 
private22 
static22 
void22 
GoodB2G22 
(22  
)22  !
{33 
int44 
data44 
;44 
data55 
=55 
$num55 
;55 6
*CWE369_Divide_by_Zero__int_zero_divide_71b66 2
.662 3
GoodB2GSink663 >
(66> ?
(66? @
Object66@ F
)66F G
data66G K
)66M N
;66N O
}77 
}99 
}:: ì
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_71b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_71b 0
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
int 
data 
= 
( 
int 
) 

dataObject "
;" #
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
Object((# )

dataObject((* 4
)((5 6
{)) 
int** 
data** 
=** 
(** 
int** 
)** 

dataObject** "
;**" #
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
Object11# )

dataObject11* 4
)115 6
{22 
int33 
data33 
=33 
(33 
int33 
)33 

dataObject33 "
;33" #
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ò
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_72a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_72a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 
	Hashtable 
dataHashtable 
=  !
new" %
	Hashtable& /
(/ 0
$num0 1
)1 2
;2 3
dataHashtable   
.   
Add   
(   
$num   
,   
data   !
)  ! "
;  " #
dataHashtable!! 
.!! 
Add!! 
(!! 
$num!! 
,!! 
data!! !
)!!! "
;!!" #
dataHashtable"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" !
)""! "
;""" #6
*CWE369_Divide_by_Zero__int_zero_divide_72b## 2
.##2 3
BadSink##3 :
(##: ;
dataHashtable##; H
)##J K
;##K L
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
)'' 
{(( 
GoodG2B)) 
()) 
))) 
;)) 
GoodB2G** 
(** 
)** 
;** 
}++ 
private.. 
static.. 
void.. 
GoodG2B.. 
(..  
)..  !
{// 
int00 
data00 
;00 
data22 
=22 
$num22 
;22 
	Hashtable33 
dataHashtable33 
=33  !
new33" %
	Hashtable33& /
(33/ 0
$num330 1
)331 2
;332 3
dataHashtable44 
.44 
Add44 
(44 
$num44 
,44 
data44 !
)44! "
;44" #
dataHashtable55 
.55 
Add55 
(55 
$num55 
,55 
data55 !
)55! "
;55" #
dataHashtable66 
.66 
Add66 
(66 
$num66 
,66 
data66 !
)66! "
;66" #6
*CWE369_Divide_by_Zero__int_zero_divide_72b77 2
.772 3
GoodG2BSink773 >
(77> ?
dataHashtable77? L
)77N O
;77O P
}88 
private;; 
static;; 
void;; 
GoodB2G;; 
(;;  
);;  !
{<< 
int== 
data== 
;== 
data>> 
=>> 
$num>> 
;>> 
	Hashtable?? 
dataHashtable?? 
=??  !
new??" %
	Hashtable??& /
(??/ 0
$num??0 1
)??1 2
;??2 3
dataHashtable@@ 
.@@ 
Add@@ 
(@@ 
$num@@ 
,@@ 
data@@ !
)@@! "
;@@" #
dataHashtableAA 
.AA 
AddAA 
(AA 
$numAA 
,AA 
dataAA !
)AA! "
;AA" #
dataHashtableBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB !
)BB! "
;BB" #6
*CWE369_Divide_by_Zero__int_zero_divide_72bCC 2
.CC2 3
GoodB2GSinkCC3 >
(CC> ?
dataHashtableCC? L
)CCN O
;CCO P
}DD 
}FF 
}GG æ
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_72b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_72b 0
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
int 
data 
= 
( 
int 
) 
dataHashtable &
[& '
$num' (
]( )
;) *
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
	Hashtable((# ,
dataHashtable((- :
)((; <
{)) 
int** 
data** 
=** 
(** 
int** 
)** 
dataHashtable** &
[**& '
$num**' (
]**( )
;**) *
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
	Hashtable11# ,
dataHashtable11- :
)11; <
{22 
int33 
data33 
=33 
(33 
int33 
)33 
dataHashtable33 &
[33& '
$num33' (
]33( )
;33) *
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ å
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_73a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_73a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 

LinkedList 
< 
int 
> 
dataLinkedList &
=' (
new) ,

LinkedList- 7
<7 8
int8 ;
>; <
(< =
)= >
;> ?
dataLinkedList   
.   
AddLast   
(   
data   #
)  # $
;  $ %
dataLinkedList!! 
.!! 
AddLast!! 
(!! 
data!! #
)!!# $
;!!$ %
dataLinkedList"" 
."" 
AddLast"" 
("" 
data"" #
)""# $
;""$ %6
*CWE369_Divide_by_Zero__int_zero_divide_73b## 2
.##2 3
BadSink##3 :
(##: ;
dataLinkedList##; I
)##K L
;##L M
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
)'' 
{(( 
GoodG2B)) 
()) 
))) 
;)) 
GoodB2G** 
(** 
)** 
;** 
}++ 
private.. 
static.. 
void.. 
GoodG2B.. 
(..  
)..  !
{// 
int00 
data00 
;00 
data22 
=22 
$num22 
;22 

LinkedList33 
<33 
int33 
>33 
dataLinkedList33 &
=33' (
new33) ,

LinkedList33- 7
<337 8
int338 ;
>33; <
(33< =
)33= >
;33> ?
dataLinkedList44 
.44 
AddLast44 
(44 
data44 #
)44# $
;44$ %
dataLinkedList55 
.55 
AddLast55 
(55 
data55 #
)55# $
;55$ %
dataLinkedList66 
.66 
AddLast66 
(66 
data66 #
)66# $
;66$ %6
*CWE369_Divide_by_Zero__int_zero_divide_73b77 2
.772 3
GoodG2BSink773 >
(77> ?
dataLinkedList77? M
)77O P
;77P Q
}88 
private;; 
static;; 
void;; 
GoodB2G;; 
(;;  
);;  !
{<< 
int== 
data== 
;== 
data>> 
=>> 
$num>> 
;>> 

LinkedList?? 
<?? 
int?? 
>?? 
dataLinkedList?? &
=??' (
new??) ,

LinkedList??- 7
<??7 8
int??8 ;
>??; <
(??< =
)??= >
;??> ?
dataLinkedList@@ 
.@@ 
AddLast@@ 
(@@ 
data@@ #
)@@# $
;@@$ %
dataLinkedListAA 
.AA 
AddLastAA 
(AA 
dataAA #
)AA# $
;AA$ %
dataLinkedListBB 
.BB 
AddLastBB 
(BB 
dataBB #
)BB# $
;BB$ %6
*CWE369_Divide_by_Zero__int_zero_divide_73bCC 2
.CC2 3
GoodB2GSinkCC3 >
(CC> ?
dataLinkedListCC? M
)CCO P
;CCP Q
}DD 
}FF 
}GG Ä
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_73b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_73b 0
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
int* -
>- .
dataLinkedList/ =
)> ?
{ 
int 
data 
= 
dataLinkedList !
.! "
Last" &
.& '
Value' ,
;, -
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #

LinkedList((# -
<((- .
int((. 1
>((1 2
dataLinkedList((3 A
)((B C
{)) 
int** 
data** 
=** 
dataLinkedList** !
.**! "
Last**" &
.**& '
Value**' ,
;**, -
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

LinkedList11# -
<11- .
int11. 1
>111 2
dataLinkedList113 A
)11B C
{22 
int33 
data33 
=33 
dataLinkedList33 !
.33! "
Last33" &
.33& '
Value33' ,
;33, -
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ —!
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_74a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_74a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 

Dictionary 
< 
int 
, 
int 
> 
dataDictionary *
=+ ,
new- 0

Dictionary1 ;
<; <
int< ?
,? @
int@ C
>C D
(D E
)E F
;F G
dataDictionary   
.   
Add   
(   
$num   
,   
data   "
)  " #
;  # $
dataDictionary!! 
.!! 
Add!! 
(!! 
$num!! 
,!! 
data!! "
)!!" #
;!!# $
dataDictionary"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" "
)""" #
;""# $6
*CWE369_Divide_by_Zero__int_zero_divide_74b## 2
.##2 3
BadSink##3 :
(##: ;
dataDictionary##; I
)##K L
;##L M
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
)'' 
{(( 
GoodG2B)) 
()) 
))) 
;)) 
GoodB2G** 
(** 
)** 
;** 
}++ 
private.. 
static.. 
void.. 
GoodG2B.. 
(..  
)..  !
{// 
int00 
data00 
;00 
data22 
=22 
$num22 
;22 

Dictionary33 
<33 
int33 
,33 
int33 
>33 
dataDictionary33 *
=33+ ,
new33- 0

Dictionary331 ;
<33; <
int33< ?
,33? @
int33@ C
>33C D
(33D E
)33E F
;33F G
dataDictionary44 
.44 
Add44 
(44 
$num44 
,44 
data44 "
)44" #
;44# $
dataDictionary55 
.55 
Add55 
(55 
$num55 
,55 
data55 "
)55" #
;55# $
dataDictionary66 
.66 
Add66 
(66 
$num66 
,66 
data66 "
)66" #
;66# $6
*CWE369_Divide_by_Zero__int_zero_divide_74b77 2
.772 3
GoodG2BSink773 >
(77> ?
dataDictionary77? M
)77O P
;77P Q
}88 
private;; 
static;; 
void;; 
GoodB2G;; 
(;;  
);;  !
{<< 
int== 
data== 
;== 
data>> 
=>> 
$num>> 
;>> 

Dictionary?? 
<?? 
int?? 
,?? 
int?? 
>?? 
dataDictionary?? *
=??+ ,
new??- 0

Dictionary??1 ;
<??; <
int??< ?
,??? @
int??@ C
>??C D
(??D E
)??E F
;??F G
dataDictionary@@ 
.@@ 
Add@@ 
(@@ 
$num@@ 
,@@ 
data@@ "
)@@" #
;@@# $
dataDictionaryAA 
.AA 
AddAA 
(AA 
$numAA 
,AA 
dataAA "
)AA" #
;AA# $
dataDictionaryBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB "
)BB" #
;BB# $6
*CWE369_Divide_by_Zero__int_zero_divide_74bCC 2
.CC2 3
GoodB2GSinkCC3 >
(CC> ?
dataDictionaryCC? M
)CCO P
;CCP Q
}DD 
}FF 
}GG ß
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_74b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_74b 0
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
int. 1
>1 2
dataDictionary3 A
)B C
{ 
int 
data 
= 
dataDictionary !
[! "
$num" #
]# $
;$ %
IO"" 

.""
 
	WriteLine"" 
("" 
$str""  
+""! "
data""# '
+""( )
$str""* /
+""0 1
(""2 3
$num""3 6
/""7 8
data""9 =
)""= >
+""? @
$str""A E
)""E F
;""F G
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( #
(((# $

Dictionary(($ .
<((. /
int((/ 2
,((2 3
int((3 6
>((6 7
dataDictionary((8 F
)((G H
{)) 
int** 
data** 
=** 
dataDictionary** !
[**! "
$num**" #
]**# $
;**$ %
IO-- 

.--
 
	WriteLine-- 
(-- 
$str--  
+--! "
data--# '
+--( )
$str--* /
+--0 1
(--2 3
$num--3 6
/--7 8
data--9 =
)--= >
+--? @
$str--A E
)--E F
;--F G
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

Dictionary11# -
<11- .
int11. 1
,111 2
int112 5
>115 6
dataDictionary117 E
)11F G
{22 
int33 
data33 
=33 
dataDictionary33 !
[33! "
$num33" #
]33# $
;33$ %
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
/776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ Õ,
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_75a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_75a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data   
=   
$num   
;   
byte"" 
["" 
]"" 
dataSerialized"" 
="" 
null""  $
;""$ %
try## 
{$$ 	
BinaryFormatter%% 
bf%% 
=%%  
new%%! $
BinaryFormatter%%% 4
(%%4 5
)%%5 6
;%%6 7
using&& 
(&& 
var&& 
ms&& 
=&& 
new&& 
MemoryStream&&  ,
(&&, -
)&&- .
)&&. /
{'' 
bf(( 
.(( 
	Serialize(( 
((( 
ms(( 
,((  
data((! %
)((% &
;((& '
dataSerialized)) 
=))  
ms))! #
.))# $
ToArray))$ +
())+ ,
))), -
;))- .
}** 6
*CWE369_Divide_by_Zero__int_zero_divide_75b++ 6
.++6 7
BadSink++7 >
(++> ?
dataSerialized++? M
)++O P
;++P Q
},, 	
catch-- 
(-- "
SerializationException-- %
exceptSerialize--& 5
)--5 6
{.. 	
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// 
.// 
LogLevel// '
.//' (
Warn//( ,
,//, -
$str//. X
,//X Y
exceptSerialize//Z i
)//i j
;//j k
}00 	
}11 
public44 

override44 
void44 
Good44 
(44 
)44 
{55 
GoodG2B66 
(66 
)66 
;66 
GoodB2G77 
(77 
)77 
;77 
}88 
private;; 
static;; 
void;; 
GoodG2B;; 
(;;  
);;  !
{<< 
int== 
data== 
;== 
data>> 
=>> 
$num>> 
;>> 
byte@@ 
[@@ 
]@@ 
dataSerialized@@ 
=@@ 
null@@  $
;@@$ %
tryAA 
{BB 	
BinaryFormatterCC 
bfCC 
=CC  
newCC! $
BinaryFormatterCC% 4
(CC4 5
)CC5 6
;CC6 7
usingDD 
(DD 
varDD 
msDD 
=DD 
newDD 
MemoryStreamDD  ,
(DD, -
)DD- .
)DD. /
{EE 
bfFF 
.FF 
	SerializeFF 
(FF 
msFF 
,FF  
dataFF! %
)FF% &
;FF& '
dataSerializedGG 
=GG  
msGG! #
.GG# $
ToArrayGG$ +
(GG+ ,
)GG, -
;GG- .
}HH 6
*CWE369_Divide_by_Zero__int_zero_divide_75bII 6
.II6 7
GoodG2BSinkII7 B
(IIB C
dataSerializedIIC Q
)IIS T
;IIT U
}JJ 	
catchKK 
(KK "
SerializationExceptionKK %
exceptSerializeKK& 5
)KK5 6
{LL 	
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM 
.MM 
LogLevelMM '
.MM' (
WarnMM( ,
,MM, -
$strMM. X
,MMX Y
exceptSerializeMMZ i
)MMi j
;MMj k
}NN 	
}OO 
privateRR 
staticRR 
voidRR 
GoodB2GRR 
(RR  
)RR  !
{SS 
intTT 
dataTT 
;TT 
dataUU 
=UU 
$numUU 
;UU 
byteWW 
[WW 
]WW 
dataSerializedWW 
=WW 
nullWW  $
;WW$ %
tryXX 
{YY 	
BinaryFormatterZZ 
bfZZ 
=ZZ  
newZZ! $
BinaryFormatterZZ% 4
(ZZ4 5
)ZZ5 6
;ZZ6 7
using[[ 
([[ 
var[[ 
ms[[ 
=[[ 
new[[ 
MemoryStream[[  ,
([[, -
)[[- .
)[[. /
{\\ 
bf]] 
.]] 
	Serialize]] 
(]] 
ms]] 
,]]  
data]]! %
)]]% &
;]]& '
dataSerialized^^ 
=^^  
ms^^! #
.^^# $
ToArray^^$ +
(^^+ ,
)^^, -
;^^- .
}__ 6
*CWE369_Divide_by_Zero__int_zero_divide_75b`` 6
.``6 7
GoodB2GSink``7 B
(``B C
dataSerialized``C Q
)``S T
;``T U
}aa 	
catchbb 
(bb "
SerializationExceptionbb %
exceptSerializebb& 5
)bb5 6
{cc 	
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd 
.dd 
LogLeveldd '
.dd' (
Warndd( ,
,dd, -
$strdd. X
,ddX Y
exceptSerializeddZ i
)ddi j
;ddj k
}ee 	
}ff 
}hh 
}ii ¿5
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_75b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_75b 0
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
int## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
int)) 
))) 
binForm)) #
.))# $
Deserialize))$ /
())/ 0
	memStream))0 9
)))9 :
;)): ;
}** 
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- $
+--% &
data--' +
+--, -
$str--. 3
+--4 5
(--6 7
$num--7 :
/--; <
data--= A
)--A B
+--C D
$str--E I
)--I J
;--J K
}.. 	
catch// 
(// "
SerializationException// %
exceptSerialize//& 5
)//5 6
{00 	
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 
.11 
LogLevel11 '
.11' (
Warn11( ,
,11, -
$str11. Y
,11Y Z
exceptSerialize11[ j
)11j k
;11k l
}22 	
}33 
public88 

static88 
void88 
GoodG2BSink88 "
(88" #
byte88# '
[88' (
]88( )
dataSerialized88* 8
)889 :
{99 
try:: 
{;; 	
int<< 
data<< 
;<< 
var== 
binForm== 
=== 
new== 
BinaryFormatter== -
(==- .
)==. /
;==/ 0
using>> 
(>> 
var>> 
	memStream>>  
=>>! "
new>># &
MemoryStream>>' 3
(>>3 4
)>>4 5
)>>5 6
{?? 
	memStream@@ 
.@@ 
Write@@ 
(@@  
dataSerialized@@  .
,@@. /
$num@@0 1
,@@1 2
dataSerialized@@3 A
.@@A B
Length@@B H
)@@H I
;@@I J
	memStreamAA 
.AA 
SeekAA 
(AA 
$numAA  
,AA  !

SeekOriginAA" ,
.AA, -
BeginAA- 2
)AA2 3
;AA3 4
dataBB 
=BB 
(BB 
intBB 
)BB 
binFormBB #
.BB# $
DeserializeBB$ /
(BB/ 0
	memStreamBB0 9
)BB9 :
;BB: ;
}CC 
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF $
+FF% &
dataFF' +
+FF, -
$strFF. 3
+FF4 5
(FF6 7
$numFF7 :
/FF; <
dataFF= A
)FFA B
+FFC D
$strFFE I
)FFI J
;FFJ K
}GG 	
catchHH 
(HH "
SerializationExceptionHH %
exceptSerializeHH& 5
)HH5 6
{II 	
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ 
.JJ 
LogLevelJJ '
.JJ' (
WarnJJ( ,
,JJ, -
$strJJ. Y
,JJY Z
exceptSerializeJJ[ j
)JJj k
;JJk l
}KK 	
}LL 
publicOO 

staticOO 
voidOO 
GoodB2GSinkOO "
(OO" #
byteOO# '
[OO' (
]OO( )
dataSerializedOO* 8
)OO9 :
{PP 
tryQQ 
{RR 	
intSS 
dataSS 
;SS 
varTT 
binFormTT 
=TT 
newTT 
BinaryFormatterTT -
(TT- .
)TT. /
;TT/ 0
usingUU 
(UU 
varUU 
	memStreamUU  
=UU! "
newUU# &
MemoryStreamUU' 3
(UU3 4
)UU4 5
)UU5 6
{VV 
	memStreamWW 
.WW 
WriteWW 
(WW  
dataSerializedWW  .
,WW. /
$numWW0 1
,WW1 2
dataSerializedWW3 A
.WWA B
LengthWWB H
)WWH I
;WWI J
	memStreamXX 
.XX 
SeekXX 
(XX 
$numXX  
,XX  !

SeekOriginXX" ,
.XX, -
BeginXX- 2
)XX2 3
;XX3 4
dataYY 
=YY 
(YY 
intYY 
)YY 
binFormYY #
.YY# $
DeserializeYY$ /
(YY/ 0
	memStreamYY0 9
)YY9 :
;YY: ;
}ZZ 
if\\ 
(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ #
+^^$ %
data^^& *
+^^+ ,
$str^^- 2
+^^3 4
(^^5 6
$num^^6 9
/^^: ;
data^^< @
)^^@ A
+^^B C
$str^^D H
)^^H I
;^^I J
}__ 
else`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb D
)bbD E
;bbE F
}cc 
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. Y
,ggY Z
exceptSerializegg[ j
)ggj k
;ggk l
}hh 	
}ii 
}kk 
}ll õ
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_81a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_divide_81a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; :
.CWE369_Divide_by_Zero__int_zero_divide_81_base 6

baseObject7 A
=B C
newD G9
-CWE369_Divide_by_Zero__int_zero_divide_81_badH u
(u v
)v w
;w x

baseObject 
. 
Action 
( 
data 
)  
;  !
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
int,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. :
.CWE369_Divide_by_Zero__int_zero_divide_81_base// 6

baseObject//7 A
=//B C
new//D G=
1CWE369_Divide_by_Zero__int_zero_divide_81_goodG2B//H y
(//y z
)//z {
;//{ |

baseObject00 
.00 
Action00 
(00 
data00 
)00  
;00  !
}11 
private44 
void44 
GoodB2G44 
(44 
)44 
{55 
int66 
data66 
;66 
data77 
=77 
$num77 
;77 :
.CWE369_Divide_by_Zero__int_zero_divide_81_base88 6

baseObject887 A
=88B C
new88D G=
1CWE369_Divide_by_Zero__int_zero_divide_81_goodB2G88H y
(88y z
)88z {
;88{ |

baseObject99 
.99 
Action99 
(99 
data99 
)99  
;99  !
}:: 
}<< 
}== π
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_81_bad.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_zero_divide_81_bad 3
:4 5:
.CWE369_Divide_by_Zero__int_zero_divide_81_base6 d
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
IO   

.  
 
	WriteLine   
(   
$str    
+  ! "
data  # '
+  ( )
$str  * /
+  0 1
(  2 3
$num  3 6
/  7 8
data  9 =
)  = >
+  ? @
$str  A E
)  E F
;  F G
}!! 
}"" 
}## ø
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_81_base.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
abstract 
class	 :
.CWE369_Divide_by_Zero__int_zero_divide_81_base =
{ 
public 

abstract 
void 
Action 
(  
int  #
data$ (
)) *
;* +
} 
} Ê	
™C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_81_goodB2G.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class =
1CWE369_Divide_by_Zero__int_zero_divide_81_goodB2G 7
:8 9:
.CWE369_Divide_by_Zero__int_zero_divide_81_base: h
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
if   

(   
data   
!=   
$num   
)   
{!! 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
/""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
IO&& 
.&& 
	WriteLine&& 
(&& 
$str&& @
)&&@ A
;&&A B
}'' 	
}(( 
})) 
}** ¡
™C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_divide_81_goodG2B.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class =
1CWE369_Divide_by_Zero__int_zero_divide_81_goodG2B 7
:8 9:
.CWE369_Divide_by_Zero__int_zero_divide_81_base: h
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!!  
+!!! "
data!!# '
+!!( )
$str!!* /
+!!0 1
(!!2 3
$num!!3 6
/!!7 8
data!!9 =
)!!= >
+!!? @
$str!!A E
)!!E F
;!!F G
}"" 
}## 
}$$ ‹
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_01.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_01 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public&& 

override&& 
void&& 
Good&& 
(&& 
)&& 
{'' 
GoodG2B(( 
((( 
)(( 
;(( 
GoodB2G)) 
()) 
))) 
;)) 
}** 
private-- 
void-- 
GoodG2B-- 
(-- 
)-- 
{.. 
int// 
data// 
;// 
data11 
=11 
$num11 
;11 
IO44 

.44
 
	WriteLine44 
(44 
$str44 
+44 
data44 "
+44# $
$str44% *
+44+ ,
(44- .
$num44. 1
%442 3
data444 8
)448 9
+44: ;
$str44< @
)44@ A
;44A B
}55 
private88 
void88 
GoodB2G88 
(88 
)88 
{99 
int:: 
data:: 
;:: 
data;; 
=;; 
$num;; 
;;; 
if== 

(== 
data== 
!=== 
$num== 
)== 
{>> 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? 
+??  !
data??" &
+??' (
$str??) .
+??/ 0
(??1 2
$num??2 5
%??6 7
data??8 <
)??< =
+??> ?
$str??@ D
)??D E
;??E F
}@@ 	
elseAA 
{BB 	
IOCC 
.CC 
	WriteLineCC 
(CC 
$strCC @
)CC@ A
;CCA B
}DD 	
}EE 
}GG 
}HH ¢/
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_02.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_02 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
true 
) 
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

()) 
true)) 
))) 
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
false66 
)66 
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
trueAA 
)AA 
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE 
+EE  !
dataEE" &
+EE' (
$strEE) .
+EE/ 0
(EE1 2
$numEE2 5
%EE6 7
dataEE8 <
)EE< =
+EE> ?
$strEE@ D
)EED E
;EEE F
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
trueMM 
)MM 
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
trueXX 
)XX 
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ 
+\\  !
data\\" &
+\\' (
$str\\) .
+\\/ 0
(\\1 2
$num\\2 5
%\\6 7
data\\8 <
)\\< =
+\\> ?
$str\\@ D
)\\D E
;\\E F
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
truedd 
)dd 
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
falsenn 
)nn 
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
%xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
true
ÖÖ 
)
ÖÖ 
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
true
èè 
)
èè 
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
%
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ ¸1
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_03.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_03 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
$num 
== 
$num 
) 
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

()) 
$num)) 
==)) 
$num)) 
))) 
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
$num66 
!=66 
$num66 
)66 
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
$numAA 
==AA 
$numAA 
)AA 
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE 
+EE  !
dataEE" &
+EE' (
$strEE) .
+EE/ 0
(EE1 2
$numEE2 5
%EE6 7
dataEE8 <
)EE< =
+EE> ?
$strEE@ D
)EED E
;EEE F
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
$numMM 
==MM 
$numMM 
)MM 
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
$numXX 
==XX 
$numXX 
)XX 
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ 
+\\  !
data\\" &
+\\' (
$str\\) .
+\\/ 0
(\\1 2
$num\\2 5
%\\6 7
data\\8 <
)\\< =
+\\> ?
$str\\@ D
)\\D E
;\\E F
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
$numdd 
==dd 
$numdd 
)dd 
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
$numnn 
!=nn 
$numnn 
)nn 
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
%xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
$num
ÖÖ 
==
ÖÖ 
$num
ÖÖ 
)
ÖÖ 
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
$num
èè 
==
èè 
$num
èè 
)
èè 
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
%
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ ﬁ2
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_04.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_04 /
:0 1
AbstractTestCase2 B
{ 
private   
const   
bool   
PRIVATE_CONST_TRUE   )
=  * +
true  , 0
;  0 1
private!! 
const!! 
bool!! 
PRIVATE_CONST_FALSE!! *
=!!+ ,
false!!- 2
;!!2 3
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
;%% 
if&& 

(&& 
PRIVATE_CONST_TRUE&& 
)&& 
{'' 	
data(( 
=(( 
$num(( 
;(( 
})) 	
else** 
{++ 	
data.. 
=.. 
$num.. 
;.. 
}// 	
if00 

(00 
PRIVATE_CONST_TRUE00 
)00 
{11 	
IO44 
.44 
	WriteLine44 
(44 
$str44 
+44  !
data44" &
+44' (
$str44) .
+44/ 0
(441 2
$num442 5
%446 7
data448 <
)44< =
+44> ?
$str44@ D
)44D E
;44E F
}55 	
}66 
private:: 
void:: 
GoodG2B1:: 
(:: 
):: 
{;; 
int<< 
data<< 
;<< 
if== 

(== 
PRIVATE_CONST_FALSE== 
)==  
{>> 	
dataAA 
=AA 
$numAA 
;AA 
}BB 	
elseCC 
{DD 	
dataFF 
=FF 
$numFF 
;FF 
}GG 	
ifHH 

(HH 
PRIVATE_CONST_TRUEHH 
)HH 
{II 	
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL 
+LL  !
dataLL" &
+LL' (
$strLL) .
+LL/ 0
(LL1 2
$numLL2 5
%LL6 7
dataLL8 <
)LL< =
+LL> ?
$strLL@ D
)LLD E
;LLE F
}MM 	
}NN 
privateQQ 
voidQQ 
GoodG2B2QQ 
(QQ 
)QQ 
{RR 
intSS 
dataSS 
;SS 
ifTT 

(TT 
PRIVATE_CONST_TRUETT 
)TT 
{UU 	
dataWW 
=WW 
$numWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
if__ 

(__ 
PRIVATE_CONST_TRUE__ 
)__ 
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc 
+cc  !
datacc" &
+cc' (
$strcc) .
+cc/ 0
(cc1 2
$numcc2 5
%cc6 7
datacc8 <
)cc< =
+cc> ?
$strcc@ D
)ccD E
;ccE F
}dd 	
}ee 
privatehh 
voidhh 
GoodB2G1hh 
(hh 
)hh 
{ii 
intjj 
datajj 
;jj 
ifkk 

(kk 
PRIVATE_CONST_TRUEkk 
)kk 
{ll 	
datamm 
=mm 
$nummm 
;mm 
}nn 	
elseoo 
{pp 	
datass 
=ss 
$numss 
;ss 
}tt 	
ifuu 

(uu 
PRIVATE_CONST_FALSEuu 
)uu  
{vv 	
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx /
)xx/ 0
;xx0 1
}yy 	
elsezz 
{{{ 	
if}} 
(}} 
data}} 
!=}} 
$num}} 
)}} 
{~~ 
IO 
. 
	WriteLine 
( 
$str #
+$ %
data& *
++ ,
$str- 2
+3 4
(5 6
$num6 9
%: ;
data< @
)@ A
+B C
$strD H
)H I
;I J
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
	WriteLine
ÉÉ 
(
ÉÉ 
$str
ÉÉ D
)
ÉÉD E
;
ÉÉE F
}
ÑÑ 
}
ÖÖ 	
}
ÜÜ 
private
ââ 
void
ââ 
GoodB2G2
ââ 
(
ââ 
)
ââ 
{
ää 
int
ãã 
data
ãã 
;
ãã 
if
åå 

(
åå  
PRIVATE_CONST_TRUE
åå 
)
åå 
{
çç 	
data
éé 
=
éé 
$num
éé 
;
éé 
}
èè 	
else
êê 
{
ëë 	
data
îî 
=
îî 
$num
îî 
;
îî 
}
ïï 	
if
ññ 

(
ññ  
PRIVATE_CONST_TRUE
ññ 
)
ññ 
{
óó 	
if
ôô 
(
ôô 
data
ôô 
!=
ôô 
$num
ôô 
)
ôô 
{
öö 
IO
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
$str
õõ #
+
õõ$ %
data
õõ& *
+
õõ+ ,
$str
õõ- 2
+
õõ3 4
(
õõ5 6
$num
õõ6 9
%
õõ: ;
data
õõ< @
)
õõ@ A
+
õõB C
$str
õõD H
)
õõH I
;
õõI J
}
úú 
else
ùù 
{
ûû 
IO
üü 
.
üü 
	WriteLine
üü 
(
üü 
$str
üü D
)
üüD E
;
üüE F
}
†† 
}
°° 	
}
¢¢ 
public
§§ 

override
§§ 
void
§§ 
Good
§§ 
(
§§ 
)
§§ 
{
•• 
GoodG2B1
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodG2B2
ßß 
(
ßß 
)
ßß 
;
ßß 
GoodB2G1
®® 
(
®® 
)
®® 
;
®® 
GoodB2G2
©© 
(
©© 
)
©© 
;
©© 
}
™™ 
}¨¨ 
}≠≠ ‚1
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_05.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_05 /
:0 1
AbstractTestCase2 B
{ 
private 
bool 
privateTrue 
= 
true #
;# $
private   
bool   
privateFalse   
=   
false    %
;  % &
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
int$$ 
data$$ 
;$$ 
if%% 

(%% 
privateTrue%% 
)%% 
{&& 	
data'' 
='' 
$num'' 
;'' 
}(( 	
else)) 
{** 	
data-- 
=-- 
$num-- 
;-- 
}.. 	
if// 

(// 
privateTrue// 
)// 
{00 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
}55 
private99 
void99 
GoodG2B199 
(99 
)99 
{:: 
int;; 
data;; 
;;; 
if<< 

(<< 
privateFalse<< 
)<< 
{== 	
data@@ 
=@@ 
$num@@ 
;@@ 
}AA 	
elseBB 
{CC 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
ifGG 

(GG 
privateTrueGG 
)GG 
{HH 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK 
+KK  !
dataKK" &
+KK' (
$strKK) .
+KK/ 0
(KK1 2
$numKK2 5
%KK6 7
dataKK8 <
)KK< =
+KK> ?
$strKK@ D
)KKD E
;KKE F
}LL 	
}MM 
privatePP 
voidPP 
GoodG2B2PP 
(PP 
)PP 
{QQ 
intRR 
dataRR 
;RR 
ifSS 

(SS 
privateTrueSS 
)SS 
{TT 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
elseXX 
{YY 	
data\\ 
=\\ 
$num\\ 
;\\ 
}]] 	
if^^ 

(^^ 
privateTrue^^ 
)^^ 
{__ 	
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb 
+bb  !
databb" &
+bb' (
$strbb) .
+bb/ 0
(bb1 2
$numbb2 5
%bb6 7
databb8 <
)bb< =
+bb> ?
$strbb@ D
)bbD E
;bbE F
}cc 	
}dd 
privategg 
voidgg 
GoodB2G1gg 
(gg 
)gg 
{hh 
intii 
dataii 
;ii 
ifjj 

(jj 
privateTruejj 
)jj 
{kk 	
datall 
=ll 
$numll 
;ll 
}mm 	
elsenn 
{oo 	
datarr 
=rr 
$numrr 
;rr 
}ss 	
iftt 

(tt 
privateFalsett 
)tt 
{uu 	
IOww 
.ww 
	WriteLineww 
(ww 
$strww /
)ww/ 0
;ww0 1
}xx 	
elseyy 
{zz 	
if|| 
(|| 
data|| 
!=|| 
$num|| 
)|| 
{}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ #
+~~$ %
data~~& *
+~~+ ,
$str~~- 2
+~~3 4
(~~5 6
$num~~6 9
%~~: ;
data~~< @
)~~@ A
+~~B C
$str~~D H
)~~H I
;~~I J
} 
else
ÄÄ 
{
ÅÅ 
IO
ÇÇ 
.
ÇÇ 
	WriteLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ D
)
ÇÇD E
;
ÇÇE F
}
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
private
àà 
void
àà 
GoodB2G2
àà 
(
àà 
)
àà 
{
ââ 
int
ää 
data
ää 
;
ää 
if
ãã 

(
ãã 
privateTrue
ãã 
)
ãã 
{
åå 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
else
èè 
{
êê 	
data
ìì 
=
ìì 
$num
ìì 
;
ìì 
}
îî 	
if
ïï 

(
ïï 
privateTrue
ïï 
)
ïï 
{
ññ 	
if
òò 
(
òò 
data
òò 
!=
òò 
$num
òò 
)
òò 
{
ôô 
IO
öö 
.
öö 
	WriteLine
öö 
(
öö 
$str
öö #
+
öö$ %
data
öö& *
+
öö+ ,
$str
öö- 2
+
öö3 4
(
öö5 6
$num
öö6 9
%
öö: ;
data
öö< @
)
öö@ A
+
ööB C
$str
ööD H
)
ööH I
;
ööI J
}
õõ 
else
úú 
{
ùù 
IO
ûû 
.
ûû 
	WriteLine
ûû 
(
ûû 
$str
ûû D
)
ûûD E
;
ûûE F
}
üü 
}
†† 	
}
°° 
public
££ 

override
££ 
void
££ 
Good
££ 
(
££ 
)
££ 
{
§§ 
GoodG2B1
•• 
(
•• 
)
•• 
;
•• 
GoodG2B2
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G1
ßß 
(
ßß 
)
ßß 
;
ßß 
GoodB2G2
®® 
(
®® 
)
®® 
;
®® 
}
©© 
}´´ 
}¨¨ ß4
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_06.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_06 /
:0 1
AbstractTestCase2 B
{ 
private 
const 
int 
PRIVATE_CONST_FIVE (
=) *
$num+ ,
;, -
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
int## 
data## 
;## 
if$$ 

($$ 
PRIVATE_CONST_FIVE$$ 
==$$  
$num$$  !
)$$! "
{%% 	
data&& 
=&& 
$num&& 
;&& 
}'' 	
else(( 
{)) 	
data,, 
=,, 
$num,, 
;,, 
}-- 	
if.. 

(.. 
PRIVATE_CONST_FIVE.. 
==..  
$num..  !
)..! "
{// 	
IO22 
.22 
	WriteLine22 
(22 
$str22 
+22  !
data22" &
+22' (
$str22) .
+22/ 0
(221 2
$num222 5
%226 7
data228 <
)22< =
+22> ?
$str22@ D
)22D E
;22E F
}33 	
}44 
private88 
void88 
GoodG2B188 
(88 
)88 
{99 
int:: 
data:: 
;:: 
if;; 

(;; 
PRIVATE_CONST_FIVE;; 
!=;;  
$num;;  !
);;! "
{<< 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
elseAA 
{BB 	
dataDD 
=DD 
$numDD 
;DD 
}EE 	
ifFF 

(FF 
PRIVATE_CONST_FIVEFF 
==FF  
$numFF  !
)FF! "
{GG 	
IOJJ 
.JJ 
	WriteLineJJ 
(JJ 
$strJJ 
+JJ  !
dataJJ" &
+JJ' (
$strJJ) .
+JJ/ 0
(JJ1 2
$numJJ2 5
%JJ6 7
dataJJ8 <
)JJ< =
+JJ> ?
$strJJ@ D
)JJD E
;JJE F
}KK 	
}LL 
privateOO 
voidOO 
GoodG2B2OO 
(OO 
)OO 
{PP 
intQQ 
dataQQ 
;QQ 
ifRR 

(RR 
PRIVATE_CONST_FIVERR 
==RR  
$numRR  !
)RR! "
{SS 	
dataUU 
=UU 
$numUU 
;UU 
}VV 	
elseWW 
{XX 	
data[[ 
=[[ 
$num[[ 
;[[ 
}\\ 	
if]] 

(]] 
PRIVATE_CONST_FIVE]] 
==]]  
$num]]  !
)]]! "
{^^ 	
IOaa 
.aa 
	WriteLineaa 
(aa 
$straa 
+aa  !
dataaa" &
+aa' (
$straa) .
+aa/ 0
(aa1 2
$numaa2 5
%aa6 7
dataaa8 <
)aa< =
+aa> ?
$straa@ D
)aaD E
;aaE F
}bb 	
}cc 
privateff 
voidff 
GoodB2G1ff 
(ff 
)ff 
{gg 
inthh 
datahh 
;hh 
ifii 

(ii 
PRIVATE_CONST_FIVEii 
==ii  
$numii  !
)ii! "
{jj 	
datakk 
=kk 
$numkk 
;kk 
}ll 	
elsemm 
{nn 	
dataqq 
=qq 
$numqq 
;qq 
}rr 	
ifss 

(ss 
PRIVATE_CONST_FIVEss 
!=ss  
$numss  !
)ss! "
{tt 	
IOvv 
.vv 
	WriteLinevv 
(vv 
$strvv /
)vv/ 0
;vv0 1
}ww 	
elsexx 
{yy 	
if{{ 
({{ 
data{{ 
!={{ 
$num{{ 
){{ 
{|| 
IO}} 
.}} 
	WriteLine}} 
(}} 
$str}} #
+}}$ %
data}}& *
+}}+ ,
$str}}- 2
+}}3 4
(}}5 6
$num}}6 9
%}}: ;
data}}< @
)}}@ A
+}}B C
$str}}D H
)}}H I
;}}I J
}~~ 
else 
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
	WriteLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ D
)
ÅÅD E
;
ÅÅE F
}
ÇÇ 
}
ÉÉ 	
}
ÑÑ 
private
áá 
void
áá 
GoodB2G2
áá 
(
áá 
)
áá 
{
àà 
int
ââ 
data
ââ 
;
ââ 
if
ää 

(
ää  
PRIVATE_CONST_FIVE
ää 
==
ää  
$num
ää  !
)
ää! "
{
ãã 	
data
åå 
=
åå 
$num
åå 
;
åå 
}
çç 	
else
éé 
{
èè 	
data
íí 
=
íí 
$num
íí 
;
íí 
}
ìì 	
if
îî 

(
îî  
PRIVATE_CONST_FIVE
îî 
==
îî  
$num
îî  !
)
îî! "
{
ïï 	
if
óó 
(
óó 
data
óó 
!=
óó 
$num
óó 
)
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô #
+
ôô$ %
data
ôô& *
+
ôô+ ,
$str
ôô- 2
+
ôô3 4
(
ôô5 6
$num
ôô6 9
%
ôô: ;
data
ôô< @
)
ôô@ A
+
ôôB C
$str
ôôD H
)
ôôH I
;
ôôI J
}
öö 
else
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù D
)
ùùD E
;
ùùE F
}
ûû 
}
üü 	
}
†† 
public
¢¢ 

override
¢¢ 
void
¢¢ 
Good
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
GoodG2B1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodG2B2
•• 
(
•• 
)
•• 
;
•• 
GoodB2G1
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G2
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 
}™™ 
}´´ «3
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_07.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_07 /
:0 1
AbstractTestCase2 B
{ 
private 
int 
privateFive 
= 
$num 
;  
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
int## 
data## 
;## 
if$$ 

($$ 
privateFive$$ 
==$$ 
$num$$ 
)$$ 
{%% 	
data&& 
=&& 
$num&& 
;&& 
}'' 	
else(( 
{)) 	
data,, 
=,, 
$num,, 
;,, 
}-- 	
if.. 

(.. 
privateFive.. 
==.. 
$num.. 
).. 
{// 	
IO22 
.22 
	WriteLine22 
(22 
$str22 
+22  !
data22" &
+22' (
$str22) .
+22/ 0
(221 2
$num222 5
%226 7
data228 <
)22< =
+22> ?
$str22@ D
)22D E
;22E F
}33 	
}44 
private88 
void88 
GoodG2B188 
(88 
)88 
{99 
int:: 
data:: 
;:: 
if;; 

(;; 
privateFive;; 
!=;; 
$num;; 
);; 
{<< 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
elseAA 
{BB 	
dataDD 
=DD 
$numDD 
;DD 
}EE 	
ifFF 

(FF 
privateFiveFF 
==FF 
$numFF 
)FF 
{GG 	
IOJJ 
.JJ 
	WriteLineJJ 
(JJ 
$strJJ 
+JJ  !
dataJJ" &
+JJ' (
$strJJ) .
+JJ/ 0
(JJ1 2
$numJJ2 5
%JJ6 7
dataJJ8 <
)JJ< =
+JJ> ?
$strJJ@ D
)JJD E
;JJE F
}KK 	
}LL 
privateOO 
voidOO 
GoodG2B2OO 
(OO 
)OO 
{PP 
intQQ 
dataQQ 
;QQ 
ifRR 

(RR 
privateFiveRR 
==RR 
$numRR 
)RR 
{SS 	
dataUU 
=UU 
$numUU 
;UU 
}VV 	
elseWW 
{XX 	
data[[ 
=[[ 
$num[[ 
;[[ 
}\\ 	
if]] 

(]] 
privateFive]] 
==]] 
$num]] 
)]] 
{^^ 	
IOaa 
.aa 
	WriteLineaa 
(aa 
$straa 
+aa  !
dataaa" &
+aa' (
$straa) .
+aa/ 0
(aa1 2
$numaa2 5
%aa6 7
dataaa8 <
)aa< =
+aa> ?
$straa@ D
)aaD E
;aaE F
}bb 	
}cc 
privateff 
voidff 
GoodB2G1ff 
(ff 
)ff 
{gg 
inthh 
datahh 
;hh 
ifii 

(ii 
privateFiveii 
==ii 
$numii 
)ii 
{jj 	
datakk 
=kk 
$numkk 
;kk 
}ll 	
elsemm 
{nn 	
dataqq 
=qq 
$numqq 
;qq 
}rr 	
ifss 

(ss 
privateFivess 
!=ss 
$numss 
)ss 
{tt 	
IOvv 
.vv 
	WriteLinevv 
(vv 
$strvv /
)vv/ 0
;vv0 1
}ww 	
elsexx 
{yy 	
if{{ 
({{ 
data{{ 
!={{ 
$num{{ 
){{ 
{|| 
IO}} 
.}} 
	WriteLine}} 
(}} 
$str}} #
+}}$ %
data}}& *
+}}+ ,
$str}}- 2
+}}3 4
(}}5 6
$num}}6 9
%}}: ;
data}}< @
)}}@ A
+}}B C
$str}}D H
)}}H I
;}}I J
}~~ 
else 
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
	WriteLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ D
)
ÅÅD E
;
ÅÅE F
}
ÇÇ 
}
ÉÉ 	
}
ÑÑ 
private
áá 
void
áá 
GoodB2G2
áá 
(
áá 
)
áá 
{
àà 
int
ââ 
data
ââ 
;
ââ 
if
ää 

(
ää 
privateFive
ää 
==
ää 
$num
ää 
)
ää 
{
ãã 	
data
åå 
=
åå 
$num
åå 
;
åå 
}
çç 	
else
éé 
{
èè 	
data
íí 
=
íí 
$num
íí 
;
íí 
}
ìì 	
if
îî 

(
îî 
privateFive
îî 
==
îî 
$num
îî 
)
îî 
{
ïï 	
if
óó 
(
óó 
data
óó 
!=
óó 
$num
óó 
)
óó 
{
òò 
IO
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
$str
ôô #
+
ôô$ %
data
ôô& *
+
ôô+ ,
$str
ôô- 2
+
ôô3 4
(
ôô5 6
$num
ôô6 9
%
ôô: ;
data
ôô< @
)
ôô@ A
+
ôôB C
$str
ôôD H
)
ôôH I
;
ôôI J
}
öö 
else
õõ 
{
úú 
IO
ùù 
.
ùù 
	WriteLine
ùù 
(
ùù 
$str
ùù D
)
ùùD E
;
ùùE F
}
ûû 
}
üü 	
}
†† 
public
¢¢ 

override
¢¢ 
void
¢¢ 
Good
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
GoodG2B1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodG2B2
•• 
(
•• 
)
•• 
;
•• 
GoodB2G1
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G2
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 
}™™ 
}´´ Œ6
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_08.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_08 /
:0 1
AbstractTestCase2 B
{ 
private 
static 
bool 
PrivateReturnsTrue *
(* +
)+ ,
{   
return!! 
true!! 
;!! 
}"" 
private$$ 
static$$ 
bool$$ 
PrivateReturnsFalse$$ +
($$+ ,
)$$, -
{%% 
return&& 
false&& 
;&& 
}'' 
public)) 

override)) 
void)) 
Bad)) 
()) 
))) 
{** 
int++ 
data++ 
;++ 
if,, 

(,, 
PrivateReturnsTrue,, 
(,, 
),,  
),,  !
{-- 	
data.. 
=.. 
$num.. 
;.. 
}// 	
else00 
{11 	
data44 
=44 
$num44 
;44 
}55 	
if66 

(66 
PrivateReturnsTrue66 
(66 
)66  
)66  !
{77 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: 
+::  !
data::" &
+::' (
$str::) .
+::/ 0
(::1 2
$num::2 5
%::6 7
data::8 <
)::< =
+::> ?
$str::@ D
)::D E
;::E F
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
)@@ 
{AA 
intBB 
dataBB 
;BB 
ifCC 

(CC 
PrivateReturnsFalseCC 
(CC  
)CC  !
)CC! "
{DD 	
dataGG 
=GG 
$numGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$numLL 
;LL 
}MM 	
ifNN 

(NN 
PrivateReturnsTrueNN 
(NN 
)NN  
)NN  !
{OO 	
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR 
+RR  !
dataRR" &
+RR' (
$strRR) .
+RR/ 0
(RR1 2
$numRR2 5
%RR6 7
dataRR8 <
)RR< =
+RR> ?
$strRR@ D
)RRD E
;RRE F
}SS 	
}TT 
privateWW 
voidWW 
GoodG2B2WW 
(WW 
)WW 
{XX 
intYY 
dataYY 
;YY 
ifZZ 

(ZZ 
PrivateReturnsTrueZZ 
(ZZ 
)ZZ  
)ZZ  !
{[[ 	
data]] 
=]] 
$num]] 
;]] 
}^^ 	
else__ 
{`` 	
datacc 
=cc 
$numcc 
;cc 
}dd 	
ifee 

(ee 
PrivateReturnsTrueee 
(ee 
)ee  
)ee  !
{ff 	
IOii 
.ii 
	WriteLineii 
(ii 
$strii 
+ii  !
dataii" &
+ii' (
$strii) .
+ii/ 0
(ii1 2
$numii2 5
%ii6 7
dataii8 <
)ii< =
+ii> ?
$strii@ D
)iiD E
;iiE F
}jj 	
}kk 
privatenn 
voidnn 
GoodB2G1nn 
(nn 
)nn 
{oo 
intpp 
datapp 
;pp 
ifqq 

(qq 
PrivateReturnsTrueqq 
(qq 
)qq  
)qq  !
{rr 	
datass 
=ss 
$numss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
$numyy 
;yy 
}zz 	
if{{ 

({{ 
PrivateReturnsFalse{{ 
({{  
){{  !
){{! "
{|| 	
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
$str~~ /
)~~/ 0
;~~0 1
} 	
else
ÄÄ 
{
ÅÅ 	
if
ÉÉ 
(
ÉÉ 
data
ÉÉ 
!=
ÉÉ 
$num
ÉÉ 
)
ÉÉ 
{
ÑÑ 
IO
ÖÖ 
.
ÖÖ 
	WriteLine
ÖÖ 
(
ÖÖ 
$str
ÖÖ #
+
ÖÖ$ %
data
ÖÖ& *
+
ÖÖ+ ,
$str
ÖÖ- 2
+
ÖÖ3 4
(
ÖÖ5 6
$num
ÖÖ6 9
%
ÖÖ: ;
data
ÖÖ< @
)
ÖÖ@ A
+
ÖÖB C
$str
ÖÖD H
)
ÖÖH I
;
ÖÖI J
}
ÜÜ 
else
áá 
{
àà 
IO
ââ 
.
ââ 
	WriteLine
ââ 
(
ââ 
$str
ââ D
)
ââD E
;
ââE F
}
ää 
}
ãã 	
}
åå 
private
èè 
void
èè 
GoodB2G2
èè 
(
èè 
)
èè 
{
êê 
int
ëë 
data
ëë 
;
ëë 
if
íí 

(
íí  
PrivateReturnsTrue
íí 
(
íí 
)
íí  
)
íí  !
{
ìì 	
data
îî 
=
îî 
$num
îî 
;
îî 
}
ïï 	
else
ññ 
{
óó 	
data
öö 
=
öö 
$num
öö 
;
öö 
}
õõ 	
if
úú 

(
úú  
PrivateReturnsTrue
úú 
(
úú 
)
úú  
)
úú  !
{
ùù 	
if
üü 
(
üü 
data
üü 
!=
üü 
$num
üü 
)
üü 
{
†† 
IO
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° #
+
°°$ %
data
°°& *
+
°°+ ,
$str
°°- 2
+
°°3 4
(
°°5 6
$num
°°6 9
%
°°: ;
data
°°< @
)
°°@ A
+
°°B C
$str
°°D H
)
°°H I
;
°°I J
}
¢¢ 
else
££ 
{
§§ 
IO
•• 
.
•• 
	WriteLine
•• 
(
•• 
$str
•• D
)
••D E
;
••E F
}
¶¶ 
}
ßß 	
}
®® 
public
™™ 

override
™™ 
void
™™ 
Good
™™ 
(
™™ 
)
™™ 
{
´´ 
GoodG2B1
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
GoodG2B2
≠≠ 
(
≠≠ 
)
≠≠ 
;
≠≠ 
GoodB2G1
ÆÆ 
(
ÆÆ 
)
ÆÆ 
;
ÆÆ 
GoodB2G2
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
}
∞∞ 
}≤≤ 
}≥≥ Ä3
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_09.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_09 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_TRUE #
)# $
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

()) 
IO)) 
.))  
STATIC_READONLY_TRUE)) #
)))# $
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
IO66 
.66 !
STATIC_READONLY_FALSE66 $
)66$ %
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
IOAA 
.AA  
STATIC_READONLY_TRUEAA #
)AA# $
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE 
+EE  !
dataEE" &
+EE' (
$strEE) .
+EE/ 0
(EE1 2
$numEE2 5
%EE6 7
dataEE8 <
)EE< =
+EE> ?
$strEE@ D
)EED E
;EEE F
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM  
STATIC_READONLY_TRUEMM #
)MM# $
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
IOXX 
.XX  
STATIC_READONLY_TRUEXX #
)XX# $
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ 
+\\  !
data\\" &
+\\' (
$str\\) .
+\\/ 0
(\\1 2
$num\\2 5
%\\6 7
data\\8 <
)\\< =
+\\> ?
$str\\@ D
)\\D E
;\\E F
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd  
STATIC_READONLY_TRUEdd #
)dd# $
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn !
STATIC_READONLY_FALSEnn $
)nn$ %
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
%xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ "
STATIC_READONLY_TRUE
ÖÖ #
)
ÖÖ# $
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
IO
èè 
.
èè "
STATIC_READONLY_TRUE
èè #
)
èè# $
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
%
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ ú2
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_10.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_10 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
. 

staticTrue 
) 
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

()) 
IO)) 
.)) 

staticTrue)) 
))) 
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
IO66 
.66 
staticFalse66 
)66 
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
IOAA 
.AA 

staticTrueAA 
)AA 
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE 
+EE  !
dataEE" &
+EE' (
$strEE) .
+EE/ 0
(EE1 2
$numEE2 5
%EE6 7
dataEE8 <
)EE< =
+EE> ?
$strEE@ D
)EED E
;EEE F
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM 

staticTrueMM 
)MM 
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
IOXX 
.XX 

staticTrueXX 
)XX 
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ 
+\\  !
data\\" &
+\\' (
$str\\) .
+\\/ 0
(\\1 2
$num\\2 5
%\\6 7
data\\8 <
)\\< =
+\\> ?
$str\\@ D
)\\D E
;\\E F
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd 

staticTruedd 
)dd 
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn 
staticFalsenn 
)nn 
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
%xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ 

staticTrue
ÖÖ 
)
ÖÖ 
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
IO
èè 
.
èè 

staticTrue
èè 
)
èè 
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
%
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ ñ5
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_11.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_11 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
. 
StaticReturnsTrue  
(  !
)! "
)" #
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

())
 
IO)) 
.)) 
StaticReturnsTrue)) 
())  
)))  !
)))! "
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
IO66 
.66 
StaticReturnsFalse66 !
(66! "
)66" #
)66# $
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
IOAA 
.AA 
StaticReturnsTrueAA  
(AA  !
)AA! "
)AA" #
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE 
+EE  !
dataEE" &
+EE' (
$strEE) .
+EE/ 0
(EE1 2
$numEE2 5
%EE6 7
dataEE8 <
)EE< =
+EE> ?
$strEE@ D
)EED E
;EEE F
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM 
StaticReturnsTrueMM  
(MM  !
)MM! "
)MM" #
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
IOXX 
.XX 
StaticReturnsTrueXX  
(XX  !
)XX! "
)XX" #
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ 
+\\  !
data\\" &
+\\' (
$str\\) .
+\\/ 0
(\\1 2
$num\\2 5
%\\6 7
data\\8 <
)\\< =
+\\> ?
$str\\@ D
)\\D E
;\\E F
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd 
StaticReturnsTruedd  
(dd  !
)dd! "
)dd" #
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn 
StaticReturnsFalsenn !
(nn! "
)nn" #
)nn# $
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
%xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ 
StaticReturnsTrue
ÖÖ  
(
ÖÖ  !
)
ÖÖ! "
)
ÖÖ" #
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
IO
èè 
.
èè 
StaticReturnsTrue
èè  
(
èè  !
)
èè! "
)
èè" #
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
%
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ Ú,
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_12.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_12 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

(
 
IO 
. $
StaticReturnsTrueOrFalse &
(& '
)' (
)( )
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data&& 
=&& 
$num&& 
;&& 
}'' 	
if(( 

(((
 
IO(( 
.(( $
StaticReturnsTrueOrFalse(( &
(((& '
)((' (
)((( )
{)) 	
IO,, 
.,, 
	WriteLine,, 
(,, 
$str,, 
+,,  !
data,," &
+,,' (
$str,,) .
+,,/ 0
(,,1 2
$num,,2 5
%,,6 7
data,,8 <
),,< =
+,,> ?
$str,,@ D
),,D E
;,,E F
}-- 	
else.. 
{// 	
if11 
(11 
data11 
!=11 
$num11 
)11 
{22 
IO33 
.33 
	WriteLine33 
(33 
$str33 #
+33$ %
data33& *
+33+ ,
$str33- 2
+333 4
(335 6
$num336 9
%33: ;
data33< @
)33@ A
+33B C
$str33D H
)33H I
;33I J
}44 
else55 
{66 
IO77 
.77 
	WriteLine77 
(77 
$str77 D
)77D E
;77E F
}88 
}99 	
}:: 
private?? 
void?? 
GoodG2B?? 
(?? 
)?? 
{@@ 
intAA 
dataAA 
;AA 
ifBB 

(BB
 
IOBB 
.BB $
StaticReturnsTrueOrFalseBB &
(BB& '
)BB' (
)BB( )
{CC 	
dataEE 
=EE 
$numEE 
;EE 
}FF 	
elseGG 
{HH 	
dataJJ 
=JJ 
$numJJ 
;JJ 
}KK 	
ifLL 

(LL
 
IOLL 
.LL $
StaticReturnsTrueOrFalseLL &
(LL& '
)LL' (
)LL( )
{MM 	
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP 
+PP  !
dataPP" &
+PP' (
$strPP) .
+PP/ 0
(PP1 2
$numPP2 5
%PP6 7
dataPP8 <
)PP< =
+PP> ?
$strPP@ D
)PPD E
;PPE F
}QQ 	
elseRR 
{SS 	
IOVV 
.VV 
	WriteLineVV 
(VV 
$strVV 
+VV  !
dataVV" &
+VV' (
$strVV) .
+VV/ 0
(VV1 2
$numVV2 5
%VV6 7
dataVV8 <
)VV< =
+VV> ?
$strVV@ D
)VVD E
;VVE F
}WW 	
}XX 
private\\ 
void\\ 
GoodB2G\\ 
(\\ 
)\\ 
{]] 
int^^ 
data^^ 
;^^ 
if__ 

(__
 
IO__ 
.__ $
StaticReturnsTrueOrFalse__ &
(__& '
)__' (
)__( )
{`` 	
dataaa 
=aa 
$numaa 
;aa 
}bb 	
elsecc 
{dd 	
dataee 
=ee 
$numee 
;ee 
}ff 	
ifgg 

(gg
 
IOgg 
.gg $
StaticReturnsTrueOrFalsegg &
(gg& '
)gg' (
)gg( )
{hh 	
ifjj 
(jj 
datajj 
!=jj 
$numjj 
)jj 
{kk 
IOll 
.ll 
	WriteLinell 
(ll 
$strll #
+ll$ %
datall& *
+ll+ ,
$strll- 2
+ll3 4
(ll5 6
$numll6 9
%ll: ;
datall< @
)ll@ A
+llB C
$strllD H
)llH I
;llI J
}mm 
elsenn 
{oo 
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp D
)ppD E
;ppE F
}qq 
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
%xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
public
ÅÅ 

override
ÅÅ 
void
ÅÅ 
Good
ÅÅ 
(
ÅÅ 
)
ÅÅ 
{
ÉÉ 
GoodG2B
ÑÑ 
(
ÑÑ 
)
ÑÑ 
;
ÑÑ 
GoodB2G
ÖÖ 
(
ÖÖ 
)
ÖÖ 
;
ÖÖ 
}
ÜÜ 
}àà 
}ââ ⁄5
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_13.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_13 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_FIVE #
==# %
$num% &
)& '
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

()) 
IO)) 
.))  
STATIC_READONLY_FIVE)) #
==))# %
$num))% &
)))& '
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
IO66 
.66  
STATIC_READONLY_FIVE66 #
!=66# %
$num66% &
)66& '
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
IOAA 
.AA  
STATIC_READONLY_FIVEAA #
==AA# %
$numAA% &
)AA& '
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE 
+EE  !
dataEE" &
+EE' (
$strEE) .
+EE/ 0
(EE1 2
$numEE2 5
%EE6 7
dataEE8 <
)EE< =
+EE> ?
$strEE@ D
)EED E
;EEE F
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM  
STATIC_READONLY_FIVEMM #
==MM# %
$numMM% &
)MM& '
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
IOXX 
.XX  
STATIC_READONLY_FIVEXX #
==XX# %
$numXX% &
)XX& '
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ 
+\\  !
data\\" &
+\\' (
$str\\) .
+\\/ 0
(\\1 2
$num\\2 5
%\\6 7
data\\8 <
)\\< =
+\\> ?
$str\\@ D
)\\D E
;\\E F
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd  
STATIC_READONLY_FIVEdd #
==dd# %
$numdd% &
)dd& '
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn  
STATIC_READONLY_FIVEnn #
!=nn# %
$numnn% &
)nn& '
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
%xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ "
STATIC_READONLY_FIVE
ÖÖ #
==
ÖÖ# %
$num
ÖÖ% &
)
ÖÖ& '
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
IO
èè 
.
èè "
STATIC_READONLY_FIVE
èè #
==
èè# %
$num
èè% &
)
èè& '
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
%
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ ˆ4
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_14.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_14 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
if 

( 
IO 
. 

staticFive 
== 
$num 
) 
{   	
data!! 
=!! 
$num!! 
;!! 
}"" 	
else## 
{$$ 	
data'' 
='' 
$num'' 
;'' 
}(( 	
if)) 

()) 
IO)) 
.)) 

staticFive)) 
==)) 
$num)) 
))) 
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
}// 
private33 
void33 
GoodG2B133 
(33 
)33 
{44 
int55 
data55 
;55 
if66 

(66 
IO66 
.66 

staticFive66 
!=66 
$num66 
)66 
{77 	
data:: 
=:: 
$num:: 
;:: 
};; 	
else<< 
{== 	
data?? 
=?? 
$num?? 
;?? 
}@@ 	
ifAA 

(AA 
IOAA 
.AA 

staticFiveAA 
==AA 
$numAA 
)AA 
{BB 	
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE 
+EE  !
dataEE" &
+EE' (
$strEE) .
+EE/ 0
(EE1 2
$numEE2 5
%EE6 7
dataEE8 <
)EE< =
+EE> ?
$strEE@ D
)EED E
;EEE F
}FF 	
}GG 
privateJJ 
voidJJ 
GoodG2B2JJ 
(JJ 
)JJ 
{KK 
intLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM 

staticFiveMM 
==MM 
$numMM 
)MM 
{NN 	
dataPP 
=PP 
$numPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
$numVV 
;VV 
}WW 	
ifXX 

(XX 
IOXX 
.XX 

staticFiveXX 
==XX 
$numXX 
)XX 
{YY 	
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ 
+\\  !
data\\" &
+\\' (
$str\\) .
+\\/ 0
(\\1 2
$num\\2 5
%\\6 7
data\\8 <
)\\< =
+\\> ?
$str\\@ D
)\\D E
;\\E F
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2G1aa 
(aa 
)aa 
{bb 
intcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd 

staticFivedd 
==dd 
$numdd 
)dd 
{ee 	
dataff 
=ff 
$numff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
$numll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn 

staticFivenn 
!=nn 
$numnn 
)nn 
{oo 	
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
}rr 	
elsess 
{tt 	
ifvv 
(vv 
datavv 
!=vv 
$numvv 
)vv 
{ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
$strxx #
+xx$ %
dataxx& *
+xx+ ,
$strxx- 2
+xx3 4
(xx5 6
$numxx6 9
%xx: ;
dataxx< @
)xx@ A
+xxB C
$strxxD H
)xxH I
;xxI J
}yy 
elsezz 
{{{ 
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| D
)||D E
;||E F
}}} 
}~~ 	
} 
private
ÇÇ 
void
ÇÇ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
int
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ 

staticFive
ÖÖ 
==
ÖÖ 
$num
ÖÖ 
)
ÖÖ 
{
ÜÜ 	
data
áá 
=
áá 
$num
áá 
;
áá 
}
àà 	
else
ââ 
{
ää 	
data
çç 
=
çç 
$num
çç 
;
çç 
}
éé 	
if
èè 

(
èè 
IO
èè 
.
èè 

staticFive
èè 
==
èè 
$num
èè 
)
èè 
{
êê 	
if
íí 
(
íí 
data
íí 
!=
íí 
$num
íí 
)
íí 
{
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî #
+
îî$ %
data
îî& *
+
îî+ ,
$str
îî- 2
+
îî3 4
(
îî5 6
$num
îî6 9
%
îî: ;
data
îî< @
)
îî@ A
+
îîB C
$str
îîD H
)
îîH I
;
îîI J
}
ïï 
else
ññ 
{
óó 
IO
òò 
.
òò 
	WriteLine
òò 
(
òò 
$str
òò D
)
òòD E
;
òòE F
}
ôô 
}
öö 	
}
õõ 
public
ùù 

override
ùù 
void
ùù 
Good
ùù 
(
ùù 
)
ùù 
{
ûû 
GoodG2B1
üü 
(
üü 
)
üü 
;
üü 
GoodG2B2
†† 
(
†† 
)
†† 
;
†† 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}•• 
}¶¶ º>
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_15.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_15 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
switch 
( 
$num 
) 
{   	
case!! 
$num!! 
:!! 
data"" 
="" 
$num"" 
;"" 
break## 
;## 
default$$ 
:$$ 
data'' 
='' 
$num'' 
;'' 
break(( 
;(( 
})) 	
switch** 
(** 
$num** 
)** 
{++ 	
case,, 
$num,, 
:,, 
IO// 
.// 
	WriteLine// 
(// 
$str// 
+//  !
data//" &
+//' (
$str//) .
+/// 0
(//1 2
$num//2 5
%//6 7
data//8 <
)//< =
+//> ?
$str//@ D
)//D E
;//E F
break00 
;00 
default11 
:11 
IO33 
.33 
	WriteLine33 
(33 
$str33 /
)33/ 0
;330 1
break44 
;44 
}55 	
}66 
private:: 
void:: 
GoodG2B1:: 
(:: 
):: 
{;; 
int<< 
data<< 
;<< 
switch== 
(== 
$num== 
)== 
{>> 	
case?? 
$num?? 
:?? 
dataBB 
=BB 
$numBB 
;BB 
breakCC 
;CC 
defaultDD 
:DD 
dataFF 
=FF 
$numFF 
;FF 
breakGG 
;GG 
}HH 	
switchII 
(II 
$numII 
)II 
{JJ 	
caseKK 
$numKK 
:KK 
IONN 
.NN 
	WriteLineNN 
(NN 
$strNN 
+NN  !
dataNN" &
+NN' (
$strNN) .
+NN/ 0
(NN1 2
$numNN2 5
%NN6 7
dataNN8 <
)NN< =
+NN> ?
$strNN@ D
)NND E
;NNE F
breakOO 
;OO 
defaultPP 
:PP 
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR /
)RR/ 0
;RR0 1
breakSS 
;SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
)XX 
{YY 
intZZ 
dataZZ 
;ZZ 
switch[[ 
([[ 
$num[[ 
)[[ 
{\\ 	
case]] 
$num]] 
:]] 
data__ 
=__ 
$num__ 
;__ 
break`` 
;`` 
defaultaa 
:aa 
datadd 
=dd 
$numdd 
;dd 
breakee 
;ee 
}ff 	
switchgg 
(gg 
$numgg 
)gg 
{hh 	
caseii 
$numii 
:ii 
IOll 
.ll 
	WriteLinell 
(ll 
$strll 
+ll  !
datall" &
+ll' (
$strll) .
+ll/ 0
(ll1 2
$numll2 5
%ll6 7
datall8 <
)ll< =
+ll> ?
$strll@ D
)llD E
;llE F
breakmm 
;mm 
defaultnn 
:nn 
IOpp 
.pp 
	WriteLinepp 
(pp 
$strpp /
)pp/ 0
;pp0 1
breakqq 
;qq 
}rr 	
}ss 
privatevv 
voidvv 
GoodB2G1vv 
(vv 
)vv 
{ww 
intxx 
dataxx 
;xx 
switchyy 
(yy 
$numyy 
)yy 
{zz 	
case{{ 
$num{{ 
:{{ 
data|| 
=|| 
$num|| 
;|| 
break}} 
;}} 
default~~ 
:~~ 
data
ÅÅ 
=
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
break
ÇÇ 
;
ÇÇ 
}
ÉÉ 	
switch
ÑÑ 
(
ÑÑ 
$num
ÑÑ 
)
ÑÑ 
{
ÖÖ 	
case
ÜÜ 
$num
ÜÜ 
:
ÜÜ 
IO
àà 
.
àà 
	WriteLine
àà 
(
àà 
$str
àà /
)
àà/ 0
;
àà0 1
break
ââ 
;
ââ 
default
ää 
:
ää 
if
åå 
(
åå 
data
åå 
!=
åå 
$num
åå 
)
åå 
{
çç 
IO
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé #
+
éé$ %
data
éé& *
+
éé+ ,
$str
éé- 2
+
éé3 4
(
éé5 6
$num
éé6 9
%
éé: ;
data
éé< @
)
éé@ A
+
ééB C
$str
ééD H
)
ééH I
;
ééI J
}
èè 
else
êê 
{
ëë 
IO
íí 
.
íí 
	WriteLine
íí 
(
íí 
$str
íí D
)
ííD E
;
ííE F
}
ìì 
break
îî 
;
îî 
}
ïï 	
}
ññ 
private
ôô 
void
ôô 
GoodB2G2
ôô 
(
ôô 
)
ôô 
{
öö 
int
õõ 
data
õõ 
;
õõ 
switch
úú 
(
úú 
$num
úú 
)
úú 
{
ùù 	
case
ûû 
$num
ûû 
:
ûû 
data
üü 
=
üü 
$num
üü 
;
üü 
break
†† 
;
†† 
default
°° 
:
°° 
data
§§ 
=
§§ 
$num
§§ 
;
§§ 
break
•• 
;
•• 
}
¶¶ 	
switch
ßß 
(
ßß 
$num
ßß 
)
ßß 
{
®® 	
case
©© 
$num
©© 
:
©© 
if
´´ 
(
´´ 
data
´´ 
!=
´´ 
$num
´´ 
)
´´ 
{
¨¨ 
IO
≠≠ 
.
≠≠ 
	WriteLine
≠≠ 
(
≠≠ 
$str
≠≠ #
+
≠≠$ %
data
≠≠& *
+
≠≠+ ,
$str
≠≠- 2
+
≠≠3 4
(
≠≠5 6
$num
≠≠6 9
%
≠≠: ;
data
≠≠< @
)
≠≠@ A
+
≠≠B C
$str
≠≠D H
)
≠≠H I
;
≠≠I J
}
ÆÆ 
else
ØØ 
{
∞∞ 
IO
±± 
.
±± 
	WriteLine
±± 
(
±± 
$str
±± D
)
±±D E
;
±±E F
}
≤≤ 
break
≥≥ 
;
≥≥ 
default
¥¥ 
:
¥¥ 
IO
∂∂ 
.
∂∂ 
	WriteLine
∂∂ 
(
∂∂ 
$str
∂∂ /
)
∂∂/ 0
;
∂∂0 1
break
∑∑ 
;
∑∑ 
}
∏∏ 	
}
ππ 
public
ªª 

override
ªª 
void
ªª 
Good
ªª 
(
ªª 
)
ªª 
{
ºº 
GoodG2B1
ΩΩ 
(
ΩΩ 
)
ΩΩ 
;
ΩΩ 
GoodG2B2
ææ 
(
ææ 
)
ææ 
;
ææ 
GoodB2G1
øø 
(
øø 
)
øø 
;
øø 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
}
¡¡ 
}√√ 
}ƒƒ Ó
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_16.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_16 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
while 
( 
true 
) 
{   	
data!! 
=!! 
$num!! 
;!! 
break"" 
;"" 
}## 	
while$$ 
($$ 
true$$ 
)$$ 
{%% 	
IO(( 
.(( 
	WriteLine(( 
((( 
$str(( 
+((  !
data((" &
+((' (
$str(() .
+((/ 0
(((1 2
$num((2 5
%((6 7
data((8 <
)((< =
+((> ?
$str((@ D
)((D E
;((E F
break)) 
;)) 
}** 	
}++ 
private// 
void// 
GoodG2B// 
(// 
)// 
{00 
int11 
data11 
;11 
while22 
(22 
true22 
)22 
{33 	
data55 
=55 
$num55 
;55 
break66 
;66 
}77 	
while88 
(88 
true88 
)88 
{99 	
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< 
+<<  !
data<<" &
+<<' (
$str<<) .
+<</ 0
(<<1 2
$num<<2 5
%<<6 7
data<<8 <
)<<< =
+<<> ?
$str<<@ D
)<<D E
;<<E F
break== 
;== 
}>> 	
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
)BB 
{CC 
intDD 
dataDD 
;DD 
whileEE 
(EE 
trueEE 
)EE 
{FF 	
dataGG 
=GG 
$numGG 
;GG 
breakHH 
;HH 
}II 	
whileJJ 
(JJ 
trueJJ 
)JJ 
{KK 	
ifMM 
(MM 
dataMM 
!=MM 
$numMM 
)MM 
{NN 
IOOO 
.OO 
	WriteLineOO 
(OO 
$strOO #
+OO$ %
dataOO& *
+OO+ ,
$strOO- 2
+OO3 4
(OO5 6
$numOO6 9
%OO: ;
dataOO< @
)OO@ A
+OOB C
$strOOD H
)OOH I
;OOI J
}PP 
elseQQ 
{RR 
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS D
)SSD E
;SSE F
}TT 
breakUU 
;UU 
}VV 	
}WW 
publicYY 

overrideYY 
voidYY 
GoodYY 
(YY 
)YY 
{ZZ 
GoodG2B[[ 
([[ 
)[[ 
;[[ 
GoodB2G\\ 
(\\ 
)\\ 
;\\ 
}]] 
}__ 
}`` Õ
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_17.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_17 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data## 
=## 
$num## 
;## 
for$$ 
($$ 
int$$ 
j$$ 
=$$ 
$num$$ 
;$$ 
j$$ 
<$$ 
$num$$ 
;$$ 
j$$  
++$$  "
)$$" #
{%% 	
IO(( 
.(( 
	WriteLine(( 
((( 
$str(( 
+((  !
data((" &
+((' (
$str(() .
+((/ 0
(((1 2
$num((2 5
%((6 7
data((8 <
)((< =
+((> ?
$str((@ D
)((D E
;((E F
})) 	
}** 
private.. 
void.. 
GoodG2B.. 
(.. 
).. 
{// 
int00 
data00 
;00 
data22 
=22 
$num22 
;22 
for33 
(33 
int33 
j33 
=33 
$num33 
;33 
j33 
<33 
$num33 
;33 
j33  
++33  "
)33" #
{44 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
}99 
private<< 
void<< 
GoodB2G<< 
(<< 
)<< 
{== 
int>> 
data>> 
;>> 
data?? 
=?? 
$num?? 
;?? 
for@@ 
(@@ 
int@@ 
k@@ 
=@@ 
$num@@ 
;@@ 
k@@ 
<@@ 
$num@@ 
;@@ 
k@@  
++@@  "
)@@" #
{AA 	
ifCC 
(CC 
dataCC 
!=CC 
$numCC 
)CC 
{DD 
IOEE 
.EE 
	WriteLineEE 
(EE 
$strEE #
+EE$ %
dataEE& *
+EE+ ,
$strEE- 2
+EE3 4
(EE5 6
$numEE6 9
%EE: ;
dataEE< @
)EE@ A
+EEB C
$strEED H
)EEH I
;EEI J
}FF 
elseGG 
{HH 
IOII 
.II 
	WriteLineII 
(II 
$strII D
)IID E
;IIE F
}JJ 
}KK 	
}LL 
publicNN 

overrideNN 
voidNN 
GoodNN 
(NN 
)NN 
{OO 
GoodG2BPP 
(PP 
)PP 
;PP 
GoodB2GQQ 
(QQ 
)QQ 
;QQ 
}RR 
}TT 
}UU ª.
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_21.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_21 /
:0 1
AbstractTestCase2 B
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public 

override 
void 
Bad 
( 
) 
{   
int!! 
data!! 
;!! 
data"" 
="" 
$num"" 
;"" 

badPrivate## 
=## 
true## 
;## 
BadSink$$ 
($$ 
data$$ 
)$$ 
;$$ 
}%% 
private'' 
void'' 
BadSink'' 
('' 
int'' 
data'' !
)''" #
{(( 
if)) 

()) 

badPrivate)) 
))) 
{** 	
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
}// 
private22 
bool22 
goodB2G1Private22  
=22! "
false22# (
;22( )
private33 
bool33 
goodB2G2Private33  
=33! "
false33# (
;33( )
private44 
bool44 
goodG2BPrivate44 
=44  !
false44" '
;44' (
public66 

override66 
void66 
Good66 
(66 
)66 
{77 
GoodB2G188 
(88 
)88 
;88 
GoodB2G299 
(99 
)99 
;99 
GoodG2B:: 
(:: 
):: 
;:: 
};; 
private>> 
void>> 
GoodB2G1>> 
(>> 
)>> 
{?? 
int@@ 
data@@ 
;@@ 
dataAA 
=AA 
$numAA 
;AA 
goodB2G1PrivateBB 
=BB 
falseBB 
;BB  
GoodB2G1SinkCC 
(CC 
dataCC 
)CC 
;CC 
}DD 
privateFF 
voidFF 
GoodB2G1SinkFF 
(FF 
intFF !
dataFF" &
)FF' (
{GG 
ifHH 

(HH 
goodB2G1PrivateHH 
)HH 
{II 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK /
)KK/ 0
;KK0 1
}LL 	
elseMM 
{NN 	
ifPP 
(PP 
dataPP 
!=PP 
$numPP 
)PP 
{QQ 
IORR 
.RR 
	WriteLineRR 
(RR 
$strRR #
+RR$ %
dataRR& *
+RR+ ,
$strRR- 2
+RR3 4
(RR5 6
$numRR6 9
%RR: ;
dataRR< @
)RR@ A
+RRB C
$strRRD H
)RRH I
;RRI J
}SS 
elseTT 
{UU 
IOVV 
.VV 
	WriteLineVV 
(VV 
$strVV D
)VVD E
;VVE F
}WW 
}XX 	
}YY 
private\\ 
void\\ 
GoodB2G2\\ 
(\\ 
)\\ 
{]] 
int^^ 
data^^ 
;^^ 
data__ 
=__ 
$num__ 
;__ 
goodB2G2Private`` 
=`` 
true`` 
;`` 
GoodB2G2Sinkaa 
(aa 
dataaa 
)aa 
;aa 
}bb 
privatedd 
voiddd 
GoodB2G2Sinkdd 
(dd 
intdd !
datadd" &
)dd' (
{ee 
ifff 

(ff 
goodB2G2Privateff 
)ff 
{gg 	
ifii 
(ii 
dataii 
!=ii 
$numii 
)ii 
{jj 
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk #
+kk$ %
datakk& *
+kk+ ,
$strkk- 2
+kk3 4
(kk5 6
$numkk6 9
%kk: ;
datakk< @
)kk@ A
+kkB C
$strkkD H
)kkH I
;kkI J
}ll 
elsemm 
{nn 
IOoo 
.oo 
	WriteLineoo 
(oo 
$stroo D
)ooD E
;ooE F
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodG2Buu 
(uu 
)uu 
{vv 
intww 
dataww 
;ww 
datayy 
=yy 
$numyy 
;yy 
goodG2BPrivatezz 
=zz 
truezz 
;zz 
GoodG2BSink{{ 
({{ 
data{{ 
){{ 
;{{ 
}|| 
private~~ 
void~~ 
GoodG2BSink~~ 
(~~ 
int~~  
data~~! %
)~~& '
{ 
if
ÄÄ 

(
ÄÄ 
goodG2BPrivate
ÄÄ 
)
ÄÄ 
{
ÅÅ 	
IO
ÑÑ 
.
ÑÑ 
	WriteLine
ÑÑ 
(
ÑÑ 
$str
ÑÑ 
+
ÑÑ  !
data
ÑÑ" &
+
ÑÑ' (
$str
ÑÑ) .
+
ÑÑ/ 0
(
ÑÑ1 2
$num
ÑÑ2 5
%
ÑÑ6 7
data
ÑÑ8 <
)
ÑÑ< =
+
ÑÑ> ?
$str
ÑÑ@ D
)
ÑÑD E
;
ÑÑE F
}
ÖÖ 	
}
ÜÜ 
}àà 
}ââ ≤
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_22a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_22a 0
:1 2
AbstractTestCase3 C
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
= 
$num 
; 
data   
=   
$num   
;   
badPublicStatic!! 
=!! 
true!! 
;!! 6
*CWE369_Divide_by_Zero__int_zero_modulo_22b"" 2
.""2 3
BadSink""3 :
("": ;
data""; ?
)""@ A
;""A B
}## 
public&& 

static&& 
bool&&  
goodB2G1PublicStatic&& +
=&&, -
false&&. 3
;&&3 4
public'' 

static'' 
bool''  
goodB2G2PublicStatic'' +
='', -
false''. 3
;''3 4
public(( 

static(( 
bool(( 
goodG2BPublicStatic(( *
=((+ ,
false((- 2
;((2 3
public** 

override** 
void** 
Good** 
(** 
)** 
{++ 
GoodB2G1,, 
(,, 
),, 
;,, 
GoodB2G2-- 
(-- 
)-- 
;-- 
GoodG2B.. 
(.. 
).. 
;.. 
}// 
private22 
void22 
GoodB2G122 
(22 
)22 
{33 
int44 
data44 
=44 
$num44 
;44 
data55 
=55 
$num55 
;55  
goodB2G1PublicStatic66 
=66 
false66 $
;66$ %6
*CWE369_Divide_by_Zero__int_zero_modulo_22b77 2
.772 3
GoodB2G1Sink773 ?
(77? @
data77@ D
)77E F
;77F G
}88 
private;; 
void;; 
GoodB2G2;; 
(;; 
);; 
{<< 
int== 
data== 
=== 
$num== 
;== 
data>> 
=>> 
$num>> 
;>>  
goodB2G2PublicStatic?? 
=?? 
true?? #
;??# $6
*CWE369_Divide_by_Zero__int_zero_modulo_22b@@ 2
.@@2 3
GoodB2G2Sink@@3 ?
(@@? @
data@@@ D
)@@E F
;@@F G
}AA 
privateDD 
voidDD 
GoodG2BDD 
(DD 
)DD 
{EE 
intFF 
dataFF 
=FF 
$numFF 
;FF 
dataHH 
=HH 
$numHH 
;HH 
goodG2BPublicStaticII 
=II 
trueII "
;II" #6
*CWE369_Divide_by_Zero__int_zero_modulo_22bJJ 2
.JJ2 3
GoodG2BSinkJJ3 >
(JJ> ?
dataJJ? C
)JJD E
;JJE F
}KK 
}MM 
}NN á 
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_22b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_22b 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
if 

( 6
*CWE369_Divide_by_Zero__int_zero_modulo_22a 6
.6 7
badPublicStatic7 F
)F G
{ 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
%""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
data(( 
=(( 
$num(( 
;(( 
})) 	
}** 
public// 

static// 
void// 
GoodB2G1Sink// #
(//# $
int//$ '
data//( ,
)//- .
{00 
if11 

(11 6
*CWE369_Divide_by_Zero__int_zero_modulo_22a11 6
.116 7 
goodB2G1PublicStatic117 K
)11K L
{22 	
data55 
=55 
$num55 
;55 
}66 	
else77 
{88 	
if:: 
(:: 
data:: 
!=:: 
$num:: 
):: 
{;; 
IO<< 
.<< 
	WriteLine<< 
(<< 
$str<< #
+<<$ %
data<<& *
+<<+ ,
$str<<- 2
+<<3 4
(<<5 6
$num<<6 9
%<<: ;
data<<< @
)<<@ A
+<<B C
$str<<D H
)<<H I
;<<I J
}== 
else>> 
{?? 
IO@@ 
.@@ 
	WriteLine@@ 
(@@ 
$str@@ D
)@@D E
;@@E F
}AA 
}BB 	
}CC 
publicFF 

staticFF 
voidFF 
GoodB2G2SinkFF #
(FF# $
intFF$ '
dataFF( ,
)FF- .
{GG 
ifHH 

(HH 6
*CWE369_Divide_by_Zero__int_zero_modulo_22aHH 6
.HH6 7 
goodB2G2PublicStaticHH7 K
)HHK L
{II 	
ifKK 
(KK 
dataKK 
!=KK 
$numKK 
)KK 
{LL 
IOMM 
.MM 
	WriteLineMM 
(MM 
$strMM #
+MM$ %
dataMM& *
+MM+ ,
$strMM- 2
+MM3 4
(MM5 6
$numMM6 9
%MM: ;
dataMM< @
)MM@ A
+MMB C
$strMMD H
)MMH I
;MMI J
}NN 
elseOO 
{PP 
IOQQ 
.QQ 
	WriteLineQQ 
(QQ 
$strQQ D
)QQD E
;QQE F
}RR 
}SS 	
elseTT 
{UU 	
dataXX 
=XX 
$numXX 
;XX 
}YY 	
}ZZ 
public]] 

static]] 
void]] 
GoodG2BSink]] "
(]]" #
int]]# &
data]]' +
)]], -
{^^ 
if__ 

(__ 6
*CWE369_Divide_by_Zero__int_zero_modulo_22a__ 6
.__6 7
goodG2BPublicStatic__7 J
)__J K
{`` 	
IOcc 
.cc 
	WriteLinecc 
(cc 
$strcc 
+cc  !
datacc" &
+cc' (
$strcc) .
+cc/ 0
(cc1 2
$numcc2 5
%cc6 7
datacc8 <
)cc< =
+cc> ?
$strcc@ D
)ccD E
;ccE F
}dd 	
elseee 
{ff 	
dataii 
=ii 
$numii 
;ii 
}jj 	
}kk 
}mm 
}nn â
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_31.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_31 /
:0 1
AbstractTestCase2 B
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
dataCopy 
; 
{ 	
int   
data   
;   
data!! 
=!! 
$num!! 
;!! 
dataCopy"" 
="" 
data"" 
;"" 
}## 	
{$$ 	
int%% 
data%% 
=%% 
dataCopy%% 
;%%  
IO(( 
.(( 
	WriteLine(( 
((( 
$str(( 
+((  !
data((" &
+((' (
$str(() .
+((/ 0
(((1 2
$num((2 5
%((6 7
data((8 <
)((< =
+((> ?
$str((@ D
)((D E
;((E F
})) 	
}** 
public-- 

override-- 
void-- 
Good-- 
(-- 
)-- 
{.. 
GoodG2B// 
(// 
)// 
;// 
GoodB2G00 
(00 
)00 
;00 
}11 
private44 
void44 
GoodG2B44 
(44 
)44 
{55 
int66 
dataCopy66 
;66 
{77 	
int88 
data88 
;88 
data:: 
=:: 
$num:: 
;:: 
dataCopy;; 
=;; 
data;; 
;;; 
}<< 	
{== 	
int>> 
data>> 
=>> 
dataCopy>> 
;>>  
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA 
+AA  !
dataAA" &
+AA' (
$strAA) .
+AA/ 0
(AA1 2
$numAA2 5
%AA6 7
dataAA8 <
)AA< =
+AA> ?
$strAA@ D
)AAD E
;AAE F
}BB 	
}CC 
privateFF 
voidFF 
GoodB2GFF 
(FF 
)FF 
{GG 
intHH 
dataCopyHH 
;HH 
{II 	
intJJ 
dataJJ 
;JJ 
dataKK 
=KK 
$numKK 
;KK 
dataCopyLL 
=LL 
dataLL 
;LL 
}MM 	
{NN 	
intOO 
dataOO 
=OO 
dataCopyOO 
;OO  
ifQQ 
(QQ 
dataQQ 
!=QQ 
$numQQ 
)QQ 
{RR 
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS #
+SS$ %
dataSS& *
+SS+ ,
$strSS- 2
+SS3 4
(SS5 6
$numSS6 9
%SS: ;
dataSS< @
)SS@ A
+SSB C
$strSSD H
)SSH I
;SSI J
}TT 
elseUU 
{VV 
IOWW 
.WW 
	WriteLineWW 
(WW 
$strWW D
)WWD E
;WWE F
}XX 
}YY 	
}ZZ 
}\\ 
}]] ù
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_41.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_41 /
:0 1
AbstractTestCase2 B
{ 
private 
static 
void 
BadSink 
(  
int  #
data$ (
)) *
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
;%% 
data&& 
=&& 
$num&& 
;&& 
BadSink'' 
('' 
data'' 
)'' 
;'' 
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodG2B-- 
(-- 
)-- 
;-- 
GoodB2G.. 
(.. 
).. 
;.. 
}// 
private11 
static11 
void11 
GoodG2BSink11 #
(11# $
int11$ '
data11( ,
)11- .
{22 
IO55 

.55
 
	WriteLine55 
(55 
$str55 
+55 
data55 "
+55# $
$str55% *
+55+ ,
(55- .
$num55. 1
%552 3
data554 8
)558 9
+55: ;
$str55< @
)55@ A
;55A B
}66 
private99 
static99 
void99 
GoodG2B99 
(99  
)99  !
{:: 
int;; 
data;; 
;;; 
data== 
=== 
$num== 
;== 
GoodG2BSink>> 
(>> 
data>> 
)>> 
;>> 
}?? 
privateAA 
staticAA 
voidAA 
GoodB2GSinkAA #
(AA# $
intAA$ '
dataAA( ,
)AA- .
{BB 
ifDD 

(DD 
dataDD 
!=DD 
$numDD 
)DD 
{EE 	
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
elseHH 
{II 	
IOJJ 
.JJ 
	WriteLineJJ 
(JJ 
$strJJ @
)JJ@ A
;JJA B
}KK 	
}LL 
privateOO 
staticOO 
voidOO 
GoodB2GOO 
(OO  
)OO  !
{PP 
intQQ 
dataQQ 
;QQ 
dataRR 
=RR 
$numRR 
;RR 
GoodB2GSinkSS 
(SS 
dataSS 
)SS 
;SS 
}TT 
}VV 
}WW º
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_42.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_42 /
:0 1
AbstractTestCase2 B
{ 
private 
static 
int 
	BadSource  
(  !
)! "
{ 
int 
data 
; 
data 
= 
$num 
; 
return   
data   
;   
}!! 
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
int%% 
data%% 
=%% 
	BadSource%% 
(%% 
)%% 
;%% 
IO(( 

.((
 
	WriteLine(( 
((( 
$str(( 
+(( 
data(( "
+((# $
$str((% *
+((+ ,
(((- .
$num((. 1
%((2 3
data((4 8
)((8 9
+((: ;
$str((< @
)((@ A
;((A B
})) 
private-- 
static-- 
int-- 
GoodG2BSource-- $
(--$ %
)--% &
{.. 
int// 
data// 
;// 
data11 
=11 
$num11 
;11 
return22 
data22 
;22 
}33 
private55 
static55 
void55 
GoodG2B55 
(55  
)55  !
{66 
int77 
data77 
=77 
GoodG2BSource77  
(77  !
)77! "
;77" #
IO:: 

.::
 
	WriteLine:: 
(:: 
$str:: 
+:: 
data:: "
+::# $
$str::% *
+::+ ,
(::- .
$num::. 1
%::2 3
data::4 8
)::8 9
+::: ;
$str::< @
)::@ A
;::A B
};; 
private>> 
static>> 
int>> 
GoodB2GSource>> $
(>>$ %
)>>% &
{?? 
int@@ 
data@@ 
;@@ 
dataAA 
=AA 
$numAA 
;AA 
returnBB 
dataBB 
;BB 
}CC 
privateEE 
staticEE 
voidEE 
GoodB2GEE 
(EE  
)EE  !
{FF 
intGG 
dataGG 
=GG 
GoodB2GSourceGG  
(GG  !
)GG! "
;GG" #
ifII 

(II 
dataII 
!=II 
$numII 
)II 
{JJ 	
IOKK 
.KK 
	WriteLineKK 
(KK 
$strKK 
+KK  !
dataKK" &
+KK' (
$strKK) .
+KK/ 0
(KK1 2
$numKK2 5
%KK6 7
dataKK8 <
)KK< =
+KK> ?
$strKK@ D
)KKD E
;KKE F
}LL 	
elseMM 
{NN 	
IOOO 
.OO 
	WriteLineOO 
(OO 
$strOO @
)OO@ A
;OOA B
}PP 	
}QQ 
publicSS 

overrideSS 
voidSS 
GoodSS 
(SS 
)SS 
{TT 
GoodG2BUU 
(UU 
)UU 
;UU 
GoodB2GVV 
(VV 
)VV 
;VV 
}WW 
}YY 
}ZZ ·
¢C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_45.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 5
)CWE369_Divide_by_Zero__int_zero_modulo_45 /
:0 1
AbstractTestCase2 B
{ 
private 
int 
dataBad 
; 
private 
int 
dataGoodG2B 
; 
private 
int 
dataGoodB2G 
; 
private   
void   
BadSink   
(   
)   
{!! 
int"" 
data"" 
="" 
dataBad"" 
;"" 
IO%% 

.%%
 
	WriteLine%% 
(%% 
$str%% 
+%% 
data%% "
+%%# $
$str%%% *
+%%+ ,
(%%- .
$num%%. 1
%%%2 3
data%%4 8
)%%8 9
+%%: ;
$str%%< @
)%%@ A
;%%A B
}&& 
public(( 

override(( 
void(( 
Bad(( 
((( 
)(( 
{)) 
int** 
data** 
;** 
data++ 
=++ 
$num++ 
;++ 
dataBad,, 
=,, 
data,, 
;,, 
BadSink-- 
(-- 
)-- 
;-- 
}.. 
public11 

override11 
void11 
Good11 
(11 
)11 
{22 
GoodG2B33 
(33 
)33 
;33 
GoodB2G44 
(44 
)44 
;44 
}55 
private77 
void77 
GoodG2BSink77 
(77 
)77 
{88 
int99 
data99 
=99 
dataGoodG2B99 
;99 
IO<< 

.<<
 
	WriteLine<< 
(<< 
$str<< 
+<< 
data<< "
+<<# $
$str<<% *
+<<+ ,
(<<- .
$num<<. 1
%<<2 3
data<<4 8
)<<8 9
+<<: ;
$str<<< @
)<<@ A
;<<A B
}== 
private@@ 
void@@ 
GoodG2B@@ 
(@@ 
)@@ 
{AA 
intBB 
dataBB 
;BB 
dataDD 
=DD 
$numDD 
;DD 
dataGoodG2BEE 
=EE 
dataEE 
;EE 
GoodG2BSinkFF 
(FF 
)FF 
;FF 
}GG 
privateII 
voidII 
GoodB2GSinkII 
(II 
)II 
{JJ 
intKK 
dataKK 
=KK 
dataGoodB2GKK 
;KK 
ifMM 

(MM 
dataMM 
!=MM 
$numMM 
)MM 
{NN 	
IOOO 
.OO 
	WriteLineOO 
(OO 
$strOO 
+OO  !
dataOO" &
+OO' (
$strOO) .
+OO/ 0
(OO1 2
$numOO2 5
%OO6 7
dataOO8 <
)OO< =
+OO> ?
$strOO@ D
)OOD E
;OOE F
}PP 	
elseQQ 
{RR 	
IOSS 
.SS 
	WriteLineSS 
(SS 
$strSS @
)SS@ A
;SSA B
}TT 	
}UU 
privateXX 
voidXX 
GoodB2GXX 
(XX 
)XX 
{YY 
intZZ 
dataZZ 
;ZZ 
data[[ 
=[[ 
$num[[ 
;[[ 
dataGoodB2G\\ 
=\\ 
data\\ 
;\\ 
GoodB2GSink]] 
(]] 
)]] 
;]] 
}^^ 
}`` 
}aa Í
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_51a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_51a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 6
*CWE369_Divide_by_Zero__int_zero_modulo_51b 2
.2 3
BadSink3 :
(: ;
data; ?
)A B
;B C
} 
public"" 

override"" 
void"" 
Good"" 
("" 
)"" 
{## 
GoodG2B$$ 
($$ 
)$$ 
;$$ 
GoodB2G%% 
(%% 
)%% 
;%% 
}&& 
private)) 
void)) 
GoodG2B)) 
()) 
))) 
{** 
int++ 
data++ 
;++ 
data-- 
=-- 
$num-- 
;-- 6
*CWE369_Divide_by_Zero__int_zero_modulo_51b.. 2
...2 3
GoodG2BSink..3 >
(..> ?
data..? C
)..E F
;..F G
}// 
private22 
void22 
GoodB2G22 
(22 
)22 
{33 
int44 
data44 
;44 
data55 
=55 
$num55 
;55 6
*CWE369_Divide_by_Zero__int_zero_modulo_51b66 2
.662 3
GoodB2GSink663 >
(66> ?
data66? C
)66E F
;66F G
}77 
}99 
}:: ‡
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_51b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_51b 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Í
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_52a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_52a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 6
*CWE369_Divide_by_Zero__int_zero_modulo_52b 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public"" 

override"" 
void"" 
Good"" 
("" 
)"" 
{## 
GoodG2B$$ 
($$ 
)$$ 
;$$ 
GoodB2G%% 
(%% 
)%% 
;%% 
}&& 
private)) 
void)) 
GoodG2B)) 
()) 
))) 
{** 
int++ 
data++ 
;++ 
data-- 
=-- 
$num-- 
;-- 6
*CWE369_Divide_by_Zero__int_zero_modulo_52b.. 2
...2 3
GoodG2BSink..3 >
(..> ?
data..? C
)..D E
;..E F
}// 
private22 
void22 
GoodB2G22 
(22 
)22 
{33 
int44 
data44 
;44 
data55 
=55 
$num55 
;55 6
*CWE369_Divide_by_Zero__int_zero_modulo_52b66 2
.662 3
GoodB2GSink663 >
(66> ?
data66? C
)66D E
;66E F
}77 
}99 
}:: Ï

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_52b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_52b 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 6
*CWE369_Divide_by_Zero__int_zero_modulo_52c 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 6
*CWE369_Divide_by_Zero__int_zero_modulo_52c&& 2
.&&2 3
GoodG2BSink&&3 >
(&&> ?
data&&? C
)&&D E
;&&E F
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 6
*CWE369_Divide_by_Zero__int_zero_modulo_52c,, 2
.,,2 3
GoodB2GSink,,3 >
(,,> ?
data,,? C
),,D E
;,,E F
}-- 
}// 
}00 ‡
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_52c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_52c 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Í
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_53a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_53a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 6
*CWE369_Divide_by_Zero__int_zero_modulo_53b 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public"" 

override"" 
void"" 
Good"" 
("" 
)"" 
{## 
GoodG2B$$ 
($$ 
)$$ 
;$$ 
GoodB2G%% 
(%% 
)%% 
;%% 
}&& 
private)) 
void)) 
GoodG2B)) 
()) 
))) 
{** 
int++ 
data++ 
;++ 
data-- 
=-- 
$num-- 
;-- 6
*CWE369_Divide_by_Zero__int_zero_modulo_53b.. 2
...2 3
GoodG2BSink..3 >
(..> ?
data..? C
)..D E
;..E F
}// 
private22 
void22 
GoodB2G22 
(22 
)22 
{33 
int44 
data44 
;44 
data55 
=55 
$num55 
;55 6
*CWE369_Divide_by_Zero__int_zero_modulo_53b66 2
.662 3
GoodB2GSink663 >
(66> ?
data66? C
)66D E
;66E F
}77 
}99 
}:: Ï

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_53b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_53b 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 6
*CWE369_Divide_by_Zero__int_zero_modulo_53c 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 6
*CWE369_Divide_by_Zero__int_zero_modulo_53c&& 2
.&&2 3
GoodG2BSink&&3 >
(&&> ?
data&&? C
)&&D E
;&&E F
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 6
*CWE369_Divide_by_Zero__int_zero_modulo_53c,, 2
.,,2 3
GoodB2GSink,,3 >
(,,> ?
data,,? C
),,D E
;,,E F
}-- 
}// 
}00 Ï

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_53c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_53c 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 6
*CWE369_Divide_by_Zero__int_zero_modulo_53d 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 6
*CWE369_Divide_by_Zero__int_zero_modulo_53d&& 2
.&&2 3
GoodG2BSink&&3 >
(&&> ?
data&&? C
)&&D E
;&&E F
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 6
*CWE369_Divide_by_Zero__int_zero_modulo_53d,, 2
.,,2 3
GoodB2GSink,,3 >
(,,> ?
data,,? C
),,D E
;,,E F
}-- 
}// 
}00 ‡
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_53d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_53d 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< Í
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_54a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_54a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 6
*CWE369_Divide_by_Zero__int_zero_modulo_54b 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public"" 

override"" 
void"" 
Good"" 
("" 
)"" 
{## 
GoodG2B$$ 
($$ 
)$$ 
;$$ 
GoodB2G%% 
(%% 
)%% 
;%% 
}&& 
private)) 
void)) 
GoodG2B)) 
()) 
))) 
{** 
int++ 
data++ 
;++ 
data-- 
=-- 
$num-- 
;-- 6
*CWE369_Divide_by_Zero__int_zero_modulo_54b.. 2
...2 3
GoodG2BSink..3 >
(..> ?
data..? C
)..D E
;..E F
}// 
private22 
void22 
GoodB2G22 
(22 
)22 
{33 
int44 
data44 
;44 
data55 
=55 
$num55 
;55 6
*CWE369_Divide_by_Zero__int_zero_modulo_54b66 2
.662 3
GoodB2GSink663 >
(66> ?
data66? C
)66D E
;66E F
}77 
}99 
}:: Ï

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_54b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_54b 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 6
*CWE369_Divide_by_Zero__int_zero_modulo_54c 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 6
*CWE369_Divide_by_Zero__int_zero_modulo_54c&& 2
.&&2 3
GoodG2BSink&&3 >
(&&> ?
data&&? C
)&&D E
;&&E F
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 6
*CWE369_Divide_by_Zero__int_zero_modulo_54c,, 2
.,,2 3
GoodB2GSink,,3 >
(,,> ?
data,,? C
),,D E
;,,E F
}-- 
}// 
}00 Ï

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_54c.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_54c 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 6
*CWE369_Divide_by_Zero__int_zero_modulo_54d 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 6
*CWE369_Divide_by_Zero__int_zero_modulo_54d&& 2
.&&2 3
GoodG2BSink&&3 >
(&&> ?
data&&? C
)&&D E
;&&E F
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 6
*CWE369_Divide_by_Zero__int_zero_modulo_54d,, 2
.,,2 3
GoodB2GSink,,3 >
(,,> ?
data,,? C
),,D E
;,,E F
}-- 
}// 
}00 Ï

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_54d.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_54d 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 6
*CWE369_Divide_by_Zero__int_zero_modulo_54e 2
.2 3
BadSink3 :
(: ;
data; ?
)@ A
;A B
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
int$$# &
data$$' +
)$$, -
{%% 6
*CWE369_Divide_by_Zero__int_zero_modulo_54e&& 2
.&&2 3
GoodG2BSink&&3 >
(&&> ?
data&&? C
)&&D E
;&&E F
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
int**# &
data**' +
)**, -
{++ 6
*CWE369_Divide_by_Zero__int_zero_modulo_54e,, 2
.,,2 3
GoodB2GSink,,3 >
(,,> ?
data,,? C
),,D E
;,,E F
}-- 
}// 
}00 ‡
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_54e.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_54e 0
{ 
public 

static 
void 
BadSink 
( 
int "
data# '
)( )
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
public&& 

static&& 
void&& 
GoodG2BSink&& "
(&&" #
int&&# &
data&&' +
)&&, -
{'' 
IO** 

.**
 
	WriteLine** 
(** 
$str** 
+** 
data** "
+**# $
$str**% *
+**+ ,
(**- .
$num**. 1
%**2 3
data**4 8
)**8 9
+**: ;
$str**< @
)**@ A
;**A B
}++ 
public.. 

static.. 
void.. 
GoodB2GSink.. "
(.." #
int..# &
data..' +
).., -
{// 
if11 

(11 
data11 
!=11 
$num11 
)11 
{22 	
IO33 
.33 
	WriteLine33 
(33 
$str33 
+33  !
data33" &
+33' (
$str33) .
+33/ 0
(331 2
$num332 5
%336 7
data338 <
)33< =
+33> ?
$str33@ D
)33D E
;33E F
}44 	
else55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 @
)77@ A
;77A B
}88 	
}99 
};; 
}<< È
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_61a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_61a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
= 6
*CWE369_Divide_by_Zero__int_zero_modulo_61b =
.= >
	BadSource> G
(G H
)H I
;I J
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
GoodB2G(( 
((( 
)(( 
;(( 
})) 
private,, 
static,, 
void,, 
GoodG2B,, 
(,,  
),,  !
{-- 
int.. 
data.. 
=.. 6
*CWE369_Divide_by_Zero__int_zero_modulo_61b.. =
...= >
GoodG2BSource..> K
(..K L
)..L M
;..M N
IO11 

.11
 
	WriteLine11 
(11 
$str11 
+11 
data11 "
+11# $
$str11% *
+11+ ,
(11- .
$num11. 1
%112 3
data114 8
)118 9
+11: ;
$str11< @
)11@ A
;11A B
}22 
private55 
static55 
void55 
GoodB2G55 
(55  
)55  !
{66 
int77 
data77 
=77 6
*CWE369_Divide_by_Zero__int_zero_modulo_61b77 =
.77= >
GoodB2GSource77> K
(77K L
)77L M
;77M N
if99 

(99 
data99 
!=99 
$num99 
)99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; 
+;;  !
data;;" &
+;;' (
$str;;) .
+;;/ 0
(;;1 2
$num;;2 5
%;;6 7
data;;8 <
);;< =
+;;> ?
$str;;@ D
);;D E
;;;E F
}<< 	
else== 
{>> 	
IO?? 
.?? 
	WriteLine?? 
(?? 
$str?? @
)??@ A
;??A B
}@@ 	
}AA 
}CC 
}DD ®

£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_61b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_61b 0
{ 
public 

static 
int 
	BadSource 
(  
)  !
{ 
int 
data 
; 
data 
= 
$num 
; 
return 
data 
; 
} 
public$$ 

static$$ 
int$$ 
GoodG2BSource$$ #
($$# $
)$$$ %
{%% 
int&& 
data&& 
;&& 
data(( 
=(( 
$num(( 
;(( 
return)) 
data)) 
;)) 
}** 
public-- 

static-- 
int-- 
GoodB2GSource-- #
(--# $
)--$ %
{.. 
int// 
data// 
;// 
data00 
=00 
$num00 
;00 
return11 
data11 
;11 
}22 
}44 
}55 ®
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_66a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_66a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 
int 
[ 
] 
	dataArray 
= 
new 
int !
[! "
$num" #
]# $
;$ %
	dataArray 
[ 
$num 
] 
= 
data 
; 6
*CWE369_Divide_by_Zero__int_zero_modulo_66b   2
.  2 3
BadSink  3 :
(  : ;
	dataArray  ; D
)  F G
;  G H
}!! 
public$$ 

override$$ 
void$$ 
Good$$ 
($$ 
)$$ 
{%% 
GoodG2B&& 
(&& 
)&& 
;&& 
GoodB2G'' 
('' 
)'' 
;'' 
}(( 
private++ 
static++ 
void++ 
GoodG2B++ 
(++  
)++  !
{,, 
int-- 
data-- 
;-- 
data// 
=// 
$num// 
;// 
int00 
[00 
]00 
	dataArray00 
=00 
new00 
int00 !
[00! "
$num00" #
]00# $
;00$ %
	dataArray11 
[11 
$num11 
]11 
=11 
data11 
;11 6
*CWE369_Divide_by_Zero__int_zero_modulo_66b22 2
.222 3
GoodG2BSink223 >
(22> ?
	dataArray22? H
)22J K
;22K L
}33 
private66 
static66 
void66 
GoodB2G66 
(66  
)66  !
{77 
int88 
data88 
;88 
data99 
=99 
$num99 
;99 
int:: 
[:: 
]:: 
	dataArray:: 
=:: 
new:: 
int:: !
[::! "
$num::" #
]::# $
;::$ %
	dataArray;; 
[;; 
$num;; 
];; 
=;; 
data;; 
;;; 6
*CWE369_Divide_by_Zero__int_zero_modulo_66b<< 2
.<<2 3
GoodB2GSink<<3 >
(<<> ?
	dataArray<<? H
)<<J K
;<<K L
}== 
}?? 
}@@ ·
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_66b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_66b 0
{ 
public 

static 
void 
BadSink 
( 
int "
[" #
]# $
	dataArray% .
)/ 0
{ 
int 
data 
= 
	dataArray 
[ 
$num 
] 
;  
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
int''# &
[''& '
]''' (
	dataArray'') 2
)''3 4
{(( 
int)) 
data)) 
=)) 
	dataArray)) 
[)) 
$num)) 
])) 
;))  
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
int00# &
[00& '
]00' (
	dataArray00) 2
)003 4
{11 
int22 
data22 
=22 
	dataArray22 
[22 
$num22 
]22 
;22  
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ı
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_67a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_67a 0
:1 2
AbstractTestCase3 C
{ 
public 

class 
	Container 
{ 
public 
int 
containerOne 
;  
} 
public 

override 
void 
Bad 
( 
) 
{   
int!! 
data!! 
;!! 
data"" 
="" 
$num"" 
;"" 
	Container## 
dataContainer## 
=##  !
new##" %
	Container##& /
(##/ 0
)##0 1
;##1 2
dataContainer$$ 
.$$ 
containerOne$$ "
=$$# $
data$$% )
;$$) *6
*CWE369_Divide_by_Zero__int_zero_modulo_67b%% 2
.%%2 3
BadSink%%3 :
(%%: ;
dataContainer%%; H
)%%J K
;%%K L
}&& 
public)) 

override)) 
void)) 
Good)) 
()) 
))) 
{** 
GoodG2B++ 
(++ 
)++ 
;++ 
GoodB2G,, 
(,, 
),, 
;,, 
}-- 
private00 
static00 
void00 
GoodG2B00 
(00  
)00  !
{11 
int22 
data22 
;22 
data44 
=44 
$num44 
;44 
	Container55 
dataContainer55 
=55  !
new55" %
	Container55& /
(55/ 0
)550 1
;551 2
dataContainer66 
.66 
containerOne66 "
=66# $
data66% )
;66) *6
*CWE369_Divide_by_Zero__int_zero_modulo_67b77 2
.772 3
GoodG2BSink773 >
(77> ?
dataContainer77? L
)77N O
;77O P
}88 
private;; 
static;; 
void;; 
GoodB2G;; 
(;;  
);;  !
{<< 
int== 
data== 
;== 
data>> 
=>> 
$num>> 
;>> 
	Container?? 
dataContainer?? 
=??  !
new??" %
	Container??& /
(??/ 0
)??0 1
;??1 2
dataContainer@@ 
.@@ 
containerOne@@ "
=@@# $
data@@% )
;@@) *6
*CWE369_Divide_by_Zero__int_zero_modulo_67bAA 2
.AA2 3
GoodB2GSinkAA3 >
(AA> ?
dataContainerAA? L
)AAN O
;AAO P
}BB 
}DD 
}EE Ò
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_67b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_67b 0
{ 
public 

static 
void 
BadSink 
( 6
*CWE369_Divide_by_Zero__int_zero_modulo_67a I
.I J
	ContainerJ S
dataContainerT a
)b c
{ 
int 
data 
= 
dataContainer  
.  !
containerOne! -
;- .
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #6
*CWE369_Divide_by_Zero__int_zero_modulo_67a''# M
.''M N
	Container''N W
dataContainer''X e
)''f g
{(( 
int)) 
data)) 
=)) 
dataContainer))  
.))  !
containerOne))! -
;))- .
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #6
*CWE369_Divide_by_Zero__int_zero_modulo_67a00# M
.00M N
	Container00N W
dataContainer00X e
)00f g
{11 
int22 
data22 
=22 
dataContainer22  
.22  !
containerOne22! -
;22- .
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? †
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_68a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_68a 0
:1 2
AbstractTestCase3 C
{ 
public 

static 
int 
data 
; 
public 

override 
void 
Bad 
( 
) 
{ 
data 
= 
$num 
; 6
*CWE369_Divide_by_Zero__int_zero_modulo_68b 2
.2 3
BadSink3 :
(: ;
); <
;< =
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
static** 
void** 
GoodG2B** 
(**  
)**  !
{++ 
data-- 
=-- 
$num-- 
;-- 6
*CWE369_Divide_by_Zero__int_zero_modulo_68b.. 2
...2 3
GoodG2BSink..3 >
(..> ?
)..? @
;..@ A
}// 
private22 
static22 
void22 
GoodB2G22 
(22  
)22  !
{33 
data44 
=44 
$num44 
;44 6
*CWE369_Divide_by_Zero__int_zero_modulo_68b55 2
.552 3
GoodB2GSink553 >
(55> ?
)55? @
;55@ A
}66 
}88 
}99 ≈
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_68b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_68b 0
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
int 
data 
= 6
*CWE369_Divide_by_Zero__int_zero_modulo_68a =
.= >
data> B
;B C
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
public'' 

static'' 
void'' 
GoodG2BSink'' "
(''" #
)''# $
{(( 
int)) 
data)) 
=)) 6
*CWE369_Divide_by_Zero__int_zero_modulo_68a)) =
.))= >
data))> B
;))B C
IO,, 

.,,
 
	WriteLine,, 
(,, 
$str,, 
+,, 
data,, "
+,,# $
$str,,% *
+,,+ ,
(,,- .
$num,,. 1
%,,2 3
data,,4 8
),,8 9
+,,: ;
$str,,< @
),,@ A
;,,A B
}-- 
public00 

static00 
void00 
GoodB2GSink00 "
(00" #
)00# $
{11 
int22 
data22 
=22 6
*CWE369_Divide_by_Zero__int_zero_modulo_68a22 =
.22= >
data22> B
;22B C
if44 

(44 
data44 
!=44 
$num44 
)44 
{55 	
IO66 
.66 
	WriteLine66 
(66 
$str66 
+66  !
data66" &
+66' (
$str66) .
+66/ 0
(661 2
$num662 5
%666 7
data668 <
)66< =
+66> ?
$str66@ D
)66D E
;66E F
}77 	
else88 
{99 	
IO:: 
.:: 
	WriteLine:: 
(:: 
$str:: @
)::@ A
;::A B
};; 	
}<< 
}>> 
}?? ®
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_71a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_71a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 6
*CWE369_Divide_by_Zero__int_zero_modulo_71b 2
.2 3
BadSink3 :
(: ;
(; <
Object< B
)B C
dataC G
)I J
;J K
} 
public"" 

override"" 
void"" 
Good"" 
("" 
)"" 
{## 
GoodG2B$$ 
($$ 
)$$ 
;$$ 
GoodB2G%% 
(%% 
)%% 
;%% 
}&& 
private)) 
static)) 
void)) 
GoodG2B)) 
())  
)))  !
{** 
int++ 
data++ 
;++ 
data-- 
=-- 
$num-- 
;-- 6
*CWE369_Divide_by_Zero__int_zero_modulo_71b.. 2
...2 3
GoodG2BSink..3 >
(..> ?
(..? @
Object..@ F
)..F G
data..G K
)..M N
;..N O
}// 
private22 
static22 
void22 
GoodB2G22 
(22  
)22  !
{33 
int44 
data44 
;44 
data55 
=55 
$num55 
;55 6
*CWE369_Divide_by_Zero__int_zero_modulo_71b66 2
.662 3
GoodB2GSink663 >
(66> ?
(66? @
Object66@ F
)66F G
data66G K
)66M N
;66N O
}77 
}99 
}:: ì
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_71b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_71b 0
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
int 
data 
= 
( 
int 
) 

dataObject "
;" #
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
Object((# )

dataObject((* 4
)((5 6
{)) 
int** 
data** 
=** 
(** 
int** 
)** 

dataObject** "
;**" #
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
Object11# )

dataObject11* 4
)115 6
{22 
int33 
data33 
=33 
(33 
int33 
)33 

dataObject33 "
;33" #
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ ò
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_72a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_72a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 
	Hashtable 
dataHashtable 
=  !
new" %
	Hashtable& /
(/ 0
$num0 1
)1 2
;2 3
dataHashtable   
.   
Add   
(   
$num   
,   
data   !
)  ! "
;  " #
dataHashtable!! 
.!! 
Add!! 
(!! 
$num!! 
,!! 
data!! !
)!!! "
;!!" #
dataHashtable"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" !
)""! "
;""" #6
*CWE369_Divide_by_Zero__int_zero_modulo_72b## 2
.##2 3
BadSink##3 :
(##: ;
dataHashtable##; H
)##J K
;##K L
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
)'' 
{(( 
GoodG2B)) 
()) 
))) 
;)) 
GoodB2G** 
(** 
)** 
;** 
}++ 
private.. 
static.. 
void.. 
GoodG2B.. 
(..  
)..  !
{// 
int00 
data00 
;00 
data22 
=22 
$num22 
;22 
	Hashtable33 
dataHashtable33 
=33  !
new33" %
	Hashtable33& /
(33/ 0
$num330 1
)331 2
;332 3
dataHashtable44 
.44 
Add44 
(44 
$num44 
,44 
data44 !
)44! "
;44" #
dataHashtable55 
.55 
Add55 
(55 
$num55 
,55 
data55 !
)55! "
;55" #
dataHashtable66 
.66 
Add66 
(66 
$num66 
,66 
data66 !
)66! "
;66" #6
*CWE369_Divide_by_Zero__int_zero_modulo_72b77 2
.772 3
GoodG2BSink773 >
(77> ?
dataHashtable77? L
)77N O
;77O P
}88 
private;; 
static;; 
void;; 
GoodB2G;; 
(;;  
);;  !
{<< 
int== 
data== 
;== 
data>> 
=>> 
$num>> 
;>> 
	Hashtable?? 
dataHashtable?? 
=??  !
new??" %
	Hashtable??& /
(??/ 0
$num??0 1
)??1 2
;??2 3
dataHashtable@@ 
.@@ 
Add@@ 
(@@ 
$num@@ 
,@@ 
data@@ !
)@@! "
;@@" #
dataHashtableAA 
.AA 
AddAA 
(AA 
$numAA 
,AA 
dataAA !
)AA! "
;AA" #
dataHashtableBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB !
)BB! "
;BB" #6
*CWE369_Divide_by_Zero__int_zero_modulo_72bCC 2
.CC2 3
GoodB2GSinkCC3 >
(CC> ?
dataHashtableCC? L
)CCN O
;CCO P
}DD 
}FF 
}GG æ
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_72b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_72b 0
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
int 
data 
= 
( 
int 
) 
dataHashtable &
[& '
$num' (
]( )
;) *
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #
	Hashtable((# ,
dataHashtable((- :
)((; <
{)) 
int** 
data** 
=** 
(** 
int** 
)** 
dataHashtable** &
[**& '
$num**' (
]**( )
;**) *
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #
	Hashtable11# ,
dataHashtable11- :
)11; <
{22 
int33 
data33 
=33 
(33 
int33 
)33 
dataHashtable33 &
[33& '
$num33' (
]33( )
;33) *
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ å
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_73a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_73a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 

LinkedList 
< 
int 
> 
dataLinkedList &
=' (
new) ,

LinkedList- 7
<7 8
int8 ;
>; <
(< =
)= >
;> ?
dataLinkedList   
.   
AddLast   
(   
data   #
)  # $
;  $ %
dataLinkedList!! 
.!! 
AddLast!! 
(!! 
data!! #
)!!# $
;!!$ %
dataLinkedList"" 
."" 
AddLast"" 
("" 
data"" #
)""# $
;""$ %6
*CWE369_Divide_by_Zero__int_zero_modulo_73b## 2
.##2 3
BadSink##3 :
(##: ;
dataLinkedList##; I
)##K L
;##L M
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
)'' 
{(( 
GoodG2B)) 
()) 
))) 
;)) 
GoodB2G** 
(** 
)** 
;** 
}++ 
private.. 
static.. 
void.. 
GoodG2B.. 
(..  
)..  !
{// 
int00 
data00 
;00 
data22 
=22 
$num22 
;22 

LinkedList33 
<33 
int33 
>33 
dataLinkedList33 &
=33' (
new33) ,

LinkedList33- 7
<337 8
int338 ;
>33; <
(33< =
)33= >
;33> ?
dataLinkedList44 
.44 
AddLast44 
(44 
data44 #
)44# $
;44$ %
dataLinkedList55 
.55 
AddLast55 
(55 
data55 #
)55# $
;55$ %
dataLinkedList66 
.66 
AddLast66 
(66 
data66 #
)66# $
;66$ %6
*CWE369_Divide_by_Zero__int_zero_modulo_73b77 2
.772 3
GoodG2BSink773 >
(77> ?
dataLinkedList77? M
)77O P
;77P Q
}88 
private;; 
static;; 
void;; 
GoodB2G;; 
(;;  
);;  !
{<< 
int== 
data== 
;== 
data>> 
=>> 
$num>> 
;>> 

LinkedList?? 
<?? 
int?? 
>?? 
dataLinkedList?? &
=??' (
new??) ,

LinkedList??- 7
<??7 8
int??8 ;
>??; <
(??< =
)??= >
;??> ?
dataLinkedList@@ 
.@@ 
AddLast@@ 
(@@ 
data@@ #
)@@# $
;@@$ %
dataLinkedListAA 
.AA 
AddLastAA 
(AA 
dataAA #
)AA# $
;AA$ %
dataLinkedListBB 
.BB 
AddLastBB 
(BB 
dataBB #
)BB# $
;BB$ %6
*CWE369_Divide_by_Zero__int_zero_modulo_73bCC 2
.CC2 3
GoodB2GSinkCC3 >
(CC> ?
dataLinkedListCC? M
)CCO P
;CCP Q
}DD 
}FF 
}GG Ä
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_73b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_73b 0
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
int* -
>- .
dataLinkedList/ =
)> ?
{ 
int 
data 
= 
dataLinkedList !
.! "
Last" &
.& '
Value' ,
;, -
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( "
(((" #

LinkedList((# -
<((- .
int((. 1
>((1 2
dataLinkedList((3 A
)((B C
{)) 
int** 
data** 
=** 
dataLinkedList** !
.**! "
Last**" &
.**& '
Value**' ,
;**, -
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

LinkedList11# -
<11- .
int11. 1
>111 2
dataLinkedList113 A
)11B C
{22 
int33 
data33 
=33 
dataLinkedList33 !
.33! "
Last33" &
.33& '
Value33' ,
;33, -
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ —!
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_74a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_74a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; 

Dictionary 
< 
int 
, 
int 
> 
dataDictionary *
=+ ,
new- 0

Dictionary1 ;
<; <
int< ?
,? @
int@ C
>C D
(D E
)E F
;F G
dataDictionary   
.   
Add   
(   
$num   
,   
data   "
)  " #
;  # $
dataDictionary!! 
.!! 
Add!! 
(!! 
$num!! 
,!! 
data!! "
)!!" #
;!!# $
dataDictionary"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" "
)""" #
;""# $6
*CWE369_Divide_by_Zero__int_zero_modulo_74b## 2
.##2 3
BadSink##3 :
(##: ;
dataDictionary##; I
)##K L
;##L M
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
)'' 
{(( 
GoodG2B)) 
()) 
))) 
;)) 
GoodB2G** 
(** 
)** 
;** 
}++ 
private.. 
static.. 
void.. 
GoodG2B.. 
(..  
)..  !
{// 
int00 
data00 
;00 
data22 
=22 
$num22 
;22 

Dictionary33 
<33 
int33 
,33 
int33 
>33 
dataDictionary33 *
=33+ ,
new33- 0

Dictionary331 ;
<33; <
int33< ?
,33? @
int33@ C
>33C D
(33D E
)33E F
;33F G
dataDictionary44 
.44 
Add44 
(44 
$num44 
,44 
data44 "
)44" #
;44# $
dataDictionary55 
.55 
Add55 
(55 
$num55 
,55 
data55 "
)55" #
;55# $
dataDictionary66 
.66 
Add66 
(66 
$num66 
,66 
data66 "
)66" #
;66# $6
*CWE369_Divide_by_Zero__int_zero_modulo_74b77 2
.772 3
GoodG2BSink773 >
(77> ?
dataDictionary77? M
)77O P
;77P Q
}88 
private;; 
static;; 
void;; 
GoodB2G;; 
(;;  
);;  !
{<< 
int== 
data== 
;== 
data>> 
=>> 
$num>> 
;>> 

Dictionary?? 
<?? 
int?? 
,?? 
int?? 
>?? 
dataDictionary?? *
=??+ ,
new??- 0

Dictionary??1 ;
<??; <
int??< ?
,??? @
int??@ C
>??C D
(??D E
)??E F
;??F G
dataDictionary@@ 
.@@ 
Add@@ 
(@@ 
$num@@ 
,@@ 
data@@ "
)@@" #
;@@# $
dataDictionaryAA 
.AA 
AddAA 
(AA 
$numAA 
,AA 
dataAA "
)AA" #
;AA# $
dataDictionaryBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB "
)BB" #
;BB# $6
*CWE369_Divide_by_Zero__int_zero_modulo_74bCC 2
.CC2 3
GoodB2GSinkCC3 >
(CC> ?
dataDictionaryCC? M
)CCO P
;CCP Q
}DD 
}FF 
}GG ß
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_74b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_74b 0
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
int. 1
>1 2
dataDictionary3 A
)B C
{ 
int 
data 
= 
dataDictionary !
[! "
$num" #
]# $
;$ %
IO"" 

.""
 
	WriteLine"" 
("" 
$str"" 
+"" 
data"" "
+""# $
$str""% *
+""+ ,
(""- .
$num"". 1
%""2 3
data""4 8
)""8 9
+"": ;
$str""< @
)""@ A
;""A B
}## 
public(( 

static(( 
void(( 
GoodG2BSink(( #
(((# $

Dictionary(($ .
<((. /
int((/ 2
,((2 3
int((3 6
>((6 7
dataDictionary((8 F
)((G H
{)) 
int** 
data** 
=** 
dataDictionary** !
[**! "
$num**" #
]**# $
;**$ %
IO-- 

.--
 
	WriteLine-- 
(-- 
$str-- 
+-- 
data-- "
+--# $
$str--% *
+--+ ,
(--- .
$num--. 1
%--2 3
data--4 8
)--8 9
+--: ;
$str--< @
)--@ A
;--A B
}.. 
public11 

static11 
void11 
GoodB2GSink11 "
(11" #

Dictionary11# -
<11- .
int11. 1
,111 2
int112 5
>115 6
dataDictionary117 E
)11F G
{22 
int33 
data33 
=33 
dataDictionary33 !
[33! "
$num33" #
]33# $
;33$ %
if55 

(55 
data55 
!=55 
$num55 
)55 
{66 	
IO77 
.77 
	WriteLine77 
(77 
$str77 
+77  !
data77" &
+77' (
$str77) .
+77/ 0
(771 2
$num772 5
%776 7
data778 <
)77< =
+77> ?
$str77@ D
)77D E
;77E F
}88 	
else99 
{:: 	
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; @
);;@ A
;;;A B
}<< 	
}== 
}?? 
}@@ Õ,
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_75a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_75a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data   
=   
$num   
;   
byte"" 
["" 
]"" 
dataSerialized"" 
="" 
null""  $
;""$ %
try## 
{$$ 	
BinaryFormatter%% 
bf%% 
=%%  
new%%! $
BinaryFormatter%%% 4
(%%4 5
)%%5 6
;%%6 7
using&& 
(&& 
var&& 
ms&& 
=&& 
new&& 
MemoryStream&&  ,
(&&, -
)&&- .
)&&. /
{'' 
bf(( 
.(( 
	Serialize(( 
((( 
ms(( 
,((  
data((! %
)((% &
;((& '
dataSerialized)) 
=))  
ms))! #
.))# $
ToArray))$ +
())+ ,
))), -
;))- .
}** 6
*CWE369_Divide_by_Zero__int_zero_modulo_75b++ 6
.++6 7
BadSink++7 >
(++> ?
dataSerialized++? M
)++O P
;++P Q
},, 	
catch-- 
(-- "
SerializationException-- %
exceptSerialize--& 5
)--5 6
{.. 	
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// 
.// 
LogLevel// '
.//' (
Warn//( ,
,//, -
$str//. X
,//X Y
exceptSerialize//Z i
)//i j
;//j k
}00 	
}11 
public44 

override44 
void44 
Good44 
(44 
)44 
{55 
GoodG2B66 
(66 
)66 
;66 
GoodB2G77 
(77 
)77 
;77 
}88 
private;; 
static;; 
void;; 
GoodG2B;; 
(;;  
);;  !
{<< 
int== 
data== 
;== 
data>> 
=>> 
$num>> 
;>> 
byte@@ 
[@@ 
]@@ 
dataSerialized@@ 
=@@ 
null@@  $
;@@$ %
tryAA 
{BB 	
BinaryFormatterCC 
bfCC 
=CC  
newCC! $
BinaryFormatterCC% 4
(CC4 5
)CC5 6
;CC6 7
usingDD 
(DD 
varDD 
msDD 
=DD 
newDD 
MemoryStreamDD  ,
(DD, -
)DD- .
)DD. /
{EE 
bfFF 
.FF 
	SerializeFF 
(FF 
msFF 
,FF  
dataFF! %
)FF% &
;FF& '
dataSerializedGG 
=GG  
msGG! #
.GG# $
ToArrayGG$ +
(GG+ ,
)GG, -
;GG- .
}HH 6
*CWE369_Divide_by_Zero__int_zero_modulo_75bII 6
.II6 7
GoodG2BSinkII7 B
(IIB C
dataSerializedIIC Q
)IIS T
;IIT U
}JJ 	
catchKK 
(KK "
SerializationExceptionKK %
exceptSerializeKK& 5
)KK5 6
{LL 	
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM 
.MM 
LogLevelMM '
.MM' (
WarnMM( ,
,MM, -
$strMM. X
,MMX Y
exceptSerializeMMZ i
)MMi j
;MMj k
}NN 	
}OO 
privateRR 
staticRR 
voidRR 
GoodB2GRR 
(RR  
)RR  !
{SS 
intTT 
dataTT 
;TT 
dataUU 
=UU 
$numUU 
;UU 
byteWW 
[WW 
]WW 
dataSerializedWW 
=WW 
nullWW  $
;WW$ %
tryXX 
{YY 	
BinaryFormatterZZ 
bfZZ 
=ZZ  
newZZ! $
BinaryFormatterZZ% 4
(ZZ4 5
)ZZ5 6
;ZZ6 7
using[[ 
([[ 
var[[ 
ms[[ 
=[[ 
new[[ 
MemoryStream[[  ,
([[, -
)[[- .
)[[. /
{\\ 
bf]] 
.]] 
	Serialize]] 
(]] 
ms]] 
,]]  
data]]! %
)]]% &
;]]& '
dataSerialized^^ 
=^^  
ms^^! #
.^^# $
ToArray^^$ +
(^^+ ,
)^^, -
;^^- .
}__ 6
*CWE369_Divide_by_Zero__int_zero_modulo_75b`` 6
.``6 7
GoodB2GSink``7 B
(``B C
dataSerialized``C Q
)``S T
;``T U
}aa 	
catchbb 
(bb "
SerializationExceptionbb %
exceptSerializebb& 5
)bb5 6
{cc 	
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd 
.dd 
LogLeveldd '
.dd' (
Warndd( ,
,dd, -
$strdd. X
,ddX Y
exceptSerializeddZ i
)ddi j
;ddj k
}ee 	
}ff 
}hh 
}ii ¿5
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_75b.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_75b 0
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
int## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
int)) 
))) 
binForm)) #
.))# $
Deserialize))$ /
())/ 0
	memStream))0 9
)))9 :
;)): ;
}** 
IO-- 
.-- 
	WriteLine-- 
(-- 
$str-- 
+--  !
data--" &
+--' (
$str--) .
+--/ 0
(--1 2
$num--2 5
%--6 7
data--8 <
)--< =
+--> ?
$str--@ D
)--D E
;--E F
}.. 	
catch// 
(// "
SerializationException// %
exceptSerialize//& 5
)//5 6
{00 	
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 
.11 
LogLevel11 '
.11' (
Warn11( ,
,11, -
$str11. Y
,11Y Z
exceptSerialize11[ j
)11j k
;11k l
}22 	
}33 
public88 

static88 
void88 
GoodG2BSink88 "
(88" #
byte88# '
[88' (
]88( )
dataSerialized88* 8
)889 :
{99 
try:: 
{;; 	
int<< 
data<< 
;<< 
var== 
binForm== 
=== 
new== 
BinaryFormatter== -
(==- .
)==. /
;==/ 0
using>> 
(>> 
var>> 
	memStream>>  
=>>! "
new>># &
MemoryStream>>' 3
(>>3 4
)>>4 5
)>>5 6
{?? 
	memStream@@ 
.@@ 
Write@@ 
(@@  
dataSerialized@@  .
,@@. /
$num@@0 1
,@@1 2
dataSerialized@@3 A
.@@A B
Length@@B H
)@@H I
;@@I J
	memStreamAA 
.AA 
SeekAA 
(AA 
$numAA  
,AA  !

SeekOriginAA" ,
.AA, -
BeginAA- 2
)AA2 3
;AA3 4
dataBB 
=BB 
(BB 
intBB 
)BB 
binFormBB #
.BB# $
DeserializeBB$ /
(BB/ 0
	memStreamBB0 9
)BB9 :
;BB: ;
}CC 
IOFF 
.FF 
	WriteLineFF 
(FF 
$strFF 
+FF  !
dataFF" &
+FF' (
$strFF) .
+FF/ 0
(FF1 2
$numFF2 5
%FF6 7
dataFF8 <
)FF< =
+FF> ?
$strFF@ D
)FFD E
;FFE F
}GG 	
catchHH 
(HH "
SerializationExceptionHH %
exceptSerializeHH& 5
)HH5 6
{II 	
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ 
.JJ 
LogLevelJJ '
.JJ' (
WarnJJ( ,
,JJ, -
$strJJ. Y
,JJY Z
exceptSerializeJJ[ j
)JJj k
;JJk l
}KK 	
}LL 
publicOO 

staticOO 
voidOO 
GoodB2GSinkOO "
(OO" #
byteOO# '
[OO' (
]OO( )
dataSerializedOO* 8
)OO9 :
{PP 
tryQQ 
{RR 	
intSS 
dataSS 
;SS 
varTT 
binFormTT 
=TT 
newTT 
BinaryFormatterTT -
(TT- .
)TT. /
;TT/ 0
usingUU 
(UU 
varUU 
	memStreamUU  
=UU! "
newUU# &
MemoryStreamUU' 3
(UU3 4
)UU4 5
)UU5 6
{VV 
	memStreamWW 
.WW 
WriteWW 
(WW  
dataSerializedWW  .
,WW. /
$numWW0 1
,WW1 2
dataSerializedWW3 A
.WWA B
LengthWWB H
)WWH I
;WWI J
	memStreamXX 
.XX 
SeekXX 
(XX 
$numXX  
,XX  !

SeekOriginXX" ,
.XX, -
BeginXX- 2
)XX2 3
;XX3 4
dataYY 
=YY 
(YY 
intYY 
)YY 
binFormYY #
.YY# $
DeserializeYY$ /
(YY/ 0
	memStreamYY0 9
)YY9 :
;YY: ;
}ZZ 
if\\ 
(\\ 
data\\ 
!=\\ 
$num\\ 
)\\ 
{]] 
IO^^ 
.^^ 
	WriteLine^^ 
(^^ 
$str^^ #
+^^$ %
data^^& *
+^^+ ,
$str^^- 2
+^^3 4
(^^5 6
$num^^6 9
%^^: ;
data^^< @
)^^@ A
+^^B C
$str^^D H
)^^H I
;^^I J
}__ 
else`` 
{aa 
IObb 
.bb 
	WriteLinebb 
(bb 
$strbb D
)bbD E
;bbE F
}cc 
}dd 	
catchee 
(ee "
SerializationExceptionee %
exceptSerializeee& 5
)ee5 6
{ff 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
$strgg. Y
,ggY Z
exceptSerializegg[ j
)ggj k
;ggk l
}hh 	
}ii 
}kk 
}ll õ
£C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_81a.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 6
*CWE369_Divide_by_Zero__int_zero_modulo_81a 0
:1 2
AbstractTestCase3 C
{ 
public 

override 
void 
Bad 
( 
) 
{ 
int 
data 
; 
data 
= 
$num 
; :
.CWE369_Divide_by_Zero__int_zero_modulo_81_base 6

baseObject7 A
=B C
newD G9
-CWE369_Divide_by_Zero__int_zero_modulo_81_badH u
(u v
)v w
;w x

baseObject 
. 
Action 
( 
data 
)  
;  !
}   
public## 

override## 
void## 
Good## 
(## 
)## 
{$$ 
GoodG2B%% 
(%% 
)%% 
;%% 
GoodB2G&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
int,, 
data,, 
;,, 
data.. 
=.. 
$num.. 
;.. :
.CWE369_Divide_by_Zero__int_zero_modulo_81_base// 6

baseObject//7 A
=//B C
new//D G=
1CWE369_Divide_by_Zero__int_zero_modulo_81_goodG2B//H y
(//y z
)//z {
;//{ |

baseObject00 
.00 
Action00 
(00 
data00 
)00  
;00  !
}11 
private44 
void44 
GoodB2G44 
(44 
)44 
{55 
int66 
data66 
;66 
data77 
=77 
$num77 
;77 :
.CWE369_Divide_by_Zero__int_zero_modulo_81_base88 6

baseObject887 A
=88B C
new88D G=
1CWE369_Divide_by_Zero__int_zero_modulo_81_goodB2G88H y
(88y z
)88z {
;88{ |

baseObject99 
.99 
Action99 
(99 
data99 
)99  
;99  !
}:: 
}<< 
}== π
¶C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_81_bad.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class 9
-CWE369_Divide_by_Zero__int_zero_modulo_81_bad 3
:4 5:
.CWE369_Divide_by_Zero__int_zero_modulo_81_base6 d
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
IO   

.  
 
	WriteLine   
(   
$str   
+   
data   "
+  # $
$str  % *
+  + ,
(  - .
$num  . 1
%  2 3
data  4 8
)  8 9
+  : ;
$str  < @
)  @ A
;  A B
}!! 
}"" 
}## ø
ßC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_81_base.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
abstract 
class	 :
.CWE369_Divide_by_Zero__int_zero_modulo_81_base =
{ 
public 

abstract 
void 
Action 
(  
int  #
data$ (
)) *
;* +
} 
} Ê	
™C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_81_goodB2G.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class =
1CWE369_Divide_by_Zero__int_zero_modulo_81_goodB2G 7
:8 9:
.CWE369_Divide_by_Zero__int_zero_modulo_81_base: h
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
if   

(   
data   
!=   
$num   
)   
{!! 	
IO"" 
."" 
	WriteLine"" 
("" 
$str"" 
+""  !
data""" &
+""' (
$str"") .
+""/ 0
(""1 2
$num""2 5
%""6 7
data""8 <
)""< =
+""> ?
$str""@ D
)""D E
;""E F
}## 	
else$$ 
{%% 	
IO&& 
.&& 
	WriteLine&& 
(&& 
$str&& @
)&&@ A
;&&A B
}'' 	
}(( 
})) 
}** ¡
™C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\CWE369_Divide_by_Zero__int_zero_modulo_81_goodG2B.cs
	namespace 	
	testcases
 
. !
CWE369_Divide_by_Zero )
{ 
class =
1CWE369_Divide_by_Zero__int_zero_modulo_81_goodG2B 7
:8 9:
.CWE369_Divide_by_Zero__int_zero_modulo_81_base: h
{ 
public 

override 
void 
Action 
(  
int  #
data$ (
)) *
{ 
IO!! 

.!!
 
	WriteLine!! 
(!! 
$str!! 
+!! 
data!! "
+!!# $
$str!!% *
+!!+ ,
(!!- .
$num!!. 1
%!!2 3
data!!4 8
)!!8 9
+!!: ;
$str!!< @
)!!@ A
;!!A B
}"" 
}## 
}$$ ±·
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\Program.cs
	namespace		 	
	testcases		
 
.		 !
CWE369_Divide_by_Zero		 )
{

 
class 
Program 
{ 
static 
void	 
Main 
( 
string 
[ 
] 
args  
)  !
{" #
if 
( 
args 

.
 
Any 
( 
) 
) 
{ 
if 
( 
args 
[ 
$num 
] 
. 
Equals 
( 
$str 
, 
StringComparison ,
., -
OrdinalIgnoreCase- >
)> ?
||@ B
args 
[ 
$num 
] 
. 
Equals !
(! "
$str" *
,* +
StringComparison, <
.< =
OrdinalIgnoreCase= N
)N O
)O P
{Q R
Console 
. 
	WriteLine 
( 
$str R
+S T
$str b
)b c
;c d
System 
. 
Environment 
. 
Exit 
( 
$num 
) 
;  
} 
foreach"" 
("" 
string"" 
	className"" 
in""  
args""! %
)""% &
{""' (
try$$ 
{$$	 

Type** 

myClass** 
=** 
Type** 
.** 
GetType** !
(**! "
	className**" +
)**+ ,
;**, -
object++ 
myObject++ 
=++ 
	Activator++ !
.++! "
CreateInstance++" 0
(++0 1
myClass++1 8
)++8 9
;++9 :
myClass,, 
.,, 
InvokeMember,, 
(,, 
$str,, $
,,,$ %
BindingFlags-- 
.-- 
InvokeMethod--  
|--! "
BindingFlags--# /
.--/ 0
Instance--0 8
|--9 :
BindingFlags--; G
.--G H
Public--H N
,--N O
null.. 
,.. 
myObject// 
,// 
new00 

object00 
[00 
]00 
{00 
	className00 
}00  !
)00! "
;00" #
}22 
catch22 
(22 
	Exception22 
ex22 
)22 
{22 
Console44 
.44 
	WriteLine44 
(44 
$str44 7
+448 9
	className44: C
)44C D
;44D E
Console55 
.55 
	WriteLine55 
(55 
ex55 
.55 

StackTrace55 %
)55% &
;55& '
}77 
Console99 
.99 
	WriteLine99 
(99 
$str99 
)99 
;99 
};; 
}== 
else== 	
{==
 
RunTestCWE1CC 
(CC 
)CC 
;CC 
RunTestCWE2DD 
(DD 
)DD 
;DD 
RunTestCWE3EE 
(EE 
)EE 
;EE 
RunTestCWE4FF 
(FF 
)FF 
;FF 
RunTestCWE5GG 
(GG 
)GG 
;GG 
RunTestCWE6HH 
(HH 
)HH 
;HH 
RunTestCWE7II 
(II 
)II 
;II 
RunTestCWE8JJ 
(JJ 
)JJ 
;JJ 
RunTestCWE9KK 
(KK 
)KK 
;KK 
}LL 
}MM 
privateOO 
staticOO	 
voidOO 
RunTestCWE1OO  
(OO  !
)OO! "
{OO# $
}SS 
privateUU 
staticUU	 
voidUU 
RunTestCWE2UU  
(UU  !
)UU! "
{UU# $
}YY 
private[[ 
static[[	 
void[[ 
RunTestCWE3[[  
([[  !
)[[! "
{[[# $
(]] 
new]] 7
+CWE369_Divide_by_Zero__int_Random_divide_01]] 3
(]]3 4
)]]4 5
)]]5 6
.]]6 7
RunTest]]7 >
(]]> ?
$str]]? l
)]]l m
;]]m n
(^^ 
new^^ 7
+CWE369_Divide_by_Zero__int_Random_divide_02^^ 3
(^^3 4
)^^4 5
)^^5 6
.^^6 7
RunTest^^7 >
(^^> ?
$str^^? l
)^^l m
;^^m n
(__ 
new__ 7
+CWE369_Divide_by_Zero__int_Random_divide_03__ 3
(__3 4
)__4 5
)__5 6
.__6 7
RunTest__7 >
(__> ?
$str__? l
)__l m
;__m n
(`` 
new`` 7
+CWE369_Divide_by_Zero__int_Random_divide_04`` 3
(``3 4
)``4 5
)``5 6
.``6 7
RunTest``7 >
(``> ?
$str``? l
)``l m
;``m n
(aa 
newaa 7
+CWE369_Divide_by_Zero__int_Random_divide_05aa 3
(aa3 4
)aa4 5
)aa5 6
.aa6 7
RunTestaa7 >
(aa> ?
$straa? l
)aal m
;aam n
(bb 
newbb 7
+CWE369_Divide_by_Zero__int_Random_divide_06bb 3
(bb3 4
)bb4 5
)bb5 6
.bb6 7
RunTestbb7 >
(bb> ?
$strbb? l
)bbl m
;bbm n
(cc 
newcc 7
+CWE369_Divide_by_Zero__int_Random_divide_07cc 3
(cc3 4
)cc4 5
)cc5 6
.cc6 7
RunTestcc7 >
(cc> ?
$strcc? l
)ccl m
;ccm n
(dd 
newdd 7
+CWE369_Divide_by_Zero__int_Random_divide_08dd 3
(dd3 4
)dd4 5
)dd5 6
.dd6 7
RunTestdd7 >
(dd> ?
$strdd? l
)ddl m
;ddm n
(ee 
newee 7
+CWE369_Divide_by_Zero__int_Random_divide_09ee 3
(ee3 4
)ee4 5
)ee5 6
.ee6 7
RunTestee7 >
(ee> ?
$stree? l
)eel m
;eem n
(ff 
newff 7
+CWE369_Divide_by_Zero__int_Random_divide_10ff 3
(ff3 4
)ff4 5
)ff5 6
.ff6 7
RunTestff7 >
(ff> ?
$strff? l
)ffl m
;ffm n
(gg 
newgg 7
+CWE369_Divide_by_Zero__int_Random_divide_11gg 3
(gg3 4
)gg4 5
)gg5 6
.gg6 7
RunTestgg7 >
(gg> ?
$strgg? l
)ggl m
;ggm n
(hh 
newhh 7
+CWE369_Divide_by_Zero__int_Random_divide_12hh 3
(hh3 4
)hh4 5
)hh5 6
.hh6 7
RunTesthh7 >
(hh> ?
$strhh? l
)hhl m
;hhm n
(ii 
newii 7
+CWE369_Divide_by_Zero__int_Random_divide_13ii 3
(ii3 4
)ii4 5
)ii5 6
.ii6 7
RunTestii7 >
(ii> ?
$strii? l
)iil m
;iim n
(jj 
newjj 7
+CWE369_Divide_by_Zero__int_Random_divide_14jj 3
(jj3 4
)jj4 5
)jj5 6
.jj6 7
RunTestjj7 >
(jj> ?
$strjj? l
)jjl m
;jjm n
(kk 
newkk 7
+CWE369_Divide_by_Zero__int_Random_divide_15kk 3
(kk3 4
)kk4 5
)kk5 6
.kk6 7
RunTestkk7 >
(kk> ?
$strkk? l
)kkl m
;kkm n
(ll 
newll 7
+CWE369_Divide_by_Zero__int_Random_divide_16ll 3
(ll3 4
)ll4 5
)ll5 6
.ll6 7
RunTestll7 >
(ll> ?
$strll? l
)lll m
;llm n
(mm 
newmm 7
+CWE369_Divide_by_Zero__int_Random_divide_17mm 3
(mm3 4
)mm4 5
)mm5 6
.mm6 7
RunTestmm7 >
(mm> ?
$strmm? l
)mml m
;mmm n
(nn 
newnn 7
+CWE369_Divide_by_Zero__int_Random_divide_21nn 3
(nn3 4
)nn4 5
)nn5 6
.nn6 7
RunTestnn7 >
(nn> ?
$strnn? l
)nnl m
;nnm n
(oo 
newoo 8
,CWE369_Divide_by_Zero__int_Random_divide_22aoo 4
(oo4 5
)oo5 6
)oo6 7
.oo7 8
RunTestoo8 ?
(oo? @
$stroo@ n
)oon o
;ooo p
(pp 
newpp 7
+CWE369_Divide_by_Zero__int_Random_divide_31pp 3
(pp3 4
)pp4 5
)pp5 6
.pp6 7
RunTestpp7 >
(pp> ?
$strpp? l
)ppl m
;ppm n
(qq 
newqq 7
+CWE369_Divide_by_Zero__int_Random_divide_41qq 3
(qq3 4
)qq4 5
)qq5 6
.qq6 7
RunTestqq7 >
(qq> ?
$strqq? l
)qql m
;qqm n
(rr 
newrr 7
+CWE369_Divide_by_Zero__int_Random_divide_42rr 3
(rr3 4
)rr4 5
)rr5 6
.rr6 7
RunTestrr7 >
(rr> ?
$strrr? l
)rrl m
;rrm n
(ss 
newss 7
+CWE369_Divide_by_Zero__int_Random_divide_45ss 3
(ss3 4
)ss4 5
)ss5 6
.ss6 7
RunTestss7 >
(ss> ?
$strss? l
)ssl m
;ssm n
(tt 
newtt 8
,CWE369_Divide_by_Zero__int_Random_divide_51att 4
(tt4 5
)tt5 6
)tt6 7
.tt7 8
RunTesttt8 ?
(tt? @
$strtt@ n
)ttn o
;tto p
(uu 
newuu 8
,CWE369_Divide_by_Zero__int_Random_divide_52auu 4
(uu4 5
)uu5 6
)uu6 7
.uu7 8
RunTestuu8 ?
(uu? @
$struu@ n
)uun o
;uuo p
(vv 
newvv 8
,CWE369_Divide_by_Zero__int_Random_divide_53avv 4
(vv4 5
)vv5 6
)vv6 7
.vv7 8
RunTestvv8 ?
(vv? @
$strvv@ n
)vvn o
;vvo p
(ww 
newww 8
,CWE369_Divide_by_Zero__int_Random_divide_54aww 4
(ww4 5
)ww5 6
)ww6 7
.ww7 8
RunTestww8 ?
(ww? @
$strww@ n
)wwn o
;wwo p
(xx 
newxx 8
,CWE369_Divide_by_Zero__int_Random_divide_61axx 4
(xx4 5
)xx5 6
)xx6 7
.xx7 8
RunTestxx8 ?
(xx? @
$strxx@ n
)xxn o
;xxo p
(yy 
newyy 8
,CWE369_Divide_by_Zero__int_Random_divide_66ayy 4
(yy4 5
)yy5 6
)yy6 7
.yy7 8
RunTestyy8 ?
(yy? @
$stryy@ n
)yyn o
;yyo p
(zz 
newzz 8
,CWE369_Divide_by_Zero__int_Random_divide_67azz 4
(zz4 5
)zz5 6
)zz6 7
.zz7 8
RunTestzz8 ?
(zz? @
$strzz@ n
)zzn o
;zzo p
({{ 
new{{ 8
,CWE369_Divide_by_Zero__int_Random_divide_68a{{ 4
({{4 5
){{5 6
){{6 7
.{{7 8
RunTest{{8 ?
({{? @
$str{{@ n
){{n o
;{{o p
(|| 
new|| 8
,CWE369_Divide_by_Zero__int_Random_divide_71a|| 4
(||4 5
)||5 6
)||6 7
.||7 8
RunTest||8 ?
(||? @
$str||@ n
)||n o
;||o p
(}} 
new}} 8
,CWE369_Divide_by_Zero__int_Random_divide_72a}} 4
(}}4 5
)}}5 6
)}}6 7
.}}7 8
RunTest}}8 ?
(}}? @
$str}}@ n
)}}n o
;}}o p
(~~ 
new~~ 8
,CWE369_Divide_by_Zero__int_Random_divide_73a~~ 4
(~~4 5
)~~5 6
)~~6 7
.~~7 8
RunTest~~8 ?
(~~? @
$str~~@ n
)~~n o
;~~o p
( 
new 8
,CWE369_Divide_by_Zero__int_Random_divide_74a 4
(4 5
)5 6
)6 7
.7 8
RunTest8 ?
(? @
$str@ n
)n o
;o p
(
ÄÄ 
new
ÄÄ :
,CWE369_Divide_by_Zero__int_Random_divide_75a
ÄÄ 4
(
ÄÄ4 5
)
ÄÄ5 6
)
ÄÄ6 7
.
ÄÄ7 8
RunTest
ÄÄ8 ?
(
ÄÄ? @
$str
ÄÄ@ n
)
ÄÄn o
;
ÄÄo p
(
ÅÅ 
new
ÅÅ :
,CWE369_Divide_by_Zero__int_Random_divide_81a
ÅÅ 4
(
ÅÅ4 5
)
ÅÅ5 6
)
ÅÅ6 7
.
ÅÅ7 8
RunTest
ÅÅ8 ?
(
ÅÅ? @
$str
ÅÅ@ n
)
ÅÅn o
;
ÅÅo p
(
ÇÇ 
new
ÇÇ 9
+CWE369_Divide_by_Zero__int_Random_modulo_01
ÇÇ 3
(
ÇÇ3 4
)
ÇÇ4 5
)
ÇÇ5 6
.
ÇÇ6 7
RunTest
ÇÇ7 >
(
ÇÇ> ?
$str
ÇÇ? l
)
ÇÇl m
;
ÇÇm n
(
ÉÉ 
new
ÉÉ 9
+CWE369_Divide_by_Zero__int_Random_modulo_02
ÉÉ 3
(
ÉÉ3 4
)
ÉÉ4 5
)
ÉÉ5 6
.
ÉÉ6 7
RunTest
ÉÉ7 >
(
ÉÉ> ?
$str
ÉÉ? l
)
ÉÉl m
;
ÉÉm n
(
ÑÑ 
new
ÑÑ 9
+CWE369_Divide_by_Zero__int_Random_modulo_03
ÑÑ 3
(
ÑÑ3 4
)
ÑÑ4 5
)
ÑÑ5 6
.
ÑÑ6 7
RunTest
ÑÑ7 >
(
ÑÑ> ?
$str
ÑÑ? l
)
ÑÑl m
;
ÑÑm n
(
ÖÖ 
new
ÖÖ 9
+CWE369_Divide_by_Zero__int_Random_modulo_04
ÖÖ 3
(
ÖÖ3 4
)
ÖÖ4 5
)
ÖÖ5 6
.
ÖÖ6 7
RunTest
ÖÖ7 >
(
ÖÖ> ?
$str
ÖÖ? l
)
ÖÖl m
;
ÖÖm n
(
ÜÜ 
new
ÜÜ 9
+CWE369_Divide_by_Zero__int_Random_modulo_05
ÜÜ 3
(
ÜÜ3 4
)
ÜÜ4 5
)
ÜÜ5 6
.
ÜÜ6 7
RunTest
ÜÜ7 >
(
ÜÜ> ?
$str
ÜÜ? l
)
ÜÜl m
;
ÜÜm n
(
áá 
new
áá 9
+CWE369_Divide_by_Zero__int_Random_modulo_06
áá 3
(
áá3 4
)
áá4 5
)
áá5 6
.
áá6 7
RunTest
áá7 >
(
áá> ?
$str
áá? l
)
áál m
;
áám n
(
àà 
new
àà 9
+CWE369_Divide_by_Zero__int_Random_modulo_07
àà 3
(
àà3 4
)
àà4 5
)
àà5 6
.
àà6 7
RunTest
àà7 >
(
àà> ?
$str
àà? l
)
ààl m
;
ààm n
(
ââ 
new
ââ 9
+CWE369_Divide_by_Zero__int_Random_modulo_08
ââ 3
(
ââ3 4
)
ââ4 5
)
ââ5 6
.
ââ6 7
RunTest
ââ7 >
(
ââ> ?
$str
ââ? l
)
ââl m
;
ââm n
(
ää 
new
ää 9
+CWE369_Divide_by_Zero__int_Random_modulo_09
ää 3
(
ää3 4
)
ää4 5
)
ää5 6
.
ää6 7
RunTest
ää7 >
(
ää> ?
$str
ää? l
)
ääl m
;
ääm n
(
ãã 
new
ãã 9
+CWE369_Divide_by_Zero__int_Random_modulo_10
ãã 3
(
ãã3 4
)
ãã4 5
)
ãã5 6
.
ãã6 7
RunTest
ãã7 >
(
ãã> ?
$str
ãã? l
)
ããl m
;
ããm n
(
åå 
new
åå 9
+CWE369_Divide_by_Zero__int_Random_modulo_11
åå 3
(
åå3 4
)
åå4 5
)
åå5 6
.
åå6 7
RunTest
åå7 >
(
åå> ?
$str
åå? l
)
åål m
;
ååm n
(
çç 
new
çç 9
+CWE369_Divide_by_Zero__int_Random_modulo_12
çç 3
(
çç3 4
)
çç4 5
)
çç5 6
.
çç6 7
RunTest
çç7 >
(
çç> ?
$str
çç? l
)
ççl m
;
ççm n
(
éé 
new
éé 9
+CWE369_Divide_by_Zero__int_Random_modulo_13
éé 3
(
éé3 4
)
éé4 5
)
éé5 6
.
éé6 7
RunTest
éé7 >
(
éé> ?
$str
éé? l
)
éél m
;
éém n
(
èè 
new
èè 9
+CWE369_Divide_by_Zero__int_Random_modulo_14
èè 3
(
èè3 4
)
èè4 5
)
èè5 6
.
èè6 7
RunTest
èè7 >
(
èè> ?
$str
èè? l
)
èèl m
;
èèm n
(
êê 
new
êê 9
+CWE369_Divide_by_Zero__int_Random_modulo_15
êê 3
(
êê3 4
)
êê4 5
)
êê5 6
.
êê6 7
RunTest
êê7 >
(
êê> ?
$str
êê? l
)
êêl m
;
êêm n
(
ëë 
new
ëë 9
+CWE369_Divide_by_Zero__int_Random_modulo_16
ëë 3
(
ëë3 4
)
ëë4 5
)
ëë5 6
.
ëë6 7
RunTest
ëë7 >
(
ëë> ?
$str
ëë? l
)
ëël m
;
ëëm n
(
íí 
new
íí 9
+CWE369_Divide_by_Zero__int_Random_modulo_17
íí 3
(
íí3 4
)
íí4 5
)
íí5 6
.
íí6 7
RunTest
íí7 >
(
íí> ?
$str
íí? l
)
ííl m
;
íím n
(
ìì 
new
ìì 9
+CWE369_Divide_by_Zero__int_Random_modulo_21
ìì 3
(
ìì3 4
)
ìì4 5
)
ìì5 6
.
ìì6 7
RunTest
ìì7 >
(
ìì> ?
$str
ìì? l
)
ììl m
;
ììm n
(
îî 
new
îî :
,CWE369_Divide_by_Zero__int_Random_modulo_22a
îî 4
(
îî4 5
)
îî5 6
)
îî6 7
.
îî7 8
RunTest
îî8 ?
(
îî? @
$str
îî@ n
)
îîn o
;
îîo p
(
ïï 
new
ïï 9
+CWE369_Divide_by_Zero__int_Random_modulo_31
ïï 3
(
ïï3 4
)
ïï4 5
)
ïï5 6
.
ïï6 7
RunTest
ïï7 >
(
ïï> ?
$str
ïï? l
)
ïïl m
;
ïïm n
(
ññ 
new
ññ 9
+CWE369_Divide_by_Zero__int_Random_modulo_41
ññ 3
(
ññ3 4
)
ññ4 5
)
ññ5 6
.
ññ6 7
RunTest
ññ7 >
(
ññ> ?
$str
ññ? l
)
ññl m
;
ññm n
(
óó 
new
óó 9
+CWE369_Divide_by_Zero__int_Random_modulo_42
óó 3
(
óó3 4
)
óó4 5
)
óó5 6
.
óó6 7
RunTest
óó7 >
(
óó> ?
$str
óó? l
)
óól m
;
óóm n
(
òò 
new
òò 9
+CWE369_Divide_by_Zero__int_Random_modulo_45
òò 3
(
òò3 4
)
òò4 5
)
òò5 6
.
òò6 7
RunTest
òò7 >
(
òò> ?
$str
òò? l
)
òòl m
;
òòm n
(
ôô 
new
ôô :
,CWE369_Divide_by_Zero__int_Random_modulo_51a
ôô 4
(
ôô4 5
)
ôô5 6
)
ôô6 7
.
ôô7 8
RunTest
ôô8 ?
(
ôô? @
$str
ôô@ n
)
ôôn o
;
ôôo p
(
öö 
new
öö :
,CWE369_Divide_by_Zero__int_Random_modulo_52a
öö 4
(
öö4 5
)
öö5 6
)
öö6 7
.
öö7 8
RunTest
öö8 ?
(
öö? @
$str
öö@ n
)
öön o
;
ööo p
(
õõ 
new
õõ :
,CWE369_Divide_by_Zero__int_Random_modulo_53a
õõ 4
(
õõ4 5
)
õõ5 6
)
õõ6 7
.
õõ7 8
RunTest
õõ8 ?
(
õõ? @
$str
õõ@ n
)
õõn o
;
õõo p
(
úú 
new
úú :
,CWE369_Divide_by_Zero__int_Random_modulo_54a
úú 4
(
úú4 5
)
úú5 6
)
úú6 7
.
úú7 8
RunTest
úú8 ?
(
úú? @
$str
úú@ n
)
úún o
;
úúo p
(
ùù 
new
ùù :
,CWE369_Divide_by_Zero__int_Random_modulo_61a
ùù 4
(
ùù4 5
)
ùù5 6
)
ùù6 7
.
ùù7 8
RunTest
ùù8 ?
(
ùù? @
$str
ùù@ n
)
ùùn o
;
ùùo p
(
ûû 
new
ûû :
,CWE369_Divide_by_Zero__int_Random_modulo_66a
ûû 4
(
ûû4 5
)
ûû5 6
)
ûû6 7
.
ûû7 8
RunTest
ûû8 ?
(
ûû? @
$str
ûû@ n
)
ûûn o
;
ûûo p
(
üü 
new
üü :
,CWE369_Divide_by_Zero__int_Random_modulo_67a
üü 4
(
üü4 5
)
üü5 6
)
üü6 7
.
üü7 8
RunTest
üü8 ?
(
üü? @
$str
üü@ n
)
üün o
;
üüo p
(
†† 
new
†† :
,CWE369_Divide_by_Zero__int_Random_modulo_68a
†† 4
(
††4 5
)
††5 6
)
††6 7
.
††7 8
RunTest
††8 ?
(
††? @
$str
††@ n
)
††n o
;
††o p
(
°° 
new
°° :
,CWE369_Divide_by_Zero__int_Random_modulo_71a
°° 4
(
°°4 5
)
°°5 6
)
°°6 7
.
°°7 8
RunTest
°°8 ?
(
°°? @
$str
°°@ n
)
°°n o
;
°°o p
(
¢¢ 
new
¢¢ :
,CWE369_Divide_by_Zero__int_Random_modulo_72a
¢¢ 4
(
¢¢4 5
)
¢¢5 6
)
¢¢6 7
.
¢¢7 8
RunTest
¢¢8 ?
(
¢¢? @
$str
¢¢@ n
)
¢¢n o
;
¢¢o p
(
££ 
new
££ :
,CWE369_Divide_by_Zero__int_Random_modulo_73a
££ 4
(
££4 5
)
££5 6
)
££6 7
.
££7 8
RunTest
££8 ?
(
££? @
$str
££@ n
)
££n o
;
££o p
(
§§ 
new
§§ :
,CWE369_Divide_by_Zero__int_Random_modulo_74a
§§ 4
(
§§4 5
)
§§5 6
)
§§6 7
.
§§7 8
RunTest
§§8 ?
(
§§? @
$str
§§@ n
)
§§n o
;
§§o p
(
•• 
new
•• :
,CWE369_Divide_by_Zero__int_Random_modulo_75a
•• 4
(
••4 5
)
••5 6
)
••6 7
.
••7 8
RunTest
••8 ?
(
••? @
$str
••@ n
)
••n o
;
••o p
(
¶¶ 
new
¶¶ :
,CWE369_Divide_by_Zero__int_Random_modulo_81a
¶¶ 4
(
¶¶4 5
)
¶¶5 6
)
¶¶6 7
.
¶¶7 8
RunTest
¶¶8 ?
(
¶¶? @
$str
¶¶@ n
)
¶¶n o
;
¶¶o p
(
ßß 
new
ßß ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_01
ßß 5
(
ßß5 6
)
ßß6 7
)
ßß7 8
.
ßß8 9
RunTest
ßß9 @
(
ßß@ A
$str
ßßA p
)
ßßp q
;
ßßq r
(
®® 
new
®® ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_02
®® 5
(
®®5 6
)
®®6 7
)
®®7 8
.
®®8 9
RunTest
®®9 @
(
®®@ A
$str
®®A p
)
®®p q
;
®®q r
(
©© 
new
©© ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_03
©© 5
(
©©5 6
)
©©6 7
)
©©7 8
.
©©8 9
RunTest
©©9 @
(
©©@ A
$str
©©A p
)
©©p q
;
©©q r
(
™™ 
new
™™ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_04
™™ 5
(
™™5 6
)
™™6 7
)
™™7 8
.
™™8 9
RunTest
™™9 @
(
™™@ A
$str
™™A p
)
™™p q
;
™™q r
(
´´ 
new
´´ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_05
´´ 5
(
´´5 6
)
´´6 7
)
´´7 8
.
´´8 9
RunTest
´´9 @
(
´´@ A
$str
´´A p
)
´´p q
;
´´q r
(
¨¨ 
new
¨¨ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_06
¨¨ 5
(
¨¨5 6
)
¨¨6 7
)
¨¨7 8
.
¨¨8 9
RunTest
¨¨9 @
(
¨¨@ A
$str
¨¨A p
)
¨¨p q
;
¨¨q r
(
≠≠ 
new
≠≠ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_07
≠≠ 5
(
≠≠5 6
)
≠≠6 7
)
≠≠7 8
.
≠≠8 9
RunTest
≠≠9 @
(
≠≠@ A
$str
≠≠A p
)
≠≠p q
;
≠≠q r
(
ÆÆ 
new
ÆÆ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_08
ÆÆ 5
(
ÆÆ5 6
)
ÆÆ6 7
)
ÆÆ7 8
.
ÆÆ8 9
RunTest
ÆÆ9 @
(
ÆÆ@ A
$str
ÆÆA p
)
ÆÆp q
;
ÆÆq r
(
ØØ 
new
ØØ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_09
ØØ 5
(
ØØ5 6
)
ØØ6 7
)
ØØ7 8
.
ØØ8 9
RunTest
ØØ9 @
(
ØØ@ A
$str
ØØA p
)
ØØp q
;
ØØq r
(
∞∞ 
new
∞∞ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_10
∞∞ 5
(
∞∞5 6
)
∞∞6 7
)
∞∞7 8
.
∞∞8 9
RunTest
∞∞9 @
(
∞∞@ A
$str
∞∞A p
)
∞∞p q
;
∞∞q r
(
±± 
new
±± ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_11
±± 5
(
±±5 6
)
±±6 7
)
±±7 8
.
±±8 9
RunTest
±±9 @
(
±±@ A
$str
±±A p
)
±±p q
;
±±q r
(
≤≤ 
new
≤≤ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_12
≤≤ 5
(
≤≤5 6
)
≤≤6 7
)
≤≤7 8
.
≤≤8 9
RunTest
≤≤9 @
(
≤≤@ A
$str
≤≤A p
)
≤≤p q
;
≤≤q r
(
≥≥ 
new
≥≥ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_13
≥≥ 5
(
≥≥5 6
)
≥≥6 7
)
≥≥7 8
.
≥≥8 9
RunTest
≥≥9 @
(
≥≥@ A
$str
≥≥A p
)
≥≥p q
;
≥≥q r
(
¥¥ 
new
¥¥ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_14
¥¥ 5
(
¥¥5 6
)
¥¥6 7
)
¥¥7 8
.
¥¥8 9
RunTest
¥¥9 @
(
¥¥@ A
$str
¥¥A p
)
¥¥p q
;
¥¥q r
(
µµ 
new
µµ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_15
µµ 5
(
µµ5 6
)
µµ6 7
)
µµ7 8
.
µµ8 9
RunTest
µµ9 @
(
µµ@ A
$str
µµA p
)
µµp q
;
µµq r
(
∂∂ 
new
∂∂ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_16
∂∂ 5
(
∂∂5 6
)
∂∂6 7
)
∂∂7 8
.
∂∂8 9
RunTest
∂∂9 @
(
∂∂@ A
$str
∂∂A p
)
∂∂p q
;
∂∂q r
(
∑∑ 
new
∑∑ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_17
∑∑ 5
(
∑∑5 6
)
∑∑6 7
)
∑∑7 8
.
∑∑8 9
RunTest
∑∑9 @
(
∑∑@ A
$str
∑∑A p
)
∑∑p q
;
∑∑q r
(
∏∏ 
new
∏∏ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_21
∏∏ 5
(
∏∏5 6
)
∏∏6 7
)
∏∏7 8
.
∏∏8 9
RunTest
∏∏9 @
(
∏∏@ A
$str
∏∏A p
)
∏∏p q
;
∏∏q r
(
ππ 
new
ππ <
.CWE369_Divide_by_Zero__int_ReadLine_divide_22a
ππ 6
(
ππ6 7
)
ππ7 8
)
ππ8 9
.
ππ9 :
RunTest
ππ: A
(
ππA B
$str
ππB r
)
ππr s
;
ππs t
(
∫∫ 
new
∫∫ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_31
∫∫ 5
(
∫∫5 6
)
∫∫6 7
)
∫∫7 8
.
∫∫8 9
RunTest
∫∫9 @
(
∫∫@ A
$str
∫∫A p
)
∫∫p q
;
∫∫q r
(
ªª 
new
ªª ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_41
ªª 5
(
ªª5 6
)
ªª6 7
)
ªª7 8
.
ªª8 9
RunTest
ªª9 @
(
ªª@ A
$str
ªªA p
)
ªªp q
;
ªªq r
(
ºº 
new
ºº ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_42
ºº 5
(
ºº5 6
)
ºº6 7
)
ºº7 8
.
ºº8 9
RunTest
ºº9 @
(
ºº@ A
$str
ººA p
)
ººp q
;
ººq r
(
ΩΩ 
new
ΩΩ ;
-CWE369_Divide_by_Zero__int_ReadLine_divide_45
ΩΩ 5
(
ΩΩ5 6
)
ΩΩ6 7
)
ΩΩ7 8
.
ΩΩ8 9
RunTest
ΩΩ9 @
(
ΩΩ@ A
$str
ΩΩA p
)
ΩΩp q
;
ΩΩq r
(
ææ 
new
ææ <
.CWE369_Divide_by_Zero__int_ReadLine_divide_51a
ææ 6
(
ææ6 7
)
ææ7 8
)
ææ8 9
.
ææ9 :
RunTest
ææ: A
(
ææA B
$str
ææB r
)
æær s
;
ææs t
(
øø 
new
øø <
.CWE369_Divide_by_Zero__int_ReadLine_divide_52a
øø 6
(
øø6 7
)
øø7 8
)
øø8 9
.
øø9 :
RunTest
øø: A
(
øøA B
$str
øøB r
)
øør s
;
øøs t
(
¿¿ 
new
¿¿ <
.CWE369_Divide_by_Zero__int_ReadLine_divide_53a
¿¿ 6
(
¿¿6 7
)
¿¿7 8
)
¿¿8 9
.
¿¿9 :
RunTest
¿¿: A
(
¿¿A B
$str
¿¿B r
)
¿¿r s
;
¿¿s t
(
¡¡ 
new
¡¡ <
.CWE369_Divide_by_Zero__int_ReadLine_divide_54a
¡¡ 6
(
¡¡6 7
)
¡¡7 8
)
¡¡8 9
.
¡¡9 :
RunTest
¡¡: A
(
¡¡A B
$str
¡¡B r
)
¡¡r s
;
¡¡s t
(
¬¬ 
new
¬¬ <
.CWE369_Divide_by_Zero__int_ReadLine_divide_61a
¬¬ 6
(
¬¬6 7
)
¬¬7 8
)
¬¬8 9
.
¬¬9 :
RunTest
¬¬: A
(
¬¬A B
$str
¬¬B r
)
¬¬r s
;
¬¬s t
(
√√ 
new
√√ <
.CWE369_Divide_by_Zero__int_ReadLine_divide_66a
√√ 6
(
√√6 7
)
√√7 8
)
√√8 9
.
√√9 :
RunTest
√√: A
(
√√A B
$str
√√B r
)
√√r s
;
√√s t
(
ƒƒ 
new
ƒƒ <
.CWE369_Divide_by_Zero__int_ReadLine_divide_67a
ƒƒ 6
(
ƒƒ6 7
)
ƒƒ7 8
)
ƒƒ8 9
.
ƒƒ9 :
RunTest
ƒƒ: A
(
ƒƒA B
$str
ƒƒB r
)
ƒƒr s
;
ƒƒs t
(
≈≈ 
new
≈≈ <
.CWE369_Divide_by_Zero__int_ReadLine_divide_68a
≈≈ 6
(
≈≈6 7
)
≈≈7 8
)
≈≈8 9
.
≈≈9 :
RunTest
≈≈: A
(
≈≈A B
$str
≈≈B r
)
≈≈r s
;
≈≈s t
(
∆∆ 
new
∆∆ <
.CWE369_Divide_by_Zero__int_ReadLine_divide_71a
∆∆ 6
(
∆∆6 7
)
∆∆7 8
)
∆∆8 9
.
∆∆9 :
RunTest
∆∆: A
(
∆∆A B
$str
∆∆B r
)
∆∆r s
;
∆∆s t
(
«« 
new
«« <
.CWE369_Divide_by_Zero__int_ReadLine_divide_72a
«« 6
(
««6 7
)
««7 8
)
««8 9
.
««9 :
RunTest
««: A
(
««A B
$str
««B r
)
««r s
;
««s t
(
»» 
new
»» <
.CWE369_Divide_by_Zero__int_ReadLine_divide_73a
»» 6
(
»»6 7
)
»»7 8
)
»»8 9
.
»»9 :
RunTest
»»: A
(
»»A B
$str
»»B r
)
»»r s
;
»»s t
(
…… 
new
…… <
.CWE369_Divide_by_Zero__int_ReadLine_divide_74a
…… 6
(
……6 7
)
……7 8
)
……8 9
.
……9 :
RunTest
……: A
(
……A B
$str
……B r
)
……r s
;
……s t
(
   
new
   <
.CWE369_Divide_by_Zero__int_ReadLine_divide_75a
   6
(
  6 7
)
  7 8
)
  8 9
.
  9 :
RunTest
  : A
(
  A B
$str
  B r
)
  r s
;
  s t
(
ÀÀ 
new
ÀÀ <
.CWE369_Divide_by_Zero__int_ReadLine_divide_81a
ÀÀ 6
(
ÀÀ6 7
)
ÀÀ7 8
)
ÀÀ8 9
.
ÀÀ9 :
RunTest
ÀÀ: A
(
ÀÀA B
$str
ÀÀB r
)
ÀÀr s
;
ÀÀs t
(
ÃÃ 
new
ÃÃ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_01
ÃÃ 5
(
ÃÃ5 6
)
ÃÃ6 7
)
ÃÃ7 8
.
ÃÃ8 9
RunTest
ÃÃ9 @
(
ÃÃ@ A
$str
ÃÃA p
)
ÃÃp q
;
ÃÃq r
(
ÕÕ 
new
ÕÕ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_02
ÕÕ 5
(
ÕÕ5 6
)
ÕÕ6 7
)
ÕÕ7 8
.
ÕÕ8 9
RunTest
ÕÕ9 @
(
ÕÕ@ A
$str
ÕÕA p
)
ÕÕp q
;
ÕÕq r
(
ŒŒ 
new
ŒŒ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_03
ŒŒ 5
(
ŒŒ5 6
)
ŒŒ6 7
)
ŒŒ7 8
.
ŒŒ8 9
RunTest
ŒŒ9 @
(
ŒŒ@ A
$str
ŒŒA p
)
ŒŒp q
;
ŒŒq r
(
œœ 
new
œœ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_04
œœ 5
(
œœ5 6
)
œœ6 7
)
œœ7 8
.
œœ8 9
RunTest
œœ9 @
(
œœ@ A
$str
œœA p
)
œœp q
;
œœq r
(
–– 
new
–– ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_05
–– 5
(
––5 6
)
––6 7
)
––7 8
.
––8 9
RunTest
––9 @
(
––@ A
$str
––A p
)
––p q
;
––q r
(
—— 
new
—— ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_06
—— 5
(
——5 6
)
——6 7
)
——7 8
.
——8 9
RunTest
——9 @
(
——@ A
$str
——A p
)
——p q
;
——q r
(
““ 
new
““ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_07
““ 5
(
““5 6
)
““6 7
)
““7 8
.
““8 9
RunTest
““9 @
(
““@ A
$str
““A p
)
““p q
;
““q r
(
”” 
new
”” ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_08
”” 5
(
””5 6
)
””6 7
)
””7 8
.
””8 9
RunTest
””9 @
(
””@ A
$str
””A p
)
””p q
;
””q r
(
‘‘ 
new
‘‘ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_09
‘‘ 5
(
‘‘5 6
)
‘‘6 7
)
‘‘7 8
.
‘‘8 9
RunTest
‘‘9 @
(
‘‘@ A
$str
‘‘A p
)
‘‘p q
;
‘‘q r
(
’’ 
new
’’ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_10
’’ 5
(
’’5 6
)
’’6 7
)
’’7 8
.
’’8 9
RunTest
’’9 @
(
’’@ A
$str
’’A p
)
’’p q
;
’’q r
(
÷÷ 
new
÷÷ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_11
÷÷ 5
(
÷÷5 6
)
÷÷6 7
)
÷÷7 8
.
÷÷8 9
RunTest
÷÷9 @
(
÷÷@ A
$str
÷÷A p
)
÷÷p q
;
÷÷q r
(
◊◊ 
new
◊◊ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_12
◊◊ 5
(
◊◊5 6
)
◊◊6 7
)
◊◊7 8
.
◊◊8 9
RunTest
◊◊9 @
(
◊◊@ A
$str
◊◊A p
)
◊◊p q
;
◊◊q r
(
ÿÿ 
new
ÿÿ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_13
ÿÿ 5
(
ÿÿ5 6
)
ÿÿ6 7
)
ÿÿ7 8
.
ÿÿ8 9
RunTest
ÿÿ9 @
(
ÿÿ@ A
$str
ÿÿA p
)
ÿÿp q
;
ÿÿq r
(
ŸŸ 
new
ŸŸ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_14
ŸŸ 5
(
ŸŸ5 6
)
ŸŸ6 7
)
ŸŸ7 8
.
ŸŸ8 9
RunTest
ŸŸ9 @
(
ŸŸ@ A
$str
ŸŸA p
)
ŸŸp q
;
ŸŸq r
(
⁄⁄ 
new
⁄⁄ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_15
⁄⁄ 5
(
⁄⁄5 6
)
⁄⁄6 7
)
⁄⁄7 8
.
⁄⁄8 9
RunTest
⁄⁄9 @
(
⁄⁄@ A
$str
⁄⁄A p
)
⁄⁄p q
;
⁄⁄q r
(
€€ 
new
€€ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_16
€€ 5
(
€€5 6
)
€€6 7
)
€€7 8
.
€€8 9
RunTest
€€9 @
(
€€@ A
$str
€€A p
)
€€p q
;
€€q r
(
‹‹ 
new
‹‹ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_17
‹‹ 5
(
‹‹5 6
)
‹‹6 7
)
‹‹7 8
.
‹‹8 9
RunTest
‹‹9 @
(
‹‹@ A
$str
‹‹A p
)
‹‹p q
;
‹‹q r
(
›› 
new
›› ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_21
›› 5
(
››5 6
)
››6 7
)
››7 8
.
››8 9
RunTest
››9 @
(
››@ A
$str
››A p
)
››p q
;
››q r
(
ﬁﬁ 
new
ﬁﬁ <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_22a
ﬁﬁ 6
(
ﬁﬁ6 7
)
ﬁﬁ7 8
)
ﬁﬁ8 9
.
ﬁﬁ9 :
RunTest
ﬁﬁ: A
(
ﬁﬁA B
$str
ﬁﬁB r
)
ﬁﬁr s
;
ﬁﬁs t
(
ﬂﬂ 
new
ﬂﬂ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_31
ﬂﬂ 5
(
ﬂﬂ5 6
)
ﬂﬂ6 7
)
ﬂﬂ7 8
.
ﬂﬂ8 9
RunTest
ﬂﬂ9 @
(
ﬂﬂ@ A
$str
ﬂﬂA p
)
ﬂﬂp q
;
ﬂﬂq r
(
‡‡ 
new
‡‡ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_41
‡‡ 5
(
‡‡5 6
)
‡‡6 7
)
‡‡7 8
.
‡‡8 9
RunTest
‡‡9 @
(
‡‡@ A
$str
‡‡A p
)
‡‡p q
;
‡‡q r
(
·· 
new
·· ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_42
·· 5
(
··5 6
)
··6 7
)
··7 8
.
··8 9
RunTest
··9 @
(
··@ A
$str
··A p
)
··p q
;
··q r
(
‚‚ 
new
‚‚ ;
-CWE369_Divide_by_Zero__int_ReadLine_modulo_45
‚‚ 5
(
‚‚5 6
)
‚‚6 7
)
‚‚7 8
.
‚‚8 9
RunTest
‚‚9 @
(
‚‚@ A
$str
‚‚A p
)
‚‚p q
;
‚‚q r
(
„„ 
new
„„ <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_51a
„„ 6
(
„„6 7
)
„„7 8
)
„„8 9
.
„„9 :
RunTest
„„: A
(
„„A B
$str
„„B r
)
„„r s
;
„„s t
(
‰‰ 
new
‰‰ <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_52a
‰‰ 6
(
‰‰6 7
)
‰‰7 8
)
‰‰8 9
.
‰‰9 :
RunTest
‰‰: A
(
‰‰A B
$str
‰‰B r
)
‰‰r s
;
‰‰s t
(
ÂÂ 
new
ÂÂ <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_53a
ÂÂ 6
(
ÂÂ6 7
)
ÂÂ7 8
)
ÂÂ8 9
.
ÂÂ9 :
RunTest
ÂÂ: A
(
ÂÂA B
$str
ÂÂB r
)
ÂÂr s
;
ÂÂs t
(
ÊÊ 
new
ÊÊ <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_54a
ÊÊ 6
(
ÊÊ6 7
)
ÊÊ7 8
)
ÊÊ8 9
.
ÊÊ9 :
RunTest
ÊÊ: A
(
ÊÊA B
$str
ÊÊB r
)
ÊÊr s
;
ÊÊs t
(
ÁÁ 
new
ÁÁ <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_61a
ÁÁ 6
(
ÁÁ6 7
)
ÁÁ7 8
)
ÁÁ8 9
.
ÁÁ9 :
RunTest
ÁÁ: A
(
ÁÁA B
$str
ÁÁB r
)
ÁÁr s
;
ÁÁs t
(
ËË 
new
ËË <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_66a
ËË 6
(
ËË6 7
)
ËË7 8
)
ËË8 9
.
ËË9 :
RunTest
ËË: A
(
ËËA B
$str
ËËB r
)
ËËr s
;
ËËs t
(
ÈÈ 
new
ÈÈ <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_67a
ÈÈ 6
(
ÈÈ6 7
)
ÈÈ7 8
)
ÈÈ8 9
.
ÈÈ9 :
RunTest
ÈÈ: A
(
ÈÈA B
$str
ÈÈB r
)
ÈÈr s
;
ÈÈs t
(
ÍÍ 
new
ÍÍ <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_68a
ÍÍ 6
(
ÍÍ6 7
)
ÍÍ7 8
)
ÍÍ8 9
.
ÍÍ9 :
RunTest
ÍÍ: A
(
ÍÍA B
$str
ÍÍB r
)
ÍÍr s
;
ÍÍs t
(
ÎÎ 
new
ÎÎ <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_71a
ÎÎ 6
(
ÎÎ6 7
)
ÎÎ7 8
)
ÎÎ8 9
.
ÎÎ9 :
RunTest
ÎÎ: A
(
ÎÎA B
$str
ÎÎB r
)
ÎÎr s
;
ÎÎs t
(
ÏÏ 
new
ÏÏ <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_72a
ÏÏ 6
(
ÏÏ6 7
)
ÏÏ7 8
)
ÏÏ8 9
.
ÏÏ9 :
RunTest
ÏÏ: A
(
ÏÏA B
$str
ÏÏB r
)
ÏÏr s
;
ÏÏs t
(
ÌÌ 
new
ÌÌ <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_73a
ÌÌ 6
(
ÌÌ6 7
)
ÌÌ7 8
)
ÌÌ8 9
.
ÌÌ9 :
RunTest
ÌÌ: A
(
ÌÌA B
$str
ÌÌB r
)
ÌÌr s
;
ÌÌs t
(
ÓÓ 
new
ÓÓ <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_74a
ÓÓ 6
(
ÓÓ6 7
)
ÓÓ7 8
)
ÓÓ8 9
.
ÓÓ9 :
RunTest
ÓÓ: A
(
ÓÓA B
$str
ÓÓB r
)
ÓÓr s
;
ÓÓs t
(
ÔÔ 
new
ÔÔ <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_75a
ÔÔ 6
(
ÔÔ6 7
)
ÔÔ7 8
)
ÔÔ8 9
.
ÔÔ9 :
RunTest
ÔÔ: A
(
ÔÔA B
$str
ÔÔB r
)
ÔÔr s
;
ÔÔs t
(
 
new
 <
.CWE369_Divide_by_Zero__int_ReadLine_modulo_81a
 6
(
6 7
)
7 8
)
8 9
.
9 :
RunTest
: A
(
A B
$str
B r
)
r s
;
s t
(
ÒÒ 
new
ÒÒ 7
)CWE369_Divide_by_Zero__int_zero_divide_01
ÒÒ 1
(
ÒÒ1 2
)
ÒÒ2 3
)
ÒÒ3 4
.
ÒÒ4 5
RunTest
ÒÒ5 <
(
ÒÒ< =
$str
ÒÒ= h
)
ÒÒh i
;
ÒÒi j
(
ÚÚ 
new
ÚÚ 7
)CWE369_Divide_by_Zero__int_zero_divide_02
ÚÚ 1
(
ÚÚ1 2
)
ÚÚ2 3
)
ÚÚ3 4
.
ÚÚ4 5
RunTest
ÚÚ5 <
(
ÚÚ< =
$str
ÚÚ= h
)
ÚÚh i
;
ÚÚi j
(
ÛÛ 
new
ÛÛ 7
)CWE369_Divide_by_Zero__int_zero_divide_03
ÛÛ 1
(
ÛÛ1 2
)
ÛÛ2 3
)
ÛÛ3 4
.
ÛÛ4 5
RunTest
ÛÛ5 <
(
ÛÛ< =
$str
ÛÛ= h
)
ÛÛh i
;
ÛÛi j
(
ÙÙ 
new
ÙÙ 7
)CWE369_Divide_by_Zero__int_zero_divide_04
ÙÙ 1
(
ÙÙ1 2
)
ÙÙ2 3
)
ÙÙ3 4
.
ÙÙ4 5
RunTest
ÙÙ5 <
(
ÙÙ< =
$str
ÙÙ= h
)
ÙÙh i
;
ÙÙi j
(
ıı 
new
ıı 7
)CWE369_Divide_by_Zero__int_zero_divide_05
ıı 1
(
ıı1 2
)
ıı2 3
)
ıı3 4
.
ıı4 5
RunTest
ıı5 <
(
ıı< =
$str
ıı= h
)
ııh i
;
ııi j
(
ˆˆ 
new
ˆˆ 7
)CWE369_Divide_by_Zero__int_zero_divide_06
ˆˆ 1
(
ˆˆ1 2
)
ˆˆ2 3
)
ˆˆ3 4
.
ˆˆ4 5
RunTest
ˆˆ5 <
(
ˆˆ< =
$str
ˆˆ= h
)
ˆˆh i
;
ˆˆi j
(
˜˜ 
new
˜˜ 7
)CWE369_Divide_by_Zero__int_zero_divide_07
˜˜ 1
(
˜˜1 2
)
˜˜2 3
)
˜˜3 4
.
˜˜4 5
RunTest
˜˜5 <
(
˜˜< =
$str
˜˜= h
)
˜˜h i
;
˜˜i j
(
¯¯ 
new
¯¯ 7
)CWE369_Divide_by_Zero__int_zero_divide_08
¯¯ 1
(
¯¯1 2
)
¯¯2 3
)
¯¯3 4
.
¯¯4 5
RunTest
¯¯5 <
(
¯¯< =
$str
¯¯= h
)
¯¯h i
;
¯¯i j
(
˘˘ 
new
˘˘ 7
)CWE369_Divide_by_Zero__int_zero_divide_09
˘˘ 1
(
˘˘1 2
)
˘˘2 3
)
˘˘3 4
.
˘˘4 5
RunTest
˘˘5 <
(
˘˘< =
$str
˘˘= h
)
˘˘h i
;
˘˘i j
(
˙˙ 
new
˙˙ 7
)CWE369_Divide_by_Zero__int_zero_divide_10
˙˙ 1
(
˙˙1 2
)
˙˙2 3
)
˙˙3 4
.
˙˙4 5
RunTest
˙˙5 <
(
˙˙< =
$str
˙˙= h
)
˙˙h i
;
˙˙i j
(
˚˚ 
new
˚˚ 7
)CWE369_Divide_by_Zero__int_zero_divide_11
˚˚ 1
(
˚˚1 2
)
˚˚2 3
)
˚˚3 4
.
˚˚4 5
RunTest
˚˚5 <
(
˚˚< =
$str
˚˚= h
)
˚˚h i
;
˚˚i j
(
¸¸ 
new
¸¸ 7
)CWE369_Divide_by_Zero__int_zero_divide_12
¸¸ 1
(
¸¸1 2
)
¸¸2 3
)
¸¸3 4
.
¸¸4 5
RunTest
¸¸5 <
(
¸¸< =
$str
¸¸= h
)
¸¸h i
;
¸¸i j
(
˝˝ 
new
˝˝ 7
)CWE369_Divide_by_Zero__int_zero_divide_13
˝˝ 1
(
˝˝1 2
)
˝˝2 3
)
˝˝3 4
.
˝˝4 5
RunTest
˝˝5 <
(
˝˝< =
$str
˝˝= h
)
˝˝h i
;
˝˝i j
(
˛˛ 
new
˛˛ 7
)CWE369_Divide_by_Zero__int_zero_divide_14
˛˛ 1
(
˛˛1 2
)
˛˛2 3
)
˛˛3 4
.
˛˛4 5
RunTest
˛˛5 <
(
˛˛< =
$str
˛˛= h
)
˛˛h i
;
˛˛i j
(
ˇˇ 
new
ˇˇ 7
)CWE369_Divide_by_Zero__int_zero_divide_15
ˇˇ 1
(
ˇˇ1 2
)
ˇˇ2 3
)
ˇˇ3 4
.
ˇˇ4 5
RunTest
ˇˇ5 <
(
ˇˇ< =
$str
ˇˇ= h
)
ˇˇh i
;
ˇˇi j
(
ÄÄ 
new
ÄÄ 7
)CWE369_Divide_by_Zero__int_zero_divide_16
ÄÄ 1
(
ÄÄ1 2
)
ÄÄ2 3
)
ÄÄ3 4
.
ÄÄ4 5
RunTest
ÄÄ5 <
(
ÄÄ< =
$str
ÄÄ= h
)
ÄÄh i
;
ÄÄi j
(
ÅÅ 
new
ÅÅ 7
)CWE369_Divide_by_Zero__int_zero_divide_17
ÅÅ 1
(
ÅÅ1 2
)
ÅÅ2 3
)
ÅÅ3 4
.
ÅÅ4 5
RunTest
ÅÅ5 <
(
ÅÅ< =
$str
ÅÅ= h
)
ÅÅh i
;
ÅÅi j
(
ÇÇ 
new
ÇÇ 7
)CWE369_Divide_by_Zero__int_zero_divide_21
ÇÇ 1
(
ÇÇ1 2
)
ÇÇ2 3
)
ÇÇ3 4
.
ÇÇ4 5
RunTest
ÇÇ5 <
(
ÇÇ< =
$str
ÇÇ= h
)
ÇÇh i
;
ÇÇi j
(
ÉÉ 
new
ÉÉ 8
*CWE369_Divide_by_Zero__int_zero_divide_22a
ÉÉ 2
(
ÉÉ2 3
)
ÉÉ3 4
)
ÉÉ4 5
.
ÉÉ5 6
RunTest
ÉÉ6 =
(
ÉÉ= >
$str
ÉÉ> j
)
ÉÉj k
;
ÉÉk l
(
ÑÑ 
new
ÑÑ 7
)CWE369_Divide_by_Zero__int_zero_divide_31
ÑÑ 1
(
ÑÑ1 2
)
ÑÑ2 3
)
ÑÑ3 4
.
ÑÑ4 5
RunTest
ÑÑ5 <
(
ÑÑ< =
$str
ÑÑ= h
)
ÑÑh i
;
ÑÑi j
(
ÖÖ 
new
ÖÖ 7
)CWE369_Divide_by_Zero__int_zero_divide_41
ÖÖ 1
(
ÖÖ1 2
)
ÖÖ2 3
)
ÖÖ3 4
.
ÖÖ4 5
RunTest
ÖÖ5 <
(
ÖÖ< =
$str
ÖÖ= h
)
ÖÖh i
;
ÖÖi j
(
ÜÜ 
new
ÜÜ 7
)CWE369_Divide_by_Zero__int_zero_divide_42
ÜÜ 1
(
ÜÜ1 2
)
ÜÜ2 3
)
ÜÜ3 4
.
ÜÜ4 5
RunTest
ÜÜ5 <
(
ÜÜ< =
$str
ÜÜ= h
)
ÜÜh i
;
ÜÜi j
(
áá 
new
áá 7
)CWE369_Divide_by_Zero__int_zero_divide_45
áá 1
(
áá1 2
)
áá2 3
)
áá3 4
.
áá4 5
RunTest
áá5 <
(
áá< =
$str
áá= h
)
ááh i
;
áái j
(
àà 
new
àà 8
*CWE369_Divide_by_Zero__int_zero_divide_51a
àà 2
(
àà2 3
)
àà3 4
)
àà4 5
.
àà5 6
RunTest
àà6 =
(
àà= >
$str
àà> j
)
ààj k
;
ààk l
(
ââ 
new
ââ 8
*CWE369_Divide_by_Zero__int_zero_divide_52a
ââ 2
(
ââ2 3
)
ââ3 4
)
ââ4 5
.
ââ5 6
RunTest
ââ6 =
(
ââ= >
$str
ââ> j
)
ââj k
;
ââk l
(
ää 
new
ää 8
*CWE369_Divide_by_Zero__int_zero_divide_53a
ää 2
(
ää2 3
)
ää3 4
)
ää4 5
.
ää5 6
RunTest
ää6 =
(
ää= >
$str
ää> j
)
ääj k
;
ääk l
(
ãã 
new
ãã 8
*CWE369_Divide_by_Zero__int_zero_divide_54a
ãã 2
(
ãã2 3
)
ãã3 4
)
ãã4 5
.
ãã5 6
RunTest
ãã6 =
(
ãã= >
$str
ãã> j
)
ããj k
;
ããk l
(
åå 
new
åå 8
*CWE369_Divide_by_Zero__int_zero_divide_61a
åå 2
(
åå2 3
)
åå3 4
)
åå4 5
.
åå5 6
RunTest
åå6 =
(
åå= >
$str
åå> j
)
ååj k
;
ååk l
(
çç 
new
çç 8
*CWE369_Divide_by_Zero__int_zero_divide_66a
çç 2
(
çç2 3
)
çç3 4
)
çç4 5
.
çç5 6
RunTest
çç6 =
(
çç= >
$str
çç> j
)
ççj k
;
ççk l
(
éé 
new
éé 8
*CWE369_Divide_by_Zero__int_zero_divide_67a
éé 2
(
éé2 3
)
éé3 4
)
éé4 5
.
éé5 6
RunTest
éé6 =
(
éé= >
$str
éé> j
)
ééj k
;
éék l
(
èè 
new
èè 8
*CWE369_Divide_by_Zero__int_zero_divide_68a
èè 2
(
èè2 3
)
èè3 4
)
èè4 5
.
èè5 6
RunTest
èè6 =
(
èè= >
$str
èè> j
)
èèj k
;
èèk l
(
êê 
new
êê 8
*CWE369_Divide_by_Zero__int_zero_divide_71a
êê 2
(
êê2 3
)
êê3 4
)
êê4 5
.
êê5 6
RunTest
êê6 =
(
êê= >
$str
êê> j
)
êêj k
;
êêk l
(
ëë 
new
ëë 8
*CWE369_Divide_by_Zero__int_zero_divide_72a
ëë 2
(
ëë2 3
)
ëë3 4
)
ëë4 5
.
ëë5 6
RunTest
ëë6 =
(
ëë= >
$str
ëë> j
)
ëëj k
;
ëëk l
(
íí 
new
íí 8
*CWE369_Divide_by_Zero__int_zero_divide_73a
íí 2
(
íí2 3
)
íí3 4
)
íí4 5
.
íí5 6
RunTest
íí6 =
(
íí= >
$str
íí> j
)
ííj k
;
íík l
(
ìì 
new
ìì 8
*CWE369_Divide_by_Zero__int_zero_divide_74a
ìì 2
(
ìì2 3
)
ìì3 4
)
ìì4 5
.
ìì5 6
RunTest
ìì6 =
(
ìì= >
$str
ìì> j
)
ììj k
;
ììk l
(
îî 
new
îî 8
*CWE369_Divide_by_Zero__int_zero_divide_75a
îî 2
(
îî2 3
)
îî3 4
)
îî4 5
.
îî5 6
RunTest
îî6 =
(
îî= >
$str
îî> j
)
îîj k
;
îîk l
(
ïï 
new
ïï 8
*CWE369_Divide_by_Zero__int_zero_divide_81a
ïï 2
(
ïï2 3
)
ïï3 4
)
ïï4 5
.
ïï5 6
RunTest
ïï6 =
(
ïï= >
$str
ïï> j
)
ïïj k
;
ïïk l
(
ññ 
new
ññ 7
)CWE369_Divide_by_Zero__int_zero_modulo_01
ññ 1
(
ññ1 2
)
ññ2 3
)
ññ3 4
.
ññ4 5
RunTest
ññ5 <
(
ññ< =
$str
ññ= h
)
ññh i
;
ññi j
(
óó 
new
óó 7
)CWE369_Divide_by_Zero__int_zero_modulo_02
óó 1
(
óó1 2
)
óó2 3
)
óó3 4
.
óó4 5
RunTest
óó5 <
(
óó< =
$str
óó= h
)
óóh i
;
óói j
(
òò 
new
òò 7
)CWE369_Divide_by_Zero__int_zero_modulo_03
òò 1
(
òò1 2
)
òò2 3
)
òò3 4
.
òò4 5
RunTest
òò5 <
(
òò< =
$str
òò= h
)
òòh i
;
òòi j
(
ôô 
new
ôô 7
)CWE369_Divide_by_Zero__int_zero_modulo_04
ôô 1
(
ôô1 2
)
ôô2 3
)
ôô3 4
.
ôô4 5
RunTest
ôô5 <
(
ôô< =
$str
ôô= h
)
ôôh i
;
ôôi j
(
öö 
new
öö 7
)CWE369_Divide_by_Zero__int_zero_modulo_05
öö 1
(
öö1 2
)
öö2 3
)
öö3 4
.
öö4 5
RunTest
öö5 <
(
öö< =
$str
öö= h
)
ööh i
;
ööi j
(
õõ 
new
õõ 7
)CWE369_Divide_by_Zero__int_zero_modulo_06
õõ 1
(
õõ1 2
)
õõ2 3
)
õõ3 4
.
õõ4 5
RunTest
õõ5 <
(
õõ< =
$str
õõ= h
)
õõh i
;
õõi j
(
úú 
new
úú 7
)CWE369_Divide_by_Zero__int_zero_modulo_07
úú 1
(
úú1 2
)
úú2 3
)
úú3 4
.
úú4 5
RunTest
úú5 <
(
úú< =
$str
úú= h
)
úúh i
;
úúi j
(
ùù 
new
ùù 7
)CWE369_Divide_by_Zero__int_zero_modulo_08
ùù 1
(
ùù1 2
)
ùù2 3
)
ùù3 4
.
ùù4 5
RunTest
ùù5 <
(
ùù< =
$str
ùù= h
)
ùùh i
;
ùùi j
(
ûû 
new
ûû 7
)CWE369_Divide_by_Zero__int_zero_modulo_09
ûû 1
(
ûû1 2
)
ûû2 3
)
ûû3 4
.
ûû4 5
RunTest
ûû5 <
(
ûû< =
$str
ûû= h
)
ûûh i
;
ûûi j
(
üü 
new
üü 7
)CWE369_Divide_by_Zero__int_zero_modulo_10
üü 1
(
üü1 2
)
üü2 3
)
üü3 4
.
üü4 5
RunTest
üü5 <
(
üü< =
$str
üü= h
)
üüh i
;
üüi j
(
†† 
new
†† 7
)CWE369_Divide_by_Zero__int_zero_modulo_11
†† 1
(
††1 2
)
††2 3
)
††3 4
.
††4 5
RunTest
††5 <
(
††< =
$str
††= h
)
††h i
;
††i j
(
°° 
new
°° 7
)CWE369_Divide_by_Zero__int_zero_modulo_12
°° 1
(
°°1 2
)
°°2 3
)
°°3 4
.
°°4 5
RunTest
°°5 <
(
°°< =
$str
°°= h
)
°°h i
;
°°i j
(
¢¢ 
new
¢¢ 7
)CWE369_Divide_by_Zero__int_zero_modulo_13
¢¢ 1
(
¢¢1 2
)
¢¢2 3
)
¢¢3 4
.
¢¢4 5
RunTest
¢¢5 <
(
¢¢< =
$str
¢¢= h
)
¢¢h i
;
¢¢i j
(
££ 
new
££ 7
)CWE369_Divide_by_Zero__int_zero_modulo_14
££ 1
(
££1 2
)
££2 3
)
££3 4
.
££4 5
RunTest
££5 <
(
££< =
$str
££= h
)
££h i
;
££i j
(
§§ 
new
§§ 7
)CWE369_Divide_by_Zero__int_zero_modulo_15
§§ 1
(
§§1 2
)
§§2 3
)
§§3 4
.
§§4 5
RunTest
§§5 <
(
§§< =
$str
§§= h
)
§§h i
;
§§i j
(
•• 
new
•• 7
)CWE369_Divide_by_Zero__int_zero_modulo_16
•• 1
(
••1 2
)
••2 3
)
••3 4
.
••4 5
RunTest
••5 <
(
••< =
$str
••= h
)
••h i
;
••i j
(
¶¶ 
new
¶¶ 7
)CWE369_Divide_by_Zero__int_zero_modulo_17
¶¶ 1
(
¶¶1 2
)
¶¶2 3
)
¶¶3 4
.
¶¶4 5
RunTest
¶¶5 <
(
¶¶< =
$str
¶¶= h
)
¶¶h i
;
¶¶i j
(
ßß 
new
ßß 7
)CWE369_Divide_by_Zero__int_zero_modulo_21
ßß 1
(
ßß1 2
)
ßß2 3
)
ßß3 4
.
ßß4 5
RunTest
ßß5 <
(
ßß< =
$str
ßß= h
)
ßßh i
;
ßßi j
(
®® 
new
®® 8
*CWE369_Divide_by_Zero__int_zero_modulo_22a
®® 2
(
®®2 3
)
®®3 4
)
®®4 5
.
®®5 6
RunTest
®®6 =
(
®®= >
$str
®®> j
)
®®j k
;
®®k l
(
©© 
new
©© 7
)CWE369_Divide_by_Zero__int_zero_modulo_31
©© 1
(
©©1 2
)
©©2 3
)
©©3 4
.
©©4 5
RunTest
©©5 <
(
©©< =
$str
©©= h
)
©©h i
;
©©i j
(
™™ 
new
™™ 7
)CWE369_Divide_by_Zero__int_zero_modulo_41
™™ 1
(
™™1 2
)
™™2 3
)
™™3 4
.
™™4 5
RunTest
™™5 <
(
™™< =
$str
™™= h
)
™™h i
;
™™i j
(
´´ 
new
´´ 7
)CWE369_Divide_by_Zero__int_zero_modulo_42
´´ 1
(
´´1 2
)
´´2 3
)
´´3 4
.
´´4 5
RunTest
´´5 <
(
´´< =
$str
´´= h
)
´´h i
;
´´i j
(
¨¨ 
new
¨¨ 7
)CWE369_Divide_by_Zero__int_zero_modulo_45
¨¨ 1
(
¨¨1 2
)
¨¨2 3
)
¨¨3 4
.
¨¨4 5
RunTest
¨¨5 <
(
¨¨< =
$str
¨¨= h
)
¨¨h i
;
¨¨i j
(
≠≠ 
new
≠≠ 8
*CWE369_Divide_by_Zero__int_zero_modulo_51a
≠≠ 2
(
≠≠2 3
)
≠≠3 4
)
≠≠4 5
.
≠≠5 6
RunTest
≠≠6 =
(
≠≠= >
$str
≠≠> j
)
≠≠j k
;
≠≠k l
(
ÆÆ 
new
ÆÆ 8
*CWE369_Divide_by_Zero__int_zero_modulo_52a
ÆÆ 2
(
ÆÆ2 3
)
ÆÆ3 4
)
ÆÆ4 5
.
ÆÆ5 6
RunTest
ÆÆ6 =
(
ÆÆ= >
$str
ÆÆ> j
)
ÆÆj k
;
ÆÆk l
(
ØØ 
new
ØØ 8
*CWE369_Divide_by_Zero__int_zero_modulo_53a
ØØ 2
(
ØØ2 3
)
ØØ3 4
)
ØØ4 5
.
ØØ5 6
RunTest
ØØ6 =
(
ØØ= >
$str
ØØ> j
)
ØØj k
;
ØØk l
(
∞∞ 
new
∞∞ 8
*CWE369_Divide_by_Zero__int_zero_modulo_54a
∞∞ 2
(
∞∞2 3
)
∞∞3 4
)
∞∞4 5
.
∞∞5 6
RunTest
∞∞6 =
(
∞∞= >
$str
∞∞> j
)
∞∞j k
;
∞∞k l
(
±± 
new
±± 8
*CWE369_Divide_by_Zero__int_zero_modulo_61a
±± 2
(
±±2 3
)
±±3 4
)
±±4 5
.
±±5 6
RunTest
±±6 =
(
±±= >
$str
±±> j
)
±±j k
;
±±k l
(
≤≤ 
new
≤≤ 8
*CWE369_Divide_by_Zero__int_zero_modulo_66a
≤≤ 2
(
≤≤2 3
)
≤≤3 4
)
≤≤4 5
.
≤≤5 6
RunTest
≤≤6 =
(
≤≤= >
$str
≤≤> j
)
≤≤j k
;
≤≤k l
(
≥≥ 
new
≥≥ 8
*CWE369_Divide_by_Zero__int_zero_modulo_67a
≥≥ 2
(
≥≥2 3
)
≥≥3 4
)
≥≥4 5
.
≥≥5 6
RunTest
≥≥6 =
(
≥≥= >
$str
≥≥> j
)
≥≥j k
;
≥≥k l
(
¥¥ 
new
¥¥ 8
*CWE369_Divide_by_Zero__int_zero_modulo_68a
¥¥ 2
(
¥¥2 3
)
¥¥3 4
)
¥¥4 5
.
¥¥5 6
RunTest
¥¥6 =
(
¥¥= >
$str
¥¥> j
)
¥¥j k
;
¥¥k l
(
µµ 
new
µµ 8
*CWE369_Divide_by_Zero__int_zero_modulo_71a
µµ 2
(
µµ2 3
)
µµ3 4
)
µµ4 5
.
µµ5 6
RunTest
µµ6 =
(
µµ= >
$str
µµ> j
)
µµj k
;
µµk l
(
∂∂ 
new
∂∂ 8
*CWE369_Divide_by_Zero__int_zero_modulo_72a
∂∂ 2
(
∂∂2 3
)
∂∂3 4
)
∂∂4 5
.
∂∂5 6
RunTest
∂∂6 =
(
∂∂= >
$str
∂∂> j
)
∂∂j k
;
∂∂k l
(
∑∑ 
new
∑∑ 8
*CWE369_Divide_by_Zero__int_zero_modulo_73a
∑∑ 2
(
∑∑2 3
)
∑∑3 4
)
∑∑4 5
.
∑∑5 6
RunTest
∑∑6 =
(
∑∑= >
$str
∑∑> j
)
∑∑j k
;
∑∑k l
(
∏∏ 
new
∏∏ 8
*CWE369_Divide_by_Zero__int_zero_modulo_74a
∏∏ 2
(
∏∏2 3
)
∏∏3 4
)
∏∏4 5
.
∏∏5 6
RunTest
∏∏6 =
(
∏∏= >
$str
∏∏> j
)
∏∏j k
;
∏∏k l
(
ππ 
new
ππ 8
*CWE369_Divide_by_Zero__int_zero_modulo_75a
ππ 2
(
ππ2 3
)
ππ3 4
)
ππ4 5
.
ππ5 6
RunTest
ππ6 =
(
ππ= >
$str
ππ> j
)
ππj k
;
ππk l
(
∫∫ 
new
∫∫ 8
*CWE369_Divide_by_Zero__int_zero_modulo_81a
∫∫ 2
(
∫∫2 3
)
∫∫3 4
)
∫∫4 5
.
∫∫5 6
RunTest
∫∫6 =
(
∫∫= >
$str
∫∫> j
)
∫∫j k
;
∫∫k l
}
ºº 
private
ææ 
static
ææ	 
void
ææ 
RunTestCWE4
ææ  
(
ææ  !
)
ææ! "
{
ææ# $
}
¬¬ 
private
ƒƒ 
static
ƒƒ	 
void
ƒƒ 
RunTestCWE5
ƒƒ  
(
ƒƒ  !
)
ƒƒ! "
{
ƒƒ# $
}
»» 
private
   
static
  	 
void
   
RunTestCWE6
    
(
    !
)
  ! "
{
  # $
}
ŒŒ 
private
–– 
static
––	 
void
–– 
RunTestCWE7
––  
(
––  !
)
––! "
{
––# $
}
‘‘ 
private
÷÷ 
static
÷÷	 
void
÷÷ 
RunTestCWE8
÷÷  
(
÷÷  !
)
÷÷! "
{
÷÷# $
}
⁄⁄ 
private
‹‹ 
static
‹‹	 
void
‹‹ 
RunTestCWE9
‹‹  
(
‹‹  !
)
‹‹! "
{
‹‹# $
}
‡‡ 
}·· 
}‚‚ º
êC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE369_Divide_by_Zero\s03\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str 4
)4 5
]5 6
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str 6
)6 7
]7 8
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *