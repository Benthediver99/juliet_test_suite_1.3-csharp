ª.
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_01.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_01 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
	TcpClient((  
tcpConn((! (
=(() *
new((+ .
	TcpClient((/ 8
(((8 9
$str((9 K
,((K L
$num((M R
)((R S
)((S T
{)) 
using++ 
(++ 
StreamReader++ '
sr++( *
=+++ ,
new++- 0
StreamReader++1 =
(++= >
tcpConn++> E
.++E F
	GetStream++F O
(++O P
)++P Q
)++Q R
)++R S
{,, 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	
try77 
{88 	
int99 
value99 
=99 
int99 
.99 
Parse99 !
(99! "
data99" &
)99& '
;99' (
}:: 	
catch;; 
(;; 
FormatException;; 
exceptNumberFormat;; 1
);;1 2
{<< 	
IO>> 
.>> 
Logger>> 
.>> 
Log>> 
(>> 
NLog>> 
.>> 
LogLevel>> '
.>>' (
Warn>>( ,
,>>, -
exceptNumberFormat>>. @
,>>@ A
$str>>B \
+>>] ^
data>>_ c
)>>c d
;>>d e
}?? 	
}@@ 
publicCC 

overrideCC 
voidCC 
GoodCC 
(CC 
)CC 
{DD 
GoodG2BEE 
(EE 
)EE 
;EE 
GoodB2GFF 
(FF 
)FF 
;FF 
}GG 
privateJJ 
voidJJ 
GoodG2BJJ 
(JJ 
)JJ 
{KK 
stringLL 
dataLL 
;LL 
dataNN 
=NN 
$strNN 
;NN 
tryOO 
{PP 	
intQQ 
valueQQ 
=QQ 
intQQ 
.QQ 
ParseQQ !
(QQ! "
dataQQ" &
)QQ& '
;QQ' (
}RR 	
catchSS 
(SS 
FormatExceptionSS 
exceptNumberFormatSS 1
)SS1 2
{TT 	
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV 
.VV 
LogLevelVV '
.VV' (
WarnVV( ,
,VV, -
exceptNumberFormatVV. @
,VV@ A
$strVVB \
+VV] ^
dataVV_ c
)VVc d
;VVd e
}WW 	
}XX 
private[[ 
void[[ 
GoodB2G[[ 
([[ 
)[[ 
{\\ 
string]] 
data]] 
;]] 
data^^ 
=^^ 
$str^^ 
;^^ 
{`` 	
tryaa 
{bb 
usingdd 
(dd 
	TcpClientdd  
tcpConndd! (
=dd) *
newdd+ .
	TcpClientdd/ 8
(dd8 9
$strdd9 K
,ddK L
$numddM R
)ddR S
)ddS T
{ee 
usinggg 
(gg 
StreamReadergg '
srgg( *
=gg+ ,
newgg- 0
StreamReadergg1 =
(gg= >
tcpConngg> E
.ggE F
	GetStreamggF O
(ggO P
)ggP Q
)ggQ R
)ggR S
{hh 
datajj 
=jj 
srjj !
.jj! "
ReadLinejj" *
(jj* +
)jj+ ,
;jj, -
}kk 
}ll 
}mm 
catchnn 
(nn 
IOExceptionnn 
exceptIOnn '
)nn' (
{oo 
IOpp 
.pp 
Loggerpp 
.pp 
Logpp 
(pp 
NLogpp "
.pp" #
LogLevelpp# +
.pp+ ,
Warnpp, 0
,pp0 1
exceptIOpp2 :
,pp: ;
$strpp< W
)ppW X
;ppX Y
}qq 
}rr 	
tryss 
{tt 	
intuu 
valueuu 
=uu 
intuu 
.uu 
Parseuu !
(uu! "
datauu" &
)uu& '
;uu' (
}vv 	
catchww 
(ww 
FormatExceptionww 
exceptNumberFormatww 1
)ww1 2
{xx 	
IOzz 
.zz 
Loggerzz 
.zz 
Logzz 
(zz 
NLogzz 
.zz 
LogLevelzz '
.zz' (
Warnzz( ,
,zz, -
exceptNumberFormatzz. @
,zz@ A
$strzzB f
+zzg h
exceptNumberFormatzzi {
)zz{ |
;zz| }
}{{ 	
}|| 
}~~ 
} ÖY
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_02.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_02 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
true"" 
)"" 
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using** 
(** 
	TcpClient** $
tcpConn**% ,
=**- .
new**/ 2
	TcpClient**3 <
(**< =
$str**= O
,**O P
$num**Q V
)**V W
)**W X
{++ 
using-- 
(-- 
StreamReader-- +
sr--, .
=--/ 0
new--1 4
StreamReader--5 A
(--A B
tcpConn--B I
.--I J
	GetStream--J S
(--S T
)--T U
)--U V
)--V W
{.. 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@ 
true@@ 
)@@ 
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
falseSS 
)SS 
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
true^^ 
)^^ 
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
truepp 
)pp 
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
true{{ 
){{ 
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
true
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
new
/ 2
	TcpClient
3 <
(
< =
$str
= O
,
O P
$num
Q V
)
V W
)
W X
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
false
«« 
)
«« 
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
true
ÂÂ 
)
ÂÂ 
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÊÊ 
(
ÊÊ 
	TcpClient
ÊÊ $
tcpConn
ÊÊ% ,
=
ÊÊ- .
new
ÊÊ/ 2
	TcpClient
ÊÊ3 <
(
ÊÊ< =
$str
ÊÊ= O
,
ÊÊO P
$num
ÊÊQ V
)
ÊÊV W
)
ÊÊW X
{
ËË 
using
ÍÍ 
(
ÍÍ 
StreamReader
ÍÍ +
sr
ÍÍ, .
=
ÍÍ/ 0
new
ÍÍ1 4
StreamReader
ÍÍ5 A
(
ÍÍA B
tcpConn
ÍÍB I
.
ÍÍI J
	GetStream
ÍÍJ S
(
ÍÍS T
)
ÍÍT U
)
ÍÍU V
)
ÍÍV W
{
ÎÎ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
true
àà 
)
àà 
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ ¸\
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_03.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_03 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
$num"" 
=="" 
$num"" 
)"" 
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using** 
(** 
	TcpClient** $
tcpConn**% ,
=**- .
new**/ 2
	TcpClient**3 <
(**< =
$str**= O
,**O P
$num**Q V
)**V W
)**W X
{++ 
using-- 
(-- 
StreamReader-- +
sr--, .
=--/ 0
new--1 4
StreamReader--5 A
(--A B
tcpConn--B I
.--I J
	GetStream--J S
(--S T
)--T U
)--U V
)--V W
{.. 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@ 
$num@@ 
==@@ 
$num@@ 
)@@ 
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
$numSS 
!=SS 
$numSS 
)SS 
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
$num^^ 
==^^ 
$num^^ 
)^^ 
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
$numpp 
==pp 
$numpp 
)pp 
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
$num{{ 
=={{ 
$num{{ 
){{ 
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
new
/ 2
	TcpClient
3 <
(
< =
$str
= O
,
O P
$num
Q V
)
V W
)
W X
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
$num
«« 
!=
«« 
$num
«« 
)
«« 
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
$num
ÂÂ 
==
ÂÂ 
$num
ÂÂ 
)
ÂÂ 
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÊÊ 
(
ÊÊ 
	TcpClient
ÊÊ $
tcpConn
ÊÊ% ,
=
ÊÊ- .
new
ÊÊ/ 2
	TcpClient
ÊÊ3 <
(
ÊÊ< =
$str
ÊÊ= O
,
ÊÊO P
$num
ÊÊQ V
)
ÊÊV W
)
ÊÊW X
{
ËË 
using
ÍÍ 
(
ÍÍ 
StreamReader
ÍÍ +
sr
ÍÍ, .
=
ÍÍ/ 0
new
ÍÍ1 4
StreamReader
ÍÍ5 A
(
ÍÍA B
tcpConn
ÍÍB I
.
ÍÍI J
	GetStream
ÍÍJ S
(
ÍÍS T
)
ÍÍT U
)
ÍÍU V
)
ÍÍV W
{
ÎÎ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
$num
àà 
==
àà 
$num
àà 
)
àà 
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ ¤]
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_04.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_04 D
:E F
AbstractTestCaseG W
{ 
private## 
const## 
bool## 
PRIVATE_CONST_TRUE## )
=##* +
true##, 0
;##0 1
private$$ 
const$$ 
bool$$ 
PRIVATE_CONST_FALSE$$ *
=$$+ ,
false$$- 2
;$$2 3
public&& 

override&& 
void&& 
Bad&& 
(&& 
)&& 
{'' 
string(( 
data(( 
;(( 
if)) 

()) 
PRIVATE_CONST_TRUE)) 
))) 
{** 	
data++ 
=++ 
$str++ 
;++ 
{-- 
try.. 
{// 
using11 
(11 
	TcpClient11 $
tcpConn11% ,
=11- .
new11/ 2
	TcpClient113 <
(11< =
$str11= O
,11O P
$num11Q V
)11V W
)11W X
{22 
using44 
(44 
StreamReader44 +
sr44, .
=44/ 0
new441 4
StreamReader445 A
(44A B
tcpConn44B I
.44I J
	GetStream44J S
(44S T
)44T U
)44U V
)44V W
{55 
data77  
=77! "
sr77# %
.77% &
ReadLine77& .
(77. /
)77/ 0
;770 1
}88 
}99 
}:: 
catch;; 
(;; 
IOException;; "
exceptIO;;# +
);;+ ,
{<< 
IO== 
.== 
Logger== 
.== 
Log== !
(==! "
NLog==" &
.==& '
LogLevel==' /
.==/ 0
Warn==0 4
,==4 5
exceptIO==6 >
,==> ?
$str==@ [
)==[ \
;==\ ]
}>> 
}?? 
}@@ 	
elseAA 
{BB 	
dataEE 
=EE 
nullEE 
;EE 
}FF 	
ifGG 

(GG 
PRIVATE_CONST_TRUEGG 
)GG 
{HH 	
tryII 
{JJ 
intKK 
valueKK 
=KK 
intKK 
.KK  
ParseKK  %
(KK% &
dataKK& *
)KK* +
;KK+ ,
}LL 
catchMM 
(MM 
FormatExceptionMM "
exceptNumberFormatMM# 5
)MM5 6
{NN 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP 
(PP 
NLogPP "
.PP" #
LogLevelPP# +
.PP+ ,
WarnPP, 0
,PP0 1
exceptNumberFormatPP2 D
,PPD E
$strPPF `
+PPa b
dataPPc g
)PPg h
;PPh i
}QQ 
}RR 	
}SS 
privateWW 
voidWW 
GoodG2B1WW 
(WW 
)WW 
{XX 
stringYY 
dataYY 
;YY 
ifZZ 

(ZZ 
PRIVATE_CONST_FALSEZZ 
)ZZ  
{[[ 	
data^^ 
=^^ 
null^^ 
;^^ 
}__ 	
else`` 
{aa 	
datacc 
=cc 
$strcc 
;cc 
}dd 	
ifee 

(ee 
PRIVATE_CONST_TRUEee 
)ee 
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF `
+nna b
datannc g
)nng h
;nnh i
}oo 
}pp 	
}qq 
privatett 
voidtt 
GoodG2B2tt 
(tt 
)tt 
{uu 
stringvv 
datavv 
;vv 
ifww 

(ww 
PRIVATE_CONST_TRUEww 
)ww 
{xx 	
datazz 
=zz 
$strzz 
;zz 
}{{ 	
else|| 
{}} 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
new
/ 2
	TcpClient
3 <
(
< =
$str
= O
,
O P
$num
Q V
)
V W
)
W X
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
   
data
¢¢  
=
¢¢! "
sr
¢¢# %
.
¢¢% &
ReadLine
¢¢& .
(
¢¢. /
)
¢¢/ 0
;
¢¢0 1
}
££ 
}
¤¤ 
}
¥¥ 
catch
¦¦ 
(
¦¦ 
IOException
¦¦ "
exceptIO
¦¦# +
)
¦¦+ ,
{
§§ 
IO
¨¨ 
.
¨¨ 
Logger
¨¨ 
.
¨¨ 
Log
¨¨ !
(
¨¨! "
NLog
¨¨" &
.
¨¨& '
LogLevel
¨¨' /
.
¨¨/ 0
Warn
¨¨0 4
,
¨¨4 5
exceptIO
¨¨6 >
,
¨¨> ?
$str
¨¨@ [
)
¨¨[ \
;
¨¨\ ]
}
©© 
}
ªª 
}
«« 	
else
¬¬ 
{
­­ 	
data
°° 
=
°° 
null
°° 
;
°° 
}
±± 	
if
²² 

(
²² !
PRIVATE_CONST_FALSE
²² 
)
²²  
{
³³ 	
IO
µµ 
.
µµ 
	WriteLine
µµ 
(
µµ 
$str
µµ /
)
µµ/ 0
;
µµ0 1
}
¶¶ 	
else
·· 
{
¸¸ 	
try
¹¹ 
{
ºº 
int
»» 
value
»» 
=
»» 
int
»» 
.
»»  
Parse
»»  %
(
»»% &
data
»»& *
)
»»* +
;
»»+ ,
}
¼¼ 
catch
½½ 
(
½½ 
FormatException
½½ " 
exceptNumberFormat
½½# 5
)
½½5 6
{
¾¾ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ 
.
ÀÀ 
Log
ÀÀ 
(
ÀÀ 
NLog
ÀÀ "
.
ÀÀ" #
LogLevel
ÀÀ# +
.
ÀÀ+ ,
Warn
ÀÀ, 0
,
ÀÀ0 1 
exceptNumberFormat
ÀÀ2 D
,
ÀÀD E
$str
ÀÀF j
+
ÀÀk l 
exceptNumberFormat
ÀÀm 
)ÀÀ 
;ÀÀ 
}
ÁÁ 
}
ÂÂ 	
}
ÃÃ 
private
ÆÆ 
void
ÆÆ 
GoodB2G2
ÆÆ 
(
ÆÆ 
)
ÆÆ 
{
ÇÇ 
string
ÈÈ 
data
ÈÈ 
;
ÈÈ 
if
ÉÉ 

(
ÉÉ  
PRIVATE_CONST_TRUE
ÉÉ 
)
ÉÉ 
{
ÊÊ 	
data
ËË 
=
ËË 
$str
ËË 
;
ËË 
{
ÍÍ 
try
ÎÎ 
{
ÏÏ 
using
ÑÑ 
(
ÑÑ 
	TcpClient
ÑÑ $
tcpConn
ÑÑ% ,
=
ÑÑ- .
new
ÑÑ/ 2
	TcpClient
ÑÑ3 <
(
ÑÑ< =
$str
ÑÑ= O
,
ÑÑO P
$num
ÑÑQ V
)
ÑÑV W
)
ÑÑW X
{
ÒÒ 
using
ÔÔ 
(
ÔÔ 
StreamReader
ÔÔ +
sr
ÔÔ, .
=
ÔÔ/ 0
new
ÔÔ1 4
StreamReader
ÔÔ5 A
(
ÔÔA B
tcpConn
ÔÔB I
.
ÔÔI J
	GetStream
ÔÔJ S
(
ÔÔS T
)
ÔÔT U
)
ÔÔU V
)
ÔÔV W
{
ÕÕ 
data
××  
=
××! "
sr
××# %
.
××% &
ReadLine
××& .
(
××. /
)
××/ 0
;
××0 1
}
ØØ 
}
ÙÙ 
}
ÚÚ 
catch
ÛÛ 
(
ÛÛ 
IOException
ÛÛ "
exceptIO
ÛÛ# +
)
ÛÛ+ ,
{
ÜÜ 
IO
ÝÝ 
.
ÝÝ 
Logger
ÝÝ 
.
ÝÝ 
Log
ÝÝ !
(
ÝÝ! "
NLog
ÝÝ" &
.
ÝÝ& '
LogLevel
ÝÝ' /
.
ÝÝ/ 0
Warn
ÝÝ0 4
,
ÝÝ4 5
exceptIO
ÝÝ6 >
,
ÝÝ> ?
$str
ÝÝ@ [
)
ÝÝ[ \
;
ÝÝ\ ]
}
ÞÞ 
}
ßß 
}
àà 	
else
áá 
{
ââ 	
data
åå 
=
åå 
null
åå 
;
åå 
}
ææ 	
if
çç 

(
çç  
PRIVATE_CONST_TRUE
çç 
)
çç 
{
èè 	
try
éé 
{
êê 
int
ëë 
value
ëë 
=
ëë 
int
ëë 
.
ëë  
Parse
ëë  %
(
ëë% &
data
ëë& *
)
ëë* +
;
ëë+ ,
}
ìì 
catch
íí 
(
íí 
FormatException
íí " 
exceptNumberFormat
íí# 5
)
íí5 6
{
îî 
IO
ðð 
.
ðð 
Logger
ðð 
.
ðð 
Log
ðð 
(
ðð 
NLog
ðð "
.
ðð" #
LogLevel
ðð# +
.
ðð+ ,
Warn
ðð, 0
,
ðð0 1 
exceptNumberFormat
ðð2 D
,
ððD E
$str
ððF j
+
ððk l 
exceptNumberFormat
ððm 
)ðð 
;ðð 
}
ññ 
}
òò 	
}
óó 
public
õõ 

override
õõ 
void
õõ 
Good
õõ 
(
õõ 
)
õõ 
{
öö 
GoodG2B1
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷ 
GoodG2B2
øø 
(
øø 
)
øø 
;
øø 
GoodB2G1
ùù 
(
ùù 
)
ùù 
;
ùù 
GoodB2G2
úú 
(
úú 
)
úú 
;
úú 
}
ûû 
}ýý 
}þþ ¢\
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_05.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_05 D
:E F
AbstractTestCaseG W
{ 
private"" 
bool"" 
privateTrue"" 
="" 
true"" #
;""# $
private## 
bool## 
privateFalse## 
=## 
false##  %
;##% &
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
string'' 
data'' 
;'' 
if(( 

((( 
privateTrue(( 
)(( 
{)) 	
data** 
=** 
$str** 
;** 
{,, 
try-- 
{.. 
using00 
(00 
	TcpClient00 $
tcpConn00% ,
=00- .
new00/ 2
	TcpClient003 <
(00< =
$str00= O
,00O P
$num00Q V
)00V W
)00W X
{11 
using33 
(33 
StreamReader33 +
sr33, .
=33/ 0
new331 4
StreamReader335 A
(33A B
tcpConn33B I
.33I J
	GetStream33J S
(33S T
)33T U
)33U V
)33V W
{44 
data66  
=66! "
sr66# %
.66% &
ReadLine66& .
(66. /
)66/ 0
;660 1
}77 
}88 
}99 
catch:: 
(:: 
IOException:: "
exceptIO::# +
)::+ ,
{;; 
IO<< 
.<< 
Logger<< 
.<< 
Log<< !
(<<! "
NLog<<" &
.<<& '
LogLevel<<' /
.<</ 0
Warn<<0 4
,<<4 5
exceptIO<<6 >
,<<> ?
$str<<@ [
)<<[ \
;<<\ ]
}== 
}>> 
}?? 	
else@@ 
{AA 	
dataDD 
=DD 
nullDD 
;DD 
}EE 	
ifFF 

(FF 
privateTrueFF 
)FF 
{GG 	
tryHH 
{II 
intJJ 
valueJJ 
=JJ 
intJJ 
.JJ  
ParseJJ  %
(JJ% &
dataJJ& *
)JJ* +
;JJ+ ,
}KK 
catchLL 
(LL 
FormatExceptionLL "
exceptNumberFormatLL# 5
)LL5 6
{MM 
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO "
.OO" #
LogLevelOO# +
.OO+ ,
WarnOO, 0
,OO0 1
exceptNumberFormatOO2 D
,OOD E
$strOOF `
+OOa b
dataOOc g
)OOg h
;OOh i
}PP 
}QQ 	
}RR 
privateVV 
voidVV 
GoodG2B1VV 
(VV 
)VV 
{WW 
stringXX 
dataXX 
;XX 
ifYY 

(YY 
privateFalseYY 
)YY 
{ZZ 	
data]] 
=]] 
null]] 
;]] 
}^^ 	
else__ 
{`` 	
databb 
=bb 
$strbb 
;bb 
}cc 	
ifdd 

(dd 
privateTruedd 
)dd 
{ee 	
tryff 
{gg 
inthh 
valuehh 
=hh 
inthh 
.hh  
Parsehh  %
(hh% &
datahh& *
)hh* +
;hh+ ,
}ii 
catchjj 
(jj 
FormatExceptionjj "
exceptNumberFormatjj# 5
)jj5 6
{kk 
IOmm 
.mm 
Loggermm 
.mm 
Logmm 
(mm 
NLogmm "
.mm" #
LogLevelmm# +
.mm+ ,
Warnmm, 0
,mm0 1
exceptNumberFormatmm2 D
,mmD E
$strmmF `
+mma b
datammc g
)mmg h
;mmh i
}nn 
}oo 	
}pp 
privatess 
voidss 
GoodG2B2ss 
(ss 
)ss 
{tt 
stringuu 
datauu 
;uu 
ifvv 

(vv 
privateTruevv 
)vv 
{ww 	
datayy 
=yy 
$stryy 
;yy 
}zz 	
else{{ 
{|| 	
data 
= 
null 
; 
}
 	
if
 

(
 
privateTrue
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
new
/ 2
	TcpClient
3 <
(
< =
$str
= O
,
O P
$num
Q V
)
V W
)
W X
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
¡¡  
=
¡¡! "
sr
¡¡# %
.
¡¡% &
ReadLine
¡¡& .
(
¡¡. /
)
¡¡/ 0
;
¡¡0 1
}
¢¢ 
}
££ 
}
¤¤ 
catch
¥¥ 
(
¥¥ 
IOException
¥¥ "
exceptIO
¥¥# +
)
¥¥+ ,
{
¦¦ 
IO
§§ 
.
§§ 
Logger
§§ 
.
§§ 
Log
§§ !
(
§§! "
NLog
§§" &
.
§§& '
LogLevel
§§' /
.
§§/ 0
Warn
§§0 4
,
§§4 5
exceptIO
§§6 >
,
§§> ?
$str
§§@ [
)
§§[ \
;
§§\ ]
}
¨¨ 
}
©© 
}
ªª 	
else
«« 
{
¬¬ 	
data
¯¯ 
=
¯¯ 
null
¯¯ 
;
¯¯ 
}
°° 	
if
±± 

(
±± 
privateFalse
±± 
)
±± 
{
²² 	
IO
´´ 
.
´´ 
	WriteLine
´´ 
(
´´ 
$str
´´ /
)
´´/ 0
;
´´0 1
}
µµ 	
else
¶¶ 
{
·· 	
try
¸¸ 
{
¹¹ 
int
ºº 
value
ºº 
=
ºº 
int
ºº 
.
ºº  
Parse
ºº  %
(
ºº% &
data
ºº& *
)
ºº* +
;
ºº+ ,
}
»» 
catch
¼¼ 
(
¼¼ 
FormatException
¼¼ " 
exceptNumberFormat
¼¼# 5
)
¼¼5 6
{
½½ 
IO
¿¿ 
.
¿¿ 
Logger
¿¿ 
.
¿¿ 
Log
¿¿ 
(
¿¿ 
NLog
¿¿ "
.
¿¿" #
LogLevel
¿¿# +
.
¿¿+ ,
Warn
¿¿, 0
,
¿¿0 1 
exceptNumberFormat
¿¿2 D
,
¿¿D E
$str
¿¿F j
+
¿¿k l 
exceptNumberFormat
¿¿m 
)¿¿ 
;¿¿ 
}
ÀÀ 
}
ÁÁ 	
}
ÂÂ 
private
ÅÅ 
void
ÅÅ 
GoodB2G2
ÅÅ 
(
ÅÅ 
)
ÅÅ 
{
ÆÆ 
string
ÇÇ 
data
ÇÇ 
;
ÇÇ 
if
ÈÈ 

(
ÈÈ 
privateTrue
ÈÈ 
)
ÈÈ 
{
ÉÉ 	
data
ÊÊ 
=
ÊÊ 
$str
ÊÊ 
;
ÊÊ 
{
ÌÌ 
try
ÍÍ 
{
ÎÎ 
using
ÐÐ 
(
ÐÐ 
	TcpClient
ÐÐ $
tcpConn
ÐÐ% ,
=
ÐÐ- .
new
ÐÐ/ 2
	TcpClient
ÐÐ3 <
(
ÐÐ< =
$str
ÐÐ= O
,
ÐÐO P
$num
ÐÐQ V
)
ÐÐV W
)
ÐÐW X
{
ÑÑ 
using
ÓÓ 
(
ÓÓ 
StreamReader
ÓÓ +
sr
ÓÓ, .
=
ÓÓ/ 0
new
ÓÓ1 4
StreamReader
ÓÓ5 A
(
ÓÓA B
tcpConn
ÓÓB I
.
ÓÓI J
	GetStream
ÓÓJ S
(
ÓÓS T
)
ÓÓT U
)
ÓÓU V
)
ÓÓV W
{
ÔÔ 
data
ÖÖ  
=
ÖÖ! "
sr
ÖÖ# %
.
ÖÖ% &
ReadLine
ÖÖ& .
(
ÖÖ. /
)
ÖÖ/ 0
;
ÖÖ0 1
}
×× 
}
ØØ 
}
ÙÙ 
catch
ÚÚ 
(
ÚÚ 
IOException
ÚÚ "
exceptIO
ÚÚ# +
)
ÚÚ+ ,
{
ÛÛ 
IO
ÜÜ 
.
ÜÜ 
Logger
ÜÜ 
.
ÜÜ 
Log
ÜÜ !
(
ÜÜ! "
NLog
ÜÜ" &
.
ÜÜ& '
LogLevel
ÜÜ' /
.
ÜÜ/ 0
Warn
ÜÜ0 4
,
ÜÜ4 5
exceptIO
ÜÜ6 >
,
ÜÜ> ?
$str
ÜÜ@ [
)
ÜÜ[ \
;
ÜÜ\ ]
}
ÝÝ 
}
ÞÞ 
}
ßß 	
else
àà 
{
áá 	
data
ää 
=
ää 
null
ää 
;
ää 
}
åå 	
if
ææ 

(
ææ 
privateTrue
ææ 
)
ææ 
{
çç 	
try
èè 
{
éé 
int
êê 
value
êê 
=
êê 
int
êê 
.
êê  
Parse
êê  %
(
êê% &
data
êê& *
)
êê* +
;
êê+ ,
}
ëë 
catch
ìì 
(
ìì 
FormatException
ìì " 
exceptNumberFormat
ìì# 5
)
ìì5 6
{
íí 
IO
ïï 
.
ïï 
Logger
ïï 
.
ïï 
Log
ïï 
(
ïï 
NLog
ïï "
.
ïï" #
LogLevel
ïï# +
.
ïï+ ,
Warn
ïï, 0
,
ïï0 1 
exceptNumberFormat
ïï2 D
,
ïïD E
$str
ïïF j
+
ïïk l 
exceptNumberFormat
ïïm 
)ïï 
;ïï 
}
ðð 
}
ññ 	
}
òò 
public
ôô 

override
ôô 
void
ôô 
Good
ôô 
(
ôô 
)
ôô 
{
õõ 
GoodG2B1
öö 
(
öö 
)
öö 
;
öö 
GoodG2B2
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷ 
GoodB2G1
øø 
(
øø 
)
øø 
;
øø 
GoodB2G2
ùù 
(
ùù 
)
ùù 
;
ùù 
}
úú 
}üü 
}ýý ó^
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_06.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_06 D
:E F
AbstractTestCaseG W
{ 
private"" 
const"" 
int"" 
PRIVATE_CONST_FIVE"" (
="") *
$num""+ ,
;"", -
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
string&& 
data&& 
;&& 
if'' 

('' 
PRIVATE_CONST_FIVE'' 
==''  
$num''  !
)''! "
{(( 	
data)) 
=)) 
$str)) 
;)) 
{++ 
try,, 
{-- 
using// 
(// 
	TcpClient// $
tcpConn//% ,
=//- .
new/// 2
	TcpClient//3 <
(//< =
$str//= O
,//O P
$num//Q V
)//V W
)//W X
{00 
using22 
(22 
StreamReader22 +
sr22, .
=22/ 0
new221 4
StreamReader225 A
(22A B
tcpConn22B I
.22I J
	GetStream22J S
(22S T
)22T U
)22U V
)22V W
{33 
data55  
=55! "
sr55# %
.55% &
ReadLine55& .
(55. /
)55/ 0
;550 1
}66 
}77 
}88 
catch99 
(99 
IOException99 "
exceptIO99# +
)99+ ,
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
exceptIO;;6 >
,;;> ?
$str;;@ [
);;[ \
;;;\ ]
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataCC 
=CC 
nullCC 
;CC 
}DD 	
ifEE 

(EE 
PRIVATE_CONST_FIVEEE 
==EE  
$numEE  !
)EE! "
{FF 	
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateUU 
voidUU 
GoodG2B1UU 
(UU 
)UU 
{VV 
stringWW 
dataWW 
;WW 
ifXX 

(XX 
PRIVATE_CONST_FIVEXX 
!=XX  
$numXX  !
)XX! "
{YY 	
data\\ 
=\\ 
null\\ 
;\\ 
}]] 	
else^^ 
{__ 	
dataaa 
=aa 
$straa 
;aa 
}bb 	
ifcc 

(cc 
PRIVATE_CONST_FIVEcc 
==cc  
$numcc  !
)cc! "
{dd 	
tryee 
{ff 
intgg 
valuegg 
=gg 
intgg 
.gg  
Parsegg  %
(gg% &
datagg& *
)gg* +
;gg+ ,
}hh 
catchii 
(ii 
FormatExceptionii "
exceptNumberFormatii# 5
)ii5 6
{jj 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptNumberFormatll2 D
,llD E
$strllF `
+lla b
datallc g
)llg h
;llh i
}mm 
}nn 	
}oo 
privaterr 
voidrr 
GoodG2B2rr 
(rr 
)rr 
{ss 
stringtt 
datatt 
;tt 
ifuu 

(uu 
PRIVATE_CONST_FIVEuu 
==uu  
$numuu  !
)uu! "
{vv 	
dataxx 
=xx 
$strxx 
;xx 
}yy 	
elsezz 
{{{ 	
data~~ 
=~~ 
null~~ 
;~~ 
} 	
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
new
/ 2
	TcpClient
3 <
(
< =
$str
= O
,
O P
$num
Q V
)
V W
)
W X
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
    
=
  ! "
sr
  # %
.
  % &
ReadLine
  & .
(
  . /
)
  / 0
;
  0 1
}
¡¡ 
}
¢¢ 
}
££ 
catch
¤¤ 
(
¤¤ 
IOException
¤¤ "
exceptIO
¤¤# +
)
¤¤+ ,
{
¥¥ 
IO
¦¦ 
.
¦¦ 
Logger
¦¦ 
.
¦¦ 
Log
¦¦ !
(
¦¦! "
NLog
¦¦" &
.
¦¦& '
LogLevel
¦¦' /
.
¦¦/ 0
Warn
¦¦0 4
,
¦¦4 5
exceptIO
¦¦6 >
,
¦¦> ?
$str
¦¦@ [
)
¦¦[ \
;
¦¦\ ]
}
§§ 
}
¨¨ 
}
©© 	
else
ªª 
{
«« 	
data
®® 
=
®® 
null
®® 
;
®® 
}
¯¯ 	
if
°° 

(
°°  
PRIVATE_CONST_FIVE
°° 
!=
°°  
$num
°°  !
)
°°! "
{
±± 	
IO
³³ 
.
³³ 
	WriteLine
³³ 
(
³³ 
$str
³³ /
)
³³/ 0
;
³³0 1
}
´´ 	
else
µµ 
{
¶¶ 	
try
·· 
{
¸¸ 
int
¹¹ 
value
¹¹ 
=
¹¹ 
int
¹¹ 
.
¹¹  
Parse
¹¹  %
(
¹¹% &
data
¹¹& *
)
¹¹* +
;
¹¹+ ,
}
ºº 
catch
»» 
(
»» 
FormatException
»» " 
exceptNumberFormat
»»# 5
)
»»5 6
{
¼¼ 
IO
¾¾ 
.
¾¾ 
Logger
¾¾ 
.
¾¾ 
Log
¾¾ 
(
¾¾ 
NLog
¾¾ "
.
¾¾" #
LogLevel
¾¾# +
.
¾¾+ ,
Warn
¾¾, 0
,
¾¾0 1 
exceptNumberFormat
¾¾2 D
,
¾¾D E
$str
¾¾F j
+
¾¾k l 
exceptNumberFormat
¾¾m 
)¾¾ 
;¾¾ 
}
¿¿ 
}
ÀÀ 	
}
ÁÁ 
private
ÄÄ 
void
ÄÄ 
GoodB2G2
ÄÄ 
(
ÄÄ 
)
ÄÄ 
{
ÅÅ 
string
ÆÆ 
data
ÆÆ 
;
ÆÆ 
if
ÇÇ 

(
ÇÇ  
PRIVATE_CONST_FIVE
ÇÇ 
==
ÇÇ  
$num
ÇÇ  !
)
ÇÇ! "
{
ÈÈ 	
data
ÉÉ 
=
ÉÉ 
$str
ÉÉ 
;
ÉÉ 
{
ËË 
try
ÌÌ 
{
ÍÍ 
using
ÏÏ 
(
ÏÏ 
	TcpClient
ÏÏ $
tcpConn
ÏÏ% ,
=
ÏÏ- .
new
ÏÏ/ 2
	TcpClient
ÏÏ3 <
(
ÏÏ< =
$str
ÏÏ= O
,
ÏÏO P
$num
ÏÏQ V
)
ÏÏV W
)
ÏÏW X
{
ÐÐ 
using
ÒÒ 
(
ÒÒ 
StreamReader
ÒÒ +
sr
ÒÒ, .
=
ÒÒ/ 0
new
ÒÒ1 4
StreamReader
ÒÒ5 A
(
ÒÒA B
tcpConn
ÒÒB I
.
ÒÒI J
	GetStream
ÒÒJ S
(
ÒÒS T
)
ÒÒT U
)
ÒÒU V
)
ÒÒV W
{
ÓÓ 
data
ÕÕ  
=
ÕÕ! "
sr
ÕÕ# %
.
ÕÕ% &
ReadLine
ÕÕ& .
(
ÕÕ. /
)
ÕÕ/ 0
;
ÕÕ0 1
}
ÖÖ 
}
×× 
}
ØØ 
catch
ÙÙ 
(
ÙÙ 
IOException
ÙÙ "
exceptIO
ÙÙ# +
)
ÙÙ+ ,
{
ÚÚ 
IO
ÛÛ 
.
ÛÛ 
Logger
ÛÛ 
.
ÛÛ 
Log
ÛÛ !
(
ÛÛ! "
NLog
ÛÛ" &
.
ÛÛ& '
LogLevel
ÛÛ' /
.
ÛÛ/ 0
Warn
ÛÛ0 4
,
ÛÛ4 5
exceptIO
ÛÛ6 >
,
ÛÛ> ?
$str
ÛÛ@ [
)
ÛÛ[ \
;
ÛÛ\ ]
}
ÜÜ 
}
ÝÝ 
}
ÞÞ 	
else
ßß 
{
àà 	
data
ãã 
=
ãã 
null
ãã 
;
ãã 
}
ää 	
if
åå 

(
åå  
PRIVATE_CONST_FIVE
åå 
==
åå  
$num
åå  !
)
åå! "
{
ææ 	
try
çç 
{
èè 
int
éé 
value
éé 
=
éé 
int
éé 
.
éé  
Parse
éé  %
(
éé% &
data
éé& *
)
éé* +
;
éé+ ,
}
êê 
catch
ëë 
(
ëë 
FormatException
ëë " 
exceptNumberFormat
ëë# 5
)
ëë5 6
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî 
(
îî 
NLog
îî "
.
îî" #
LogLevel
îî# +
.
îî+ ,
Warn
îî, 0
,
îî0 1 
exceptNumberFormat
îî2 D
,
îîD E
$str
îîF j
+
îîk l 
exceptNumberFormat
îîm 
)îî 
;îî 
}
ïï 
}
ðð 	
}
ññ 
public
óó 

override
óó 
void
óó 
Good
óó 
(
óó 
)
óó 
{
ôô 
GoodG2B1
õõ 
(
õõ 
)
õõ 
;
õõ 
GoodG2B2
öö 
(
öö 
)
öö 
;
öö 
GoodB2G1
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷ 
GoodB2G2
øø 
(
øø 
)
øø 
;
øø 
}
ùù 
}ûû 
}üü ^
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_07.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_07 D
:E F
AbstractTestCaseG W
{ 
private"" 
int"" 
privateFive"" 
="" 
$num"" 
;""  
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
string&& 
data&& 
;&& 
if'' 

('' 
privateFive'' 
=='' 
$num'' 
)'' 
{(( 	
data)) 
=)) 
$str)) 
;)) 
{++ 
try,, 
{-- 
using// 
(// 
	TcpClient// $
tcpConn//% ,
=//- .
new/// 2
	TcpClient//3 <
(//< =
$str//= O
,//O P
$num//Q V
)//V W
)//W X
{00 
using22 
(22 
StreamReader22 +
sr22, .
=22/ 0
new221 4
StreamReader225 A
(22A B
tcpConn22B I
.22I J
	GetStream22J S
(22S T
)22T U
)22U V
)22V W
{33 
data55  
=55! "
sr55# %
.55% &
ReadLine55& .
(55. /
)55/ 0
;550 1
}66 
}77 
}88 
catch99 
(99 
IOException99 "
exceptIO99# +
)99+ ,
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
exceptIO;;6 >
,;;> ?
$str;;@ [
);;[ \
;;;\ ]
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataCC 
=CC 
nullCC 
;CC 
}DD 	
ifEE 

(EE 
privateFiveEE 
==EE 
$numEE 
)EE 
{FF 	
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateUU 
voidUU 
GoodG2B1UU 
(UU 
)UU 
{VV 
stringWW 
dataWW 
;WW 
ifXX 

(XX 
privateFiveXX 
!=XX 
$numXX 
)XX 
{YY 	
data\\ 
=\\ 
null\\ 
;\\ 
}]] 	
else^^ 
{__ 	
dataaa 
=aa 
$straa 
;aa 
}bb 	
ifcc 

(cc 
privateFivecc 
==cc 
$numcc 
)cc 
{dd 	
tryee 
{ff 
intgg 
valuegg 
=gg 
intgg 
.gg  
Parsegg  %
(gg% &
datagg& *
)gg* +
;gg+ ,
}hh 
catchii 
(ii 
FormatExceptionii "
exceptNumberFormatii# 5
)ii5 6
{jj 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptNumberFormatll2 D
,llD E
$strllF `
+lla b
datallc g
)llg h
;llh i
}mm 
}nn 	
}oo 
privaterr 
voidrr 
GoodG2B2rr 
(rr 
)rr 
{ss 
stringtt 
datatt 
;tt 
ifuu 

(uu 
privateFiveuu 
==uu 
$numuu 
)uu 
{vv 	
dataxx 
=xx 
$strxx 
;xx 
}yy 	
elsezz 
{{{ 	
data~~ 
=~~ 
null~~ 
;~~ 
} 	
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
new
/ 2
	TcpClient
3 <
(
< =
$str
= O
,
O P
$num
Q V
)
V W
)
W X
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
    
=
  ! "
sr
  # %
.
  % &
ReadLine
  & .
(
  . /
)
  / 0
;
  0 1
}
¡¡ 
}
¢¢ 
}
££ 
catch
¤¤ 
(
¤¤ 
IOException
¤¤ "
exceptIO
¤¤# +
)
¤¤+ ,
{
¥¥ 
IO
¦¦ 
.
¦¦ 
Logger
¦¦ 
.
¦¦ 
Log
¦¦ !
(
¦¦! "
NLog
¦¦" &
.
¦¦& '
LogLevel
¦¦' /
.
¦¦/ 0
Warn
¦¦0 4
,
¦¦4 5
exceptIO
¦¦6 >
,
¦¦> ?
$str
¦¦@ [
)
¦¦[ \
;
¦¦\ ]
}
§§ 
}
¨¨ 
}
©© 	
else
ªª 
{
«« 	
data
®® 
=
®® 
null
®® 
;
®® 
}
¯¯ 	
if
°° 

(
°° 
privateFive
°° 
!=
°° 
$num
°° 
)
°° 
{
±± 	
IO
³³ 
.
³³ 
	WriteLine
³³ 
(
³³ 
$str
³³ /
)
³³/ 0
;
³³0 1
}
´´ 	
else
µµ 
{
¶¶ 	
try
·· 
{
¸¸ 
int
¹¹ 
value
¹¹ 
=
¹¹ 
int
¹¹ 
.
¹¹  
Parse
¹¹  %
(
¹¹% &
data
¹¹& *
)
¹¹* +
;
¹¹+ ,
}
ºº 
catch
»» 
(
»» 
FormatException
»» " 
exceptNumberFormat
»»# 5
)
»»5 6
{
¼¼ 
IO
¾¾ 
.
¾¾ 
Logger
¾¾ 
.
¾¾ 
Log
¾¾ 
(
¾¾ 
NLog
¾¾ "
.
¾¾" #
LogLevel
¾¾# +
.
¾¾+ ,
Warn
¾¾, 0
,
¾¾0 1 
exceptNumberFormat
¾¾2 D
,
¾¾D E
$str
¾¾F j
+
¾¾k l 
exceptNumberFormat
¾¾m 
)¾¾ 
;¾¾ 
}
¿¿ 
}
ÀÀ 	
}
ÁÁ 
private
ÄÄ 
void
ÄÄ 
GoodB2G2
ÄÄ 
(
ÄÄ 
)
ÄÄ 
{
ÅÅ 
string
ÆÆ 
data
ÆÆ 
;
ÆÆ 
if
ÇÇ 

(
ÇÇ 
privateFive
ÇÇ 
==
ÇÇ 
$num
ÇÇ 
)
ÇÇ 
{
ÈÈ 	
data
ÉÉ 
=
ÉÉ 
$str
ÉÉ 
;
ÉÉ 
{
ËË 
try
ÌÌ 
{
ÍÍ 
using
ÏÏ 
(
ÏÏ 
	TcpClient
ÏÏ $
tcpConn
ÏÏ% ,
=
ÏÏ- .
new
ÏÏ/ 2
	TcpClient
ÏÏ3 <
(
ÏÏ< =
$str
ÏÏ= O
,
ÏÏO P
$num
ÏÏQ V
)
ÏÏV W
)
ÏÏW X
{
ÐÐ 
using
ÒÒ 
(
ÒÒ 
StreamReader
ÒÒ +
sr
ÒÒ, .
=
ÒÒ/ 0
new
ÒÒ1 4
StreamReader
ÒÒ5 A
(
ÒÒA B
tcpConn
ÒÒB I
.
ÒÒI J
	GetStream
ÒÒJ S
(
ÒÒS T
)
ÒÒT U
)
ÒÒU V
)
ÒÒV W
{
ÓÓ 
data
ÕÕ  
=
ÕÕ! "
sr
ÕÕ# %
.
ÕÕ% &
ReadLine
ÕÕ& .
(
ÕÕ. /
)
ÕÕ/ 0
;
ÕÕ0 1
}
ÖÖ 
}
×× 
}
ØØ 
catch
ÙÙ 
(
ÙÙ 
IOException
ÙÙ "
exceptIO
ÙÙ# +
)
ÙÙ+ ,
{
ÚÚ 
IO
ÛÛ 
.
ÛÛ 
Logger
ÛÛ 
.
ÛÛ 
Log
ÛÛ !
(
ÛÛ! "
NLog
ÛÛ" &
.
ÛÛ& '
LogLevel
ÛÛ' /
.
ÛÛ/ 0
Warn
ÛÛ0 4
,
ÛÛ4 5
exceptIO
ÛÛ6 >
,
ÛÛ> ?
$str
ÛÛ@ [
)
ÛÛ[ \
;
ÛÛ\ ]
}
ÜÜ 
}
ÝÝ 
}
ÞÞ 	
else
ßß 
{
àà 	
data
ãã 
=
ãã 
null
ãã 
;
ãã 
}
ää 	
if
åå 

(
åå 
privateFive
åå 
==
åå 
$num
åå 
)
åå 
{
ææ 	
try
çç 
{
èè 
int
éé 
value
éé 
=
éé 
int
éé 
.
éé  
Parse
éé  %
(
éé% &
data
éé& *
)
éé* +
;
éé+ ,
}
êê 
catch
ëë 
(
ëë 
FormatException
ëë " 
exceptNumberFormat
ëë# 5
)
ëë5 6
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî 
(
îî 
NLog
îî "
.
îî" #
LogLevel
îî# +
.
îî+ ,
Warn
îî, 0
,
îî0 1 
exceptNumberFormat
îî2 D
,
îîD E
$str
îîF j
+
îîk l 
exceptNumberFormat
îîm 
)îî 
;îî 
}
ïï 
}
ðð 	
}
ññ 
public
óó 

override
óó 
void
óó 
Good
óó 
(
óó 
)
óó 
{
ôô 
GoodG2B1
õõ 
(
õõ 
)
õõ 
;
õõ 
GoodG2B2
öö 
(
öö 
)
öö 
;
öö 
GoodB2G1
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷ 
GoodB2G2
øø 
(
øø 
)
øø 
;
øø 
}
ùù 
}ûû 
}üü ö`
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_08.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_08 D
:E F
AbstractTestCaseG W
{ 
private"" 
static"" 
bool"" 
PrivateReturnsTrue"" *
(""* +
)""+ ,
{## 
return$$ 
true$$ 
;$$ 
}%% 
private'' 
static'' 
bool'' 
PrivateReturnsFalse'' +
(''+ ,
)'', -
{(( 
return)) 
false)) 
;)) 
}** 
public,, 

override,, 
void,, 
Bad,, 
(,, 
),, 
{-- 
string.. 
data.. 
;.. 
if// 

(// 
PrivateReturnsTrue// 
(// 
)//  
)//  !
{00 	
data11 
=11 
$str11 
;11 
{33 
try44 
{55 
using77 
(77 
	TcpClient77 $
tcpConn77% ,
=77- .
new77/ 2
	TcpClient773 <
(77< =
$str77= O
,77O P
$num77Q V
)77V W
)77W X
{88 
using:: 
(:: 
StreamReader:: +
sr::, .
=::/ 0
new::1 4
StreamReader::5 A
(::A B
tcpConn::B I
.::I J
	GetStream::J S
(::S T
)::T U
)::U V
)::V W
{;; 
data==  
===! "
sr==# %
.==% &
ReadLine==& .
(==. /
)==/ 0
;==0 1
}>> 
}?? 
}@@ 
catchAA 
(AA 
IOExceptionAA "
exceptIOAA# +
)AA+ ,
{BB 
IOCC 
.CC 
LoggerCC 
.CC 
LogCC !
(CC! "
NLogCC" &
.CC& '
LogLevelCC' /
.CC/ 0
WarnCC0 4
,CC4 5
exceptIOCC6 >
,CC> ?
$strCC@ [
)CC[ \
;CC\ ]
}DD 
}EE 
}FF 	
elseGG 
{HH 	
dataKK 
=KK 
nullKK 
;KK 
}LL 	
ifMM 

(MM 
PrivateReturnsTrueMM 
(MM 
)MM  
)MM  !
{NN 	
tryOO 
{PP 
intQQ 
valueQQ 
=QQ 
intQQ 
.QQ  
ParseQQ  %
(QQ% &
dataQQ& *
)QQ* +
;QQ+ ,
}RR 
catchSS 
(SS 
FormatExceptionSS "
exceptNumberFormatSS# 5
)SS5 6
{TT 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$strVVF `
+VVa b
dataVVc g
)VVg h
;VVh i
}WW 
}XX 	
}YY 
private]] 
void]] 
GoodG2B1]] 
(]] 
)]] 
{^^ 
string__ 
data__ 
;__ 
if`` 

(`` 
PrivateReturnsFalse`` 
(``  
)``  !
)``! "
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
elseff 
{gg 	
dataii 
=ii 
$strii 
;ii 
}jj 	
ifkk 

(kk 
PrivateReturnsTruekk 
(kk 
)kk  
)kk  !
{ll 	
trymm 
{nn 
intoo 
valueoo 
=oo 
intoo 
.oo  
Parseoo  %
(oo% &
dataoo& *
)oo* +
;oo+ ,
}pp 
catchqq 
(qq 
FormatExceptionqq "
exceptNumberFormatqq# 5
)qq5 6
{rr 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
exceptNumberFormattt2 D
,ttD E
$strttF `
+tta b
datattc g
)ttg h
;tth i
}uu 
}vv 	
}ww 
privatezz 
voidzz 
GoodG2B2zz 
(zz 
)zz 
{{{ 
string|| 
data|| 
;|| 
if}} 

(}} 
PrivateReturnsTrue}} 
(}} 
)}}  
)}}  !
{~~ 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
   
using
¢¢ 
(
¢¢ 
	TcpClient
¢¢ $
tcpConn
¢¢% ,
=
¢¢- .
new
¢¢/ 2
	TcpClient
¢¢3 <
(
¢¢< =
$str
¢¢= O
,
¢¢O P
$num
¢¢Q V
)
¢¢V W
)
¢¢W X
{
££ 
using
¥¥ 
(
¥¥ 
StreamReader
¥¥ +
sr
¥¥, .
=
¥¥/ 0
new
¥¥1 4
StreamReader
¥¥5 A
(
¥¥A B
tcpConn
¥¥B I
.
¥¥I J
	GetStream
¥¥J S
(
¥¥S T
)
¥¥T U
)
¥¥U V
)
¥¥V W
{
¦¦ 
data
¨¨  
=
¨¨! "
sr
¨¨# %
.
¨¨% &
ReadLine
¨¨& .
(
¨¨. /
)
¨¨/ 0
;
¨¨0 1
}
©© 
}
ªª 
}
«« 
catch
¬¬ 
(
¬¬ 
IOException
¬¬ "
exceptIO
¬¬# +
)
¬¬+ ,
{
­­ 
IO
®® 
.
®® 
Logger
®® 
.
®® 
Log
®® !
(
®®! "
NLog
®®" &
.
®®& '
LogLevel
®®' /
.
®®/ 0
Warn
®®0 4
,
®®4 5
exceptIO
®®6 >
,
®®> ?
$str
®®@ [
)
®®[ \
;
®®\ ]
}
¯¯ 
}
°° 
}
±± 	
else
²² 
{
³³ 	
data
¶¶ 
=
¶¶ 
null
¶¶ 
;
¶¶ 
}
·· 	
if
¸¸ 

(
¸¸ !
PrivateReturnsFalse
¸¸ 
(
¸¸  
)
¸¸  !
)
¸¸! "
{
¹¹ 	
IO
»» 
.
»» 
	WriteLine
»» 
(
»» 
$str
»» /
)
»»/ 0
;
»»0 1
}
¼¼ 	
else
½½ 
{
¾¾ 	
try
¿¿ 
{
ÀÀ 
int
ÁÁ 
value
ÁÁ 
=
ÁÁ 
int
ÁÁ 
.
ÁÁ  
Parse
ÁÁ  %
(
ÁÁ% &
data
ÁÁ& *
)
ÁÁ* +
;
ÁÁ+ ,
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
FormatException
ÃÃ " 
exceptNumberFormat
ÃÃ# 5
)
ÃÃ5 6
{
ÄÄ 
IO
ÆÆ 
.
ÆÆ 
Logger
ÆÆ 
.
ÆÆ 
Log
ÆÆ 
(
ÆÆ 
NLog
ÆÆ "
.
ÆÆ" #
LogLevel
ÆÆ# +
.
ÆÆ+ ,
Warn
ÆÆ, 0
,
ÆÆ0 1 
exceptNumberFormat
ÆÆ2 D
,
ÆÆD E
$str
ÆÆF j
+
ÆÆk l 
exceptNumberFormat
ÆÆm 
)ÆÆ 
;ÆÆ 
}
ÇÇ 
}
ÈÈ 	
}
ÉÉ 
private
ÌÌ 
void
ÌÌ 
GoodB2G2
ÌÌ 
(
ÌÌ 
)
ÌÌ 
{
ÍÍ 
string
ÎÎ 
data
ÎÎ 
;
ÎÎ 
if
ÏÏ 

(
ÏÏ  
PrivateReturnsTrue
ÏÏ 
(
ÏÏ 
)
ÏÏ  
)
ÏÏ  !
{
ÐÐ 	
data
ÑÑ 
=
ÑÑ 
$str
ÑÑ 
;
ÑÑ 
{
ÓÓ 
try
ÔÔ 
{
ÕÕ 
using
×× 
(
×× 
	TcpClient
×× $
tcpConn
××% ,
=
××- .
new
××/ 2
	TcpClient
××3 <
(
××< =
$str
××= O
,
××O P
$num
××Q V
)
××V W
)
××W X
{
ØØ 
using
ÚÚ 
(
ÚÚ 
StreamReader
ÚÚ +
sr
ÚÚ, .
=
ÚÚ/ 0
new
ÚÚ1 4
StreamReader
ÚÚ5 A
(
ÚÚA B
tcpConn
ÚÚB I
.
ÚÚI J
	GetStream
ÚÚJ S
(
ÚÚS T
)
ÚÚT U
)
ÚÚU V
)
ÚÚV W
{
ÛÛ 
data
ÝÝ  
=
ÝÝ! "
sr
ÝÝ# %
.
ÝÝ% &
ReadLine
ÝÝ& .
(
ÝÝ. /
)
ÝÝ/ 0
;
ÝÝ0 1
}
ÞÞ 
}
ßß 
}
àà 
catch
áá 
(
áá 
IOException
áá "
exceptIO
áá# +
)
áá+ ,
{
ââ 
IO
ãã 
.
ãã 
Logger
ãã 
.
ãã 
Log
ãã !
(
ãã! "
NLog
ãã" &
.
ãã& '
LogLevel
ãã' /
.
ãã/ 0
Warn
ãã0 4
,
ãã4 5
exceptIO
ãã6 >
,
ãã> ?
$str
ãã@ [
)
ãã[ \
;
ãã\ ]
}
ää 
}
åå 
}
ææ 	
else
çç 
{
èè 	
data
ëë 
=
ëë 
null
ëë 
;
ëë 
}
ìì 	
if
íí 

(
íí  
PrivateReturnsTrue
íí 
(
íí 
)
íí  
)
íí  !
{
îî 	
try
ïï 
{
ðð 
int
ññ 
value
ññ 
=
ññ 
int
ññ 
.
ññ  
Parse
ññ  %
(
ññ% &
data
ññ& *
)
ññ* +
;
ññ+ ,
}
òò 
catch
óó 
(
óó 
FormatException
óó " 
exceptNumberFormat
óó# 5
)
óó5 6
{
ôô 
IO
öö 
.
öö 
Logger
öö 
.
öö 
Log
öö 
(
öö 
NLog
öö "
.
öö" #
LogLevel
öö# +
.
öö+ ,
Warn
öö, 0
,
öö0 1 
exceptNumberFormat
öö2 D
,
ööD E
$str
ööF j
+
öök l 
exceptNumberFormat
ööm 
)öö 
;öö 
}
÷÷ 
}
øø 	
}
ùù 
public
ûû 

override
ûû 
void
ûû 
Good
ûû 
(
ûû 
)
ûû 
{
üü 
GoodG2B1
ýý 
(
ýý 
)
ýý 
;
ýý 
GoodG2B2
þþ 
(
þþ 
)
þþ 
;
þþ 
GoodB2G1
ÿÿ 
(
ÿÿ 
)
ÿÿ 
;
ÿÿ 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} ¼]
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_09.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_09 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
.""  
STATIC_READONLY_TRUE"" #
)""# $
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using** 
(** 
	TcpClient** $
tcpConn**% ,
=**- .
new**/ 2
	TcpClient**3 <
(**< =
$str**= O
,**O P
$num**Q V
)**V W
)**W X
{++ 
using-- 
(-- 
StreamReader-- +
sr--, .
=--/ 0
new--1 4
StreamReader--5 A
(--A B
tcpConn--B I
.--I J
	GetStream--J S
(--S T
)--T U
)--U V
)--V W
{.. 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@ 
IO@@ 
.@@  
STATIC_READONLY_TRUE@@ #
)@@# $
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
IOSS 
.SS !
STATIC_READONLY_FALSESS $
)SS$ %
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
IO^^ 
.^^  
STATIC_READONLY_TRUE^^ #
)^^# $
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
IOpp 
.pp  
STATIC_READONLY_TRUEpp #
)pp# $
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
IO{{ 
.{{  
STATIC_READONLY_TRUE{{ #
){{# $
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
new
/ 2
	TcpClient
3 <
(
< =
$str
= O
,
O P
$num
Q V
)
V W
)
W X
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
IO
«« 
.
«« #
STATIC_READONLY_FALSE
«« $
)
««$ %
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
IO
ÂÂ 
.
ÂÂ "
STATIC_READONLY_TRUE
ÂÂ #
)
ÂÂ# $
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÊÊ 
(
ÊÊ 
	TcpClient
ÊÊ $
tcpConn
ÊÊ% ,
=
ÊÊ- .
new
ÊÊ/ 2
	TcpClient
ÊÊ3 <
(
ÊÊ< =
$str
ÊÊ= O
,
ÊÊO P
$num
ÊÊQ V
)
ÊÊV W
)
ÊÊW X
{
ËË 
using
ÍÍ 
(
ÍÍ 
StreamReader
ÍÍ +
sr
ÍÍ, .
=
ÍÍ/ 0
new
ÍÍ1 4
StreamReader
ÍÍ5 A
(
ÍÍA B
tcpConn
ÍÍB I
.
ÍÍI J
	GetStream
ÍÍJ S
(
ÍÍS T
)
ÍÍT U
)
ÍÍU V
)
ÍÍV W
{
ÎÎ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
IO
àà 
.
àà "
STATIC_READONLY_TRUE
àà #
)
àà# $
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ Ø\
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_10.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_10 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
."" 

staticTrue"" 
)"" 
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using** 
(** 
	TcpClient** $
tcpConn**% ,
=**- .
new**/ 2
	TcpClient**3 <
(**< =
$str**= O
,**O P
$num**Q V
)**V W
)**W X
{++ 
using-- 
(-- 
StreamReader-- +
sr--, .
=--/ 0
new--1 4
StreamReader--5 A
(--A B
tcpConn--B I
.--I J
	GetStream--J S
(--S T
)--T U
)--U V
)--V W
{.. 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@ 
IO@@ 
.@@ 

staticTrue@@ 
)@@ 
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
IOSS 
.SS 
staticFalseSS 
)SS 
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
IO^^ 
.^^ 

staticTrue^^ 
)^^ 
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
IOpp 
.pp 

staticTruepp 
)pp 
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
IO{{ 
.{{ 

staticTrue{{ 
){{ 
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
new
/ 2
	TcpClient
3 <
(
< =
$str
= O
,
O P
$num
Q V
)
V W
)
W X
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
IO
«« 
.
«« 
staticFalse
«« 
)
«« 
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
IO
ÂÂ 
.
ÂÂ 

staticTrue
ÂÂ 
)
ÂÂ 
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÊÊ 
(
ÊÊ 
	TcpClient
ÊÊ $
tcpConn
ÊÊ% ,
=
ÊÊ- .
new
ÊÊ/ 2
	TcpClient
ÊÊ3 <
(
ÊÊ< =
$str
ÊÊ= O
,
ÊÊO P
$num
ÊÊQ V
)
ÊÊV W
)
ÊÊW X
{
ËË 
using
ÍÍ 
(
ÍÍ 
StreamReader
ÍÍ +
sr
ÍÍ, .
=
ÍÍ/ 0
new
ÍÍ1 4
StreamReader
ÍÍ5 A
(
ÍÍA B
tcpConn
ÍÍB I
.
ÍÍI J
	GetStream
ÍÍJ S
(
ÍÍS T
)
ÍÍT U
)
ÍÍU V
)
ÍÍV W
{
ÎÎ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
IO
àà 
.
àà 

staticTrue
àà 
)
àà 
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ Ú_
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_11.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_11 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
."" 
StaticReturnsTrue""  
(""  !
)""! "
)""" #
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using** 
(** 
	TcpClient** $
tcpConn**% ,
=**- .
new**/ 2
	TcpClient**3 <
(**< =
$str**= O
,**O P
$num**Q V
)**V W
)**W X
{++ 
using-- 
(-- 
StreamReader-- +
sr--, .
=--/ 0
new--1 4
StreamReader--5 A
(--A B
tcpConn--B I
.--I J
	GetStream--J S
(--S T
)--T U
)--U V
)--V W
{.. 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@
 
IO@@ 
.@@ 
StaticReturnsTrue@@ 
(@@  
)@@  !
)@@! "
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
IOSS 
.SS 
StaticReturnsFalseSS !
(SS! "
)SS" #
)SS# $
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
IO^^ 
.^^ 
StaticReturnsTrue^^  
(^^  !
)^^! "
)^^" #
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
IOpp 
.pp 
StaticReturnsTruepp  
(pp  !
)pp! "
)pp" #
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
IO{{ 
.{{ 
StaticReturnsTrue{{  
({{  !
){{! "
){{" #
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
new
/ 2
	TcpClient
3 <
(
< =
$str
= O
,
O P
$num
Q V
)
V W
)
W X
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
IO
«« 
.
««  
StaticReturnsFalse
«« !
(
««! "
)
««" #
)
««# $
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
IO
ÂÂ 
.
ÂÂ 
StaticReturnsTrue
ÂÂ  
(
ÂÂ  !
)
ÂÂ! "
)
ÂÂ" #
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÊÊ 
(
ÊÊ 
	TcpClient
ÊÊ $
tcpConn
ÊÊ% ,
=
ÊÊ- .
new
ÊÊ/ 2
	TcpClient
ÊÊ3 <
(
ÊÊ< =
$str
ÊÊ= O
,
ÊÊO P
$num
ÊÊQ V
)
ÊÊV W
)
ÊÊW X
{
ËË 
using
ÍÍ 
(
ÍÍ 
StreamReader
ÍÍ +
sr
ÍÍ, .
=
ÍÍ/ 0
new
ÍÍ1 4
StreamReader
ÍÍ5 A
(
ÍÍA B
tcpConn
ÍÍB I
.
ÍÍI J
	GetStream
ÍÍJ S
(
ÍÍS T
)
ÍÍT U
)
ÍÍU V
)
ÍÍV W
{
ÎÎ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
IO
àà 
.
àà 
StaticReturnsTrue
àà  
(
àà  !
)
àà! "
)
àà" #
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ X
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_12.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_12 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

(""
 
IO"" 
."" $
StaticReturnsTrueOrFalse"" &
(""& '
)""' (
)""( )
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using** 
(** 
	TcpClient** $
tcpConn**% ,
=**- .
new**/ 2
	TcpClient**3 <
(**< =
$str**= O
,**O P
$num**Q V
)**V W
)**W X
{++ 
using-- 
(-- 
StreamReader-- +
sr--, .
=--/ 0
new--1 4
StreamReader--5 A
(--A B
tcpConn--B I
.--I J
	GetStream--J S
(--S T
)--T U
)--U V
)--V W
{.. 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data== 
=== 
$str== 
;== 
}>> 	
if?? 

(??
 
IO?? 
.?? $
StaticReturnsTrueOrFalse?? &
(??& '
)??' (
)??( )
{@@ 	
tryAA 
{BB 
intCC 
valueCC 
=CC 
intCC 
.CC  
ParseCC  %
(CC% &
dataCC& *
)CC* +
;CC+ ,
}DD 
catchEE 
(EE 
FormatExceptionEE "
exceptNumberFormatEE# 5
)EE5 6
{FF 
IOHH 
.HH 
LoggerHH 
.HH 
LogHH 
(HH 
NLogHH "
.HH" #
LogLevelHH# +
.HH+ ,
WarnHH, 0
,HH0 1
exceptNumberFormatHH2 D
,HHD E
$strHHF `
+HHa b
dataHHc g
)HHg h
;HHh i
}II 
}JJ 	
elseKK 
{LL 	
tryMM 
{NN 
intOO 
valueOO 
=OO 
intOO 
.OO  
ParseOO  %
(OO% &
dataOO& *
)OO* +
;OO+ ,
}PP 
catchQQ 
(QQ 
FormatExceptionQQ "
exceptNumberFormatQQ# 5
)QQ5 6
{RR 
IOTT 
.TT 
LoggerTT 
.TT 
LogTT 
(TT 
NLogTT "
.TT" #
LogLevelTT# +
.TT+ ,
WarnTT, 0
,TT0 1
exceptNumberFormatTT2 D
,TTD E
$strTTF j
+TTk l
exceptNumberFormatTTm 
)	TT 
;
TT 
}UU 
}VV 	
}WW 
private\\ 
void\\ 
GoodG2B\\ 
(\\ 
)\\ 
{]] 
string^^ 
data^^ 
;^^ 
if__ 

(__
 
IO__ 
.__ $
StaticReturnsTrueOrFalse__ &
(__& '
)__' (
)__( )
{`` 	
databb 
=bb 
$strbb 
;bb 
}cc 	
elsedd 
{ee 	
datagg 
=gg 
$strgg 
;gg 
}hh 	
ifii 

(ii
 
IOii 
.ii $
StaticReturnsTrueOrFalseii &
(ii& '
)ii' (
)ii( )
{jj 	
trykk 
{ll 
intmm 
valuemm 
=mm 
intmm 
.mm  
Parsemm  %
(mm% &
datamm& *
)mm* +
;mm+ ,
}nn 
catchoo 
(oo 
FormatExceptionoo "
exceptNumberFormatoo# 5
)oo5 6
{pp 
IOrr 
.rr 
Loggerrr 
.rr 
Logrr 
(rr 
NLogrr "
.rr" #
LogLevelrr# +
.rr+ ,
Warnrr, 0
,rr0 1
exceptNumberFormatrr2 D
,rrD E
$strrrF `
+rra b
datarrc g
)rrg h
;rrh i
}ss 
}tt 	
elseuu 
{vv 	
tryww 
{xx 
intyy 
valueyy 
=yy 
intyy 
.yy  
Parseyy  %
(yy% &
datayy& *
)yy* +
;yy+ ,
}zz 
catch{{ 
({{ 
FormatException{{ "
exceptNumberFormat{{# 5
){{5 6
{|| 
IO~~ 
.~~ 
Logger~~ 
.~~ 
Log~~ 
(~~ 
NLog~~ "
.~~" #
LogLevel~~# +
.~~+ ,
Warn~~, 0
,~~0 1
exceptNumberFormat~~2 D
,~~D E
$str~~F `
+~~a b
data~~c g
)~~g h
;~~h i
} 
}
 	
}
 
private
 
void
 
GoodB2G
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(

 
IO
 
.
 &
StaticReturnsTrueOrFalse
 &
(
& '
)
' (
)
( )
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
new
/ 2
	TcpClient
3 <
(
< =
$str
= O
,
O P
$num
Q V
)
V W
)
W X
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
   
{
¡¡ 	
data
¢¢ 
=
¢¢ 
$str
¢¢ 
;
¢¢ 
{
¤¤ 
try
¥¥ 
{
¦¦ 
using
¨¨ 
(
¨¨ 
	TcpClient
¨¨ $
tcpConn
¨¨% ,
=
¨¨- .
new
¨¨/ 2
	TcpClient
¨¨3 <
(
¨¨< =
$str
¨¨= O
,
¨¨O P
$num
¨¨Q V
)
¨¨V W
)
¨¨W X
{
©© 
using
«« 
(
«« 
StreamReader
«« +
sr
««, .
=
««/ 0
new
««1 4
StreamReader
««5 A
(
««A B
tcpConn
««B I
.
««I J
	GetStream
««J S
(
««S T
)
««T U
)
««U V
)
««V W
{
¬¬ 
data
®®  
=
®®! "
sr
®®# %
.
®®% &
ReadLine
®®& .
(
®®. /
)
®®/ 0
;
®®0 1
}
¯¯ 
}
°° 
}
±± 
catch
²² 
(
²² 
IOException
²² "
exceptIO
²²# +
)
²²+ ,
{
³³ 
IO
´´ 
.
´´ 
Logger
´´ 
.
´´ 
Log
´´ !
(
´´! "
NLog
´´" &
.
´´& '
LogLevel
´´' /
.
´´/ 0
Warn
´´0 4
,
´´4 5
exceptIO
´´6 >
,
´´> ?
$str
´´@ [
)
´´[ \
;
´´\ ]
}
µµ 
}
¶¶ 
}
·· 	
if
¸¸ 

(
¸¸
 
IO
¸¸ 
.
¸¸ &
StaticReturnsTrueOrFalse
¸¸ &
(
¸¸& '
)
¸¸' (
)
¸¸( )
{
¹¹ 	
try
ºº 
{
»» 
int
¼¼ 
value
¼¼ 
=
¼¼ 
int
¼¼ 
.
¼¼  
Parse
¼¼  %
(
¼¼% &
data
¼¼& *
)
¼¼* +
;
¼¼+ ,
}
½½ 
catch
¾¾ 
(
¾¾ 
FormatException
¾¾ " 
exceptNumberFormat
¾¾# 5
)
¾¾5 6
{
¿¿ 
IO
ÁÁ 
.
ÁÁ 
Logger
ÁÁ 
.
ÁÁ 
Log
ÁÁ 
(
ÁÁ 
NLog
ÁÁ "
.
ÁÁ" #
LogLevel
ÁÁ# +
.
ÁÁ+ ,
Warn
ÁÁ, 0
,
ÁÁ0 1 
exceptNumberFormat
ÁÁ2 D
,
ÁÁD E
$str
ÁÁF j
+
ÁÁk l 
exceptNumberFormat
ÁÁm 
)ÁÁ 
;ÁÁ 
}
ÂÂ 
}
ÃÃ 	
else
ÄÄ 
{
ÅÅ 	
try
ÆÆ 
{
ÇÇ 
int
ÈÈ 
value
ÈÈ 
=
ÈÈ 
int
ÈÈ 
.
ÈÈ  
Parse
ÈÈ  %
(
ÈÈ% &
data
ÈÈ& *
)
ÈÈ* +
;
ÈÈ+ ,
}
ÉÉ 
catch
ÊÊ 
(
ÊÊ 
FormatException
ÊÊ " 
exceptNumberFormat
ÊÊ# 5
)
ÊÊ5 6
{
ËË 
IO
ÍÍ 
.
ÍÍ 
Logger
ÍÍ 
.
ÍÍ 
Log
ÍÍ 
(
ÍÍ 
NLog
ÍÍ "
.
ÍÍ" #
LogLevel
ÍÍ# +
.
ÍÍ+ ,
Warn
ÍÍ, 0
,
ÍÍ0 1 
exceptNumberFormat
ÍÍ2 D
,
ÍÍD E
$str
ÍÍF j
+
ÍÍk l 
exceptNumberFormat
ÍÍm 
)ÍÍ 
;ÍÍ 
}
ÎÎ 
}
ÏÏ 	
}
ÐÐ 
public
ÒÒ 

override
ÒÒ 
void
ÒÒ 
Good
ÒÒ 
(
ÒÒ 
)
ÒÒ 
{
ÔÔ 
GoodG2B
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G
ÖÖ 
(
ÖÖ 
)
ÖÖ 
;
ÖÖ 
}
×× 
}ÙÙ 
}ÚÚ `
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_13.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_13 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
.""  
STATIC_READONLY_FIVE"" #
==""# %
$num""% &
)""& '
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using** 
(** 
	TcpClient** $
tcpConn**% ,
=**- .
new**/ 2
	TcpClient**3 <
(**< =
$str**= O
,**O P
$num**Q V
)**V W
)**W X
{++ 
using-- 
(-- 
StreamReader-- +
sr--, .
=--/ 0
new--1 4
StreamReader--5 A
(--A B
tcpConn--B I
.--I J
	GetStream--J S
(--S T
)--T U
)--U V
)--V W
{.. 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@ 
IO@@ 
.@@  
STATIC_READONLY_FIVE@@ #
==@@# %
$num@@% &
)@@& '
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
IOSS 
.SS  
STATIC_READONLY_FIVESS #
!=SS# %
$numSS% &
)SS& '
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
IO^^ 
.^^  
STATIC_READONLY_FIVE^^ #
==^^# %
$num^^% &
)^^& '
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
IOpp 
.pp  
STATIC_READONLY_FIVEpp #
==pp# %
$numpp% &
)pp& '
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
IO{{ 
.{{  
STATIC_READONLY_FIVE{{ #
=={{# %
$num{{% &
){{& '
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
# %
$num
% &
)
& '
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
new
/ 2
	TcpClient
3 <
(
< =
$str
= O
,
O P
$num
Q V
)
V W
)
W X
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
IO
«« 
.
«« "
STATIC_READONLY_FIVE
«« #
!=
««# %
$num
««% &
)
««& '
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
IO
ÂÂ 
.
ÂÂ "
STATIC_READONLY_FIVE
ÂÂ #
==
ÂÂ# %
$num
ÂÂ% &
)
ÂÂ& '
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÊÊ 
(
ÊÊ 
	TcpClient
ÊÊ $
tcpConn
ÊÊ% ,
=
ÊÊ- .
new
ÊÊ/ 2
	TcpClient
ÊÊ3 <
(
ÊÊ< =
$str
ÊÊ= O
,
ÊÊO P
$num
ÊÊQ V
)
ÊÊV W
)
ÊÊW X
{
ËË 
using
ÍÍ 
(
ÍÍ 
StreamReader
ÍÍ +
sr
ÍÍ, .
=
ÍÍ/ 0
new
ÍÍ1 4
StreamReader
ÍÍ5 A
(
ÍÍA B
tcpConn
ÍÍB I
.
ÍÍI J
	GetStream
ÍÍJ S
(
ÍÍS T
)
ÍÍT U
)
ÍÍU V
)
ÍÍV W
{
ÎÎ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
IO
àà 
.
àà "
STATIC_READONLY_FIVE
àà #
==
àà# %
$num
àà% &
)
àà& '
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ º_
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_14.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_14 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
."" 

staticFive"" 
=="" 
$num"" 
)"" 
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using** 
(** 
	TcpClient** $
tcpConn**% ,
=**- .
new**/ 2
	TcpClient**3 <
(**< =
$str**= O
,**O P
$num**Q V
)**V W
)**W X
{++ 
using-- 
(-- 
StreamReader-- +
sr--, .
=--/ 0
new--1 4
StreamReader--5 A
(--A B
tcpConn--B I
.--I J
	GetStream--J S
(--S T
)--T U
)--U V
)--V W
{.. 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@ 
IO@@ 
.@@ 

staticFive@@ 
==@@ 
$num@@ 
)@@ 
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
IOSS 
.SS 

staticFiveSS 
!=SS 
$numSS 
)SS 
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
IO^^ 
.^^ 

staticFive^^ 
==^^ 
$num^^ 
)^^ 
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
IOpp 
.pp 

staticFivepp 
==pp 
$numpp 
)pp 
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
IO{{ 
.{{ 

staticFive{{ 
=={{ 
$num{{ 
){{ 
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
new
/ 2
	TcpClient
3 <
(
< =
$str
= O
,
O P
$num
Q V
)
V W
)
W X
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
IO
«« 
.
«« 

staticFive
«« 
!=
«« 
$num
«« 
)
«« 
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
IO
ÂÂ 
.
ÂÂ 

staticFive
ÂÂ 
==
ÂÂ 
$num
ÂÂ 
)
ÂÂ 
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÊÊ 
(
ÊÊ 
	TcpClient
ÊÊ $
tcpConn
ÊÊ% ,
=
ÊÊ- .
new
ÊÊ/ 2
	TcpClient
ÊÊ3 <
(
ÊÊ< =
$str
ÊÊ= O
,
ÊÊO P
$num
ÊÊQ V
)
ÊÊV W
)
ÊÊW X
{
ËË 
using
ÍÍ 
(
ÍÍ 
StreamReader
ÍÍ +
sr
ÍÍ, .
=
ÍÍ/ 0
new
ÍÍ1 4
StreamReader
ÍÍ5 A
(
ÍÍA B
tcpConn
ÍÍB I
.
ÍÍI J
	GetStream
ÍÍJ S
(
ÍÍS T
)
ÍÍT U
)
ÍÍU V
)
ÍÍV W
{
ÎÎ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
IO
àà 
.
àà 

staticFive
àà 
==
àà 
$num
àà 
)
àà 
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ èh
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_15.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_15 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
switch"" 
("" 
$num"" 
)"" 
{## 	
case$$ 
$num$$ 
:$$ 
data%% 
=%% 
$str%% 
;%% 
{'' 
try(( 
{)) 
using++ 
(++ 
	TcpClient++ $
tcpConn++% ,
=++- .
new++/ 2
	TcpClient++3 <
(++< =
$str++= O
,++O P
$num++Q V
)++V W
)++W X
{,, 
using.. 
(.. 
StreamReader.. +
sr.., .
=../ 0
new..1 4
StreamReader..5 A
(..A B
tcpConn..B I
...I J
	GetStream..J S
(..S T
)..T U
)..U V
)..V W
{// 
data11  
=11! "
sr11# %
.11% &
ReadLine11& .
(11. /
)11/ 0
;110 1
}22 
}33 
}44 
catch55 
(55 
IOException55 "
exceptIO55# +
)55+ ,
{66 
IO77 
.77 
Logger77 
.77 
Log77 !
(77! "
NLog77" &
.77& '
LogLevel77' /
.77/ 0
Warn770 4
,774 5
exceptIO776 >
,77> ?
$str77@ [
)77[ \
;77\ ]
}88 
}99 
break:: 
;:: 
default;; 
:;; 
data>> 
=>> 
null>> 
;>> 
break?? 
;?? 
}@@ 	
switchAA 
(AA 
$numAA 
)AA 
{BB 	
caseCC 
$numCC 
:CC 
tryDD 
{EE 
intFF 
valueFF 
=FF 
intFF 
.FF  
ParseFF  %
(FF% &
dataFF& *
)FF* +
;FF+ ,
}GG 
catchHH 
(HH 
FormatExceptionHH "
exceptNumberFormatHH# 5
)HH5 6
{II 
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK "
.KK" #
LogLevelKK# +
.KK+ ,
WarnKK, 0
,KK0 1
exceptNumberFormatKK2 D
,KKD E
$strKKF `
+KKa b
dataKKc g
)KKg h
;KKh i
}LL 
breakMM 
;MM 
defaultNN 
:NN 
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP /
)PP/ 0
;PP0 1
breakQQ 
;QQ 
}RR 	
}SS 
privateWW 
voidWW 
GoodG2B1WW 
(WW 
)WW 
{XX 
stringYY 
dataYY 
;YY 
switchZZ 
(ZZ 
$numZZ 
)ZZ 
{[[ 	
case\\ 
$num\\ 
:\\ 
data__ 
=__ 
null__ 
;__ 
break`` 
;`` 
defaultaa 
:aa 
datacc 
=cc 
$strcc 
;cc 
breakdd 
;dd 
}ee 	
switchff 
(ff 
$numff 
)ff 
{gg 	
casehh 
$numhh 
:hh 
tryii 
{jj 
intkk 
valuekk 
=kk 
intkk 
.kk  
Parsekk  %
(kk% &
datakk& *
)kk* +
;kk+ ,
}ll 
catchmm 
(mm 
FormatExceptionmm "
exceptNumberFormatmm# 5
)mm5 6
{nn 
IOpp 
.pp 
Loggerpp 
.pp 
Logpp 
(pp 
NLogpp "
.pp" #
LogLevelpp# +
.pp+ ,
Warnpp, 0
,pp0 1
exceptNumberFormatpp2 D
,ppD E
$strppF `
+ppa b
datappc g
)ppg h
;pph i
}qq 
breakrr 
;rr 
defaultss 
:ss 
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu /
)uu/ 0
;uu0 1
breakvv 
;vv 
}ww 	
}xx 
private{{ 
void{{ 
GoodG2B2{{ 
({{ 
){{ 
{|| 
string}} 
data}} 
;}} 
switch~~ 
(~~ 
$num~~ 
)~~ 
{ 	
case
 
$num
 
:
 
data
 
=
 
$str
 
;
 
break
 
;
 
default
 
:
 
data
 
=
 
null
 
;
 
break
 
;
 
}
 	
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
break
 
;
 
default
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
   
string
¡¡ 
data
¡¡ 
;
¡¡ 
switch
¢¢ 
(
¢¢ 
$num
¢¢ 
)
¢¢ 
{
££ 	
case
¤¤ 
$num
¤¤ 
:
¤¤ 
data
¥¥ 
=
¥¥ 
$str
¥¥ 
;
¥¥ 
{
§§ 
try
¨¨ 
{
©© 
using
«« 
(
«« 
	TcpClient
«« $
tcpConn
««% ,
=
««- .
new
««/ 2
	TcpClient
««3 <
(
««< =
$str
««= O
,
««O P
$num
««Q V
)
««V W
)
««W X
{
¬¬ 
using
®® 
(
®® 
StreamReader
®® +
sr
®®, .
=
®®/ 0
new
®®1 4
StreamReader
®®5 A
(
®®A B
tcpConn
®®B I
.
®®I J
	GetStream
®®J S
(
®®S T
)
®®T U
)
®®U V
)
®®V W
{
¯¯ 
data
±±  
=
±±! "
sr
±±# %
.
±±% &
ReadLine
±±& .
(
±±. /
)
±±/ 0
;
±±0 1
}
²² 
}
³³ 
}
´´ 
catch
µµ 
(
µµ 
IOException
µµ "
exceptIO
µµ# +
)
µµ+ ,
{
¶¶ 
IO
·· 
.
·· 
Logger
·· 
.
·· 
Log
·· !
(
··! "
NLog
··" &
.
··& '
LogLevel
··' /
.
··/ 0
Warn
··0 4
,
··4 5
exceptIO
··6 >
,
··> ?
$str
··@ [
)
··[ \
;
··\ ]
}
¸¸ 
}
¹¹ 
break
ºº 
;
ºº 
default
»» 
:
»» 
data
¾¾ 
=
¾¾ 
null
¾¾ 
;
¾¾ 
break
¿¿ 
;
¿¿ 
}
ÀÀ 	
switch
ÁÁ 
(
ÁÁ 
$num
ÁÁ 
)
ÁÁ 
{
ÂÂ 	
case
ÃÃ 
$num
ÃÃ 
:
ÃÃ 
IO
ÅÅ 
.
ÅÅ 
	WriteLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ /
)
ÅÅ/ 0
;
ÅÅ0 1
break
ÆÆ 
;
ÆÆ 
default
ÇÇ 
:
ÇÇ 
try
ÈÈ 
{
ÉÉ 
int
ÊÊ 
value
ÊÊ 
=
ÊÊ 
int
ÊÊ 
.
ÊÊ  
Parse
ÊÊ  %
(
ÊÊ% &
data
ÊÊ& *
)
ÊÊ* +
;
ÊÊ+ ,
}
ËË 
catch
ÌÌ 
(
ÌÌ 
FormatException
ÌÌ " 
exceptNumberFormat
ÌÌ# 5
)
ÌÌ5 6
{
ÍÍ 
IO
ÏÏ 
.
ÏÏ 
Logger
ÏÏ 
.
ÏÏ 
Log
ÏÏ 
(
ÏÏ 
NLog
ÏÏ "
.
ÏÏ" #
LogLevel
ÏÏ# +
.
ÏÏ+ ,
Warn
ÏÏ, 0
,
ÏÏ0 1 
exceptNumberFormat
ÏÏ2 D
,
ÏÏD E
$str
ÏÏF j
+
ÏÏk l 
exceptNumberFormat
ÏÏm 
)ÏÏ 
;ÏÏ 
}
ÐÐ 
break
ÑÑ 
;
ÑÑ 
}
ÒÒ 	
}
ÓÓ 
private
ÖÖ 
void
ÖÖ 
GoodB2G2
ÖÖ 
(
ÖÖ 
)
ÖÖ 
{
×× 
string
ØØ 
data
ØØ 
;
ØØ 
switch
ÙÙ 
(
ÙÙ 
$num
ÙÙ 
)
ÙÙ 
{
ÚÚ 	
case
ÛÛ 
$num
ÛÛ 
:
ÛÛ 
data
ÜÜ 
=
ÜÜ 
$str
ÜÜ 
;
ÜÜ 
{
ÞÞ 
try
ßß 
{
àà 
using
ââ 
(
ââ 
	TcpClient
ââ $
tcpConn
ââ% ,
=
ââ- .
new
ââ/ 2
	TcpClient
ââ3 <
(
ââ< =
$str
ââ= O
,
ââO P
$num
ââQ V
)
ââV W
)
ââW X
{
ãã 
using
åå 
(
åå 
StreamReader
åå +
sr
åå, .
=
åå/ 0
new
åå1 4
StreamReader
åå5 A
(
ååA B
tcpConn
ååB I
.
ååI J
	GetStream
ååJ S
(
ååS T
)
ååT U
)
ååU V
)
ååV W
{
ææ 
data
èè  
=
èè! "
sr
èè# %
.
èè% &
ReadLine
èè& .
(
èè. /
)
èè/ 0
;
èè0 1
}
éé 
}
êê 
}
ëë 
catch
ìì 
(
ìì 
IOException
ìì "
exceptIO
ìì# +
)
ìì+ ,
{
íí 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ðð 
break
ññ 
;
ññ 
default
òò 
:
òò 
data
õõ 
=
õõ 
null
õõ 
;
õõ 
break
öö 
;
öö 
}
÷÷ 	
switch
øø 
(
øø 
$num
øø 
)
øø 
{
ùù 	
case
úú 
$num
úú 
:
úú 
try
ûû 
{
üü 
int
ýý 
value
ýý 
=
ýý 
int
ýý 
.
ýý  
Parse
ýý  %
(
ýý% &
data
ýý& *
)
ýý* +
;
ýý+ ,
}
þþ 
catch
ÿÿ 
(
ÿÿ 
FormatException
ÿÿ " 
exceptNumberFormat
ÿÿ# 5
)
ÿÿ5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
break
 
;
 
default
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} Å5
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_16.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_16 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
while"" 
("" 
true"" 
)"" 
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using** 
(** 
	TcpClient** $
tcpConn**% ,
=**- .
new**/ 2
	TcpClient**3 <
(**< =
$str**= O
,**O P
$num**Q V
)**V W
)**W X
{++ 
using-- 
(-- 
StreamReader-- +
sr--, .
=--/ 0
new--1 4
StreamReader--5 A
(--A B
tcpConn--B I
.--I J
	GetStream--J S
(--S T
)--T U
)--U V
)--V W
{.. 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
break99 
;99 
}:: 	
while;; 
(;; 
true;; 
);; 
{<< 	
try== 
{>> 
int?? 
value?? 
=?? 
int?? 
.??  
Parse??  %
(??% &
data??& *
)??* +
;??+ ,
}@@ 
catchAA 
(AA 
FormatExceptionAA "
exceptNumberFormatAA# 5
)AA5 6
{BB 
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD "
.DD" #
LogLevelDD# +
.DD+ ,
WarnDD, 0
,DD0 1
exceptNumberFormatDD2 D
,DDD E
$strDDF `
+DDa b
dataDDc g
)DDg h
;DDh i
}EE 
breakFF 
;FF 
}GG 	
}HH 
privateLL 
voidLL 
GoodG2BLL 
(LL 
)LL 
{MM 
stringNN 
dataNN 
;NN 
whileOO 
(OO 
trueOO 
)OO 
{PP 	
dataRR 
=RR 
$strRR 
;RR 
breakSS 
;SS 
}TT 	
whileUU 
(UU 
trueUU 
)UU 
{VV 	
tryWW 
{XX 
intYY 
valueYY 
=YY 
intYY 
.YY  
ParseYY  %
(YY% &
dataYY& *
)YY* +
;YY+ ,
}ZZ 
catch[[ 
([[ 
FormatException[[ "
exceptNumberFormat[[# 5
)[[5 6
{\\ 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
exceptNumberFormat^^2 D
,^^D E
$str^^F `
+^^a b
data^^c g
)^^g h
;^^h i
}__ 
break`` 
;`` 
}aa 	
}bb 
privateee 
voidee 
GoodB2Gee 
(ee 
)ee 
{ff 
stringgg 
datagg 
;gg 
whilehh 
(hh 
truehh 
)hh 
{ii 	
datajj 
=jj 
$strjj 
;jj 
{ll 
trymm 
{nn 
usingpp 
(pp 
	TcpClientpp $
tcpConnpp% ,
=pp- .
newpp/ 2
	TcpClientpp3 <
(pp< =
$strpp= O
,ppO P
$numppQ V
)ppV W
)ppW X
{qq 
usingss 
(ss 
StreamReaderss +
srss, .
=ss/ 0
newss1 4
StreamReaderss5 A
(ssA B
tcpConnssB I
.ssI J
	GetStreamssJ S
(ssS T
)ssT U
)ssU V
)ssV W
{tt 
datavv  
=vv! "
srvv# %
.vv% &
ReadLinevv& .
(vv. /
)vv/ 0
;vv0 1
}ww 
}xx 
}yy 
catchzz 
(zz 
IOExceptionzz "
exceptIOzz# +
)zz+ ,
{{{ 
IO|| 
.|| 
Logger|| 
.|| 
Log|| !
(||! "
NLog||" &
.||& '
LogLevel||' /
.||/ 0
Warn||0 4
,||4 5
exceptIO||6 >
,||> ?
$str||@ [
)||[ \
;||\ ]
}}} 
}~~ 
break 
; 
}
 	
while
 
(
 
true
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
break
 
;
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
} 
} î4
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_17.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_17 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data&& 
=&& 
$str&& 
;&& 
{(( 	
try)) 
{** 
using,, 
(,, 
	TcpClient,,  
tcpConn,,! (
=,,) *
new,,+ .
	TcpClient,,/ 8
(,,8 9
$str,,9 K
,,,K L
$num,,M R
),,R S
),,S T
{-- 
using// 
(// 
StreamReader// '
sr//( *
=//+ ,
new//- 0
StreamReader//1 =
(//= >
tcpConn//> E
.//E F
	GetStream//F O
(//O P
)//P Q
)//Q R
)//R S
{00 
data22 
=22 
sr22 !
.22! "
ReadLine22" *
(22* +
)22+ ,
;22, -
}33 
}44 
}55 
catch66 
(66 
IOException66 
exceptIO66 '
)66' (
{77 
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 "
.88" #
LogLevel88# +
.88+ ,
Warn88, 0
,880 1
exceptIO882 :
,88: ;
$str88< W
)88W X
;88X Y
}99 
}:: 	
for;; 
(;; 
int;; 
j;; 
=;; 
$num;; 
;;; 
j;; 
<;; 
$num;; 
;;; 
j;;  
++;;  "
);;" #
{<< 	
try== 
{>> 
int?? 
value?? 
=?? 
int?? 
.??  
Parse??  %
(??% &
data??& *
)??* +
;??+ ,
}@@ 
catchAA 
(AA 
FormatExceptionAA "
exceptNumberFormatAA# 5
)AA5 6
{BB 
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD "
.DD" #
LogLevelDD# +
.DD+ ,
WarnDD, 0
,DD0 1
exceptNumberFormatDD2 D
,DDD E
$strDDF `
+DDa b
dataDDc g
)DDg h
;DDh i
}EE 
}FF 	
}GG 
privateKK 
voidKK 
GoodG2BKK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
;MM 
dataOO 
=OO 
$strOO 
;OO 
forPP 
(PP 
intPP 
jPP 
=PP 
$numPP 
;PP 
jPP 
<PP 
$numPP 
;PP 
jPP  
++PP  "
)PP" #
{QQ 	
tryRR 
{SS 
intTT 
valueTT 
=TT 
intTT 
.TT  
ParseTT  %
(TT% &
dataTT& *
)TT* +
;TT+ ,
}UU 
catchVV 
(VV 
FormatExceptionVV "
exceptNumberFormatVV# 5
)VV5 6
{WW 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
exceptNumberFormatYY2 D
,YYD E
$strYYF `
+YYa b
dataYYc g
)YYg h
;YYh i
}ZZ 
}[[ 	
}\\ 
private__ 
void__ 
GoodB2G__ 
(__ 
)__ 
{`` 
stringaa 
dataaa 
;aa 
databb 
=bb 
$strbb 
;bb 
{dd 	
tryee 
{ff 
usinghh 
(hh 
	TcpClienthh  
tcpConnhh! (
=hh) *
newhh+ .
	TcpClienthh/ 8
(hh8 9
$strhh9 K
,hhK L
$numhhM R
)hhR S
)hhS T
{ii 
usingkk 
(kk 
StreamReaderkk '
srkk( *
=kk+ ,
newkk- 0
StreamReaderkk1 =
(kk= >
tcpConnkk> E
.kkE F
	GetStreamkkF O
(kkO P
)kkP Q
)kkQ R
)kkR S
{ll 
datann 
=nn 
srnn !
.nn! "
ReadLinenn" *
(nn* +
)nn+ ,
;nn, -
}oo 
}pp 
}qq 
catchrr 
(rr 
IOExceptionrr 
exceptIOrr '
)rr' (
{ss 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
exceptIOtt2 :
,tt: ;
$strtt< W
)ttW X
;ttX Y
}uu 
}vv 	
forww 
(ww 
intww 
kww 
=ww 
$numww 
;ww 
kww 
<ww 
$numww 
;ww 
kww  
++ww  "
)ww" #
{xx 	
tryyy 
{zz 
int{{ 
value{{ 
={{ 
int{{ 
.{{  
Parse{{  %
({{% &
data{{& *
){{* +
;{{+ ,
}|| 
catch}} 
(}} 
FormatException}} "
exceptNumberFormat}}# 5
)}}5 6
{~~ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
} 
} íU
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_21.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_21 D
:E F
AbstractTestCaseG W
{ 
private   
bool   

badPrivate   
=   
false   #
;  # $
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
string$$ 
data$$ 
;$$ 
data%% 
=%% 
$str%% 
;%% 
{'' 	
try(( 
{)) 
using++ 
(++ 
	TcpClient++  
tcpConn++! (
=++) *
new+++ .
	TcpClient++/ 8
(++8 9
$str++9 K
,++K L
$num++M R
)++R S
)++S T
{,, 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
tcpConn..> E
...E F
	GetStream..F O
(..O P
)..P Q
)..Q R
)..R S
{// 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
}99 	

badPrivate:: 
=:: 
true:: 
;:: 
BadSink;; 
(;; 
data;; 
);; 
;;; 
}<< 
private>> 
void>> 
BadSink>> 
(>> 
string>> 
data>>  $
)>>% &
{?? 
if@@ 

(@@ 

badPrivate@@ 
)@@ 
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privateOO 
boolOO 
goodB2G1PrivateOO  
=OO! "
falseOO# (
;OO( )
privatePP 
boolPP 
goodB2G2PrivatePP  
=PP! "
falsePP# (
;PP( )
privateQQ 
boolQQ 
goodG2BPrivateQQ 
=QQ  !
falseQQ" '
;QQ' (
publicSS 

overrideSS 
voidSS 
GoodSS 
(SS 
)SS 
{TT 
GoodB2G1UU 
(UU 
)UU 
;UU 
GoodB2G2VV 
(VV 
)VV 
;VV 
GoodG2BWW 
(WW 
)WW 
;WW 
}XX 
private[[ 
void[[ 
GoodB2G1[[ 
([[ 
)[[ 
{\\ 
string]] 
data]] 
;]] 
data^^ 
=^^ 
$str^^ 
;^^ 
{`` 	
tryaa 
{bb 
usingdd 
(dd 
	TcpClientdd  
tcpConndd! (
=dd) *
newdd+ .
	TcpClientdd/ 8
(dd8 9
$strdd9 K
,ddK L
$numddM R
)ddR S
)ddS T
{ee 
usinggg 
(gg 
StreamReadergg '
srgg( *
=gg+ ,
newgg- 0
StreamReadergg1 =
(gg= >
tcpConngg> E
.ggE F
	GetStreamggF O
(ggO P
)ggP Q
)ggQ R
)ggR S
{hh 
datajj 
=jj 
srjj !
.jj! "
ReadLinejj" *
(jj* +
)jj+ ,
;jj, -
}kk 
}ll 
}mm 
catchnn 
(nn 
IOExceptionnn 
exceptIOnn '
)nn' (
{oo 
IOpp 
.pp 
Loggerpp 
.pp 
Logpp 
(pp 
NLogpp "
.pp" #
LogLevelpp# +
.pp+ ,
Warnpp, 0
,pp0 1
exceptIOpp2 :
,pp: ;
$strpp< W
)ppW X
;ppX Y
}qq 
}rr 	
goodB2G1Privatess 
=ss 
falsess 
;ss  
GoodB2G1Sinktt 
(tt 
datatt 
)tt 
;tt 
}uu 
privateww 
voidww 
GoodB2G1Sinkww 
(ww 
stringww $
dataww% )
)ww* +
{xx 
ifyy 

(yy 
goodB2G1Privateyy 
)yy 
{zz 	
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| /
)||/ 0
;||0 1
}}} 	
else~~ 
{ 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
{
 	
try
 
{
 
using
 
(
 
	TcpClient
  
tcpConn
! (
=
) *
new
+ .
	TcpClient
/ 8
(
8 9
$str
9 K
,
K L
$num
M R
)
R S
)
S T
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
tcpConn
> E
.
E F
	GetStream
F O
(
O P
)
P Q
)
Q R
)
R S
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
}
 
catch
   
(
   
IOException
   
exceptIO
   '
)
  ' (
{
¡¡ 
IO
¢¢ 
.
¢¢ 
Logger
¢¢ 
.
¢¢ 
Log
¢¢ 
(
¢¢ 
NLog
¢¢ "
.
¢¢" #
LogLevel
¢¢# +
.
¢¢+ ,
Warn
¢¢, 0
,
¢¢0 1
exceptIO
¢¢2 :
,
¢¢: ;
$str
¢¢< W
)
¢¢W X
;
¢¢X Y
}
££ 
}
¤¤ 	
goodB2G2Private
¥¥ 
=
¥¥ 
true
¥¥ 
;
¥¥ 
GoodB2G2Sink
¦¦ 
(
¦¦ 
data
¦¦ 
)
¦¦ 
;
¦¦ 
}
§§ 
private
©© 
void
©© 
GoodB2G2Sink
©© 
(
©© 
string
©© $
data
©©% )
)
©©* +
{
ªª 
if
«« 

(
«« 
goodB2G2Private
«« 
)
«« 
{
¬¬ 	
try
­­ 
{
®® 
int
¯¯ 
value
¯¯ 
=
¯¯ 
int
¯¯ 
.
¯¯  
Parse
¯¯  %
(
¯¯% &
data
¯¯& *
)
¯¯* +
;
¯¯+ ,
}
°° 
catch
±± 
(
±± 
FormatException
±± " 
exceptNumberFormat
±±# 5
)
±±5 6
{
²² 
IO
´´ 
.
´´ 
Logger
´´ 
.
´´ 
Log
´´ 
(
´´ 
NLog
´´ "
.
´´" #
LogLevel
´´# +
.
´´+ ,
Warn
´´, 0
,
´´0 1 
exceptNumberFormat
´´2 D
,
´´D E
$str
´´F j
+
´´k l 
exceptNumberFormat
´´m 
)´´ 
;´´ 
}
µµ 
}
¶¶ 	
}
·· 
private
ºº 
void
ºº 
GoodG2B
ºº 
(
ºº 
)
ºº 
{
»» 
string
¼¼ 
data
¼¼ 
;
¼¼ 
data
¾¾ 
=
¾¾ 
$str
¾¾ 
;
¾¾ 
goodG2BPrivate
¿¿ 
=
¿¿ 
true
¿¿ 
;
¿¿ 
GoodG2BSink
ÀÀ 
(
ÀÀ 
data
ÀÀ 
)
ÀÀ 
;
ÀÀ 
}
ÁÁ 
private
ÃÃ 
void
ÃÃ 
GoodG2BSink
ÃÃ 
(
ÃÃ 
string
ÃÃ #
data
ÃÃ$ (
)
ÃÃ) *
{
ÄÄ 
if
ÅÅ 

(
ÅÅ 
goodG2BPrivate
ÅÅ 
)
ÅÅ 
{
ÆÆ 	
try
ÇÇ 
{
ÈÈ 
int
ÉÉ 
value
ÉÉ 
=
ÉÉ 
int
ÉÉ 
.
ÉÉ  
Parse
ÉÉ  %
(
ÉÉ% &
data
ÉÉ& *
)
ÉÉ* +
;
ÉÉ+ ,
}
ÊÊ 
catch
ËË 
(
ËË 
FormatException
ËË " 
exceptNumberFormat
ËË# 5
)
ËË5 6
{
ÌÌ 
IO
ÎÎ 
.
ÎÎ 
Logger
ÎÎ 
.
ÎÎ 
Log
ÎÎ 
(
ÎÎ 
NLog
ÎÎ "
.
ÎÎ" #
LogLevel
ÎÎ# +
.
ÎÎ+ ,
Warn
ÎÎ, 0
,
ÎÎ0 1 
exceptNumberFormat
ÎÎ2 D
,
ÎÎD E
$str
ÎÎF `
+
ÎÎa b
data
ÎÎc g
)
ÎÎg h
;
ÎÎh i
}
ÏÏ 
}
ÐÐ 	
}
ÑÑ 
}ÓÓ 
}ÔÔ 8
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_22a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_22a E
:F G
AbstractTestCaseH X
{ 
public   

static   
bool   
badPublicStatic   &
=  ' (
false  ) .
;  . /
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
string$$ 
data$$ 
=$$ 
null$$ 
;$$ 
data%% 
=%% 
$str%% 
;%% 
{'' 	
try(( 
{)) 
using++ 
(++ 
	TcpClient++  
tcpConn++! (
=++) *
new+++ .
	TcpClient++/ 8
(++8 9
$str++9 K
,++K L
$num++M R
)++R S
)++S T
{,, 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
tcpConn..> E
...E F
	GetStream..F O
(..O P
)..P Q
)..Q R
)..R S
{// 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
}99 	
badPublicStatic:: 
=:: 
true:: 
;:: K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_22b;; G
.;;G H
BadSink;;H O
(;;O P
data;;P T
);;U V
;;;V W
}<< 
public?? 

static?? 
bool??  
goodB2G1PublicStatic?? +
=??, -
false??. 3
;??3 4
public@@ 

static@@ 
bool@@  
goodB2G2PublicStatic@@ +
=@@, -
false@@. 3
;@@3 4
publicAA 

staticAA 
boolAA 
goodG2BPublicStaticAA *
=AA+ ,
falseAA- 2
;AA2 3
publicCC 

overrideCC 
voidCC 
GoodCC 
(CC 
)CC 
{DD 
GoodB2G1EE 
(EE 
)EE 
;EE 
GoodB2G2FF 
(FF 
)FF 
;FF 
GoodG2BGG 
(GG 
)GG 
;GG 
}HH 
privateKK 
voidKK 
GoodB2G1KK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
=MM 
nullMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{PP 	
tryQQ 
{RR 
usingTT 
(TT 
	TcpClientTT  
tcpConnTT! (
=TT) *
newTT+ .
	TcpClientTT/ 8
(TT8 9
$strTT9 K
,TTK L
$numTTM R
)TTR S
)TTS T
{UU 
usingWW 
(WW 
StreamReaderWW '
srWW( *
=WW+ ,
newWW- 0
StreamReaderWW1 =
(WW= >
tcpConnWW> E
.WWE F
	GetStreamWWF O
(WWO P
)WWP Q
)WWQ R
)WWR S
{XX 
dataZZ 
=ZZ 
srZZ !
.ZZ! "
ReadLineZZ" *
(ZZ* +
)ZZ+ ,
;ZZ, -
}[[ 
}\\ 
}]] 
catch^^ 
(^^ 
IOException^^ 
exceptIO^^ '
)^^' (
{__ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptIO``2 :
,``: ;
$str``< W
)``W X
;``X Y
}aa 
}bb 	 
goodB2G1PublicStaticcc 
=cc 
falsecc $
;cc$ %K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_22bdd G
.ddG H
GoodB2G1SinkddH T
(ddT U
dataddU Y
)ddZ [
;dd[ \
}ee 
privatehh 
voidhh 
GoodB2G2hh 
(hh 
)hh 
{ii 
stringjj 
datajj 
=jj 
nulljj 
;jj 
datakk 
=kk 
$strkk 
;kk 
{mm 	
trynn 
{oo 
usingqq 
(qq 
	TcpClientqq  
tcpConnqq! (
=qq) *
newqq+ .
	TcpClientqq/ 8
(qq8 9
$strqq9 K
,qqK L
$numqqM R
)qqR S
)qqS T
{rr 
usingtt 
(tt 
StreamReadertt '
srtt( *
=tt+ ,
newtt- 0
StreamReadertt1 =
(tt= >
tcpConntt> E
.ttE F
	GetStreamttF O
(ttO P
)ttP Q
)ttQ R
)ttR S
{uu 
dataww 
=ww 
srww !
.ww! "
ReadLineww" *
(ww* +
)ww+ ,
;ww, -
}xx 
}yy 
}zz 
catch{{ 
({{ 
IOException{{ 
exceptIO{{ '
){{' (
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} 
(}} 
NLog}} "
.}}" #
LogLevel}}# +
.}}+ ,
Warn}}, 0
,}}0 1
exceptIO}}2 :
,}}: ;
$str}}< W
)}}W X
;}}X Y
}~~ 
} 	"
goodB2G2PublicStatic
 
=
 
true
 #
;
# $M
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_22b
 G
.
G H
GoodB2G2Sink
H T
(
T U
data
U Y
)
Z [
;
[ \
}
 
private
 
void
 
GoodG2B
 
(
 
)
 
{
 
string
 
data
 
=
 
null
 
;
 
data
 
=
 
$str
 
;
 !
goodG2BPublicStatic
 
=
 
true
 "
;
" #M
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_22b
 G
.
G H
GoodG2BSink
H S
(
S T
data
T X
)
Y Z
;
Z [
}
 
} 
} Ú(
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_22b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_22b E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
if 

( K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_22a K
.K L
badPublicStaticL [
)[ \
{ 	
try   
{!! 
int"" 
value"" 
="" 
int"" 
.""  
Parse""  %
(""% &
data""& *
)""* +
;""+ ,
}## 
catch$$ 
($$ 
FormatException$$ "
exceptNumberFormat$$# 5
)$$5 6
{%% 
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' "
.''" #
LogLevel''# +
.''+ ,
Warn'', 0
,''0 1
exceptNumberFormat''2 D
,''D E
$str''F `
+''a b
data''c g
)''g h
;''h i
}(( 
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
}00 
public55 

static55 
void55 
GoodB2G1Sink55 #
(55# $
string55$ *
data55+ /
)550 1
{66 
if77 

(77 K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_22a77 K
.77K L 
goodB2G1PublicStatic77L `
)77` a
{88 	
data;; 
=;; 
null;; 
;;; 
}<< 	
else== 
{>> 	
try?? 
{@@ 
intAA 
valueAA 
=AA 
intAA 
.AA  
ParseAA  %
(AA% &
dataAA& *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
FormatExceptionCC "
exceptNumberFormatCC# 5
)CC5 6
{DD 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
exceptNumberFormatFF2 D
,FFD E
$strFFF j
+FFk l
exceptNumberFormatFFm 
)	FF 
;
FF 
}GG 
}HH 	
}II 
publicLL 

staticLL 
voidLL 
GoodB2G2SinkLL #
(LL# $
stringLL$ *
dataLL+ /
)LL0 1
{MM 
ifNN 

(NN K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_22aNN K
.NNK L 
goodB2G2PublicStaticNNL `
)NN` a
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF j
+WWk l
exceptNumberFormatWWm 
)	WW 
;
WW 
}XX 
}YY 	
elseZZ 
{[[ 	
data^^ 
=^^ 
null^^ 
;^^ 
}__ 	
}`` 
publiccc 

staticcc 
voidcc 
GoodG2BSinkcc "
(cc" #
stringcc# )
datacc* .
)cc/ 0
{dd 
ifee 

(ee K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_22aee K
.eeK L
goodG2BPublicStaticeeL _
)ee_ `
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF `
+nna b
datannc g
)nng h
;nnh i
}oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
}ww 
}yy 
}zz þ5
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_31.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_31 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
dataCopy!! 
;!! 
{"" 	
string## 
data## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using** 
(** 
	TcpClient** $
tcpConn**% ,
=**- .
new**/ 2
	TcpClient**3 <
(**< =
$str**= O
,**O P
$num**Q V
)**V W
)**W X
{++ 
using-- 
(-- 
StreamReader-- +
sr--, .
=--/ 0
new--1 4
StreamReader--5 A
(--A B
tcpConn--B I
.--I J
	GetStream--J S
(--S T
)--T U
)--U V
)--V W
{.. 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
dataCopy99 
=99 
data99 
;99 
}:: 	
{;; 	
string<< 
data<< 
=<< 
dataCopy<< "
;<<" #
try== 
{>> 
int?? 
value?? 
=?? 
int?? 
.??  
Parse??  %
(??% &
data??& *
)??* +
;??+ ,
}@@ 
catchAA 
(AA 
FormatExceptionAA "
exceptNumberFormatAA# 5
)AA5 6
{BB 
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD "
.DD" #
LogLevelDD# +
.DD+ ,
WarnDD, 0
,DD0 1
exceptNumberFormatDD2 D
,DDD E
$strDDF `
+DDa b
dataDDc g
)DDg h
;DDh i
}EE 
}FF 	
}GG 
publicJJ 

overrideJJ 
voidJJ 
GoodJJ 
(JJ 
)JJ 
{KK 
GoodG2BLL 
(LL 
)LL 
;LL 
GoodB2GMM 
(MM 
)MM 
;MM 
}NN 
privateQQ 
voidQQ 
GoodG2BQQ 
(QQ 
)QQ 
{RR 
stringSS 
dataCopySS 
;SS 
{TT 	
stringUU 
dataUU 
;UU 
dataWW 
=WW 
$strWW 
;WW 
dataCopyXX 
=XX 
dataXX 
;XX 
}YY 	
{ZZ 	
string[[ 
data[[ 
=[[ 
dataCopy[[ "
;[[" #
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
}ee 	
}ff 
privateii 
voidii 
GoodB2Gii 
(ii 
)ii 
{jj 
stringkk 
dataCopykk 
;kk 
{ll 	
stringmm 
datamm 
;mm 
datann 
=nn 
$strnn 
;nn 
{pp 
tryqq 
{rr 
usingtt 
(tt 
	TcpClienttt $
tcpConntt% ,
=tt- .
newtt/ 2
	TcpClienttt3 <
(tt< =
$strtt= O
,ttO P
$numttQ V
)ttV W
)ttW X
{uu 
usingww 
(ww 
StreamReaderww +
srww, .
=ww/ 0
newww1 4
StreamReaderww5 A
(wwA B
tcpConnwwB I
.wwI J
	GetStreamwwJ S
(wwS T
)wwT U
)wwU V
)wwV W
{xx 
datazz  
=zz! "
srzz# %
.zz% &
ReadLinezz& .
(zz. /
)zz/ 0
;zz0 1
}{{ 
}|| 
}}} 
catch~~ 
(~~ 
IOException~~ "
exceptIO~~# +
)~~+ ,
{ 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
dataCopy
 
=
 
data
 
;
 
}
 	
{
 	
string
 
data
 
=
 
dataCopy
 "
;
" #
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
} 
} Ì5
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_41.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_41 D
:E F
AbstractTestCaseG W
{ 
private 
static 
void 
BadSink 
(  
string  &
data' +
), -
{   
try!! 
{"" 	
int## 
value## 
=## 
int## 
.## 
Parse## !
(##! "
data##" &
)##& '
;##' (
}$$ 	
catch%% 
(%% 
FormatException%% 
exceptNumberFormat%% 1
)%%1 2
{&& 	
IO(( 
.(( 
Logger(( 
.(( 
Log(( 
((( 
NLog(( 
.(( 
LogLevel(( '
.((' (
Warn((( ,
,((, -
exceptNumberFormat((. @
,((@ A
$str((B \
+((] ^
data((_ c
)((c d
;((d e
})) 	
}** 
public,, 

override,, 
void,, 
Bad,, 
(,, 
),, 
{-- 
string.. 
data.. 
;.. 
data// 
=// 
$str// 
;// 
{11 	
try22 
{33 
using55 
(55 
	TcpClient55  
tcpConn55! (
=55) *
new55+ .
	TcpClient55/ 8
(558 9
$str559 K
,55K L
$num55M R
)55R S
)55S T
{66 
using88 
(88 
StreamReader88 '
sr88( *
=88+ ,
new88- 0
StreamReader881 =
(88= >
tcpConn88> E
.88E F
	GetStream88F O
(88O P
)88P Q
)88Q R
)88R S
{99 
data;; 
=;; 
sr;; !
.;;! "
ReadLine;;" *
(;;* +
);;+ ,
;;;, -
}<< 
}== 
}>> 
catch?? 
(?? 
IOException?? 
exceptIO?? '
)??' (
{@@ 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA 
(AA 
NLogAA "
.AA" #
LogLevelAA# +
.AA+ ,
WarnAA, 0
,AA0 1
exceptIOAA2 :
,AA: ;
$strAA< W
)AAW X
;AAX Y
}BB 
}CC 	
BadSinkDD 
(DD 
dataDD 
)DD 
;DD 
}EE 
publicHH 

overrideHH 
voidHH 
GoodHH 
(HH 
)HH 
{II 
GoodG2BJJ 
(JJ 
)JJ 
;JJ 
GoodB2GKK 
(KK 
)KK 
;KK 
}LL 
privateNN 
staticNN 
voidNN 
GoodG2BSinkNN #
(NN# $
stringNN$ *
dataNN+ /
)NN0 1
{OO 
tryPP 
{QQ 	
intRR 
valueRR 
=RR 
intRR 
.RR 
ParseRR !
(RR! "
dataRR" &
)RR& '
;RR' (
}SS 	
catchTT 
(TT 
FormatExceptionTT 
exceptNumberFormatTT 1
)TT1 2
{UU 	
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW 
.WW 
LogLevelWW '
.WW' (
WarnWW( ,
,WW, -
exceptNumberFormatWW. @
,WW@ A
$strWWB \
+WW] ^
dataWW_ c
)WWc d
;WWd e
}XX 	
}YY 
private\\ 
static\\ 
void\\ 
GoodG2B\\ 
(\\  
)\\  !
{]] 
string^^ 
data^^ 
;^^ 
data`` 
=`` 
$str`` 
;`` 
GoodG2BSinkaa 
(aa 
dataaa 
)aa 
;aa 
}bb 
privatedd 
staticdd 
voiddd 
GoodB2GSinkdd #
(dd# $
stringdd$ *
datadd+ /
)dd0 1
{ee 
tryff 
{gg 	
inthh 
valuehh 
=hh 
inthh 
.hh 
Parsehh !
(hh! "
datahh" &
)hh& '
;hh' (
}ii 	
catchjj 
(jj 
FormatExceptionjj 
exceptNumberFormatjj 1
)jj1 2
{kk 	
IOmm 
.mm 
Loggermm 
.mm 
Logmm 
(mm 
NLogmm 
.mm 
LogLevelmm '
.mm' (
Warnmm( ,
,mm, -
exceptNumberFormatmm. @
,mm@ A
$strmmB f
+mmg h
exceptNumberFormatmmi {
)mm{ |
;mm| }
}nn 	
}oo 
privaterr 
staticrr 
voidrr 
GoodB2Grr 
(rr  
)rr  !
{ss 
stringtt 
datatt 
;tt 
datauu 
=uu 
$struu 
;uu 
{ww 	
tryxx 
{yy 
using{{ 
({{ 
	TcpClient{{  
tcpConn{{! (
={{) *
new{{+ .
	TcpClient{{/ 8
({{8 9
$str{{9 K
,{{K L
$num{{M R
){{R S
){{S T
{|| 
using~~ 
(~~ 
StreamReader~~ '
sr~~( *
=~~+ ,
new~~- 0
StreamReader~~1 =
(~~= >
tcpConn~~> E
.~~E F
	GetStream~~F O
(~~O P
)~~P Q
)~~Q R
)~~R S
{ 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
}
 	
GoodB2GSink
 
(
 
data
 
)
 
;
 
}
 
} 
} 7
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_42.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_42 D
:E F
AbstractTestCaseG W
{ 
private 
static 
string 
	BadSource #
(# $
)$ %
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
	TcpClient((  
tcpConn((! (
=(() *
new((+ .
	TcpClient((/ 8
(((8 9
$str((9 K
,((K L
$num((M R
)((R S
)((S T
{)) 
using++ 
(++ 
StreamReader++ '
sr++( *
=+++ ,
new++- 0
StreamReader++1 =
(++= >
tcpConn++> E
.++E F
	GetStream++F O
(++O P
)++P Q
)++Q R
)++R S
{,, 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	
return77 
data77 
;77 
}88 
public:: 

override:: 
void:: 
Bad:: 
(:: 
):: 
{;; 
string<< 
data<< 
=<< 
	BadSource<< 
(<<  
)<<  !
;<<! "
try== 
{>> 	
int?? 
value?? 
=?? 
int?? 
.?? 
Parse?? !
(??! "
data??" &
)??& '
;??' (
}@@ 	
catchAA 
(AA 
FormatExceptionAA 
exceptNumberFormatAA 1
)AA1 2
{BB 	
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD 
.DD 
LogLevelDD '
.DD' (
WarnDD( ,
,DD, -
exceptNumberFormatDD. @
,DD@ A
$strDDB \
+DD] ^
dataDD_ c
)DDc d
;DDd e
}EE 	
}FF 
privateJJ 
staticJJ 
stringJJ 
GoodG2BSourceJJ '
(JJ' (
)JJ( )
{KK 
stringLL 
dataLL 
;LL 
dataNN 
=NN 
$strNN 
;NN 
returnOO 
dataOO 
;OO 
}PP 
privateRR 
staticRR 
voidRR 
GoodG2BRR 
(RR  
)RR  !
{SS 
stringTT 
dataTT 
=TT 
GoodG2BSourceTT #
(TT# $
)TT$ %
;TT% &
tryUU 
{VV 	
intWW 
valueWW 
=WW 
intWW 
.WW 
ParseWW !
(WW! "
dataWW" &
)WW& '
;WW' (
}XX 	
catchYY 
(YY 
FormatExceptionYY 
exceptNumberFormatYY 1
)YY1 2
{ZZ 	
IO\\ 
.\\ 
Logger\\ 
.\\ 
Log\\ 
(\\ 
NLog\\ 
.\\ 
LogLevel\\ '
.\\' (
Warn\\( ,
,\\, -
exceptNumberFormat\\. @
,\\@ A
$str\\B \
+\\] ^
data\\_ c
)\\c d
;\\d e
}]] 	
}^^ 
privateaa 
staticaa 
stringaa 
GoodB2GSourceaa '
(aa' (
)aa( )
{bb 
stringcc 
datacc 
;cc 
datadd 
=dd 
$strdd 
;dd 
{ff 	
trygg 
{hh 
usingjj 
(jj 
	TcpClientjj  
tcpConnjj! (
=jj) *
newjj+ .
	TcpClientjj/ 8
(jj8 9
$strjj9 K
,jjK L
$numjjM R
)jjR S
)jjS T
{kk 
usingmm 
(mm 
StreamReadermm '
srmm( *
=mm+ ,
newmm- 0
StreamReadermm1 =
(mm= >
tcpConnmm> E
.mmE F
	GetStreammmF O
(mmO P
)mmP Q
)mmQ R
)mmR S
{nn 
datapp 
=pp 
srpp !
.pp! "
ReadLinepp" *
(pp* +
)pp+ ,
;pp, -
}qq 
}rr 
}ss 
catchtt 
(tt 
IOExceptiontt 
exceptIOtt '
)tt' (
{uu 
IOvv 
.vv 
Loggervv 
.vv 
Logvv 
(vv 
NLogvv "
.vv" #
LogLevelvv# +
.vv+ ,
Warnvv, 0
,vv0 1
exceptIOvv2 :
,vv: ;
$strvv< W
)vvW X
;vvX Y
}ww 
}xx 	
returnyy 
datayy 
;yy 
}zz 
private|| 
static|| 
void|| 
GoodB2G|| 
(||  
)||  !
{}} 
string~~ 
data~~ 
=~~ 
GoodB2GSource~~ #
(~~# $
)~~$ %
;~~% &
try 
{
 	
int
 
value
 
=
 
int
 
.
 
Parse
 !
(
! "
data
" &
)
& '
;
' (
}
 	
catch
 
(
 
FormatException
  
exceptNumberFormat
 1
)
1 2
{
 	
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 
.
 
LogLevel
 '
.
' (
Warn
( ,
,
, - 
exceptNumberFormat
. @
,
@ A
$str
B f
+
g h 
exceptNumberFormat
i {
)
{ |
;
| }
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
} 
} á9
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_45.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_45 D
:E F
AbstractTestCaseG W
{ 
private 
string 
dataBad 
; 
private   
string   
dataGoodG2B   
;   
private!! 
string!! 
dataGoodB2G!! 
;!! 
private## 
void## 
BadSink## 
(## 
)## 
{$$ 
string%% 
data%% 
=%% 
dataBad%% 
;%% 
try&& 
{'' 	
int(( 
value(( 
=(( 
int(( 
.(( 
Parse(( !
(((! "
data((" &
)((& '
;((' (
})) 	
catch** 
(** 
FormatException** 
exceptNumberFormat** 1
)**1 2
{++ 	
IO-- 
.-- 
Logger-- 
.-- 
Log-- 
(-- 
NLog-- 
.-- 
LogLevel-- '
.--' (
Warn--( ,
,--, -
exceptNumberFormat--. @
,--@ A
$str--B \
+--] ^
data--_ c
)--c d
;--d e
}.. 	
}// 
public11 

override11 
void11 
Bad11 
(11 
)11 
{22 
string33 
data33 
;33 
data44 
=44 
$str44 
;44 
{66 	
try77 
{88 
using:: 
(:: 
	TcpClient::  
tcpConn::! (
=::) *
new::+ .
	TcpClient::/ 8
(::8 9
$str::9 K
,::K L
$num::M R
)::R S
)::S T
{;; 
using== 
(== 
StreamReader== '
sr==( *
===+ ,
new==- 0
StreamReader==1 =
(=== >
tcpConn==> E
.==E F
	GetStream==F O
(==O P
)==P Q
)==Q R
)==R S
{>> 
data@@ 
=@@ 
sr@@ !
.@@! "
ReadLine@@" *
(@@* +
)@@+ ,
;@@, -
}AA 
}BB 
}CC 
catchDD 
(DD 
IOExceptionDD 
exceptIODD '
)DD' (
{EE 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
exceptIOFF2 :
,FF: ;
$strFF< W
)FFW X
;FFX Y
}GG 
}HH 	
dataBadII 
=II 
dataII 
;II 
BadSinkJJ 
(JJ 
)JJ 
;JJ 
}KK 
publicNN 

overrideNN 
voidNN 
GoodNN 
(NN 
)NN 
{OO 
GoodG2BPP 
(PP 
)PP 
;PP 
GoodB2GQQ 
(QQ 
)QQ 
;QQ 
}RR 
privateTT 
voidTT 
GoodG2BSinkTT 
(TT 
)TT 
{UU 
stringVV 
dataVV 
=VV 
dataGoodG2BVV !
;VV! "
tryWW 
{XX 	
intYY 
valueYY 
=YY 
intYY 
.YY 
ParseYY !
(YY! "
dataYY" &
)YY& '
;YY' (
}ZZ 	
catch[[ 
([[ 
FormatException[[ 
exceptNumberFormat[[ 1
)[[1 2
{\\ 	
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ 
.^^ 
LogLevel^^ '
.^^' (
Warn^^( ,
,^^, -
exceptNumberFormat^^. @
,^^@ A
$str^^B \
+^^] ^
data^^_ c
)^^c d
;^^d e
}__ 	
}`` 
privatecc 
voidcc 
GoodG2Bcc 
(cc 
)cc 
{dd 
stringee 
dataee 
;ee 
datagg 
=gg 
$strgg 
;gg 
dataGoodG2Bhh 
=hh 
datahh 
;hh 
GoodG2BSinkii 
(ii 
)ii 
;ii 
}jj 
privatell 
voidll 
GoodB2GSinkll 
(ll 
)ll 
{mm 
stringnn 
datann 
=nn 
dataGoodB2Gnn !
;nn! "
tryoo 
{pp 	
intqq 
valueqq 
=qq 
intqq 
.qq 
Parseqq !
(qq! "
dataqq" &
)qq& '
;qq' (
}rr 	
catchss 
(ss 
FormatExceptionss 
exceptNumberFormatss 1
)ss1 2
{tt 	
IOvv 
.vv 
Loggervv 
.vv 
Logvv 
(vv 
NLogvv 
.vv 
LogLevelvv '
.vv' (
Warnvv( ,
,vv, -
exceptNumberFormatvv. @
,vv@ A
$strvvB f
+vvg h
exceptNumberFormatvvi {
)vv{ |
;vv| }
}ww 	
}xx 
private{{ 
void{{ 
GoodB2G{{ 
({{ 
){{ 
{|| 
string}} 
data}} 
;}} 
data~~ 
=~~ 
$str~~ 
;~~ 
{
 	
try
 
{
 
using
 
(
 
	TcpClient
  
tcpConn
! (
=
) *
new
+ .
	TcpClient
/ 8
(
8 9
$str
9 K
,
K L
$num
M R
)
R S
)
S T
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
tcpConn
> E
.
E F
	GetStream
F O
(
O P
)
P Q
)
Q R
)
R S
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
}
 	
dataGoodB2G
 
=
 
data
 
;
 
GoodB2GSink
 
(
 
)
 
;
 
}
 
} 
} »"
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_51a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_51a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
	TcpClient((  
tcpConn((! (
=(() *
new((+ .
	TcpClient((/ 8
(((8 9
$str((9 K
,((K L
$num((M R
)((R S
)((S T
{)) 
using++ 
(++ 
StreamReader++ '
sr++( *
=+++ ,
new++- 0
StreamReader++1 =
(++= >
tcpConn++> E
.++E F
	GetStream++F O
(++O P
)++P Q
)++Q R
)++R S
{,, 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_51b77 G
.77G H
BadSink77H O
(77O P
data77P T
)77V W
;77W X
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
dataFF 
=FF 
$strFF 
;FF K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_51bGG G
.GGG H
GoodG2BSinkGGH S
(GGS T
dataGGT X
)GGZ [
;GG[ \
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{PP 	
tryQQ 
{RR 
usingTT 
(TT 
	TcpClientTT  
tcpConnTT! (
=TT) *
newTT+ .
	TcpClientTT/ 8
(TT8 9
$strTT9 K
,TTK L
$numTTM R
)TTR S
)TTS T
{UU 
usingWW 
(WW 
StreamReaderWW '
srWW( *
=WW+ ,
newWW- 0
StreamReaderWW1 =
(WW= >
tcpConnWW> E
.WWE F
	GetStreamWWF O
(WWO P
)WWP Q
)WWQ R
)WWR S
{XX 
dataZZ 
=ZZ 
srZZ !
.ZZ! "
ReadLineZZ" *
(ZZ* +
)ZZ+ ,
;ZZ, -
}[[ 
}\\ 
}]] 
catch^^ 
(^^ 
IOException^^ 
exceptIO^^ '
)^^' (
{__ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptIO``2 :
,``: ;
$str``< W
)``W X
;``X Y
}aa 
}bb 	K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_51bcc G
.ccG H
GoodB2GSinkccH S
(ccS T
dataccT X
)ccZ [
;cc[ \
}dd 
}ff 
}gg ü
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_51b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_51b E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH »"
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_52a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_52a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
	TcpClient((  
tcpConn((! (
=(() *
new((+ .
	TcpClient((/ 8
(((8 9
$str((9 K
,((K L
$num((M R
)((R S
)((S T
{)) 
using++ 
(++ 
StreamReader++ '
sr++( *
=+++ ,
new++- 0
StreamReader++1 =
(++= >
tcpConn++> E
.++E F
	GetStream++F O
(++O P
)++P Q
)++Q R
)++R S
{,, 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_52b77 G
.77G H
BadSink77H O
(77O P
data77P T
)77U V
;77V W
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
dataFF 
=FF 
$strFF 
;FF K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_52bGG G
.GGG H
GoodG2BSinkGGH S
(GGS T
dataGGT X
)GGY Z
;GGZ [
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{PP 	
tryQQ 
{RR 
usingTT 
(TT 
	TcpClientTT  
tcpConnTT! (
=TT) *
newTT+ .
	TcpClientTT/ 8
(TT8 9
$strTT9 K
,TTK L
$numTTM R
)TTR S
)TTS T
{UU 
usingWW 
(WW 
StreamReaderWW '
srWW( *
=WW+ ,
newWW- 0
StreamReaderWW1 =
(WW= >
tcpConnWW> E
.WWE F
	GetStreamWWF O
(WWO P
)WWP Q
)WWQ R
)WWR S
{XX 
dataZZ 
=ZZ 
srZZ !
.ZZ! "
ReadLineZZ" *
(ZZ* +
)ZZ+ ,
;ZZ, -
}[[ 
}\\ 
}]] 
catch^^ 
(^^ 
IOException^^ 
exceptIO^^ '
)^^' (
{__ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptIO``2 :
,``: ;
$str``< W
)``W X
;``X Y
}aa 
}bb 	K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_52bcc G
.ccG H
GoodB2GSinkccH S
(ccS T
dataccT X
)ccY Z
;ccZ [
}dd 
}ff 
}gg 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_52b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_52b E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_52c G
.G H
BadSinkH O
(O P
dataP T
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_52c&& G
.&&G H
GoodG2BSink&&H S
(&&S T
data&&T X
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_52c,, G
.,,G H
GoodB2GSink,,H S
(,,S T
data,,T X
),,Y Z
;,,Z [
}-- 
}// 
}00 ü
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_52c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_52c E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH »"
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
	TcpClient((  
tcpConn((! (
=(() *
new((+ .
	TcpClient((/ 8
(((8 9
$str((9 K
,((K L
$num((M R
)((R S
)((S T
{)) 
using++ 
(++ 
StreamReader++ '
sr++( *
=+++ ,
new++- 0
StreamReader++1 =
(++= >
tcpConn++> E
.++E F
	GetStream++F O
(++O P
)++P Q
)++Q R
)++R S
{,, 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53b77 G
.77G H
BadSink77H O
(77O P
data77P T
)77U V
;77V W
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
dataFF 
=FF 
$strFF 
;FF K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53bGG G
.GGG H
GoodG2BSinkGGH S
(GGS T
dataGGT X
)GGY Z
;GGZ [
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{PP 	
tryQQ 
{RR 
usingTT 
(TT 
	TcpClientTT  
tcpConnTT! (
=TT) *
newTT+ .
	TcpClientTT/ 8
(TT8 9
$strTT9 K
,TTK L
$numTTM R
)TTR S
)TTS T
{UU 
usingWW 
(WW 
StreamReaderWW '
srWW( *
=WW+ ,
newWW- 0
StreamReaderWW1 =
(WW= >
tcpConnWW> E
.WWE F
	GetStreamWWF O
(WWO P
)WWP Q
)WWQ R
)WWR S
{XX 
dataZZ 
=ZZ 
srZZ !
.ZZ! "
ReadLineZZ" *
(ZZ* +
)ZZ+ ,
;ZZ, -
}[[ 
}\\ 
}]] 
catch^^ 
(^^ 
IOException^^ 
exceptIO^^ '
)^^' (
{__ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptIO``2 :
,``: ;
$str``< W
)``W X
;``X Y
}aa 
}bb 	K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53bcc G
.ccG H
GoodB2GSinkccH S
(ccS T
dataccT X
)ccY Z
;ccZ [
}dd 
}ff 
}gg 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53b E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53c G
.G H
BadSinkH O
(O P
dataP T
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53c&& G
.&&G H
GoodG2BSink&&H S
(&&S T
data&&T X
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53c,, G
.,,G H
GoodB2GSink,,H S
(,,S T
data,,T X
),,Y Z
;,,Z [
}-- 
}// 
}00 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53c E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53d G
.G H
BadSinkH O
(O P
dataP T
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53d&& G
.&&G H
GoodG2BSink&&H S
(&&S T
data&&T X
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53d,, G
.,,G H
GoodB2GSink,,H S
(,,S T
data,,T X
),,Y Z
;,,Z [
}-- 
}// 
}00 ü
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53d E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH »"
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
	TcpClient((  
tcpConn((! (
=(() *
new((+ .
	TcpClient((/ 8
(((8 9
$str((9 K
,((K L
$num((M R
)((R S
)((S T
{)) 
using++ 
(++ 
StreamReader++ '
sr++( *
=+++ ,
new++- 0
StreamReader++1 =
(++= >
tcpConn++> E
.++E F
	GetStream++F O
(++O P
)++P Q
)++Q R
)++R S
{,, 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54b77 G
.77G H
BadSink77H O
(77O P
data77P T
)77U V
;77V W
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
dataFF 
=FF 
$strFF 
;FF K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54bGG G
.GGG H
GoodG2BSinkGGH S
(GGS T
dataGGT X
)GGY Z
;GGZ [
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{PP 	
tryQQ 
{RR 
usingTT 
(TT 
	TcpClientTT  
tcpConnTT! (
=TT) *
newTT+ .
	TcpClientTT/ 8
(TT8 9
$strTT9 K
,TTK L
$numTTM R
)TTR S
)TTS T
{UU 
usingWW 
(WW 
StreamReaderWW '
srWW( *
=WW+ ,
newWW- 0
StreamReaderWW1 =
(WW= >
tcpConnWW> E
.WWE F
	GetStreamWWF O
(WWO P
)WWP Q
)WWQ R
)WWR S
{XX 
dataZZ 
=ZZ 
srZZ !
.ZZ! "
ReadLineZZ" *
(ZZ* +
)ZZ+ ,
;ZZ, -
}[[ 
}\\ 
}]] 
catch^^ 
(^^ 
IOException^^ 
exceptIO^^ '
)^^' (
{__ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptIO``2 :
,``: ;
$str``< W
)``W X
;``X Y
}aa 
}bb 	K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54bcc G
.ccG H
GoodB2GSinkccH S
(ccS T
dataccT X
)ccY Z
;ccZ [
}dd 
}ff 
}gg 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54b E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54c G
.G H
BadSinkH O
(O P
dataP T
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54c&& G
.&&G H
GoodG2BSink&&H S
(&&S T
data&&T X
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54c,, G
.,,G H
GoodB2GSink,,H S
(,,S T
data,,T X
),,Y Z
;,,Z [
}-- 
}// 
}00 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54c E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54d G
.G H
BadSinkH O
(O P
dataP T
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54d&& G
.&&G H
GoodG2BSink&&H S
(&&S T
data&&T X
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54d,, G
.,,G H
GoodB2GSink,,H S
(,,S T
data,,T X
),,Y Z
;,,Z [
}-- 
}// 
}00 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54d E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54e G
.G H
BadSinkH O
(O P
dataP T
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54e&& G
.&&G H
GoodG2BSink&&H S
(&&S T
data&&T X
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54e,, G
.,,G H
GoodB2GSink,,H S
(,,S T
data,,T X
),,Y Z
;,,Z [
}-- 
}// 
}00 ü
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54e.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54e E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH Ä
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_61a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_61a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
= K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_61b U
.U V
	BadSourceV _
(_ `
)` a
;a b
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodG2B-- 
(-- 
)-- 
;-- 
GoodB2G.. 
(.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
)22  !
{33 
string44 
data44 
=44 K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_61b44 U
.44U V
GoodG2BSource44V c
(44c d
)44d e
;44e f
try55 
{66 	
int77 
value77 
=77 
int77 
.77 
Parse77 !
(77! "
data77" &
)77& '
;77' (
}88 	
catch99 
(99 
FormatException99 
exceptNumberFormat99 1
)991 2
{:: 	
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< 
.<< 
LogLevel<< '
.<<' (
Warn<<( ,
,<<, -
exceptNumberFormat<<. @
,<<@ A
$str<<B \
+<<] ^
data<<_ c
)<<c d
;<<d e
}== 	
}>> 
privateAA 
staticAA 
voidAA 
GoodB2GAA 
(AA  
)AA  !
{BB 
stringCC 
dataCC 
=CC K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_61bCC U
.CCU V
GoodB2GSourceCCV c
(CCc d
)CCd e
;CCe f
tryDD 
{EE 	
intFF 
valueFF 
=FF 
intFF 
.FF 
ParseFF !
(FF! "
dataFF" &
)FF& '
;FF' (
}GG 	
catchHH 
(HH 
FormatExceptionHH 
exceptNumberFormatHH 1
)HH1 2
{II 	
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK 
.KK 
LogLevelKK '
.KK' (
WarnKK( ,
,KK, -
exceptNumberFormatKK. @
,KK@ A
$strKKB f
+KKg h
exceptNumberFormatKKi {
)KK{ |
;KK| }
}LL 	
}MM 
}OO 
}PP Ã
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_61b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_61b E
{ 
public 

static 
string 
	BadSource "
(" #
)# $
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
	TcpClient((  
tcpConn((! (
=(() *
new((+ .
	TcpClient((/ 8
(((8 9
$str((9 K
,((K L
$num((M R
)((R S
)((S T
{)) 
using++ 
(++ 
StreamReader++ '
sr++( *
=+++ ,
new++- 0
StreamReader++1 =
(++= >
tcpConn++> E
.++E F
	GetStream++F O
(++O P
)++P Q
)++Q R
)++R S
{,, 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	
return77 
data77 
;77 
}88 
public== 

static== 
string== 
GoodG2BSource== &
(==& '
)==' (
{>> 
string?? 
data?? 
;?? 
dataAA 
=AA 
$strAA 
;AA 
returnBB 
dataBB 
;BB 
}CC 
publicFF 

staticFF 
stringFF 
GoodB2GSourceFF &
(FF& '
)FF' (
{GG 
stringHH 
dataHH 
;HH 
dataII 
=II 
$strII 
;II 
{KK 	
tryLL 
{MM 
usingOO 
(OO 
	TcpClientOO  
tcpConnOO! (
=OO) *
newOO+ .
	TcpClientOO/ 8
(OO8 9
$strOO9 K
,OOK L
$numOOM R
)OOR S
)OOS T
{PP 
usingRR 
(RR 
StreamReaderRR '
srRR( *
=RR+ ,
newRR- 0
StreamReaderRR1 =
(RR= >
tcpConnRR> E
.RRE F
	GetStreamRRF O
(RRO P
)RRP Q
)RRQ R
)RRR S
{SS 
dataUU 
=UU 
srUU !
.UU! "
ReadLineUU" *
(UU* +
)UU+ ,
;UU, -
}VV 
}WW 
}XX 
catchYY 
(YY 
IOExceptionYY 
exceptIOYY '
)YY' (
{ZZ 
IO[[ 
.[[ 
Logger[[ 
.[[ 
Log[[ 
([[ 
NLog[[ "
.[[" #
LogLevel[[# +
.[[+ ,
Warn[[, 0
,[[0 1
exceptIO[[2 :
,[[: ;
$str[[< W
)[[W X
;[[X Y
}\\ 
}]] 	
return^^ 
data^^ 
;^^ 
}__ 
}aa 
}bb *
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_66a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_66a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
	TcpClient((  
tcpConn((! (
=(() *
new((+ .
	TcpClient((/ 8
(((8 9
$str((9 K
,((K L
$num((M R
)((R S
)((S T
{)) 
using++ 
(++ 
StreamReader++ '
sr++( *
=+++ ,
new++- 0
StreamReader++1 =
(++= >
tcpConn++> E
.++E F
	GetStream++F O
(++O P
)++P Q
)++Q R
)++R S
{,, 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	
string77 
[77 
]77 
	dataArray77 
=77 
new77  
string77! '
[77' (
$num77( )
]77) *
;77* +
	dataArray88 
[88 
$num88 
]88 
=88 
data88 
;88 K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_66b99 G
.99G H
BadSink99H O
(99O P
	dataArray99P Y
)99[ \
;99\ ]
}:: 
public== 

override== 
void== 
Good== 
(== 
)== 
{>> 
GoodG2B?? 
(?? 
)?? 
;?? 
GoodB2G@@ 
(@@ 
)@@ 
;@@ 
}AA 
privateDD 
staticDD 
voidDD 
GoodG2BDD 
(DD  
)DD  !
{EE 
stringFF 
dataFF 
;FF 
dataHH 
=HH 
$strHH 
;HH 
stringII 
[II 
]II 
	dataArrayII 
=II 
newII  
stringII! '
[II' (
$numII( )
]II) *
;II* +
	dataArrayJJ 
[JJ 
$numJJ 
]JJ 
=JJ 
dataJJ 
;JJ K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_66bKK G
.KKG H
GoodG2BSinkKKH S
(KKS T
	dataArrayKKT ]
)KK_ `
;KK` a
}LL 
privateOO 
staticOO 
voidOO 
GoodB2GOO 
(OO  
)OO  !
{PP 
stringQQ 
dataQQ 
;QQ 
dataRR 
=RR 
$strRR 
;RR 
{TT 	
tryUU 
{VV 
usingXX 
(XX 
	TcpClientXX  
tcpConnXX! (
=XX) *
newXX+ .
	TcpClientXX/ 8
(XX8 9
$strXX9 K
,XXK L
$numXXM R
)XXR S
)XXS T
{YY 
using[[ 
([[ 
StreamReader[[ '
sr[[( *
=[[+ ,
new[[- 0
StreamReader[[1 =
([[= >
tcpConn[[> E
.[[E F
	GetStream[[F O
([[O P
)[[P Q
)[[Q R
)[[R S
{\\ 
data^^ 
=^^ 
sr^^ !
.^^! "
ReadLine^^" *
(^^* +
)^^+ ,
;^^, -
}__ 
}`` 
}aa 
catchbb 
(bb 
IOExceptionbb 
exceptIObb '
)bb' (
{cc 
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd "
.dd" #
LogLeveldd# +
.dd+ ,
Warndd, 0
,dd0 1
exceptIOdd2 :
,dd: ;
$strdd< W
)ddW X
;ddX Y
}ee 
}ff 	
stringgg 
[gg 
]gg 
	dataArraygg 
=gg 
newgg  
stringgg! '
[gg' (
$numgg( )
]gg) *
;gg* +
	dataArrayhh 
[hh 
$numhh 
]hh 
=hh 
datahh 
;hh K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_66bii G
.iiG H
GoodB2GSinkiiH S
(iiS T
	dataArrayiiT ]
)ii_ `
;ii` a
}jj 
}ll 
}mm 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_66b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_66b E
{ 
public 

static 
void 
BadSink 
( 
string %
[% &
]& '
	dataArray( 1
)2 3
{ 
string 
data 
= 
	dataArray 
[  
$num  !
]! "
;" #
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
string--# )
[--) *
]--* +
	dataArray--, 5
)--6 7
{.. 
string// 
data// 
=// 
	dataArray// 
[//  
$num//  !
]//! "
;//" #
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
string<<# )
[<<) *
]<<* +
	dataArray<<, 5
)<<6 7
{== 
string>> 
data>> 
=>> 
	dataArray>> 
[>>  
$num>>  !
]>>! "
;>>" #
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK É*
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_67a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_67a E
:F G
AbstractTestCaseH X
{ 
public 

class 
	Container 
{   
public!! 
string!! 
containerOne!! "
;!!" #
}"" 
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
string&& 
data&& 
;&& 
data'' 
='' 
$str'' 
;'' 
{)) 	
try** 
{++ 
using-- 
(-- 
	TcpClient--  
tcpConn--! (
=--) *
new--+ .
	TcpClient--/ 8
(--8 9
$str--9 K
,--K L
$num--M R
)--R S
)--S T
{.. 
using00 
(00 
StreamReader00 '
sr00( *
=00+ ,
new00- 0
StreamReader001 =
(00= >
tcpConn00> E
.00E F
	GetStream00F O
(00O P
)00P Q
)00Q R
)00R S
{11 
data33 
=33 
sr33 !
.33! "
ReadLine33" *
(33* +
)33+ ,
;33, -
}44 
}55 
}66 
catch77 
(77 
IOException77 
exceptIO77 '
)77' (
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
exceptIO992 :
,99: ;
$str99< W
)99W X
;99X Y
}:: 
};; 	
	Container<< 
dataContainer<< 
=<<  !
new<<" %
	Container<<& /
(<</ 0
)<<0 1
;<<1 2
dataContainer== 
.== 
containerOne== "
===# $
data==% )
;==) *K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_67b>> G
.>>G H
BadSink>>H O
(>>O P
dataContainer>>P ]
)>>_ `
;>>` a
}?? 
publicBB 

overrideBB 
voidBB 
GoodBB 
(BB 
)BB 
{CC 
GoodG2BDD 
(DD 
)DD 
;DD 
GoodB2GEE 
(EE 
)EE 
;EE 
}FF 
privateII 
staticII 
voidII 
GoodG2BII 
(II  
)II  !
{JJ 
stringKK 
dataKK 
;KK 
dataMM 
=MM 
$strMM 
;MM 
	ContainerNN 
dataContainerNN 
=NN  !
newNN" %
	ContainerNN& /
(NN/ 0
)NN0 1
;NN1 2
dataContainerOO 
.OO 
containerOneOO "
=OO# $
dataOO% )
;OO) *K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_67bPP G
.PPG H
GoodG2BSinkPPH S
(PPS T
dataContainerPPT a
)PPc d
;PPd e
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
stringVV 
dataVV 
;VV 
dataWW 
=WW 
$strWW 
;WW 
{YY 	
tryZZ 
{[[ 
using]] 
(]] 
	TcpClient]]  
tcpConn]]! (
=]]) *
new]]+ .
	TcpClient]]/ 8
(]]8 9
$str]]9 K
,]]K L
$num]]M R
)]]R S
)]]S T
{^^ 
using`` 
(`` 
StreamReader`` '
sr``( *
=``+ ,
new``- 0
StreamReader``1 =
(``= >
tcpConn``> E
.``E F
	GetStream``F O
(``O P
)``P Q
)``Q R
)``R S
{aa 
datacc 
=cc 
srcc !
.cc! "
ReadLinecc" *
(cc* +
)cc+ ,
;cc, -
}dd 
}ee 
}ff 
catchgg 
(gg 
IOExceptiongg 
exceptIOgg '
)gg' (
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptIOii2 :
,ii: ;
$strii< W
)iiW X
;iiX Y
}jj 
}kk 	
	Containerll 
dataContainerll 
=ll  !
newll" %
	Containerll& /
(ll/ 0
)ll0 1
;ll1 2
dataContainermm 
.mm 
containerOnemm "
=mm# $
datamm% )
;mm) *K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_67bnn G
.nnG H
GoodB2GSinknnH S
(nnS T
dataContainernnT a
)nnc d
;nnd e
}oo 
}qq 
}rr Ì
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_67b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_67b E
{ 
public 

static 
void 
BadSink 
( K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_67a ^
.^ _
	Container_ h
dataContaineri v
)w x
{ 
string 
data 
= 
dataContainer #
.# $
containerOne$ 0
;0 1
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_67a--# b
.--b c
	Container--c l
dataContainer--m z
)--{ |
{.. 
string// 
data// 
=// 
dataContainer// #
.//# $
containerOne//$ 0
;//0 1
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_67a<<# b
.<<b c
	Container<<c l
dataContainer<<m z
)<<{ |
{== 
string>> 
data>> 
=>> 
dataContainer>> #
.>># $
containerOne>>$ 0
;>>0 1
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK ë!
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_68a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_68a E
:F G
AbstractTestCaseH X
{ 
public 

static 
string 
data 
; 
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
data## 
=## 
$str## 
;## 
{%% 	
try&& 
{'' 
using)) 
()) 
	TcpClient))  
tcpConn))! (
=))) *
new))+ .
	TcpClient))/ 8
())8 9
$str))9 K
,))K L
$num))M R
)))R S
)))S T
{** 
using,, 
(,, 
StreamReader,, '
sr,,( *
=,,+ ,
new,,- 0
StreamReader,,1 =
(,,= >
tcpConn,,> E
.,,E F
	GetStream,,F O
(,,O P
),,P Q
),,Q R
),,R S
{-- 
data// 
=// 
sr// !
.//! "
ReadLine//" *
(//* +
)//+ ,
;//, -
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_68b88 G
.88G H
BadSink88H O
(88O P
)88P Q
;88Q R
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
)<< 
{== 
GoodG2B>> 
(>> 
)>> 
;>> 
GoodB2G?? 
(?? 
)?? 
;?? 
}@@ 
privateCC 
staticCC 
voidCC 
GoodG2BCC 
(CC  
)CC  !
{DD 
dataFF 
=FF 
$strFF 
;FF K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_68bGG G
.GGG H
GoodG2BSinkGGH S
(GGS T
)GGT U
;GGU V
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
)KK  !
{LL 
dataMM 
=MM 
$strMM 
;MM 
{OO 	
tryPP 
{QQ 
usingSS 
(SS 
	TcpClientSS  
tcpConnSS! (
=SS) *
newSS+ .
	TcpClientSS/ 8
(SS8 9
$strSS9 K
,SSK L
$numSSM R
)SSR S
)SSS T
{TT 
usingVV 
(VV 
StreamReaderVV '
srVV( *
=VV+ ,
newVV- 0
StreamReaderVV1 =
(VV= >
tcpConnVV> E
.VVE F
	GetStreamVVF O
(VVO P
)VVP Q
)VVQ R
)VVR S
{WW 
dataYY 
=YY 
srYY !
.YY! "
ReadLineYY" *
(YY* +
)YY+ ,
;YY, -
}ZZ 
}[[ 
}\\ 
catch]] 
(]] 
IOException]] 
exceptIO]] '
)]]' (
{^^ 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
exceptIO__2 :
,__: ;
$str__< W
)__W X
;__X Y
}`` 
}aa 	K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_68bbb G
.bbG H
GoodB2GSinkbbH S
(bbS T
)bbT U
;bbU V
}cc 
}ee 
}ff  
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_68b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_68b E
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
string 
data 
= K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_68a U
.U V
dataV Z
;Z [
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
)--# $
{.. 
string// 
data// 
=// K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_68a// U
.//U V
data//V Z
;//Z [
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
)<<# $
{== 
string>> 
data>> 
=>> K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_68a>> U
.>>U V
data>>V Z
;>>Z [
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK ù#
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_71a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_71a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
	TcpClient((  
tcpConn((! (
=(() *
new((+ .
	TcpClient((/ 8
(((8 9
$str((9 K
,((K L
$num((M R
)((R S
)((S T
{)) 
using++ 
(++ 
StreamReader++ '
sr++( *
=+++ ,
new++- 0
StreamReader++1 =
(++= >
tcpConn++> E
.++E F
	GetStream++F O
(++O P
)++P Q
)++Q R
)++R S
{,, 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_71b77 G
.77G H
BadSink77H O
(77O P
(77P Q
Object77Q W
)77W X
data77X \
)77^ _
;77_ `
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
staticBB 
voidBB 
GoodG2BBB 
(BB  
)BB  !
{CC 
stringDD 
dataDD 
;DD 
dataFF 
=FF 
$strFF 
;FF K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_71bGG G
.GGG H
GoodG2BSinkGGH S
(GGS T
(GGT U
ObjectGGU [
)GG[ \
dataGG\ `
)GGb c
;GGc d
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
)KK  !
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{PP 	
tryQQ 
{RR 
usingTT 
(TT 
	TcpClientTT  
tcpConnTT! (
=TT) *
newTT+ .
	TcpClientTT/ 8
(TT8 9
$strTT9 K
,TTK L
$numTTM R
)TTR S
)TTS T
{UU 
usingWW 
(WW 
StreamReaderWW '
srWW( *
=WW+ ,
newWW- 0
StreamReaderWW1 =
(WW= >
tcpConnWW> E
.WWE F
	GetStreamWWF O
(WWO P
)WWP Q
)WWQ R
)WWR S
{XX 
dataZZ 
=ZZ 
srZZ !
.ZZ! "
ReadLineZZ" *
(ZZ* +
)ZZ+ ,
;ZZ, -
}[[ 
}\\ 
}]] 
catch^^ 
(^^ 
IOException^^ 
exceptIO^^ '
)^^' (
{__ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptIO``2 :
,``: ;
$str``< W
)``W X
;``X Y
}aa 
}bb 	K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_71bcc G
.ccG H
GoodB2GSinkccH S
(ccS T
(ccT U
ObjectccU [
)cc[ \
datacc\ `
)ccb c
;ccc d
}dd 
}ff 
}gg ¸
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_71b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_71b E
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
string 
data 
= 
( 
string 
) 

dataObject (
;( )
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
Object..# )

dataObject..* 4
)..5 6
{// 
string00 
data00 
=00 
(00 
string00 
)00 

dataObject00 (
;00( )
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
Object==# )

dataObject==* 4
)==5 6
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 

dataObject?? (
;??( )
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL é1
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_72a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_72a E
:F G
AbstractTestCaseH X
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
try&& 
{'' 
using)) 
()) 
	TcpClient))  
tcpConn))! (
=))) *
new))+ .
	TcpClient))/ 8
())8 9
$str))9 K
,))K L
$num))M R
)))R S
)))S T
{** 
using,, 
(,, 
StreamReader,, '
sr,,( *
=,,+ ,
new,,- 0
StreamReader,,1 =
(,,= >
tcpConn,,> E
.,,E F
	GetStream,,F O
(,,O P
),,P Q
),,Q R
),,R S
{-- 
data// 
=// 
sr// !
.//! "
ReadLine//" *
(//* +
)//+ ,
;//, -
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	
	Hashtable88 
dataHashtable88 
=88  !
new88" %
	Hashtable88& /
(88/ 0
$num880 1
)881 2
;882 3
dataHashtable99 
.99 
Add99 
(99 
$num99 
,99 
data99 !
)99! "
;99" #
dataHashtable:: 
.:: 
Add:: 
(:: 
$num:: 
,:: 
data:: !
)::! "
;::" #
dataHashtable;; 
.;; 
Add;; 
(;; 
$num;; 
,;; 
data;; !
);;! "
;;;" #K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_72b<< G
.<<G H
BadSink<<H O
(<<O P
dataHashtable<<P ]
)<<_ `
;<<` a
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK 
	HashtableLL 
dataHashtableLL 
=LL  !
newLL" %
	HashtableLL& /
(LL/ 0
$numLL0 1
)LL1 2
;LL2 3
dataHashtableMM 
.MM 
AddMM 
(MM 
$numMM 
,MM 
dataMM !
)MM! "
;MM" #
dataHashtableNN 
.NN 
AddNN 
(NN 
$numNN 
,NN 
dataNN !
)NN! "
;NN" #
dataHashtableOO 
.OO 
AddOO 
(OO 
$numOO 
,OO 
dataOO !
)OO! "
;OO" #K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_72bPP G
.PPG H
GoodG2BSinkPPH S
(PPS T
dataHashtablePPT a
)PPc d
;PPd e
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
stringVV 
dataVV 
;VV 
dataWW 
=WW 
$strWW 
;WW 
{YY 	
tryZZ 
{[[ 
using]] 
(]] 
	TcpClient]]  
tcpConn]]! (
=]]) *
new]]+ .
	TcpClient]]/ 8
(]]8 9
$str]]9 K
,]]K L
$num]]M R
)]]R S
)]]S T
{^^ 
using`` 
(`` 
StreamReader`` '
sr``( *
=``+ ,
new``- 0
StreamReader``1 =
(``= >
tcpConn``> E
.``E F
	GetStream``F O
(``O P
)``P Q
)``Q R
)``R S
{aa 
datacc 
=cc 
srcc !
.cc! "
ReadLinecc" *
(cc* +
)cc+ ,
;cc, -
}dd 
}ee 
}ff 
catchgg 
(gg 
IOExceptiongg 
exceptIOgg '
)gg' (
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptIOii2 :
,ii: ;
$strii< W
)iiW X
;iiX Y
}jj 
}kk 	
	Hashtablell 
dataHashtablell 
=ll  !
newll" %
	Hashtablell& /
(ll/ 0
$numll0 1
)ll1 2
;ll2 3
dataHashtablemm 
.mm 
Addmm 
(mm 
$nummm 
,mm 
datamm !
)mm! "
;mm" #
dataHashtablenn 
.nn 
Addnn 
(nn 
$numnn 
,nn 
datann !
)nn! "
;nn" #
dataHashtableoo 
.oo 
Addoo 
(oo 
$numoo 
,oo 
dataoo !
)oo! "
;oo" #K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_72bpp G
.ppG H
GoodB2GSinkppH S
(ppS T
dataHashtableppT a
)ppc d
;ppd e
}qq 
}ss 
}tt ã
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_72b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_72b E
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
string 
data 
= 
( 
string 
) 
dataHashtable ,
[, -
$num- .
]. /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
	Hashtable..# ,
dataHashtable..- :
)..; <
{// 
string00 
data00 
=00 
(00 
string00 
)00 
dataHashtable00 ,
[00, -
$num00- .
]00. /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
	Hashtable==# ,
dataHashtable==- :
)==; <
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 
dataHashtable?? ,
[??, -
$num??- .
]??. /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ï1
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_73a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_73a E
:F G
AbstractTestCaseH X
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
try&& 
{'' 
using)) 
()) 
	TcpClient))  
tcpConn))! (
=))) *
new))+ .
	TcpClient))/ 8
())8 9
$str))9 K
,))K L
$num))M R
)))R S
)))S T
{** 
using,, 
(,, 
StreamReader,, '
sr,,( *
=,,+ ,
new,,- 0
StreamReader,,1 =
(,,= >
tcpConn,,> E
.,,E F
	GetStream,,F O
(,,O P
),,P Q
),,Q R
),,R S
{-- 
data// 
=// 
sr// !
.//! "
ReadLine//" *
(//* +
)//+ ,
;//, -
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	

LinkedList88 
<88 
string88 
>88 
dataLinkedList88 )
=88* +
new88, /

LinkedList880 :
<88: ;
string88; A
>88A B
(88B C
)88C D
;88D E
dataLinkedList99 
.99 
AddLast99 
(99 
data99 #
)99# $
;99$ %
dataLinkedList:: 
.:: 
AddLast:: 
(:: 
data:: #
)::# $
;::$ %
dataLinkedList;; 
.;; 
AddLast;; 
(;; 
data;; #
);;# $
;;;$ %K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_73b<< G
.<<G H
BadSink<<H O
(<<O P
dataLinkedList<<P ^
)<<` a
;<<a b
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK 

LinkedListLL 
<LL 
stringLL 
>LL 
dataLinkedListLL )
=LL* +
newLL, /

LinkedListLL0 :
<LL: ;
stringLL; A
>LLA B
(LLB C
)LLC D
;LLD E
dataLinkedListMM 
.MM 
AddLastMM 
(MM 
dataMM #
)MM# $
;MM$ %
dataLinkedListNN 
.NN 
AddLastNN 
(NN 
dataNN #
)NN# $
;NN$ %
dataLinkedListOO 
.OO 
AddLastOO 
(OO 
dataOO #
)OO# $
;OO$ %K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_73bPP G
.PPG H
GoodG2BSinkPPH S
(PPS T
dataLinkedListPPT b
)PPd e
;PPe f
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
stringVV 
dataVV 
;VV 
dataWW 
=WW 
$strWW 
;WW 
{YY 	
tryZZ 
{[[ 
using]] 
(]] 
	TcpClient]]  
tcpConn]]! (
=]]) *
new]]+ .
	TcpClient]]/ 8
(]]8 9
$str]]9 K
,]]K L
$num]]M R
)]]R S
)]]S T
{^^ 
using`` 
(`` 
StreamReader`` '
sr``( *
=``+ ,
new``- 0
StreamReader``1 =
(``= >
tcpConn``> E
.``E F
	GetStream``F O
(``O P
)``P Q
)``Q R
)``R S
{aa 
datacc 
=cc 
srcc !
.cc! "
ReadLinecc" *
(cc* +
)cc+ ,
;cc, -
}dd 
}ee 
}ff 
catchgg 
(gg 
IOExceptiongg 
exceptIOgg '
)gg' (
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptIOii2 :
,ii: ;
$strii< W
)iiW X
;iiX Y
}jj 
}kk 	

LinkedListll 
<ll 
stringll 
>ll 
dataLinkedListll )
=ll* +
newll, /

LinkedListll0 :
<ll: ;
stringll; A
>llA B
(llB C
)llC D
;llD E
dataLinkedListmm 
.mm 
AddLastmm 
(mm 
datamm #
)mm# $
;mm$ %
dataLinkedListnn 
.nn 
AddLastnn 
(nn 
datann #
)nn# $
;nn$ %
dataLinkedListoo 
.oo 
AddLastoo 
(oo 
dataoo #
)oo# $
;oo$ %K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_73bpp G
.ppG H
GoodB2GSinkppH S
(ppS T
dataLinkedListppT b
)ppd e
;ppe f
}qq 
}ss 
}tt ¥
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_73b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_73b E
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
string* 0
>0 1
dataLinkedList2 @
)A B
{ 
string 
data 
= 
dataLinkedList $
.$ %
Last% )
.) *
Value* /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #

LinkedList..# -
<..- .
string... 4
>..4 5
dataLinkedList..6 D
)..E F
{// 
string00 
data00 
=00 
dataLinkedList00 $
.00$ %
Last00% )
.00) *
Value00* /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

LinkedList==# -
<==- .
string==. 4
>==4 5
dataLinkedList==6 D
)==E F
{>> 
string?? 
data?? 
=?? 
dataLinkedList?? $
.??$ %
Last??% )
.??) *
Value??* /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ´5
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_74a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_74a E
:F G
AbstractTestCaseH X
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
try&& 
{'' 
using)) 
()) 
	TcpClient))  
tcpConn))! (
=))) *
new))+ .
	TcpClient))/ 8
())8 9
$str))9 K
,))K L
$num))M R
)))R S
)))S T
{** 
using,, 
(,, 
StreamReader,, '
sr,,( *
=,,+ ,
new,,- 0
StreamReader,,1 =
(,,= >
tcpConn,,> E
.,,E F
	GetStream,,F O
(,,O P
),,P Q
),,Q R
),,R S
{-- 
data// 
=// 
sr// !
.//! "
ReadLine//" *
(//* +
)//+ ,
;//, -
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	

Dictionary88 
<88 
int88 
,88 
string88 
>88 
dataDictionary88 -
=88. /
new880 3

Dictionary884 >
<88> ?
int88? B
,88B C
string88C I
>88I J
(88J K
)88K L
;88L M
dataDictionary99 
.99 
Add99 
(99 
$num99 
,99 
data99 "
)99" #
;99# $
dataDictionary:: 
.:: 
Add:: 
(:: 
$num:: 
,:: 
data:: "
)::" #
;::# $
dataDictionary;; 
.;; 
Add;; 
(;; 
$num;; 
,;; 
data;; "
);;" #
;;;# $K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_74b<< G
.<<G H
BadSink<<H O
(<<O P
dataDictionary<<P ^
)<<` a
;<<a b
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK 

DictionaryLL 
<LL 
intLL 
,LL 
stringLL 
>LL 
dataDictionaryLL -
=LL. /
newLL0 3

DictionaryLL4 >
<LL> ?
intLL? B
,LLB C
stringLLC I
>LLI J
(LLJ K
)LLK L
;LLL M
dataDictionaryMM 
.MM 
AddMM 
(MM 
$numMM 
,MM 
dataMM "
)MM" #
;MM# $
dataDictionaryNN 
.NN 
AddNN 
(NN 
$numNN 
,NN 
dataNN "
)NN" #
;NN# $
dataDictionaryOO 
.OO 
AddOO 
(OO 
$numOO 
,OO 
dataOO "
)OO" #
;OO# $K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_74bPP G
.PPG H
GoodG2BSinkPPH S
(PPS T
dataDictionaryPPT b
)PPd e
;PPe f
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
stringVV 
dataVV 
;VV 
dataWW 
=WW 
$strWW 
;WW 
{YY 	
tryZZ 
{[[ 
using]] 
(]] 
	TcpClient]]  
tcpConn]]! (
=]]) *
new]]+ .
	TcpClient]]/ 8
(]]8 9
$str]]9 K
,]]K L
$num]]M R
)]]R S
)]]S T
{^^ 
using`` 
(`` 
StreamReader`` '
sr``( *
=``+ ,
new``- 0
StreamReader``1 =
(``= >
tcpConn``> E
.``E F
	GetStream``F O
(``O P
)``P Q
)``Q R
)``R S
{aa 
datacc 
=cc 
srcc !
.cc! "
ReadLinecc" *
(cc* +
)cc+ ,
;cc, -
}dd 
}ee 
}ff 
catchgg 
(gg 
IOExceptiongg 
exceptIOgg '
)gg' (
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptIOii2 :
,ii: ;
$strii< W
)iiW X
;iiX Y
}jj 
}kk 	

Dictionaryll 
<ll 
intll 
,ll 
stringll 
>ll 
dataDictionaryll -
=ll. /
newll0 3

Dictionaryll4 >
<ll> ?
intll? B
,llB C
stringllC I
>llI J
(llJ K
)llK L
;llL M
dataDictionarymm 
.mm 
Addmm 
(mm 
$nummm 
,mm 
datamm "
)mm" #
;mm# $
dataDictionarynn 
.nn 
Addnn 
(nn 
$numnn 
,nn 
datann "
)nn" #
;nn# $
dataDictionaryoo 
.oo 
Addoo 
(oo 
$numoo 
,oo 
dataoo "
)oo" #
;oo# $K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_74bpp G
.ppG H
GoodB2GSinkppH S
(ppS T
dataDictionaryppT b
)ppd e
;ppe f
}qq 
}ss 
}tt Ì
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_74b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_74b E
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
string. 4
>4 5
dataDictionary6 D
)E F
{ 
string 
data 
= 
dataDictionary $
[$ %
$num% &
]& '
;' (
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. #
(..# $

Dictionary..$ .
<... /
int../ 2
,..2 3
string..3 9
>..9 :
dataDictionary..; I
)..J K
{// 
string00 
data00 
=00 
dataDictionary00 $
[00$ %
$num00% &
]00& '
;00' (
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

Dictionary==# -
<==- .
int==. 1
,==1 2
string==2 8
>==8 9
dataDictionary==: H
)==I J
{>> 
string?? 
data?? 
=?? 
dataDictionary?? $
[??$ %
$num??% &
]??& '
;??' (
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ñK
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_75a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_75a E
:F G
AbstractTestCaseH X
{ 
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 	
try'' 
{(( 
using** 
(** 
	TcpClient**  
tcpConn**! (
=**) *
new**+ .
	TcpClient**/ 8
(**8 9
$str**9 K
,**K L
$num**M R
)**R S
)**S T
{++ 
using-- 
(-- 
StreamReader-- '
sr--( *
=--+ ,
new--- 0
StreamReader--1 =
(--= >
tcpConn--> E
.--E F
	GetStream--F O
(--O P
)--P Q
)--Q R
)--R S
{.. 
data00 
=00 
sr00 !
.00! "
ReadLine00" *
(00* +
)00+ ,
;00, -
}11 
}22 
}33 
catch44 
(44 
IOException44 
exceptIO44 '
)44' (
{55 
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 "
.66" #
LogLevel66# +
.66+ ,
Warn66, 0
,660 1
exceptIO662 :
,66: ;
$str66< W
)66W X
;66X Y
}77 
}88 	
byte:: 
[:: 
]:: 
dataSerialized:: 
=:: 
null::  $
;::$ %
try;; 
{<< 	
BinaryFormatter== 
bf== 
===  
new==! $
BinaryFormatter==% 4
(==4 5
)==5 6
;==6 7
using>> 
(>> 
var>> 
ms>> 
=>> 
new>> 
MemoryStream>>  ,
(>>, -
)>>- .
)>>. /
{?? 
bf@@ 
.@@ 
	Serialize@@ 
(@@ 
ms@@ 
,@@  
data@@! %
)@@% &
;@@& '
dataSerializedAA 
=AA  
msAA! #
.AA# $
ToArrayAA$ +
(AA+ ,
)AA, -
;AA- .
}BB K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_75bCC K
.CCK L
BadSinkCCL S
(CCS T
dataSerializedCCT b
)CCd e
;CCe f
}DD 	
catchEE 
(EE "
SerializationExceptionEE %
exceptSerializeEE& 5
)EE5 6
{FF 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
$strGG. X
,GGX Y
exceptSerializeGGZ i
)GGi j
;GGj k
}HH 	
}II 
publicLL 

overrideLL 
voidLL 
GoodLL 
(LL 
)LL 
{MM 
GoodG2BNN 
(NN 
)NN 
;NN 
GoodB2GOO 
(OO 
)OO 
;OO 
}PP 
privateSS 
staticSS 
voidSS 
GoodG2BSS 
(SS  
)SS  !
{TT 
stringUU 
dataUU 
;UU 
dataVV 
=VV 
$strVV 
;VV 
{XX 	
tryYY 
{ZZ 
using\\ 
(\\ 
	TcpClient\\  
tcpConn\\! (
=\\) *
new\\+ .
	TcpClient\\/ 8
(\\8 9
$str\\9 K
,\\K L
$num\\M R
)\\R S
)\\S T
{]] 
using__ 
(__ 
StreamReader__ '
sr__( *
=__+ ,
new__- 0
StreamReader__1 =
(__= >
tcpConn__> E
.__E F
	GetStream__F O
(__O P
)__P Q
)__Q R
)__R S
{`` 
databb 
=bb 
srbb !
.bb! "
ReadLinebb" *
(bb* +
)bb+ ,
;bb, -
}cc 
}dd 
}ee 
catchff 
(ff 
IOExceptionff 
exceptIOff '
)ff' (
{gg 
IOhh 
.hh 
Loggerhh 
.hh 
Loghh 
(hh 
NLoghh "
.hh" #
LogLevelhh# +
.hh+ ,
Warnhh, 0
,hh0 1
exceptIOhh2 :
,hh: ;
$strhh< W
)hhW X
;hhX Y
}ii 
}jj 	
bytell 
[ll 
]ll 
dataSerializedll 
=ll 
nullll  $
;ll$ %
trymm 
{nn 	
BinaryFormatteroo 
bfoo 
=oo  
newoo! $
BinaryFormatteroo% 4
(oo4 5
)oo5 6
;oo6 7
usingpp 
(pp 
varpp 
mspp 
=pp 
newpp 
MemoryStreampp  ,
(pp, -
)pp- .
)pp. /
{qq 
bfrr 
.rr 
	Serializerr 
(rr 
msrr 
,rr  
datarr! %
)rr% &
;rr& '
dataSerializedss 
=ss  
msss! #
.ss# $
ToArrayss$ +
(ss+ ,
)ss, -
;ss- .
}tt K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_75buu K
.uuK L
GoodG2BSinkuuL W
(uuW X
dataSerializeduuX f
)uuh i
;uui j
}vv 	
catchww 
(ww "
SerializationExceptionww %
exceptSerializeww& 5
)ww5 6
{xx 	
IOyy 
.yy 
Loggeryy 
.yy 
Logyy 
(yy 
NLogyy 
.yy 
LogLevelyy '
.yy' (
Warnyy( ,
,yy, -
$stryy. X
,yyX Y
exceptSerializeyyZ i
)yyi j
;yyj k
}zz 	
}{{ 
private~~ 
static~~ 
void~~ 
GoodB2G~~ 
(~~  
)~~  !
{ 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
{
 	
try
 
{
 
using
 
(
 
	TcpClient
  
tcpConn
! (
=
) *
new
+ .
	TcpClient
/ 8
(
8 9
$str
9 K
,
K L
$num
M R
)
R S
)
S T
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
tcpConn
> E
.
E F
	GetStream
F O
(
O P
)
P Q
)
Q R
)
R S
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
}
 	
byte
 
[
 
]
 
dataSerialized
 
=
 
null
  $
;
$ %
try
 
{
 	
BinaryFormatter
 
bf
 
=
  
new
! $
BinaryFormatter
% 4
(
4 5
)
5 6
;
6 7
using
 
(
 
var
 
ms
 
=
 
new
 
MemoryStream
  ,
(
, -
)
- .
)
. /
{
 
bf
 
.
 
	Serialize
 
(
 
ms
 
,
  
data
! %
)
% &
;
& '
dataSerialized
 
=
  
ms
! #
.
# $
ToArray
$ +
(
+ ,
)
, -
;
- .
}
 M
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_75b
   K
.
  K L
GoodB2GSink
  L W
(
  W X
dataSerialized
  X f
)
  h i
;
  i j
}
¡¡ 	
catch
¢¢ 
(
¢¢ $
SerializationException
¢¢ %
exceptSerialize
¢¢& 5
)
¢¢5 6
{
££ 	
IO
¤¤ 
.
¤¤ 
Logger
¤¤ 
.
¤¤ 
Log
¤¤ 
(
¤¤ 
NLog
¤¤ 
.
¤¤ 
LogLevel
¤¤ '
.
¤¤' (
Warn
¤¤( ,
,
¤¤, -
$str
¤¤. X
,
¤¤X Y
exceptSerialize
¤¤Z i
)
¤¤i j
;
¤¤j k
}
¥¥ 	
}
¦¦ 
}¨¨ 
}©© è<
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_75b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_75b E
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
string## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
string)) 
))) 
binForm)) &
.))& '
Deserialize))' 2
())2 3
	memStream))3 <
)))< =
;))= >
}** 
try++ 
{,, 
int-- 
value-- 
=-- 
int-- 
.--  
Parse--  %
(--% &
data--& *
)--* +
;--+ ,
}.. 
catch// 
(// 
FormatException// "
exceptNumberFormat//# 5
)//5 6
{00 
IO22 
.22 
Logger22 
.22 
Log22 
(22 
NLog22 "
.22" #
LogLevel22# +
.22+ ,
Warn22, 0
,220 1
exceptNumberFormat222 D
,22D E
$str22F `
+22a b
data22c g
)22g h
;22h i
}33 
}44 	
catch55 
(55 "
SerializationException55 %
exceptSerialize55& 5
)555 6
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. Y
,77Y Z
exceptSerialize77[ j
)77j k
;77k l
}88 	
}99 
public>> 

static>> 
void>> 
GoodG2BSink>> "
(>>" #
byte>># '
[>>' (
]>>( )
dataSerialized>>* 8
)>>9 :
{?? 
try@@ 
{AA 	
stringBB 
dataBB 
;BB 
varCC 
binFormCC 
=CC 
newCC 
BinaryFormatterCC -
(CC- .
)CC. /
;CC/ 0
usingDD 
(DD 
varDD 
	memStreamDD  
=DD! "
newDD# &
MemoryStreamDD' 3
(DD3 4
)DD4 5
)DD5 6
{EE 
	memStreamFF 
.FF 
WriteFF 
(FF  
dataSerializedFF  .
,FF. /
$numFF0 1
,FF1 2
dataSerializedFF3 A
.FFA B
LengthFFB H
)FFH I
;FFI J
	memStreamGG 
.GG 
SeekGG 
(GG 
$numGG  
,GG  !

SeekOriginGG" ,
.GG, -
BeginGG- 2
)GG2 3
;GG3 4
dataHH 
=HH 
(HH 
stringHH 
)HH 
binFormHH &
.HH& '
DeserializeHH' 2
(HH2 3
	memStreamHH3 <
)HH< =
;HH= >
}II 
tryJJ 
{KK 
intLL 
valueLL 
=LL 
intLL 
.LL  
ParseLL  %
(LL% &
dataLL& *
)LL* +
;LL+ ,
}MM 
catchNN 
(NN 
FormatExceptionNN "
exceptNumberFormatNN# 5
)NN5 6
{OO 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptNumberFormatQQ2 D
,QQD E
$strQQF `
+QQa b
dataQQc g
)QQg h
;QQh i
}RR 
}SS 	
catchTT 
(TT "
SerializationExceptionTT %
exceptSerializeTT& 5
)TT5 6
{UU 	
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV 
.VV 
LogLevelVV '
.VV' (
WarnVV( ,
,VV, -
$strVV. Y
,VVY Z
exceptSerializeVV[ j
)VVj k
;VVk l
}WW 	
}XX 
public[[ 

static[[ 
void[[ 
GoodB2GSink[[ "
([[" #
byte[[# '
[[[' (
][[( )
dataSerialized[[* 8
)[[9 :
{\\ 
try]] 
{^^ 	
string__ 
data__ 
;__ 
var`` 
binForm`` 
=`` 
new`` 
BinaryFormatter`` -
(``- .
)``. /
;``/ 0
usingaa 
(aa 
varaa 
	memStreamaa  
=aa! "
newaa# &
MemoryStreamaa' 3
(aa3 4
)aa4 5
)aa5 6
{bb 
	memStreamcc 
.cc 
Writecc 
(cc  
dataSerializedcc  .
,cc. /
$numcc0 1
,cc1 2
dataSerializedcc3 A
.ccA B
LengthccB H
)ccH I
;ccI J
	memStreamdd 
.dd 
Seekdd 
(dd 
$numdd  
,dd  !

SeekOrigindd" ,
.dd, -
Begindd- 2
)dd2 3
;dd3 4
dataee 
=ee 
(ee 
stringee 
)ee 
binFormee &
.ee& '
Deserializeee' 2
(ee2 3
	memStreamee3 <
)ee< =
;ee= >
}ff 
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF j
+nnk l
exceptNumberFormatnnm 
)	nn 
;
nn 
}oo 
}pp 	
catchqq 
(qq "
SerializationExceptionqq %
exceptSerializeqq& 5
)qq5 6
{rr 	
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss 
.ss 
LogLevelss '
.ss' (
Warnss( ,
,ss, -
$strss. Y
,ssY Z
exceptSerializess[ j
)ssj k
;ssk l
}tt 	
}uu 
}ww 
}xx À'
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
	TcpClient((  
tcpConn((! (
=(() *
new((+ .
	TcpClient((/ 8
(((8 9
$str((9 K
,((K L
$num((M R
)((R S
)((S T
{)) 
using++ 
(++ 
StreamReader++ '
sr++( *
=+++ ,
new++- 0
StreamReader++1 =
(++= >
tcpConn++> E
.++E F
	GetStream++F O
(++O P
)++P Q
)++Q R
)++R S
{,, 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_base77 K

baseObject77L V
=77W X
new77Y \O
BCWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_bad	77] 
(
77  
)
77  ¡
;
77¡ ¢

baseObject88 
.88 
Action88 
(88 
data88 
)88  
;88  !
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
)<< 
{== 
GoodG2B>> 
(>> 
)>> 
;>> 
GoodB2G?? 
(?? 
)?? 
;?? 
}@@ 
privateCC 
voidCC 
GoodG2BCC 
(CC 
)CC 
{DD 
stringEE 
dataEE 
;EE 
dataGG 
=GG 
$strGG 
;GG O
CCWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_baseHH K

baseObjectHHL V
=HHW X
newHHY \S
FCWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_goodG2B	HH] £
(
HH£ ¤
)
HH¤ ¥
;
HH¥ ¦

baseObjectII 
.II 
ActionII 
(II 
dataII 
)II  
;II  !
}JJ 
privateMM 
voidMM 
GoodB2GMM 
(MM 
)MM 
{NN 
stringOO 
dataOO 
;OO 
dataPP 
=PP 
$strPP 
;PP 
{RR 	
trySS 
{TT 
usingVV 
(VV 
	TcpClientVV  
tcpConnVV! (
=VV) *
newVV+ .
	TcpClientVV/ 8
(VV8 9
$strVV9 K
,VVK L
$numVVM R
)VVR S
)VVS T
{WW 
usingYY 
(YY 
StreamReaderYY '
srYY( *
=YY+ ,
newYY- 0
StreamReaderYY1 =
(YY= >
tcpConnYY> E
.YYE F
	GetStreamYYF O
(YYO P
)YYP Q
)YYQ R
)YYR S
{ZZ 
data\\ 
=\\ 
sr\\ !
.\\! "
ReadLine\\" *
(\\* +
)\\+ ,
;\\, -
}]] 
}^^ 
}__ 
catch`` 
(`` 
IOException`` 
exceptIO`` '
)``' (
{aa 
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb "
.bb" #
LogLevelbb# +
.bb+ ,
Warnbb, 0
,bb0 1
exceptIObb2 :
,bb: ;
$strbb< W
)bbW X
;bbX Y
}cc 
}dd 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_baseee K

baseObjecteeL V
=eeW X
neweeY \S
FCWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_goodB2G	ee] £
(
ee£ ¤
)
ee¤ ¥
;
ee¥ ¦

baseObjectff 
.ff 
Actionff 
(ff 
dataff 
)ff  
;ff  !
}gg 
}ii 
}jj 
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_bad.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_bad H
:I JP
CCWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_base	K 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
}(( 
})) 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_base.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
abstract 
class	 O
CCWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_base R
{ 
public 

abstract 
void 
Action 
(  
string  &
data' +
), -
;- .
} 
} °
ÓC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_goodB2G.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class R
FCWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_goodB2G L
:M NP
CCWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_base	O 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B f
+&&g h
exceptNumberFormat&&i {
)&&{ |
;&&| }
}'' 	
}(( 
})) 
}** ¢
ÓC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_goodG2B.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class R
FCWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_goodG2B L
:M NP
CCWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81_base	O 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
})) 
}** ð6
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_01.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_01 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	
try$$ 
{%% 
using'' 
('' 
SqlConnection'' $

connection''% /
=''0 1
IO''2 4
.''4 5
GetDBConnection''5 D
(''D E
)''E F
)''F G
{(( 

connection)) 
.)) 
Open)) #
())# $
)))$ %
;))% &
using++ 
(++ 

SqlCommand++ %
command++& -
=++. /
new++0 3

SqlCommand++4 >
(++> ?
null++? C
,++C D

connection++E O
)++O P
)++P Q
{,, 
command-- 
.--  
CommandText--  +
=--, -
$str--. Q
;--Q R
command.. 
...  
Prepare..  '
(..' (
)..( )
;..) *
using// 
(// 
SqlDataReader// ,
dr//- /
=//0 1
command//2 9
.//9 :
ExecuteReader//: G
(//G H
)//H I
)//I J
{00 
data22  
=22! "
dr22# %
.22% &
	GetString22& /
(22/ 0
$num220 1
)221 2
;222 3
}33 
}44 
}55 
}66 
catch77 
(77 
SqlException77 
	exceptSql77  )
)77) *
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
	exceptSql992 ;
,99; <
$str99= W
)99W X
;99X Y
}:: 
};; 	
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB \
+CC] ^
dataCC_ c
)CCc d
;CCd e
}DD 	
}EE 
publicHH 

overrideHH 
voidHH 
GoodHH 
(HH 
)HH 
{II 
GoodG2BJJ 
(JJ 
)JJ 
;JJ 
GoodB2GKK 
(KK 
)KK 
;KK 
}LL 
privateOO 
voidOO 
GoodG2BOO 
(OO 
)OO 
{PP 
stringQQ 
dataQQ 
;QQ 
dataSS 
=SS 
$strSS 
;SS 
tryTT 
{UU 	
intVV 
valueVV 
=VV 
intVV 
.VV 
ParseVV !
(VV! "
dataVV" &
)VV& '
;VV' (
}WW 	
catchXX 
(XX 
FormatExceptionXX 
exceptNumberFormatXX 1
)XX1 2
{YY 	
IO[[ 
.[[ 
Logger[[ 
.[[ 
Log[[ 
([[ 
NLog[[ 
.[[ 
LogLevel[[ '
.[[' (
Warn[[( ,
,[[, -
exceptNumberFormat[[. @
,[[@ A
$str[[B \
+[[] ^
data[[_ c
)[[c d
;[[d e
}\\ 	
}]] 
private`` 
void`` 
GoodB2G`` 
(`` 
)`` 
{aa 
stringbb 
databb 
;bb 
datacc 
=cc 
$strcc 
;cc 
{ee 	
tryff 
{gg 
usingii 
(ii 
SqlConnectionii $

connectionii% /
=ii0 1
IOii2 4
.ii4 5
GetDBConnectionii5 D
(iiD E
)iiE F
)iiF G
{jj 

connectionkk 
.kk 
Openkk #
(kk# $
)kk$ %
;kk% &
usingmm 
(mm 

SqlCommandmm %
commandmm& -
=mm. /
newmm0 3

SqlCommandmm4 >
(mm> ?
nullmm? C
,mmC D

connectionmmE O
)mmO P
)mmP Q
{nn 
commandoo 
.oo  
CommandTextoo  +
=oo, -
$stroo. Q
;ooQ R
commandpp 
.pp  
Preparepp  '
(pp' (
)pp( )
;pp) *
usingqq 
(qq 
SqlDataReaderqq ,
drqq- /
=qq0 1
commandqq2 9
.qq9 :
ExecuteReaderqq: G
(qqG H
)qqH I
)qqI J
{rr 
datatt  
=tt! "
drtt# %
.tt% &
	GetStringtt& /
(tt/ 0
$numtt0 1
)tt1 2
;tt2 3
}uu 
}vv 
}ww 
}xx 
catchyy 
(yy 
SqlExceptionyy 
	exceptSqlyy  )
)yy) *
{zz 
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ "
.{{" #
LogLevel{{# +
.{{+ ,
Warn{{, 0
,{{0 1
	exceptSql{{2 ;
,{{; <
$str{{= W
){{W X
;{{X Y
}|| 
}}} 	
try~~ 
{ 	
int
 
value
 
=
 
int
 
.
 
Parse
 !
(
! "
data
" &
)
& '
;
' (
}
 	
catch
 
(
 
FormatException
  
exceptNumberFormat
 1
)
1 2
{
 	
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 
.
 
LogLevel
 '
.
' (
Warn
( ,
,
, - 
exceptNumberFormat
. @
,
@ A
$str
B f
+
g h 
exceptNumberFormat
i {
)
{ |
;
| }
}
 	
}
 
} 
} Üf
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_02.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_02 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
true!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{%% 
try&& 
{'' 
using)) 
()) 
SqlConnection)) (

connection))) 3
=))4 5
IO))6 8
.))8 9
GetDBConnection))9 H
())H I
)))I J
)))J K
{** 

connection++ "
.++" #
Open++# '
(++' (
)++( )
;++) *
using-- 
(-- 

SqlCommand-- )
command--* 1
=--2 3
new--4 7

SqlCommand--8 B
(--B C
null--C G
,--G H

connection--I S
)--S T
)--T U
{.. 
command// #
.//# $
CommandText//$ /
=//0 1
$str//2 U
;//U V
command00 #
.00# $
Prepare00$ +
(00+ ,
)00, -
;00- .
using11 !
(11" #
SqlDataReader11# 0
dr111 3
=114 5
command116 =
.11= >
ExecuteReader11> K
(11K L
)11L M
)11M N
{22 
data44  $
=44% &
dr44' )
.44) *
	GetString44* 3
(443 4
$num444 5
)445 6
;446 7
}55 
}66 
}77 
}88 
catch99 
(99 
SqlException99 #
	exceptSql99$ -
)99- .
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
	exceptSql;;6 ?
,;;? @
$str;;A [
);;[ \
;;;\ ]
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataCC 
=CC 
nullCC 
;CC 
}DD 	
ifEE 

(EE 
trueEE 
)EE 
{FF 	
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateUU 
voidUU 
GoodG2B1UU 
(UU 
)UU 
{VV 
stringWW 
dataWW 
;WW 
ifXX 

(XX 
falseXX 
)XX 
{YY 	
data\\ 
=\\ 
null\\ 
;\\ 
}]] 	
else^^ 
{__ 	
dataaa 
=aa 
$straa 
;aa 
}bb 	
ifcc 

(cc 
truecc 
)cc 
{dd 	
tryee 
{ff 
intgg 
valuegg 
=gg 
intgg 
.gg  
Parsegg  %
(gg% &
datagg& *
)gg* +
;gg+ ,
}hh 
catchii 
(ii 
FormatExceptionii "
exceptNumberFormatii# 5
)ii5 6
{jj 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptNumberFormatll2 D
,llD E
$strllF `
+lla b
datallc g
)llg h
;llh i
}mm 
}nn 	
}oo 
privaterr 
voidrr 
GoodG2B2rr 
(rr 
)rr 
{ss 
stringtt 
datatt 
;tt 
ifuu 

(uu 
trueuu 
)uu 
{vv 	
dataxx 
=xx 
$strxx 
;xx 
}yy 	
elsezz 
{{{ 	
data~~ 
=~~ 
null~~ 
;~~ 
} 	
if
 

(
 
true
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
true
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
SqlConnection
 (

connection
) 3
=
4 5
IO
6 8
.
8 9
GetDBConnection
9 H
(
H I
)
I J
)
J K
{
 

connection
 "
.
" #
Open
# '
(
' (
)
( )
;
) *
using
 
(
 

SqlCommand
 )
command
* 1
=
2 3
new
4 7

SqlCommand
8 B
(
B C
null
C G
,
G H

connection
I S
)
S T
)
T U
{
 
command
   #
.
  # $
CommandText
  $ /
=
  0 1
$str
  2 U
;
  U V
command
¡¡ #
.
¡¡# $
Prepare
¡¡$ +
(
¡¡+ ,
)
¡¡, -
;
¡¡- .
using
¢¢ !
(
¢¢" #
SqlDataReader
¢¢# 0
dr
¢¢1 3
=
¢¢4 5
command
¢¢6 =
.
¢¢= >
ExecuteReader
¢¢> K
(
¢¢K L
)
¢¢L M
)
¢¢M N
{
££ 
data
¥¥  $
=
¥¥% &
dr
¥¥' )
.
¥¥) *
	GetString
¥¥* 3
(
¥¥3 4
$num
¥¥4 5
)
¥¥5 6
;
¥¥6 7
}
¦¦ 
}
§§ 
}
¨¨ 
}
©© 
catch
ªª 
(
ªª 
SqlException
ªª #
	exceptSql
ªª$ -
)
ªª- .
{
«« 
IO
¬¬ 
.
¬¬ 
Logger
¬¬ 
.
¬¬ 
Log
¬¬ !
(
¬¬! "
NLog
¬¬" &
.
¬¬& '
LogLevel
¬¬' /
.
¬¬/ 0
Warn
¬¬0 4
,
¬¬4 5
	exceptSql
¬¬6 ?
,
¬¬? @
$str
¬¬A [
)
¬¬[ \
;
¬¬\ ]
}
­­ 
}
®® 
}
¯¯ 	
else
°° 
{
±± 	
data
´´ 
=
´´ 
null
´´ 
;
´´ 
}
µµ 	
if
¶¶ 

(
¶¶ 
false
¶¶ 
)
¶¶ 
{
·· 	
IO
¹¹ 
.
¹¹ 
	WriteLine
¹¹ 
(
¹¹ 
$str
¹¹ /
)
¹¹/ 0
;
¹¹0 1
}
ºº 	
else
»» 
{
¼¼ 	
try
½½ 
{
¾¾ 
int
¿¿ 
value
¿¿ 
=
¿¿ 
int
¿¿ 
.
¿¿  
Parse
¿¿  %
(
¿¿% &
data
¿¿& *
)
¿¿* +
;
¿¿+ ,
}
ÀÀ 
catch
ÁÁ 
(
ÁÁ 
FormatException
ÁÁ " 
exceptNumberFormat
ÁÁ# 5
)
ÁÁ5 6
{
ÂÂ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ 
.
ÄÄ 
Log
ÄÄ 
(
ÄÄ 
NLog
ÄÄ "
.
ÄÄ" #
LogLevel
ÄÄ# +
.
ÄÄ+ ,
Warn
ÄÄ, 0
,
ÄÄ0 1 
exceptNumberFormat
ÄÄ2 D
,
ÄÄD E
$str
ÄÄF j
+
ÄÄk l 
exceptNumberFormat
ÄÄm 
)ÄÄ 
;ÄÄ 
}
ÅÅ 
}
ÆÆ 	
}
ÇÇ 
private
ÊÊ 
void
ÊÊ 
GoodB2G2
ÊÊ 
(
ÊÊ 
)
ÊÊ 
{
ËË 
string
ÌÌ 
data
ÌÌ 
;
ÌÌ 
if
ÍÍ 

(
ÍÍ 
true
ÍÍ 
)
ÍÍ 
{
ÎÎ 	
data
ÏÏ 
=
ÏÏ 
$str
ÏÏ 
;
ÏÏ 
{
ÑÑ 
try
ÒÒ 
{
ÓÓ 
using
ÕÕ 
(
ÕÕ 
SqlConnection
ÕÕ (

connection
ÕÕ) 3
=
ÕÕ4 5
IO
ÕÕ6 8
.
ÕÕ8 9
GetDBConnection
ÕÕ9 H
(
ÕÕH I
)
ÕÕI J
)
ÕÕJ K
{
ÖÖ 

connection
×× "
.
××" #
Open
××# '
(
××' (
)
××( )
;
××) *
using
ÙÙ 
(
ÙÙ 

SqlCommand
ÙÙ )
command
ÙÙ* 1
=
ÙÙ2 3
new
ÙÙ4 7

SqlCommand
ÙÙ8 B
(
ÙÙB C
null
ÙÙC G
,
ÙÙG H

connection
ÙÙI S
)
ÙÙS T
)
ÙÙT U
{
ÚÚ 
command
ÛÛ #
.
ÛÛ# $
CommandText
ÛÛ$ /
=
ÛÛ0 1
$str
ÛÛ2 U
;
ÛÛU V
command
ÜÜ #
.
ÜÜ# $
Prepare
ÜÜ$ +
(
ÜÜ+ ,
)
ÜÜ, -
;
ÜÜ- .
using
ÝÝ !
(
ÝÝ" #
SqlDataReader
ÝÝ# 0
dr
ÝÝ1 3
=
ÝÝ4 5
command
ÝÝ6 =
.
ÝÝ= >
ExecuteReader
ÝÝ> K
(
ÝÝK L
)
ÝÝL M
)
ÝÝM N
{
ÞÞ 
data
àà  $
=
àà% &
dr
àà' )
.
àà) *
	GetString
àà* 3
(
àà3 4
$num
àà4 5
)
àà5 6
;
àà6 7
}
áá 
}
ââ 
}
ãã 
}
ää 
catch
åå 
(
åå 
SqlException
åå #
	exceptSql
åå$ -
)
åå- .
{
ææ 
IO
çç 
.
çç 
Logger
çç 
.
çç 
Log
çç !
(
çç! "
NLog
çç" &
.
çç& '
LogLevel
çç' /
.
çç/ 0
Warn
çç0 4
,
çç4 5
	exceptSql
çç6 ?
,
çç? @
$str
ççA [
)
çç[ \
;
çç\ ]
}
èè 
}
éé 
}
êê 	
else
ëë 
{
ìì 	
data
ïï 
=
ïï 
null
ïï 
;
ïï 
}
ðð 	
if
ññ 

(
ññ 
true
ññ 
)
ññ 
{
òò 	
try
óó 
{
ôô 
int
õõ 
value
õõ 
=
õõ 
int
õõ 
.
õõ  
Parse
õõ  %
(
õõ% &
data
õõ& *
)
õõ* +
;
õõ+ ,
}
öö 
catch
÷÷ 
(
÷÷ 
FormatException
÷÷ " 
exceptNumberFormat
÷÷# 5
)
÷÷5 6
{
øø 
IO
úú 
.
úú 
Logger
úú 
.
úú 
Log
úú 
(
úú 
NLog
úú "
.
úú" #
LogLevel
úú# +
.
úú+ ,
Warn
úú, 0
,
úú0 1 
exceptNumberFormat
úú2 D
,
úúD E
$str
úúF j
+
úúk l 
exceptNumberFormat
úúm 
)úú 
;úú 
}
ûû 
}
üü 	
}
ýý 
public
ÿÿ 

override
ÿÿ 
void
ÿÿ 
Good
ÿÿ 
(
ÿÿ 
)
ÿÿ 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} Âi
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_03.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_03 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
$num!! 
==!! 
$num!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{%% 
try&& 
{'' 
using)) 
()) 
SqlConnection)) (

connection))) 3
=))4 5
IO))6 8
.))8 9
GetDBConnection))9 H
())H I
)))I J
)))J K
{** 

connection++ "
.++" #
Open++# '
(++' (
)++( )
;++) *
using-- 
(-- 

SqlCommand-- )
command--* 1
=--2 3
new--4 7

SqlCommand--8 B
(--B C
null--C G
,--G H

connection--I S
)--S T
)--T U
{.. 
command// #
.//# $
CommandText//$ /
=//0 1
$str//2 U
;//U V
command00 #
.00# $
Prepare00$ +
(00+ ,
)00, -
;00- .
using11 !
(11" #
SqlDataReader11# 0
dr111 3
=114 5
command116 =
.11= >
ExecuteReader11> K
(11K L
)11L M
)11M N
{22 
data44  $
=44% &
dr44' )
.44) *
	GetString44* 3
(443 4
$num444 5
)445 6
;446 7
}55 
}66 
}77 
}88 
catch99 
(99 
SqlException99 #
	exceptSql99$ -
)99- .
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
	exceptSql;;6 ?
,;;? @
$str;;A [
);;[ \
;;;\ ]
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataCC 
=CC 
nullCC 
;CC 
}DD 	
ifEE 

(EE 
$numEE 
==EE 
$numEE 
)EE 
{FF 	
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateUU 
voidUU 
GoodG2B1UU 
(UU 
)UU 
{VV 
stringWW 
dataWW 
;WW 
ifXX 

(XX 
$numXX 
!=XX 
$numXX 
)XX 
{YY 	
data\\ 
=\\ 
null\\ 
;\\ 
}]] 	
else^^ 
{__ 	
dataaa 
=aa 
$straa 
;aa 
}bb 	
ifcc 

(cc 
$numcc 
==cc 
$numcc 
)cc 
{dd 	
tryee 
{ff 
intgg 
valuegg 
=gg 
intgg 
.gg  
Parsegg  %
(gg% &
datagg& *
)gg* +
;gg+ ,
}hh 
catchii 
(ii 
FormatExceptionii "
exceptNumberFormatii# 5
)ii5 6
{jj 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptNumberFormatll2 D
,llD E
$strllF `
+lla b
datallc g
)llg h
;llh i
}mm 
}nn 	
}oo 
privaterr 
voidrr 
GoodG2B2rr 
(rr 
)rr 
{ss 
stringtt 
datatt 
;tt 
ifuu 

(uu 
$numuu 
==uu 
$numuu 
)uu 
{vv 	
dataxx 
=xx 
$strxx 
;xx 
}yy 	
elsezz 
{{{ 	
data~~ 
=~~ 
null~~ 
;~~ 
} 	
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
SqlConnection
 (

connection
) 3
=
4 5
IO
6 8
.
8 9
GetDBConnection
9 H
(
H I
)
I J
)
J K
{
 

connection
 "
.
" #
Open
# '
(
' (
)
( )
;
) *
using
 
(
 

SqlCommand
 )
command
* 1
=
2 3
new
4 7

SqlCommand
8 B
(
B C
null
C G
,
G H

connection
I S
)
S T
)
T U
{
 
command
   #
.
  # $
CommandText
  $ /
=
  0 1
$str
  2 U
;
  U V
command
¡¡ #
.
¡¡# $
Prepare
¡¡$ +
(
¡¡+ ,
)
¡¡, -
;
¡¡- .
using
¢¢ !
(
¢¢" #
SqlDataReader
¢¢# 0
dr
¢¢1 3
=
¢¢4 5
command
¢¢6 =
.
¢¢= >
ExecuteReader
¢¢> K
(
¢¢K L
)
¢¢L M
)
¢¢M N
{
££ 
data
¥¥  $
=
¥¥% &
dr
¥¥' )
.
¥¥) *
	GetString
¥¥* 3
(
¥¥3 4
$num
¥¥4 5
)
¥¥5 6
;
¥¥6 7
}
¦¦ 
}
§§ 
}
¨¨ 
}
©© 
catch
ªª 
(
ªª 
SqlException
ªª #
	exceptSql
ªª$ -
)
ªª- .
{
«« 
IO
¬¬ 
.
¬¬ 
Logger
¬¬ 
.
¬¬ 
Log
¬¬ !
(
¬¬! "
NLog
¬¬" &
.
¬¬& '
LogLevel
¬¬' /
.
¬¬/ 0
Warn
¬¬0 4
,
¬¬4 5
	exceptSql
¬¬6 ?
,
¬¬? @
$str
¬¬A [
)
¬¬[ \
;
¬¬\ ]
}
­­ 
}
®® 
}
¯¯ 	
else
°° 
{
±± 	
data
´´ 
=
´´ 
null
´´ 
;
´´ 
}
µµ 	
if
¶¶ 

(
¶¶ 
$num
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
·· 	
IO
¹¹ 
.
¹¹ 
	WriteLine
¹¹ 
(
¹¹ 
$str
¹¹ /
)
¹¹/ 0
;
¹¹0 1
}
ºº 	
else
»» 
{
¼¼ 	
try
½½ 
{
¾¾ 
int
¿¿ 
value
¿¿ 
=
¿¿ 
int
¿¿ 
.
¿¿  
Parse
¿¿  %
(
¿¿% &
data
¿¿& *
)
¿¿* +
;
¿¿+ ,
}
ÀÀ 
catch
ÁÁ 
(
ÁÁ 
FormatException
ÁÁ " 
exceptNumberFormat
ÁÁ# 5
)
ÁÁ5 6
{
ÂÂ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ 
.
ÄÄ 
Log
ÄÄ 
(
ÄÄ 
NLog
ÄÄ "
.
ÄÄ" #
LogLevel
ÄÄ# +
.
ÄÄ+ ,
Warn
ÄÄ, 0
,
ÄÄ0 1 
exceptNumberFormat
ÄÄ2 D
,
ÄÄD E
$str
ÄÄF j
+
ÄÄk l 
exceptNumberFormat
ÄÄm 
)ÄÄ 
;ÄÄ 
}
ÅÅ 
}
ÆÆ 	
}
ÇÇ 
private
ÊÊ 
void
ÊÊ 
GoodB2G2
ÊÊ 
(
ÊÊ 
)
ÊÊ 
{
ËË 
string
ÌÌ 
data
ÌÌ 
;
ÌÌ 
if
ÍÍ 

(
ÍÍ 
$num
ÍÍ 
==
ÍÍ 
$num
ÍÍ 
)
ÍÍ 
{
ÎÎ 	
data
ÏÏ 
=
ÏÏ 
$str
ÏÏ 
;
ÏÏ 
{
ÑÑ 
try
ÒÒ 
{
ÓÓ 
using
ÕÕ 
(
ÕÕ 
SqlConnection
ÕÕ (

connection
ÕÕ) 3
=
ÕÕ4 5
IO
ÕÕ6 8
.
ÕÕ8 9
GetDBConnection
ÕÕ9 H
(
ÕÕH I
)
ÕÕI J
)
ÕÕJ K
{
ÖÖ 

connection
×× "
.
××" #
Open
××# '
(
××' (
)
××( )
;
××) *
using
ÙÙ 
(
ÙÙ 

SqlCommand
ÙÙ )
command
ÙÙ* 1
=
ÙÙ2 3
new
ÙÙ4 7

SqlCommand
ÙÙ8 B
(
ÙÙB C
null
ÙÙC G
,
ÙÙG H

connection
ÙÙI S
)
ÙÙS T
)
ÙÙT U
{
ÚÚ 
command
ÛÛ #
.
ÛÛ# $
CommandText
ÛÛ$ /
=
ÛÛ0 1
$str
ÛÛ2 U
;
ÛÛU V
command
ÜÜ #
.
ÜÜ# $
Prepare
ÜÜ$ +
(
ÜÜ+ ,
)
ÜÜ, -
;
ÜÜ- .
using
ÝÝ !
(
ÝÝ" #
SqlDataReader
ÝÝ# 0
dr
ÝÝ1 3
=
ÝÝ4 5
command
ÝÝ6 =
.
ÝÝ= >
ExecuteReader
ÝÝ> K
(
ÝÝK L
)
ÝÝL M
)
ÝÝM N
{
ÞÞ 
data
àà  $
=
àà% &
dr
àà' )
.
àà) *
	GetString
àà* 3
(
àà3 4
$num
àà4 5
)
àà5 6
;
àà6 7
}
áá 
}
ââ 
}
ãã 
}
ää 
catch
åå 
(
åå 
SqlException
åå #
	exceptSql
åå$ -
)
åå- .
{
ææ 
IO
çç 
.
çç 
Logger
çç 
.
çç 
Log
çç !
(
çç! "
NLog
çç" &
.
çç& '
LogLevel
çç' /
.
çç/ 0
Warn
çç0 4
,
çç4 5
	exceptSql
çç6 ?
,
çç? @
$str
ççA [
)
çç[ \
;
çç\ ]
}
èè 
}
éé 
}
êê 	
else
ëë 
{
ìì 	
data
ïï 
=
ïï 
null
ïï 
;
ïï 
}
ðð 	
if
ññ 

(
ññ 
$num
ññ 
==
ññ 
$num
ññ 
)
ññ 
{
òò 	
try
óó 
{
ôô 
int
õõ 
value
õõ 
=
õõ 
int
õõ 
.
õõ  
Parse
õõ  %
(
õõ% &
data
õõ& *
)
õõ* +
;
õõ+ ,
}
öö 
catch
÷÷ 
(
÷÷ 
FormatException
÷÷ " 
exceptNumberFormat
÷÷# 5
)
÷÷5 6
{
øø 
IO
úú 
.
úú 
Logger
úú 
.
úú 
Log
úú 
(
úú 
NLog
úú "
.
úú" #
LogLevel
úú# +
.
úú+ ,
Warn
úú, 0
,
úú0 1 
exceptNumberFormat
úú2 D
,
úúD E
$str
úúF j
+
úúk l 
exceptNumberFormat
úúm 
)úú 
;úú 
}
ûû 
}
üü 	
}
ýý 
public
ÿÿ 

override
ÿÿ 
void
ÿÿ 
Good
ÿÿ 
(
ÿÿ 
)
ÿÿ 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} j
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_04.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_04 A
:B C
AbstractTestCaseD T
{ 
private"" 
const"" 
bool"" 
PRIVATE_CONST_TRUE"" )
=""* +
true"", 0
;""0 1
private## 
const## 
bool## 
PRIVATE_CONST_FALSE## *
=##+ ,
false##- 2
;##2 3
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
string'' 
data'' 
;'' 
if(( 

((( 
PRIVATE_CONST_TRUE(( 
)(( 
{)) 	
data** 
=** 
$str** 
;** 
{,, 
try-- 
{.. 
using00 
(00 
SqlConnection00 (

connection00) 3
=004 5
IO006 8
.008 9
GetDBConnection009 H
(00H I
)00I J
)00J K
{11 

connection22 "
.22" #
Open22# '
(22' (
)22( )
;22) *
using44 
(44 

SqlCommand44 )
command44* 1
=442 3
new444 7

SqlCommand448 B
(44B C
null44C G
,44G H

connection44I S
)44S T
)44T U
{55 
command66 #
.66# $
CommandText66$ /
=660 1
$str662 U
;66U V
command77 #
.77# $
Prepare77$ +
(77+ ,
)77, -
;77- .
using88 !
(88" #
SqlDataReader88# 0
dr881 3
=884 5
command886 =
.88= >
ExecuteReader88> K
(88K L
)88L M
)88M N
{99 
data;;  $
=;;% &
dr;;' )
.;;) *
	GetString;;* 3
(;;3 4
$num;;4 5
);;5 6
;;;6 7
}<< 
}== 
}>> 
}?? 
catch@@ 
(@@ 
SqlException@@ #
	exceptSql@@$ -
)@@- .
{AA 
IOBB 
.BB 
LoggerBB 
.BB 
LogBB !
(BB! "
NLogBB" &
.BB& '
LogLevelBB' /
.BB/ 0
WarnBB0 4
,BB4 5
	exceptSqlBB6 ?
,BB? @
$strBBA [
)BB[ \
;BB\ ]
}CC 
}DD 
}EE 	
elseFF 
{GG 	
dataJJ 
=JJ 
nullJJ 
;JJ 
}KK 	
ifLL 

(LL 
PRIVATE_CONST_TRUELL 
)LL 
{MM 	
tryNN 
{OO 
intPP 
valuePP 
=PP 
intPP 
.PP  
ParsePP  %
(PP% &
dataPP& *
)PP* +
;PP+ ,
}QQ 
catchRR 
(RR 
FormatExceptionRR "
exceptNumberFormatRR# 5
)RR5 6
{SS 
IOUU 
.UU 
LoggerUU 
.UU 
LogUU 
(UU 
NLogUU "
.UU" #
LogLevelUU# +
.UU+ ,
WarnUU, 0
,UU0 1
exceptNumberFormatUU2 D
,UUD E
$strUUF `
+UUa b
dataUUc g
)UUg h
;UUh i
}VV 
}WW 	
}XX 
private\\ 
void\\ 
GoodG2B1\\ 
(\\ 
)\\ 
{]] 
string^^ 
data^^ 
;^^ 
if__ 

(__ 
PRIVATE_CONST_FALSE__ 
)__  
{`` 	
datacc 
=cc 
nullcc 
;cc 
}dd 	
elseee 
{ff 	
datahh 
=hh 
$strhh 
;hh 
}ii 	
ifjj 

(jj 
PRIVATE_CONST_TRUEjj 
)jj 
{kk 	
tryll 
{mm 
intnn 
valuenn 
=nn 
intnn 
.nn  
Parsenn  %
(nn% &
datann& *
)nn* +
;nn+ ,
}oo 
catchpp 
(pp 
FormatExceptionpp "
exceptNumberFormatpp# 5
)pp5 6
{qq 
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss "
.ss" #
LogLevelss# +
.ss+ ,
Warnss, 0
,ss0 1
exceptNumberFormatss2 D
,ssD E
$strssF `
+ssa b
datassc g
)ssg h
;ssh i
}tt 
}uu 	
}vv 
privateyy 
voidyy 
GoodG2B2yy 
(yy 
)yy 
{zz 
string{{ 
data{{ 
;{{ 
if|| 

(|| 
PRIVATE_CONST_TRUE|| 
)|| 
{}} 	
data 
= 
$str 
; 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
¡¡ 
(
¡¡ 
SqlConnection
¡¡ (

connection
¡¡) 3
=
¡¡4 5
IO
¡¡6 8
.
¡¡8 9
GetDBConnection
¡¡9 H
(
¡¡H I
)
¡¡I J
)
¡¡J K
{
¢¢ 

connection
££ "
.
££" #
Open
££# '
(
££' (
)
££( )
;
££) *
using
¥¥ 
(
¥¥ 

SqlCommand
¥¥ )
command
¥¥* 1
=
¥¥2 3
new
¥¥4 7

SqlCommand
¥¥8 B
(
¥¥B C
null
¥¥C G
,
¥¥G H

connection
¥¥I S
)
¥¥S T
)
¥¥T U
{
¦¦ 
command
§§ #
.
§§# $
CommandText
§§$ /
=
§§0 1
$str
§§2 U
;
§§U V
command
¨¨ #
.
¨¨# $
Prepare
¨¨$ +
(
¨¨+ ,
)
¨¨, -
;
¨¨- .
using
©© !
(
©©" #
SqlDataReader
©©# 0
dr
©©1 3
=
©©4 5
command
©©6 =
.
©©= >
ExecuteReader
©©> K
(
©©K L
)
©©L M
)
©©M N
{
ªª 
data
¬¬  $
=
¬¬% &
dr
¬¬' )
.
¬¬) *
	GetString
¬¬* 3
(
¬¬3 4
$num
¬¬4 5
)
¬¬5 6
;
¬¬6 7
}
­­ 
}
®® 
}
¯¯ 
}
°° 
catch
±± 
(
±± 
SqlException
±± #
	exceptSql
±±$ -
)
±±- .
{
²² 
IO
³³ 
.
³³ 
Logger
³³ 
.
³³ 
Log
³³ !
(
³³! "
NLog
³³" &
.
³³& '
LogLevel
³³' /
.
³³/ 0
Warn
³³0 4
,
³³4 5
	exceptSql
³³6 ?
,
³³? @
$str
³³A [
)
³³[ \
;
³³\ ]
}
´´ 
}
µµ 
}
¶¶ 	
else
·· 
{
¸¸ 	
data
»» 
=
»» 
null
»» 
;
»» 
}
¼¼ 	
if
½½ 

(
½½ !
PRIVATE_CONST_FALSE
½½ 
)
½½  
{
¾¾ 	
IO
ÀÀ 
.
ÀÀ 
	WriteLine
ÀÀ 
(
ÀÀ 
$str
ÀÀ /
)
ÀÀ/ 0
;
ÀÀ0 1
}
ÁÁ 	
else
ÂÂ 
{
ÃÃ 	
try
ÄÄ 
{
ÅÅ 
int
ÆÆ 
value
ÆÆ 
=
ÆÆ 
int
ÆÆ 
.
ÆÆ  
Parse
ÆÆ  %
(
ÆÆ% &
data
ÆÆ& *
)
ÆÆ* +
;
ÆÆ+ ,
}
ÇÇ 
catch
ÈÈ 
(
ÈÈ 
FormatException
ÈÈ " 
exceptNumberFormat
ÈÈ# 5
)
ÈÈ5 6
{
ÉÉ 
IO
ËË 
.
ËË 
Logger
ËË 
.
ËË 
Log
ËË 
(
ËË 
NLog
ËË "
.
ËË" #
LogLevel
ËË# +
.
ËË+ ,
Warn
ËË, 0
,
ËË0 1 
exceptNumberFormat
ËË2 D
,
ËËD E
$str
ËËF j
+
ËËk l 
exceptNumberFormat
ËËm 
)ËË 
;ËË 
}
ÌÌ 
}
ÍÍ 	
}
ÎÎ 
private
ÑÑ 
void
ÑÑ 
GoodB2G2
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÒÒ 
string
ÓÓ 
data
ÓÓ 
;
ÓÓ 
if
ÔÔ 

(
ÔÔ  
PRIVATE_CONST_TRUE
ÔÔ 
)
ÔÔ 
{
ÕÕ 	
data
ÖÖ 
=
ÖÖ 
$str
ÖÖ 
;
ÖÖ 
{
ØØ 
try
ÙÙ 
{
ÚÚ 
using
ÜÜ 
(
ÜÜ 
SqlConnection
ÜÜ (

connection
ÜÜ) 3
=
ÜÜ4 5
IO
ÜÜ6 8
.
ÜÜ8 9
GetDBConnection
ÜÜ9 H
(
ÜÜH I
)
ÜÜI J
)
ÜÜJ K
{
ÝÝ 

connection
ÞÞ "
.
ÞÞ" #
Open
ÞÞ# '
(
ÞÞ' (
)
ÞÞ( )
;
ÞÞ) *
using
àà 
(
àà 

SqlCommand
àà )
command
àà* 1
=
àà2 3
new
àà4 7

SqlCommand
àà8 B
(
ààB C
null
ààC G
,
ààG H

connection
ààI S
)
ààS T
)
ààT U
{
áá 
command
ââ #
.
ââ# $
CommandText
ââ$ /
=
ââ0 1
$str
ââ2 U
;
ââU V
command
ãã #
.
ãã# $
Prepare
ãã$ +
(
ãã+ ,
)
ãã, -
;
ãã- .
using
ää !
(
ää" #
SqlDataReader
ää# 0
dr
ää1 3
=
ää4 5
command
ää6 =
.
ää= >
ExecuteReader
ää> K
(
ääK L
)
ääL M
)
ääM N
{
åå 
data
çç  $
=
çç% &
dr
çç' )
.
çç) *
	GetString
çç* 3
(
çç3 4
$num
çç4 5
)
çç5 6
;
çç6 7
}
èè 
}
éé 
}
êê 
}
ëë 
catch
ìì 
(
ìì 
SqlException
ìì #
	exceptSql
ìì$ -
)
ìì- .
{
íí 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
	exceptSql
îî6 ?
,
îî? @
$str
îîA [
)
îî[ \
;
îî\ ]
}
ïï 
}
ðð 
}
ññ 	
else
òò 
{
óó 	
data
öö 
=
öö 
null
öö 
;
öö 
}
÷÷ 	
if
øø 

(
øø  
PRIVATE_CONST_TRUE
øø 
)
øø 
{
ùù 	
try
úú 
{
ûû 
int
üü 
value
üü 
=
üü 
int
üü 
.
üü  
Parse
üü  %
(
üü% &
data
üü& *
)
üü* +
;
üü+ ,
}
ýý 
catch
þþ 
(
þþ 
FormatException
þþ " 
exceptNumberFormat
þþ# 5
)
þþ5 6
{
ÿÿ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} i
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_05.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_05 A
:B C
AbstractTestCaseD T
{ 
private!! 
bool!! 
privateTrue!! 
=!! 
true!! #
;!!# $
private"" 
bool"" 
privateFalse"" 
="" 
false""  %
;""% &
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
string&& 
data&& 
;&& 
if'' 

('' 
privateTrue'' 
)'' 
{(( 	
data)) 
=)) 
$str)) 
;)) 
{++ 
try,, 
{-- 
using// 
(// 
SqlConnection// (

connection//) 3
=//4 5
IO//6 8
.//8 9
GetDBConnection//9 H
(//H I
)//I J
)//J K
{00 

connection11 "
.11" #
Open11# '
(11' (
)11( )
;11) *
using33 
(33 

SqlCommand33 )
command33* 1
=332 3
new334 7

SqlCommand338 B
(33B C
null33C G
,33G H

connection33I S
)33S T
)33T U
{44 
command55 #
.55# $
CommandText55$ /
=550 1
$str552 U
;55U V
command66 #
.66# $
Prepare66$ +
(66+ ,
)66, -
;66- .
using77 !
(77" #
SqlDataReader77# 0
dr771 3
=774 5
command776 =
.77= >
ExecuteReader77> K
(77K L
)77L M
)77M N
{88 
data::  $
=::% &
dr::' )
.::) *
	GetString::* 3
(::3 4
$num::4 5
)::5 6
;::6 7
};; 
}<< 
}== 
}>> 
catch?? 
(?? 
SqlException?? #
	exceptSql??$ -
)??- .
{@@ 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA !
(AA! "
NLogAA" &
.AA& '
LogLevelAA' /
.AA/ 0
WarnAA0 4
,AA4 5
	exceptSqlAA6 ?
,AA? @
$strAAA [
)AA[ \
;AA\ ]
}BB 
}CC 
}DD 	
elseEE 
{FF 	
dataII 
=II 
nullII 
;II 
}JJ 	
ifKK 

(KK 
privateTrueKK 
)KK 
{LL 	
tryMM 
{NN 
intOO 
valueOO 
=OO 
intOO 
.OO  
ParseOO  %
(OO% &
dataOO& *
)OO* +
;OO+ ,
}PP 
catchQQ 
(QQ 
FormatExceptionQQ "
exceptNumberFormatQQ# 5
)QQ5 6
{RR 
IOTT 
.TT 
LoggerTT 
.TT 
LogTT 
(TT 
NLogTT "
.TT" #
LogLevelTT# +
.TT+ ,
WarnTT, 0
,TT0 1
exceptNumberFormatTT2 D
,TTD E
$strTTF `
+TTa b
dataTTc g
)TTg h
;TTh i
}UU 
}VV 	
}WW 
private[[ 
void[[ 
GoodG2B1[[ 
([[ 
)[[ 
{\\ 
string]] 
data]] 
;]] 
if^^ 

(^^ 
privateFalse^^ 
)^^ 
{__ 	
databb 
=bb 
nullbb 
;bb 
}cc 	
elsedd 
{ee 	
datagg 
=gg 
$strgg 
;gg 
}hh 	
ifii 

(ii 
privateTrueii 
)ii 
{jj 	
trykk 
{ll 
intmm 
valuemm 
=mm 
intmm 
.mm  
Parsemm  %
(mm% &
datamm& *
)mm* +
;mm+ ,
}nn 
catchoo 
(oo 
FormatExceptionoo "
exceptNumberFormatoo# 5
)oo5 6
{pp 
IOrr 
.rr 
Loggerrr 
.rr 
Logrr 
(rr 
NLogrr "
.rr" #
LogLevelrr# +
.rr+ ,
Warnrr, 0
,rr0 1
exceptNumberFormatrr2 D
,rrD E
$strrrF `
+rra b
datarrc g
)rrg h
;rrh i
}ss 
}tt 	
}uu 
privatexx 
voidxx 
GoodG2B2xx 
(xx 
)xx 
{yy 
stringzz 
datazz 
;zz 
if{{ 

({{ 
privateTrue{{ 
){{ 
{|| 	
data~~ 
=~~ 
$str~~ 
;~~ 
} 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateTrue
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
   
(
   
SqlConnection
   (

connection
  ) 3
=
  4 5
IO
  6 8
.
  8 9
GetDBConnection
  9 H
(
  H I
)
  I J
)
  J K
{
¡¡ 

connection
¢¢ "
.
¢¢" #
Open
¢¢# '
(
¢¢' (
)
¢¢( )
;
¢¢) *
using
¤¤ 
(
¤¤ 

SqlCommand
¤¤ )
command
¤¤* 1
=
¤¤2 3
new
¤¤4 7

SqlCommand
¤¤8 B
(
¤¤B C
null
¤¤C G
,
¤¤G H

connection
¤¤I S
)
¤¤S T
)
¤¤T U
{
¥¥ 
command
¦¦ #
.
¦¦# $
CommandText
¦¦$ /
=
¦¦0 1
$str
¦¦2 U
;
¦¦U V
command
§§ #
.
§§# $
Prepare
§§$ +
(
§§+ ,
)
§§, -
;
§§- .
using
¨¨ !
(
¨¨" #
SqlDataReader
¨¨# 0
dr
¨¨1 3
=
¨¨4 5
command
¨¨6 =
.
¨¨= >
ExecuteReader
¨¨> K
(
¨¨K L
)
¨¨L M
)
¨¨M N
{
©© 
data
««  $
=
««% &
dr
««' )
.
««) *
	GetString
««* 3
(
««3 4
$num
««4 5
)
««5 6
;
««6 7
}
¬¬ 
}
­­ 
}
®® 
}
¯¯ 
catch
°° 
(
°° 
SqlException
°° #
	exceptSql
°°$ -
)
°°- .
{
±± 
IO
²² 
.
²² 
Logger
²² 
.
²² 
Log
²² !
(
²²! "
NLog
²²" &
.
²²& '
LogLevel
²²' /
.
²²/ 0
Warn
²²0 4
,
²²4 5
	exceptSql
²²6 ?
,
²²? @
$str
²²A [
)
²²[ \
;
²²\ ]
}
³³ 
}
´´ 
}
µµ 	
else
¶¶ 
{
·· 	
data
ºº 
=
ºº 
null
ºº 
;
ºº 
}
»» 	
if
¼¼ 

(
¼¼ 
privateFalse
¼¼ 
)
¼¼ 
{
½½ 	
IO
¿¿ 
.
¿¿ 
	WriteLine
¿¿ 
(
¿¿ 
$str
¿¿ /
)
¿¿/ 0
;
¿¿0 1
}
ÀÀ 	
else
ÁÁ 
{
ÂÂ 	
try
ÃÃ 
{
ÄÄ 
int
ÅÅ 
value
ÅÅ 
=
ÅÅ 
int
ÅÅ 
.
ÅÅ  
Parse
ÅÅ  %
(
ÅÅ% &
data
ÅÅ& *
)
ÅÅ* +
;
ÅÅ+ ,
}
ÆÆ 
catch
ÇÇ 
(
ÇÇ 
FormatException
ÇÇ " 
exceptNumberFormat
ÇÇ# 5
)
ÇÇ5 6
{
ÈÈ 
IO
ÊÊ 
.
ÊÊ 
Logger
ÊÊ 
.
ÊÊ 
Log
ÊÊ 
(
ÊÊ 
NLog
ÊÊ "
.
ÊÊ" #
LogLevel
ÊÊ# +
.
ÊÊ+ ,
Warn
ÊÊ, 0
,
ÊÊ0 1 
exceptNumberFormat
ÊÊ2 D
,
ÊÊD E
$str
ÊÊF j
+
ÊÊk l 
exceptNumberFormat
ÊÊm 
)ÊÊ 
;ÊÊ 
}
ËË 
}
ÌÌ 	
}
ÍÍ 
private
ÐÐ 
void
ÐÐ 
GoodB2G2
ÐÐ 
(
ÐÐ 
)
ÐÐ 
{
ÑÑ 
string
ÒÒ 
data
ÒÒ 
;
ÒÒ 
if
ÓÓ 

(
ÓÓ 
privateTrue
ÓÓ 
)
ÓÓ 
{
ÔÔ 	
data
ÕÕ 
=
ÕÕ 
$str
ÕÕ 
;
ÕÕ 
{
×× 
try
ØØ 
{
ÙÙ 
using
ÛÛ 
(
ÛÛ 
SqlConnection
ÛÛ (

connection
ÛÛ) 3
=
ÛÛ4 5
IO
ÛÛ6 8
.
ÛÛ8 9
GetDBConnection
ÛÛ9 H
(
ÛÛH I
)
ÛÛI J
)
ÛÛJ K
{
ÜÜ 

connection
ÝÝ "
.
ÝÝ" #
Open
ÝÝ# '
(
ÝÝ' (
)
ÝÝ( )
;
ÝÝ) *
using
ßß 
(
ßß 

SqlCommand
ßß )
command
ßß* 1
=
ßß2 3
new
ßß4 7

SqlCommand
ßß8 B
(
ßßB C
null
ßßC G
,
ßßG H

connection
ßßI S
)
ßßS T
)
ßßT U
{
àà 
command
áá #
.
áá# $
CommandText
áá$ /
=
áá0 1
$str
áá2 U
;
ááU V
command
ââ #
.
ââ# $
Prepare
ââ$ +
(
ââ+ ,
)
ââ, -
;
ââ- .
using
ãã !
(
ãã" #
SqlDataReader
ãã# 0
dr
ãã1 3
=
ãã4 5
command
ãã6 =
.
ãã= >
ExecuteReader
ãã> K
(
ããK L
)
ããL M
)
ããM N
{
ää 
data
ææ  $
=
ææ% &
dr
ææ' )
.
ææ) *
	GetString
ææ* 3
(
ææ3 4
$num
ææ4 5
)
ææ5 6
;
ææ6 7
}
çç 
}
èè 
}
éé 
}
êê 
catch
ëë 
(
ëë 
SqlException
ëë #
	exceptSql
ëë$ -
)
ëë- .
{
ìì 
IO
íí 
.
íí 
Logger
íí 
.
íí 
Log
íí !
(
íí! "
NLog
íí" &
.
íí& '
LogLevel
íí' /
.
íí/ 0
Warn
íí0 4
,
íí4 5
	exceptSql
íí6 ?
,
íí? @
$str
ííA [
)
íí[ \
;
íí\ ]
}
îî 
}
ïï 
}
ðð 	
else
ññ 
{
òò 	
data
õõ 
=
õõ 
null
õõ 
;
õõ 
}
öö 	
if
÷÷ 

(
÷÷ 
privateTrue
÷÷ 
)
÷÷ 
{
øø 	
try
ùù 
{
úú 
int
ûû 
value
ûû 
=
ûû 
int
ûû 
.
ûû  
Parse
ûû  %
(
ûû% &
data
ûû& *
)
ûû* +
;
ûû+ ,
}
üü 
catch
ýý 
(
ýý 
FormatException
ýý " 
exceptNumberFormat
ýý# 5
)
ýý5 6
{
þþ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} ãk
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_06.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_06 A
:B C
AbstractTestCaseD T
{ 
private!! 
const!! 
int!! 
PRIVATE_CONST_FIVE!! (
=!!) *
$num!!+ ,
;!!, -
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
string%% 
data%% 
;%% 
if&& 

(&& 
PRIVATE_CONST_FIVE&& 
==&&  
$num&&  !
)&&! "
{'' 	
data(( 
=(( 
$str(( 
;(( 
{** 
try++ 
{,, 
using.. 
(.. 
SqlConnection.. (

connection..) 3
=..4 5
IO..6 8
...8 9
GetDBConnection..9 H
(..H I
)..I J
)..J K
{// 

connection00 "
.00" #
Open00# '
(00' (
)00( )
;00) *
using22 
(22 

SqlCommand22 )
command22* 1
=222 3
new224 7

SqlCommand228 B
(22B C
null22C G
,22G H

connection22I S
)22S T
)22T U
{33 
command44 #
.44# $
CommandText44$ /
=440 1
$str442 U
;44U V
command55 #
.55# $
Prepare55$ +
(55+ ,
)55, -
;55- .
using66 !
(66" #
SqlDataReader66# 0
dr661 3
=664 5
command666 =
.66= >
ExecuteReader66> K
(66K L
)66L M
)66M N
{77 
data99  $
=99% &
dr99' )
.99) *
	GetString99* 3
(993 4
$num994 5
)995 6
;996 7
}:: 
};; 
}<< 
}== 
catch>> 
(>> 
SqlException>> #
	exceptSql>>$ -
)>>- .
{?? 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ !
(@@! "
NLog@@" &
.@@& '
LogLevel@@' /
.@@/ 0
Warn@@0 4
,@@4 5
	exceptSql@@6 ?
,@@? @
$str@@A [
)@@[ \
;@@\ ]
}AA 
}BB 
}CC 	
elseDD 
{EE 	
dataHH 
=HH 
nullHH 
;HH 
}II 	
ifJJ 

(JJ 
PRIVATE_CONST_FIVEJJ 
==JJ  
$numJJ  !
)JJ! "
{KK 	
tryLL 
{MM 
intNN 
valueNN 
=NN 
intNN 
.NN  
ParseNN  %
(NN% &
dataNN& *
)NN* +
;NN+ ,
}OO 
catchPP 
(PP 
FormatExceptionPP "
exceptNumberFormatPP# 5
)PP5 6
{QQ 
IOSS 
.SS 
LoggerSS 
.SS 
LogSS 
(SS 
NLogSS "
.SS" #
LogLevelSS# +
.SS+ ,
WarnSS, 0
,SS0 1
exceptNumberFormatSS2 D
,SSD E
$strSSF `
+SSa b
dataSSc g
)SSg h
;SSh i
}TT 
}UU 	
}VV 
privateZZ 
voidZZ 
GoodG2B1ZZ 
(ZZ 
)ZZ 
{[[ 
string\\ 
data\\ 
;\\ 
if]] 

(]] 
PRIVATE_CONST_FIVE]] 
!=]]  
$num]]  !
)]]! "
{^^ 	
dataaa 
=aa 
nullaa 
;aa 
}bb 	
elsecc 
{dd 	
dataff 
=ff 
$strff 
;ff 
}gg 	
ifhh 

(hh 
PRIVATE_CONST_FIVEhh 
==hh  
$numhh  !
)hh! "
{ii 	
tryjj 
{kk 
intll 
valuell 
=ll 
intll 
.ll  
Parsell  %
(ll% &
datall& *
)ll* +
;ll+ ,
}mm 
catchnn 
(nn 
FormatExceptionnn "
exceptNumberFormatnn# 5
)nn5 6
{oo 
IOqq 
.qq 
Loggerqq 
.qq 
Logqq 
(qq 
NLogqq "
.qq" #
LogLevelqq# +
.qq+ ,
Warnqq, 0
,qq0 1
exceptNumberFormatqq2 D
,qqD E
$strqqF `
+qqa b
dataqqc g
)qqg h
;qqh i
}rr 
}ss 	
}tt 
privateww 
voidww 
GoodG2B2ww 
(ww 
)ww 
{xx 
stringyy 
datayy 
;yy 
ifzz 

(zz 
PRIVATE_CONST_FIVEzz 
==zz  
$numzz  !
)zz! "
{{{ 	
data}} 
=}} 
$str}} 
;}} 
}~~ 	
else 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
SqlConnection
 (

connection
) 3
=
4 5
IO
6 8
.
8 9
GetDBConnection
9 H
(
H I
)
I J
)
J K
{
   

connection
¡¡ "
.
¡¡" #
Open
¡¡# '
(
¡¡' (
)
¡¡( )
;
¡¡) *
using
££ 
(
££ 

SqlCommand
££ )
command
££* 1
=
££2 3
new
££4 7

SqlCommand
££8 B
(
££B C
null
££C G
,
££G H

connection
££I S
)
££S T
)
££T U
{
¤¤ 
command
¥¥ #
.
¥¥# $
CommandText
¥¥$ /
=
¥¥0 1
$str
¥¥2 U
;
¥¥U V
command
¦¦ #
.
¦¦# $
Prepare
¦¦$ +
(
¦¦+ ,
)
¦¦, -
;
¦¦- .
using
§§ !
(
§§" #
SqlDataReader
§§# 0
dr
§§1 3
=
§§4 5
command
§§6 =
.
§§= >
ExecuteReader
§§> K
(
§§K L
)
§§L M
)
§§M N
{
¨¨ 
data
ªª  $
=
ªª% &
dr
ªª' )
.
ªª) *
	GetString
ªª* 3
(
ªª3 4
$num
ªª4 5
)
ªª5 6
;
ªª6 7
}
«« 
}
¬¬ 
}
­­ 
}
®® 
catch
¯¯ 
(
¯¯ 
SqlException
¯¯ #
	exceptSql
¯¯$ -
)
¯¯- .
{
°° 
IO
±± 
.
±± 
Logger
±± 
.
±± 
Log
±± !
(
±±! "
NLog
±±" &
.
±±& '
LogLevel
±±' /
.
±±/ 0
Warn
±±0 4
,
±±4 5
	exceptSql
±±6 ?
,
±±? @
$str
±±A [
)
±±[ \
;
±±\ ]
}
²² 
}
³³ 
}
´´ 	
else
µµ 
{
¶¶ 	
data
¹¹ 
=
¹¹ 
null
¹¹ 
;
¹¹ 
}
ºº 	
if
»» 

(
»»  
PRIVATE_CONST_FIVE
»» 
!=
»»  
$num
»»  !
)
»»! "
{
¼¼ 	
IO
¾¾ 
.
¾¾ 
	WriteLine
¾¾ 
(
¾¾ 
$str
¾¾ /
)
¾¾/ 0
;
¾¾0 1
}
¿¿ 	
else
ÀÀ 
{
ÁÁ 	
try
ÂÂ 
{
ÃÃ 
int
ÄÄ 
value
ÄÄ 
=
ÄÄ 
int
ÄÄ 
.
ÄÄ  
Parse
ÄÄ  %
(
ÄÄ% &
data
ÄÄ& *
)
ÄÄ* +
;
ÄÄ+ ,
}
ÅÅ 
catch
ÆÆ 
(
ÆÆ 
FormatException
ÆÆ " 
exceptNumberFormat
ÆÆ# 5
)
ÆÆ5 6
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
Logger
ÉÉ 
.
ÉÉ 
Log
ÉÉ 
(
ÉÉ 
NLog
ÉÉ "
.
ÉÉ" #
LogLevel
ÉÉ# +
.
ÉÉ+ ,
Warn
ÉÉ, 0
,
ÉÉ0 1 
exceptNumberFormat
ÉÉ2 D
,
ÉÉD E
$str
ÉÉF j
+
ÉÉk l 
exceptNumberFormat
ÉÉm 
)ÉÉ 
;ÉÉ 
}
ÊÊ 
}
ËË 	
}
ÌÌ 
private
ÏÏ 
void
ÏÏ 
GoodB2G2
ÏÏ 
(
ÏÏ 
)
ÏÏ 
{
ÐÐ 
string
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÒÒ 

(
ÒÒ  
PRIVATE_CONST_FIVE
ÒÒ 
==
ÒÒ  
$num
ÒÒ  !
)
ÒÒ! "
{
ÓÓ 	
data
ÔÔ 
=
ÔÔ 
$str
ÔÔ 
;
ÔÔ 
{
ÖÖ 
try
×× 
{
ØØ 
using
ÚÚ 
(
ÚÚ 
SqlConnection
ÚÚ (

connection
ÚÚ) 3
=
ÚÚ4 5
IO
ÚÚ6 8
.
ÚÚ8 9
GetDBConnection
ÚÚ9 H
(
ÚÚH I
)
ÚÚI J
)
ÚÚJ K
{
ÛÛ 

connection
ÜÜ "
.
ÜÜ" #
Open
ÜÜ# '
(
ÜÜ' (
)
ÜÜ( )
;
ÜÜ) *
using
ÞÞ 
(
ÞÞ 

SqlCommand
ÞÞ )
command
ÞÞ* 1
=
ÞÞ2 3
new
ÞÞ4 7

SqlCommand
ÞÞ8 B
(
ÞÞB C
null
ÞÞC G
,
ÞÞG H

connection
ÞÞI S
)
ÞÞS T
)
ÞÞT U
{
ßß 
command
àà #
.
àà# $
CommandText
àà$ /
=
àà0 1
$str
àà2 U
;
ààU V
command
áá #
.
áá# $
Prepare
áá$ +
(
áá+ ,
)
áá, -
;
áá- .
using
ââ !
(
ââ" #
SqlDataReader
ââ# 0
dr
ââ1 3
=
ââ4 5
command
ââ6 =
.
ââ= >
ExecuteReader
ââ> K
(
ââK L
)
ââL M
)
ââM N
{
ãã 
data
åå  $
=
åå% &
dr
åå' )
.
åå) *
	GetString
åå* 3
(
åå3 4
$num
åå4 5
)
åå5 6
;
åå6 7
}
ææ 
}
çç 
}
èè 
}
éé 
catch
êê 
(
êê 
SqlException
êê #
	exceptSql
êê$ -
)
êê- .
{
ëë 
IO
ìì 
.
ìì 
Logger
ìì 
.
ìì 
Log
ìì !
(
ìì! "
NLog
ìì" &
.
ìì& '
LogLevel
ìì' /
.
ìì/ 0
Warn
ìì0 4
,
ìì4 5
	exceptSql
ìì6 ?
,
ìì? @
$str
ììA [
)
ìì[ \
;
ìì\ ]
}
íí 
}
îî 
}
ïï 	
else
ðð 
{
ññ 	
data
ôô 
=
ôô 
null
ôô 
;
ôô 
}
õõ 	
if
öö 

(
öö  
PRIVATE_CONST_FIVE
öö 
==
öö  
$num
öö  !
)
öö! "
{
÷÷ 	
try
øø 
{
ùù 
int
úú 
value
úú 
=
úú 
int
úú 
.
úú  
Parse
úú  %
(
úú% &
data
úú& *
)
úú* +
;
úú+ ,
}
ûû 
catch
üü 
(
üü 
FormatException
üü " 
exceptNumberFormat
üü# 5
)
üü5 6
{
ýý 
IO
ÿÿ 
.
ÿÿ 
Logger
ÿÿ 
.
ÿÿ 
Log
ÿÿ 
(
ÿÿ 
NLog
ÿÿ "
.
ÿÿ" #
LogLevel
ÿÿ# +
.
ÿÿ+ ,
Warn
ÿÿ, 0
,
ÿÿ0 1 
exceptNumberFormat
ÿÿ2 D
,
ÿÿD E
$str
ÿÿF j
+
ÿÿk l 
exceptNumberFormat
ÿÿm 
)ÿÿ 
;ÿÿ 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} k
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_07.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_07 A
:B C
AbstractTestCaseD T
{ 
private!! 
int!! 
privateFive!! 
=!! 
$num!! 
;!!  
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
string%% 
data%% 
;%% 
if&& 

(&& 
privateFive&& 
==&& 
$num&& 
)&& 
{'' 	
data(( 
=(( 
$str(( 
;(( 
{** 
try++ 
{,, 
using.. 
(.. 
SqlConnection.. (

connection..) 3
=..4 5
IO..6 8
...8 9
GetDBConnection..9 H
(..H I
)..I J
)..J K
{// 

connection00 "
.00" #
Open00# '
(00' (
)00( )
;00) *
using22 
(22 

SqlCommand22 )
command22* 1
=222 3
new224 7

SqlCommand228 B
(22B C
null22C G
,22G H

connection22I S
)22S T
)22T U
{33 
command44 #
.44# $
CommandText44$ /
=440 1
$str442 U
;44U V
command55 #
.55# $
Prepare55$ +
(55+ ,
)55, -
;55- .
using66 !
(66" #
SqlDataReader66# 0
dr661 3
=664 5
command666 =
.66= >
ExecuteReader66> K
(66K L
)66L M
)66M N
{77 
data99  $
=99% &
dr99' )
.99) *
	GetString99* 3
(993 4
$num994 5
)995 6
;996 7
}:: 
};; 
}<< 
}== 
catch>> 
(>> 
SqlException>> #
	exceptSql>>$ -
)>>- .
{?? 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ !
(@@! "
NLog@@" &
.@@& '
LogLevel@@' /
.@@/ 0
Warn@@0 4
,@@4 5
	exceptSql@@6 ?
,@@? @
$str@@A [
)@@[ \
;@@\ ]
}AA 
}BB 
}CC 	
elseDD 
{EE 	
dataHH 
=HH 
nullHH 
;HH 
}II 	
ifJJ 

(JJ 
privateFiveJJ 
==JJ 
$numJJ 
)JJ 
{KK 	
tryLL 
{MM 
intNN 
valueNN 
=NN 
intNN 
.NN  
ParseNN  %
(NN% &
dataNN& *
)NN* +
;NN+ ,
}OO 
catchPP 
(PP 
FormatExceptionPP "
exceptNumberFormatPP# 5
)PP5 6
{QQ 
IOSS 
.SS 
LoggerSS 
.SS 
LogSS 
(SS 
NLogSS "
.SS" #
LogLevelSS# +
.SS+ ,
WarnSS, 0
,SS0 1
exceptNumberFormatSS2 D
,SSD E
$strSSF `
+SSa b
dataSSc g
)SSg h
;SSh i
}TT 
}UU 	
}VV 
privateZZ 
voidZZ 
GoodG2B1ZZ 
(ZZ 
)ZZ 
{[[ 
string\\ 
data\\ 
;\\ 
if]] 

(]] 
privateFive]] 
!=]] 
$num]] 
)]] 
{^^ 	
dataaa 
=aa 
nullaa 
;aa 
}bb 	
elsecc 
{dd 	
dataff 
=ff 
$strff 
;ff 
}gg 	
ifhh 

(hh 
privateFivehh 
==hh 
$numhh 
)hh 
{ii 	
tryjj 
{kk 
intll 
valuell 
=ll 
intll 
.ll  
Parsell  %
(ll% &
datall& *
)ll* +
;ll+ ,
}mm 
catchnn 
(nn 
FormatExceptionnn "
exceptNumberFormatnn# 5
)nn5 6
{oo 
IOqq 
.qq 
Loggerqq 
.qq 
Logqq 
(qq 
NLogqq "
.qq" #
LogLevelqq# +
.qq+ ,
Warnqq, 0
,qq0 1
exceptNumberFormatqq2 D
,qqD E
$strqqF `
+qqa b
dataqqc g
)qqg h
;qqh i
}rr 
}ss 	
}tt 
privateww 
voidww 
GoodG2B2ww 
(ww 
)ww 
{xx 
stringyy 
datayy 
;yy 
ifzz 

(zz 
privateFivezz 
==zz 
$numzz 
)zz 
{{{ 	
data}} 
=}} 
$str}} 
;}} 
}~~ 	
else 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
SqlConnection
 (

connection
) 3
=
4 5
IO
6 8
.
8 9
GetDBConnection
9 H
(
H I
)
I J
)
J K
{
   

connection
¡¡ "
.
¡¡" #
Open
¡¡# '
(
¡¡' (
)
¡¡( )
;
¡¡) *
using
££ 
(
££ 

SqlCommand
££ )
command
££* 1
=
££2 3
new
££4 7

SqlCommand
££8 B
(
££B C
null
££C G
,
££G H

connection
££I S
)
££S T
)
££T U
{
¤¤ 
command
¥¥ #
.
¥¥# $
CommandText
¥¥$ /
=
¥¥0 1
$str
¥¥2 U
;
¥¥U V
command
¦¦ #
.
¦¦# $
Prepare
¦¦$ +
(
¦¦+ ,
)
¦¦, -
;
¦¦- .
using
§§ !
(
§§" #
SqlDataReader
§§# 0
dr
§§1 3
=
§§4 5
command
§§6 =
.
§§= >
ExecuteReader
§§> K
(
§§K L
)
§§L M
)
§§M N
{
¨¨ 
data
ªª  $
=
ªª% &
dr
ªª' )
.
ªª) *
	GetString
ªª* 3
(
ªª3 4
$num
ªª4 5
)
ªª5 6
;
ªª6 7
}
«« 
}
¬¬ 
}
­­ 
}
®® 
catch
¯¯ 
(
¯¯ 
SqlException
¯¯ #
	exceptSql
¯¯$ -
)
¯¯- .
{
°° 
IO
±± 
.
±± 
Logger
±± 
.
±± 
Log
±± !
(
±±! "
NLog
±±" &
.
±±& '
LogLevel
±±' /
.
±±/ 0
Warn
±±0 4
,
±±4 5
	exceptSql
±±6 ?
,
±±? @
$str
±±A [
)
±±[ \
;
±±\ ]
}
²² 
}
³³ 
}
´´ 	
else
µµ 
{
¶¶ 	
data
¹¹ 
=
¹¹ 
null
¹¹ 
;
¹¹ 
}
ºº 	
if
»» 

(
»» 
privateFive
»» 
!=
»» 
$num
»» 
)
»» 
{
¼¼ 	
IO
¾¾ 
.
¾¾ 
	WriteLine
¾¾ 
(
¾¾ 
$str
¾¾ /
)
¾¾/ 0
;
¾¾0 1
}
¿¿ 	
else
ÀÀ 
{
ÁÁ 	
try
ÂÂ 
{
ÃÃ 
int
ÄÄ 
value
ÄÄ 
=
ÄÄ 
int
ÄÄ 
.
ÄÄ  
Parse
ÄÄ  %
(
ÄÄ% &
data
ÄÄ& *
)
ÄÄ* +
;
ÄÄ+ ,
}
ÅÅ 
catch
ÆÆ 
(
ÆÆ 
FormatException
ÆÆ " 
exceptNumberFormat
ÆÆ# 5
)
ÆÆ5 6
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
Logger
ÉÉ 
.
ÉÉ 
Log
ÉÉ 
(
ÉÉ 
NLog
ÉÉ "
.
ÉÉ" #
LogLevel
ÉÉ# +
.
ÉÉ+ ,
Warn
ÉÉ, 0
,
ÉÉ0 1 
exceptNumberFormat
ÉÉ2 D
,
ÉÉD E
$str
ÉÉF j
+
ÉÉk l 
exceptNumberFormat
ÉÉm 
)ÉÉ 
;ÉÉ 
}
ÊÊ 
}
ËË 	
}
ÌÌ 
private
ÏÏ 
void
ÏÏ 
GoodB2G2
ÏÏ 
(
ÏÏ 
)
ÏÏ 
{
ÐÐ 
string
ÑÑ 
data
ÑÑ 
;
ÑÑ 
if
ÒÒ 

(
ÒÒ 
privateFive
ÒÒ 
==
ÒÒ 
$num
ÒÒ 
)
ÒÒ 
{
ÓÓ 	
data
ÔÔ 
=
ÔÔ 
$str
ÔÔ 
;
ÔÔ 
{
ÖÖ 
try
×× 
{
ØØ 
using
ÚÚ 
(
ÚÚ 
SqlConnection
ÚÚ (

connection
ÚÚ) 3
=
ÚÚ4 5
IO
ÚÚ6 8
.
ÚÚ8 9
GetDBConnection
ÚÚ9 H
(
ÚÚH I
)
ÚÚI J
)
ÚÚJ K
{
ÛÛ 

connection
ÜÜ "
.
ÜÜ" #
Open
ÜÜ# '
(
ÜÜ' (
)
ÜÜ( )
;
ÜÜ) *
using
ÞÞ 
(
ÞÞ 

SqlCommand
ÞÞ )
command
ÞÞ* 1
=
ÞÞ2 3
new
ÞÞ4 7

SqlCommand
ÞÞ8 B
(
ÞÞB C
null
ÞÞC G
,
ÞÞG H

connection
ÞÞI S
)
ÞÞS T
)
ÞÞT U
{
ßß 
command
àà #
.
àà# $
CommandText
àà$ /
=
àà0 1
$str
àà2 U
;
ààU V
command
áá #
.
áá# $
Prepare
áá$ +
(
áá+ ,
)
áá, -
;
áá- .
using
ââ !
(
ââ" #
SqlDataReader
ââ# 0
dr
ââ1 3
=
ââ4 5
command
ââ6 =
.
ââ= >
ExecuteReader
ââ> K
(
ââK L
)
ââL M
)
ââM N
{
ãã 
data
åå  $
=
åå% &
dr
åå' )
.
åå) *
	GetString
åå* 3
(
åå3 4
$num
åå4 5
)
åå5 6
;
åå6 7
}
ææ 
}
çç 
}
èè 
}
éé 
catch
êê 
(
êê 
SqlException
êê #
	exceptSql
êê$ -
)
êê- .
{
ëë 
IO
ìì 
.
ìì 
Logger
ìì 
.
ìì 
Log
ìì !
(
ìì! "
NLog
ìì" &
.
ìì& '
LogLevel
ìì' /
.
ìì/ 0
Warn
ìì0 4
,
ìì4 5
	exceptSql
ìì6 ?
,
ìì? @
$str
ììA [
)
ìì[ \
;
ìì\ ]
}
íí 
}
îî 
}
ïï 	
else
ðð 
{
ññ 	
data
ôô 
=
ôô 
null
ôô 
;
ôô 
}
õõ 	
if
öö 

(
öö 
privateFive
öö 
==
öö 
$num
öö 
)
öö 
{
÷÷ 	
try
øø 
{
ùù 
int
úú 
value
úú 
=
úú 
int
úú 
.
úú  
Parse
úú  %
(
úú% &
data
úú& *
)
úú* +
;
úú+ ,
}
ûû 
catch
üü 
(
üü 
FormatException
üü " 
exceptNumberFormat
üü# 5
)
üü5 6
{
ýý 
IO
ÿÿ 
.
ÿÿ 
Logger
ÿÿ 
.
ÿÿ 
Log
ÿÿ 
(
ÿÿ 
NLog
ÿÿ "
.
ÿÿ" #
LogLevel
ÿÿ# +
.
ÿÿ+ ,
Warn
ÿÿ, 0
,
ÿÿ0 1 
exceptNumberFormat
ÿÿ2 D
,
ÿÿD E
$str
ÿÿF j
+
ÿÿk l 
exceptNumberFormat
ÿÿm 
)ÿÿ 
;ÿÿ 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} ðm
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_08.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_08 A
:B C
AbstractTestCaseD T
{ 
private!! 
static!! 
bool!! 
PrivateReturnsTrue!! *
(!!* +
)!!+ ,
{"" 
return## 
true## 
;## 
}$$ 
private&& 
static&& 
bool&& 
PrivateReturnsFalse&& +
(&&+ ,
)&&, -
{'' 
return(( 
false(( 
;(( 
})) 
public++ 

override++ 
void++ 
Bad++ 
(++ 
)++ 
{,, 
string-- 
data-- 
;-- 
if.. 

(.. 
PrivateReturnsTrue.. 
(.. 
)..  
)..  !
{// 	
data00 
=00 
$str00 
;00 
{22 
try33 
{44 
using66 
(66 
SqlConnection66 (

connection66) 3
=664 5
IO666 8
.668 9
GetDBConnection669 H
(66H I
)66I J
)66J K
{77 

connection88 "
.88" #
Open88# '
(88' (
)88( )
;88) *
using:: 
(:: 

SqlCommand:: )
command::* 1
=::2 3
new::4 7

SqlCommand::8 B
(::B C
null::C G
,::G H

connection::I S
)::S T
)::T U
{;; 
command<< #
.<<# $
CommandText<<$ /
=<<0 1
$str<<2 U
;<<U V
command== #
.==# $
Prepare==$ +
(==+ ,
)==, -
;==- .
using>> !
(>>" #
SqlDataReader>># 0
dr>>1 3
=>>4 5
command>>6 =
.>>= >
ExecuteReader>>> K
(>>K L
)>>L M
)>>M N
{?? 
dataAA  $
=AA% &
drAA' )
.AA) *
	GetStringAA* 3
(AA3 4
$numAA4 5
)AA5 6
;AA6 7
}BB 
}CC 
}DD 
}EE 
catchFF 
(FF 
SqlExceptionFF #
	exceptSqlFF$ -
)FF- .
{GG 
IOHH 
.HH 
LoggerHH 
.HH 
LogHH !
(HH! "
NLogHH" &
.HH& '
LogLevelHH' /
.HH/ 0
WarnHH0 4
,HH4 5
	exceptSqlHH6 ?
,HH? @
$strHHA [
)HH[ \
;HH\ ]
}II 
}JJ 
}KK 	
elseLL 
{MM 	
dataPP 
=PP 
nullPP 
;PP 
}QQ 	
ifRR 

(RR 
PrivateReturnsTrueRR 
(RR 
)RR  
)RR  !
{SS 	
tryTT 
{UU 
intVV 
valueVV 
=VV 
intVV 
.VV  
ParseVV  %
(VV% &
dataVV& *
)VV* +
;VV+ ,
}WW 
catchXX 
(XX 
FormatExceptionXX "
exceptNumberFormatXX# 5
)XX5 6
{YY 
IO[[ 
.[[ 
Logger[[ 
.[[ 
Log[[ 
([[ 
NLog[[ "
.[[" #
LogLevel[[# +
.[[+ ,
Warn[[, 0
,[[0 1
exceptNumberFormat[[2 D
,[[D E
$str[[F `
+[[a b
data[[c g
)[[g h
;[[h i
}\\ 
}]] 	
}^^ 
privatebb 
voidbb 
GoodG2B1bb 
(bb 
)bb 
{cc 
stringdd 
datadd 
;dd 
ifee 

(ee 
PrivateReturnsFalseee 
(ee  
)ee  !
)ee! "
{ff 	
dataii 
=ii 
nullii 
;ii 
}jj 	
elsekk 
{ll 	
datann 
=nn 
$strnn 
;nn 
}oo 	
ifpp 

(pp 
PrivateReturnsTruepp 
(pp 
)pp  
)pp  !
{qq 	
tryrr 
{ss 
inttt 
valuett 
=tt 
inttt 
.tt  
Parsett  %
(tt% &
datatt& *
)tt* +
;tt+ ,
}uu 
catchvv 
(vv 
FormatExceptionvv "
exceptNumberFormatvv# 5
)vv5 6
{ww 
IOyy 
.yy 
Loggeryy 
.yy 
Logyy 
(yy 
NLogyy "
.yy" #
LogLevelyy# +
.yy+ ,
Warnyy, 0
,yy0 1
exceptNumberFormatyy2 D
,yyD E
$stryyF `
+yya b
datayyc g
)yyg h
;yyh i
}zz 
}{{ 	
}|| 
private 
void 
GoodG2B2 
( 
) 
{
 
string
 
data
 
;
 
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
   	
data
¡¡ 
=
¡¡ 
$str
¡¡ 
;
¡¡ 
{
££ 
try
¤¤ 
{
¥¥ 
using
§§ 
(
§§ 
SqlConnection
§§ (

connection
§§) 3
=
§§4 5
IO
§§6 8
.
§§8 9
GetDBConnection
§§9 H
(
§§H I
)
§§I J
)
§§J K
{
¨¨ 

connection
©© "
.
©©" #
Open
©©# '
(
©©' (
)
©©( )
;
©©) *
using
«« 
(
«« 

SqlCommand
«« )
command
««* 1
=
««2 3
new
««4 7

SqlCommand
««8 B
(
««B C
null
««C G
,
««G H

connection
««I S
)
««S T
)
««T U
{
¬¬ 
command
­­ #
.
­­# $
CommandText
­­$ /
=
­­0 1
$str
­­2 U
;
­­U V
command
®® #
.
®®# $
Prepare
®®$ +
(
®®+ ,
)
®®, -
;
®®- .
using
¯¯ !
(
¯¯" #
SqlDataReader
¯¯# 0
dr
¯¯1 3
=
¯¯4 5
command
¯¯6 =
.
¯¯= >
ExecuteReader
¯¯> K
(
¯¯K L
)
¯¯L M
)
¯¯M N
{
°° 
data
²²  $
=
²²% &
dr
²²' )
.
²²) *
	GetString
²²* 3
(
²²3 4
$num
²²4 5
)
²²5 6
;
²²6 7
}
³³ 
}
´´ 
}
µµ 
}
¶¶ 
catch
·· 
(
·· 
SqlException
·· #
	exceptSql
··$ -
)
··- .
{
¸¸ 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ !
(
¹¹! "
NLog
¹¹" &
.
¹¹& '
LogLevel
¹¹' /
.
¹¹/ 0
Warn
¹¹0 4
,
¹¹4 5
	exceptSql
¹¹6 ?
,
¹¹? @
$str
¹¹A [
)
¹¹[ \
;
¹¹\ ]
}
ºº 
}
»» 
}
¼¼ 	
else
½½ 
{
¾¾ 	
data
ÁÁ 
=
ÁÁ 
null
ÁÁ 
;
ÁÁ 
}
ÂÂ 	
if
ÃÃ 

(
ÃÃ !
PrivateReturnsFalse
ÃÃ 
(
ÃÃ  
)
ÃÃ  !
)
ÃÃ! "
{
ÄÄ 	
IO
ÆÆ 
.
ÆÆ 
	WriteLine
ÆÆ 
(
ÆÆ 
$str
ÆÆ /
)
ÆÆ/ 0
;
ÆÆ0 1
}
ÇÇ 	
else
ÈÈ 
{
ÉÉ 	
try
ÊÊ 
{
ËË 
int
ÌÌ 
value
ÌÌ 
=
ÌÌ 
int
ÌÌ 
.
ÌÌ  
Parse
ÌÌ  %
(
ÌÌ% &
data
ÌÌ& *
)
ÌÌ* +
;
ÌÌ+ ,
}
ÍÍ 
catch
ÎÎ 
(
ÎÎ 
FormatException
ÎÎ " 
exceptNumberFormat
ÎÎ# 5
)
ÎÎ5 6
{
ÏÏ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ 
.
ÑÑ 
Log
ÑÑ 
(
ÑÑ 
NLog
ÑÑ "
.
ÑÑ" #
LogLevel
ÑÑ# +
.
ÑÑ+ ,
Warn
ÑÑ, 0
,
ÑÑ0 1 
exceptNumberFormat
ÑÑ2 D
,
ÑÑD E
$str
ÑÑF j
+
ÑÑk l 
exceptNumberFormat
ÑÑm 
)ÑÑ 
;ÑÑ 
}
ÒÒ 
}
ÓÓ 	
}
ÔÔ 
private
×× 
void
×× 
GoodB2G2
×× 
(
×× 
)
×× 
{
ØØ 
string
ÙÙ 
data
ÙÙ 
;
ÙÙ 
if
ÚÚ 

(
ÚÚ  
PrivateReturnsTrue
ÚÚ 
(
ÚÚ 
)
ÚÚ  
)
ÚÚ  !
{
ÛÛ 	
data
ÜÜ 
=
ÜÜ 
$str
ÜÜ 
;
ÜÜ 
{
ÞÞ 
try
ßß 
{
àà 
using
ââ 
(
ââ 
SqlConnection
ââ (

connection
ââ) 3
=
ââ4 5
IO
ââ6 8
.
ââ8 9
GetDBConnection
ââ9 H
(
ââH I
)
ââI J
)
ââJ K
{
ãã 

connection
ää "
.
ää" #
Open
ää# '
(
ää' (
)
ää( )
;
ää) *
using
ææ 
(
ææ 

SqlCommand
ææ )
command
ææ* 1
=
ææ2 3
new
ææ4 7

SqlCommand
ææ8 B
(
ææB C
null
ææC G
,
ææG H

connection
ææI S
)
ææS T
)
ææT U
{
çç 
command
èè #
.
èè# $
CommandText
èè$ /
=
èè0 1
$str
èè2 U
;
èèU V
command
éé #
.
éé# $
Prepare
éé$ +
(
éé+ ,
)
éé, -
;
éé- .
using
êê !
(
êê" #
SqlDataReader
êê# 0
dr
êê1 3
=
êê4 5
command
êê6 =
.
êê= >
ExecuteReader
êê> K
(
êêK L
)
êêL M
)
êêM N
{
ëë 
data
íí  $
=
íí% &
dr
íí' )
.
íí) *
	GetString
íí* 3
(
íí3 4
$num
íí4 5
)
íí5 6
;
íí6 7
}
îî 
}
ïï 
}
ðð 
}
ññ 
catch
òò 
(
òò 
SqlException
òò #
	exceptSql
òò$ -
)
òò- .
{
óó 
IO
ôô 
.
ôô 
Logger
ôô 
.
ôô 
Log
ôô !
(
ôô! "
NLog
ôô" &
.
ôô& '
LogLevel
ôô' /
.
ôô/ 0
Warn
ôô0 4
,
ôô4 5
	exceptSql
ôô6 ?
,
ôô? @
$str
ôôA [
)
ôô[ \
;
ôô\ ]
}
õõ 
}
öö 
}
÷÷ 	
else
øø 
{
ùù 	
data
üü 
=
üü 
null
üü 
;
üü 
}
ýý 	
if
þþ 

(
þþ  
PrivateReturnsTrue
þþ 
(
þþ 
)
þþ  
)
þþ  !
{
ÿÿ 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} Æj
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_09.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_09 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!!  
STATIC_READONLY_TRUE!! #
)!!# $
{"" 	
data## 
=## 
$str## 
;## 
{%% 
try&& 
{'' 
using)) 
()) 
SqlConnection)) (

connection))) 3
=))4 5
IO))6 8
.))8 9
GetDBConnection))9 H
())H I
)))I J
)))J K
{** 

connection++ "
.++" #
Open++# '
(++' (
)++( )
;++) *
using-- 
(-- 

SqlCommand-- )
command--* 1
=--2 3
new--4 7

SqlCommand--8 B
(--B C
null--C G
,--G H

connection--I S
)--S T
)--T U
{.. 
command// #
.//# $
CommandText//$ /
=//0 1
$str//2 U
;//U V
command00 #
.00# $
Prepare00$ +
(00+ ,
)00, -
;00- .
using11 !
(11" #
SqlDataReader11# 0
dr111 3
=114 5
command116 =
.11= >
ExecuteReader11> K
(11K L
)11L M
)11M N
{22 
data44  $
=44% &
dr44' )
.44) *
	GetString44* 3
(443 4
$num444 5
)445 6
;446 7
}55 
}66 
}77 
}88 
catch99 
(99 
SqlException99 #
	exceptSql99$ -
)99- .
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
	exceptSql;;6 ?
,;;? @
$str;;A [
);;[ \
;;;\ ]
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataCC 
=CC 
nullCC 
;CC 
}DD 	
ifEE 

(EE 
IOEE 
.EE  
STATIC_READONLY_TRUEEE #
)EE# $
{FF 	
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateUU 
voidUU 
GoodG2B1UU 
(UU 
)UU 
{VV 
stringWW 
dataWW 
;WW 
ifXX 

(XX 
IOXX 
.XX !
STATIC_READONLY_FALSEXX $
)XX$ %
{YY 	
data\\ 
=\\ 
null\\ 
;\\ 
}]] 	
else^^ 
{__ 	
dataaa 
=aa 
$straa 
;aa 
}bb 	
ifcc 

(cc 
IOcc 
.cc  
STATIC_READONLY_TRUEcc #
)cc# $
{dd 	
tryee 
{ff 
intgg 
valuegg 
=gg 
intgg 
.gg  
Parsegg  %
(gg% &
datagg& *
)gg* +
;gg+ ,
}hh 
catchii 
(ii 
FormatExceptionii "
exceptNumberFormatii# 5
)ii5 6
{jj 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptNumberFormatll2 D
,llD E
$strllF `
+lla b
datallc g
)llg h
;llh i
}mm 
}nn 	
}oo 
privaterr 
voidrr 
GoodG2B2rr 
(rr 
)rr 
{ss 
stringtt 
datatt 
;tt 
ifuu 

(uu 
IOuu 
.uu  
STATIC_READONLY_TRUEuu #
)uu# $
{vv 	
dataxx 
=xx 
$strxx 
;xx 
}yy 	
elsezz 
{{{ 	
data~~ 
=~~ 
null~~ 
;~~ 
} 	
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
SqlConnection
 (

connection
) 3
=
4 5
IO
6 8
.
8 9
GetDBConnection
9 H
(
H I
)
I J
)
J K
{
 

connection
 "
.
" #
Open
# '
(
' (
)
( )
;
) *
using
 
(
 

SqlCommand
 )
command
* 1
=
2 3
new
4 7

SqlCommand
8 B
(
B C
null
C G
,
G H

connection
I S
)
S T
)
T U
{
 
command
   #
.
  # $
CommandText
  $ /
=
  0 1
$str
  2 U
;
  U V
command
¡¡ #
.
¡¡# $
Prepare
¡¡$ +
(
¡¡+ ,
)
¡¡, -
;
¡¡- .
using
¢¢ !
(
¢¢" #
SqlDataReader
¢¢# 0
dr
¢¢1 3
=
¢¢4 5
command
¢¢6 =
.
¢¢= >
ExecuteReader
¢¢> K
(
¢¢K L
)
¢¢L M
)
¢¢M N
{
££ 
data
¥¥  $
=
¥¥% &
dr
¥¥' )
.
¥¥) *
	GetString
¥¥* 3
(
¥¥3 4
$num
¥¥4 5
)
¥¥5 6
;
¥¥6 7
}
¦¦ 
}
§§ 
}
¨¨ 
}
©© 
catch
ªª 
(
ªª 
SqlException
ªª #
	exceptSql
ªª$ -
)
ªª- .
{
«« 
IO
¬¬ 
.
¬¬ 
Logger
¬¬ 
.
¬¬ 
Log
¬¬ !
(
¬¬! "
NLog
¬¬" &
.
¬¬& '
LogLevel
¬¬' /
.
¬¬/ 0
Warn
¬¬0 4
,
¬¬4 5
	exceptSql
¬¬6 ?
,
¬¬? @
$str
¬¬A [
)
¬¬[ \
;
¬¬\ ]
}
­­ 
}
®® 
}
¯¯ 	
else
°° 
{
±± 	
data
´´ 
=
´´ 
null
´´ 
;
´´ 
}
µµ 	
if
¶¶ 

(
¶¶ 
IO
¶¶ 
.
¶¶ #
STATIC_READONLY_FALSE
¶¶ $
)
¶¶$ %
{
·· 	
IO
¹¹ 
.
¹¹ 
	WriteLine
¹¹ 
(
¹¹ 
$str
¹¹ /
)
¹¹/ 0
;
¹¹0 1
}
ºº 	
else
»» 
{
¼¼ 	
try
½½ 
{
¾¾ 
int
¿¿ 
value
¿¿ 
=
¿¿ 
int
¿¿ 
.
¿¿  
Parse
¿¿  %
(
¿¿% &
data
¿¿& *
)
¿¿* +
;
¿¿+ ,
}
ÀÀ 
catch
ÁÁ 
(
ÁÁ 
FormatException
ÁÁ " 
exceptNumberFormat
ÁÁ# 5
)
ÁÁ5 6
{
ÂÂ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ 
.
ÄÄ 
Log
ÄÄ 
(
ÄÄ 
NLog
ÄÄ "
.
ÄÄ" #
LogLevel
ÄÄ# +
.
ÄÄ+ ,
Warn
ÄÄ, 0
,
ÄÄ0 1 
exceptNumberFormat
ÄÄ2 D
,
ÄÄD E
$str
ÄÄF j
+
ÄÄk l 
exceptNumberFormat
ÄÄm 
)ÄÄ 
;ÄÄ 
}
ÅÅ 
}
ÆÆ 	
}
ÇÇ 
private
ÊÊ 
void
ÊÊ 
GoodB2G2
ÊÊ 
(
ÊÊ 
)
ÊÊ 
{
ËË 
string
ÌÌ 
data
ÌÌ 
;
ÌÌ 
if
ÍÍ 

(
ÍÍ 
IO
ÍÍ 
.
ÍÍ "
STATIC_READONLY_TRUE
ÍÍ #
)
ÍÍ# $
{
ÎÎ 	
data
ÏÏ 
=
ÏÏ 
$str
ÏÏ 
;
ÏÏ 
{
ÑÑ 
try
ÒÒ 
{
ÓÓ 
using
ÕÕ 
(
ÕÕ 
SqlConnection
ÕÕ (

connection
ÕÕ) 3
=
ÕÕ4 5
IO
ÕÕ6 8
.
ÕÕ8 9
GetDBConnection
ÕÕ9 H
(
ÕÕH I
)
ÕÕI J
)
ÕÕJ K
{
ÖÖ 

connection
×× "
.
××" #
Open
××# '
(
××' (
)
××( )
;
××) *
using
ÙÙ 
(
ÙÙ 

SqlCommand
ÙÙ )
command
ÙÙ* 1
=
ÙÙ2 3
new
ÙÙ4 7

SqlCommand
ÙÙ8 B
(
ÙÙB C
null
ÙÙC G
,
ÙÙG H

connection
ÙÙI S
)
ÙÙS T
)
ÙÙT U
{
ÚÚ 
command
ÛÛ #
.
ÛÛ# $
CommandText
ÛÛ$ /
=
ÛÛ0 1
$str
ÛÛ2 U
;
ÛÛU V
command
ÜÜ #
.
ÜÜ# $
Prepare
ÜÜ$ +
(
ÜÜ+ ,
)
ÜÜ, -
;
ÜÜ- .
using
ÝÝ !
(
ÝÝ" #
SqlDataReader
ÝÝ# 0
dr
ÝÝ1 3
=
ÝÝ4 5
command
ÝÝ6 =
.
ÝÝ= >
ExecuteReader
ÝÝ> K
(
ÝÝK L
)
ÝÝL M
)
ÝÝM N
{
ÞÞ 
data
àà  $
=
àà% &
dr
àà' )
.
àà) *
	GetString
àà* 3
(
àà3 4
$num
àà4 5
)
àà5 6
;
àà6 7
}
áá 
}
ââ 
}
ãã 
}
ää 
catch
åå 
(
åå 
SqlException
åå #
	exceptSql
åå$ -
)
åå- .
{
ææ 
IO
çç 
.
çç 
Logger
çç 
.
çç 
Log
çç !
(
çç! "
NLog
çç" &
.
çç& '
LogLevel
çç' /
.
çç/ 0
Warn
çç0 4
,
çç4 5
	exceptSql
çç6 ?
,
çç? @
$str
ççA [
)
çç[ \
;
çç\ ]
}
èè 
}
éé 
}
êê 	
else
ëë 
{
ìì 	
data
ïï 
=
ïï 
null
ïï 
;
ïï 
}
ðð 	
if
ññ 

(
ññ 
IO
ññ 
.
ññ "
STATIC_READONLY_TRUE
ññ #
)
ññ# $
{
òò 	
try
óó 
{
ôô 
int
õõ 
value
õõ 
=
õõ 
int
õõ 
.
õõ  
Parse
õõ  %
(
õõ% &
data
õõ& *
)
õõ* +
;
õõ+ ,
}
öö 
catch
÷÷ 
(
÷÷ 
FormatException
÷÷ " 
exceptNumberFormat
÷÷# 5
)
÷÷5 6
{
øø 
IO
úú 
.
úú 
Logger
úú 
.
úú 
Log
úú 
(
úú 
NLog
úú "
.
úú" #
LogLevel
úú# +
.
úú+ ,
Warn
úú, 0
,
úú0 1 
exceptNumberFormat
úú2 D
,
úúD E
$str
úúF j
+
úúk l 
exceptNumberFormat
úúm 
)úú 
;úú 
}
ûû 
}
üü 	
}
ýý 
public
ÿÿ 

override
ÿÿ 
void
ÿÿ 
Good
ÿÿ 
(
ÿÿ 
)
ÿÿ 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} âi
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_10.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_10 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!! 

staticTrue!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{%% 
try&& 
{'' 
using)) 
()) 
SqlConnection)) (

connection))) 3
=))4 5
IO))6 8
.))8 9
GetDBConnection))9 H
())H I
)))I J
)))J K
{** 

connection++ "
.++" #
Open++# '
(++' (
)++( )
;++) *
using-- 
(-- 

SqlCommand-- )
command--* 1
=--2 3
new--4 7

SqlCommand--8 B
(--B C
null--C G
,--G H

connection--I S
)--S T
)--T U
{.. 
command// #
.//# $
CommandText//$ /
=//0 1
$str//2 U
;//U V
command00 #
.00# $
Prepare00$ +
(00+ ,
)00, -
;00- .
using11 !
(11" #
SqlDataReader11# 0
dr111 3
=114 5
command116 =
.11= >
ExecuteReader11> K
(11K L
)11L M
)11M N
{22 
data44  $
=44% &
dr44' )
.44) *
	GetString44* 3
(443 4
$num444 5
)445 6
;446 7
}55 
}66 
}77 
}88 
catch99 
(99 
SqlException99 #
	exceptSql99$ -
)99- .
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
	exceptSql;;6 ?
,;;? @
$str;;A [
);;[ \
;;;\ ]
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataCC 
=CC 
nullCC 
;CC 
}DD 	
ifEE 

(EE 
IOEE 
.EE 

staticTrueEE 
)EE 
{FF 	
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateUU 
voidUU 
GoodG2B1UU 
(UU 
)UU 
{VV 
stringWW 
dataWW 
;WW 
ifXX 

(XX 
IOXX 
.XX 
staticFalseXX 
)XX 
{YY 	
data\\ 
=\\ 
null\\ 
;\\ 
}]] 	
else^^ 
{__ 	
dataaa 
=aa 
$straa 
;aa 
}bb 	
ifcc 

(cc 
IOcc 
.cc 

staticTruecc 
)cc 
{dd 	
tryee 
{ff 
intgg 
valuegg 
=gg 
intgg 
.gg  
Parsegg  %
(gg% &
datagg& *
)gg* +
;gg+ ,
}hh 
catchii 
(ii 
FormatExceptionii "
exceptNumberFormatii# 5
)ii5 6
{jj 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptNumberFormatll2 D
,llD E
$strllF `
+lla b
datallc g
)llg h
;llh i
}mm 
}nn 	
}oo 
privaterr 
voidrr 
GoodG2B2rr 
(rr 
)rr 
{ss 
stringtt 
datatt 
;tt 
ifuu 

(uu 
IOuu 
.uu 

staticTrueuu 
)uu 
{vv 	
dataxx 
=xx 
$strxx 
;xx 
}yy 	
elsezz 
{{{ 	
data~~ 
=~~ 
null~~ 
;~~ 
} 	
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
SqlConnection
 (

connection
) 3
=
4 5
IO
6 8
.
8 9
GetDBConnection
9 H
(
H I
)
I J
)
J K
{
 

connection
 "
.
" #
Open
# '
(
' (
)
( )
;
) *
using
 
(
 

SqlCommand
 )
command
* 1
=
2 3
new
4 7

SqlCommand
8 B
(
B C
null
C G
,
G H

connection
I S
)
S T
)
T U
{
 
command
   #
.
  # $
CommandText
  $ /
=
  0 1
$str
  2 U
;
  U V
command
¡¡ #
.
¡¡# $
Prepare
¡¡$ +
(
¡¡+ ,
)
¡¡, -
;
¡¡- .
using
¢¢ !
(
¢¢" #
SqlDataReader
¢¢# 0
dr
¢¢1 3
=
¢¢4 5
command
¢¢6 =
.
¢¢= >
ExecuteReader
¢¢> K
(
¢¢K L
)
¢¢L M
)
¢¢M N
{
££ 
data
¥¥  $
=
¥¥% &
dr
¥¥' )
.
¥¥) *
	GetString
¥¥* 3
(
¥¥3 4
$num
¥¥4 5
)
¥¥5 6
;
¥¥6 7
}
¦¦ 
}
§§ 
}
¨¨ 
}
©© 
catch
ªª 
(
ªª 
SqlException
ªª #
	exceptSql
ªª$ -
)
ªª- .
{
«« 
IO
¬¬ 
.
¬¬ 
Logger
¬¬ 
.
¬¬ 
Log
¬¬ !
(
¬¬! "
NLog
¬¬" &
.
¬¬& '
LogLevel
¬¬' /
.
¬¬/ 0
Warn
¬¬0 4
,
¬¬4 5
	exceptSql
¬¬6 ?
,
¬¬? @
$str
¬¬A [
)
¬¬[ \
;
¬¬\ ]
}
­­ 
}
®® 
}
¯¯ 	
else
°° 
{
±± 	
data
´´ 
=
´´ 
null
´´ 
;
´´ 
}
µµ 	
if
¶¶ 

(
¶¶ 
IO
¶¶ 
.
¶¶ 
staticFalse
¶¶ 
)
¶¶ 
{
·· 	
IO
¹¹ 
.
¹¹ 
	WriteLine
¹¹ 
(
¹¹ 
$str
¹¹ /
)
¹¹/ 0
;
¹¹0 1
}
ºº 	
else
»» 
{
¼¼ 	
try
½½ 
{
¾¾ 
int
¿¿ 
value
¿¿ 
=
¿¿ 
int
¿¿ 
.
¿¿  
Parse
¿¿  %
(
¿¿% &
data
¿¿& *
)
¿¿* +
;
¿¿+ ,
}
ÀÀ 
catch
ÁÁ 
(
ÁÁ 
FormatException
ÁÁ " 
exceptNumberFormat
ÁÁ# 5
)
ÁÁ5 6
{
ÂÂ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ 
.
ÄÄ 
Log
ÄÄ 
(
ÄÄ 
NLog
ÄÄ "
.
ÄÄ" #
LogLevel
ÄÄ# +
.
ÄÄ+ ,
Warn
ÄÄ, 0
,
ÄÄ0 1 
exceptNumberFormat
ÄÄ2 D
,
ÄÄD E
$str
ÄÄF j
+
ÄÄk l 
exceptNumberFormat
ÄÄm 
)ÄÄ 
;ÄÄ 
}
ÅÅ 
}
ÆÆ 	
}
ÇÇ 
private
ÊÊ 
void
ÊÊ 
GoodB2G2
ÊÊ 
(
ÊÊ 
)
ÊÊ 
{
ËË 
string
ÌÌ 
data
ÌÌ 
;
ÌÌ 
if
ÍÍ 

(
ÍÍ 
IO
ÍÍ 
.
ÍÍ 

staticTrue
ÍÍ 
)
ÍÍ 
{
ÎÎ 	
data
ÏÏ 
=
ÏÏ 
$str
ÏÏ 
;
ÏÏ 
{
ÑÑ 
try
ÒÒ 
{
ÓÓ 
using
ÕÕ 
(
ÕÕ 
SqlConnection
ÕÕ (

connection
ÕÕ) 3
=
ÕÕ4 5
IO
ÕÕ6 8
.
ÕÕ8 9
GetDBConnection
ÕÕ9 H
(
ÕÕH I
)
ÕÕI J
)
ÕÕJ K
{
ÖÖ 

connection
×× "
.
××" #
Open
××# '
(
××' (
)
××( )
;
××) *
using
ÙÙ 
(
ÙÙ 

SqlCommand
ÙÙ )
command
ÙÙ* 1
=
ÙÙ2 3
new
ÙÙ4 7

SqlCommand
ÙÙ8 B
(
ÙÙB C
null
ÙÙC G
,
ÙÙG H

connection
ÙÙI S
)
ÙÙS T
)
ÙÙT U
{
ÚÚ 
command
ÛÛ #
.
ÛÛ# $
CommandText
ÛÛ$ /
=
ÛÛ0 1
$str
ÛÛ2 U
;
ÛÛU V
command
ÜÜ #
.
ÜÜ# $
Prepare
ÜÜ$ +
(
ÜÜ+ ,
)
ÜÜ, -
;
ÜÜ- .
using
ÝÝ !
(
ÝÝ" #
SqlDataReader
ÝÝ# 0
dr
ÝÝ1 3
=
ÝÝ4 5
command
ÝÝ6 =
.
ÝÝ= >
ExecuteReader
ÝÝ> K
(
ÝÝK L
)
ÝÝL M
)
ÝÝM N
{
ÞÞ 
data
àà  $
=
àà% &
dr
àà' )
.
àà) *
	GetString
àà* 3
(
àà3 4
$num
àà4 5
)
àà5 6
;
àà6 7
}
áá 
}
ââ 
}
ãã 
}
ää 
catch
åå 
(
åå 
SqlException
åå #
	exceptSql
åå$ -
)
åå- .
{
ææ 
IO
çç 
.
çç 
Logger
çç 
.
çç 
Log
çç !
(
çç! "
NLog
çç" &
.
çç& '
LogLevel
çç' /
.
çç/ 0
Warn
çç0 4
,
çç4 5
	exceptSql
çç6 ?
,
çç? @
$str
ççA [
)
çç[ \
;
çç\ ]
}
èè 
}
éé 
}
êê 	
else
ëë 
{
ìì 	
data
ïï 
=
ïï 
null
ïï 
;
ïï 
}
ðð 	
if
ññ 

(
ññ 
IO
ññ 
.
ññ 

staticTrue
ññ 
)
ññ 
{
òò 	
try
óó 
{
ôô 
int
õõ 
value
õõ 
=
õõ 
int
õõ 
.
õõ  
Parse
õõ  %
(
õõ% &
data
õõ& *
)
õõ* +
;
õõ+ ,
}
öö 
catch
÷÷ 
(
÷÷ 
FormatException
÷÷ " 
exceptNumberFormat
÷÷# 5
)
÷÷5 6
{
øø 
IO
úú 
.
úú 
Logger
úú 
.
úú 
Log
úú 
(
úú 
NLog
úú "
.
úú" #
LogLevel
úú# +
.
úú+ ,
Warn
úú, 0
,
úú0 1 
exceptNumberFormat
úú2 D
,
úúD E
$str
úúF j
+
úúk l 
exceptNumberFormat
úúm 
)úú 
;úú 
}
ûû 
}
üü 	
}
ýý 
public
ÿÿ 

override
ÿÿ 
void
ÿÿ 
Good
ÿÿ 
(
ÿÿ 
)
ÿÿ 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} èl
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_11.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_11 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!! 
StaticReturnsTrue!!  
(!!  !
)!!! "
)!!" #
{"" 	
data## 
=## 
$str## 
;## 
{%% 
try&& 
{'' 
using)) 
()) 
SqlConnection)) (

connection))) 3
=))4 5
IO))6 8
.))8 9
GetDBConnection))9 H
())H I
)))I J
)))J K
{** 

connection++ "
.++" #
Open++# '
(++' (
)++( )
;++) *
using-- 
(-- 

SqlCommand-- )
command--* 1
=--2 3
new--4 7

SqlCommand--8 B
(--B C
null--C G
,--G H

connection--I S
)--S T
)--T U
{.. 
command// #
.//# $
CommandText//$ /
=//0 1
$str//2 U
;//U V
command00 #
.00# $
Prepare00$ +
(00+ ,
)00, -
;00- .
using11 !
(11" #
SqlDataReader11# 0
dr111 3
=114 5
command116 =
.11= >
ExecuteReader11> K
(11K L
)11L M
)11M N
{22 
data44  $
=44% &
dr44' )
.44) *
	GetString44* 3
(443 4
$num444 5
)445 6
;446 7
}55 
}66 
}77 
}88 
catch99 
(99 
SqlException99 #
	exceptSql99$ -
)99- .
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
	exceptSql;;6 ?
,;;? @
$str;;A [
);;[ \
;;;\ ]
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataCC 
=CC 
nullCC 
;CC 
}DD 	
ifEE 

(EE
 
IOEE 
.EE 
StaticReturnsTrueEE 
(EE  
)EE  !
)EE! "
{FF 	
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateUU 
voidUU 
GoodG2B1UU 
(UU 
)UU 
{VV 
stringWW 
dataWW 
;WW 
ifXX 

(XX 
IOXX 
.XX 
StaticReturnsFalseXX !
(XX! "
)XX" #
)XX# $
{YY 	
data\\ 
=\\ 
null\\ 
;\\ 
}]] 	
else^^ 
{__ 	
dataaa 
=aa 
$straa 
;aa 
}bb 	
ifcc 

(cc 
IOcc 
.cc 
StaticReturnsTruecc  
(cc  !
)cc! "
)cc" #
{dd 	
tryee 
{ff 
intgg 
valuegg 
=gg 
intgg 
.gg  
Parsegg  %
(gg% &
datagg& *
)gg* +
;gg+ ,
}hh 
catchii 
(ii 
FormatExceptionii "
exceptNumberFormatii# 5
)ii5 6
{jj 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptNumberFormatll2 D
,llD E
$strllF `
+lla b
datallc g
)llg h
;llh i
}mm 
}nn 	
}oo 
privaterr 
voidrr 
GoodG2B2rr 
(rr 
)rr 
{ss 
stringtt 
datatt 
;tt 
ifuu 

(uu 
IOuu 
.uu 
StaticReturnsTrueuu  
(uu  !
)uu! "
)uu" #
{vv 	
dataxx 
=xx 
$strxx 
;xx 
}yy 	
elsezz 
{{{ 	
data~~ 
=~~ 
null~~ 
;~~ 
} 	
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
SqlConnection
 (

connection
) 3
=
4 5
IO
6 8
.
8 9
GetDBConnection
9 H
(
H I
)
I J
)
J K
{
 

connection
 "
.
" #
Open
# '
(
' (
)
( )
;
) *
using
 
(
 

SqlCommand
 )
command
* 1
=
2 3
new
4 7

SqlCommand
8 B
(
B C
null
C G
,
G H

connection
I S
)
S T
)
T U
{
 
command
   #
.
  # $
CommandText
  $ /
=
  0 1
$str
  2 U
;
  U V
command
¡¡ #
.
¡¡# $
Prepare
¡¡$ +
(
¡¡+ ,
)
¡¡, -
;
¡¡- .
using
¢¢ !
(
¢¢" #
SqlDataReader
¢¢# 0
dr
¢¢1 3
=
¢¢4 5
command
¢¢6 =
.
¢¢= >
ExecuteReader
¢¢> K
(
¢¢K L
)
¢¢L M
)
¢¢M N
{
££ 
data
¥¥  $
=
¥¥% &
dr
¥¥' )
.
¥¥) *
	GetString
¥¥* 3
(
¥¥3 4
$num
¥¥4 5
)
¥¥5 6
;
¥¥6 7
}
¦¦ 
}
§§ 
}
¨¨ 
}
©© 
catch
ªª 
(
ªª 
SqlException
ªª #
	exceptSql
ªª$ -
)
ªª- .
{
«« 
IO
¬¬ 
.
¬¬ 
Logger
¬¬ 
.
¬¬ 
Log
¬¬ !
(
¬¬! "
NLog
¬¬" &
.
¬¬& '
LogLevel
¬¬' /
.
¬¬/ 0
Warn
¬¬0 4
,
¬¬4 5
	exceptSql
¬¬6 ?
,
¬¬? @
$str
¬¬A [
)
¬¬[ \
;
¬¬\ ]
}
­­ 
}
®® 
}
¯¯ 	
else
°° 
{
±± 	
data
´´ 
=
´´ 
null
´´ 
;
´´ 
}
µµ 	
if
¶¶ 

(
¶¶ 
IO
¶¶ 
.
¶¶  
StaticReturnsFalse
¶¶ !
(
¶¶! "
)
¶¶" #
)
¶¶# $
{
·· 	
IO
¹¹ 
.
¹¹ 
	WriteLine
¹¹ 
(
¹¹ 
$str
¹¹ /
)
¹¹/ 0
;
¹¹0 1
}
ºº 	
else
»» 
{
¼¼ 	
try
½½ 
{
¾¾ 
int
¿¿ 
value
¿¿ 
=
¿¿ 
int
¿¿ 
.
¿¿  
Parse
¿¿  %
(
¿¿% &
data
¿¿& *
)
¿¿* +
;
¿¿+ ,
}
ÀÀ 
catch
ÁÁ 
(
ÁÁ 
FormatException
ÁÁ " 
exceptNumberFormat
ÁÁ# 5
)
ÁÁ5 6
{
ÂÂ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ 
.
ÄÄ 
Log
ÄÄ 
(
ÄÄ 
NLog
ÄÄ "
.
ÄÄ" #
LogLevel
ÄÄ# +
.
ÄÄ+ ,
Warn
ÄÄ, 0
,
ÄÄ0 1 
exceptNumberFormat
ÄÄ2 D
,
ÄÄD E
$str
ÄÄF j
+
ÄÄk l 
exceptNumberFormat
ÄÄm 
)ÄÄ 
;ÄÄ 
}
ÅÅ 
}
ÆÆ 	
}
ÇÇ 
private
ÊÊ 
void
ÊÊ 
GoodB2G2
ÊÊ 
(
ÊÊ 
)
ÊÊ 
{
ËË 
string
ÌÌ 
data
ÌÌ 
;
ÌÌ 
if
ÍÍ 

(
ÍÍ 
IO
ÍÍ 
.
ÍÍ 
StaticReturnsTrue
ÍÍ  
(
ÍÍ  !
)
ÍÍ! "
)
ÍÍ" #
{
ÎÎ 	
data
ÏÏ 
=
ÏÏ 
$str
ÏÏ 
;
ÏÏ 
{
ÑÑ 
try
ÒÒ 
{
ÓÓ 
using
ÕÕ 
(
ÕÕ 
SqlConnection
ÕÕ (

connection
ÕÕ) 3
=
ÕÕ4 5
IO
ÕÕ6 8
.
ÕÕ8 9
GetDBConnection
ÕÕ9 H
(
ÕÕH I
)
ÕÕI J
)
ÕÕJ K
{
ÖÖ 

connection
×× "
.
××" #
Open
××# '
(
××' (
)
××( )
;
××) *
using
ÙÙ 
(
ÙÙ 

SqlCommand
ÙÙ )
command
ÙÙ* 1
=
ÙÙ2 3
new
ÙÙ4 7

SqlCommand
ÙÙ8 B
(
ÙÙB C
null
ÙÙC G
,
ÙÙG H

connection
ÙÙI S
)
ÙÙS T
)
ÙÙT U
{
ÚÚ 
command
ÛÛ #
.
ÛÛ# $
CommandText
ÛÛ$ /
=
ÛÛ0 1
$str
ÛÛ2 U
;
ÛÛU V
command
ÜÜ #
.
ÜÜ# $
Prepare
ÜÜ$ +
(
ÜÜ+ ,
)
ÜÜ, -
;
ÜÜ- .
using
ÝÝ !
(
ÝÝ" #
SqlDataReader
ÝÝ# 0
dr
ÝÝ1 3
=
ÝÝ4 5
command
ÝÝ6 =
.
ÝÝ= >
ExecuteReader
ÝÝ> K
(
ÝÝK L
)
ÝÝL M
)
ÝÝM N
{
ÞÞ 
data
àà  $
=
àà% &
dr
àà' )
.
àà) *
	GetString
àà* 3
(
àà3 4
$num
àà4 5
)
àà5 6
;
àà6 7
}
áá 
}
ââ 
}
ãã 
}
ää 
catch
åå 
(
åå 
SqlException
åå #
	exceptSql
åå$ -
)
åå- .
{
ææ 
IO
çç 
.
çç 
Logger
çç 
.
çç 
Log
çç !
(
çç! "
NLog
çç" &
.
çç& '
LogLevel
çç' /
.
çç/ 0
Warn
çç0 4
,
çç4 5
	exceptSql
çç6 ?
,
çç? @
$str
ççA [
)
çç[ \
;
çç\ ]
}
èè 
}
éé 
}
êê 	
else
ëë 
{
ìì 	
data
ïï 
=
ïï 
null
ïï 
;
ïï 
}
ðð 	
if
ññ 

(
ññ 
IO
ññ 
.
ññ 
StaticReturnsTrue
ññ  
(
ññ  !
)
ññ! "
)
ññ" #
{
òò 	
try
óó 
{
ôô 
int
õõ 
value
õõ 
=
õõ 
int
õõ 
.
õõ  
Parse
õõ  %
(
õõ% &
data
õõ& *
)
õõ* +
;
õõ+ ,
}
öö 
catch
÷÷ 
(
÷÷ 
FormatException
÷÷ " 
exceptNumberFormat
÷÷# 5
)
÷÷5 6
{
øø 
IO
úú 
.
úú 
Logger
úú 
.
úú 
Log
úú 
(
úú 
NLog
úú "
.
úú" #
LogLevel
úú# +
.
úú+ ,
Warn
úú, 0
,
úú0 1 
exceptNumberFormat
úú2 D
,
úúD E
$str
úúF j
+
úúk l 
exceptNumberFormat
úúm 
)úú 
;úú 
}
ûû 
}
üü 	
}
ýý 
public
ÿÿ 

override
ÿÿ 
void
ÿÿ 
Good
ÿÿ 
(
ÿÿ 
)
ÿÿ 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} «e
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_12.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_12 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!!
 
IO!! 
.!! $
StaticReturnsTrueOrFalse!! &
(!!& '
)!!' (
)!!( )
{"" 	
data## 
=## 
$str## 
;## 
{%% 
try&& 
{'' 
using)) 
()) 
SqlConnection)) (

connection))) 3
=))4 5
IO))6 8
.))8 9
GetDBConnection))9 H
())H I
)))I J
)))J K
{** 

connection++ "
.++" #
Open++# '
(++' (
)++( )
;++) *
using-- 
(-- 

SqlCommand-- )
command--* 1
=--2 3
new--4 7

SqlCommand--8 B
(--B C
null--C G
,--G H

connection--I S
)--S T
)--T U
{.. 
command// #
.//# $
CommandText//$ /
=//0 1
$str//2 U
;//U V
command00 #
.00# $
Prepare00$ +
(00+ ,
)00, -
;00- .
using11 !
(11" #
SqlDataReader11# 0
dr111 3
=114 5
command116 =
.11= >
ExecuteReader11> K
(11K L
)11L M
)11M N
{22 
data44  $
=44% &
dr44' )
.44) *
	GetString44* 3
(443 4
$num444 5
)445 6
;446 7
}55 
}66 
}77 
}88 
catch99 
(99 
SqlException99 #
	exceptSql99$ -
)99- .
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
	exceptSql;;6 ?
,;;? @
$str;;A [
);;[ \
;;;\ ]
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataBB 
=BB 
$strBB 
;BB 
}CC 	
ifDD 

(DD
 
IODD 
.DD $
StaticReturnsTrueOrFalseDD &
(DD& '
)DD' (
)DD( )
{EE 	
tryFF 
{GG 
intHH 
valueHH 
=HH 
intHH 
.HH  
ParseHH  %
(HH% &
dataHH& *
)HH* +
;HH+ ,
}II 
catchJJ 
(JJ 
FormatExceptionJJ "
exceptNumberFormatJJ# 5
)JJ5 6
{KK 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$strMMF `
+MMa b
dataMMc g
)MMg h
;MMh i
}NN 
}OO 	
elsePP 
{QQ 	
tryRR 
{SS 
intTT 
valueTT 
=TT 
intTT 
.TT  
ParseTT  %
(TT% &
dataTT& *
)TT* +
;TT+ ,
}UU 
catchVV 
(VV 
FormatExceptionVV "
exceptNumberFormatVV# 5
)VV5 6
{WW 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
exceptNumberFormatYY2 D
,YYD E
$strYYF j
+YYk l
exceptNumberFormatYYm 
)	YY 
;
YY 
}ZZ 
}[[ 	
}\\ 
privateaa 
voidaa 
GoodG2Baa 
(aa 
)aa 
{bb 
stringcc 
datacc 
;cc 
ifdd 

(dd
 
IOdd 
.dd $
StaticReturnsTrueOrFalsedd &
(dd& '
)dd' (
)dd( )
{ee 	
datagg 
=gg 
$strgg 
;gg 
}hh 	
elseii 
{jj 	
datall 
=ll 
$strll 
;ll 
}mm 	
ifnn 

(nn
 
IOnn 
.nn $
StaticReturnsTrueOrFalsenn &
(nn& '
)nn' (
)nn( )
{oo 	
trypp 
{qq 
intrr 
valuerr 
=rr 
intrr 
.rr  
Parserr  %
(rr% &
datarr& *
)rr* +
;rr+ ,
}ss 
catchtt 
(tt 
FormatExceptiontt "
exceptNumberFormattt# 5
)tt5 6
{uu 
IOww 
.ww 
Loggerww 
.ww 
Logww 
(ww 
NLogww "
.ww" #
LogLevelww# +
.ww+ ,
Warnww, 0
,ww0 1
exceptNumberFormatww2 D
,wwD E
$strwwF `
+wwa b
datawwc g
)wwg h
;wwh i
}xx 
}yy 	
elsezz 
{{{ 	
try|| 
{}} 
int~~ 
value~~ 
=~~ 
int~~ 
.~~  
Parse~~  %
(~~% &
data~~& *
)~~* +
;~~+ ,
} 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(

 
IO
 
.
 &
StaticReturnsTrueOrFalse
 &
(
& '
)
' (
)
( )
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
SqlConnection
 (

connection
) 3
=
4 5
IO
6 8
.
8 9
GetDBConnection
9 H
(
H I
)
I J
)
J K
{
 

connection
 "
.
" #
Open
# '
(
' (
)
( )
;
) *
using
 
(
 

SqlCommand
 )
command
* 1
=
2 3
new
4 7

SqlCommand
8 B
(
B C
null
C G
,
G H

connection
I S
)
S T
)
T U
{
 
command
 #
.
# $
CommandText
$ /
=
0 1
$str
2 U
;
U V
command
 #
.
# $
Prepare
$ +
(
+ ,
)
, -
;
- .
using
 !
(
" #
SqlDataReader
# 0
dr
1 3
=
4 5
command
6 =
.
= >
ExecuteReader
> K
(
K L
)
L M
)
M N
{
 
data
    $
=
  % &
dr
  ' )
.
  ) *
	GetString
  * 3
(
  3 4
$num
  4 5
)
  5 6
;
  6 7
}
¡¡ 
}
¢¢ 
}
££ 
}
¤¤ 
catch
¥¥ 
(
¥¥ 
SqlException
¥¥ #
	exceptSql
¥¥$ -
)
¥¥- .
{
¦¦ 
IO
§§ 
.
§§ 
Logger
§§ 
.
§§ 
Log
§§ !
(
§§! "
NLog
§§" &
.
§§& '
LogLevel
§§' /
.
§§/ 0
Warn
§§0 4
,
§§4 5
	exceptSql
§§6 ?
,
§§? @
$str
§§A [
)
§§[ \
;
§§\ ]
}
¨¨ 
}
©© 
}
ªª 	
else
«« 
{
¬¬ 	
data
­­ 
=
­­ 
$str
­­ 
;
­­ 
{
¯¯ 
try
°° 
{
±± 
using
³³ 
(
³³ 
SqlConnection
³³ (

connection
³³) 3
=
³³4 5
IO
³³6 8
.
³³8 9
GetDBConnection
³³9 H
(
³³H I
)
³³I J
)
³³J K
{
´´ 

connection
µµ "
.
µµ" #
Open
µµ# '
(
µµ' (
)
µµ( )
;
µµ) *
using
·· 
(
·· 

SqlCommand
·· )
command
··* 1
=
··2 3
new
··4 7

SqlCommand
··8 B
(
··B C
null
··C G
,
··G H

connection
··I S
)
··S T
)
··T U
{
¸¸ 
command
¹¹ #
.
¹¹# $
CommandText
¹¹$ /
=
¹¹0 1
$str
¹¹2 U
;
¹¹U V
command
ºº #
.
ºº# $
Prepare
ºº$ +
(
ºº+ ,
)
ºº, -
;
ºº- .
using
»» !
(
»»" #
SqlDataReader
»»# 0
dr
»»1 3
=
»»4 5
command
»»6 =
.
»»= >
ExecuteReader
»»> K
(
»»K L
)
»»L M
)
»»M N
{
¼¼ 
data
¾¾  $
=
¾¾% &
dr
¾¾' )
.
¾¾) *
	GetString
¾¾* 3
(
¾¾3 4
$num
¾¾4 5
)
¾¾5 6
;
¾¾6 7
}
¿¿ 
}
ÀÀ 
}
ÁÁ 
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
SqlException
ÃÃ #
	exceptSql
ÃÃ$ -
)
ÃÃ- .
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ 
.
ÅÅ 
Log
ÅÅ !
(
ÅÅ! "
NLog
ÅÅ" &
.
ÅÅ& '
LogLevel
ÅÅ' /
.
ÅÅ/ 0
Warn
ÅÅ0 4
,
ÅÅ4 5
	exceptSql
ÅÅ6 ?
,
ÅÅ? @
$str
ÅÅA [
)
ÅÅ[ \
;
ÅÅ\ ]
}
ÆÆ 
}
ÇÇ 
}
ÈÈ 	
if
ÉÉ 

(
ÉÉ
 
IO
ÉÉ 
.
ÉÉ &
StaticReturnsTrueOrFalse
ÉÉ &
(
ÉÉ& '
)
ÉÉ' (
)
ÉÉ( )
{
ÊÊ 	
try
ËË 
{
ÌÌ 
int
ÍÍ 
value
ÍÍ 
=
ÍÍ 
int
ÍÍ 
.
ÍÍ  
Parse
ÍÍ  %
(
ÍÍ% &
data
ÍÍ& *
)
ÍÍ* +
;
ÍÍ+ ,
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
FormatException
ÏÏ " 
exceptNumberFormat
ÏÏ# 5
)
ÏÏ5 6
{
ÐÐ 
IO
ÒÒ 
.
ÒÒ 
Logger
ÒÒ 
.
ÒÒ 
Log
ÒÒ 
(
ÒÒ 
NLog
ÒÒ "
.
ÒÒ" #
LogLevel
ÒÒ# +
.
ÒÒ+ ,
Warn
ÒÒ, 0
,
ÒÒ0 1 
exceptNumberFormat
ÒÒ2 D
,
ÒÒD E
$str
ÒÒF j
+
ÒÒk l 
exceptNumberFormat
ÒÒm 
)ÒÒ 
;ÒÒ 
}
ÓÓ 
}
ÔÔ 	
else
ÕÕ 
{
ÖÖ 	
try
×× 
{
ØØ 
int
ÙÙ 
value
ÙÙ 
=
ÙÙ 
int
ÙÙ 
.
ÙÙ  
Parse
ÙÙ  %
(
ÙÙ% &
data
ÙÙ& *
)
ÙÙ* +
;
ÙÙ+ ,
}
ÚÚ 
catch
ÛÛ 
(
ÛÛ 
FormatException
ÛÛ " 
exceptNumberFormat
ÛÛ# 5
)
ÛÛ5 6
{
ÜÜ 
IO
ÞÞ 
.
ÞÞ 
Logger
ÞÞ 
.
ÞÞ 
Log
ÞÞ 
(
ÞÞ 
NLog
ÞÞ "
.
ÞÞ" #
LogLevel
ÞÞ# +
.
ÞÞ+ ,
Warn
ÞÞ, 0
,
ÞÞ0 1 
exceptNumberFormat
ÞÞ2 D
,
ÞÞD E
$str
ÞÞF j
+
ÞÞk l 
exceptNumberFormat
ÞÞm 
)ÞÞ 
;ÞÞ 
}
ßß 
}
àà 	
}
áá 
public
ãã 

override
ãã 
void
ãã 
Good
ãã 
(
ãã 
)
ãã 
{
åå 
GoodG2B
ææ 
(
ææ 
)
ææ 
;
ææ 
GoodB2G
çç 
(
çç 
)
çç 
;
çç 
}
èè 
}êê 
}ëë ¬m
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_13.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_13 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!!  
STATIC_READONLY_FIVE!! #
==!!# %
$num!!% &
)!!& '
{"" 	
data## 
=## 
$str## 
;## 
{%% 
try&& 
{'' 
using)) 
()) 
SqlConnection)) (

connection))) 3
=))4 5
IO))6 8
.))8 9
GetDBConnection))9 H
())H I
)))I J
)))J K
{** 

connection++ "
.++" #
Open++# '
(++' (
)++( )
;++) *
using-- 
(-- 

SqlCommand-- )
command--* 1
=--2 3
new--4 7

SqlCommand--8 B
(--B C
null--C G
,--G H

connection--I S
)--S T
)--T U
{.. 
command// #
.//# $
CommandText//$ /
=//0 1
$str//2 U
;//U V
command00 #
.00# $
Prepare00$ +
(00+ ,
)00, -
;00- .
using11 !
(11" #
SqlDataReader11# 0
dr111 3
=114 5
command116 =
.11= >
ExecuteReader11> K
(11K L
)11L M
)11M N
{22 
data44  $
=44% &
dr44' )
.44) *
	GetString44* 3
(443 4
$num444 5
)445 6
;446 7
}55 
}66 
}77 
}88 
catch99 
(99 
SqlException99 #
	exceptSql99$ -
)99- .
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
	exceptSql;;6 ?
,;;? @
$str;;A [
);;[ \
;;;\ ]
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataCC 
=CC 
nullCC 
;CC 
}DD 	
ifEE 

(EE 
IOEE 
.EE  
STATIC_READONLY_FIVEEE #
==EE# %
$numEE% &
)EE& '
{FF 	
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateUU 
voidUU 
GoodG2B1UU 
(UU 
)UU 
{VV 
stringWW 
dataWW 
;WW 
ifXX 

(XX 
IOXX 
.XX  
STATIC_READONLY_FIVEXX #
!=XX# %
$numXX% &
)XX& '
{YY 	
data\\ 
=\\ 
null\\ 
;\\ 
}]] 	
else^^ 
{__ 	
dataaa 
=aa 
$straa 
;aa 
}bb 	
ifcc 

(cc 
IOcc 
.cc  
STATIC_READONLY_FIVEcc #
==cc# %
$numcc% &
)cc& '
{dd 	
tryee 
{ff 
intgg 
valuegg 
=gg 
intgg 
.gg  
Parsegg  %
(gg% &
datagg& *
)gg* +
;gg+ ,
}hh 
catchii 
(ii 
FormatExceptionii "
exceptNumberFormatii# 5
)ii5 6
{jj 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptNumberFormatll2 D
,llD E
$strllF `
+lla b
datallc g
)llg h
;llh i
}mm 
}nn 	
}oo 
privaterr 
voidrr 
GoodG2B2rr 
(rr 
)rr 
{ss 
stringtt 
datatt 
;tt 
ifuu 

(uu 
IOuu 
.uu  
STATIC_READONLY_FIVEuu #
==uu# %
$numuu% &
)uu& '
{vv 	
dataxx 
=xx 
$strxx 
;xx 
}yy 	
elsezz 
{{{ 	
data~~ 
=~~ 
null~~ 
;~~ 
} 	
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
# %
$num
% &
)
& '
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
# %
$num
% &
)
& '
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
SqlConnection
 (

connection
) 3
=
4 5
IO
6 8
.
8 9
GetDBConnection
9 H
(
H I
)
I J
)
J K
{
 

connection
 "
.
" #
Open
# '
(
' (
)
( )
;
) *
using
 
(
 

SqlCommand
 )
command
* 1
=
2 3
new
4 7

SqlCommand
8 B
(
B C
null
C G
,
G H

connection
I S
)
S T
)
T U
{
 
command
   #
.
  # $
CommandText
  $ /
=
  0 1
$str
  2 U
;
  U V
command
¡¡ #
.
¡¡# $
Prepare
¡¡$ +
(
¡¡+ ,
)
¡¡, -
;
¡¡- .
using
¢¢ !
(
¢¢" #
SqlDataReader
¢¢# 0
dr
¢¢1 3
=
¢¢4 5
command
¢¢6 =
.
¢¢= >
ExecuteReader
¢¢> K
(
¢¢K L
)
¢¢L M
)
¢¢M N
{
££ 
data
¥¥  $
=
¥¥% &
dr
¥¥' )
.
¥¥) *
	GetString
¥¥* 3
(
¥¥3 4
$num
¥¥4 5
)
¥¥5 6
;
¥¥6 7
}
¦¦ 
}
§§ 
}
¨¨ 
}
©© 
catch
ªª 
(
ªª 
SqlException
ªª #
	exceptSql
ªª$ -
)
ªª- .
{
«« 
IO
¬¬ 
.
¬¬ 
Logger
¬¬ 
.
¬¬ 
Log
¬¬ !
(
¬¬! "
NLog
¬¬" &
.
¬¬& '
LogLevel
¬¬' /
.
¬¬/ 0
Warn
¬¬0 4
,
¬¬4 5
	exceptSql
¬¬6 ?
,
¬¬? @
$str
¬¬A [
)
¬¬[ \
;
¬¬\ ]
}
­­ 
}
®® 
}
¯¯ 	
else
°° 
{
±± 	
data
´´ 
=
´´ 
null
´´ 
;
´´ 
}
µµ 	
if
¶¶ 

(
¶¶ 
IO
¶¶ 
.
¶¶ "
STATIC_READONLY_FIVE
¶¶ #
!=
¶¶# %
$num
¶¶% &
)
¶¶& '
{
·· 	
IO
¹¹ 
.
¹¹ 
	WriteLine
¹¹ 
(
¹¹ 
$str
¹¹ /
)
¹¹/ 0
;
¹¹0 1
}
ºº 	
else
»» 
{
¼¼ 	
try
½½ 
{
¾¾ 
int
¿¿ 
value
¿¿ 
=
¿¿ 
int
¿¿ 
.
¿¿  
Parse
¿¿  %
(
¿¿% &
data
¿¿& *
)
¿¿* +
;
¿¿+ ,
}
ÀÀ 
catch
ÁÁ 
(
ÁÁ 
FormatException
ÁÁ " 
exceptNumberFormat
ÁÁ# 5
)
ÁÁ5 6
{
ÂÂ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ 
.
ÄÄ 
Log
ÄÄ 
(
ÄÄ 
NLog
ÄÄ "
.
ÄÄ" #
LogLevel
ÄÄ# +
.
ÄÄ+ ,
Warn
ÄÄ, 0
,
ÄÄ0 1 
exceptNumberFormat
ÄÄ2 D
,
ÄÄD E
$str
ÄÄF j
+
ÄÄk l 
exceptNumberFormat
ÄÄm 
)ÄÄ 
;ÄÄ 
}
ÅÅ 
}
ÆÆ 	
}
ÇÇ 
private
ÊÊ 
void
ÊÊ 
GoodB2G2
ÊÊ 
(
ÊÊ 
)
ÊÊ 
{
ËË 
string
ÌÌ 
data
ÌÌ 
;
ÌÌ 
if
ÍÍ 

(
ÍÍ 
IO
ÍÍ 
.
ÍÍ "
STATIC_READONLY_FIVE
ÍÍ #
==
ÍÍ# %
$num
ÍÍ% &
)
ÍÍ& '
{
ÎÎ 	
data
ÏÏ 
=
ÏÏ 
$str
ÏÏ 
;
ÏÏ 
{
ÑÑ 
try
ÒÒ 
{
ÓÓ 
using
ÕÕ 
(
ÕÕ 
SqlConnection
ÕÕ (

connection
ÕÕ) 3
=
ÕÕ4 5
IO
ÕÕ6 8
.
ÕÕ8 9
GetDBConnection
ÕÕ9 H
(
ÕÕH I
)
ÕÕI J
)
ÕÕJ K
{
ÖÖ 

connection
×× "
.
××" #
Open
××# '
(
××' (
)
××( )
;
××) *
using
ÙÙ 
(
ÙÙ 

SqlCommand
ÙÙ )
command
ÙÙ* 1
=
ÙÙ2 3
new
ÙÙ4 7

SqlCommand
ÙÙ8 B
(
ÙÙB C
null
ÙÙC G
,
ÙÙG H

connection
ÙÙI S
)
ÙÙS T
)
ÙÙT U
{
ÚÚ 
command
ÛÛ #
.
ÛÛ# $
CommandText
ÛÛ$ /
=
ÛÛ0 1
$str
ÛÛ2 U
;
ÛÛU V
command
ÜÜ #
.
ÜÜ# $
Prepare
ÜÜ$ +
(
ÜÜ+ ,
)
ÜÜ, -
;
ÜÜ- .
using
ÝÝ !
(
ÝÝ" #
SqlDataReader
ÝÝ# 0
dr
ÝÝ1 3
=
ÝÝ4 5
command
ÝÝ6 =
.
ÝÝ= >
ExecuteReader
ÝÝ> K
(
ÝÝK L
)
ÝÝL M
)
ÝÝM N
{
ÞÞ 
data
àà  $
=
àà% &
dr
àà' )
.
àà) *
	GetString
àà* 3
(
àà3 4
$num
àà4 5
)
àà5 6
;
àà6 7
}
áá 
}
ââ 
}
ãã 
}
ää 
catch
åå 
(
åå 
SqlException
åå #
	exceptSql
åå$ -
)
åå- .
{
ææ 
IO
çç 
.
çç 
Logger
çç 
.
çç 
Log
çç !
(
çç! "
NLog
çç" &
.
çç& '
LogLevel
çç' /
.
çç/ 0
Warn
çç0 4
,
çç4 5
	exceptSql
çç6 ?
,
çç? @
$str
ççA [
)
çç[ \
;
çç\ ]
}
èè 
}
éé 
}
êê 	
else
ëë 
{
ìì 	
data
ïï 
=
ïï 
null
ïï 
;
ïï 
}
ðð 	
if
ññ 

(
ññ 
IO
ññ 
.
ññ "
STATIC_READONLY_FIVE
ññ #
==
ññ# %
$num
ññ% &
)
ññ& '
{
òò 	
try
óó 
{
ôô 
int
õõ 
value
õõ 
=
õõ 
int
õõ 
.
õõ  
Parse
õõ  %
(
õõ% &
data
õõ& *
)
õõ* +
;
õõ+ ,
}
öö 
catch
÷÷ 
(
÷÷ 
FormatException
÷÷ " 
exceptNumberFormat
÷÷# 5
)
÷÷5 6
{
øø 
IO
úú 
.
úú 
Logger
úú 
.
úú 
Log
úú 
(
úú 
NLog
úú "
.
úú" #
LogLevel
úú# +
.
úú+ ,
Warn
úú, 0
,
úú0 1 
exceptNumberFormat
úú2 D
,
úúD E
$str
úúF j
+
úúk l 
exceptNumberFormat
úúm 
)úú 
;úú 
}
ûû 
}
üü 	
}
ýý 
public
ÿÿ 

override
ÿÿ 
void
ÿÿ 
Good
ÿÿ 
(
ÿÿ 
)
ÿÿ 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} Èl
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_14.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_14 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!! 

staticFive!! 
==!! 
$num!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{%% 
try&& 
{'' 
using)) 
()) 
SqlConnection)) (

connection))) 3
=))4 5
IO))6 8
.))8 9
GetDBConnection))9 H
())H I
)))I J
)))J K
{** 

connection++ "
.++" #
Open++# '
(++' (
)++( )
;++) *
using-- 
(-- 

SqlCommand-- )
command--* 1
=--2 3
new--4 7

SqlCommand--8 B
(--B C
null--C G
,--G H

connection--I S
)--S T
)--T U
{.. 
command// #
.//# $
CommandText//$ /
=//0 1
$str//2 U
;//U V
command00 #
.00# $
Prepare00$ +
(00+ ,
)00, -
;00- .
using11 !
(11" #
SqlDataReader11# 0
dr111 3
=114 5
command116 =
.11= >
ExecuteReader11> K
(11K L
)11L M
)11M N
{22 
data44  $
=44% &
dr44' )
.44) *
	GetString44* 3
(443 4
$num444 5
)445 6
;446 7
}55 
}66 
}77 
}88 
catch99 
(99 
SqlException99 #
	exceptSql99$ -
)99- .
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
	exceptSql;;6 ?
,;;? @
$str;;A [
);;[ \
;;;\ ]
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataCC 
=CC 
nullCC 
;CC 
}DD 	
ifEE 

(EE 
IOEE 
.EE 

staticFiveEE 
==EE 
$numEE 
)EE 
{FF 	
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateUU 
voidUU 
GoodG2B1UU 
(UU 
)UU 
{VV 
stringWW 
dataWW 
;WW 
ifXX 

(XX 
IOXX 
.XX 

staticFiveXX 
!=XX 
$numXX 
)XX 
{YY 	
data\\ 
=\\ 
null\\ 
;\\ 
}]] 	
else^^ 
{__ 	
dataaa 
=aa 
$straa 
;aa 
}bb 	
ifcc 

(cc 
IOcc 
.cc 

staticFivecc 
==cc 
$numcc 
)cc 
{dd 	
tryee 
{ff 
intgg 
valuegg 
=gg 
intgg 
.gg  
Parsegg  %
(gg% &
datagg& *
)gg* +
;gg+ ,
}hh 
catchii 
(ii 
FormatExceptionii "
exceptNumberFormatii# 5
)ii5 6
{jj 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptNumberFormatll2 D
,llD E
$strllF `
+lla b
datallc g
)llg h
;llh i
}mm 
}nn 	
}oo 
privaterr 
voidrr 
GoodG2B2rr 
(rr 
)rr 
{ss 
stringtt 
datatt 
;tt 
ifuu 

(uu 
IOuu 
.uu 

staticFiveuu 
==uu 
$numuu 
)uu 
{vv 	
dataxx 
=xx 
$strxx 
;xx 
}yy 	
elsezz 
{{{ 	
data~~ 
=~~ 
null~~ 
;~~ 
} 	
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
SqlConnection
 (

connection
) 3
=
4 5
IO
6 8
.
8 9
GetDBConnection
9 H
(
H I
)
I J
)
J K
{
 

connection
 "
.
" #
Open
# '
(
' (
)
( )
;
) *
using
 
(
 

SqlCommand
 )
command
* 1
=
2 3
new
4 7

SqlCommand
8 B
(
B C
null
C G
,
G H

connection
I S
)
S T
)
T U
{
 
command
   #
.
  # $
CommandText
  $ /
=
  0 1
$str
  2 U
;
  U V
command
¡¡ #
.
¡¡# $
Prepare
¡¡$ +
(
¡¡+ ,
)
¡¡, -
;
¡¡- .
using
¢¢ !
(
¢¢" #
SqlDataReader
¢¢# 0
dr
¢¢1 3
=
¢¢4 5
command
¢¢6 =
.
¢¢= >
ExecuteReader
¢¢> K
(
¢¢K L
)
¢¢L M
)
¢¢M N
{
££ 
data
¥¥  $
=
¥¥% &
dr
¥¥' )
.
¥¥) *
	GetString
¥¥* 3
(
¥¥3 4
$num
¥¥4 5
)
¥¥5 6
;
¥¥6 7
}
¦¦ 
}
§§ 
}
¨¨ 
}
©© 
catch
ªª 
(
ªª 
SqlException
ªª #
	exceptSql
ªª$ -
)
ªª- .
{
«« 
IO
¬¬ 
.
¬¬ 
Logger
¬¬ 
.
¬¬ 
Log
¬¬ !
(
¬¬! "
NLog
¬¬" &
.
¬¬& '
LogLevel
¬¬' /
.
¬¬/ 0
Warn
¬¬0 4
,
¬¬4 5
	exceptSql
¬¬6 ?
,
¬¬? @
$str
¬¬A [
)
¬¬[ \
;
¬¬\ ]
}
­­ 
}
®® 
}
¯¯ 	
else
°° 
{
±± 	
data
´´ 
=
´´ 
null
´´ 
;
´´ 
}
µµ 	
if
¶¶ 

(
¶¶ 
IO
¶¶ 
.
¶¶ 

staticFive
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
·· 	
IO
¹¹ 
.
¹¹ 
	WriteLine
¹¹ 
(
¹¹ 
$str
¹¹ /
)
¹¹/ 0
;
¹¹0 1
}
ºº 	
else
»» 
{
¼¼ 	
try
½½ 
{
¾¾ 
int
¿¿ 
value
¿¿ 
=
¿¿ 
int
¿¿ 
.
¿¿  
Parse
¿¿  %
(
¿¿% &
data
¿¿& *
)
¿¿* +
;
¿¿+ ,
}
ÀÀ 
catch
ÁÁ 
(
ÁÁ 
FormatException
ÁÁ " 
exceptNumberFormat
ÁÁ# 5
)
ÁÁ5 6
{
ÂÂ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ 
.
ÄÄ 
Log
ÄÄ 
(
ÄÄ 
NLog
ÄÄ "
.
ÄÄ" #
LogLevel
ÄÄ# +
.
ÄÄ+ ,
Warn
ÄÄ, 0
,
ÄÄ0 1 
exceptNumberFormat
ÄÄ2 D
,
ÄÄD E
$str
ÄÄF j
+
ÄÄk l 
exceptNumberFormat
ÄÄm 
)ÄÄ 
;ÄÄ 
}
ÅÅ 
}
ÆÆ 	
}
ÇÇ 
private
ÊÊ 
void
ÊÊ 
GoodB2G2
ÊÊ 
(
ÊÊ 
)
ÊÊ 
{
ËË 
string
ÌÌ 
data
ÌÌ 
;
ÌÌ 
if
ÍÍ 

(
ÍÍ 
IO
ÍÍ 
.
ÍÍ 

staticFive
ÍÍ 
==
ÍÍ 
$num
ÍÍ 
)
ÍÍ 
{
ÎÎ 	
data
ÏÏ 
=
ÏÏ 
$str
ÏÏ 
;
ÏÏ 
{
ÑÑ 
try
ÒÒ 
{
ÓÓ 
using
ÕÕ 
(
ÕÕ 
SqlConnection
ÕÕ (

connection
ÕÕ) 3
=
ÕÕ4 5
IO
ÕÕ6 8
.
ÕÕ8 9
GetDBConnection
ÕÕ9 H
(
ÕÕH I
)
ÕÕI J
)
ÕÕJ K
{
ÖÖ 

connection
×× "
.
××" #
Open
××# '
(
××' (
)
××( )
;
××) *
using
ÙÙ 
(
ÙÙ 

SqlCommand
ÙÙ )
command
ÙÙ* 1
=
ÙÙ2 3
new
ÙÙ4 7

SqlCommand
ÙÙ8 B
(
ÙÙB C
null
ÙÙC G
,
ÙÙG H

connection
ÙÙI S
)
ÙÙS T
)
ÙÙT U
{
ÚÚ 
command
ÛÛ #
.
ÛÛ# $
CommandText
ÛÛ$ /
=
ÛÛ0 1
$str
ÛÛ2 U
;
ÛÛU V
command
ÜÜ #
.
ÜÜ# $
Prepare
ÜÜ$ +
(
ÜÜ+ ,
)
ÜÜ, -
;
ÜÜ- .
using
ÝÝ !
(
ÝÝ" #
SqlDataReader
ÝÝ# 0
dr
ÝÝ1 3
=
ÝÝ4 5
command
ÝÝ6 =
.
ÝÝ= >
ExecuteReader
ÝÝ> K
(
ÝÝK L
)
ÝÝL M
)
ÝÝM N
{
ÞÞ 
data
àà  $
=
àà% &
dr
àà' )
.
àà) *
	GetString
àà* 3
(
àà3 4
$num
àà4 5
)
àà5 6
;
àà6 7
}
áá 
}
ââ 
}
ãã 
}
ää 
catch
åå 
(
åå 
SqlException
åå #
	exceptSql
åå$ -
)
åå- .
{
ææ 
IO
çç 
.
çç 
Logger
çç 
.
çç 
Log
çç !
(
çç! "
NLog
çç" &
.
çç& '
LogLevel
çç' /
.
çç/ 0
Warn
çç0 4
,
çç4 5
	exceptSql
çç6 ?
,
çç? @
$str
ççA [
)
çç[ \
;
çç\ ]
}
èè 
}
éé 
}
êê 	
else
ëë 
{
ìì 	
data
ïï 
=
ïï 
null
ïï 
;
ïï 
}
ðð 	
if
ññ 

(
ññ 
IO
ññ 
.
ññ 

staticFive
ññ 
==
ññ 
$num
ññ 
)
ññ 
{
òò 	
try
óó 
{
ôô 
int
õõ 
value
õõ 
=
õõ 
int
õõ 
.
õõ  
Parse
õõ  %
(
õõ% &
data
õõ& *
)
õõ* +
;
õõ+ ,
}
öö 
catch
÷÷ 
(
÷÷ 
FormatException
÷÷ " 
exceptNumberFormat
÷÷# 5
)
÷÷5 6
{
øø 
IO
úú 
.
úú 
Logger
úú 
.
úú 
Log
úú 
(
úú 
NLog
úú "
.
úú" #
LogLevel
úú# +
.
úú+ ,
Warn
úú, 0
,
úú0 1 
exceptNumberFormat
úú2 D
,
úúD E
$str
úúF j
+
úúk l 
exceptNumberFormat
úúm 
)úú 
;úú 
}
ûû 
}
üü 	
}
ýý 
public
ÿÿ 

override
ÿÿ 
void
ÿÿ 
Good
ÿÿ 
(
ÿÿ 
)
ÿÿ 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} èu
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_15.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_15 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
switch!! 
(!! 
$num!! 
)!! 
{"" 	
case## 
$num## 
:## 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using** 
(** 
SqlConnection** (

connection**) 3
=**4 5
IO**6 8
.**8 9
GetDBConnection**9 H
(**H I
)**I J
)**J K
{++ 

connection,, "
.,," #
Open,,# '
(,,' (
),,( )
;,,) *
using.. 
(.. 

SqlCommand.. )
command..* 1
=..2 3
new..4 7

SqlCommand..8 B
(..B C
null..C G
,..G H

connection..I S
)..S T
)..T U
{// 
command00 #
.00# $
CommandText00$ /
=000 1
$str002 U
;00U V
command11 #
.11# $
Prepare11$ +
(11+ ,
)11, -
;11- .
using22 !
(22" #
SqlDataReader22# 0
dr221 3
=224 5
command226 =
.22= >
ExecuteReader22> K
(22K L
)22L M
)22M N
{33 
data55  $
=55% &
dr55' )
.55) *
	GetString55* 3
(553 4
$num554 5
)555 6
;556 7
}66 
}77 
}88 
}99 
catch:: 
(:: 
SqlException:: #
	exceptSql::$ -
)::- .
{;; 
IO<< 
.<< 
Logger<< 
.<< 
Log<< !
(<<! "
NLog<<" &
.<<& '
LogLevel<<' /
.<</ 0
Warn<<0 4
,<<4 5
	exceptSql<<6 ?
,<<? @
$str<<A [
)<<[ \
;<<\ ]
}== 
}>> 
break?? 
;?? 
default@@ 
:@@ 
dataCC 
=CC 
nullCC 
;CC 
breakDD 
;DD 
}EE 	
switchFF 
(FF 
$numFF 
)FF 
{GG 	
caseHH 
$numHH 
:HH 
tryII 
{JJ 
intKK 
valueKK 
=KK 
intKK 
.KK  
ParseKK  %
(KK% &
dataKK& *
)KK* +
;KK+ ,
}LL 
catchMM 
(MM 
FormatExceptionMM "
exceptNumberFormatMM# 5
)MM5 6
{NN 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP 
(PP 
NLogPP "
.PP" #
LogLevelPP# +
.PP+ ,
WarnPP, 0
,PP0 1
exceptNumberFormatPP2 D
,PPD E
$strPPF `
+PPa b
dataPPc g
)PPg h
;PPh i
}QQ 
breakRR 
;RR 
defaultSS 
:SS 
IOUU 
.UU 
	WriteLineUU 
(UU 
$strUU /
)UU/ 0
;UU0 1
breakVV 
;VV 
}WW 	
}XX 
private\\ 
void\\ 
GoodG2B1\\ 
(\\ 
)\\ 
{]] 
string^^ 
data^^ 
;^^ 
switch__ 
(__ 
$num__ 
)__ 
{`` 	
caseaa 
$numaa 
:aa 
datadd 
=dd 
nulldd 
;dd 
breakee 
;ee 
defaultff 
:ff 
datahh 
=hh 
$strhh 
;hh 
breakii 
;ii 
}jj 	
switchkk 
(kk 
$numkk 
)kk 
{ll 	
casemm 
$nummm 
:mm 
trynn 
{oo 
intpp 
valuepp 
=pp 
intpp 
.pp  
Parsepp  %
(pp% &
datapp& *
)pp* +
;pp+ ,
}qq 
catchrr 
(rr 
FormatExceptionrr "
exceptNumberFormatrr# 5
)rr5 6
{ss 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu "
.uu" #
LogLeveluu# +
.uu+ ,
Warnuu, 0
,uu0 1
exceptNumberFormatuu2 D
,uuD E
$struuF `
+uua b
datauuc g
)uug h
;uuh i
}vv 
breakww 
;ww 
defaultxx 
:xx 
IOzz 
.zz 
	WriteLinezz 
(zz 
$strzz /
)zz/ 0
;zz0 1
break{{ 
;{{ 
}|| 	
}}} 
private
 
void
 
GoodG2B2
 
(
 
)
 
{
 
string
 
data
 
;
 
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
data
 
=
 
$str
 
;
 
break
 
;
 
default
 
:
 
data
 
=
 
null
 
;
 
break
 
;
 
}
 	
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
break
 
;
 
default
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
}
   	
}
¡¡ 
private
¤¤ 
void
¤¤ 
GoodB2G1
¤¤ 
(
¤¤ 
)
¤¤ 
{
¥¥ 
string
¦¦ 
data
¦¦ 
;
¦¦ 
switch
§§ 
(
§§ 
$num
§§ 
)
§§ 
{
¨¨ 	
case
©© 
$num
©© 
:
©© 
data
ªª 
=
ªª 
$str
ªª 
;
ªª 
{
¬¬ 
try
­­ 
{
®® 
using
°° 
(
°° 
SqlConnection
°° (

connection
°°) 3
=
°°4 5
IO
°°6 8
.
°°8 9
GetDBConnection
°°9 H
(
°°H I
)
°°I J
)
°°J K
{
±± 

connection
²² "
.
²²" #
Open
²²# '
(
²²' (
)
²²( )
;
²²) *
using
´´ 
(
´´ 

SqlCommand
´´ )
command
´´* 1
=
´´2 3
new
´´4 7

SqlCommand
´´8 B
(
´´B C
null
´´C G
,
´´G H

connection
´´I S
)
´´S T
)
´´T U
{
µµ 
command
¶¶ #
.
¶¶# $
CommandText
¶¶$ /
=
¶¶0 1
$str
¶¶2 U
;
¶¶U V
command
·· #
.
··# $
Prepare
··$ +
(
··+ ,
)
··, -
;
··- .
using
¸¸ !
(
¸¸" #
SqlDataReader
¸¸# 0
dr
¸¸1 3
=
¸¸4 5
command
¸¸6 =
.
¸¸= >
ExecuteReader
¸¸> K
(
¸¸K L
)
¸¸L M
)
¸¸M N
{
¹¹ 
data
»»  $
=
»»% &
dr
»»' )
.
»») *
	GetString
»»* 3
(
»»3 4
$num
»»4 5
)
»»5 6
;
»»6 7
}
¼¼ 
}
½½ 
}
¾¾ 
}
¿¿ 
catch
ÀÀ 
(
ÀÀ 
SqlException
ÀÀ #
	exceptSql
ÀÀ$ -
)
ÀÀ- .
{
ÁÁ 
IO
ÂÂ 
.
ÂÂ 
Logger
ÂÂ 
.
ÂÂ 
Log
ÂÂ !
(
ÂÂ! "
NLog
ÂÂ" &
.
ÂÂ& '
LogLevel
ÂÂ' /
.
ÂÂ/ 0
Warn
ÂÂ0 4
,
ÂÂ4 5
	exceptSql
ÂÂ6 ?
,
ÂÂ? @
$str
ÂÂA [
)
ÂÂ[ \
;
ÂÂ\ ]
}
ÃÃ 
}
ÄÄ 
break
ÅÅ 
;
ÅÅ 
default
ÆÆ 
:
ÆÆ 
data
ÉÉ 
=
ÉÉ 
null
ÉÉ 
;
ÉÉ 
break
ÊÊ 
;
ÊÊ 
}
ËË 	
switch
ÌÌ 
(
ÌÌ 
$num
ÌÌ 
)
ÌÌ 
{
ÍÍ 	
case
ÎÎ 
$num
ÎÎ 
:
ÎÎ 
IO
ÐÐ 
.
ÐÐ 
	WriteLine
ÐÐ 
(
ÐÐ 
$str
ÐÐ /
)
ÐÐ/ 0
;
ÐÐ0 1
break
ÑÑ 
;
ÑÑ 
default
ÒÒ 
:
ÒÒ 
try
ÓÓ 
{
ÔÔ 
int
ÕÕ 
value
ÕÕ 
=
ÕÕ 
int
ÕÕ 
.
ÕÕ  
Parse
ÕÕ  %
(
ÕÕ% &
data
ÕÕ& *
)
ÕÕ* +
;
ÕÕ+ ,
}
ÖÖ 
catch
×× 
(
×× 
FormatException
×× " 
exceptNumberFormat
××# 5
)
××5 6
{
ØØ 
IO
ÚÚ 
.
ÚÚ 
Logger
ÚÚ 
.
ÚÚ 
Log
ÚÚ 
(
ÚÚ 
NLog
ÚÚ "
.
ÚÚ" #
LogLevel
ÚÚ# +
.
ÚÚ+ ,
Warn
ÚÚ, 0
,
ÚÚ0 1 
exceptNumberFormat
ÚÚ2 D
,
ÚÚD E
$str
ÚÚF j
+
ÚÚk l 
exceptNumberFormat
ÚÚm 
)ÚÚ 
;ÚÚ 
}
ÛÛ 
break
ÜÜ 
;
ÜÜ 
}
ÝÝ 	
}
ÞÞ 
private
áá 
void
áá 
GoodB2G2
áá 
(
áá 
)
áá 
{
ââ 
string
ãã 
data
ãã 
;
ãã 
switch
ää 
(
ää 
$num
ää 
)
ää 
{
åå 	
case
ææ 
$num
ææ 
:
ææ 
data
çç 
=
çç 
$str
çç 
;
çç 
{
éé 
try
êê 
{
ëë 
using
íí 
(
íí 
SqlConnection
íí (

connection
íí) 3
=
íí4 5
IO
íí6 8
.
íí8 9
GetDBConnection
íí9 H
(
ííH I
)
ííI J
)
ííJ K
{
îî 

connection
ïï "
.
ïï" #
Open
ïï# '
(
ïï' (
)
ïï( )
;
ïï) *
using
ññ 
(
ññ 

SqlCommand
ññ )
command
ññ* 1
=
ññ2 3
new
ññ4 7

SqlCommand
ññ8 B
(
ññB C
null
ññC G
,
ññG H

connection
ññI S
)
ññS T
)
ññT U
{
òò 
command
óó #
.
óó# $
CommandText
óó$ /
=
óó0 1
$str
óó2 U
;
óóU V
command
ôô #
.
ôô# $
Prepare
ôô$ +
(
ôô+ ,
)
ôô, -
;
ôô- .
using
õõ !
(
õõ" #
SqlDataReader
õõ# 0
dr
õõ1 3
=
õõ4 5
command
õõ6 =
.
õõ= >
ExecuteReader
õõ> K
(
õõK L
)
õõL M
)
õõM N
{
öö 
data
øø  $
=
øø% &
dr
øø' )
.
øø) *
	GetString
øø* 3
(
øø3 4
$num
øø4 5
)
øø5 6
;
øø6 7
}
ùù 
}
úú 
}
ûû 
}
üü 
catch
ýý 
(
ýý 
SqlException
ýý #
	exceptSql
ýý$ -
)
ýý- .
{
þþ 
IO
ÿÿ 
.
ÿÿ 
Logger
ÿÿ 
.
ÿÿ 
Log
ÿÿ !
(
ÿÿ! "
NLog
ÿÿ" &
.
ÿÿ& '
LogLevel
ÿÿ' /
.
ÿÿ/ 0
Warn
ÿÿ0 4
,
ÿÿ4 5
	exceptSql
ÿÿ6 ?
,
ÿÿ? @
$str
ÿÿA [
)
ÿÿ[ \
;
ÿÿ\ ]
}
 
}
 
break
 
;
 
default
 
:
 
data
 
=
 
null
 
;
 
break
 
;
 
}
 	
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
break
 
;
 
default
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
   
(
   
)
   
;
   
GoodB2G1
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
GoodB2G2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}¥¥ 
}¦¦ >
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_16.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_16 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
while!! 
(!! 
true!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{%% 
try&& 
{'' 
using)) 
()) 
SqlConnection)) (

connection))) 3
=))4 5
IO))6 8
.))8 9
GetDBConnection))9 H
())H I
)))I J
)))J K
{** 

connection++ "
.++" #
Open++# '
(++' (
)++( )
;++) *
using-- 
(-- 

SqlCommand-- )
command--* 1
=--2 3
new--4 7

SqlCommand--8 B
(--B C
null--C G
,--G H

connection--I S
)--S T
)--T U
{.. 
command// #
.//# $
CommandText//$ /
=//0 1
$str//2 U
;//U V
command00 #
.00# $
Prepare00$ +
(00+ ,
)00, -
;00- .
using11 !
(11" #
SqlDataReader11# 0
dr111 3
=114 5
command116 =
.11= >
ExecuteReader11> K
(11K L
)11L M
)11M N
{22 
data44  $
=44% &
dr44' )
.44) *
	GetString44* 3
(443 4
$num444 5
)445 6
;446 7
}55 
}66 
}77 
}88 
catch99 
(99 
SqlException99 #
	exceptSql99$ -
)99- .
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
	exceptSql;;6 ?
,;;? @
$str;;A [
);;[ \
;;;\ ]
}<< 
}== 
break>> 
;>> 
}?? 	
while@@ 
(@@ 
true@@ 
)@@ 
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
breakKK 
;KK 
}LL 	
}MM 
privateQQ 
voidQQ 
GoodG2BQQ 
(QQ 
)QQ 
{RR 
stringSS 
dataSS 
;SS 
whileTT 
(TT 
trueTT 
)TT 
{UU 	
dataWW 
=WW 
$strWW 
;WW 
breakXX 
;XX 
}YY 	
whileZZ 
(ZZ 
trueZZ 
)ZZ 
{[[ 	
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
breakee 
;ee 
}ff 	
}gg 
privatejj 
voidjj 
GoodB2Gjj 
(jj 
)jj 
{kk 
stringll 
datall 
;ll 
whilemm 
(mm 
truemm 
)mm 
{nn 	
dataoo 
=oo 
$stroo 
;oo 
{qq 
tryrr 
{ss 
usinguu 
(uu 
SqlConnectionuu (

connectionuu) 3
=uu4 5
IOuu6 8
.uu8 9
GetDBConnectionuu9 H
(uuH I
)uuI J
)uuJ K
{vv 

connectionww "
.ww" #
Openww# '
(ww' (
)ww( )
;ww) *
usingyy 
(yy 

SqlCommandyy )
commandyy* 1
=yy2 3
newyy4 7

SqlCommandyy8 B
(yyB C
nullyyC G
,yyG H

connectionyyI S
)yyS T
)yyT U
{zz 
command{{ #
.{{# $
CommandText{{$ /
={{0 1
$str{{2 U
;{{U V
command|| #
.||# $
Prepare||$ +
(||+ ,
)||, -
;||- .
using}} !
(}}" #
SqlDataReader}}# 0
dr}}1 3
=}}4 5
command}}6 =
.}}= >
ExecuteReader}}> K
(}}K L
)}}L M
)}}M N
{~~ 
data
  $
=
% &
dr
' )
.
) *
	GetString
* 3
(
3 4
$num
4 5
)
5 6
;
6 7
}
 
}
 
}
 
}
 
catch
 
(
 
SqlException
 #
	exceptSql
$ -
)
- .
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
	exceptSql
6 ?
,
? @
$str
A [
)
[ \
;
\ ]
}
 
}
 
break
 
;
 
}
 	
while
 
(
 
true
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
break
 
;
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
}¡¡ 
}¢¢ ¬=
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_17.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_17 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data%% 
=%% 
$str%% 
;%% 
{'' 	
try(( 
{)) 
using++ 
(++ 
SqlConnection++ $

connection++% /
=++0 1
IO++2 4
.++4 5
GetDBConnection++5 D
(++D E
)++E F
)++F G
{,, 

connection-- 
.-- 
Open-- #
(--# $
)--$ %
;--% &
using// 
(// 

SqlCommand// %
command//& -
=//. /
new//0 3

SqlCommand//4 >
(//> ?
null//? C
,//C D

connection//E O
)//O P
)//P Q
{00 
command11 
.11  
CommandText11  +
=11, -
$str11. Q
;11Q R
command22 
.22  
Prepare22  '
(22' (
)22( )
;22) *
using33 
(33 
SqlDataReader33 ,
dr33- /
=330 1
command332 9
.339 :
ExecuteReader33: G
(33G H
)33H I
)33I J
{44 
data66  
=66! "
dr66# %
.66% &
	GetString66& /
(66/ 0
$num660 1
)661 2
;662 3
}77 
}88 
}99 
}:: 
catch;; 
(;; 
SqlException;; 
	exceptSql;;  )
);;) *
{<< 
IO== 
.== 
Logger== 
.== 
Log== 
(== 
NLog== "
.==" #
LogLevel==# +
.==+ ,
Warn==, 0
,==0 1
	exceptSql==2 ;
,==; <
$str=== W
)==W X
;==X Y
}>> 
}?? 	
for@@ 
(@@ 
int@@ 
j@@ 
=@@ 
$num@@ 
;@@ 
j@@ 
<@@ 
$num@@ 
;@@ 
j@@  
++@@  "
)@@" #
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2BPP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
dataTT 
=TT 
$strTT 
;TT 
forUU 
(UU 
intUU 
jUU 
=UU 
$numUU 
;UU 
jUU 
<UU 
$numUU 
;UU 
jUU  
++UU  "
)UU" #
{VV 	
tryWW 
{XX 
intYY 
valueYY 
=YY 
intYY 
.YY  
ParseYY  %
(YY% &
dataYY& *
)YY* +
;YY+ ,
}ZZ 
catch[[ 
([[ 
FormatException[[ "
exceptNumberFormat[[# 5
)[[5 6
{\\ 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
exceptNumberFormat^^2 D
,^^D E
$str^^F `
+^^a b
data^^c g
)^^g h
;^^h i
}__ 
}`` 	
}aa 
privatedd 
voiddd 
GoodB2Gdd 
(dd 
)dd 
{ee 
stringff 
dataff 
;ff 
datagg 
=gg 
$strgg 
;gg 
{ii 	
tryjj 
{kk 
usingmm 
(mm 
SqlConnectionmm $

connectionmm% /
=mm0 1
IOmm2 4
.mm4 5
GetDBConnectionmm5 D
(mmD E
)mmE F
)mmF G
{nn 

connectionoo 
.oo 
Openoo #
(oo# $
)oo$ %
;oo% &
usingqq 
(qq 

SqlCommandqq %
commandqq& -
=qq. /
newqq0 3

SqlCommandqq4 >
(qq> ?
nullqq? C
,qqC D

connectionqqE O
)qqO P
)qqP Q
{rr 
commandss 
.ss  
CommandTextss  +
=ss, -
$strss. Q
;ssQ R
commandtt 
.tt  
Preparett  '
(tt' (
)tt( )
;tt) *
usinguu 
(uu 
SqlDataReaderuu ,
druu- /
=uu0 1
commanduu2 9
.uu9 :
ExecuteReaderuu: G
(uuG H
)uuH I
)uuI J
{vv 
dataxx  
=xx! "
drxx# %
.xx% &
	GetStringxx& /
(xx/ 0
$numxx0 1
)xx1 2
;xx2 3
}yy 
}zz 
}{{ 
}|| 
catch}} 
(}} 
SqlException}} 
	exceptSql}}  )
)}}) *
{~~ 
IO 
. 
Logger 
. 
Log 
( 
NLog "
." #
LogLevel# +
.+ ,
Warn, 0
,0 1
	exceptSql2 ;
,; <
$str= W
)W X
;X Y
}
 
}
 	
for
 
(
 
int
 
k
 
=
 
$num
 
;
 
k
 
<
 
$num
 
;
 
k
  
++
  "
)
" #
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
} 
} Éb
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_21.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_21 A
:B C
AbstractTestCaseD T
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 	
try'' 
{(( 
using** 
(** 
SqlConnection** $

connection**% /
=**0 1
IO**2 4
.**4 5
GetDBConnection**5 D
(**D E
)**E F
)**F G
{++ 

connection,, 
.,, 
Open,, #
(,,# $
),,$ %
;,,% &
using.. 
(.. 

SqlCommand.. %
command..& -
=... /
new..0 3

SqlCommand..4 >
(..> ?
null..? C
,..C D

connection..E O
)..O P
)..P Q
{// 
command00 
.00  
CommandText00  +
=00, -
$str00. Q
;00Q R
command11 
.11  
Prepare11  '
(11' (
)11( )
;11) *
using22 
(22 
SqlDataReader22 ,
dr22- /
=220 1
command222 9
.229 :
ExecuteReader22: G
(22G H
)22H I
)22I J
{33 
data55  
=55! "
dr55# %
.55% &
	GetString55& /
(55/ 0
$num550 1
)551 2
;552 3
}66 
}77 
}88 
}99 
catch:: 
(:: 
SqlException:: 
	exceptSql::  )
)::) *
{;; 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
	exceptSql<<2 ;
,<<; <
$str<<= W
)<<W X
;<<X Y
}== 
}>> 	

badPrivate?? 
=?? 
true?? 
;?? 
BadSink@@ 
(@@ 
data@@ 
)@@ 
;@@ 
}AA 
privateCC 
voidCC 
BadSinkCC 
(CC 
stringCC 
dataCC  $
)CC% &
{DD 
ifEE 

(EE 

badPrivateEE 
)EE 
{FF 	
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateTT 
boolTT 
goodB2G1PrivateTT  
=TT! "
falseTT# (
;TT( )
privateUU 
boolUU 
goodB2G2PrivateUU  
=UU! "
falseUU# (
;UU( )
privateVV 
boolVV 
goodG2BPrivateVV 
=VV  !
falseVV" '
;VV' (
publicXX 

overrideXX 
voidXX 
GoodXX 
(XX 
)XX 
{YY 
GoodB2G1ZZ 
(ZZ 
)ZZ 
;ZZ 
GoodB2G2[[ 
([[ 
)[[ 
;[[ 
GoodG2B\\ 
(\\ 
)\\ 
;\\ 
}]] 
private`` 
void`` 
GoodB2G1`` 
(`` 
)`` 
{aa 
stringbb 
databb 
;bb 
datacc 
=cc 
$strcc 
;cc 
{ee 	
tryff 
{gg 
usingii 
(ii 
SqlConnectionii $

connectionii% /
=ii0 1
IOii2 4
.ii4 5
GetDBConnectionii5 D
(iiD E
)iiE F
)iiF G
{jj 

connectionkk 
.kk 
Openkk #
(kk# $
)kk$ %
;kk% &
usingmm 
(mm 

SqlCommandmm %
commandmm& -
=mm. /
newmm0 3

SqlCommandmm4 >
(mm> ?
nullmm? C
,mmC D

connectionmmE O
)mmO P
)mmP Q
{nn 
commandoo 
.oo  
CommandTextoo  +
=oo, -
$stroo. Q
;ooQ R
commandpp 
.pp  
Preparepp  '
(pp' (
)pp( )
;pp) *
usingqq 
(qq 
SqlDataReaderqq ,
drqq- /
=qq0 1
commandqq2 9
.qq9 :
ExecuteReaderqq: G
(qqG H
)qqH I
)qqI J
{rr 
datatt  
=tt! "
drtt# %
.tt% &
	GetStringtt& /
(tt/ 0
$numtt0 1
)tt1 2
;tt2 3
}uu 
}vv 
}ww 
}xx 
catchyy 
(yy 
SqlExceptionyy 
	exceptSqlyy  )
)yy) *
{zz 
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ "
.{{" #
LogLevel{{# +
.{{+ ,
Warn{{, 0
,{{0 1
	exceptSql{{2 ;
,{{; <
$str{{= W
){{W X
;{{X Y
}|| 
}}} 	
goodB2G1Private~~ 
=~~ 
false~~ 
;~~  
GoodB2G1Sink 
( 
data 
) 
; 
}
 
private
 
void
 
GoodB2G1Sink
 
(
 
string
 $
data
% )
)
* +
{
 
if
 

(
 
goodB2G1Private
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
{
 	
try
 
{
 
using
¡¡ 
(
¡¡ 
SqlConnection
¡¡ $

connection
¡¡% /
=
¡¡0 1
IO
¡¡2 4
.
¡¡4 5
GetDBConnection
¡¡5 D
(
¡¡D E
)
¡¡E F
)
¡¡F G
{
¢¢ 

connection
££ 
.
££ 
Open
££ #
(
££# $
)
££$ %
;
££% &
using
¥¥ 
(
¥¥ 

SqlCommand
¥¥ %
command
¥¥& -
=
¥¥. /
new
¥¥0 3

SqlCommand
¥¥4 >
(
¥¥> ?
null
¥¥? C
,
¥¥C D

connection
¥¥E O
)
¥¥O P
)
¥¥P Q
{
¦¦ 
command
§§ 
.
§§  
CommandText
§§  +
=
§§, -
$str
§§. Q
;
§§Q R
command
¨¨ 
.
¨¨  
Prepare
¨¨  '
(
¨¨' (
)
¨¨( )
;
¨¨) *
using
©© 
(
©© 
SqlDataReader
©© ,
dr
©©- /
=
©©0 1
command
©©2 9
.
©©9 :
ExecuteReader
©©: G
(
©©G H
)
©©H I
)
©©I J
{
ªª 
data
¬¬  
=
¬¬! "
dr
¬¬# %
.
¬¬% &
	GetString
¬¬& /
(
¬¬/ 0
$num
¬¬0 1
)
¬¬1 2
;
¬¬2 3
}
­­ 
}
®® 
}
¯¯ 
}
°° 
catch
±± 
(
±± 
SqlException
±± 
	exceptSql
±±  )
)
±±) *
{
²² 
IO
³³ 
.
³³ 
Logger
³³ 
.
³³ 
Log
³³ 
(
³³ 
NLog
³³ "
.
³³" #
LogLevel
³³# +
.
³³+ ,
Warn
³³, 0
,
³³0 1
	exceptSql
³³2 ;
,
³³; <
$str
³³= W
)
³³W X
;
³³X Y
}
´´ 
}
µµ 	
goodB2G2Private
¶¶ 
=
¶¶ 
true
¶¶ 
;
¶¶ 
GoodB2G2Sink
·· 
(
·· 
data
·· 
)
·· 
;
·· 
}
¸¸ 
private
ºº 
void
ºº 
GoodB2G2Sink
ºº 
(
ºº 
string
ºº $
data
ºº% )
)
ºº* +
{
»» 
if
¼¼ 

(
¼¼ 
goodB2G2Private
¼¼ 
)
¼¼ 
{
½½ 	
try
¾¾ 
{
¿¿ 
int
ÀÀ 
value
ÀÀ 
=
ÀÀ 
int
ÀÀ 
.
ÀÀ  
Parse
ÀÀ  %
(
ÀÀ% &
data
ÀÀ& *
)
ÀÀ* +
;
ÀÀ+ ,
}
ÁÁ 
catch
ÂÂ 
(
ÂÂ 
FormatException
ÂÂ " 
exceptNumberFormat
ÂÂ# 5
)
ÂÂ5 6
{
ÃÃ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ 
.
ÅÅ 
Log
ÅÅ 
(
ÅÅ 
NLog
ÅÅ "
.
ÅÅ" #
LogLevel
ÅÅ# +
.
ÅÅ+ ,
Warn
ÅÅ, 0
,
ÅÅ0 1 
exceptNumberFormat
ÅÅ2 D
,
ÅÅD E
$str
ÅÅF j
+
ÅÅk l 
exceptNumberFormat
ÅÅm 
)ÅÅ 
;ÅÅ 
}
ÆÆ 
}
ÇÇ 	
}
ÈÈ 
private
ËË 
void
ËË 
GoodG2B
ËË 
(
ËË 
)
ËË 
{
ÌÌ 
string
ÍÍ 
data
ÍÍ 
;
ÍÍ 
data
ÏÏ 
=
ÏÏ 
$str
ÏÏ 
;
ÏÏ 
goodG2BPrivate
ÐÐ 
=
ÐÐ 
true
ÐÐ 
;
ÐÐ 
GoodG2BSink
ÑÑ 
(
ÑÑ 
data
ÑÑ 
)
ÑÑ 
;
ÑÑ 
}
ÒÒ 
private
ÔÔ 
void
ÔÔ 
GoodG2BSink
ÔÔ 
(
ÔÔ 
string
ÔÔ #
data
ÔÔ$ (
)
ÔÔ) *
{
ÕÕ 
if
ÖÖ 

(
ÖÖ 
goodG2BPrivate
ÖÖ 
)
ÖÖ 
{
×× 	
try
ØØ 
{
ÙÙ 
int
ÚÚ 
value
ÚÚ 
=
ÚÚ 
int
ÚÚ 
.
ÚÚ  
Parse
ÚÚ  %
(
ÚÚ% &
data
ÚÚ& *
)
ÚÚ* +
;
ÚÚ+ ,
}
ÛÛ 
catch
ÜÜ 
(
ÜÜ 
FormatException
ÜÜ " 
exceptNumberFormat
ÜÜ# 5
)
ÜÜ5 6
{
ÝÝ 
IO
ßß 
.
ßß 
Logger
ßß 
.
ßß 
Log
ßß 
(
ßß 
NLog
ßß "
.
ßß" #
LogLevel
ßß# +
.
ßß+ ,
Warn
ßß, 0
,
ßß0 1 
exceptNumberFormat
ßß2 D
,
ßßD E
$str
ßßF `
+
ßßa b
data
ßßc g
)
ßßg h
;
ßßh i
}
àà 
}
áá 	
}
ââ 
}ää 
}åå E
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_22a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_22a B
:C D
AbstractTestCaseE U
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
=## 
null## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 	
try'' 
{(( 
using** 
(** 
SqlConnection** $

connection**% /
=**0 1
IO**2 4
.**4 5
GetDBConnection**5 D
(**D E
)**E F
)**F G
{++ 

connection,, 
.,, 
Open,, #
(,,# $
),,$ %
;,,% &
using.. 
(.. 

SqlCommand.. %
command..& -
=... /
new..0 3

SqlCommand..4 >
(..> ?
null..? C
,..C D

connection..E O
)..O P
)..P Q
{// 
command00 
.00  
CommandText00  +
=00, -
$str00. Q
;00Q R
command11 
.11  
Prepare11  '
(11' (
)11( )
;11) *
using22 
(22 
SqlDataReader22 ,
dr22- /
=220 1
command222 9
.229 :
ExecuteReader22: G
(22G H
)22H I
)22I J
{33 
data55  
=55! "
dr55# %
.55% &
	GetString55& /
(55/ 0
$num550 1
)551 2
;552 3
}66 
}77 
}88 
}99 
catch:: 
(:: 
SqlException:: 
	exceptSql::  )
)::) *
{;; 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
	exceptSql<<2 ;
,<<; <
$str<<= W
)<<W X
;<<X Y
}== 
}>> 	
badPublicStatic?? 
=?? 
true?? 
;?? H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_22b@@ D
.@@D E
BadSink@@E L
(@@L M
data@@M Q
)@@R S
;@@S T
}AA 
publicDD 

staticDD 
boolDD  
goodB2G1PublicStaticDD +
=DD, -
falseDD. 3
;DD3 4
publicEE 

staticEE 
boolEE  
goodB2G2PublicStaticEE +
=EE, -
falseEE. 3
;EE3 4
publicFF 

staticFF 
boolFF 
goodG2BPublicStaticFF *
=FF+ ,
falseFF- 2
;FF2 3
publicHH 

overrideHH 
voidHH 
GoodHH 
(HH 
)HH 
{II 
GoodB2G1JJ 
(JJ 
)JJ 
;JJ 
GoodB2G2KK 
(KK 
)KK 
;KK 
GoodG2BLL 
(LL 
)LL 
;LL 
}MM 
privatePP 
voidPP 
GoodB2G1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
=RR 
nullRR 
;RR 
dataSS 
=SS 
$strSS 
;SS 
{UU 	
tryVV 
{WW 
usingYY 
(YY 
SqlConnectionYY $

connectionYY% /
=YY0 1
IOYY2 4
.YY4 5
GetDBConnectionYY5 D
(YYD E
)YYE F
)YYF G
{ZZ 

connection[[ 
.[[ 
Open[[ #
([[# $
)[[$ %
;[[% &
using]] 
(]] 

SqlCommand]] %
command]]& -
=]]. /
new]]0 3

SqlCommand]]4 >
(]]> ?
null]]? C
,]]C D

connection]]E O
)]]O P
)]]P Q
{^^ 
command__ 
.__  
CommandText__  +
=__, -
$str__. Q
;__Q R
command`` 
.``  
Prepare``  '
(``' (
)``( )
;``) *
usingaa 
(aa 
SqlDataReaderaa ,
draa- /
=aa0 1
commandaa2 9
.aa9 :
ExecuteReaderaa: G
(aaG H
)aaH I
)aaI J
{bb 
datadd  
=dd! "
drdd# %
.dd% &
	GetStringdd& /
(dd/ 0
$numdd0 1
)dd1 2
;dd2 3
}ee 
}ff 
}gg 
}hh 
catchii 
(ii 
SqlExceptionii 
	exceptSqlii  )
)ii) *
{jj 
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk "
.kk" #
LogLevelkk# +
.kk+ ,
Warnkk, 0
,kk0 1
	exceptSqlkk2 ;
,kk; <
$strkk= W
)kkW X
;kkX Y
}ll 
}mm 	 
goodB2G1PublicStaticnn 
=nn 
falsenn $
;nn$ %H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_22boo D
.ooD E
GoodB2G1SinkooE Q
(ooQ R
dataooR V
)ooW X
;ooX Y
}pp 
privatess 
voidss 
GoodB2G2ss 
(ss 
)ss 
{tt 
stringuu 
datauu 
=uu 
nulluu 
;uu 
datavv 
=vv 
$strvv 
;vv 
{xx 	
tryyy 
{zz 
using|| 
(|| 
SqlConnection|| $

connection||% /
=||0 1
IO||2 4
.||4 5
GetDBConnection||5 D
(||D E
)||E F
)||F G
{}} 

connection~~ 
.~~ 
Open~~ #
(~~# $
)~~$ %
;~~% &
using
 
(
 

SqlCommand
 %
command
& -
=
. /
new
0 3

SqlCommand
4 >
(
> ?
null
? C
,
C D

connection
E O
)
O P
)
P Q
{
 
command
 
.
  
CommandText
  +
=
, -
$str
. Q
;
Q R
command
 
.
  
Prepare
  '
(
' (
)
( )
;
) *
using
 
(
 
SqlDataReader
 ,
dr
- /
=
0 1
command
2 9
.
9 :
ExecuteReader
: G
(
G H
)
H I
)
I J
{
 
data
  
=
! "
dr
# %
.
% &
	GetString
& /
(
/ 0
$num
0 1
)
1 2
;
2 3
}
 
}
 
}
 
}
 
catch
 
(
 
SqlException
 
	exceptSql
  )
)
) *
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
	exceptSql
2 ;
,
; <
$str
= W
)
W X
;
X Y
}
 
}
 	"
goodB2G2PublicStatic
 
=
 
true
 #
;
# $J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_22b
 D
.
D E
GoodB2G2Sink
E Q
(
Q R
data
R V
)
W X
;
X Y
}
 
private
 
void
 
GoodG2B
 
(
 
)
 
{
 
string
 
data
 
=
 
null
 
;
 
data
 
=
 
$str
 
;
 !
goodG2BPublicStatic
 
=
 
true
 "
;
" #J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_22b
 D
.
D E
GoodG2BSink
E P
(
P Q
data
Q U
)
V W
;
W X
}
 
} 
}   È(
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_22b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_22b B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
if 

( H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_22a H
.H I
badPublicStaticI X
)X Y
{ 	
try   
{!! 
int"" 
value"" 
="" 
int"" 
.""  
Parse""  %
(""% &
data""& *
)""* +
;""+ ,
}## 
catch$$ 
($$ 
FormatException$$ "
exceptNumberFormat$$# 5
)$$5 6
{%% 
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' "
.''" #
LogLevel''# +
.''+ ,
Warn'', 0
,''0 1
exceptNumberFormat''2 D
,''D E
$str''F `
+''a b
data''c g
)''g h
;''h i
}(( 
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
}00 
public55 

static55 
void55 
GoodB2G1Sink55 #
(55# $
string55$ *
data55+ /
)550 1
{66 
if77 

(77 H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_22a77 H
.77H I 
goodB2G1PublicStatic77I ]
)77] ^
{88 	
data;; 
=;; 
null;; 
;;; 
}<< 	
else== 
{>> 	
try?? 
{@@ 
intAA 
valueAA 
=AA 
intAA 
.AA  
ParseAA  %
(AA% &
dataAA& *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
FormatExceptionCC "
exceptNumberFormatCC# 5
)CC5 6
{DD 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
exceptNumberFormatFF2 D
,FFD E
$strFFF j
+FFk l
exceptNumberFormatFFm 
)	FF 
;
FF 
}GG 
}HH 	
}II 
publicLL 

staticLL 
voidLL 
GoodB2G2SinkLL #
(LL# $
stringLL$ *
dataLL+ /
)LL0 1
{MM 
ifNN 

(NN H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_22aNN H
.NNH I 
goodB2G2PublicStaticNNI ]
)NN] ^
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF j
+WWk l
exceptNumberFormatWWm 
)	WW 
;
WW 
}XX 
}YY 	
elseZZ 
{[[ 	
data^^ 
=^^ 
null^^ 
;^^ 
}__ 	
}`` 
publiccc 

staticcc 
voidcc 
GoodG2BSinkcc "
(cc" #
stringcc# )
datacc* .
)cc/ 0
{dd 
ifee 

(ee H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_22aee H
.eeH I
goodG2BPublicStaticeeI \
)ee\ ]
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF `
+nna b
datannc g
)nng h
;nnh i
}oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
}ww 
}yy 
}zz ¾>
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_31.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_31 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
dataCopy   
;   
{!! 	
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 
try&& 
{'' 
using)) 
()) 
SqlConnection)) (

connection))) 3
=))4 5
IO))6 8
.))8 9
GetDBConnection))9 H
())H I
)))I J
)))J K
{** 

connection++ "
.++" #
Open++# '
(++' (
)++( )
;++) *
using-- 
(-- 

SqlCommand-- )
command--* 1
=--2 3
new--4 7

SqlCommand--8 B
(--B C
null--C G
,--G H

connection--I S
)--S T
)--T U
{.. 
command// #
.//# $
CommandText//$ /
=//0 1
$str//2 U
;//U V
command00 #
.00# $
Prepare00$ +
(00+ ,
)00, -
;00- .
using11 !
(11" #
SqlDataReader11# 0
dr111 3
=114 5
command116 =
.11= >
ExecuteReader11> K
(11K L
)11L M
)11M N
{22 
data44  $
=44% &
dr44' )
.44) *
	GetString44* 3
(443 4
$num444 5
)445 6
;446 7
}55 
}66 
}77 
}88 
catch99 
(99 
SqlException99 #
	exceptSql99$ -
)99- .
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
	exceptSql;;6 ?
,;;? @
$str;;A [
);;[ \
;;;\ ]
}<< 
}== 
dataCopy>> 
=>> 
data>> 
;>> 
}?? 	
{@@ 	
stringAA 
dataAA 
=AA 
dataCopyAA "
;AA" #
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
publicOO 

overrideOO 
voidOO 
GoodOO 
(OO 
)OO 
{PP 
GoodG2BQQ 
(QQ 
)QQ 
;QQ 
GoodB2GRR 
(RR 
)RR 
;RR 
}SS 
privateVV 
voidVV 
GoodG2BVV 
(VV 
)VV 
{WW 
stringXX 
dataCopyXX 
;XX 
{YY 	
stringZZ 
dataZZ 
;ZZ 
data\\ 
=\\ 
$str\\ 
;\\ 
dataCopy]] 
=]] 
data]] 
;]] 
}^^ 	
{__ 	
string`` 
data`` 
=`` 
dataCopy`` "
;``" #
tryaa 
{bb 
intcc 
valuecc 
=cc 
intcc 
.cc  
Parsecc  %
(cc% &
datacc& *
)cc* +
;cc+ ,
}dd 
catchee 
(ee 
FormatExceptionee "
exceptNumberFormatee# 5
)ee5 6
{ff 
IOhh 
.hh 
Loggerhh 
.hh 
Loghh 
(hh 
NLoghh "
.hh" #
LogLevelhh# +
.hh+ ,
Warnhh, 0
,hh0 1
exceptNumberFormathh2 D
,hhD E
$strhhF `
+hha b
datahhc g
)hhg h
;hhh i
}ii 
}jj 	
}kk 
privatenn 
voidnn 
GoodB2Gnn 
(nn 
)nn 
{oo 
stringpp 
dataCopypp 
;pp 
{qq 	
stringrr 
datarr 
;rr 
datass 
=ss 
$strss 
;ss 
{uu 
tryvv 
{ww 
usingyy 
(yy 
SqlConnectionyy (

connectionyy) 3
=yy4 5
IOyy6 8
.yy8 9
GetDBConnectionyy9 H
(yyH I
)yyI J
)yyJ K
{zz 

connection{{ "
.{{" #
Open{{# '
({{' (
){{( )
;{{) *
using}} 
(}} 

SqlCommand}} )
command}}* 1
=}}2 3
new}}4 7

SqlCommand}}8 B
(}}B C
null}}C G
,}}G H

connection}}I S
)}}S T
)}}T U
{~~ 
command #
.# $
CommandText$ /
=0 1
$str2 U
;U V
command
 #
.
# $
Prepare
$ +
(
+ ,
)
, -
;
- .
using
 !
(
" #
SqlDataReader
# 0
dr
1 3
=
4 5
command
6 =
.
= >
ExecuteReader
> K
(
K L
)
L M
)
M N
{
 
data
  $
=
% &
dr
' )
.
) *
	GetString
* 3
(
3 4
$num
4 5
)
5 6
;
6 7
}
 
}
 
}
 
}
 
catch
 
(
 
SqlException
 #
	exceptSql
$ -
)
- .
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
	exceptSql
6 ?
,
? @
$str
A [
)
[ \
;
\ ]
}
 
}
 
dataCopy
 
=
 
data
 
;
 
}
 	
{
 	
string
 
data
 
=
 
dataCopy
 "
;
" #
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
} 
} ¶>
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_41.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_41 A
:B C
AbstractTestCaseD T
{ 
private 
static 
void 
BadSink 
(  
string  &
data' +
), -
{ 
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public++ 

override++ 
void++ 
Bad++ 
(++ 
)++ 
{,, 
string-- 
data-- 
;-- 
data.. 
=.. 
$str.. 
;.. 
{00 	
try11 
{22 
using44 
(44 
SqlConnection44 $

connection44% /
=440 1
IO442 4
.444 5
GetDBConnection445 D
(44D E
)44E F
)44F G
{55 

connection66 
.66 
Open66 #
(66# $
)66$ %
;66% &
using88 
(88 

SqlCommand88 %
command88& -
=88. /
new880 3

SqlCommand884 >
(88> ?
null88? C
,88C D

connection88E O
)88O P
)88P Q
{99 
command:: 
.::  
CommandText::  +
=::, -
$str::. Q
;::Q R
command;; 
.;;  
Prepare;;  '
(;;' (
);;( )
;;;) *
using<< 
(<< 
SqlDataReader<< ,
dr<<- /
=<<0 1
command<<2 9
.<<9 :
ExecuteReader<<: G
(<<G H
)<<H I
)<<I J
{== 
data??  
=??! "
dr??# %
.??% &
	GetString??& /
(??/ 0
$num??0 1
)??1 2
;??2 3
}@@ 
}AA 
}BB 
}CC 
catchDD 
(DD 
SqlExceptionDD 
	exceptSqlDD  )
)DD) *
{EE 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
	exceptSqlFF2 ;
,FF; <
$strFF= W
)FFW X
;FFX Y
}GG 
}HH 	
BadSinkII 
(II 
dataII 
)II 
;II 
}JJ 
publicMM 

overrideMM 
voidMM 
GoodMM 
(MM 
)MM 
{NN 
GoodG2BOO 
(OO 
)OO 
;OO 
GoodB2GPP 
(PP 
)PP 
;PP 
}QQ 
privateSS 
staticSS 
voidSS 
GoodG2BSinkSS #
(SS# $
stringSS$ *
dataSS+ /
)SS0 1
{TT 
tryUU 
{VV 	
intWW 
valueWW 
=WW 
intWW 
.WW 
ParseWW !
(WW! "
dataWW" &
)WW& '
;WW' (
}XX 	
catchYY 
(YY 
FormatExceptionYY 
exceptNumberFormatYY 1
)YY1 2
{ZZ 	
IO\\ 
.\\ 
Logger\\ 
.\\ 
Log\\ 
(\\ 
NLog\\ 
.\\ 
LogLevel\\ '
.\\' (
Warn\\( ,
,\\, -
exceptNumberFormat\\. @
,\\@ A
$str\\B \
+\\] ^
data\\_ c
)\\c d
;\\d e
}]] 	
}^^ 
privateaa 
staticaa 
voidaa 
GoodG2Baa 
(aa  
)aa  !
{bb 
stringcc 
datacc 
;cc 
dataee 
=ee 
$stree 
;ee 
GoodG2BSinkff 
(ff 
dataff 
)ff 
;ff 
}gg 
privateii 
staticii 
voidii 
GoodB2GSinkii #
(ii# $
stringii$ *
dataii+ /
)ii0 1
{jj 
trykk 
{ll 	
intmm 
valuemm 
=mm 
intmm 
.mm 
Parsemm !
(mm! "
datamm" &
)mm& '
;mm' (
}nn 	
catchoo 
(oo 
FormatExceptionoo 
exceptNumberFormatoo 1
)oo1 2
{pp 	
IOrr 
.rr 
Loggerrr 
.rr 
Logrr 
(rr 
NLogrr 
.rr 
LogLevelrr '
.rr' (
Warnrr( ,
,rr, -
exceptNumberFormatrr. @
,rr@ A
$strrrB f
+rrg h
exceptNumberFormatrri {
)rr{ |
;rr| }
}ss 	
}tt 
privateww 
staticww 
voidww 
GoodB2Gww 
(ww  
)ww  !
{xx 
stringyy 
datayy 
;yy 
datazz 
=zz 
$strzz 
;zz 
{|| 	
try}} 
{~~ 
using
 
(
 
SqlConnection
 $

connection
% /
=
0 1
IO
2 4
.
4 5
GetDBConnection
5 D
(
D E
)
E F
)
F G
{
 

connection
 
.
 
Open
 #
(
# $
)
$ %
;
% &
using
 
(
 

SqlCommand
 %
command
& -
=
. /
new
0 3

SqlCommand
4 >
(
> ?
null
? C
,
C D

connection
E O
)
O P
)
P Q
{
 
command
 
.
  
CommandText
  +
=
, -
$str
. Q
;
Q R
command
 
.
  
Prepare
  '
(
' (
)
( )
;
) *
using
 
(
 
SqlDataReader
 ,
dr
- /
=
0 1
command
2 9
.
9 :
ExecuteReader
: G
(
G H
)
H I
)
I J
{
 
data
  
=
! "
dr
# %
.
% &
	GetString
& /
(
/ 0
$num
0 1
)
1 2
;
2 3
}
 
}
 
}
 
}
 
catch
 
(
 
SqlException
 
	exceptSql
  )
)
) *
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
	exceptSql
2 ;
,
; <
$str
= W
)
W X
;
X Y
}
 
}
 	
GoodB2GSink
 
(
 
data
 
)
 
;
 
}
 
} 
} Ò?
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_42.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_42 A
:B C
AbstractTestCaseD T
{ 
private 
static 
string 
	BadSource #
(# $
)$ %
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	
try$$ 
{%% 
using'' 
('' 
SqlConnection'' $

connection''% /
=''0 1
IO''2 4
.''4 5
GetDBConnection''5 D
(''D E
)''E F
)''F G
{(( 

connection)) 
.)) 
Open)) #
())# $
)))$ %
;))% &
using++ 
(++ 

SqlCommand++ %
command++& -
=++. /
new++0 3

SqlCommand++4 >
(++> ?
null++? C
,++C D

connection++E O
)++O P
)++P Q
{,, 
command-- 
.--  
CommandText--  +
=--, -
$str--. Q
;--Q R
command.. 
...  
Prepare..  '
(..' (
)..( )
;..) *
using// 
(// 
SqlDataReader// ,
dr//- /
=//0 1
command//2 9
.//9 :
ExecuteReader//: G
(//G H
)//H I
)//I J
{00 
data22  
=22! "
dr22# %
.22% &
	GetString22& /
(22/ 0
$num220 1
)221 2
;222 3
}33 
}44 
}55 
}66 
catch77 
(77 
SqlException77 
	exceptSql77  )
)77) *
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
	exceptSql992 ;
,99; <
$str99= W
)99W X
;99X Y
}:: 
};; 	
return<< 
data<< 
;<< 
}== 
public?? 

override?? 
void?? 
Bad?? 
(?? 
)?? 
{@@ 
stringAA 
dataAA 
=AA 
	BadSourceAA 
(AA  
)AA  !
;AA! "
tryBB 
{CC 	
intDD 
valueDD 
=DD 
intDD 
.DD 
ParseDD !
(DD! "
dataDD" &
)DD& '
;DD' (
}EE 	
catchFF 
(FF 
FormatExceptionFF 
exceptNumberFormatFF 1
)FF1 2
{GG 	
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII 
.II 
LogLevelII '
.II' (
WarnII( ,
,II, -
exceptNumberFormatII. @
,II@ A
$strIIB \
+II] ^
dataII_ c
)IIc d
;IId e
}JJ 	
}KK 
privateOO 
staticOO 
stringOO 
GoodG2BSourceOO '
(OO' (
)OO( )
{PP 
stringQQ 
dataQQ 
;QQ 
dataSS 
=SS 
$strSS 
;SS 
returnTT 
dataTT 
;TT 
}UU 
privateWW 
staticWW 
voidWW 
GoodG2BWW 
(WW  
)WW  !
{XX 
stringYY 
dataYY 
=YY 
GoodG2BSourceYY #
(YY# $
)YY$ %
;YY% &
tryZZ 
{[[ 	
int\\ 
value\\ 
=\\ 
int\\ 
.\\ 
Parse\\ !
(\\! "
data\\" &
)\\& '
;\\' (
}]] 	
catch^^ 
(^^ 
FormatException^^ 
exceptNumberFormat^^ 1
)^^1 2
{__ 	
IOaa 
.aa 
Loggeraa 
.aa 
Logaa 
(aa 
NLogaa 
.aa 
LogLevelaa '
.aa' (
Warnaa( ,
,aa, -
exceptNumberFormataa. @
,aa@ A
$straaB \
+aa] ^
dataaa_ c
)aac d
;aad e
}bb 	
}cc 
privateff 
staticff 
stringff 
GoodB2GSourceff '
(ff' (
)ff( )
{gg 
stringhh 
datahh 
;hh 
dataii 
=ii 
$strii 
;ii 
{kk 	
tryll 
{mm 
usingoo 
(oo 
SqlConnectionoo $

connectionoo% /
=oo0 1
IOoo2 4
.oo4 5
GetDBConnectionoo5 D
(ooD E
)ooE F
)ooF G
{pp 

connectionqq 
.qq 
Openqq #
(qq# $
)qq$ %
;qq% &
usingss 
(ss 

SqlCommandss %
commandss& -
=ss. /
newss0 3

SqlCommandss4 >
(ss> ?
nullss? C
,ssC D

connectionssE O
)ssO P
)ssP Q
{tt 
commanduu 
.uu  
CommandTextuu  +
=uu, -
$struu. Q
;uuQ R
commandvv 
.vv  
Preparevv  '
(vv' (
)vv( )
;vv) *
usingww 
(ww 
SqlDataReaderww ,
drww- /
=ww0 1
commandww2 9
.ww9 :
ExecuteReaderww: G
(wwG H
)wwH I
)wwI J
{xx 
datazz  
=zz! "
drzz# %
.zz% &
	GetStringzz& /
(zz/ 0
$numzz0 1
)zz1 2
;zz2 3
}{{ 
}|| 
}}} 
}~~ 
catch 
( 
SqlException 
	exceptSql  )
)) *
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
	exceptSql
2 ;
,
; <
$str
= W
)
W X
;
X Y
}
 
}
 	
return
 
data
 
;
 
}
 
private
 
static
 
void
 
GoodB2G
 
(
  
)
  !
{
 
string
 
data
 
=
 
GoodB2GSource
 #
(
# $
)
$ %
;
% &
try
 
{
 	
int
 
value
 
=
 
int
 
.
 
Parse
 !
(
! "
data
" &
)
& '
;
' (
}
 	
catch
 
(
 
FormatException
  
exceptNumberFormat
 1
)
1 2
{
 	
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 
.
 
LogLevel
 '
.
' (
Warn
( ,
,
, - 
exceptNumberFormat
. @
,
@ A
$str
B f
+
g h 
exceptNumberFormat
i {
)
{ |
;
| }
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
} 
} ©B
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_45.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_45 A
:B C
AbstractTestCaseD T
{ 
private 
string 
dataBad 
; 
private 
string 
dataGoodG2B 
; 
private   
string   
dataGoodB2G   
;   
private"" 
void"" 
BadSink"" 
("" 
)"" 
{## 
string$$ 
data$$ 
=$$ 
dataBad$$ 
;$$ 
try%% 
{&& 	
int'' 
value'' 
='' 
int'' 
.'' 
Parse'' !
(''! "
data''" &
)''& '
;''' (
}(( 	
catch)) 
()) 
FormatException)) 
exceptNumberFormat)) 1
)))1 2
{** 	
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, 
.,, 
LogLevel,, '
.,,' (
Warn,,( ,
,,,, -
exceptNumberFormat,,. @
,,,@ A
$str,,B \
+,,] ^
data,,_ c
),,c d
;,,d e
}-- 	
}.. 
public00 

override00 
void00 
Bad00 
(00 
)00 
{11 
string22 
data22 
;22 
data33 
=33 
$str33 
;33 
{55 	
try66 
{77 
using99 
(99 
SqlConnection99 $

connection99% /
=990 1
IO992 4
.994 5
GetDBConnection995 D
(99D E
)99E F
)99F G
{:: 

connection;; 
.;; 
Open;; #
(;;# $
);;$ %
;;;% &
using== 
(== 

SqlCommand== %
command==& -
===. /
new==0 3

SqlCommand==4 >
(==> ?
null==? C
,==C D

connection==E O
)==O P
)==P Q
{>> 
command?? 
.??  
CommandText??  +
=??, -
$str??. Q
;??Q R
command@@ 
.@@  
Prepare@@  '
(@@' (
)@@( )
;@@) *
usingAA 
(AA 
SqlDataReaderAA ,
drAA- /
=AA0 1
commandAA2 9
.AA9 :
ExecuteReaderAA: G
(AAG H
)AAH I
)AAI J
{BB 
dataDD  
=DD! "
drDD# %
.DD% &
	GetStringDD& /
(DD/ 0
$numDD0 1
)DD1 2
;DD2 3
}EE 
}FF 
}GG 
}HH 
catchII 
(II 
SqlExceptionII 
	exceptSqlII  )
)II) *
{JJ 
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK "
.KK" #
LogLevelKK# +
.KK+ ,
WarnKK, 0
,KK0 1
	exceptSqlKK2 ;
,KK; <
$strKK= W
)KKW X
;KKX Y
}LL 
}MM 	
dataBadNN 
=NN 
dataNN 
;NN 
BadSinkOO 
(OO 
)OO 
;OO 
}PP 
publicSS 

overrideSS 
voidSS 
GoodSS 
(SS 
)SS 
{TT 
GoodG2BUU 
(UU 
)UU 
;UU 
GoodB2GVV 
(VV 
)VV 
;VV 
}WW 
privateYY 
voidYY 
GoodG2BSinkYY 
(YY 
)YY 
{ZZ 
string[[ 
data[[ 
=[[ 
dataGoodG2B[[ !
;[[! "
try\\ 
{]] 	
int^^ 
value^^ 
=^^ 
int^^ 
.^^ 
Parse^^ !
(^^! "
data^^" &
)^^& '
;^^' (
}__ 	
catch`` 
(`` 
FormatException`` 
exceptNumberFormat`` 1
)``1 2
{aa 	
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc 
.cc 
LogLevelcc '
.cc' (
Warncc( ,
,cc, -
exceptNumberFormatcc. @
,cc@ A
$strccB \
+cc] ^
datacc_ c
)ccc d
;ccd e
}dd 	
}ee 
privatehh 
voidhh 
GoodG2Bhh 
(hh 
)hh 
{ii 
stringjj 
datajj 
;jj 
datall 
=ll 
$strll 
;ll 
dataGoodG2Bmm 
=mm 
datamm 
;mm 
GoodG2BSinknn 
(nn 
)nn 
;nn 
}oo 
privateqq 
voidqq 
GoodB2GSinkqq 
(qq 
)qq 
{rr 
stringss 
datass 
=ss 
dataGoodB2Gss !
;ss! "
trytt 
{uu 	
intvv 
valuevv 
=vv 
intvv 
.vv 
Parsevv !
(vv! "
datavv" &
)vv& '
;vv' (
}ww 	
catchxx 
(xx 
FormatExceptionxx 
exceptNumberFormatxx 1
)xx1 2
{yy 	
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ 
.{{ 
LogLevel{{ '
.{{' (
Warn{{( ,
,{{, -
exceptNumberFormat{{. @
,{{@ A
$str{{B f
+{{g h
exceptNumberFormat{{i {
){{{ |
;{{| }
}|| 	
}}} 
private
 
void
 
GoodB2G
 
(
 
)
 
{
 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
{
 	
try
 
{
 
using
 
(
 
SqlConnection
 $

connection
% /
=
0 1
IO
2 4
.
4 5
GetDBConnection
5 D
(
D E
)
E F
)
F G
{
 

connection
 
.
 
Open
 #
(
# $
)
$ %
;
% &
using
 
(
 

SqlCommand
 %
command
& -
=
. /
new
0 3

SqlCommand
4 >
(
> ?
null
? C
,
C D

connection
E O
)
O P
)
P Q
{
 
command
 
.
  
CommandText
  +
=
, -
$str
. Q
;
Q R
command
 
.
  
Prepare
  '
(
' (
)
( )
;
) *
using
 
(
 
SqlDataReader
 ,
dr
- /
=
0 1
command
2 9
.
9 :
ExecuteReader
: G
(
G H
)
H I
)
I J
{
 
data
  
=
! "
dr
# %
.
% &
	GetString
& /
(
/ 0
$num
0 1
)
1 2
;
2 3
}
 
}
 
}
 
}
 
catch
 
(
 
SqlException
 
	exceptSql
  )
)
) *
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
	exceptSql
2 ;
,
; <
$str
= W
)
W X
;
X Y
}
 
}
 	
dataGoodB2G
 
=
 
data
 
;
 
GoodB2GSink
 
(
 
)
 
;
 
}
   
}¢¢ 
}££ ¨*
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_51a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_51a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	
try$$ 
{%% 
using'' 
('' 
SqlConnection'' $

connection''% /
=''0 1
IO''2 4
.''4 5
GetDBConnection''5 D
(''D E
)''E F
)''F G
{(( 

connection)) 
.)) 
Open)) #
())# $
)))$ %
;))% &
using++ 
(++ 

SqlCommand++ %
command++& -
=++. /
new++0 3

SqlCommand++4 >
(++> ?
null++? C
,++C D

connection++E O
)++O P
)++P Q
{,, 
command-- 
.--  
CommandText--  +
=--, -
$str--. Q
;--Q R
command.. 
...  
Prepare..  '
(..' (
)..( )
;..) *
using// 
(// 
SqlDataReader// ,
dr//- /
=//0 1
command//2 9
.//9 :
ExecuteReader//: G
(//G H
)//H I
)//I J
{00 
data22  
=22! "
dr22# %
.22% &
	GetString22& /
(22/ 0
$num220 1
)221 2
;222 3
}33 
}44 
}55 
}66 
catch77 
(77 
SqlException77 
	exceptSql77  )
)77) *
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
	exceptSql992 ;
,99; <
$str99= W
)99W X
;99X Y
}:: 
};; 	H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_51b<< D
.<<D E
BadSink<<E L
(<<L M
data<<M Q
)<<S T
;<<T U
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_51bLL D
.LLD E
GoodG2BSinkLLE P
(LLP Q
dataLLQ U
)LLW X
;LLX Y
}MM 
privatePP 
voidPP 
GoodB2GPP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
dataSS 
=SS 
$strSS 
;SS 
{UU 	
tryVV 
{WW 
usingYY 
(YY 
SqlConnectionYY $

connectionYY% /
=YY0 1
IOYY2 4
.YY4 5
GetDBConnectionYY5 D
(YYD E
)YYE F
)YYF G
{ZZ 

connection[[ 
.[[ 
Open[[ #
([[# $
)[[$ %
;[[% &
using]] 
(]] 

SqlCommand]] %
command]]& -
=]]. /
new]]0 3

SqlCommand]]4 >
(]]> ?
null]]? C
,]]C D

connection]]E O
)]]O P
)]]P Q
{^^ 
command__ 
.__  
CommandText__  +
=__, -
$str__. Q
;__Q R
command`` 
.``  
Prepare``  '
(``' (
)``( )
;``) *
usingaa 
(aa 
SqlDataReaderaa ,
draa- /
=aa0 1
commandaa2 9
.aa9 :
ExecuteReaderaa: G
(aaG H
)aaH I
)aaI J
{bb 
datadd  
=dd! "
drdd# %
.dd% &
	GetStringdd& /
(dd/ 0
$numdd0 1
)dd1 2
;dd2 3
}ee 
}ff 
}gg 
}hh 
catchii 
(ii 
SqlExceptionii 
	exceptSqlii  )
)ii) *
{jj 
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk "
.kk" #
LogLevelkk# +
.kk+ ,
Warnkk, 0
,kk0 1
	exceptSqlkk2 ;
,kk; <
$strkk= W
)kkW X
;kkX Y
}ll 
}mm 	H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_51bnn D
.nnD E
GoodB2GSinknnE P
(nnP Q
datannQ U
)nnW X
;nnX Y
}oo 
}qq 
}rr ö
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_51b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_51b B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH ¨*
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_52a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_52a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	
try$$ 
{%% 
using'' 
('' 
SqlConnection'' $

connection''% /
=''0 1
IO''2 4
.''4 5
GetDBConnection''5 D
(''D E
)''E F
)''F G
{(( 

connection)) 
.)) 
Open)) #
())# $
)))$ %
;))% &
using++ 
(++ 

SqlCommand++ %
command++& -
=++. /
new++0 3

SqlCommand++4 >
(++> ?
null++? C
,++C D

connection++E O
)++O P
)++P Q
{,, 
command-- 
.--  
CommandText--  +
=--, -
$str--. Q
;--Q R
command.. 
...  
Prepare..  '
(..' (
)..( )
;..) *
using// 
(// 
SqlDataReader// ,
dr//- /
=//0 1
command//2 9
.//9 :
ExecuteReader//: G
(//G H
)//H I
)//I J
{00 
data22  
=22! "
dr22# %
.22% &
	GetString22& /
(22/ 0
$num220 1
)221 2
;222 3
}33 
}44 
}55 
}66 
catch77 
(77 
SqlException77 
	exceptSql77  )
)77) *
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
	exceptSql992 ;
,99; <
$str99= W
)99W X
;99X Y
}:: 
};; 	H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_52b<< D
.<<D E
BadSink<<E L
(<<L M
data<<M Q
)<<R S
;<<S T
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_52bLL D
.LLD E
GoodG2BSinkLLE P
(LLP Q
dataLLQ U
)LLV W
;LLW X
}MM 
privatePP 
voidPP 
GoodB2GPP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
dataSS 
=SS 
$strSS 
;SS 
{UU 	
tryVV 
{WW 
usingYY 
(YY 
SqlConnectionYY $

connectionYY% /
=YY0 1
IOYY2 4
.YY4 5
GetDBConnectionYY5 D
(YYD E
)YYE F
)YYF G
{ZZ 

connection[[ 
.[[ 
Open[[ #
([[# $
)[[$ %
;[[% &
using]] 
(]] 

SqlCommand]] %
command]]& -
=]]. /
new]]0 3

SqlCommand]]4 >
(]]> ?
null]]? C
,]]C D

connection]]E O
)]]O P
)]]P Q
{^^ 
command__ 
.__  
CommandText__  +
=__, -
$str__. Q
;__Q R
command`` 
.``  
Prepare``  '
(``' (
)``( )
;``) *
usingaa 
(aa 
SqlDataReaderaa ,
draa- /
=aa0 1
commandaa2 9
.aa9 :
ExecuteReaderaa: G
(aaG H
)aaH I
)aaI J
{bb 
datadd  
=dd! "
drdd# %
.dd% &
	GetStringdd& /
(dd/ 0
$numdd0 1
)dd1 2
;dd2 3
}ee 
}ff 
}gg 
}hh 
catchii 
(ii 
SqlExceptionii 
	exceptSqlii  )
)ii) *
{jj 
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk "
.kk" #
LogLevelkk# +
.kk+ ,
Warnkk, 0
,kk0 1
	exceptSqlkk2 ;
,kk; <
$strkk= W
)kkW X
;kkX Y
}ll 
}mm 	H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_52bnn D
.nnD E
GoodB2GSinknnE P
(nnP Q
datannQ U
)nnV W
;nnW X
}oo 
}qq 
}rr ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_52b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_52b B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_52c D
.D E
BadSinkE L
(L M
dataM Q
)R S
;S T
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_52c&& D
.&&D E
GoodG2BSink&&E P
(&&P Q
data&&Q U
)&&V W
;&&W X
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_52c,, D
.,,D E
GoodB2GSink,,E P
(,,P Q
data,,Q U
),,V W
;,,W X
}-- 
}// 
}00 ö
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_52c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_52c B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH ¨*
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_53a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	
try$$ 
{%% 
using'' 
('' 
SqlConnection'' $

connection''% /
=''0 1
IO''2 4
.''4 5
GetDBConnection''5 D
(''D E
)''E F
)''F G
{(( 

connection)) 
.)) 
Open)) #
())# $
)))$ %
;))% &
using++ 
(++ 

SqlCommand++ %
command++& -
=++. /
new++0 3

SqlCommand++4 >
(++> ?
null++? C
,++C D

connection++E O
)++O P
)++P Q
{,, 
command-- 
.--  
CommandText--  +
=--, -
$str--. Q
;--Q R
command.. 
...  
Prepare..  '
(..' (
)..( )
;..) *
using// 
(// 
SqlDataReader// ,
dr//- /
=//0 1
command//2 9
.//9 :
ExecuteReader//: G
(//G H
)//H I
)//I J
{00 
data22  
=22! "
dr22# %
.22% &
	GetString22& /
(22/ 0
$num220 1
)221 2
;222 3
}33 
}44 
}55 
}66 
catch77 
(77 
SqlException77 
	exceptSql77  )
)77) *
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
	exceptSql992 ;
,99; <
$str99= W
)99W X
;99X Y
}:: 
};; 	H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53b<< D
.<<D E
BadSink<<E L
(<<L M
data<<M Q
)<<R S
;<<S T
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53bLL D
.LLD E
GoodG2BSinkLLE P
(LLP Q
dataLLQ U
)LLV W
;LLW X
}MM 
privatePP 
voidPP 
GoodB2GPP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
dataSS 
=SS 
$strSS 
;SS 
{UU 	
tryVV 
{WW 
usingYY 
(YY 
SqlConnectionYY $

connectionYY% /
=YY0 1
IOYY2 4
.YY4 5
GetDBConnectionYY5 D
(YYD E
)YYE F
)YYF G
{ZZ 

connection[[ 
.[[ 
Open[[ #
([[# $
)[[$ %
;[[% &
using]] 
(]] 

SqlCommand]] %
command]]& -
=]]. /
new]]0 3

SqlCommand]]4 >
(]]> ?
null]]? C
,]]C D

connection]]E O
)]]O P
)]]P Q
{^^ 
command__ 
.__  
CommandText__  +
=__, -
$str__. Q
;__Q R
command`` 
.``  
Prepare``  '
(``' (
)``( )
;``) *
usingaa 
(aa 
SqlDataReaderaa ,
draa- /
=aa0 1
commandaa2 9
.aa9 :
ExecuteReaderaa: G
(aaG H
)aaH I
)aaI J
{bb 
datadd  
=dd! "
drdd# %
.dd% &
	GetStringdd& /
(dd/ 0
$numdd0 1
)dd1 2
;dd2 3
}ee 
}ff 
}gg 
}hh 
catchii 
(ii 
SqlExceptionii 
	exceptSqlii  )
)ii) *
{jj 
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk "
.kk" #
LogLevelkk# +
.kk+ ,
Warnkk, 0
,kk0 1
	exceptSqlkk2 ;
,kk; <
$strkk= W
)kkW X
;kkX Y
}ll 
}mm 	H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53bnn D
.nnD E
GoodB2GSinknnE P
(nnP Q
datannQ U
)nnV W
;nnW X
}oo 
}qq 
}rr ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_53b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53b B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53c D
.D E
BadSinkE L
(L M
dataM Q
)R S
;S T
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53c&& D
.&&D E
GoodG2BSink&&E P
(&&P Q
data&&Q U
)&&V W
;&&W X
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53c,, D
.,,D E
GoodB2GSink,,E P
(,,P Q
data,,Q U
),,V W
;,,W X
}-- 
}// 
}00 ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_53c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53c B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53d D
.D E
BadSinkE L
(L M
dataM Q
)R S
;S T
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53d&& D
.&&D E
GoodG2BSink&&E P
(&&P Q
data&&Q U
)&&V W
;&&W X
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53d,, D
.,,D E
GoodB2GSink,,E P
(,,P Q
data,,Q U
),,V W
;,,W X
}-- 
}// 
}00 ö
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_53d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53d B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH ¨*
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_54a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	
try$$ 
{%% 
using'' 
('' 
SqlConnection'' $

connection''% /
=''0 1
IO''2 4
.''4 5
GetDBConnection''5 D
(''D E
)''E F
)''F G
{(( 

connection)) 
.)) 
Open)) #
())# $
)))$ %
;))% &
using++ 
(++ 

SqlCommand++ %
command++& -
=++. /
new++0 3

SqlCommand++4 >
(++> ?
null++? C
,++C D

connection++E O
)++O P
)++P Q
{,, 
command-- 
.--  
CommandText--  +
=--, -
$str--. Q
;--Q R
command.. 
...  
Prepare..  '
(..' (
)..( )
;..) *
using// 
(// 
SqlDataReader// ,
dr//- /
=//0 1
command//2 9
.//9 :
ExecuteReader//: G
(//G H
)//H I
)//I J
{00 
data22  
=22! "
dr22# %
.22% &
	GetString22& /
(22/ 0
$num220 1
)221 2
;222 3
}33 
}44 
}55 
}66 
catch77 
(77 
SqlException77 
	exceptSql77  )
)77) *
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
	exceptSql992 ;
,99; <
$str99= W
)99W X
;99X Y
}:: 
};; 	H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54b<< D
.<<D E
BadSink<<E L
(<<L M
data<<M Q
)<<R S
;<<S T
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54bLL D
.LLD E
GoodG2BSinkLLE P
(LLP Q
dataLLQ U
)LLV W
;LLW X
}MM 
privatePP 
voidPP 
GoodB2GPP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
dataSS 
=SS 
$strSS 
;SS 
{UU 	
tryVV 
{WW 
usingYY 
(YY 
SqlConnectionYY $

connectionYY% /
=YY0 1
IOYY2 4
.YY4 5
GetDBConnectionYY5 D
(YYD E
)YYE F
)YYF G
{ZZ 

connection[[ 
.[[ 
Open[[ #
([[# $
)[[$ %
;[[% &
using]] 
(]] 

SqlCommand]] %
command]]& -
=]]. /
new]]0 3

SqlCommand]]4 >
(]]> ?
null]]? C
,]]C D

connection]]E O
)]]O P
)]]P Q
{^^ 
command__ 
.__  
CommandText__  +
=__, -
$str__. Q
;__Q R
command`` 
.``  
Prepare``  '
(``' (
)``( )
;``) *
usingaa 
(aa 
SqlDataReaderaa ,
draa- /
=aa0 1
commandaa2 9
.aa9 :
ExecuteReaderaa: G
(aaG H
)aaH I
)aaI J
{bb 
datadd  
=dd! "
drdd# %
.dd% &
	GetStringdd& /
(dd/ 0
$numdd0 1
)dd1 2
;dd2 3
}ee 
}ff 
}gg 
}hh 
catchii 
(ii 
SqlExceptionii 
	exceptSqlii  )
)ii) *
{jj 
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk "
.kk" #
LogLevelkk# +
.kk+ ,
Warnkk, 0
,kk0 1
	exceptSqlkk2 ;
,kk; <
$strkk= W
)kkW X
;kkX Y
}ll 
}mm 	H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54bnn D
.nnD E
GoodB2GSinknnE P
(nnP Q
datannQ U
)nnV W
;nnW X
}oo 
}qq 
}rr ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_54b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54b B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54c D
.D E
BadSinkE L
(L M
dataM Q
)R S
;S T
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54c&& D
.&&D E
GoodG2BSink&&E P
(&&P Q
data&&Q U
)&&V W
;&&W X
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54c,, D
.,,D E
GoodB2GSink,,E P
(,,P Q
data,,Q U
),,V W
;,,W X
}-- 
}// 
}00 ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_54c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54c B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54d D
.D E
BadSinkE L
(L M
dataM Q
)R S
;S T
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54d&& D
.&&D E
GoodG2BSink&&E P
(&&P Q
data&&Q U
)&&V W
;&&W X
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54d,, D
.,,D E
GoodB2GSink,,E P
(,,P Q
data,,Q U
),,V W
;,,W X
}-- 
}// 
}00 ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_54d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54d B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54e D
.D E
BadSinkE L
(L M
dataM Q
)R S
;S T
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54e&& D
.&&D E
GoodG2BSink&&E P
(&&P Q
data&&Q U
)&&V W
;&&W X
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54e,, D
.,,D E
GoodB2GSink,,E P
(,,P Q
data,,Q U
),,V W
;,,W X
}-- 
}// 
}00 ö
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_54e.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54e B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH µ
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_61a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_61a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
= H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_61b R
.R S
	BadSourceS \
(\ ]
)] ^
;^ _
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodG2B-- 
(-- 
)-- 
;-- 
GoodB2G.. 
(.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
)22  !
{33 
string44 
data44 
=44 H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_61b44 R
.44R S
GoodG2BSource44S `
(44` a
)44a b
;44b c
try55 
{66 	
int77 
value77 
=77 
int77 
.77 
Parse77 !
(77! "
data77" &
)77& '
;77' (
}88 	
catch99 
(99 
FormatException99 
exceptNumberFormat99 1
)991 2
{:: 	
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< 
.<< 
LogLevel<< '
.<<' (
Warn<<( ,
,<<, -
exceptNumberFormat<<. @
,<<@ A
$str<<B \
+<<] ^
data<<_ c
)<<c d
;<<d e
}== 	
}>> 
privateAA 
staticAA 
voidAA 
GoodB2GAA 
(AA  
)AA  !
{BB 
stringCC 
dataCC 
=CC H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_61bCC R
.CCR S
GoodB2GSourceCCS `
(CC` a
)CCa b
;CCb c
tryDD 
{EE 	
intFF 
valueFF 
=FF 
intFF 
.FF 
ParseFF !
(FF! "
dataFF" &
)FF& '
;FF' (
}GG 	
catchHH 
(HH 
FormatExceptionHH 
exceptNumberFormatHH 1
)HH1 2
{II 	
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK 
.KK 
LogLevelKK '
.KK' (
WarnKK( ,
,KK, -
exceptNumberFormatKK. @
,KK@ A
$strKKB f
+KKg h
exceptNumberFormatKKi {
)KK{ |
;KK| }
}LL 	
}MM 
}OO 
}PP ¹%
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_61b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_61b B
{ 
public 

static 
string 
	BadSource "
(" #
)# $
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	
try$$ 
{%% 
using'' 
('' 
SqlConnection'' $

connection''% /
=''0 1
IO''2 4
.''4 5
GetDBConnection''5 D
(''D E
)''E F
)''F G
{(( 

connection)) 
.)) 
Open)) #
())# $
)))$ %
;))% &
using++ 
(++ 

SqlCommand++ %
command++& -
=++. /
new++0 3

SqlCommand++4 >
(++> ?
null++? C
,++C D

connection++E O
)++O P
)++P Q
{,, 
command-- 
.--  
CommandText--  +
=--, -
$str--. Q
;--Q R
command.. 
...  
Prepare..  '
(..' (
)..( )
;..) *
using// 
(// 
SqlDataReader// ,
dr//- /
=//0 1
command//2 9
.//9 :
ExecuteReader//: G
(//G H
)//H I
)//I J
{00 
data22  
=22! "
dr22# %
.22% &
	GetString22& /
(22/ 0
$num220 1
)221 2
;222 3
}33 
}44 
}55 
}66 
catch77 
(77 
SqlException77 
	exceptSql77  )
)77) *
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
	exceptSql992 ;
,99; <
$str99= W
)99W X
;99X Y
}:: 
};; 	
return<< 
data<< 
;<< 
}== 
publicBB 

staticBB 
stringBB 
GoodG2BSourceBB &
(BB& '
)BB' (
{CC 
stringDD 
dataDD 
;DD 
dataFF 
=FF 
$strFF 
;FF 
returnGG 
dataGG 
;GG 
}HH 
publicKK 

staticKK 
stringKK 
GoodB2GSourceKK &
(KK& '
)KK' (
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{PP 	
tryQQ 
{RR 
usingTT 
(TT 
SqlConnectionTT $

connectionTT% /
=TT0 1
IOTT2 4
.TT4 5
GetDBConnectionTT5 D
(TTD E
)TTE F
)TTF G
{UU 

connectionVV 
.VV 
OpenVV #
(VV# $
)VV$ %
;VV% &
usingXX 
(XX 

SqlCommandXX %
commandXX& -
=XX. /
newXX0 3

SqlCommandXX4 >
(XX> ?
nullXX? C
,XXC D

connectionXXE O
)XXO P
)XXP Q
{YY 
commandZZ 
.ZZ  
CommandTextZZ  +
=ZZ, -
$strZZ. Q
;ZZQ R
command[[ 
.[[  
Prepare[[  '
([[' (
)[[( )
;[[) *
using\\ 
(\\ 
SqlDataReader\\ ,
dr\\- /
=\\0 1
command\\2 9
.\\9 :
ExecuteReader\\: G
(\\G H
)\\H I
)\\I J
{]] 
data__  
=__! "
dr__# %
.__% &
	GetString__& /
(__/ 0
$num__0 1
)__1 2
;__2 3
}`` 
}aa 
}bb 
}cc 
catchdd 
(dd 
SqlExceptiondd 
	exceptSqldd  )
)dd) *
{ee 
IOff 
.ff 
Loggerff 
.ff 
Logff 
(ff 
NLogff "
.ff" #
LogLevelff# +
.ff+ ,
Warnff, 0
,ff0 1
	exceptSqlff2 ;
,ff; <
$strff= W
)ffW X
;ffX Y
}gg 
}hh 	
returnii 
dataii 
;ii 
}jj 
}ll 
}mm ø1
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_66a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_66a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	
try$$ 
{%% 
using'' 
('' 
SqlConnection'' $

connection''% /
=''0 1
IO''2 4
.''4 5
GetDBConnection''5 D
(''D E
)''E F
)''F G
{(( 

connection)) 
.)) 
Open)) #
())# $
)))$ %
;))% &
using++ 
(++ 

SqlCommand++ %
command++& -
=++. /
new++0 3

SqlCommand++4 >
(++> ?
null++? C
,++C D

connection++E O
)++O P
)++P Q
{,, 
command-- 
.--  
CommandText--  +
=--, -
$str--. Q
;--Q R
command.. 
...  
Prepare..  '
(..' (
)..( )
;..) *
using// 
(// 
SqlDataReader// ,
dr//- /
=//0 1
command//2 9
.//9 :
ExecuteReader//: G
(//G H
)//H I
)//I J
{00 
data22  
=22! "
dr22# %
.22% &
	GetString22& /
(22/ 0
$num220 1
)221 2
;222 3
}33 
}44 
}55 
}66 
catch77 
(77 
SqlException77 
	exceptSql77  )
)77) *
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
	exceptSql992 ;
,99; <
$str99= W
)99W X
;99X Y
}:: 
};; 	
string<< 
[<< 
]<< 
	dataArray<< 
=<< 
new<<  
string<<! '
[<<' (
$num<<( )
]<<) *
;<<* +
	dataArray== 
[== 
$num== 
]== 
=== 
data== 
;== H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_66b>> D
.>>D E
BadSink>>E L
(>>L M
	dataArray>>M V
)>>X Y
;>>Y Z
}?? 
publicBB 

overrideBB 
voidBB 
GoodBB 
(BB 
)BB 
{CC 
GoodG2BDD 
(DD 
)DD 
;DD 
GoodB2GEE 
(EE 
)EE 
;EE 
}FF 
privateII 
staticII 
voidII 
GoodG2BII 
(II  
)II  !
{JJ 
stringKK 
dataKK 
;KK 
dataMM 
=MM 
$strMM 
;MM 
stringNN 
[NN 
]NN 
	dataArrayNN 
=NN 
newNN  
stringNN! '
[NN' (
$numNN( )
]NN) *
;NN* +
	dataArrayOO 
[OO 
$numOO 
]OO 
=OO 
dataOO 
;OO H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_66bPP D
.PPD E
GoodG2BSinkPPE P
(PPP Q
	dataArrayPPQ Z
)PP\ ]
;PP] ^
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
stringVV 
dataVV 
;VV 
dataWW 
=WW 
$strWW 
;WW 
{YY 	
tryZZ 
{[[ 
using]] 
(]] 
SqlConnection]] $

connection]]% /
=]]0 1
IO]]2 4
.]]4 5
GetDBConnection]]5 D
(]]D E
)]]E F
)]]F G
{^^ 

connection__ 
.__ 
Open__ #
(__# $
)__$ %
;__% &
usingaa 
(aa 

SqlCommandaa %
commandaa& -
=aa. /
newaa0 3

SqlCommandaa4 >
(aa> ?
nullaa? C
,aaC D

connectionaaE O
)aaO P
)aaP Q
{bb 
commandcc 
.cc  
CommandTextcc  +
=cc, -
$strcc. Q
;ccQ R
commanddd 
.dd  
Preparedd  '
(dd' (
)dd( )
;dd) *
usingee 
(ee 
SqlDataReaderee ,
dree- /
=ee0 1
commandee2 9
.ee9 :
ExecuteReaderee: G
(eeG H
)eeH I
)eeI J
{ff 
datahh  
=hh! "
drhh# %
.hh% &
	GetStringhh& /
(hh/ 0
$numhh0 1
)hh1 2
;hh2 3
}ii 
}jj 
}kk 
}ll 
catchmm 
(mm 
SqlExceptionmm 
	exceptSqlmm  )
)mm) *
{nn 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
	exceptSqloo2 ;
,oo; <
$stroo= W
)ooW X
;ooX Y
}pp 
}qq 	
stringrr 
[rr 
]rr 
	dataArrayrr 
=rr 
newrr  
stringrr! '
[rr' (
$numrr( )
]rr) *
;rr* +
	dataArrayss 
[ss 
$numss 
]ss 
=ss 
datass 
;ss H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_66btt D
.ttD E
GoodB2GSinkttE P
(ttP Q
	dataArrayttQ Z
)tt\ ]
;tt] ^
}uu 
}ww 
}xx 
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_66b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_66b B
{ 
public 

static 
void 
BadSink 
( 
string %
[% &
]& '
	dataArray( 1
)2 3
{ 
string 
data 
= 
	dataArray 
[  
$num  !
]! "
;" #
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
string--# )
[--) *
]--* +
	dataArray--, 5
)--6 7
{.. 
string// 
data// 
=// 
	dataArray// 
[//  
$num//  !
]//! "
;//" #
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
string<<# )
[<<) *
]<<* +
	dataArray<<, 5
)<<6 7
{== 
string>> 
data>> 
=>> 
	dataArray>> 
[>>  
$num>>  !
]>>! "
;>>" #
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK ¶2
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_67a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_67a B
:C D
AbstractTestCaseE U
{ 
public 

class 
	Container 
{ 
public   
string   
containerOne   "
;  " #
}!! 
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
string%% 
data%% 
;%% 
data&& 
=&& 
$str&& 
;&& 
{(( 	
try)) 
{** 
using,, 
(,, 
SqlConnection,, $

connection,,% /
=,,0 1
IO,,2 4
.,,4 5
GetDBConnection,,5 D
(,,D E
),,E F
),,F G
{-- 

connection.. 
... 
Open.. #
(..# $
)..$ %
;..% &
using00 
(00 

SqlCommand00 %
command00& -
=00. /
new000 3

SqlCommand004 >
(00> ?
null00? C
,00C D

connection00E O
)00O P
)00P Q
{11 
command22 
.22  
CommandText22  +
=22, -
$str22. Q
;22Q R
command33 
.33  
Prepare33  '
(33' (
)33( )
;33) *
using44 
(44 
SqlDataReader44 ,
dr44- /
=440 1
command442 9
.449 :
ExecuteReader44: G
(44G H
)44H I
)44I J
{55 
data77  
=77! "
dr77# %
.77% &
	GetString77& /
(77/ 0
$num770 1
)771 2
;772 3
}88 
}99 
}:: 
};; 
catch<< 
(<< 
SqlException<< 
	exceptSql<<  )
)<<) *
{== 
IO>> 
.>> 
Logger>> 
.>> 
Log>> 
(>> 
NLog>> "
.>>" #
LogLevel>># +
.>>+ ,
Warn>>, 0
,>>0 1
	exceptSql>>2 ;
,>>; <
$str>>= W
)>>W X
;>>X Y
}?? 
}@@ 	
	ContainerAA 
dataContainerAA 
=AA  !
newAA" %
	ContainerAA& /
(AA/ 0
)AA0 1
;AA1 2
dataContainerBB 
.BB 
containerOneBB "
=BB# $
dataBB% )
;BB) *H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_67bCC D
.CCD E
BadSinkCCE L
(CCL M
dataContainerCCM Z
)CC\ ]
;CC] ^
}DD 
publicGG 

overrideGG 
voidGG 
GoodGG 
(GG 
)GG 
{HH 
GoodG2BII 
(II 
)II 
;II 
GoodB2GJJ 
(JJ 
)JJ 
;JJ 
}KK 
privateNN 
staticNN 
voidNN 
GoodG2BNN 
(NN  
)NN  !
{OO 
stringPP 
dataPP 
;PP 
dataRR 
=RR 
$strRR 
;RR 
	ContainerSS 
dataContainerSS 
=SS  !
newSS" %
	ContainerSS& /
(SS/ 0
)SS0 1
;SS1 2
dataContainerTT 
.TT 
containerOneTT "
=TT# $
dataTT% )
;TT) *H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_67bUU D
.UUD E
GoodG2BSinkUUE P
(UUP Q
dataContainerUUQ ^
)UU` a
;UUa b
}VV 
privateYY 
staticYY 
voidYY 
GoodB2GYY 
(YY  
)YY  !
{ZZ 
string[[ 
data[[ 
;[[ 
data\\ 
=\\ 
$str\\ 
;\\ 
{^^ 	
try__ 
{`` 
usingbb 
(bb 
SqlConnectionbb $

connectionbb% /
=bb0 1
IObb2 4
.bb4 5
GetDBConnectionbb5 D
(bbD E
)bbE F
)bbF G
{cc 

connectiondd 
.dd 
Opendd #
(dd# $
)dd$ %
;dd% &
usingff 
(ff 

SqlCommandff %
commandff& -
=ff. /
newff0 3

SqlCommandff4 >
(ff> ?
nullff? C
,ffC D

connectionffE O
)ffO P
)ffP Q
{gg 
commandhh 
.hh  
CommandTexthh  +
=hh, -
$strhh. Q
;hhQ R
commandii 
.ii  
Prepareii  '
(ii' (
)ii( )
;ii) *
usingjj 
(jj 
SqlDataReaderjj ,
drjj- /
=jj0 1
commandjj2 9
.jj9 :
ExecuteReaderjj: G
(jjG H
)jjH I
)jjI J
{kk 
datamm  
=mm! "
drmm# %
.mm% &
	GetStringmm& /
(mm/ 0
$nummm0 1
)mm1 2
;mm2 3
}nn 
}oo 
}pp 
}qq 
catchrr 
(rr 
SqlExceptionrr 
	exceptSqlrr  )
)rr) *
{ss 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
	exceptSqltt2 ;
,tt; <
$strtt= W
)ttW X
;ttX Y
}uu 
}vv 	
	Containerww 
dataContainerww 
=ww  !
newww" %
	Containerww& /
(ww/ 0
)ww0 1
;ww1 2
dataContainerxx 
.xx 
containerOnexx "
=xx# $
dataxx% )
;xx) *H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_67byy D
.yyD E
GoodB2GSinkyyE P
(yyP Q
dataContaineryyQ ^
)yy` a
;yya b
}zz 
}|| 
}}} ½
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_67b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_67b B
{ 
public 

static 
void 
BadSink 
( H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_67a [
.[ \
	Container\ e
dataContainerf s
)t u
{ 
string 
data 
= 
dataContainer #
.# $
containerOne$ 0
;0 1
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_67a--# _
.--_ `
	Container--` i
dataContainer--j w
)--x y
{.. 
string// 
data// 
=// 
dataContainer// #
.//# $
containerOne//$ 0
;//0 1
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_67a<<# _
.<<_ `
	Container<<` i
dataContainer<<j w
)<<x y
{== 
string>> 
data>> 
=>> 
dataContainer>> #
.>># $
containerOne>>$ 0
;>>0 1
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK Ø)
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_68a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_68a B
:C D
AbstractTestCaseE U
{ 
public 

static 
string 
data 
; 
public   

override   
void   
Bad   
(   
)   
{!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
SqlConnection(( $

connection((% /
=((0 1
IO((2 4
.((4 5
GetDBConnection((5 D
(((D E
)((E F
)((F G
{)) 

connection** 
.** 
Open** #
(**# $
)**$ %
;**% &
using,, 
(,, 

SqlCommand,, %
command,,& -
=,,. /
new,,0 3

SqlCommand,,4 >
(,,> ?
null,,? C
,,,C D

connection,,E O
),,O P
),,P Q
{-- 
command.. 
...  
CommandText..  +
=.., -
$str... Q
;..Q R
command// 
.//  
Prepare//  '
(//' (
)//( )
;//) *
using00 
(00 
SqlDataReader00 ,
dr00- /
=000 1
command002 9
.009 :
ExecuteReader00: G
(00G H
)00H I
)00I J
{11 
data33  
=33! "
dr33# %
.33% &
	GetString33& /
(33/ 0
$num330 1
)331 2
;332 3
}44 
}55 
}66 
}77 
catch88 
(88 
SqlException88 
	exceptSql88  )
)88) *
{99 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
	exceptSql::2 ;
,::; <
$str::= W
)::W X
;::X Y
};; 
}<< 	H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_68b== D
.==D E
BadSink==E L
(==L M
)==M N
;==N O
}>> 
publicAA 

overrideAA 
voidAA 
GoodAA 
(AA 
)AA 
{BB 
GoodG2BCC 
(CC 
)CC 
;CC 
GoodB2GDD 
(DD 
)DD 
;DD 
}EE 
privateHH 
staticHH 
voidHH 
GoodG2BHH 
(HH  
)HH  !
{II 
dataKK 
=KK 
$strKK 
;KK H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_68bLL D
.LLD E
GoodG2BSinkLLE P
(LLP Q
)LLQ R
;LLR S
}MM 
privatePP 
staticPP 
voidPP 
GoodB2GPP 
(PP  
)PP  !
{QQ 
dataRR 
=RR 
$strRR 
;RR 
{TT 	
tryUU 
{VV 
usingXX 
(XX 
SqlConnectionXX $

connectionXX% /
=XX0 1
IOXX2 4
.XX4 5
GetDBConnectionXX5 D
(XXD E
)XXE F
)XXF G
{YY 

connectionZZ 
.ZZ 
OpenZZ #
(ZZ# $
)ZZ$ %
;ZZ% &
using\\ 
(\\ 

SqlCommand\\ %
command\\& -
=\\. /
new\\0 3

SqlCommand\\4 >
(\\> ?
null\\? C
,\\C D

connection\\E O
)\\O P
)\\P Q
{]] 
command^^ 
.^^  
CommandText^^  +
=^^, -
$str^^. Q
;^^Q R
command__ 
.__  
Prepare__  '
(__' (
)__( )
;__) *
using`` 
(`` 
SqlDataReader`` ,
dr``- /
=``0 1
command``2 9
.``9 :
ExecuteReader``: G
(``G H
)``H I
)``I J
{aa 
datacc  
=cc! "
drcc# %
.cc% &
	GetStringcc& /
(cc/ 0
$numcc0 1
)cc1 2
;cc2 3
}dd 
}ee 
}ff 
}gg 
catchhh 
(hh 
SqlExceptionhh 
	exceptSqlhh  )
)hh) *
{ii 
IOjj 
.jj 
Loggerjj 
.jj 
Logjj 
(jj 
NLogjj "
.jj" #
LogLeveljj# +
.jj+ ,
Warnjj, 0
,jj0 1
	exceptSqljj2 ;
,jj; <
$strjj= W
)jjW X
;jjX Y
}kk 
}ll 	H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_68bmm D
.mmD E
GoodB2GSinkmmE P
(mmP Q
)mmQ R
;mmR S
}nn 
}pp 
}qq 
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_68b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_68b B
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
string 
data 
= H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_68a R
.R S
dataS W
;W X
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
)--# $
{.. 
string// 
data// 
=// H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_68a// R
.//R S
data//S W
;//W X
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
)<<# $
{== 
string>> 
data>> 
=>> H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_68a>> R
.>>R S
data>>S W
;>>W X
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK æ+
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_71a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_71a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	
try$$ 
{%% 
using'' 
('' 
SqlConnection'' $

connection''% /
=''0 1
IO''2 4
.''4 5
GetDBConnection''5 D
(''D E
)''E F
)''F G
{(( 

connection)) 
.)) 
Open)) #
())# $
)))$ %
;))% &
using++ 
(++ 

SqlCommand++ %
command++& -
=++. /
new++0 3

SqlCommand++4 >
(++> ?
null++? C
,++C D

connection++E O
)++O P
)++P Q
{,, 
command-- 
.--  
CommandText--  +
=--, -
$str--. Q
;--Q R
command.. 
...  
Prepare..  '
(..' (
)..( )
;..) *
using// 
(// 
SqlDataReader// ,
dr//- /
=//0 1
command//2 9
.//9 :
ExecuteReader//: G
(//G H
)//H I
)//I J
{00 
data22  
=22! "
dr22# %
.22% &
	GetString22& /
(22/ 0
$num220 1
)221 2
;222 3
}33 
}44 
}55 
}66 
catch77 
(77 
SqlException77 
	exceptSql77  )
)77) *
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
	exceptSql992 ;
,99; <
$str99= W
)99W X
;99X Y
}:: 
};; 	H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_71b<< D
.<<D E
BadSink<<E L
(<<L M
(<<M N
Object<<N T
)<<T U
data<<U Y
)<<[ \
;<<\ ]
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_71bLL D
.LLD E
GoodG2BSinkLLE P
(LLP Q
(LLQ R
ObjectLLR X
)LLX Y
dataLLY ]
)LL_ `
;LL` a
}MM 
privatePP 
staticPP 
voidPP 
GoodB2GPP 
(PP  
)PP  !
{QQ 
stringRR 
dataRR 
;RR 
dataSS 
=SS 
$strSS 
;SS 
{UU 	
tryVV 
{WW 
usingYY 
(YY 
SqlConnectionYY $

connectionYY% /
=YY0 1
IOYY2 4
.YY4 5
GetDBConnectionYY5 D
(YYD E
)YYE F
)YYF G
{ZZ 

connection[[ 
.[[ 
Open[[ #
([[# $
)[[$ %
;[[% &
using]] 
(]] 

SqlCommand]] %
command]]& -
=]]. /
new]]0 3

SqlCommand]]4 >
(]]> ?
null]]? C
,]]C D

connection]]E O
)]]O P
)]]P Q
{^^ 
command__ 
.__  
CommandText__  +
=__, -
$str__. Q
;__Q R
command`` 
.``  
Prepare``  '
(``' (
)``( )
;``) *
usingaa 
(aa 
SqlDataReaderaa ,
draa- /
=aa0 1
commandaa2 9
.aa9 :
ExecuteReaderaa: G
(aaG H
)aaH I
)aaI J
{bb 
datadd  
=dd! "
drdd# %
.dd% &
	GetStringdd& /
(dd/ 0
$numdd0 1
)dd1 2
;dd2 3
}ee 
}ff 
}gg 
}hh 
catchii 
(ii 
SqlExceptionii 
	exceptSqlii  )
)ii) *
{jj 
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk "
.kk" #
LogLevelkk# +
.kk+ ,
Warnkk, 0
,kk0 1
	exceptSqlkk2 ;
,kk; <
$strkk= W
)kkW X
;kkX Y
}ll 
}mm 	H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_71bnn D
.nnD E
GoodB2GSinknnE P
(nnP Q
(nnQ R
ObjectnnR X
)nnX Y
datannY ]
)nn_ `
;nn` a
}oo 
}qq 
}rr ²
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_71b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_71b B
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
string 
data 
= 
( 
string 
) 

dataObject (
;( )
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
Object..# )

dataObject..* 4
)..5 6
{// 
string00 
data00 
=00 
(00 
string00 
)00 

dataObject00 (
;00( )
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
Object==# )

dataObject==* 4
)==5 6
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 

dataObject?? (
;??( )
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL Ö9
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_72a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_72a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
SqlConnection(( $

connection((% /
=((0 1
IO((2 4
.((4 5
GetDBConnection((5 D
(((D E
)((E F
)((F G
{)) 

connection** 
.** 
Open** #
(**# $
)**$ %
;**% &
using,, 
(,, 

SqlCommand,, %
command,,& -
=,,. /
new,,0 3

SqlCommand,,4 >
(,,> ?
null,,? C
,,,C D

connection,,E O
),,O P
),,P Q
{-- 
command.. 
...  
CommandText..  +
=.., -
$str... Q
;..Q R
command// 
.//  
Prepare//  '
(//' (
)//( )
;//) *
using00 
(00 
SqlDataReader00 ,
dr00- /
=000 1
command002 9
.009 :
ExecuteReader00: G
(00G H
)00H I
)00I J
{11 
data33  
=33! "
dr33# %
.33% &
	GetString33& /
(33/ 0
$num330 1
)331 2
;332 3
}44 
}55 
}66 
}77 
catch88 
(88 
SqlException88 
	exceptSql88  )
)88) *
{99 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
	exceptSql::2 ;
,::; <
$str::= W
)::W X
;::X Y
};; 
}<< 	
	Hashtable== 
dataHashtable== 
===  !
new==" %
	Hashtable==& /
(==/ 0
$num==0 1
)==1 2
;==2 3
dataHashtable>> 
.>> 
Add>> 
(>> 
$num>> 
,>> 
data>> !
)>>! "
;>>" #
dataHashtable?? 
.?? 
Add?? 
(?? 
$num?? 
,?? 
data?? !
)??! "
;??" #
dataHashtable@@ 
.@@ 
Add@@ 
(@@ 
$num@@ 
,@@ 
data@@ !
)@@! "
;@@" #H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_72bAA D
.AAD E
BadSinkAAE L
(AAL M
dataHashtableAAM Z
)AA\ ]
;AA] ^
}BB 
publicEE 

overrideEE 
voidEE 
GoodEE 
(EE 
)EE 
{FF 
GoodG2BGG 
(GG 
)GG 
;GG 
GoodB2GHH 
(HH 
)HH 
;HH 
}II 
privateLL 
staticLL 
voidLL 
GoodG2BLL 
(LL  
)LL  !
{MM 
stringNN 
dataNN 
;NN 
dataPP 
=PP 
$strPP 
;PP 
	HashtableQQ 
dataHashtableQQ 
=QQ  !
newQQ" %
	HashtableQQ& /
(QQ/ 0
$numQQ0 1
)QQ1 2
;QQ2 3
dataHashtableRR 
.RR 
AddRR 
(RR 
$numRR 
,RR 
dataRR !
)RR! "
;RR" #
dataHashtableSS 
.SS 
AddSS 
(SS 
$numSS 
,SS 
dataSS !
)SS! "
;SS" #
dataHashtableTT 
.TT 
AddTT 
(TT 
$numTT 
,TT 
dataTT !
)TT! "
;TT" #H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_72bUU D
.UUD E
GoodG2BSinkUUE P
(UUP Q
dataHashtableUUQ ^
)UU` a
;UUa b
}VV 
privateYY 
staticYY 
voidYY 
GoodB2GYY 
(YY  
)YY  !
{ZZ 
string[[ 
data[[ 
;[[ 
data\\ 
=\\ 
$str\\ 
;\\ 
{^^ 	
try__ 
{`` 
usingbb 
(bb 
SqlConnectionbb $

connectionbb% /
=bb0 1
IObb2 4
.bb4 5
GetDBConnectionbb5 D
(bbD E
)bbE F
)bbF G
{cc 

connectiondd 
.dd 
Opendd #
(dd# $
)dd$ %
;dd% &
usingff 
(ff 

SqlCommandff %
commandff& -
=ff. /
newff0 3

SqlCommandff4 >
(ff> ?
nullff? C
,ffC D

connectionffE O
)ffO P
)ffP Q
{gg 
commandhh 
.hh  
CommandTexthh  +
=hh, -
$strhh. Q
;hhQ R
commandii 
.ii  
Prepareii  '
(ii' (
)ii( )
;ii) *
usingjj 
(jj 
SqlDataReaderjj ,
drjj- /
=jj0 1
commandjj2 9
.jj9 :
ExecuteReaderjj: G
(jjG H
)jjH I
)jjI J
{kk 
datamm  
=mm! "
drmm# %
.mm% &
	GetStringmm& /
(mm/ 0
$nummm0 1
)mm1 2
;mm2 3
}nn 
}oo 
}pp 
}qq 
catchrr 
(rr 
SqlExceptionrr 
	exceptSqlrr  )
)rr) *
{ss 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
	exceptSqltt2 ;
,tt; <
$strtt= W
)ttW X
;ttX Y
}uu 
}vv 	
	Hashtableww 
dataHashtableww 
=ww  !
newww" %
	Hashtableww& /
(ww/ 0
$numww0 1
)ww1 2
;ww2 3
dataHashtablexx 
.xx 
Addxx 
(xx 
$numxx 
,xx 
dataxx !
)xx! "
;xx" #
dataHashtableyy 
.yy 
Addyy 
(yy 
$numyy 
,yy 
datayy !
)yy! "
;yy" #
dataHashtablezz 
.zz 
Addzz 
(zz 
$numzz 
,zz 
datazz !
)zz! "
;zz" #H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_72b{{ D
.{{D E
GoodB2GSink{{E P
({{P Q
dataHashtable{{Q ^
){{` a
;{{a b
}|| 
}~~ 
} Ý
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_72b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_72b B
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
string 
data 
= 
( 
string 
) 
dataHashtable ,
[, -
$num- .
]. /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
	Hashtable..# ,
dataHashtable..- :
)..; <
{// 
string00 
data00 
=00 
(00 
string00 
)00 
dataHashtable00 ,
[00, -
$num00- .
]00. /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
	Hashtable==# ,
dataHashtable==- :
)==; <
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 
dataHashtable?? ,
[??, -
$num??- .
]??. /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL Ü9
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_73a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_73a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
SqlConnection(( $

connection((% /
=((0 1
IO((2 4
.((4 5
GetDBConnection((5 D
(((D E
)((E F
)((F G
{)) 

connection** 
.** 
Open** #
(**# $
)**$ %
;**% &
using,, 
(,, 

SqlCommand,, %
command,,& -
=,,. /
new,,0 3

SqlCommand,,4 >
(,,> ?
null,,? C
,,,C D

connection,,E O
),,O P
),,P Q
{-- 
command.. 
...  
CommandText..  +
=.., -
$str... Q
;..Q R
command// 
.//  
Prepare//  '
(//' (
)//( )
;//) *
using00 
(00 
SqlDataReader00 ,
dr00- /
=000 1
command002 9
.009 :
ExecuteReader00: G
(00G H
)00H I
)00I J
{11 
data33  
=33! "
dr33# %
.33% &
	GetString33& /
(33/ 0
$num330 1
)331 2
;332 3
}44 
}55 
}66 
}77 
catch88 
(88 
SqlException88 
	exceptSql88  )
)88) *
{99 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
	exceptSql::2 ;
,::; <
$str::= W
)::W X
;::X Y
};; 
}<< 	

LinkedList== 
<== 
string== 
>== 
dataLinkedList== )
===* +
new==, /

LinkedList==0 :
<==: ;
string==; A
>==A B
(==B C
)==C D
;==D E
dataLinkedList>> 
.>> 
AddLast>> 
(>> 
data>> #
)>># $
;>>$ %
dataLinkedList?? 
.?? 
AddLast?? 
(?? 
data?? #
)??# $
;??$ %
dataLinkedList@@ 
.@@ 
AddLast@@ 
(@@ 
data@@ #
)@@# $
;@@$ %H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_73bAA D
.AAD E
BadSinkAAE L
(AAL M
dataLinkedListAAM [
)AA] ^
;AA^ _
}BB 
publicEE 

overrideEE 
voidEE 
GoodEE 
(EE 
)EE 
{FF 
GoodG2BGG 
(GG 
)GG 
;GG 
GoodB2GHH 
(HH 
)HH 
;HH 
}II 
privateLL 
staticLL 
voidLL 
GoodG2BLL 
(LL  
)LL  !
{MM 
stringNN 
dataNN 
;NN 
dataPP 
=PP 
$strPP 
;PP 

LinkedListQQ 
<QQ 
stringQQ 
>QQ 
dataLinkedListQQ )
=QQ* +
newQQ, /

LinkedListQQ0 :
<QQ: ;
stringQQ; A
>QQA B
(QQB C
)QQC D
;QQD E
dataLinkedListRR 
.RR 
AddLastRR 
(RR 
dataRR #
)RR# $
;RR$ %
dataLinkedListSS 
.SS 
AddLastSS 
(SS 
dataSS #
)SS# $
;SS$ %
dataLinkedListTT 
.TT 
AddLastTT 
(TT 
dataTT #
)TT# $
;TT$ %H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_73bUU D
.UUD E
GoodG2BSinkUUE P
(UUP Q
dataLinkedListUUQ _
)UUa b
;UUb c
}VV 
privateYY 
staticYY 
voidYY 
GoodB2GYY 
(YY  
)YY  !
{ZZ 
string[[ 
data[[ 
;[[ 
data\\ 
=\\ 
$str\\ 
;\\ 
{^^ 	
try__ 
{`` 
usingbb 
(bb 
SqlConnectionbb $

connectionbb% /
=bb0 1
IObb2 4
.bb4 5
GetDBConnectionbb5 D
(bbD E
)bbE F
)bbF G
{cc 

connectiondd 
.dd 
Opendd #
(dd# $
)dd$ %
;dd% &
usingff 
(ff 

SqlCommandff %
commandff& -
=ff. /
newff0 3

SqlCommandff4 >
(ff> ?
nullff? C
,ffC D

connectionffE O
)ffO P
)ffP Q
{gg 
commandhh 
.hh  
CommandTexthh  +
=hh, -
$strhh. Q
;hhQ R
commandii 
.ii  
Prepareii  '
(ii' (
)ii( )
;ii) *
usingjj 
(jj 
SqlDataReaderjj ,
drjj- /
=jj0 1
commandjj2 9
.jj9 :
ExecuteReaderjj: G
(jjG H
)jjH I
)jjI J
{kk 
datamm  
=mm! "
drmm# %
.mm% &
	GetStringmm& /
(mm/ 0
$nummm0 1
)mm1 2
;mm2 3
}nn 
}oo 
}pp 
}qq 
catchrr 
(rr 
SqlExceptionrr 
	exceptSqlrr  )
)rr) *
{ss 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
	exceptSqltt2 ;
,tt; <
$strtt= W
)ttW X
;ttX Y
}uu 
}vv 	

LinkedListww 
<ww 
stringww 
>ww 
dataLinkedListww )
=ww* +
newww, /

LinkedListww0 :
<ww: ;
stringww; A
>wwA B
(wwB C
)wwC D
;wwD E
dataLinkedListxx 
.xx 
AddLastxx 
(xx 
dataxx #
)xx# $
;xx$ %
dataLinkedListyy 
.yy 
AddLastyy 
(yy 
datayy #
)yy# $
;yy$ %
dataLinkedListzz 
.zz 
AddLastzz 
(zz 
datazz #
)zz# $
;zz$ %H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_73b{{ D
.{{D E
GoodB2GSink{{E P
({{P Q
dataLinkedList{{Q _
){{a b
;{{b c
}|| 
}~~ 
} 
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_73b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_73b B
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
string* 0
>0 1
dataLinkedList2 @
)A B
{ 
string 
data 
= 
dataLinkedList $
.$ %
Last% )
.) *
Value* /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #

LinkedList..# -
<..- .
string... 4
>..4 5
dataLinkedList..6 D
)..E F
{// 
string00 
data00 
=00 
dataLinkedList00 $
.00$ %
Last00% )
.00) *
Value00* /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

LinkedList==# -
<==- .
string==. 4
>==4 5
dataLinkedList==6 D
)==E F
{>> 
string?? 
data?? 
=?? 
dataLinkedList?? $
.??$ %
Last??% )
.??) *
Value??* /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ¡=
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_74a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_74a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using(( 
((( 
SqlConnection(( $

connection((% /
=((0 1
IO((2 4
.((4 5
GetDBConnection((5 D
(((D E
)((E F
)((F G
{)) 

connection** 
.** 
Open** #
(**# $
)**$ %
;**% &
using,, 
(,, 

SqlCommand,, %
command,,& -
=,,. /
new,,0 3

SqlCommand,,4 >
(,,> ?
null,,? C
,,,C D

connection,,E O
),,O P
),,P Q
{-- 
command.. 
...  
CommandText..  +
=.., -
$str... Q
;..Q R
command// 
.//  
Prepare//  '
(//' (
)//( )
;//) *
using00 
(00 
SqlDataReader00 ,
dr00- /
=000 1
command002 9
.009 :
ExecuteReader00: G
(00G H
)00H I
)00I J
{11 
data33  
=33! "
dr33# %
.33% &
	GetString33& /
(33/ 0
$num330 1
)331 2
;332 3
}44 
}55 
}66 
}77 
catch88 
(88 
SqlException88 
	exceptSql88  )
)88) *
{99 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
	exceptSql::2 ;
,::; <
$str::= W
)::W X
;::X Y
};; 
}<< 	

Dictionary== 
<== 
int== 
,== 
string== 
>== 
dataDictionary== -
===. /
new==0 3

Dictionary==4 >
<==> ?
int==? B
,==B C
string==C I
>==I J
(==J K
)==K L
;==L M
dataDictionary>> 
.>> 
Add>> 
(>> 
$num>> 
,>> 
data>> "
)>>" #
;>># $
dataDictionary?? 
.?? 
Add?? 
(?? 
$num?? 
,?? 
data?? "
)??" #
;??# $
dataDictionary@@ 
.@@ 
Add@@ 
(@@ 
$num@@ 
,@@ 
data@@ "
)@@" #
;@@# $H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_74bAA D
.AAD E
BadSinkAAE L
(AAL M
dataDictionaryAAM [
)AA] ^
;AA^ _
}BB 
publicEE 

overrideEE 
voidEE 
GoodEE 
(EE 
)EE 
{FF 
GoodG2BGG 
(GG 
)GG 
;GG 
GoodB2GHH 
(HH 
)HH 
;HH 
}II 
privateLL 
staticLL 
voidLL 
GoodG2BLL 
(LL  
)LL  !
{MM 
stringNN 
dataNN 
;NN 
dataPP 
=PP 
$strPP 
;PP 

DictionaryQQ 
<QQ 
intQQ 
,QQ 
stringQQ 
>QQ 
dataDictionaryQQ -
=QQ. /
newQQ0 3

DictionaryQQ4 >
<QQ> ?
intQQ? B
,QQB C
stringQQC I
>QQI J
(QQJ K
)QQK L
;QQL M
dataDictionaryRR 
.RR 
AddRR 
(RR 
$numRR 
,RR 
dataRR "
)RR" #
;RR# $
dataDictionarySS 
.SS 
AddSS 
(SS 
$numSS 
,SS 
dataSS "
)SS" #
;SS# $
dataDictionaryTT 
.TT 
AddTT 
(TT 
$numTT 
,TT 
dataTT "
)TT" #
;TT# $H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_74bUU D
.UUD E
GoodG2BSinkUUE P
(UUP Q
dataDictionaryUUQ _
)UUa b
;UUb c
}VV 
privateYY 
staticYY 
voidYY 
GoodB2GYY 
(YY  
)YY  !
{ZZ 
string[[ 
data[[ 
;[[ 
data\\ 
=\\ 
$str\\ 
;\\ 
{^^ 	
try__ 
{`` 
usingbb 
(bb 
SqlConnectionbb $

connectionbb% /
=bb0 1
IObb2 4
.bb4 5
GetDBConnectionbb5 D
(bbD E
)bbE F
)bbF G
{cc 

connectiondd 
.dd 
Opendd #
(dd# $
)dd$ %
;dd% &
usingff 
(ff 

SqlCommandff %
commandff& -
=ff. /
newff0 3

SqlCommandff4 >
(ff> ?
nullff? C
,ffC D

connectionffE O
)ffO P
)ffP Q
{gg 
commandhh 
.hh  
CommandTexthh  +
=hh, -
$strhh. Q
;hhQ R
commandii 
.ii  
Prepareii  '
(ii' (
)ii( )
;ii) *
usingjj 
(jj 
SqlDataReaderjj ,
drjj- /
=jj0 1
commandjj2 9
.jj9 :
ExecuteReaderjj: G
(jjG H
)jjH I
)jjI J
{kk 
datamm  
=mm! "
drmm# %
.mm% &
	GetStringmm& /
(mm/ 0
$nummm0 1
)mm1 2
;mm2 3
}nn 
}oo 
}pp 
}qq 
catchrr 
(rr 
SqlExceptionrr 
	exceptSqlrr  )
)rr) *
{ss 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
	exceptSqltt2 ;
,tt; <
$strtt= W
)ttW X
;ttX Y
}uu 
}vv 	

Dictionaryww 
<ww 
intww 
,ww 
stringww 
>ww 
dataDictionaryww -
=ww. /
newww0 3

Dictionaryww4 >
<ww> ?
intww? B
,wwB C
stringwwC I
>wwI J
(wwJ K
)wwK L
;wwL M
dataDictionaryxx 
.xx 
Addxx 
(xx 
$numxx 
,xx 
dataxx "
)xx" #
;xx# $
dataDictionaryyy 
.yy 
Addyy 
(yy 
$numyy 
,yy 
datayy "
)yy" #
;yy# $
dataDictionaryzz 
.zz 
Addzz 
(zz 
$numzz 
,zz 
datazz "
)zz" #
;zz# $H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_74b{{ D
.{{D E
GoodB2GSink{{E P
({{P Q
dataDictionary{{Q _
){{a b
;{{b c
}|| 
}~~ 
} Æ
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_74b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_74b B
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
string. 4
>4 5
dataDictionary6 D
)E F
{ 
string 
data 
= 
dataDictionary $
[$ %
$num% &
]& '
;' (
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. #
(..# $

Dictionary..$ .
<... /
int../ 2
,..2 3
string..3 9
>..9 :
dataDictionary..; I
)..J K
{// 
string00 
data00 
=00 
dataDictionary00 $
[00$ %
$num00% &
]00& '
;00' (
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

Dictionary==# -
<==- .
int==. 1
,==1 2
string==2 8
>==8 9
dataDictionary==: H
)==I J
{>> 
string?? 
data?? 
=?? 
dataDictionary?? $
[??$ %
$num??% &
]??& '
;??' (
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL æX
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_75a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_75a B
:C D
AbstractTestCaseE U
{ 
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 	
try'' 
{(( 
using** 
(** 
SqlConnection** $

connection**% /
=**0 1
IO**2 4
.**4 5
GetDBConnection**5 D
(**D E
)**E F
)**F G
{++ 

connection,, 
.,, 
Open,, #
(,,# $
),,$ %
;,,% &
using.. 
(.. 

SqlCommand.. %
command..& -
=... /
new..0 3

SqlCommand..4 >
(..> ?
null..? C
,..C D

connection..E O
)..O P
)..P Q
{// 
command00 
.00  
CommandText00  +
=00, -
$str00. Q
;00Q R
command11 
.11  
Prepare11  '
(11' (
)11( )
;11) *
using22 
(22 
SqlDataReader22 ,
dr22- /
=220 1
command222 9
.229 :
ExecuteReader22: G
(22G H
)22H I
)22I J
{33 
data55  
=55! "
dr55# %
.55% &
	GetString55& /
(55/ 0
$num550 1
)551 2
;552 3
}66 
}77 
}88 
}99 
catch:: 
(:: 
SqlException:: 
	exceptSql::  )
)::) *
{;; 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
	exceptSql<<2 ;
,<<; <
$str<<= W
)<<W X
;<<X Y
}== 
}>> 	
byte@@ 
[@@ 
]@@ 
dataSerialized@@ 
=@@ 
null@@  $
;@@$ %
tryAA 
{BB 	
BinaryFormatterCC 
bfCC 
=CC  
newCC! $
BinaryFormatterCC% 4
(CC4 5
)CC5 6
;CC6 7
usingDD 
(DD 
varDD 
msDD 
=DD 
newDD 
MemoryStreamDD  ,
(DD, -
)DD- .
)DD. /
{EE 
bfFF 
.FF 
	SerializeFF 
(FF 
msFF 
,FF  
dataFF! %
)FF% &
;FF& '
dataSerializedGG 
=GG  
msGG! #
.GG# $
ToArrayGG$ +
(GG+ ,
)GG, -
;GG- .
}HH H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_75bII H
.IIH I
BadSinkIII P
(IIP Q
dataSerializedIIQ _
)IIa b
;IIb c
}JJ 	
catchKK 
(KK "
SerializationExceptionKK %
exceptSerializeKK& 5
)KK5 6
{LL 	
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM 
.MM 
LogLevelMM '
.MM' (
WarnMM( ,
,MM, -
$strMM. X
,MMX Y
exceptSerializeMMZ i
)MMi j
;MMj k
}NN 	
}OO 
publicRR 

overrideRR 
voidRR 
GoodRR 
(RR 
)RR 
{SS 
GoodG2BTT 
(TT 
)TT 
;TT 
GoodB2GUU 
(UU 
)UU 
;UU 
}VV 
privateYY 
staticYY 
voidYY 
GoodG2BYY 
(YY  
)YY  !
{ZZ 
string[[ 
data[[ 
;[[ 
data\\ 
=\\ 
$str\\ 
;\\ 
{^^ 	
try__ 
{`` 
usingbb 
(bb 
SqlConnectionbb $

connectionbb% /
=bb0 1
IObb2 4
.bb4 5
GetDBConnectionbb5 D
(bbD E
)bbE F
)bbF G
{cc 

connectiondd 
.dd 
Opendd #
(dd# $
)dd$ %
;dd% &
usingff 
(ff 

SqlCommandff %
commandff& -
=ff. /
newff0 3

SqlCommandff4 >
(ff> ?
nullff? C
,ffC D

connectionffE O
)ffO P
)ffP Q
{gg 
commandhh 
.hh  
CommandTexthh  +
=hh, -
$strhh. Q
;hhQ R
commandii 
.ii  
Prepareii  '
(ii' (
)ii( )
;ii) *
usingjj 
(jj 
SqlDataReaderjj ,
drjj- /
=jj0 1
commandjj2 9
.jj9 :
ExecuteReaderjj: G
(jjG H
)jjH I
)jjI J
{kk 
datamm  
=mm! "
drmm# %
.mm% &
	GetStringmm& /
(mm/ 0
$nummm0 1
)mm1 2
;mm2 3
}nn 
}oo 
}pp 
}qq 
catchrr 
(rr 
SqlExceptionrr 
	exceptSqlrr  )
)rr) *
{ss 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
	exceptSqltt2 ;
,tt; <
$strtt= W
)ttW X
;ttX Y
}uu 
}vv 	
bytexx 
[xx 
]xx 
dataSerializedxx 
=xx 
nullxx  $
;xx$ %
tryyy 
{zz 	
BinaryFormatter{{ 
bf{{ 
={{  
new{{! $
BinaryFormatter{{% 4
({{4 5
){{5 6
;{{6 7
using|| 
(|| 
var|| 
ms|| 
=|| 
new|| 
MemoryStream||  ,
(||, -
)||- .
)||. /
{}} 
bf~~ 
.~~ 
	Serialize~~ 
(~~ 
ms~~ 
,~~  
data~~! %
)~~% &
;~~& '
dataSerialized 
=  
ms! #
.# $
ToArray$ +
(+ ,
), -
;- .
}
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_75b
 H
.
H I
GoodG2BSink
I T
(
T U
dataSerialized
U c
)
e f
;
f g
}
 	
catch
 
(
 $
SerializationException
 %
exceptSerialize
& 5
)
5 6
{
 	
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 
.
 
LogLevel
 '
.
' (
Warn
( ,
,
, -
$str
. X
,
X Y
exceptSerialize
Z i
)
i j
;
j k
}
 	
}
 
private
 
static
 
void
 
GoodB2G
 
(
  
)
  !
{
 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
{
 	
try
 
{
 
using
 
(
 
SqlConnection
 $

connection
% /
=
0 1
IO
2 4
.
4 5
GetDBConnection
5 D
(
D E
)
E F
)
F G
{
 

connection
 
.
 
Open
 #
(
# $
)
$ %
;
% &
using
 
(
 

SqlCommand
 %
command
& -
=
. /
new
0 3

SqlCommand
4 >
(
> ?
null
? C
,
C D

connection
E O
)
O P
)
P Q
{
 
command
 
.
  
CommandText
  +
=
, -
$str
. Q
;
Q R
command
 
.
  
Prepare
  '
(
' (
)
( )
;
) *
using
 
(
 
SqlDataReader
 ,
dr
- /
=
0 1
command
2 9
.
9 :
ExecuteReader
: G
(
G H
)
H I
)
I J
{
 
data
  
=
! "
dr
# %
.
% &
	GetString
& /
(
/ 0
$num
0 1
)
1 2
;
2 3
}
 
}
   
}
¡¡ 
}
¢¢ 
catch
££ 
(
££ 
SqlException
££ 
	exceptSql
££  )
)
££) *
{
¤¤ 
IO
¥¥ 
.
¥¥ 
Logger
¥¥ 
.
¥¥ 
Log
¥¥ 
(
¥¥ 
NLog
¥¥ "
.
¥¥" #
LogLevel
¥¥# +
.
¥¥+ ,
Warn
¥¥, 0
,
¥¥0 1
	exceptSql
¥¥2 ;
,
¥¥; <
$str
¥¥= W
)
¥¥W X
;
¥¥X Y
}
¦¦ 
}
§§ 	
byte
©© 
[
©© 
]
©© 
dataSerialized
©© 
=
©© 
null
©©  $
;
©©$ %
try
ªª 
{
«« 	
BinaryFormatter
¬¬ 
bf
¬¬ 
=
¬¬  
new
¬¬! $
BinaryFormatter
¬¬% 4
(
¬¬4 5
)
¬¬5 6
;
¬¬6 7
using
­­ 
(
­­ 
var
­­ 
ms
­­ 
=
­­ 
new
­­ 
MemoryStream
­­  ,
(
­­, -
)
­­- .
)
­­. /
{
®® 
bf
¯¯ 
.
¯¯ 
	Serialize
¯¯ 
(
¯¯ 
ms
¯¯ 
,
¯¯  
data
¯¯! %
)
¯¯% &
;
¯¯& '
dataSerialized
°° 
=
°°  
ms
°°! #
.
°°# $
ToArray
°°$ +
(
°°+ ,
)
°°, -
;
°°- .
}
±± J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_75b
²² H
.
²²H I
GoodB2GSink
²²I T
(
²²T U
dataSerialized
²²U c
)
²²e f
;
²²f g
}
³³ 	
catch
´´ 
(
´´ $
SerializationException
´´ %
exceptSerialize
´´& 5
)
´´5 6
{
µµ 	
IO
¶¶ 
.
¶¶ 
Logger
¶¶ 
.
¶¶ 
Log
¶¶ 
(
¶¶ 
NLog
¶¶ 
.
¶¶ 
LogLevel
¶¶ '
.
¶¶' (
Warn
¶¶( ,
,
¶¶, -
$str
¶¶. X
,
¶¶X Y
exceptSerialize
¶¶Z i
)
¶¶i j
;
¶¶j k
}
·· 	
}
¸¸ 
}ºº 
}»» â<
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_75b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_75b B
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
string## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
string)) 
))) 
binForm)) &
.))& '
Deserialize))' 2
())2 3
	memStream))3 <
)))< =
;))= >
}** 
try++ 
{,, 
int-- 
value-- 
=-- 
int-- 
.--  
Parse--  %
(--% &
data--& *
)--* +
;--+ ,
}.. 
catch// 
(// 
FormatException// "
exceptNumberFormat//# 5
)//5 6
{00 
IO22 
.22 
Logger22 
.22 
Log22 
(22 
NLog22 "
.22" #
LogLevel22# +
.22+ ,
Warn22, 0
,220 1
exceptNumberFormat222 D
,22D E
$str22F `
+22a b
data22c g
)22g h
;22h i
}33 
}44 	
catch55 
(55 "
SerializationException55 %
exceptSerialize55& 5
)555 6
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. Y
,77Y Z
exceptSerialize77[ j
)77j k
;77k l
}88 	
}99 
public>> 

static>> 
void>> 
GoodG2BSink>> "
(>>" #
byte>># '
[>>' (
]>>( )
dataSerialized>>* 8
)>>9 :
{?? 
try@@ 
{AA 	
stringBB 
dataBB 
;BB 
varCC 
binFormCC 
=CC 
newCC 
BinaryFormatterCC -
(CC- .
)CC. /
;CC/ 0
usingDD 
(DD 
varDD 
	memStreamDD  
=DD! "
newDD# &
MemoryStreamDD' 3
(DD3 4
)DD4 5
)DD5 6
{EE 
	memStreamFF 
.FF 
WriteFF 
(FF  
dataSerializedFF  .
,FF. /
$numFF0 1
,FF1 2
dataSerializedFF3 A
.FFA B
LengthFFB H
)FFH I
;FFI J
	memStreamGG 
.GG 
SeekGG 
(GG 
$numGG  
,GG  !

SeekOriginGG" ,
.GG, -
BeginGG- 2
)GG2 3
;GG3 4
dataHH 
=HH 
(HH 
stringHH 
)HH 
binFormHH &
.HH& '
DeserializeHH' 2
(HH2 3
	memStreamHH3 <
)HH< =
;HH= >
}II 
tryJJ 
{KK 
intLL 
valueLL 
=LL 
intLL 
.LL  
ParseLL  %
(LL% &
dataLL& *
)LL* +
;LL+ ,
}MM 
catchNN 
(NN 
FormatExceptionNN "
exceptNumberFormatNN# 5
)NN5 6
{OO 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptNumberFormatQQ2 D
,QQD E
$strQQF `
+QQa b
dataQQc g
)QQg h
;QQh i
}RR 
}SS 	
catchTT 
(TT "
SerializationExceptionTT %
exceptSerializeTT& 5
)TT5 6
{UU 	
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV 
.VV 
LogLevelVV '
.VV' (
WarnVV( ,
,VV, -
$strVV. Y
,VVY Z
exceptSerializeVV[ j
)VVj k
;VVk l
}WW 	
}XX 
public[[ 

static[[ 
void[[ 
GoodB2GSink[[ "
([[" #
byte[[# '
[[[' (
][[( )
dataSerialized[[* 8
)[[9 :
{\\ 
try]] 
{^^ 	
string__ 
data__ 
;__ 
var`` 
binForm`` 
=`` 
new`` 
BinaryFormatter`` -
(``- .
)``. /
;``/ 0
usingaa 
(aa 
varaa 
	memStreamaa  
=aa! "
newaa# &
MemoryStreamaa' 3
(aa3 4
)aa4 5
)aa5 6
{bb 
	memStreamcc 
.cc 
Writecc 
(cc  
dataSerializedcc  .
,cc. /
$numcc0 1
,cc1 2
dataSerializedcc3 A
.ccA B
LengthccB H
)ccH I
;ccI J
	memStreamdd 
.dd 
Seekdd 
(dd 
$numdd  
,dd  !

SeekOrigindd" ,
.dd, -
Begindd- 2
)dd2 3
;dd3 4
dataee 
=ee 
(ee 
stringee 
)ee 
binFormee &
.ee& '
Deserializeee' 2
(ee2 3
	memStreamee3 <
)ee< =
;ee= >
}ff 
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF j
+nnk l
exceptNumberFormatnnm 
)	nn 
;
nn 
}oo 
}pp 	
catchqq 
(qq "
SerializationExceptionqq %
exceptSerializeqq& 5
)qq5 6
{rr 	
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss 
.ss 
LogLevelss '
.ss' (
Warnss( ,
,ss, -
$strss. Y
,ssY Z
exceptSerializess[ j
)ssj k
;ssk l
}tt 	
}uu 
}ww 
}xx ¤/
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_81a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__Database_81a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	
try$$ 
{%% 
using'' 
('' 
SqlConnection'' $

connection''% /
=''0 1
IO''2 4
.''4 5
GetDBConnection''5 D
(''D E
)''E F
)''F G
{(( 

connection)) 
.)) 
Open)) #
())# $
)))$ %
;))% &
using++ 
(++ 

SqlCommand++ %
command++& -
=++. /
new++0 3

SqlCommand++4 >
(++> ?
null++? C
,++C D

connection++E O
)++O P
)++P Q
{,, 
command-- 
.--  
CommandText--  +
=--, -
$str--. Q
;--Q R
command.. 
...  
Prepare..  '
(..' (
)..( )
;..) *
using// 
(// 
SqlDataReader// ,
dr//- /
=//0 1
command//2 9
.//9 :
ExecuteReader//: G
(//G H
)//H I
)//I J
{00 
data22  
=22! "
dr22# %
.22% &
	GetString22& /
(22/ 0
$num220 1
)221 2
;222 3
}33 
}44 
}55 
}66 
catch77 
(77 
SqlException77 
	exceptSql77  )
)77) *
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
	exceptSql992 ;
,99; <
$str99= W
)99W X
;99X Y
}:: 
};; 	L
@CWE117_Improper_Output_Neutralization_for_Logs__Database_81_base<< H

baseObject<<I S
=<<T U
new<<V YL
?CWE117_Improper_Output_Neutralization_for_Logs__Database_81_bad	<<Z 
(
<< 
)
<< 
;
<< 

baseObject== 
.== 
Action== 
(== 
data== 
)==  
;==  !
}>> 
publicAA 

overrideAA 
voidAA 
GoodAA 
(AA 
)AA 
{BB 
GoodG2BCC 
(CC 
)CC 
;CC 
GoodB2GDD 
(DD 
)DD 
;DD 
}EE 
privateHH 
voidHH 
GoodG2BHH 
(HH 
)HH 
{II 
stringJJ 
dataJJ 
;JJ 
dataLL 
=LL 
$strLL 
;LL L
@CWE117_Improper_Output_Neutralization_for_Logs__Database_81_baseMM H

baseObjectMMI S
=MMT U
newMMV YP
CCWE117_Improper_Output_Neutralization_for_Logs__Database_81_goodG2B	MMZ 
(
MM 
)
MM 
;
MM  

baseObjectNN 
.NN 
ActionNN 
(NN 
dataNN 
)NN  
;NN  !
}OO 
privateRR 
voidRR 
GoodB2GRR 
(RR 
)RR 
{SS 
stringTT 
dataTT 
;TT 
dataUU 
=UU 
$strUU 
;UU 
{WW 	
tryXX 
{YY 
using[[ 
([[ 
SqlConnection[[ $

connection[[% /
=[[0 1
IO[[2 4
.[[4 5
GetDBConnection[[5 D
([[D E
)[[E F
)[[F G
{\\ 

connection]] 
.]] 
Open]] #
(]]# $
)]]$ %
;]]% &
using__ 
(__ 

SqlCommand__ %
command__& -
=__. /
new__0 3

SqlCommand__4 >
(__> ?
null__? C
,__C D

connection__E O
)__O P
)__P Q
{`` 
commandaa 
.aa  
CommandTextaa  +
=aa, -
$straa. Q
;aaQ R
commandbb 
.bb  
Preparebb  '
(bb' (
)bb( )
;bb) *
usingcc 
(cc 
SqlDataReadercc ,
drcc- /
=cc0 1
commandcc2 9
.cc9 :
ExecuteReadercc: G
(ccG H
)ccH I
)ccI J
{dd 
dataff  
=ff! "
drff# %
.ff% &
	GetStringff& /
(ff/ 0
$numff0 1
)ff1 2
;ff2 3
}gg 
}hh 
}ii 
}jj 
catchkk 
(kk 
SqlExceptionkk 
	exceptSqlkk  )
)kk) *
{ll 
IOmm 
.mm 
Loggermm 
.mm 
Logmm 
(mm 
NLogmm "
.mm" #
LogLevelmm# +
.mm+ ,
Warnmm, 0
,mm0 1
	exceptSqlmm2 ;
,mm; <
$strmm= W
)mmW X
;mmX Y
}nn 
}oo 	L
@CWE117_Improper_Output_Neutralization_for_Logs__Database_81_basepp H

baseObjectppI S
=ppT U
newppV YP
CCWE117_Improper_Output_Neutralization_for_Logs__Database_81_goodB2G	ppZ 
(
pp 
)
pp 
;
pp  

baseObjectqq 
.qq 
Actionqq 
(qq 
dataqq 
)qq  
;qq  !
}rr 
}tt 
}uu 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_81_bad.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Database_81_bad E
:F GM
@CWE117_Improper_Output_Neutralization_for_Logs__Database_81_base	H 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
}(( 
})) 
ÍC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_81_base.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
abstract 
class	 L
@CWE117_Improper_Output_Neutralization_for_Logs__Database_81_base O
{ 
public 

abstract 
void 
Action 
(  
string  &
data' +
), -
;- .
} 
} §
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_81_goodB2G.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Database_81_goodB2G I
:J KM
@CWE117_Improper_Output_Neutralization_for_Logs__Database_81_base	L 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B f
+&&g h
exceptNumberFormat&&i {
)&&{ |
;&&| }
}'' 	
}(( 
})) 
}** 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Database_81_goodG2B.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Database_81_goodG2B I
:J KM
@CWE117_Improper_Output_Neutralization_for_Logs__Database_81_base	L 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
})) 
}** Ì
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_01.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_01 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data!! 
=!! 
Environment!! 
.!! "
GetEnvironmentVariable!! 1
(!!1 2
$str!!2 7
)!!7 8
;!!8 9
try"" 
{## 	
int$$ 
value$$ 
=$$ 
int$$ 
.$$ 
Parse$$ !
($$! "
data$$" &
)$$& '
;$$' (
}%% 	
catch&& 
(&& 
FormatException&& 
exceptNumberFormat&& 1
)&&1 2
{'' 	
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) 
.)) 
LogLevel)) '
.))' (
Warn))( ,
,)), -
exceptNumberFormat)). @
,))@ A
$str))B \
+))] ^
data))_ c
)))c d
;))d e
}** 	
}++ 
public.. 

override.. 
void.. 
Good.. 
(.. 
).. 
{// 
GoodG2B00 
(00 
)00 
;00 
GoodB2G11 
(11 
)11 
;11 
}22 
private55 
void55 
GoodG2B55 
(55 
)55 
{66 
string77 
data77 
;77 
data99 
=99 
$str99 
;99 
try:: 
{;; 	
int<< 
value<< 
=<< 
int<< 
.<< 
Parse<< !
(<<! "
data<<" &
)<<& '
;<<' (
}== 	
catch>> 
(>> 
FormatException>> 
exceptNumberFormat>> 1
)>>1 2
{?? 	
IOAA 
.AA 
LoggerAA 
.AA 
LogAA 
(AA 
NLogAA 
.AA 
LogLevelAA '
.AA' (
WarnAA( ,
,AA, -
exceptNumberFormatAA. @
,AA@ A
$strAAB \
+AA] ^
dataAA_ c
)AAc d
;AAd e
}BB 	
}CC 
privateFF 
voidFF 
GoodB2GFF 
(FF 
)FF 
{GG 
stringHH 
dataHH 
;HH 
dataKK 
=KK 
EnvironmentKK 
.KK "
GetEnvironmentVariableKK 1
(KK1 2
$strKK2 7
)KK7 8
;KK8 9
tryLL 
{MM 	
intNN 
valueNN 
=NN 
intNN 
.NN 
ParseNN !
(NN! "
dataNN" &
)NN& '
;NN' (
}OO 	
catchPP 
(PP 
FormatExceptionPP 
exceptNumberFormatPP 1
)PP1 2
{QQ 	
IOSS 
.SS 
LoggerSS 
.SS 
LogSS 
(SS 
NLogSS 
.SS 
LogLevelSS '
.SS' (
WarnSS( ,
,SS, -
exceptNumberFormatSS. @
,SS@ A
$strSSB f
+SSg h
exceptNumberFormatSSi {
)SS{ |
;SS| }
}TT 	
}UU 
}WW 
}XX Û=
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_02.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_02 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
if 

( 
true 
) 
{   	
data## 
=## 
Environment## 
.## "
GetEnvironmentVariable## 5
(##5 6
$str##6 ;
)##; <
;##< =
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++ 
true++ 
)++ 
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
);; 
{<< 
string== 
data== 
;== 
if>> 

(>> 
false>> 
)>> 
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
trueII 
)II 
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
)XX 
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
true[[ 
)[[ 
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
trueff 
)ff 
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
)uu 
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
truexx 
)xx 
{yy 	
data|| 
=|| 
Environment|| 
.|| "
GetEnvironmentVariable|| 5
(||5 6
$str||6 ;
)||; <
;||< =
}}} 	
else~~ 
{ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
false
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
true
 
)
 
{
 	
data
 
=
 
Environment
 
.
 $
GetEnvironmentVariable
 5
(
5 6
$str
6 ;
)
; <
;
< =
}
   	
else
¡¡ 
{
¢¢ 	
data
¥¥ 
=
¥¥ 
null
¥¥ 
;
¥¥ 
}
¦¦ 	
if
§§ 

(
§§ 
true
§§ 
)
§§ 
{
¨¨ 	
try
©© 
{
ªª 
int
«« 
value
«« 
=
«« 
int
«« 
.
««  
Parse
««  %
(
««% &
data
««& *
)
««* +
;
««+ ,
}
¬¬ 
catch
­­ 
(
­­ 
FormatException
­­ " 
exceptNumberFormat
­­# 5
)
­­5 6
{
®® 
IO
°° 
.
°° 
Logger
°° 
.
°° 
Log
°° 
(
°° 
NLog
°° "
.
°°" #
LogLevel
°°# +
.
°°+ ,
Warn
°°, 0
,
°°0 1 
exceptNumberFormat
°°2 D
,
°°D E
$str
°°F j
+
°°k l 
exceptNumberFormat
°°m 
)°° 
;°° 
}
±± 
}
²² 	
}
³³ 
public
µµ 

override
µµ 
void
µµ 
Good
µµ 
(
µµ 
)
µµ 
{
¶¶ 
GoodG2B1
·· 
(
·· 
)
·· 
;
·· 
GoodG2B2
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
GoodB2G1
¹¹ 
(
¹¹ 
)
¹¹ 
;
¹¹ 
GoodB2G2
ºº 
(
ºº 
)
ºº 
;
ºº 
}
»» 
}½½ 
}¾¾ ¹@
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_03.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_03 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
if 

( 
$num 
== 
$num 
) 
{   	
data## 
=## 
Environment## 
.## "
GetEnvironmentVariable## 5
(##5 6
$str##6 ;
)##; <
;##< =
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++ 
$num++ 
==++ 
$num++ 
)++ 
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
);; 
{<< 
string== 
data== 
;== 
if>> 

(>> 
$num>> 
!=>> 
$num>> 
)>> 
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
$numII 
==II 
$numII 
)II 
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
)XX 
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
$num[[ 
==[[ 
$num[[ 
)[[ 
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
$numff 
==ff 
$numff 
)ff 
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
)uu 
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
$numxx 
==xx 
$numxx 
)xx 
{yy 	
data|| 
=|| 
Environment|| 
.|| "
GetEnvironmentVariable|| 5
(||5 6
$str||6 ;
)||; <
;||< =
}}} 	
else~~ 
{ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
$num
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
data
 
=
 
Environment
 
.
 $
GetEnvironmentVariable
 5
(
5 6
$str
6 ;
)
; <
;
< =
}
   	
else
¡¡ 
{
¢¢ 	
data
¥¥ 
=
¥¥ 
null
¥¥ 
;
¥¥ 
}
¦¦ 	
if
§§ 

(
§§ 
$num
§§ 
==
§§ 
$num
§§ 
)
§§ 
{
¨¨ 	
try
©© 
{
ªª 
int
«« 
value
«« 
=
«« 
int
«« 
.
««  
Parse
««  %
(
««% &
data
««& *
)
««* +
;
««+ ,
}
¬¬ 
catch
­­ 
(
­­ 
FormatException
­­ " 
exceptNumberFormat
­­# 5
)
­­5 6
{
®® 
IO
°° 
.
°° 
Logger
°° 
.
°° 
Log
°° 
(
°° 
NLog
°° "
.
°°" #
LogLevel
°°# +
.
°°+ ,
Warn
°°, 0
,
°°0 1 
exceptNumberFormat
°°2 D
,
°°D E
$str
°°F j
+
°°k l 
exceptNumberFormat
°°m 
)°° 
;°° 
}
±± 
}
²² 	
}
³³ 
public
µµ 

override
µµ 
void
µµ 
Good
µµ 
(
µµ 
)
µµ 
{
¶¶ 
GoodG2B1
·· 
(
·· 
)
·· 
;
·· 
GoodG2B2
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
GoodB2G1
¹¹ 
(
¹¹ 
)
¹¹ 
;
¹¹ 
GoodB2G2
ºº 
(
ºº 
)
ºº 
;
ºº 
}
»» 
}½½ 
}¾¾ A
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_04.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_04 D
:E F
AbstractTestCaseG W
{ 
private   
const   
bool   
PRIVATE_CONST_TRUE   )
=  * +
true  , 0
;  0 1
private!! 
const!! 
bool!! 
PRIVATE_CONST_FALSE!! *
=!!+ ,
false!!- 2
;!!2 3
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
string%% 
data%% 
;%% 
if&& 

(&& 
PRIVATE_CONST_TRUE&& 
)&& 
{'' 	
data** 
=** 
Environment** 
.** "
GetEnvironmentVariable** 5
(**5 6
$str**6 ;
)**; <
;**< =
}++ 	
else,, 
{-- 	
data00 
=00 
null00 
;00 
}11 	
if22 

(22 
PRIVATE_CONST_TRUE22 
)22 
{33 	
try44 
{55 
int66 
value66 
=66 
int66 
.66  
Parse66  %
(66% &
data66& *
)66* +
;66+ ,
}77 
catch88 
(88 
FormatException88 "
exceptNumberFormat88# 5
)885 6
{99 
IO;; 
.;; 
Logger;; 
.;; 
Log;; 
(;; 
NLog;; "
.;;" #
LogLevel;;# +
.;;+ ,
Warn;;, 0
,;;0 1
exceptNumberFormat;;2 D
,;;D E
$str;;F `
+;;a b
data;;c g
);;g h
;;;h i
}<< 
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
ifEE 

(EE 
PRIVATE_CONST_FALSEEE 
)EE  
{FF 	
dataII 
=II 
nullII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$strNN 
;NN 
}OO 	
ifPP 

(PP 
PRIVATE_CONST_TRUEPP 
)PP 
{QQ 	
tryRR 
{SS 
intTT 
valueTT 
=TT 
intTT 
.TT  
ParseTT  %
(TT% &
dataTT& *
)TT* +
;TT+ ,
}UU 
catchVV 
(VV 
FormatExceptionVV "
exceptNumberFormatVV# 5
)VV5 6
{WW 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
exceptNumberFormatYY2 D
,YYD E
$strYYF `
+YYa b
dataYYc g
)YYg h
;YYh i
}ZZ 
}[[ 	
}\\ 
private__ 
void__ 
GoodG2B2__ 
(__ 
)__ 
{`` 
stringaa 
dataaa 
;aa 
ifbb 

(bb 
PRIVATE_CONST_TRUEbb 
)bb 
{cc 	
dataee 
=ee 
$stree 
;ee 
}ff 	
elsegg 
{hh 	
datakk 
=kk 
nullkk 
;kk 
}ll 	
ifmm 

(mm 
PRIVATE_CONST_TRUEmm 
)mm 
{nn 	
tryoo 
{pp 
intqq 
valueqq 
=qq 
intqq 
.qq  
Parseqq  %
(qq% &
dataqq& *
)qq* +
;qq+ ,
}rr 
catchss 
(ss 
FormatExceptionss "
exceptNumberFormatss# 5
)ss5 6
{tt 
IOvv 
.vv 
Loggervv 
.vv 
Logvv 
(vv 
NLogvv "
.vv" #
LogLevelvv# +
.vv+ ,
Warnvv, 0
,vv0 1
exceptNumberFormatvv2 D
,vvD E
$strvvF `
+vva b
datavvc g
)vvg h
;vvh i
}ww 
}xx 	
}yy 
private|| 
void|| 
GoodB2G1|| 
(|| 
)|| 
{}} 
string~~ 
data~~ 
;~~ 
if 

( 
PRIVATE_CONST_TRUE 
) 
{
 	
data
 
=
 
Environment
 
.
 $
GetEnvironmentVariable
 5
(
5 6
$str
6 ;
)
; <
;
< =
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 !
PRIVATE_CONST_FALSE
 
)
  
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
   
string
¡¡ 
data
¡¡ 
;
¡¡ 
if
¢¢ 

(
¢¢  
PRIVATE_CONST_TRUE
¢¢ 
)
¢¢ 
{
££ 	
data
¦¦ 
=
¦¦ 
Environment
¦¦ 
.
¦¦ $
GetEnvironmentVariable
¦¦ 5
(
¦¦5 6
$str
¦¦6 ;
)
¦¦; <
;
¦¦< =
}
§§ 	
else
¨¨ 
{
©© 	
data
¬¬ 
=
¬¬ 
null
¬¬ 
;
¬¬ 
}
­­ 	
if
®® 

(
®®  
PRIVATE_CONST_TRUE
®® 
)
®® 
{
¯¯ 	
try
°° 
{
±± 
int
²² 
value
²² 
=
²² 
int
²² 
.
²²  
Parse
²²  %
(
²²% &
data
²²& *
)
²²* +
;
²²+ ,
}
³³ 
catch
´´ 
(
´´ 
FormatException
´´ " 
exceptNumberFormat
´´# 5
)
´´5 6
{
µµ 
IO
·· 
.
·· 
Logger
·· 
.
·· 
Log
·· 
(
·· 
NLog
·· "
.
··" #
LogLevel
··# +
.
··+ ,
Warn
··, 0
,
··0 1 
exceptNumberFormat
··2 D
,
··D E
$str
··F j
+
··k l 
exceptNumberFormat
··m 
)·· 
;·· 
}
¸¸ 
}
¹¹ 	
}
ºº 
public
¼¼ 

override
¼¼ 
void
¼¼ 
Good
¼¼ 
(
¼¼ 
)
¼¼ 
{
½½ 
GoodG2B1
¾¾ 
(
¾¾ 
)
¾¾ 
;
¾¾ 
GoodG2B2
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
GoodB2G1
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G2
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
}
ÂÂ 
}ÄÄ 
}ÅÅ @
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_05.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_05 D
:E F
AbstractTestCaseG W
{ 
private 
bool 
privateTrue 
= 
true #
;# $
private   
bool   
privateFalse   
=   
false    %
;  % &
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
string$$ 
data$$ 
;$$ 
if%% 

(%% 
privateTrue%% 
)%% 
{&& 	
data)) 
=)) 
Environment)) 
.)) "
GetEnvironmentVariable)) 5
())5 6
$str))6 ;
))); <
;))< =
}** 	
else++ 
{,, 	
data// 
=// 
null// 
;// 
}00 	
if11 

(11 
privateTrue11 
)11 
{22 	
try33 
{44 
int55 
value55 
=55 
int55 
.55  
Parse55  %
(55% &
data55& *
)55* +
;55+ ,
}66 
catch77 
(77 
FormatException77 "
exceptNumberFormat77# 5
)775 6
{88 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptNumberFormat::2 D
,::D E
$str::F `
+::a b
data::c g
)::g h
;::h i
};; 
}<< 	
}== 
privateAA 
voidAA 
GoodG2B1AA 
(AA 
)AA 
{BB 
stringCC 
dataCC 
;CC 
ifDD 

(DD 
privateFalseDD 
)DD 
{EE 	
dataHH 
=HH 
nullHH 
;HH 
}II 	
elseJJ 
{KK 	
dataMM 
=MM 
$strMM 
;MM 
}NN 	
ifOO 

(OO 
privateTrueOO 
)OO 
{PP 	
tryQQ 
{RR 
intSS 
valueSS 
=SS 
intSS 
.SS  
ParseSS  %
(SS% &
dataSS& *
)SS* +
;SS+ ,
}TT 
catchUU 
(UU 
FormatExceptionUU "
exceptNumberFormatUU# 5
)UU5 6
{VV 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$strXXF `
+XXa b
dataXXc g
)XXg h
;XXh i
}YY 
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
)^^ 
{__ 
string`` 
data`` 
;`` 
ifaa 

(aa 
privateTrueaa 
)aa 
{bb 	
datadd 
=dd 
$strdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
nulljj 
;jj 
}kk 	
ifll 

(ll 
privateTruell 
)ll 
{mm 	
trynn 
{oo 
intpp 
valuepp 
=pp 
intpp 
.pp  
Parsepp  %
(pp% &
datapp& *
)pp* +
;pp+ ,
}qq 
catchrr 
(rr 
FormatExceptionrr "
exceptNumberFormatrr# 5
)rr5 6
{ss 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu "
.uu" #
LogLeveluu# +
.uu+ ,
Warnuu, 0
,uu0 1
exceptNumberFormatuu2 D
,uuD E
$struuF `
+uua b
datauuc g
)uug h
;uuh i
}vv 
}ww 	
}xx 
private{{ 
void{{ 
GoodB2G1{{ 
({{ 
){{ 
{|| 
string}} 
data}} 
;}} 
if~~ 

(~~ 
privateTrue~~ 
)~~ 
{ 	
data
 
=
 
Environment
 
.
 $
GetEnvironmentVariable
 5
(
5 6
$str
6 ;
)
; <
;
< =
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateFalse
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
   
data
   
;
   
if
¡¡ 

(
¡¡ 
privateTrue
¡¡ 
)
¡¡ 
{
¢¢ 	
data
¥¥ 
=
¥¥ 
Environment
¥¥ 
.
¥¥ $
GetEnvironmentVariable
¥¥ 5
(
¥¥5 6
$str
¥¥6 ;
)
¥¥; <
;
¥¥< =
}
¦¦ 	
else
§§ 
{
¨¨ 	
data
«« 
=
«« 
null
«« 
;
«« 
}
¬¬ 	
if
­­ 

(
­­ 
privateTrue
­­ 
)
­­ 
{
®® 	
try
¯¯ 
{
°° 
int
±± 
value
±± 
=
±± 
int
±± 
.
±±  
Parse
±±  %
(
±±% &
data
±±& *
)
±±* +
;
±±+ ,
}
²² 
catch
³³ 
(
³³ 
FormatException
³³ " 
exceptNumberFormat
³³# 5
)
³³5 6
{
´´ 
IO
¶¶ 
.
¶¶ 
Logger
¶¶ 
.
¶¶ 
Log
¶¶ 
(
¶¶ 
NLog
¶¶ "
.
¶¶" #
LogLevel
¶¶# +
.
¶¶+ ,
Warn
¶¶, 0
,
¶¶0 1 
exceptNumberFormat
¶¶2 D
,
¶¶D E
$str
¶¶F j
+
¶¶k l 
exceptNumberFormat
¶¶m 
)¶¶ 
;¶¶ 
}
·· 
}
¸¸ 	
}
¹¹ 
public
»» 

override
»» 
void
»» 
Good
»» 
(
»» 
)
»» 
{
¼¼ 
GoodG2B1
½½ 
(
½½ 
)
½½ 
;
½½ 
GoodG2B2
¾¾ 
(
¾¾ 
)
¾¾ 
;
¾¾ 
GoodB2G1
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
GoodB2G2
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
}
ÁÁ 
}ÃÃ 
}ÄÄ æB
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_06.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_06 D
:E F
AbstractTestCaseG W
{ 
private 
const 
int 
PRIVATE_CONST_FIVE (
=) *
$num+ ,
;, -
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
if$$ 

($$ 
PRIVATE_CONST_FIVE$$ 
==$$  
$num$$  !
)$$! "
{%% 	
data(( 
=(( 
Environment(( 
.(( "
GetEnvironmentVariable(( 5
(((5 6
$str((6 ;
)((; <
;((< =
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
if00 

(00 
PRIVATE_CONST_FIVE00 
==00  
$num00  !
)00! "
{11 	
try22 
{33 
int44 
value44 
=44 
int44 
.44  
Parse44  %
(44% &
data44& *
)44* +
;44+ ,
}55 
catch66 
(66 
FormatException66 "
exceptNumberFormat66# 5
)665 6
{77 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
exceptNumberFormat992 D
,99D E
$str99F `
+99a b
data99c g
)99g h
;99h i
}:: 
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
)@@ 
{AA 
stringBB 
dataBB 
;BB 
ifCC 

(CC 
PRIVATE_CONST_FIVECC 
!=CC  
$numCC  !
)CC! "
{DD 	
dataGG 
=GG 
nullGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$strLL 
;LL 
}MM 	
ifNN 

(NN 
PRIVATE_CONST_FIVENN 
==NN  
$numNN  !
)NN! "
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF `
+WWa b
dataWWc g
)WWg h
;WWh i
}XX 
}YY 	
}ZZ 
private]] 
void]] 
GoodG2B2]] 
(]] 
)]] 
{^^ 
string__ 
data__ 
;__ 
if`` 

(`` 
PRIVATE_CONST_FIVE`` 
==``  
$num``  !
)``! "
{aa 	
datacc 
=cc 
$strcc 
;cc 
}dd 	
elseee 
{ff 	
dataii 
=ii 
nullii 
;ii 
}jj 	
ifkk 

(kk 
PRIVATE_CONST_FIVEkk 
==kk  
$numkk  !
)kk! "
{ll 	
trymm 
{nn 
intoo 
valueoo 
=oo 
intoo 
.oo  
Parseoo  %
(oo% &
dataoo& *
)oo* +
;oo+ ,
}pp 
catchqq 
(qq 
FormatExceptionqq "
exceptNumberFormatqq# 5
)qq5 6
{rr 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
exceptNumberFormattt2 D
,ttD E
$strttF `
+tta b
datattc g
)ttg h
;tth i
}uu 
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
string|| 
data|| 
;|| 
if}} 

(}} 
PRIVATE_CONST_FIVE}} 
==}}  
$num}}  !
)}}! "
{~~ 	
data
 
=
 
Environment
 
.
 $
GetEnvironmentVariable
 5
(
5 6
$str
6 ;
)
; <
;
< =
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PRIVATE_CONST_FIVE
 
!=
  
$num
  !
)
! "
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
   

(
    
PRIVATE_CONST_FIVE
   
==
    
$num
    !
)
  ! "
{
¡¡ 	
data
¤¤ 
=
¤¤ 
Environment
¤¤ 
.
¤¤ $
GetEnvironmentVariable
¤¤ 5
(
¤¤5 6
$str
¤¤6 ;
)
¤¤; <
;
¤¤< =
}
¥¥ 	
else
¦¦ 
{
§§ 	
data
ªª 
=
ªª 
null
ªª 
;
ªª 
}
«« 	
if
¬¬ 

(
¬¬  
PRIVATE_CONST_FIVE
¬¬ 
==
¬¬  
$num
¬¬  !
)
¬¬! "
{
­­ 	
try
®® 
{
¯¯ 
int
°° 
value
°° 
=
°° 
int
°° 
.
°°  
Parse
°°  %
(
°°% &
data
°°& *
)
°°* +
;
°°+ ,
}
±± 
catch
²² 
(
²² 
FormatException
²² " 
exceptNumberFormat
²²# 5
)
²²5 6
{
³³ 
IO
µµ 
.
µµ 
Logger
µµ 
.
µµ 
Log
µµ 
(
µµ 
NLog
µµ "
.
µµ" #
LogLevel
µµ# +
.
µµ+ ,
Warn
µµ, 0
,
µµ0 1 
exceptNumberFormat
µµ2 D
,
µµD E
$str
µµF j
+
µµk l 
exceptNumberFormat
µµm 
)µµ 
;µµ 
}
¶¶ 
}
·· 	
}
¸¸ 
public
ºº 

override
ºº 
void
ºº 
Good
ºº 
(
ºº 
)
ºº 
{
»» 
GoodG2B1
¼¼ 
(
¼¼ 
)
¼¼ 
;
¼¼ 
GoodG2B2
½½ 
(
½½ 
)
½½ 
;
½½ 
GoodB2G1
¾¾ 
(
¾¾ 
)
¾¾ 
;
¾¾ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
}
ÀÀ 
}ÂÂ 
}ÃÃ B
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_07.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_07 D
:E F
AbstractTestCaseG W
{ 
private 
int 
privateFive 
= 
$num 
;  
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
if$$ 

($$ 
privateFive$$ 
==$$ 
$num$$ 
)$$ 
{%% 	
data(( 
=(( 
Environment(( 
.(( "
GetEnvironmentVariable(( 5
(((5 6
$str((6 ;
)((; <
;((< =
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
if00 

(00 
privateFive00 
==00 
$num00 
)00 
{11 	
try22 
{33 
int44 
value44 
=44 
int44 
.44  
Parse44  %
(44% &
data44& *
)44* +
;44+ ,
}55 
catch66 
(66 
FormatException66 "
exceptNumberFormat66# 5
)665 6
{77 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
exceptNumberFormat992 D
,99D E
$str99F `
+99a b
data99c g
)99g h
;99h i
}:: 
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
)@@ 
{AA 
stringBB 
dataBB 
;BB 
ifCC 

(CC 
privateFiveCC 
!=CC 
$numCC 
)CC 
{DD 	
dataGG 
=GG 
nullGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$strLL 
;LL 
}MM 	
ifNN 

(NN 
privateFiveNN 
==NN 
$numNN 
)NN 
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF `
+WWa b
dataWWc g
)WWg h
;WWh i
}XX 
}YY 	
}ZZ 
private]] 
void]] 
GoodG2B2]] 
(]] 
)]] 
{^^ 
string__ 
data__ 
;__ 
if`` 

(`` 
privateFive`` 
==`` 
$num`` 
)`` 
{aa 	
datacc 
=cc 
$strcc 
;cc 
}dd 	
elseee 
{ff 	
dataii 
=ii 
nullii 
;ii 
}jj 	
ifkk 

(kk 
privateFivekk 
==kk 
$numkk 
)kk 
{ll 	
trymm 
{nn 
intoo 
valueoo 
=oo 
intoo 
.oo  
Parseoo  %
(oo% &
dataoo& *
)oo* +
;oo+ ,
}pp 
catchqq 
(qq 
FormatExceptionqq "
exceptNumberFormatqq# 5
)qq5 6
{rr 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
exceptNumberFormattt2 D
,ttD E
$strttF `
+tta b
datattc g
)ttg h
;tth i
}uu 
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
)zz 
{{{ 
string|| 
data|| 
;|| 
if}} 

(}} 
privateFive}} 
==}} 
$num}} 
)}} 
{~~ 	
data
 
=
 
Environment
 
.
 $
GetEnvironmentVariable
 5
(
5 6
$str
6 ;
)
; <
;
< =
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateFive
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
   

(
   
privateFive
   
==
   
$num
   
)
   
{
¡¡ 	
data
¤¤ 
=
¤¤ 
Environment
¤¤ 
.
¤¤ $
GetEnvironmentVariable
¤¤ 5
(
¤¤5 6
$str
¤¤6 ;
)
¤¤; <
;
¤¤< =
}
¥¥ 	
else
¦¦ 
{
§§ 	
data
ªª 
=
ªª 
null
ªª 
;
ªª 
}
«« 	
if
¬¬ 

(
¬¬ 
privateFive
¬¬ 
==
¬¬ 
$num
¬¬ 
)
¬¬ 
{
­­ 	
try
®® 
{
¯¯ 
int
°° 
value
°° 
=
°° 
int
°° 
.
°°  
Parse
°°  %
(
°°% &
data
°°& *
)
°°* +
;
°°+ ,
}
±± 
catch
²² 
(
²² 
FormatException
²² " 
exceptNumberFormat
²²# 5
)
²²5 6
{
³³ 
IO
µµ 
.
µµ 
Logger
µµ 
.
µµ 
Log
µµ 
(
µµ 
NLog
µµ "
.
µµ" #
LogLevel
µµ# +
.
µµ+ ,
Warn
µµ, 0
,
µµ0 1 
exceptNumberFormat
µµ2 D
,
µµD E
$str
µµF j
+
µµk l 
exceptNumberFormat
µµm 
)µµ 
;µµ 
}
¶¶ 
}
·· 	
}
¸¸ 
public
ºº 

override
ºº 
void
ºº 
Good
ºº 
(
ºº 
)
ºº 
{
»» 
GoodG2B1
¼¼ 
(
¼¼ 
)
¼¼ 
;
¼¼ 
GoodG2B2
½½ 
(
½½ 
)
½½ 
;
½½ 
GoodB2G1
¾¾ 
(
¾¾ 
)
¾¾ 
;
¾¾ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
}
ÀÀ 
}ÂÂ 
}ÃÃ ñD
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_08.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_08 D
:E F
AbstractTestCaseG W
{ 
private 
static 
bool 
PrivateReturnsTrue *
(* +
)+ ,
{   
return!! 
true!! 
;!! 
}"" 
private$$ 
static$$ 
bool$$ 
PrivateReturnsFalse$$ +
($$+ ,
)$$, -
{%% 
return&& 
false&& 
;&& 
}'' 
public)) 

override)) 
void)) 
Bad)) 
()) 
))) 
{** 
string++ 
data++ 
;++ 
if,, 

(,, 
PrivateReturnsTrue,, 
(,, 
),,  
),,  !
{-- 	
data00 
=00 
Environment00 
.00 "
GetEnvironmentVariable00 5
(005 6
$str006 ;
)00; <
;00< =
}11 	
else22 
{33 	
data66 
=66 
null66 
;66 
}77 	
if88 

(88 
PrivateReturnsTrue88 
(88 
)88  
)88  !
{99 	
try:: 
{;; 
int<< 
value<< 
=<< 
int<< 
.<<  
Parse<<  %
(<<% &
data<<& *
)<<* +
;<<+ ,
}== 
catch>> 
(>> 
FormatException>> "
exceptNumberFormat>># 5
)>>5 6
{?? 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA 
(AA 
NLogAA "
.AA" #
LogLevelAA# +
.AA+ ,
WarnAA, 0
,AA0 1
exceptNumberFormatAA2 D
,AAD E
$strAAF `
+AAa b
dataAAc g
)AAg h
;AAh i
}BB 
}CC 	
}DD 
privateHH 
voidHH 
GoodG2B1HH 
(HH 
)HH 
{II 
stringJJ 
dataJJ 
;JJ 
ifKK 

(KK 
PrivateReturnsFalseKK 
(KK  
)KK  !
)KK! "
{LL 	
dataOO 
=OO 
nullOO 
;OO 
}PP 	
elseQQ 
{RR 	
dataTT 
=TT 
$strTT 
;TT 
}UU 	
ifVV 

(VV 
PrivateReturnsTrueVV 
(VV 
)VV  
)VV  !
{WW 	
tryXX 
{YY 
intZZ 
valueZZ 
=ZZ 
intZZ 
.ZZ  
ParseZZ  %
(ZZ% &
dataZZ& *
)ZZ* +
;ZZ+ ,
}[[ 
catch\\ 
(\\ 
FormatException\\ "
exceptNumberFormat\\# 5
)\\5 6
{]] 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
exceptNumberFormat__2 D
,__D E
$str__F `
+__a b
data__c g
)__g h
;__h i
}`` 
}aa 	
}bb 
privateee 
voidee 
GoodG2B2ee 
(ee 
)ee 
{ff 
stringgg 
datagg 
;gg 
ifhh 

(hh 
PrivateReturnsTruehh 
(hh 
)hh  
)hh  !
{ii 	
datakk 
=kk 
$strkk 
;kk 
}ll 	
elsemm 
{nn 	
dataqq 
=qq 
nullqq 
;qq 
}rr 	
ifss 

(ss 
PrivateReturnsTruess 
(ss 
)ss  
)ss  !
{tt 	
tryuu 
{vv 
intww 
valueww 
=ww 
intww 
.ww  
Parseww  %
(ww% &
dataww& *
)ww* +
;ww+ ,
}xx 
catchyy 
(yy 
FormatExceptionyy "
exceptNumberFormatyy# 5
)yy5 6
{zz 
IO|| 
.|| 
Logger|| 
.|| 
Log|| 
(|| 
NLog|| "
.||" #
LogLevel||# +
.||+ ,
Warn||, 0
,||0 1
exceptNumberFormat||2 D
,||D E
$str||F `
+||a b
data||c g
)||g h
;||h i
}}} 
}~~ 	
} 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
data
 
=
 
Environment
 
.
 $
GetEnvironmentVariable
 5
(
5 6
$str
6 ;
)
; <
;
< =
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 !
PrivateReturnsFalse
 
(
  
)
  !
)
! "
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
   
}
¡¡ 	
}
¢¢ 
private
¥¥ 
void
¥¥ 
GoodB2G2
¥¥ 
(
¥¥ 
)
¥¥ 
{
¦¦ 
string
§§ 
data
§§ 
;
§§ 
if
¨¨ 

(
¨¨  
PrivateReturnsTrue
¨¨ 
(
¨¨ 
)
¨¨  
)
¨¨  !
{
©© 	
data
¬¬ 
=
¬¬ 
Environment
¬¬ 
.
¬¬ $
GetEnvironmentVariable
¬¬ 5
(
¬¬5 6
$str
¬¬6 ;
)
¬¬; <
;
¬¬< =
}
­­ 	
else
®® 
{
¯¯ 	
data
²² 
=
²² 
null
²² 
;
²² 
}
³³ 	
if
´´ 

(
´´  
PrivateReturnsTrue
´´ 
(
´´ 
)
´´  
)
´´  !
{
µµ 	
try
¶¶ 
{
·· 
int
¸¸ 
value
¸¸ 
=
¸¸ 
int
¸¸ 
.
¸¸  
Parse
¸¸  %
(
¸¸% &
data
¸¸& *
)
¸¸* +
;
¸¸+ ,
}
¹¹ 
catch
ºº 
(
ºº 
FormatException
ºº " 
exceptNumberFormat
ºº# 5
)
ºº5 6
{
»» 
IO
½½ 
.
½½ 
Logger
½½ 
.
½½ 
Log
½½ 
(
½½ 
NLog
½½ "
.
½½" #
LogLevel
½½# +
.
½½+ ,
Warn
½½, 0
,
½½0 1 
exceptNumberFormat
½½2 D
,
½½D E
$str
½½F j
+
½½k l 
exceptNumberFormat
½½m 
)½½ 
;½½ 
}
¾¾ 
}
¿¿ 	
}
ÀÀ 
public
ÂÂ 

override
ÂÂ 
void
ÂÂ 
Good
ÂÂ 
(
ÂÂ 
)
ÂÂ 
{
ÃÃ 
GoodG2B1
ÄÄ 
(
ÄÄ 
)
ÄÄ 
;
ÄÄ 
GoodG2B2
ÅÅ 
(
ÅÅ 
)
ÅÅ 
;
ÅÅ 
GoodB2G1
ÆÆ 
(
ÆÆ 
)
ÆÆ 
;
ÆÆ 
GoodB2G2
ÇÇ 
(
ÇÇ 
)
ÇÇ 
;
ÇÇ 
}
ÈÈ 
}ÊÊ 
}ËË ½A
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_09.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_09 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_TRUE #
)# $
{   	
data## 
=## 
Environment## 
.## "
GetEnvironmentVariable## 5
(##5 6
$str##6 ;
)##; <
;##< =
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++ 
IO++ 
.++  
STATIC_READONLY_TRUE++ #
)++# $
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
);; 
{<< 
string== 
data== 
;== 
if>> 

(>> 
IO>> 
.>> !
STATIC_READONLY_FALSE>> $
)>>$ %
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
IOII 
.II  
STATIC_READONLY_TRUEII #
)II# $
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
)XX 
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
IO[[ 
.[[  
STATIC_READONLY_TRUE[[ #
)[[# $
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
IOff 
.ff  
STATIC_READONLY_TRUEff #
)ff# $
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
)uu 
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
IOxx 
.xx  
STATIC_READONLY_TRUExx #
)xx# $
{yy 	
data|| 
=|| 
Environment|| 
.|| "
GetEnvironmentVariable|| 5
(||5 6
$str||6 ;
)||; <
;||< =
}}} 	
else~~ 
{ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 #
STATIC_READONLY_FALSE
 $
)
$ %
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
data
 
=
 
Environment
 
.
 $
GetEnvironmentVariable
 5
(
5 6
$str
6 ;
)
; <
;
< =
}
   	
else
¡¡ 
{
¢¢ 	
data
¥¥ 
=
¥¥ 
null
¥¥ 
;
¥¥ 
}
¦¦ 	
if
§§ 

(
§§ 
IO
§§ 
.
§§ "
STATIC_READONLY_TRUE
§§ #
)
§§# $
{
¨¨ 	
try
©© 
{
ªª 
int
«« 
value
«« 
=
«« 
int
«« 
.
««  
Parse
««  %
(
««% &
data
««& *
)
««* +
;
««+ ,
}
¬¬ 
catch
­­ 
(
­­ 
FormatException
­­ " 
exceptNumberFormat
­­# 5
)
­­5 6
{
®® 
IO
°° 
.
°° 
Logger
°° 
.
°° 
Log
°° 
(
°° 
NLog
°° "
.
°°" #
LogLevel
°°# +
.
°°+ ,
Warn
°°, 0
,
°°0 1 
exceptNumberFormat
°°2 D
,
°°D E
$str
°°F j
+
°°k l 
exceptNumberFormat
°°m 
)°° 
;°° 
}
±± 
}
²² 	
}
³³ 
public
µµ 

override
µµ 
void
µµ 
Good
µµ 
(
µµ 
)
µµ 
{
¶¶ 
GoodG2B1
·· 
(
·· 
)
·· 
;
·· 
GoodG2B2
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
GoodB2G1
¹¹ 
(
¹¹ 
)
¹¹ 
;
¹¹ 
GoodB2G2
ºº 
(
ºº 
)
ºº 
;
ºº 
}
»» 
}½½ 
}¾¾ Ù@
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_10.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_10 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
if 

( 
IO 
. 

staticTrue 
) 
{   	
data## 
=## 
Environment## 
.## "
GetEnvironmentVariable## 5
(##5 6
$str##6 ;
)##; <
;##< =
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++ 
IO++ 
.++ 

staticTrue++ 
)++ 
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
);; 
{<< 
string== 
data== 
;== 
if>> 

(>> 
IO>> 
.>> 
staticFalse>> 
)>> 
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
IOII 
.II 

staticTrueII 
)II 
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
)XX 
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
IO[[ 
.[[ 

staticTrue[[ 
)[[ 
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
IOff 
.ff 

staticTrueff 
)ff 
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
)uu 
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
IOxx 
.xx 

staticTruexx 
)xx 
{yy 	
data|| 
=|| 
Environment|| 
.|| "
GetEnvironmentVariable|| 5
(||5 6
$str||6 ;
)||; <
;||< =
}}} 	
else~~ 
{ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 
staticFalse
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
data
 
=
 
Environment
 
.
 $
GetEnvironmentVariable
 5
(
5 6
$str
6 ;
)
; <
;
< =
}
   	
else
¡¡ 
{
¢¢ 	
data
¥¥ 
=
¥¥ 
null
¥¥ 
;
¥¥ 
}
¦¦ 	
if
§§ 

(
§§ 
IO
§§ 
.
§§ 

staticTrue
§§ 
)
§§ 
{
¨¨ 	
try
©© 
{
ªª 
int
«« 
value
«« 
=
«« 
int
«« 
.
««  
Parse
««  %
(
««% &
data
««& *
)
««* +
;
««+ ,
}
¬¬ 
catch
­­ 
(
­­ 
FormatException
­­ " 
exceptNumberFormat
­­# 5
)
­­5 6
{
®® 
IO
°° 
.
°° 
Logger
°° 
.
°° 
Log
°° 
(
°° 
NLog
°° "
.
°°" #
LogLevel
°°# +
.
°°+ ,
Warn
°°, 0
,
°°0 1 
exceptNumberFormat
°°2 D
,
°°D E
$str
°°F j
+
°°k l 
exceptNumberFormat
°°m 
)°° 
;°° 
}
±± 
}
²² 	
}
³³ 
public
µµ 

override
µµ 
void
µµ 
Good
µµ 
(
µµ 
)
µµ 
{
¶¶ 
GoodG2B1
·· 
(
·· 
)
·· 
;
·· 
GoodG2B2
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
GoodB2G1
¹¹ 
(
¹¹ 
)
¹¹ 
;
¹¹ 
GoodB2G2
ºº 
(
ºº 
)
ºº 
;
ºº 
}
»» 
}½½ 
}¾¾ ×C
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_11.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_11 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
if 

( 
IO 
. 
StaticReturnsTrue  
(  !
)! "
)" #
{   	
data## 
=## 
Environment## 
.## "
GetEnvironmentVariable## 5
(##5 6
$str##6 ;
)##; <
;##< =
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++
 
IO++ 
.++ 
StaticReturnsTrue++ 
(++  
)++  !
)++! "
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
);; 
{<< 
string== 
data== 
;== 
if>> 

(>> 
IO>> 
.>> 
StaticReturnsFalse>> !
(>>! "
)>>" #
)>># $
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
IOII 
.II 
StaticReturnsTrueII  
(II  !
)II! "
)II" #
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
)XX 
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
IO[[ 
.[[ 
StaticReturnsTrue[[  
([[  !
)[[! "
)[[" #
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
IOff 
.ff 
StaticReturnsTrueff  
(ff  !
)ff! "
)ff" #
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
)uu 
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
IOxx 
.xx 
StaticReturnsTruexx  
(xx  !
)xx! "
)xx" #
{yy 	
data|| 
=|| 
Environment|| 
.|| "
GetEnvironmentVariable|| 5
(||5 6
$str||6 ;
)||; <
;||< =
}}} 	
else~~ 
{ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
  
StaticReturnsFalse
 !
(
! "
)
" #
)
# $
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
data
 
=
 
Environment
 
.
 $
GetEnvironmentVariable
 5
(
5 6
$str
6 ;
)
; <
;
< =
}
   	
else
¡¡ 
{
¢¢ 	
data
¥¥ 
=
¥¥ 
null
¥¥ 
;
¥¥ 
}
¦¦ 	
if
§§ 

(
§§ 
IO
§§ 
.
§§ 
StaticReturnsTrue
§§  
(
§§  !
)
§§! "
)
§§" #
{
¨¨ 	
try
©© 
{
ªª 
int
«« 
value
«« 
=
«« 
int
«« 
.
««  
Parse
««  %
(
««% &
data
««& *
)
««* +
;
««+ ,
}
¬¬ 
catch
­­ 
(
­­ 
FormatException
­­ " 
exceptNumberFormat
­­# 5
)
­­5 6
{
®® 
IO
°° 
.
°° 
Logger
°° 
.
°° 
Log
°° 
(
°° 
NLog
°° "
.
°°" #
LogLevel
°°# +
.
°°+ ,
Warn
°°, 0
,
°°0 1 
exceptNumberFormat
°°2 D
,
°°D E
$str
°°F j
+
°°k l 
exceptNumberFormat
°°m 
)°° 
;°° 
}
±± 
}
²² 	
}
³³ 
public
µµ 

override
µµ 
void
µµ 
Good
µµ 
(
µµ 
)
µµ 
{
¶¶ 
GoodG2B1
·· 
(
·· 
)
·· 
;
·· 
GoodG2B2
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
GoodB2G1
¹¹ 
(
¹¹ 
)
¹¹ 
;
¹¹ 
GoodB2G2
ºº 
(
ºº 
)
ºº 
;
ºº 
}
»» 
}½½ 
}¾¾ ¢<
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_12.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_12 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
if 

(
 
IO 
. $
StaticReturnsTrueOrFalse &
(& '
)' (
)( )
{   	
data## 
=## 
Environment## 
.## "
GetEnvironmentVariable## 5
(##5 6
$str##6 ;
)##; <
;##< =
}$$ 	
else%% 
{&& 	
data(( 
=(( 
$str(( 
;(( 
})) 	
if** 

(**
 
IO** 
.** $
StaticReturnsTrueOrFalse** &
(**& '
)**' (
)**( )
{++ 	
try,, 
{-- 
int.. 
value.. 
=.. 
int.. 
...  
Parse..  %
(..% &
data..& *
)..* +
;..+ ,
}// 
catch00 
(00 
FormatException00 "
exceptNumberFormat00# 5
)005 6
{11 
IO33 
.33 
Logger33 
.33 
Log33 
(33 
NLog33 "
.33" #
LogLevel33# +
.33+ ,
Warn33, 0
,330 1
exceptNumberFormat332 D
,33D E
$str33F `
+33a b
data33c g
)33g h
;33h i
}44 
}55 	
else66 
{77 	
try88 
{99 
int:: 
value:: 
=:: 
int:: 
.::  
Parse::  %
(::% &
data::& *
)::* +
;::+ ,
};; 
catch<< 
(<< 
FormatException<< "
exceptNumberFormat<<# 5
)<<5 6
{== 
IO?? 
.?? 
Logger?? 
.?? 
Log?? 
(?? 
NLog?? "
.??" #
LogLevel??# +
.??+ ,
Warn??, 0
,??0 1
exceptNumberFormat??2 D
,??D E
$str??F j
+??k l
exceptNumberFormat??m 
)	?? 
;
?? 
}@@ 
}AA 	
}BB 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
ifJJ 

(JJ
 
IOJJ 
.JJ $
StaticReturnsTrueOrFalseJJ &
(JJ& '
)JJ' (
)JJ( )
{KK 	
dataMM 
=MM 
$strMM 
;MM 
}NN 	
elseOO 
{PP 	
dataRR 
=RR 
$strRR 
;RR 
}SS 	
ifTT 

(TT
 
IOTT 
.TT $
StaticReturnsTrueOrFalseTT &
(TT& '
)TT' (
)TT( )
{UU 	
tryVV 
{WW 
intXX 
valueXX 
=XX 
intXX 
.XX  
ParseXX  %
(XX% &
dataXX& *
)XX* +
;XX+ ,
}YY 
catchZZ 
(ZZ 
FormatExceptionZZ "
exceptNumberFormatZZ# 5
)ZZ5 6
{[[ 
IO]] 
.]] 
Logger]] 
.]] 
Log]] 
(]] 
NLog]] "
.]]" #
LogLevel]]# +
.]]+ ,
Warn]], 0
,]]0 1
exceptNumberFormat]]2 D
,]]D E
$str]]F `
+]]a b
data]]c g
)]]g h
;]]h i
}^^ 
}__ 	
else`` 
{aa 	
trybb 
{cc 
intdd 
valuedd 
=dd 
intdd 
.dd  
Parsedd  %
(dd% &
datadd& *
)dd* +
;dd+ ,
}ee 
catchff 
(ff 
FormatExceptionff "
exceptNumberFormatff# 5
)ff5 6
{gg 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptNumberFormatii2 D
,iiD E
$striiF `
+iia b
dataiic g
)iig h
;iih i
}jj 
}kk 	
}ll 
privatepp 
voidpp 
GoodB2Gpp 
(pp 
)pp 
{qq 
stringrr 
datarr 
;rr 
ifss 

(ss
 
IOss 
.ss $
StaticReturnsTrueOrFalsess &
(ss& '
)ss' (
)ss( )
{tt 	
dataww 
=ww 
Environmentww 
.ww "
GetEnvironmentVariableww 5
(ww5 6
$strww6 ;
)ww; <
;ww< =
}xx 	
elseyy 
{zz 	
data}} 
=}} 
Environment}} 
.}} "
GetEnvironmentVariable}} 5
(}}5 6
$str}}6 ;
)}}; <
;}}< =
}~~ 	
if 

(
 
IO 
. $
StaticReturnsTrueOrFalse &
(& '
)' (
)( )
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
}   
}¡¡ D
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_13.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_13 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
if 

( 
IO 
.  
STATIC_READONLY_FIVE #
==# %
$num% &
)& '
{   	
data## 
=## 
Environment## 
.## "
GetEnvironmentVariable## 5
(##5 6
$str##6 ;
)##; <
;##< =
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++ 
IO++ 
.++  
STATIC_READONLY_FIVE++ #
==++# %
$num++% &
)++& '
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
);; 
{<< 
string== 
data== 
;== 
if>> 

(>> 
IO>> 
.>>  
STATIC_READONLY_FIVE>> #
!=>># %
$num>>% &
)>>& '
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
IOII 
.II  
STATIC_READONLY_FIVEII #
==II# %
$numII% &
)II& '
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
)XX 
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
IO[[ 
.[[  
STATIC_READONLY_FIVE[[ #
==[[# %
$num[[% &
)[[& '
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
IOff 
.ff  
STATIC_READONLY_FIVEff #
==ff# %
$numff% &
)ff& '
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
)uu 
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
IOxx 
.xx  
STATIC_READONLY_FIVExx #
==xx# %
$numxx% &
)xx& '
{yy 	
data|| 
=|| 
Environment|| 
.|| "
GetEnvironmentVariable|| 5
(||5 6
$str||6 ;
)||; <
;||< =
}}} 	
else~~ 
{ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
!=
# %
$num
% &
)
& '
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
# %
$num
% &
)
& '
{
 	
data
 
=
 
Environment
 
.
 $
GetEnvironmentVariable
 5
(
5 6
$str
6 ;
)
; <
;
< =
}
   	
else
¡¡ 
{
¢¢ 	
data
¥¥ 
=
¥¥ 
null
¥¥ 
;
¥¥ 
}
¦¦ 	
if
§§ 

(
§§ 
IO
§§ 
.
§§ "
STATIC_READONLY_FIVE
§§ #
==
§§# %
$num
§§% &
)
§§& '
{
¨¨ 	
try
©© 
{
ªª 
int
«« 
value
«« 
=
«« 
int
«« 
.
««  
Parse
««  %
(
««% &
data
««& *
)
««* +
;
««+ ,
}
¬¬ 
catch
­­ 
(
­­ 
FormatException
­­ " 
exceptNumberFormat
­­# 5
)
­­5 6
{
®® 
IO
°° 
.
°° 
Logger
°° 
.
°° 
Log
°° 
(
°° 
NLog
°° "
.
°°" #
LogLevel
°°# +
.
°°+ ,
Warn
°°, 0
,
°°0 1 
exceptNumberFormat
°°2 D
,
°°D E
$str
°°F j
+
°°k l 
exceptNumberFormat
°°m 
)°° 
;°° 
}
±± 
}
²² 	
}
³³ 
public
µµ 

override
µµ 
void
µµ 
Good
µµ 
(
µµ 
)
µµ 
{
¶¶ 
GoodG2B1
·· 
(
·· 
)
·· 
;
·· 
GoodG2B2
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
GoodB2G1
¹¹ 
(
¹¹ 
)
¹¹ 
;
¹¹ 
GoodB2G2
ºº 
(
ºº 
)
ºº 
;
ºº 
}
»» 
}½½ 
}¾¾ ·C
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_14.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_14 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
if 

( 
IO 
. 

staticFive 
== 
$num 
) 
{   	
data## 
=## 
Environment## 
.## "
GetEnvironmentVariable## 5
(##5 6
$str##6 ;
)##; <
;##< =
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++ 
IO++ 
.++ 

staticFive++ 
==++ 
$num++ 
)++ 
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
);; 
{<< 
string== 
data== 
;== 
if>> 

(>> 
IO>> 
.>> 

staticFive>> 
!=>> 
$num>> 
)>> 
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
IOII 
.II 

staticFiveII 
==II 
$numII 
)II 
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
)XX 
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
IO[[ 
.[[ 

staticFive[[ 
==[[ 
$num[[ 
)[[ 
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
IOff 
.ff 

staticFiveff 
==ff 
$numff 
)ff 
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
)uu 
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
IOxx 
.xx 

staticFivexx 
==xx 
$numxx 
)xx 
{yy 	
data|| 
=|| 
Environment|| 
.|| "
GetEnvironmentVariable|| 5
(||5 6
$str||6 ;
)||; <
;||< =
}}} 	
else~~ 
{ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 

staticFive
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
Environment
 
.
 $
GetEnvironmentVariable
 5
(
5 6
$str
6 ;
)
; <
;
< =
}
   	
else
¡¡ 
{
¢¢ 	
data
¥¥ 
=
¥¥ 
null
¥¥ 
;
¥¥ 
}
¦¦ 	
if
§§ 

(
§§ 
IO
§§ 
.
§§ 

staticFive
§§ 
==
§§ 
$num
§§ 
)
§§ 
{
¨¨ 	
try
©© 
{
ªª 
int
«« 
value
«« 
=
«« 
int
«« 
.
««  
Parse
««  %
(
««% &
data
««& *
)
««* +
;
««+ ,
}
¬¬ 
catch
­­ 
(
­­ 
FormatException
­­ " 
exceptNumberFormat
­­# 5
)
­­5 6
{
®® 
IO
°° 
.
°° 
Logger
°° 
.
°° 
Log
°° 
(
°° 
NLog
°° "
.
°°" #
LogLevel
°°# +
.
°°+ ,
Warn
°°, 0
,
°°0 1 
exceptNumberFormat
°°2 D
,
°°D E
$str
°°F j
+
°°k l 
exceptNumberFormat
°°m 
)°° 
;°° 
}
±± 
}
²² 	
}
³³ 
public
µµ 

override
µµ 
void
µµ 
Good
µµ 
(
µµ 
)
µµ 
{
¶¶ 
GoodG2B1
·· 
(
·· 
)
·· 
;
·· 
GoodG2B2
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
GoodB2G1
¹¹ 
(
¹¹ 
)
¹¹ 
;
¹¹ 
GoodB2G2
ºº 
(
ºº 
)
ºº 
;
ºº 
}
»» 
}½½ 
}¾¾ ÛL
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_15.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_15 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
switch 
( 
$num 
) 
{   	
case!! 
$num!! 
:!! 
data$$ 
=$$ 
Environment$$ 
.$$ "
GetEnvironmentVariable$$ 5
($$5 6
$str$$6 ;
)$$; <
;$$< =
break%% 
;%% 
default&& 
:&& 
data)) 
=)) 
null)) 
;)) 
break** 
;** 
}++ 	
switch,, 
(,, 
$num,, 
),, 
{-- 	
case.. 
$num.. 
:.. 
try// 
{00 
int11 
value11 
=11 
int11 
.11  
Parse11  %
(11% &
data11& *
)11* +
;11+ ,
}22 
catch33 
(33 
FormatException33 "
exceptNumberFormat33# 5
)335 6
{44 
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 "
.66" #
LogLevel66# +
.66+ ,
Warn66, 0
,660 1
exceptNumberFormat662 D
,66D E
$str66F `
+66a b
data66c g
)66g h
;66h i
}77 
break88 
;88 
default99 
:99 
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; /
);;/ 0
;;;0 1
break<< 
;<< 
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
switchEE 
(EE 
$numEE 
)EE 
{FF 	
caseGG 
$numGG 
:GG 
dataJJ 
=JJ 
nullJJ 
;JJ 
breakKK 
;KK 
defaultLL 
:LL 
dataNN 
=NN 
$strNN 
;NN 
breakOO 
;OO 
}PP 	
switchQQ 
(QQ 
$numQQ 
)QQ 
{RR 	
caseSS 
$numSS 
:SS 
tryTT 
{UU 
intVV 
valueVV 
=VV 
intVV 
.VV  
ParseVV  %
(VV% &
dataVV& *
)VV* +
;VV+ ,
}WW 
catchXX 
(XX 
FormatExceptionXX "
exceptNumberFormatXX# 5
)XX5 6
{YY 
IO[[ 
.[[ 
Logger[[ 
.[[ 
Log[[ 
([[ 
NLog[[ "
.[[" #
LogLevel[[# +
.[[+ ,
Warn[[, 0
,[[0 1
exceptNumberFormat[[2 D
,[[D E
$str[[F `
+[[a b
data[[c g
)[[g h
;[[h i
}\\ 
break]] 
;]] 
default^^ 
:^^ 
IO`` 
.`` 
	WriteLine`` 
(`` 
$str`` /
)``/ 0
;``0 1
breakaa 
;aa 
}bb 	
}cc 
privateff 
voidff 
GoodG2B2ff 
(ff 
)ff 
{gg 
stringhh 
datahh 
;hh 
switchii 
(ii 
$numii 
)ii 
{jj 	
casekk 
$numkk 
:kk 
datamm 
=mm 
$strmm 
;mm 
breaknn 
;nn 
defaultoo 
:oo 
datarr 
=rr 
nullrr 
;rr 
breakss 
;ss 
}tt 	
switchuu 
(uu 
$numuu 
)uu 
{vv 	
caseww 
$numww 
:ww 
tryxx 
{yy 
intzz 
valuezz 
=zz 
intzz 
.zz  
Parsezz  %
(zz% &
datazz& *
)zz* +
;zz+ ,
}{{ 
catch|| 
(|| 
FormatException|| "
exceptNumberFormat||# 5
)||5 6
{}} 
IO 
. 
Logger 
. 
Log 
( 
NLog "
." #
LogLevel# +
.+ ,
Warn, 0
,0 1
exceptNumberFormat2 D
,D E
$strF `
+a b
datac g
)g h
;h i
}
 
break
 
;
 
default
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
data
 
=
 
Environment
 
.
 $
GetEnvironmentVariable
 5
(
5 6
$str
6 ;
)
; <
;
< =
break
 
;
 
default
 
:
 
data
 
=
 
null
 
;
 
break
 
;
 
}
 	
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
default
   
:
   
try
¡¡ 
{
¢¢ 
int
££ 
value
££ 
=
££ 
int
££ 
.
££  
Parse
££  %
(
££% &
data
££& *
)
££* +
;
££+ ,
}
¤¤ 
catch
¥¥ 
(
¥¥ 
FormatException
¥¥ " 
exceptNumberFormat
¥¥# 5
)
¥¥5 6
{
¦¦ 
IO
¨¨ 
.
¨¨ 
Logger
¨¨ 
.
¨¨ 
Log
¨¨ 
(
¨¨ 
NLog
¨¨ "
.
¨¨" #
LogLevel
¨¨# +
.
¨¨+ ,
Warn
¨¨, 0
,
¨¨0 1 
exceptNumberFormat
¨¨2 D
,
¨¨D E
$str
¨¨F j
+
¨¨k l 
exceptNumberFormat
¨¨m 
)¨¨ 
;¨¨ 
}
©© 
break
ªª 
;
ªª 
}
«« 	
}
¬¬ 
private
¯¯ 
void
¯¯ 
GoodB2G2
¯¯ 
(
¯¯ 
)
¯¯ 
{
°° 
string
±± 
data
±± 
;
±± 
switch
²² 
(
²² 
$num
²² 
)
²² 
{
³³ 	
case
´´ 
$num
´´ 
:
´´ 
data
·· 
=
·· 
Environment
·· 
.
·· $
GetEnvironmentVariable
·· 5
(
··5 6
$str
··6 ;
)
··; <
;
··< =
break
¸¸ 
;
¸¸ 
default
¹¹ 
:
¹¹ 
data
¼¼ 
=
¼¼ 
null
¼¼ 
;
¼¼ 
break
½½ 
;
½½ 
}
¾¾ 	
switch
¿¿ 
(
¿¿ 
$num
¿¿ 
)
¿¿ 
{
ÀÀ 	
case
ÁÁ 
$num
ÁÁ 
:
ÁÁ 
try
ÂÂ 
{
ÃÃ 
int
ÄÄ 
value
ÄÄ 
=
ÄÄ 
int
ÄÄ 
.
ÄÄ  
Parse
ÄÄ  %
(
ÄÄ% &
data
ÄÄ& *
)
ÄÄ* +
;
ÄÄ+ ,
}
ÅÅ 
catch
ÆÆ 
(
ÆÆ 
FormatException
ÆÆ " 
exceptNumberFormat
ÆÆ# 5
)
ÆÆ5 6
{
ÇÇ 
IO
ÉÉ 
.
ÉÉ 
Logger
ÉÉ 
.
ÉÉ 
Log
ÉÉ 
(
ÉÉ 
NLog
ÉÉ "
.
ÉÉ" #
LogLevel
ÉÉ# +
.
ÉÉ+ ,
Warn
ÉÉ, 0
,
ÉÉ0 1 
exceptNumberFormat
ÉÉ2 D
,
ÉÉD E
$str
ÉÉF j
+
ÉÉk l 
exceptNumberFormat
ÉÉm 
)ÉÉ 
;ÉÉ 
}
ÊÊ 
break
ËË 
;
ËË 
default
ÌÌ 
:
ÌÌ 
IO
ÎÎ 
.
ÎÎ 
	WriteLine
ÎÎ 
(
ÎÎ 
$str
ÎÎ /
)
ÎÎ/ 0
;
ÎÎ0 1
break
ÏÏ 
;
ÏÏ 
}
ÐÐ 	
}
ÑÑ 
public
ÓÓ 

override
ÓÓ 
void
ÓÓ 
Good
ÓÓ 
(
ÓÓ 
)
ÓÓ 
{
ÔÔ 
GoodG2B1
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodG2B2
ÖÖ 
(
ÖÖ 
)
ÖÖ 
;
ÖÖ 
GoodB2G1
×× 
(
×× 
)
×× 
;
×× 
GoodB2G2
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
}
ÙÙ 
}ÛÛ 
}ÜÜ á#
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_16.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_16 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
while 
( 
true 
) 
{   	
data## 
=## 
Environment## 
.## "
GetEnvironmentVariable## 5
(##5 6
$str##6 ;
)##; <
;##< =
break$$ 
;$$ 
}%% 	
while&& 
(&& 
true&& 
)&& 
{'' 	
try(( 
{)) 
int** 
value** 
=** 
int** 
.**  
Parse**  %
(**% &
data**& *
)*** +
;**+ ,
}++ 
catch,, 
(,, 
FormatException,, "
exceptNumberFormat,,# 5
),,5 6
{-- 
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// "
.//" #
LogLevel//# +
.//+ ,
Warn//, 0
,//0 1
exceptNumberFormat//2 D
,//D E
$str//F `
+//a b
data//c g
)//g h
;//h i
}00 
break11 
;11 
}22 	
}33 
private77 
void77 
GoodG2B77 
(77 
)77 
{88 
string99 
data99 
;99 
while:: 
(:: 
true:: 
):: 
{;; 	
data== 
=== 
$str== 
;== 
break>> 
;>> 
}?? 	
while@@ 
(@@ 
true@@ 
)@@ 
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
breakKK 
;KK 
}LL 	
}MM 
privatePP 
voidPP 
GoodB2GPP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
whileSS 
(SS 
trueSS 
)SS 
{TT 	
dataWW 
=WW 
EnvironmentWW 
.WW "
GetEnvironmentVariableWW 5
(WW5 6
$strWW6 ;
)WW; <
;WW< =
breakXX 
;XX 
}YY 	
whileZZ 
(ZZ 
trueZZ 
)ZZ 
{[[ 	
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF j
+cck l
exceptNumberFormatccm 
)	cc 
;
cc 
}dd 
breakee 
;ee 
}ff 	
}gg 
publicii 

overrideii 
voidii 
Goodii 
(ii 
)ii 
{jj 
GoodG2Bkk 
(kk 
)kk 
;kk 
GoodB2Gll 
(ll 
)ll 
;ll 
}mm 
}oo 
}pp À#
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_17.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_17 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data%% 
=%% 
Environment%% 
.%% "
GetEnvironmentVariable%% 1
(%%1 2
$str%%2 7
)%%7 8
;%%8 9
for&& 
(&& 
int&& 
j&& 
=&& 
$num&& 
;&& 
j&& 
<&& 
$num&& 
;&& 
j&&  
++&&  "
)&&" #
{'' 	
try(( 
{)) 
int** 
value** 
=** 
int** 
.**  
Parse**  %
(**% &
data**& *
)*** +
;**+ ,
}++ 
catch,, 
(,, 
FormatException,, "
exceptNumberFormat,,# 5
),,5 6
{-- 
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// "
.//" #
LogLevel//# +
.//+ ,
Warn//, 0
,//0 1
exceptNumberFormat//2 D
,//D E
$str//F `
+//a b
data//c g
)//g h
;//h i
}00 
}11 	
}22 
private66 
void66 
GoodG2B66 
(66 
)66 
{77 
string88 
data88 
;88 
data:: 
=:: 
$str:: 
;:: 
for;; 
(;; 
int;; 
j;; 
=;; 
$num;; 
;;; 
j;; 
<;; 
$num;; 
;;; 
j;;  
++;;  "
);;" #
{<< 	
try== 
{>> 
int?? 
value?? 
=?? 
int?? 
.??  
Parse??  %
(??% &
data??& *
)??* +
;??+ ,
}@@ 
catchAA 
(AA 
FormatExceptionAA "
exceptNumberFormatAA# 5
)AA5 6
{BB 
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD "
.DD" #
LogLevelDD# +
.DD+ ,
WarnDD, 0
,DD0 1
exceptNumberFormatDD2 D
,DDD E
$strDDF `
+DDa b
dataDDc g
)DDg h
;DDh i
}EE 
}FF 	
}GG 
privateJJ 
voidJJ 
GoodB2GJJ 
(JJ 
)JJ 
{KK 
stringLL 
dataLL 
;LL 
dataOO 
=OO 
EnvironmentOO 
.OO "
GetEnvironmentVariableOO 1
(OO1 2
$strOO2 7
)OO7 8
;OO8 9
forPP 
(PP 
intPP 
kPP 
=PP 
$numPP 
;PP 
kPP 
<PP 
$numPP 
;PP 
kPP  
++PP  "
)PP" #
{QQ 	
tryRR 
{SS 
intTT 
valueTT 
=TT 
intTT 
.TT  
ParseTT  %
(TT% &
dataTT& *
)TT* +
;TT+ ,
}UU 
catchVV 
(VV 
FormatExceptionVV "
exceptNumberFormatVV# 5
)VV5 6
{WW 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
exceptNumberFormatYY2 D
,YYD E
$strYYF j
+YYk l
exceptNumberFormatYYm 
)	YY 
;
YY 
}ZZ 
}[[ 	
}\\ 
public^^ 

override^^ 
void^^ 
Good^^ 
(^^ 
)^^ 
{__ 
GoodG2B`` 
(`` 
)`` 
;`` 
GoodB2Gaa 
(aa 
)aa 
;aa 
}bb 
}dd 
}ee ê9
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_21.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_21 D
:E F
AbstractTestCaseG W
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data$$ 
=$$ 
Environment$$ 
.$$ "
GetEnvironmentVariable$$ 1
($$1 2
$str$$2 7
)$$7 8
;$$8 9

badPrivate%% 
=%% 
true%% 
;%% 
BadSink&& 
(&& 
data&& 
)&& 
;&& 
}'' 
private)) 
void)) 
BadSink)) 
()) 
string)) 
data))  $
)))% &
{** 
if++ 

(++ 

badPrivate++ 
)++ 
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private:: 
bool:: 
goodB2G1Private::  
=::! "
false::# (
;::( )
private;; 
bool;; 
goodB2G2Private;;  
=;;! "
false;;# (
;;;( )
private<< 
bool<< 
goodG2BPrivate<< 
=<<  !
false<<" '
;<<' (
public>> 

override>> 
void>> 
Good>> 
(>> 
)>> 
{?? 
GoodB2G1@@ 
(@@ 
)@@ 
;@@ 
GoodB2G2AA 
(AA 
)AA 
;AA 
GoodG2BBB 
(BB 
)BB 
;BB 
}CC 
privateFF 
voidFF 
GoodB2G1FF 
(FF 
)FF 
{GG 
stringHH 
dataHH 
;HH 
dataKK 
=KK 
EnvironmentKK 
.KK "
GetEnvironmentVariableKK 1
(KK1 2
$strKK2 7
)KK7 8
;KK8 9
goodB2G1PrivateLL 
=LL 
falseLL 
;LL  
GoodB2G1SinkMM 
(MM 
dataMM 
)MM 
;MM 
}NN 
privatePP 
voidPP 
GoodB2G1SinkPP 
(PP 
stringPP $
dataPP% )
)PP* +
{QQ 
ifRR 

(RR 
goodB2G1PrivateRR 
)RR 
{SS 	
IOUU 
.UU 
	WriteLineUU 
(UU 
$strUU /
)UU/ 0
;UU0 1
}VV 	
elseWW 
{XX 	
tryYY 
{ZZ 
int[[ 
value[[ 
=[[ 
int[[ 
.[[  
Parse[[  %
([[% &
data[[& *
)[[* +
;[[+ ,
}\\ 
catch]] 
(]] 
FormatException]] "
exceptNumberFormat]]# 5
)]]5 6
{^^ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptNumberFormat``2 D
,``D E
$str``F j
+``k l
exceptNumberFormat``m 
)	`` 
;
`` 
}aa 
}bb 	
}cc 
privateff 
voidff 
GoodB2G2ff 
(ff 
)ff 
{gg 
stringhh 
datahh 
;hh 
datakk 
=kk 
Environmentkk 
.kk "
GetEnvironmentVariablekk 1
(kk1 2
$strkk2 7
)kk7 8
;kk8 9
goodB2G2Privatell 
=ll 
truell 
;ll 
GoodB2G2Sinkmm 
(mm 
datamm 
)mm 
;mm 
}nn 
privatepp 
voidpp 
GoodB2G2Sinkpp 
(pp 
stringpp $
datapp% )
)pp* +
{qq 
ifrr 

(rr 
goodB2G2Privaterr 
)rr 
{ss 	
trytt 
{uu 
intvv 
valuevv 
=vv 
intvv 
.vv  
Parsevv  %
(vv% &
datavv& *
)vv* +
;vv+ ,
}ww 
catchxx 
(xx 
FormatExceptionxx "
exceptNumberFormatxx# 5
)xx5 6
{yy 
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ "
.{{" #
LogLevel{{# +
.{{+ ,
Warn{{, 0
,{{0 1
exceptNumberFormat{{2 D
,{{D E
$str{{F j
+{{k l
exceptNumberFormat{{m 
)	{{ 
;
{{ 
}|| 
}}} 	
}~~ 
private
 
void
 
GoodG2B
 
(
 
)
 
{
 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
goodG2BPrivate
 
=
 
true
 
;
 
GoodG2BSink
 
(
 
data
 
)
 
;
 
}
 
private
 
void
 
GoodG2BSink
 
(
 
string
 #
data
$ (
)
) *
{
 
if
 

(
 
goodG2BPrivate
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
} 
} §
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_22a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_22a E
:F G
AbstractTestCaseH X
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
=!! 
null!! 
;!! 
data$$ 
=$$ 
Environment$$ 
.$$ "
GetEnvironmentVariable$$ 1
($$1 2
$str$$2 7
)$$7 8
;$$8 9
badPublicStatic%% 
=%% 
true%% 
;%% K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_22b&& G
.&&G H
BadSink&&H O
(&&O P
data&&P T
)&&U V
;&&V W
}'' 
public** 

static** 
bool**  
goodB2G1PublicStatic** +
=**, -
false**. 3
;**3 4
public++ 

static++ 
bool++  
goodB2G2PublicStatic++ +
=++, -
false++. 3
;++3 4
public,, 

static,, 
bool,, 
goodG2BPublicStatic,, *
=,,+ ,
false,,- 2
;,,2 3
public.. 

override.. 
void.. 
Good.. 
(.. 
).. 
{// 
GoodB2G100 
(00 
)00 
;00 
GoodB2G211 
(11 
)11 
;11 
GoodG2B22 
(22 
)22 
;22 
}33 
private66 
void66 
GoodB2G166 
(66 
)66 
{77 
string88 
data88 
=88 
null88 
;88 
data;; 
=;; 
Environment;; 
.;; "
GetEnvironmentVariable;; 1
(;;1 2
$str;;2 7
);;7 8
;;;8 9 
goodB2G1PublicStatic<< 
=<< 
false<< $
;<<$ %K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_22b== G
.==G H
GoodB2G1Sink==H T
(==T U
data==U Y
)==Z [
;==[ \
}>> 
privateAA 
voidAA 
GoodB2G2AA 
(AA 
)AA 
{BB 
stringCC 
dataCC 
=CC 
nullCC 
;CC 
dataFF 
=FF 
EnvironmentFF 
.FF "
GetEnvironmentVariableFF 1
(FF1 2
$strFF2 7
)FF7 8
;FF8 9 
goodB2G2PublicStaticGG 
=GG 
trueGG #
;GG# $K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_22bHH G
.HHG H
GoodB2G2SinkHHH T
(HHT U
dataHHU Y
)HHZ [
;HH[ \
}II 
privateLL 
voidLL 
GoodG2BLL 
(LL 
)LL 
{MM 
stringNN 
dataNN 
=NN 
nullNN 
;NN 
dataPP 
=PP 
$strPP 
;PP 
goodG2BPublicStaticQQ 
=QQ 
trueQQ "
;QQ" #K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_22bRR G
.RRG H
GoodG2BSinkRRH S
(RRS T
dataRRT X
)RRY Z
;RRZ [
}SS 
}UU 
}VV Ú(
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_22b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_22b E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
if 

( K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_22a K
.K L
badPublicStaticL [
)[ \
{ 	
try   
{!! 
int"" 
value"" 
="" 
int"" 
.""  
Parse""  %
(""% &
data""& *
)""* +
;""+ ,
}## 
catch$$ 
($$ 
FormatException$$ "
exceptNumberFormat$$# 5
)$$5 6
{%% 
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' "
.''" #
LogLevel''# +
.''+ ,
Warn'', 0
,''0 1
exceptNumberFormat''2 D
,''D E
$str''F `
+''a b
data''c g
)''g h
;''h i
}(( 
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
}00 
public55 

static55 
void55 
GoodB2G1Sink55 #
(55# $
string55$ *
data55+ /
)550 1
{66 
if77 

(77 K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_22a77 K
.77K L 
goodB2G1PublicStatic77L `
)77` a
{88 	
data;; 
=;; 
null;; 
;;; 
}<< 	
else== 
{>> 	
try?? 
{@@ 
intAA 
valueAA 
=AA 
intAA 
.AA  
ParseAA  %
(AA% &
dataAA& *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
FormatExceptionCC "
exceptNumberFormatCC# 5
)CC5 6
{DD 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
exceptNumberFormatFF2 D
,FFD E
$strFFF j
+FFk l
exceptNumberFormatFFm 
)	FF 
;
FF 
}GG 
}HH 	
}II 
publicLL 

staticLL 
voidLL 
GoodB2G2SinkLL #
(LL# $
stringLL$ *
dataLL+ /
)LL0 1
{MM 
ifNN 

(NN K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_22aNN K
.NNK L 
goodB2G2PublicStaticNNL `
)NN` a
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF j
+WWk l
exceptNumberFormatWWm 
)	WW 
;
WW 
}XX 
}YY 	
elseZZ 
{[[ 	
data^^ 
=^^ 
null^^ 
;^^ 
}__ 	
}`` 
publiccc 

staticcc 
voidcc 
GoodG2BSinkcc "
(cc" #
stringcc# )
datacc* .
)cc/ 0
{dd 
ifee 

(ee K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_22aee K
.eeK L
goodG2BPublicStaticeeL _
)ee_ `
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF `
+nna b
datannc g
)nng h
;nnh i
}oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
}ww 
}yy 
}zz $
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_31.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_31 D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
dataCopy 
; 
{ 	
string   
data   
;   
data## 
=## 
Environment## 
.## "
GetEnvironmentVariable## 5
(##5 6
$str##6 ;
)##; <
;##< =
dataCopy$$ 
=$$ 
data$$ 
;$$ 
}%% 	
{&& 	
string'' 
data'' 
='' 
dataCopy'' "
;''" #
try(( 
{)) 
int** 
value** 
=** 
int** 
.**  
Parse**  %
(**% &
data**& *
)*** +
;**+ ,
}++ 
catch,, 
(,, 
FormatException,, "
exceptNumberFormat,,# 5
),,5 6
{-- 
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// "
.//" #
LogLevel//# +
.//+ ,
Warn//, 0
,//0 1
exceptNumberFormat//2 D
,//D E
$str//F `
+//a b
data//c g
)//g h
;//h i
}00 
}11 	
}22 
public55 

override55 
void55 
Good55 
(55 
)55 
{66 
GoodG2B77 
(77 
)77 
;77 
GoodB2G88 
(88 
)88 
;88 
}99 
private<< 
void<< 
GoodG2B<< 
(<< 
)<< 
{== 
string>> 
dataCopy>> 
;>> 
{?? 	
string@@ 
data@@ 
;@@ 
dataBB 
=BB 
$strBB 
;BB 
dataCopyCC 
=CC 
dataCC 
;CC 
}DD 	
{EE 	
stringFF 
dataFF 
=FF 
dataCopyFF "
;FF" #
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateTT 
voidTT 
GoodB2GTT 
(TT 
)TT 
{UU 
stringVV 
dataCopyVV 
;VV 
{WW 	
stringXX 
dataXX 
;XX 
data[[ 
=[[ 
Environment[[ 
.[[ "
GetEnvironmentVariable[[ 5
([[5 6
$str[[6 ;
)[[; <
;[[< =
dataCopy\\ 
=\\ 
data\\ 
;\\ 
}]] 	
{^^ 	
string__ 
data__ 
=__ 
dataCopy__ "
;__" #
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF j
+ggk l
exceptNumberFormatggm 
)	gg 
;
gg 
}hh 
}ii 	
}jj 
}ll 
}mm $
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_41.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_41 D
:E F
AbstractTestCaseG W
{ 
private 
static 
void 
BadSink 
(  
string  &
data' +
), -
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public)) 

override)) 
void)) 
Bad)) 
()) 
))) 
{** 
string++ 
data++ 
;++ 
data.. 
=.. 
Environment.. 
... "
GetEnvironmentVariable.. 1
(..1 2
$str..2 7
)..7 8
;..8 9
BadSink// 
(// 
data// 
)// 
;// 
}00 
public33 

override33 
void33 
Good33 
(33 
)33 
{44 
GoodG2B55 
(55 
)55 
;55 
GoodB2G66 
(66 
)66 
;66 
}77 
private99 
static99 
void99 
GoodG2BSink99 #
(99# $
string99$ *
data99+ /
)990 1
{:: 
try;; 
{<< 	
int== 
value== 
=== 
int== 
.== 
Parse== !
(==! "
data==" &
)==& '
;==' (
}>> 	
catch?? 
(?? 
FormatException?? 
exceptNumberFormat?? 1
)??1 2
{@@ 	
IOBB 
.BB 
LoggerBB 
.BB 
LogBB 
(BB 
NLogBB 
.BB 
LogLevelBB '
.BB' (
WarnBB( ,
,BB, -
exceptNumberFormatBB. @
,BB@ A
$strBBB \
+BB] ^
dataBB_ c
)BBc d
;BBd e
}CC 	
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK 
GoodG2BSinkLL 
(LL 
dataLL 
)LL 
;LL 
}MM 
privateOO 
staticOO 
voidOO 
GoodB2GSinkOO #
(OO# $
stringOO$ *
dataOO+ /
)OO0 1
{PP 
tryQQ 
{RR 	
intSS 
valueSS 
=SS 
intSS 
.SS 
ParseSS !
(SS! "
dataSS" &
)SS& '
;SS' (
}TT 	
catchUU 
(UU 
FormatExceptionUU 
exceptNumberFormatUU 1
)UU1 2
{VV 	
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX 
.XX 
LogLevelXX '
.XX' (
WarnXX( ,
,XX, -
exceptNumberFormatXX. @
,XX@ A
$strXXB f
+XXg h
exceptNumberFormatXXi {
)XX{ |
;XX| }
}YY 	
}ZZ 
private]] 
static]] 
void]] 
GoodB2G]] 
(]]  
)]]  !
{^^ 
string__ 
data__ 
;__ 
databb 
=bb 
Environmentbb 
.bb "
GetEnvironmentVariablebb 1
(bb1 2
$strbb2 7
)bb7 8
;bb8 9
GoodB2GSinkcc 
(cc 
datacc 
)cc 
;cc 
}dd 
}ff 
}gg ¾%
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_42.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_42 D
:E F
AbstractTestCaseG W
{ 
private 
static 
string 
	BadSource #
(# $
)$ %
{ 
string 
data 
; 
data!! 
=!! 
Environment!! 
.!! "
GetEnvironmentVariable!! 1
(!!1 2
$str!!2 7
)!!7 8
;!!8 9
return"" 
data"" 
;"" 
}## 
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
string'' 
data'' 
='' 
	BadSource'' 
(''  
)''  !
;''! "
try(( 
{)) 	
int** 
value** 
=** 
int** 
.** 
Parse** !
(**! "
data**" &
)**& '
;**' (
}++ 	
catch,, 
(,, 
FormatException,, 
exceptNumberFormat,, 1
),,1 2
{-- 	
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// 
.// 
LogLevel// '
.//' (
Warn//( ,
,//, -
exceptNumberFormat//. @
,//@ A
$str//B \
+//] ^
data//_ c
)//c d
;//d e
}00 	
}11 
private55 
static55 
string55 
GoodG2BSource55 '
(55' (
)55( )
{66 
string77 
data77 
;77 
data99 
=99 
$str99 
;99 
return:: 
data:: 
;:: 
};; 
private== 
static== 
void== 
GoodG2B== 
(==  
)==  !
{>> 
string?? 
data?? 
=?? 
GoodG2BSource?? #
(??# $
)??$ %
;??% &
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB \
+GG] ^
dataGG_ c
)GGc d
;GGd e
}HH 	
}II 
privateLL 
staticLL 
stringLL 
GoodB2GSourceLL '
(LL' (
)LL( )
{MM 
stringNN 
dataNN 
;NN 
dataQQ 
=QQ 
EnvironmentQQ 
.QQ "
GetEnvironmentVariableQQ 1
(QQ1 2
$strQQ2 7
)QQ7 8
;QQ8 9
returnRR 
dataRR 
;RR 
}SS 
privateUU 
staticUU 
voidUU 
GoodB2GUU 
(UU  
)UU  !
{VV 
stringWW 
dataWW 
=WW 
GoodB2GSourceWW #
(WW# $
)WW$ %
;WW% &
tryXX 
{YY 	
intZZ 
valueZZ 
=ZZ 
intZZ 
.ZZ 
ParseZZ !
(ZZ! "
dataZZ" &
)ZZ& '
;ZZ' (
}[[ 	
catch\\ 
(\\ 
FormatException\\ 
exceptNumberFormat\\ 1
)\\1 2
{]] 	
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ 
.__ 
LogLevel__ '
.__' (
Warn__( ,
,__, -
exceptNumberFormat__. @
,__@ A
$str__B f
+__g h
exceptNumberFormat__i {
)__{ |
;__| }
}`` 	
}aa 
publiccc 

overridecc 
voidcc 
Goodcc 
(cc 
)cc 
{dd 
GoodG2Bee 
(ee 
)ee 
;ee 
GoodB2Gff 
(ff 
)ff 
;ff 
}gg 
}ii 
}jj ã'
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_45.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_45 D
:E F
AbstractTestCaseG W
{ 
private 
string 
dataBad 
; 
private 
string 
dataGoodG2B 
; 
private 
string 
dataGoodB2G 
; 
private   
void   
BadSink   
(   
)   
{!! 
string"" 
data"" 
="" 
dataBad"" 
;"" 
try## 
{$$ 	
int%% 
value%% 
=%% 
int%% 
.%% 
Parse%% !
(%%! "
data%%" &
)%%& '
;%%' (
}&& 	
catch'' 
('' 
FormatException'' 
exceptNumberFormat'' 1
)''1 2
{(( 	
IO** 
.** 
Logger** 
.** 
Log** 
(** 
NLog** 
.** 
LogLevel** '
.**' (
Warn**( ,
,**, -
exceptNumberFormat**. @
,**@ A
$str**B \
+**] ^
data**_ c
)**c d
;**d e
}++ 	
},, 
public.. 

override.. 
void.. 
Bad.. 
(.. 
).. 
{// 
string00 
data00 
;00 
data33 
=33 
Environment33 
.33 "
GetEnvironmentVariable33 1
(331 2
$str332 7
)337 8
;338 9
dataBad44 
=44 
data44 
;44 
BadSink55 
(55 
)55 
;55 
}66 
public99 

override99 
void99 
Good99 
(99 
)99 
{:: 
GoodG2B;; 
(;; 
);; 
;;; 
GoodB2G<< 
(<< 
)<< 
;<< 
}== 
private?? 
void?? 
GoodG2BSink?? 
(?? 
)?? 
{@@ 
stringAA 
dataAA 
=AA 
dataGoodG2BAA !
;AA! "
tryBB 
{CC 	
intDD 
valueDD 
=DD 
intDD 
.DD 
ParseDD !
(DD! "
dataDD" &
)DD& '
;DD' (
}EE 	
catchFF 
(FF 
FormatExceptionFF 
exceptNumberFormatFF 1
)FF1 2
{GG 	
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII 
.II 
LogLevelII '
.II' (
WarnII( ,
,II, -
exceptNumberFormatII. @
,II@ A
$strIIB \
+II] ^
dataII_ c
)IIc d
;IId e
}JJ 	
}KK 
privateNN 
voidNN 
GoodG2BNN 
(NN 
)NN 
{OO 
stringPP 
dataPP 
;PP 
dataRR 
=RR 
$strRR 
;RR 
dataGoodG2BSS 
=SS 
dataSS 
;SS 
GoodG2BSinkTT 
(TT 
)TT 
;TT 
}UU 
privateWW 
voidWW 
GoodB2GSinkWW 
(WW 
)WW 
{XX 
stringYY 
dataYY 
=YY 
dataGoodB2GYY !
;YY! "
tryZZ 
{[[ 	
int\\ 
value\\ 
=\\ 
int\\ 
.\\ 
Parse\\ !
(\\! "
data\\" &
)\\& '
;\\' (
}]] 	
catch^^ 
(^^ 
FormatException^^ 
exceptNumberFormat^^ 1
)^^1 2
{__ 	
IOaa 
.aa 
Loggeraa 
.aa 
Logaa 
(aa 
NLogaa 
.aa 
LogLevelaa '
.aa' (
Warnaa( ,
,aa, -
exceptNumberFormataa. @
,aa@ A
$straaB f
+aag h
exceptNumberFormataai {
)aa{ |
;aa| }
}bb 	
}cc 
privateff 
voidff 
GoodB2Gff 
(ff 
)ff 
{gg 
stringhh 
datahh 
;hh 
datakk 
=kk 
Environmentkk 
.kk "
GetEnvironmentVariablekk 1
(kk1 2
$strkk2 7
)kk7 8
;kk8 9
dataGoodB2Gll 
=ll 
datall 
;ll 
GoodB2GSinkmm 
(mm 
)mm 
;mm 
}nn 
}pp 
}qq Ý
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_51a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_51a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data!! 
=!! 
Environment!! 
.!! "
GetEnvironmentVariable!! 1
(!!1 2
$str!!2 7
)!!7 8
;!!8 9K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_51b"" G
.""G H
BadSink""H O
(""O P
data""P T
)""V W
;""W X
}## 
public&& 

override&& 
void&& 
Good&& 
(&& 
)&& 
{'' 
GoodG2B(( 
((( 
)(( 
;(( 
GoodB2G)) 
()) 
))) 
;)) 
}** 
private-- 
void-- 
GoodG2B-- 
(-- 
)-- 
{.. 
string// 
data// 
;// 
data11 
=11 
$str11 
;11 K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_51b22 G
.22G H
GoodG2BSink22H S
(22S T
data22T X
)22Z [
;22[ \
}33 
private66 
void66 
GoodB2G66 
(66 
)66 
{77 
string88 
data88 
;88 
data;; 
=;; 
Environment;; 
.;; "
GetEnvironmentVariable;; 1
(;;1 2
$str;;2 7
);;7 8
;;;8 9K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_51b<< G
.<<G H
GoodB2GSink<<H S
(<<S T
data<<T X
)<<Z [
;<<[ \
}== 
}?? 
}@@ ü
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_51b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_51b E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH Ý
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_52a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_52a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data!! 
=!! 
Environment!! 
.!! "
GetEnvironmentVariable!! 1
(!!1 2
$str!!2 7
)!!7 8
;!!8 9K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_52b"" G
.""G H
BadSink""H O
(""O P
data""P T
)""U V
;""V W
}## 
public&& 

override&& 
void&& 
Good&& 
(&& 
)&& 
{'' 
GoodG2B(( 
((( 
)(( 
;(( 
GoodB2G)) 
()) 
))) 
;)) 
}** 
private-- 
void-- 
GoodG2B-- 
(-- 
)-- 
{.. 
string// 
data// 
;// 
data11 
=11 
$str11 
;11 K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_52b22 G
.22G H
GoodG2BSink22H S
(22S T
data22T X
)22Y Z
;22Z [
}33 
private66 
void66 
GoodB2G66 
(66 
)66 
{77 
string88 
data88 
;88 
data;; 
=;; 
Environment;; 
.;; "
GetEnvironmentVariable;; 1
(;;1 2
$str;;2 7
);;7 8
;;;8 9K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_52b<< G
.<<G H
GoodB2GSink<<H S
(<<S T
data<<T X
)<<Y Z
;<<Z [
}== 
}?? 
}@@ 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_52b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_52b E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_52c G
.G H
BadSinkH O
(O P
dataP T
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_52c&& G
.&&G H
GoodG2BSink&&H S
(&&S T
data&&T X
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_52c,, G
.,,G H
GoodB2GSink,,H S
(,,S T
data,,T X
),,Y Z
;,,Z [
}-- 
}// 
}00 ü
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_52c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_52c E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH Ý
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_53a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data!! 
=!! 
Environment!! 
.!! "
GetEnvironmentVariable!! 1
(!!1 2
$str!!2 7
)!!7 8
;!!8 9K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53b"" G
.""G H
BadSink""H O
(""O P
data""P T
)""U V
;""V W
}## 
public&& 

override&& 
void&& 
Good&& 
(&& 
)&& 
{'' 
GoodG2B(( 
((( 
)(( 
;(( 
GoodB2G)) 
()) 
))) 
;)) 
}** 
private-- 
void-- 
GoodG2B-- 
(-- 
)-- 
{.. 
string// 
data// 
;// 
data11 
=11 
$str11 
;11 K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53b22 G
.22G H
GoodG2BSink22H S
(22S T
data22T X
)22Y Z
;22Z [
}33 
private66 
void66 
GoodB2G66 
(66 
)66 
{77 
string88 
data88 
;88 
data;; 
=;; 
Environment;; 
.;; "
GetEnvironmentVariable;; 1
(;;1 2
$str;;2 7
);;7 8
;;;8 9K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53b<< G
.<<G H
GoodB2GSink<<H S
(<<S T
data<<T X
)<<Y Z
;<<Z [
}== 
}?? 
}@@ 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_53b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53b E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53c G
.G H
BadSinkH O
(O P
dataP T
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53c&& G
.&&G H
GoodG2BSink&&H S
(&&S T
data&&T X
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53c,, G
.,,G H
GoodB2GSink,,H S
(,,S T
data,,T X
),,Y Z
;,,Z [
}-- 
}// 
}00 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_53c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53c E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53d G
.G H
BadSinkH O
(O P
dataP T
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53d&& G
.&&G H
GoodG2BSink&&H S
(&&S T
data&&T X
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53d,, G
.,,G H
GoodB2GSink,,H S
(,,S T
data,,T X
),,Y Z
;,,Z [
}-- 
}// 
}00 ü
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_53d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53d E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH Ý
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_54a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data!! 
=!! 
Environment!! 
.!! "
GetEnvironmentVariable!! 1
(!!1 2
$str!!2 7
)!!7 8
;!!8 9K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54b"" G
.""G H
BadSink""H O
(""O P
data""P T
)""U V
;""V W
}## 
public&& 

override&& 
void&& 
Good&& 
(&& 
)&& 
{'' 
GoodG2B(( 
((( 
)(( 
;(( 
GoodB2G)) 
()) 
))) 
;)) 
}** 
private-- 
void-- 
GoodG2B-- 
(-- 
)-- 
{.. 
string// 
data// 
;// 
data11 
=11 
$str11 
;11 K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54b22 G
.22G H
GoodG2BSink22H S
(22S T
data22T X
)22Y Z
;22Z [
}33 
private66 
void66 
GoodB2G66 
(66 
)66 
{77 
string88 
data88 
;88 
data;; 
=;; 
Environment;; 
.;; "
GetEnvironmentVariable;; 1
(;;1 2
$str;;2 7
);;7 8
;;;8 9K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54b<< G
.<<G H
GoodB2GSink<<H S
(<<S T
data<<T X
)<<Y Z
;<<Z [
}== 
}?? 
}@@ 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_54b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54b E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54c G
.G H
BadSinkH O
(O P
dataP T
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54c&& G
.&&G H
GoodG2BSink&&H S
(&&S T
data&&T X
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54c,, G
.,,G H
GoodB2GSink,,H S
(,,S T
data,,T X
),,Y Z
;,,Z [
}-- 
}// 
}00 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_54c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54c E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54d G
.G H
BadSinkH O
(O P
dataP T
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54d&& G
.&&G H
GoodG2BSink&&H S
(&&S T
data&&T X
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54d,, G
.,,G H
GoodB2GSink,,H S
(,,S T
data,,T X
),,Y Z
;,,Z [
}-- 
}// 
}00 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_54d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54d E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54e G
.G H
BadSinkH O
(O P
dataP T
)U V
;V W
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54e&& G
.&&G H
GoodG2BSink&&H S
(&&S T
data&&T X
)&&Y Z
;&&Z [
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54e,, G
.,,G H
GoodB2GSink,,H S
(,,S T
data,,T X
),,Y Z
;,,Z [
}-- 
}// 
}00 ü
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_54e.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54e E
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH Ä
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_61a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_61a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
= K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_61b U
.U V
	BadSourceV _
(_ `
)` a
;a b
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodG2B-- 
(-- 
)-- 
;-- 
GoodB2G.. 
(.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
)22  !
{33 
string44 
data44 
=44 K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_61b44 U
.44U V
GoodG2BSource44V c
(44c d
)44d e
;44e f
try55 
{66 	
int77 
value77 
=77 
int77 
.77 
Parse77 !
(77! "
data77" &
)77& '
;77' (
}88 	
catch99 
(99 
FormatException99 
exceptNumberFormat99 1
)991 2
{:: 	
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< 
.<< 
LogLevel<< '
.<<' (
Warn<<( ,
,<<, -
exceptNumberFormat<<. @
,<<@ A
$str<<B \
+<<] ^
data<<_ c
)<<c d
;<<d e
}== 	
}>> 
privateAA 
staticAA 
voidAA 
GoodB2GAA 
(AA  
)AA  !
{BB 
stringCC 
dataCC 
=CC K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_61bCC U
.CCU V
GoodB2GSourceCCV c
(CCc d
)CCd e
;CCe f
tryDD 
{EE 	
intFF 
valueFF 
=FF 
intFF 
.FF 
ParseFF !
(FF! "
dataFF" &
)FF& '
;FF' (
}GG 	
catchHH 
(HH 
FormatExceptionHH 
exceptNumberFormatHH 1
)HH1 2
{II 	
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK 
.KK 
LogLevelKK '
.KK' (
WarnKK( ,
,KK, -
exceptNumberFormatKK. @
,KK@ A
$strKKB f
+KKg h
exceptNumberFormatKKi {
)KK{ |
;KK| }
}LL 	
}MM 
}OO 
}PP å
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_61b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_61b E
{ 
public 

static 
string 
	BadSource "
(" #
)# $
{ 
string 
data 
; 
data!! 
=!! 
Environment!! 
.!! "
GetEnvironmentVariable!! 1
(!!1 2
$str!!2 7
)!!7 8
;!!8 9
return"" 
data"" 
;"" 
}## 
public(( 

static(( 
string(( 
GoodG2BSource(( &
(((& '
)((' (
{)) 
string** 
data** 
;** 
data,, 
=,, 
$str,, 
;,, 
return-- 
data-- 
;-- 
}.. 
public11 

static11 
string11 
GoodB2GSource11 &
(11& '
)11' (
{22 
string33 
data33 
;33 
data66 
=66 
Environment66 
.66 "
GetEnvironmentVariable66 1
(661 2
$str662 7
)667 8
;668 9
return77 
data77 
;77 
}88 
}:: 
};; ­
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_66a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_66a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data!! 
=!! 
Environment!! 
.!! "
GetEnvironmentVariable!! 1
(!!1 2
$str!!2 7
)!!7 8
;!!8 9
string"" 
["" 
]"" 
	dataArray"" 
="" 
new""  
string""! '
[""' (
$num""( )
]"") *
;""* +
	dataArray## 
[## 
$num## 
]## 
=## 
data## 
;## K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_66b$$ G
.$$G H
BadSink$$H O
($$O P
	dataArray$$P Y
)$$[ \
;$$\ ]
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
)(( 
{)) 
GoodG2B** 
(** 
)** 
;** 
GoodB2G++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
string11 
data11 
;11 
data33 
=33 
$str33 
;33 
string44 
[44 
]44 
	dataArray44 
=44 
new44  
string44! '
[44' (
$num44( )
]44) *
;44* +
	dataArray55 
[55 
$num55 
]55 
=55 
data55 
;55 K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_66b66 G
.66G H
GoodG2BSink66H S
(66S T
	dataArray66T ]
)66_ `
;66` a
}77 
private:: 
static:: 
void:: 
GoodB2G:: 
(::  
)::  !
{;; 
string<< 
data<< 
;<< 
data?? 
=?? 
Environment?? 
.?? "
GetEnvironmentVariable?? 1
(??1 2
$str??2 7
)??7 8
;??8 9
string@@ 
[@@ 
]@@ 
	dataArray@@ 
=@@ 
new@@  
string@@! '
[@@' (
$num@@( )
]@@) *
;@@* +
	dataArrayAA 
[AA 
$numAA 
]AA 
=AA 
dataAA 
;AA K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_66bBB G
.BBG H
GoodB2GSinkBBH S
(BBS T
	dataArrayBBT ]
)BB_ `
;BB` a
}CC 
}EE 
}FF 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_66b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_66b E
{ 
public 

static 
void 
BadSink 
( 
string %
[% &
]& '
	dataArray( 1
)2 3
{ 
string 
data 
= 
	dataArray 
[  
$num  !
]! "
;" #
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
string--# )
[--) *
]--* +
	dataArray--, 5
)--6 7
{.. 
string// 
data// 
=// 
	dataArray// 
[//  
$num//  !
]//! "
;//" #
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
string<<# )
[<<) *
]<<* +
	dataArray<<, 5
)<<6 7
{== 
string>> 
data>> 
=>> 
	dataArray>> 
[>>  
$num>>  !
]>>! "
;>>" #
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK ë
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_67a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_67a E
:F G
AbstractTestCaseH X
{ 
public 

class 
	Container 
{ 
public 
string 
containerOne "
;" #
} 
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
data&& 
=&& 
Environment&& 
.&& "
GetEnvironmentVariable&& 1
(&&1 2
$str&&2 7
)&&7 8
;&&8 9
	Container'' 
dataContainer'' 
=''  !
new''" %
	Container''& /
(''/ 0
)''0 1
;''1 2
dataContainer(( 
.(( 
containerOne(( "
=((# $
data((% )
;(() *K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_67b)) G
.))G H
BadSink))H O
())O P
dataContainer))P ]
)))_ `
;))` a
}** 
public-- 

override-- 
void-- 
Good-- 
(-- 
)-- 
{.. 
GoodG2B// 
(// 
)// 
;// 
GoodB2G00 
(00 
)00 
;00 
}11 
private44 
static44 
void44 
GoodG2B44 
(44  
)44  !
{55 
string66 
data66 
;66 
data88 
=88 
$str88 
;88 
	Container99 
dataContainer99 
=99  !
new99" %
	Container99& /
(99/ 0
)990 1
;991 2
dataContainer:: 
.:: 
containerOne:: "
=::# $
data::% )
;::) *K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_67b;; G
.;;G H
GoodG2BSink;;H S
(;;S T
dataContainer;;T a
);;c d
;;;d e
}<< 
private?? 
static?? 
void?? 
GoodB2G?? 
(??  
)??  !
{@@ 
stringAA 
dataAA 
;AA 
dataDD 
=DD 
EnvironmentDD 
.DD "
GetEnvironmentVariableDD 1
(DD1 2
$strDD2 7
)DD7 8
;DD8 9
	ContainerEE 
dataContainerEE 
=EE  !
newEE" %
	ContainerEE& /
(EE/ 0
)EE0 1
;EE1 2
dataContainerFF 
.FF 
containerOneFF "
=FF# $
dataFF% )
;FF) *K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_67bGG G
.GGG H
GoodB2GSinkGGH S
(GGS T
dataContainerGGT a
)GGc d
;GGd e
}HH 
}JJ 
}KK Ì
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_67b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_67b E
{ 
public 

static 
void 
BadSink 
( K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_67a ^
.^ _
	Container_ h
dataContaineri v
)w x
{ 
string 
data 
= 
dataContainer #
.# $
containerOne$ 0
;0 1
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_67a--# b
.--b c
	Container--c l
dataContainer--m z
)--{ |
{.. 
string// 
data// 
=// 
dataContainer// #
.//# $
containerOne//$ 0
;//0 1
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_67a<<# b
.<<b c
	Container<<c l
dataContainer<<m z
)<<{ |
{== 
string>> 
data>> 
=>> 
dataContainer>> #
.>># $
containerOne>>$ 0
;>>0 1
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_68a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_68a E
:F G
AbstractTestCaseH X
{ 
public 

static 
string 
data 
; 
public 

override 
void 
Bad 
( 
) 
{ 
data"" 
="" 
Environment"" 
."" "
GetEnvironmentVariable"" 1
(""1 2
$str""2 7
)""7 8
;""8 9K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_68b## G
.##G H
BadSink##H O
(##O P
)##P Q
;##Q R
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
)'' 
{(( 
GoodG2B)) 
()) 
))) 
;)) 
GoodB2G** 
(** 
)** 
;** 
}++ 
private.. 
static.. 
void.. 
GoodG2B.. 
(..  
)..  !
{// 
data11 
=11 
$str11 
;11 K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_68b22 G
.22G H
GoodG2BSink22H S
(22S T
)22T U
;22U V
}33 
private66 
static66 
void66 
GoodB2G66 
(66  
)66  !
{77 
data:: 
=:: 
Environment:: 
.:: "
GetEnvironmentVariable:: 1
(::1 2
$str::2 7
)::7 8
;::8 9K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_68b;; G
.;;G H
GoodB2GSink;;H S
(;;S T
);;T U
;;;U V
}<< 
}>> 
}??  
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_68b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_68b E
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
string 
data 
= K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_68a U
.U V
dataV Z
;Z [
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
)--# $
{.. 
string// 
data// 
=// K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_68a// U
.//U V
data//V Z
;//Z [
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
)<<# $
{== 
string>> 
data>> 
=>> K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_68a>> U
.>>U V
data>>V Z
;>>Z [
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_71a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_71a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data!! 
=!! 
Environment!! 
.!! "
GetEnvironmentVariable!! 1
(!!1 2
$str!!2 7
)!!7 8
;!!8 9K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_71b"" G
.""G H
BadSink""H O
(""O P
(""P Q
Object""Q W
)""W X
data""X \
)""^ _
;""_ `
}## 
public&& 

override&& 
void&& 
Good&& 
(&& 
)&& 
{'' 
GoodG2B(( 
((( 
)(( 
;(( 
GoodB2G)) 
()) 
))) 
;)) 
}** 
private-- 
static-- 
void-- 
GoodG2B-- 
(--  
)--  !
{.. 
string// 
data// 
;// 
data11 
=11 
$str11 
;11 K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_71b22 G
.22G H
GoodG2BSink22H S
(22S T
(22T U
Object22U [
)22[ \
data22\ `
)22b c
;22c d
}33 
private66 
static66 
void66 
GoodB2G66 
(66  
)66  !
{77 
string88 
data88 
;88 
data;; 
=;; 
Environment;; 
.;; "
GetEnvironmentVariable;; 1
(;;1 2
$str;;2 7
);;7 8
;;;8 9K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_71b<< G
.<<G H
GoodB2GSink<<H S
(<<S T
(<<T U
Object<<U [
)<<[ \
data<<\ `
)<<b c
;<<c d
}== 
}?? 
}@@ ¸
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_71b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_71b E
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
string 
data 
= 
( 
string 
) 

dataObject (
;( )
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
Object..# )

dataObject..* 4
)..5 6
{// 
string00 
data00 
=00 
(00 
string00 
)00 

dataObject00 (
;00( )
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
Object==# )

dataObject==* 4
)==5 6
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 

dataObject?? (
;??( )
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL !
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_72a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_72a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data"" 
="" 
Environment"" 
."" "
GetEnvironmentVariable"" 1
(""1 2
$str""2 7
)""7 8
;""8 9
	Hashtable## 
dataHashtable## 
=##  !
new##" %
	Hashtable##& /
(##/ 0
$num##0 1
)##1 2
;##2 3
dataHashtable$$ 
.$$ 
Add$$ 
($$ 
$num$$ 
,$$ 
data$$ !
)$$! "
;$$" #
dataHashtable%% 
.%% 
Add%% 
(%% 
$num%% 
,%% 
data%% !
)%%! "
;%%" #
dataHashtable&& 
.&& 
Add&& 
(&& 
$num&& 
,&& 
data&& !
)&&! "
;&&" #K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_72b'' G
.''G H
BadSink''H O
(''O P
dataHashtable''P ]
)''_ `
;''` a
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodG2B-- 
(-- 
)-- 
;-- 
GoodB2G.. 
(.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
)22  !
{33 
string44 
data44 
;44 
data66 
=66 
$str66 
;66 
	Hashtable77 
dataHashtable77 
=77  !
new77" %
	Hashtable77& /
(77/ 0
$num770 1
)771 2
;772 3
dataHashtable88 
.88 
Add88 
(88 
$num88 
,88 
data88 !
)88! "
;88" #
dataHashtable99 
.99 
Add99 
(99 
$num99 
,99 
data99 !
)99! "
;99" #
dataHashtable:: 
.:: 
Add:: 
(:: 
$num:: 
,:: 
data:: !
)::! "
;::" #K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_72b;; G
.;;G H
GoodG2BSink;;H S
(;;S T
dataHashtable;;T a
);;c d
;;;d e
}<< 
private?? 
static?? 
void?? 
GoodB2G?? 
(??  
)??  !
{@@ 
stringAA 
dataAA 
;AA 
dataDD 
=DD 
EnvironmentDD 
.DD "
GetEnvironmentVariableDD 1
(DD1 2
$strDD2 7
)DD7 8
;DD8 9
	HashtableEE 
dataHashtableEE 
=EE  !
newEE" %
	HashtableEE& /
(EE/ 0
$numEE0 1
)EE1 2
;EE2 3
dataHashtableFF 
.FF 
AddFF 
(FF 
$numFF 
,FF 
dataFF !
)FF! "
;FF" #
dataHashtableGG 
.GG 
AddGG 
(GG 
$numGG 
,GG 
dataGG !
)GG! "
;GG" #
dataHashtableHH 
.HH 
AddHH 
(HH 
$numHH 
,HH 
dataHH !
)HH! "
;HH" #K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_72bII G
.IIG H
GoodB2GSinkIIH S
(IIS T
dataHashtableIIT a
)IIc d
;IId e
}JJ 
}LL 
}MM ã
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_72b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_72b E
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
string 
data 
= 
( 
string 
) 
dataHashtable ,
[, -
$num- .
]. /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
	Hashtable..# ,
dataHashtable..- :
)..; <
{// 
string00 
data00 
=00 
(00 
string00 
)00 
dataHashtable00 ,
[00, -
$num00- .
]00. /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
	Hashtable==# ,
dataHashtable==- :
)==; <
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 
dataHashtable?? ,
[??, -
$num??- .
]??. /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL !
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_73a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_73a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data"" 
="" 
Environment"" 
."" "
GetEnvironmentVariable"" 1
(""1 2
$str""2 7
)""7 8
;""8 9

LinkedList## 
<## 
string## 
>## 
dataLinkedList## )
=##* +
new##, /

LinkedList##0 :
<##: ;
string##; A
>##A B
(##B C
)##C D
;##D E
dataLinkedList$$ 
.$$ 
AddLast$$ 
($$ 
data$$ #
)$$# $
;$$$ %
dataLinkedList%% 
.%% 
AddLast%% 
(%% 
data%% #
)%%# $
;%%$ %
dataLinkedList&& 
.&& 
AddLast&& 
(&& 
data&& #
)&&# $
;&&$ %K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_73b'' G
.''G H
BadSink''H O
(''O P
dataLinkedList''P ^
)''` a
;''a b
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodG2B-- 
(-- 
)-- 
;-- 
GoodB2G.. 
(.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
)22  !
{33 
string44 
data44 
;44 
data66 
=66 
$str66 
;66 

LinkedList77 
<77 
string77 
>77 
dataLinkedList77 )
=77* +
new77, /

LinkedList770 :
<77: ;
string77; A
>77A B
(77B C
)77C D
;77D E
dataLinkedList88 
.88 
AddLast88 
(88 
data88 #
)88# $
;88$ %
dataLinkedList99 
.99 
AddLast99 
(99 
data99 #
)99# $
;99$ %
dataLinkedList:: 
.:: 
AddLast:: 
(:: 
data:: #
)::# $
;::$ %K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_73b;; G
.;;G H
GoodG2BSink;;H S
(;;S T
dataLinkedList;;T b
);;d e
;;;e f
}<< 
private?? 
static?? 
void?? 
GoodB2G?? 
(??  
)??  !
{@@ 
stringAA 
dataAA 
;AA 
dataDD 
=DD 
EnvironmentDD 
.DD "
GetEnvironmentVariableDD 1
(DD1 2
$strDD2 7
)DD7 8
;DD8 9

LinkedListEE 
<EE 
stringEE 
>EE 
dataLinkedListEE )
=EE* +
newEE, /

LinkedListEE0 :
<EE: ;
stringEE; A
>EEA B
(EEB C
)EEC D
;EED E
dataLinkedListFF 
.FF 
AddLastFF 
(FF 
dataFF #
)FF# $
;FF$ %
dataLinkedListGG 
.GG 
AddLastGG 
(GG 
dataGG #
)GG# $
;GG$ %
dataLinkedListHH 
.HH 
AddLastHH 
(HH 
dataHH #
)HH# $
;HH$ %K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_73bII G
.IIG H
GoodB2GSinkIIH S
(IIS T
dataLinkedListIIT b
)IId e
;IIe f
}JJ 
}LL 
}MM ¥
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_73b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_73b E
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
string* 0
>0 1
dataLinkedList2 @
)A B
{ 
string 
data 
= 
dataLinkedList $
.$ %
Last% )
.) *
Value* /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #

LinkedList..# -
<..- .
string... 4
>..4 5
dataLinkedList..6 D
)..E F
{// 
string00 
data00 
=00 
dataLinkedList00 $
.00$ %
Last00% )
.00) *
Value00* /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

LinkedList==# -
<==- .
string==. 4
>==4 5
dataLinkedList==6 D
)==E F
{>> 
string?? 
data?? 
=?? 
dataLinkedList?? $
.??$ %
Last??% )
.??) *
Value??* /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL Ö$
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_74a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_74a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data"" 
="" 
Environment"" 
."" "
GetEnvironmentVariable"" 1
(""1 2
$str""2 7
)""7 8
;""8 9

Dictionary## 
<## 
int## 
,## 
string## 
>## 
dataDictionary## -
=##. /
new##0 3

Dictionary##4 >
<##> ?
int##? B
,##B C
string##C I
>##I J
(##J K
)##K L
;##L M
dataDictionary$$ 
.$$ 
Add$$ 
($$ 
$num$$ 
,$$ 
data$$ "
)$$" #
;$$# $
dataDictionary%% 
.%% 
Add%% 
(%% 
$num%% 
,%% 
data%% "
)%%" #
;%%# $
dataDictionary&& 
.&& 
Add&& 
(&& 
$num&& 
,&& 
data&& "
)&&" #
;&&# $K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_74b'' G
.''G H
BadSink''H O
(''O P
dataDictionary''P ^
)''` a
;''a b
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodG2B-- 
(-- 
)-- 
;-- 
GoodB2G.. 
(.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
)22  !
{33 
string44 
data44 
;44 
data66 
=66 
$str66 
;66 

Dictionary77 
<77 
int77 
,77 
string77 
>77 
dataDictionary77 -
=77. /
new770 3

Dictionary774 >
<77> ?
int77? B
,77B C
string77C I
>77I J
(77J K
)77K L
;77L M
dataDictionary88 
.88 
Add88 
(88 
$num88 
,88 
data88 "
)88" #
;88# $
dataDictionary99 
.99 
Add99 
(99 
$num99 
,99 
data99 "
)99" #
;99# $
dataDictionary:: 
.:: 
Add:: 
(:: 
$num:: 
,:: 
data:: "
)::" #
;::# $K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_74b;; G
.;;G H
GoodG2BSink;;H S
(;;S T
dataDictionary;;T b
);;d e
;;;e f
}<< 
private?? 
static?? 
void?? 
GoodB2G?? 
(??  
)??  !
{@@ 
stringAA 
dataAA 
;AA 
dataDD 
=DD 
EnvironmentDD 
.DD "
GetEnvironmentVariableDD 1
(DD1 2
$strDD2 7
)DD7 8
;DD8 9

DictionaryEE 
<EE 
intEE 
,EE 
stringEE 
>EE 
dataDictionaryEE -
=EE. /
newEE0 3

DictionaryEE4 >
<EE> ?
intEE? B
,EEB C
stringEEC I
>EEI J
(EEJ K
)EEK L
;EEL M
dataDictionaryFF 
.FF 
AddFF 
(FF 
$numFF 
,FF 
dataFF "
)FF" #
;FF# $
dataDictionaryGG 
.GG 
AddGG 
(GG 
$numGG 
,GG 
dataGG "
)GG" #
;GG# $
dataDictionaryHH 
.HH 
AddHH 
(HH 
$numHH 
,HH 
dataHH "
)HH" #
;HH# $K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_74bII G
.IIG H
GoodB2GSinkIIH S
(IIS T
dataDictionaryIIT b
)IId e
;IIe f
}JJ 
}LL 
}MM Ì
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_74b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_74b E
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
string. 4
>4 5
dataDictionary6 D
)E F
{ 
string 
data 
= 
dataDictionary $
[$ %
$num% &
]& '
;' (
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. #
(..# $

Dictionary..$ .
<... /
int../ 2
,..2 3
string..3 9
>..9 :
dataDictionary..; I
)..J K
{// 
string00 
data00 
=00 
dataDictionary00 $
[00$ %
$num00% &
]00& '
;00' (
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

Dictionary==# -
<==- .
int==. 1
,==1 2
string==2 8
>==8 9
dataDictionary==: H
)==I J
{>> 
string?? 
data?? 
=?? 
dataDictionary?? $
[??$ %
$num??% &
]??& '
;??' (
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ª0
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_75a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_75a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data$$ 
=$$ 
Environment$$ 
.$$ "
GetEnvironmentVariable$$ 1
($$1 2
$str$$2 7
)$$7 8
;$$8 9
byte&& 
[&& 
]&& 
dataSerialized&& 
=&& 
null&&  $
;&&$ %
try'' 
{(( 	
BinaryFormatter)) 
bf)) 
=))  
new))! $
BinaryFormatter))% 4
())4 5
)))5 6
;))6 7
using** 
(** 
var** 
ms** 
=** 
new** 
MemoryStream**  ,
(**, -
)**- .
)**. /
{++ 
bf,, 
.,, 
	Serialize,, 
(,, 
ms,, 
,,,  
data,,! %
),,% &
;,,& '
dataSerialized-- 
=--  
ms--! #
.--# $
ToArray--$ +
(--+ ,
)--, -
;--- .
}.. K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_75b// K
.//K L
BadSink//L S
(//S T
dataSerialized//T b
)//d e
;//e f
}00 	
catch11 
(11 "
SerializationException11 %
exceptSerialize11& 5
)115 6
{22 	
IO33 
.33 
Logger33 
.33 
Log33 
(33 
NLog33 
.33 
LogLevel33 '
.33' (
Warn33( ,
,33, -
$str33. X
,33X Y
exceptSerialize33Z i
)33i j
;33j k
}44 	
}55 
public88 

override88 
void88 
Good88 
(88 
)88 
{99 
GoodG2B:: 
(:: 
):: 
;:: 
GoodB2G;; 
(;; 
);; 
;;; 
}<< 
private?? 
static?? 
void?? 
GoodG2B?? 
(??  
)??  !
{@@ 
stringAA 
dataAA 
;AA 
dataDD 
=DD 
EnvironmentDD 
.DD "
GetEnvironmentVariableDD 1
(DD1 2
$strDD2 7
)DD7 8
;DD8 9
byteFF 
[FF 
]FF 
dataSerializedFF 
=FF 
nullFF  $
;FF$ %
tryGG 
{HH 	
BinaryFormatterII 
bfII 
=II  
newII! $
BinaryFormatterII% 4
(II4 5
)II5 6
;II6 7
usingJJ 
(JJ 
varJJ 
msJJ 
=JJ 
newJJ 
MemoryStreamJJ  ,
(JJ, -
)JJ- .
)JJ. /
{KK 
bfLL 
.LL 
	SerializeLL 
(LL 
msLL 
,LL  
dataLL! %
)LL% &
;LL& '
dataSerializedMM 
=MM  
msMM! #
.MM# $
ToArrayMM$ +
(MM+ ,
)MM, -
;MM- .
}NN K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_75bOO K
.OOK L
GoodG2BSinkOOL W
(OOW X
dataSerializedOOX f
)OOh i
;OOi j
}PP 	
catchQQ 
(QQ "
SerializationExceptionQQ %
exceptSerializeQQ& 5
)QQ5 6
{RR 	
IOSS 
.SS 
LoggerSS 
.SS 
LogSS 
(SS 
NLogSS 
.SS 
LogLevelSS '
.SS' (
WarnSS( ,
,SS, -
$strSS. X
,SSX Y
exceptSerializeSSZ i
)SSi j
;SSj k
}TT 	
}UU 
privateXX 
staticXX 
voidXX 
GoodB2GXX 
(XX  
)XX  !
{YY 
stringZZ 
dataZZ 
;ZZ 
data]] 
=]] 
Environment]] 
.]] "
GetEnvironmentVariable]] 1
(]]1 2
$str]]2 7
)]]7 8
;]]8 9
byte__ 
[__ 
]__ 
dataSerialized__ 
=__ 
null__  $
;__$ %
try`` 
{aa 	
BinaryFormatterbb 
bfbb 
=bb  
newbb! $
BinaryFormatterbb% 4
(bb4 5
)bb5 6
;bb6 7
usingcc 
(cc 
varcc 
mscc 
=cc 
newcc 
MemoryStreamcc  ,
(cc, -
)cc- .
)cc. /
{dd 
bfee 
.ee 
	Serializeee 
(ee 
msee 
,ee  
dataee! %
)ee% &
;ee& '
dataSerializedff 
=ff  
msff! #
.ff# $
ToArrayff$ +
(ff+ ,
)ff, -
;ff- .
}gg K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_75bhh K
.hhK L
GoodB2GSinkhhL W
(hhW X
dataSerializedhhX f
)hhh i
;hhi j
}ii 	
catchjj 
(jj "
SerializationExceptionjj %
exceptSerializejj& 5
)jj5 6
{kk 	
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll 
.ll 
LogLevelll '
.ll' (
Warnll( ,
,ll, -
$strll. X
,llX Y
exceptSerializellZ i
)lli j
;llj k
}mm 	
}nn 
}pp 
}qq è<
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_75b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_75b E
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
string## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
string)) 
))) 
binForm)) &
.))& '
Deserialize))' 2
())2 3
	memStream))3 <
)))< =
;))= >
}** 
try++ 
{,, 
int-- 
value-- 
=-- 
int-- 
.--  
Parse--  %
(--% &
data--& *
)--* +
;--+ ,
}.. 
catch// 
(// 
FormatException// "
exceptNumberFormat//# 5
)//5 6
{00 
IO22 
.22 
Logger22 
.22 
Log22 
(22 
NLog22 "
.22" #
LogLevel22# +
.22+ ,
Warn22, 0
,220 1
exceptNumberFormat222 D
,22D E
$str22F `
+22a b
data22c g
)22g h
;22h i
}33 
}44 	
catch55 
(55 "
SerializationException55 %
exceptSerialize55& 5
)555 6
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. Y
,77Y Z
exceptSerialize77[ j
)77j k
;77k l
}88 	
}99 
public>> 

static>> 
void>> 
GoodG2BSink>> "
(>>" #
byte>># '
[>>' (
]>>( )
dataSerialized>>* 8
)>>9 :
{?? 
try@@ 
{AA 	
stringBB 
dataBB 
;BB 
varCC 
binFormCC 
=CC 
newCC 
BinaryFormatterCC -
(CC- .
)CC. /
;CC/ 0
usingDD 
(DD 
varDD 
	memStreamDD  
=DD! "
newDD# &
MemoryStreamDD' 3
(DD3 4
)DD4 5
)DD5 6
{EE 
	memStreamFF 
.FF 
WriteFF 
(FF  
dataSerializedFF  .
,FF. /
$numFF0 1
,FF1 2
dataSerializedFF3 A
.FFA B
LengthFFB H
)FFH I
;FFI J
	memStreamGG 
.GG 
SeekGG 
(GG 
$numGG  
,GG  !

SeekOriginGG" ,
.GG, -
BeginGG- 2
)GG2 3
;GG3 4
dataHH 
=HH 
(HH 
stringHH 
)HH 
binFormHH &
.HH& '
DeserializeHH' 2
(HH2 3
	memStreamHH3 <
)HH< =
;HH= >
}II 
tryJJ 
{KK 
intLL 
valueLL 
=LL 
intLL 
.LL  
ParseLL  %
(LL% &
dataLL& *
)LL* +
;LL+ ,
}MM 
catchNN 
(NN 
FormatExceptionNN "
exceptNumberFormatNN# 5
)NN5 6
{OO 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptNumberFormatQQ2 D
,QQD E
$strQQF `
+QQa b
dataQQc g
)QQg h
;QQh i
}RR 
}SS 	
catchTT 
(TT "
SerializationExceptionTT %
exceptSerializeTT& 5
)TT5 6
{UU 	
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV 
.VV 
LogLevelVV '
.VV' (
WarnVV( ,
,VV, -
$strVV. Y
,VVY Z
exceptSerializeVV[ j
)VVj k
;VVk l
}WW 	
}XX 
public[[ 

static[[ 
void[[ 
GoodB2GSink[[ "
([[" #
byte[[# '
[[[' (
][[( )
dataSerialized[[* 8
)[[9 :
{\\ 
try]] 
{^^ 	
string__ 
data__ 
;__ 
var`` 
binForm`` 
=`` 
new`` 
BinaryFormatter`` -
(``- .
)``. /
;``/ 0
usingaa 
(aa 
varaa 
	memStreamaa  
=aa! "
newaa# &
MemoryStreamaa' 3
(aa3 4
)aa4 5
)aa5 6
{bb 
	memStreamcc 
.cc 
Writecc 
(cc  
dataSerializedcc  .
,cc. /
$numcc0 1
,cc1 2
dataSerializedcc3 A
.ccA B
LengthccB H
)ccH I
;ccI J
	memStreamdd 
.dd 
Seekdd 
(dd 
$numdd  
,dd  !

SeekOrigindd" ,
.dd, -
Begindd- 2
)dd2 3
;dd3 4
dataee 
=ee 
(ee 
stringee 
)ee 
binFormee &
.ee& '
Deserializeee' 2
(ee2 3
	memStreamee3 <
)ee< =
;ee= >
}ff 
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF j
+nnk l
exceptNumberFormatnnm 
)	nn 
;
nn 
}oo 
}pp 	
catchqq 
(qq "
SerializationExceptionqq %
exceptSerializeqq& 5
)qq5 6
{rr 	
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss 
.ss 
LogLevelss '
.ss' (
Warnss( ,
,ss, -
$strss. Y
,ssY Z
exceptSerializess[ j
)ssj k
;ssk l
}tt 	
}uu 
}ww 
}xx â
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_81a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_81a E
:F G
AbstractTestCaseH X
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data!! 
=!! 
Environment!! 
.!! "
GetEnvironmentVariable!! 1
(!!1 2
$str!!2 7
)!!7 8
;!!8 9O
CCWE117_Improper_Output_Neutralization_for_Logs__Environment_81_base"" K

baseObject""L V
=""W X
new""Y \O
BCWE117_Improper_Output_Neutralization_for_Logs__Environment_81_bad	""] 
(
""  
)
""  ¡
;
""¡ ¢

baseObject## 
.## 
Action## 
(## 
data## 
)##  
;##  !
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
)'' 
{(( 
GoodG2B)) 
()) 
))) 
;)) 
GoodB2G** 
(** 
)** 
;** 
}++ 
private.. 
void.. 
GoodG2B.. 
(.. 
).. 
{// 
string00 
data00 
;00 
data22 
=22 
$str22 
;22 O
CCWE117_Improper_Output_Neutralization_for_Logs__Environment_81_base33 K

baseObject33L V
=33W X
new33Y \S
FCWE117_Improper_Output_Neutralization_for_Logs__Environment_81_goodG2B	33] £
(
33£ ¤
)
33¤ ¥
;
33¥ ¦

baseObject44 
.44 
Action44 
(44 
data44 
)44  
;44  !
}55 
private88 
void88 
GoodB2G88 
(88 
)88 
{99 
string:: 
data:: 
;:: 
data== 
=== 
Environment== 
.== "
GetEnvironmentVariable== 1
(==1 2
$str==2 7
)==7 8
;==8 9O
CCWE117_Improper_Output_Neutralization_for_Logs__Environment_81_base>> K

baseObject>>L V
=>>W X
new>>Y \S
FCWE117_Improper_Output_Neutralization_for_Logs__Environment_81_goodB2G	>>] £
(
>>£ ¤
)
>>¤ ¥
;
>>¥ ¦

baseObject?? 
.?? 
Action?? 
(?? 
data?? 
)??  
;??  !
}@@ 
}BB 
}CC 
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_81_bad.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Environment_81_bad H
:I JP
CCWE117_Improper_Output_Neutralization_for_Logs__Environment_81_base	K 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
}(( 
})) 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_81_base.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
abstract 
class	 O
CCWE117_Improper_Output_Neutralization_for_Logs__Environment_81_base R
{ 
public 

abstract 
void 
Action 
(  
string  &
data' +
), -
;- .
} 
} °
ÓC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_81_goodB2G.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class R
FCWE117_Improper_Output_Neutralization_for_Logs__Environment_81_goodB2G L
:M NP
CCWE117_Improper_Output_Neutralization_for_Logs__Environment_81_base	O 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B f
+&&g h
exceptNumberFormat&&i {
)&&{ |
;&&| }
}'' 	
}(( 
})) 
}** ¢
ÓC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Environment_81_goodG2B.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class R
FCWE117_Improper_Output_Neutralization_for_Logs__Environment_81_goodG2B L
:M NP
CCWE117_Improper_Output_Neutralization_for_Logs__Environment_81_base	O 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
})) 
}** )
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_01.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_01 =
:> ?
AbstractTestCase@ P
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try## 
{$$ 
using&& 
(&& 
StreamReader&& #
sr&&$ &
=&&' (
new&&) ,
StreamReader&&- 9
(&&9 :
$str&&: D
)&&D E
)&&E F
{'' 
data++ 
=++ 
sr++ 
.++ 
ReadLine++ &
(++& '
)++' (
;++( )
},, 
}-- 
catch.. 
(.. 
IOException.. 
exceptIO.. '
)..' (
{// 
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 "
.00" #
LogLevel00# +
.00+ ,
Warn00, 0
,000 1
exceptIO002 :
,00: ;
$str00< W
)00W X
;00X Y
}11 
}22 	
try33 
{44 	
int55 
value55 
=55 
int55 
.55 
Parse55 !
(55! "
data55" &
)55& '
;55' (
}66 	
catch77 
(77 
FormatException77 
exceptNumberFormat77 1
)771 2
{88 	
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: 
.:: 
LogLevel:: '
.::' (
Warn::( ,
,::, -
exceptNumberFormat::. @
,::@ A
$str::B \
+::] ^
data::_ c
)::c d
;::d e
};; 	
}<< 
public?? 

override?? 
void?? 
Good?? 
(?? 
)?? 
{@@ 
GoodG2BAA 
(AA 
)AA 
;AA 
GoodB2GBB 
(BB 
)BB 
;BB 
}CC 
privateFF 
voidFF 
GoodG2BFF 
(FF 
)FF 
{GG 
stringHH 
dataHH 
;HH 
dataJJ 
=JJ 
$strJJ 
;JJ 
tryKK 
{LL 	
intMM 
valueMM 
=MM 
intMM 
.MM 
ParseMM !
(MM! "
dataMM" &
)MM& '
;MM' (
}NN 	
catchOO 
(OO 
FormatExceptionOO 
exceptNumberFormatOO 1
)OO1 2
{PP 	
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR 
.RR 
LogLevelRR '
.RR' (
WarnRR( ,
,RR, -
exceptNumberFormatRR. @
,RR@ A
$strRRB \
+RR] ^
dataRR_ c
)RRc d
;RRd e
}SS 	
}TT 
privateWW 
voidWW 
GoodB2GWW 
(WW 
)WW 
{XX 
stringYY 
dataYY 
;YY 
dataZZ 
=ZZ 
$strZZ 
;ZZ 
{[[ 	
try\\ 
{]] 
using__ 
(__ 
StreamReader__ #
sr__$ &
=__' (
new__) ,
StreamReader__- 9
(__9 :
$str__: D
)__D E
)__E F
{`` 
datadd 
=dd 
srdd 
.dd 
ReadLinedd &
(dd& '
)dd' (
;dd( )
}ee 
}ff 
catchgg 
(gg 
IOExceptiongg 
exceptIOgg '
)gg' (
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptIOii2 :
,ii: ;
$strii< W
)iiW X
;iiX Y
}jj 
}kk 	
tryll 
{mm 	
intnn 
valuenn 
=nn 
intnn 
.nn 
Parsenn !
(nn! "
datann" &
)nn& '
;nn' (
}oo 	
catchpp 
(pp 
FormatExceptionpp 
exceptNumberFormatpp 1
)pp1 2
{qq 	
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss 
.ss 
LogLevelss '
.ss' (
Warnss( ,
,ss, -
exceptNumberFormatss. @
,ss@ A
$strssB f
+ssg h
exceptNumberFormatssi {
)ss{ |
;ss| }
}tt 	
}uu 
}ww 
}xx Q
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_02.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_02 =
:> ?
AbstractTestCase@ P
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
true!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try%% 
{&& 
using(( 
((( 
StreamReader(( '
sr((( *
=((+ ,
new((- 0
StreamReader((1 =
(((= >
$str((> H
)((H I
)((I J
{)) 
data-- 
=-- 
sr-- !
.--! "
ReadLine--" *
(--* +
)--+ ,
;--, -
}.. 
}// 
catch00 
(00 
IOException00 "
exceptIO00# +
)00+ ,
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptIO226 >
,22> ?
$str22@ [
)22[ \
;22\ ]
}33 
}44 
}55 	
else66 
{77 	
data:: 
=:: 
null:: 
;:: 
};; 	
if<< 

(<< 
true<< 
)<< 
{== 	
try>> 
{?? 
int@@ 
value@@ 
=@@ 
int@@ 
.@@  
Parse@@  %
(@@% &
data@@& *
)@@* +
;@@+ ,
}AA 
catchBB 
(BB 
FormatExceptionBB "
exceptNumberFormatBB# 5
)BB5 6
{CC 
IOEE 
.EE 
LoggerEE 
.EE 
LogEE 
(EE 
NLogEE "
.EE" #
LogLevelEE# +
.EE+ ,
WarnEE, 0
,EE0 1
exceptNumberFormatEE2 D
,EED E
$strEEF `
+EEa b
dataEEc g
)EEg h
;EEh i
}FF 
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
stringNN 
dataNN 
;NN 
ifOO 

(OO 
falseOO 
)OO 
{PP 	
dataSS 
=SS 
nullSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$strXX 
;XX 
}YY 	
ifZZ 

(ZZ 
trueZZ 
)ZZ 
{[[ 	
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
}ee 	
}ff 
privateii 
voidii 
GoodG2B2ii 
(ii 
)ii 
{jj 
stringkk 
datakk 
;kk 
ifll 

(ll 
truell 
)ll 
{mm 	
dataoo 
=oo 
$stroo 
;oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
ifww 

(ww 
trueww 
)ww 
{xx 	
tryyy 
{zz 
int{{ 
value{{ 
={{ 
int{{ 
.{{  
Parse{{  %
({{% &
data{{& *
){{* +
;{{+ ,
}|| 
catch}} 
(}} 
FormatException}} "
exceptNumberFormat}}# 5
)}}5 6
{~~ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
true
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
$str
> H
)
H I
)
I J
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
¢¢ 
=
¢¢ 
null
¢¢ 
;
¢¢ 
}
££ 	
if
¤¤ 

(
¤¤ 
false
¤¤ 
)
¤¤ 
{
¥¥ 	
IO
§§ 
.
§§ 
	WriteLine
§§ 
(
§§ 
$str
§§ /
)
§§/ 0
;
§§0 1
}
¨¨ 	
else
©© 
{
ªª 	
try
«« 
{
¬¬ 
int
­­ 
value
­­ 
=
­­ 
int
­­ 
.
­­  
Parse
­­  %
(
­­% &
data
­­& *
)
­­* +
;
­­+ ,
}
®® 
catch
¯¯ 
(
¯¯ 
FormatException
¯¯ " 
exceptNumberFormat
¯¯# 5
)
¯¯5 6
{
°° 
IO
²² 
.
²² 
Logger
²² 
.
²² 
Log
²² 
(
²² 
NLog
²² "
.
²²" #
LogLevel
²²# +
.
²²+ ,
Warn
²², 0
,
²²0 1 
exceptNumberFormat
²²2 D
,
²²D E
$str
²²F j
+
²²k l 
exceptNumberFormat
²²m 
)²² 
;²² 
}
³³ 
}
´´ 	
}
µµ 
private
¸¸ 
void
¸¸ 
GoodB2G2
¸¸ 
(
¸¸ 
)
¸¸ 
{
¹¹ 
string
ºº 
data
ºº 
;
ºº 
if
»» 

(
»» 
true
»» 
)
»» 
{
¼¼ 	
data
½½ 
=
½½ 
$str
½½ 
;
½½ 
{
¾¾ 
try
¿¿ 
{
ÀÀ 
using
ÂÂ 
(
ÂÂ 
StreamReader
ÂÂ '
sr
ÂÂ( *
=
ÂÂ+ ,
new
ÂÂ- 0
StreamReader
ÂÂ1 =
(
ÂÂ= >
$str
ÂÂ> H
)
ÂÂH I
)
ÂÂI J
{
ÃÃ 
data
ÇÇ 
=
ÇÇ 
sr
ÇÇ !
.
ÇÇ! "
ReadLine
ÇÇ" *
(
ÇÇ* +
)
ÇÇ+ ,
;
ÇÇ, -
}
ÈÈ 
}
ÉÉ 
catch
ÊÊ 
(
ÊÊ 
IOException
ÊÊ "
exceptIO
ÊÊ# +
)
ÊÊ+ ,
{
ËË 
IO
ÌÌ 
.
ÌÌ 
Logger
ÌÌ 
.
ÌÌ 
Log
ÌÌ !
(
ÌÌ! "
NLog
ÌÌ" &
.
ÌÌ& '
LogLevel
ÌÌ' /
.
ÌÌ/ 0
Warn
ÌÌ0 4
,
ÌÌ4 5
exceptIO
ÌÌ6 >
,
ÌÌ> ?
$str
ÌÌ@ [
)
ÌÌ[ \
;
ÌÌ\ ]
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
else
ÐÐ 
{
ÑÑ 	
data
ÔÔ 
=
ÔÔ 
null
ÔÔ 
;
ÔÔ 
}
ÕÕ 	
if
ÖÖ 

(
ÖÖ 
true
ÖÖ 
)
ÖÖ 
{
×× 	
try
ØØ 
{
ÙÙ 
int
ÚÚ 
value
ÚÚ 
=
ÚÚ 
int
ÚÚ 
.
ÚÚ  
Parse
ÚÚ  %
(
ÚÚ% &
data
ÚÚ& *
)
ÚÚ* +
;
ÚÚ+ ,
}
ÛÛ 
catch
ÜÜ 
(
ÜÜ 
FormatException
ÜÜ " 
exceptNumberFormat
ÜÜ# 5
)
ÜÜ5 6
{
ÝÝ 
IO
ßß 
.
ßß 
Logger
ßß 
.
ßß 
Log
ßß 
(
ßß 
NLog
ßß "
.
ßß" #
LogLevel
ßß# +
.
ßß+ ,
Warn
ßß, 0
,
ßß0 1 
exceptNumberFormat
ßß2 D
,
ßßD E
$str
ßßF j
+
ßßk l 
exceptNumberFormat
ßßm 
)ßß 
;ßß 
}
àà 
}
áá 	
}
ââ 
public
ää 

override
ää 
void
ää 
Good
ää 
(
ää 
)
ää 
{
åå 
GoodG2B1
ææ 
(
ææ 
)
ææ 
;
ææ 
GoodG2B2
çç 
(
çç 
)
çç 
;
çç 
GoodB2G1
èè 
(
èè 
)
èè 
;
èè 
GoodB2G2
éé 
(
éé 
)
éé 
;
éé 
}
êê 
}ìì 
}íí òS
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_03.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_03 =
:> ?
AbstractTestCase@ P
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
$num!! 
==!! 
$num!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try%% 
{&& 
using(( 
((( 
StreamReader(( '
sr((( *
=((+ ,
new((- 0
StreamReader((1 =
(((= >
$str((> H
)((H I
)((I J
{)) 
data-- 
=-- 
sr-- !
.--! "
ReadLine--" *
(--* +
)--+ ,
;--, -
}.. 
}// 
catch00 
(00 
IOException00 "
exceptIO00# +
)00+ ,
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptIO226 >
,22> ?
$str22@ [
)22[ \
;22\ ]
}33 
}44 
}55 	
else66 
{77 	
data:: 
=:: 
null:: 
;:: 
};; 	
if<< 

(<< 
$num<< 
==<< 
$num<< 
)<< 
{== 	
try>> 
{?? 
int@@ 
value@@ 
=@@ 
int@@ 
.@@  
Parse@@  %
(@@% &
data@@& *
)@@* +
;@@+ ,
}AA 
catchBB 
(BB 
FormatExceptionBB "
exceptNumberFormatBB# 5
)BB5 6
{CC 
IOEE 
.EE 
LoggerEE 
.EE 
LogEE 
(EE 
NLogEE "
.EE" #
LogLevelEE# +
.EE+ ,
WarnEE, 0
,EE0 1
exceptNumberFormatEE2 D
,EED E
$strEEF `
+EEa b
dataEEc g
)EEg h
;EEh i
}FF 
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
stringNN 
dataNN 
;NN 
ifOO 

(OO 
$numOO 
!=OO 
$numOO 
)OO 
{PP 	
dataSS 
=SS 
nullSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$strXX 
;XX 
}YY 	
ifZZ 

(ZZ 
$numZZ 
==ZZ 
$numZZ 
)ZZ 
{[[ 	
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
}ee 	
}ff 
privateii 
voidii 
GoodG2B2ii 
(ii 
)ii 
{jj 
stringkk 
datakk 
;kk 
ifll 

(ll 
$numll 
==ll 
$numll 
)ll 
{mm 	
dataoo 
=oo 
$stroo 
;oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
ifww 

(ww 
$numww 
==ww 
$numww 
)ww 
{xx 	
tryyy 
{zz 
int{{ 
value{{ 
={{ 
int{{ 
.{{  
Parse{{  %
({{% &
data{{& *
){{* +
;{{+ ,
}|| 
catch}} 
(}} 
FormatException}} "
exceptNumberFormat}}# 5
)}}5 6
{~~ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
$str
> H
)
H I
)
I J
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
¢¢ 
=
¢¢ 
null
¢¢ 
;
¢¢ 
}
££ 	
if
¤¤ 

(
¤¤ 
$num
¤¤ 
!=
¤¤ 
$num
¤¤ 
)
¤¤ 
{
¥¥ 	
IO
§§ 
.
§§ 
	WriteLine
§§ 
(
§§ 
$str
§§ /
)
§§/ 0
;
§§0 1
}
¨¨ 	
else
©© 
{
ªª 	
try
«« 
{
¬¬ 
int
­­ 
value
­­ 
=
­­ 
int
­­ 
.
­­  
Parse
­­  %
(
­­% &
data
­­& *
)
­­* +
;
­­+ ,
}
®® 
catch
¯¯ 
(
¯¯ 
FormatException
¯¯ " 
exceptNumberFormat
¯¯# 5
)
¯¯5 6
{
°° 
IO
²² 
.
²² 
Logger
²² 
.
²² 
Log
²² 
(
²² 
NLog
²² "
.
²²" #
LogLevel
²²# +
.
²²+ ,
Warn
²², 0
,
²²0 1 
exceptNumberFormat
²²2 D
,
²²D E
$str
²²F j
+
²²k l 
exceptNumberFormat
²²m 
)²² 
;²² 
}
³³ 
}
´´ 	
}
µµ 
private
¸¸ 
void
¸¸ 
GoodB2G2
¸¸ 
(
¸¸ 
)
¸¸ 
{
¹¹ 
string
ºº 
data
ºº 
;
ºº 
if
»» 

(
»» 
$num
»» 
==
»» 
$num
»» 
)
»» 
{
¼¼ 	
data
½½ 
=
½½ 
$str
½½ 
;
½½ 
{
¾¾ 
try
¿¿ 
{
ÀÀ 
using
ÂÂ 
(
ÂÂ 
StreamReader
ÂÂ '
sr
ÂÂ( *
=
ÂÂ+ ,
new
ÂÂ- 0
StreamReader
ÂÂ1 =
(
ÂÂ= >
$str
ÂÂ> H
)
ÂÂH I
)
ÂÂI J
{
ÃÃ 
data
ÇÇ 
=
ÇÇ 
sr
ÇÇ !
.
ÇÇ! "
ReadLine
ÇÇ" *
(
ÇÇ* +
)
ÇÇ+ ,
;
ÇÇ, -
}
ÈÈ 
}
ÉÉ 
catch
ÊÊ 
(
ÊÊ 
IOException
ÊÊ "
exceptIO
ÊÊ# +
)
ÊÊ+ ,
{
ËË 
IO
ÌÌ 
.
ÌÌ 
Logger
ÌÌ 
.
ÌÌ 
Log
ÌÌ !
(
ÌÌ! "
NLog
ÌÌ" &
.
ÌÌ& '
LogLevel
ÌÌ' /
.
ÌÌ/ 0
Warn
ÌÌ0 4
,
ÌÌ4 5
exceptIO
ÌÌ6 >
,
ÌÌ> ?
$str
ÌÌ@ [
)
ÌÌ[ \
;
ÌÌ\ ]
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
else
ÐÐ 
{
ÑÑ 	
data
ÔÔ 
=
ÔÔ 
null
ÔÔ 
;
ÔÔ 
}
ÕÕ 	
if
ÖÖ 

(
ÖÖ 
$num
ÖÖ 
==
ÖÖ 
$num
ÖÖ 
)
ÖÖ 
{
×× 	
try
ØØ 
{
ÙÙ 
int
ÚÚ 
value
ÚÚ 
=
ÚÚ 
int
ÚÚ 
.
ÚÚ  
Parse
ÚÚ  %
(
ÚÚ% &
data
ÚÚ& *
)
ÚÚ* +
;
ÚÚ+ ,
}
ÛÛ 
catch
ÜÜ 
(
ÜÜ 
FormatException
ÜÜ " 
exceptNumberFormat
ÜÜ# 5
)
ÜÜ5 6
{
ÝÝ 
IO
ßß 
.
ßß 
Logger
ßß 
.
ßß 
Log
ßß 
(
ßß 
NLog
ßß "
.
ßß" #
LogLevel
ßß# +
.
ßß+ ,
Warn
ßß, 0
,
ßß0 1 
exceptNumberFormat
ßß2 D
,
ßßD E
$str
ßßF j
+
ßßk l 
exceptNumberFormat
ßßm 
)ßß 
;ßß 
}
àà 
}
áá 	
}
ââ 
public
ää 

override
ää 
void
ää 
Good
ää 
(
ää 
)
ää 
{
åå 
GoodG2B1
ææ 
(
ææ 
)
ææ 
;
ææ 
GoodG2B2
çç 
(
çç 
)
çç 
;
çç 
GoodB2G1
èè 
(
èè 
)
èè 
;
èè 
GoodB2G2
éé 
(
éé 
)
éé 
;
éé 
}
êê 
}ìì 
}íí ØT
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_04.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_04 =
:> ?
AbstractTestCase@ P
{ 
private"" 
const"" 
bool"" 
PRIVATE_CONST_TRUE"" )
=""* +
true"", 0
;""0 1
private## 
const## 
bool## 
PRIVATE_CONST_FALSE## *
=##+ ,
false##- 2
;##2 3
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
string'' 
data'' 
;'' 
if(( 

((( 
PRIVATE_CONST_TRUE(( 
)(( 
{)) 	
data** 
=** 
$str** 
;** 
{++ 
try,, 
{-- 
using// 
(// 
StreamReader// '
sr//( *
=//+ ,
new//- 0
StreamReader//1 =
(//= >
$str//> H
)//H I
)//I J
{00 
data44 
=44 
sr44 !
.44! "
ReadLine44" *
(44* +
)44+ ,
;44, -
}55 
}66 
catch77 
(77 
IOException77 "
exceptIO77# +
)77+ ,
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptIO996 >
,99> ?
$str99@ [
)99[ \
;99\ ]
}:: 
};; 
}<< 	
else== 
{>> 	
dataAA 
=AA 
nullAA 
;AA 
}BB 	
ifCC 

(CC 
PRIVATE_CONST_TRUECC 
)CC 
{DD 	
tryEE 
{FF 
intGG 
valueGG 
=GG 
intGG 
.GG  
ParseGG  %
(GG% &
dataGG& *
)GG* +
;GG+ ,
}HH 
catchII 
(II 
FormatExceptionII "
exceptNumberFormatII# 5
)II5 6
{JJ 
IOLL 
.LL 
LoggerLL 
.LL 
LogLL 
(LL 
NLogLL "
.LL" #
LogLevelLL# +
.LL+ ,
WarnLL, 0
,LL0 1
exceptNumberFormatLL2 D
,LLD E
$strLLF `
+LLa b
dataLLc g
)LLg h
;LLh i
}MM 
}NN 	
}OO 
privateSS 
voidSS 
GoodG2B1SS 
(SS 
)SS 
{TT 
stringUU 
dataUU 
;UU 
ifVV 

(VV 
PRIVATE_CONST_FALSEVV 
)VV  
{WW 	
dataZZ 
=ZZ 
nullZZ 
;ZZ 
}[[ 	
else\\ 
{]] 	
data__ 
=__ 
$str__ 
;__ 
}`` 	
ifaa 

(aa 
PRIVATE_CONST_TRUEaa 
)aa 
{bb 	
trycc 
{dd 
intee 
valueee 
=ee 
intee 
.ee  
Parseee  %
(ee% &
dataee& *
)ee* +
;ee+ ,
}ff 
catchgg 
(gg 
FormatExceptiongg "
exceptNumberFormatgg# 5
)gg5 6
{hh 
IOjj 
.jj 
Loggerjj 
.jj 
Logjj 
(jj 
NLogjj "
.jj" #
LogLeveljj# +
.jj+ ,
Warnjj, 0
,jj0 1
exceptNumberFormatjj2 D
,jjD E
$strjjF `
+jja b
datajjc g
)jjg h
;jjh i
}kk 
}ll 	
}mm 
privatepp 
voidpp 
GoodG2B2pp 
(pp 
)pp 
{qq 
stringrr 
datarr 
;rr 
ifss 

(ss 
PRIVATE_CONST_TRUEss 
)ss 
{tt 	
datavv 
=vv 
$strvv 
;vv 
}ww 	
elsexx 
{yy 	
data|| 
=|| 
null|| 
;|| 
}}} 	
if~~ 

(~~ 
PRIVATE_CONST_TRUE~~ 
)~~ 
{ 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
$str
> H
)
H I
)
I J
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« !
PRIVATE_CONST_FALSE
«« 
)
««  
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ  
PRIVATE_CONST_TRUE
ÂÂ 
)
ÂÂ 
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÅÅ 
try
ÆÆ 
{
ÇÇ 
using
ÉÉ 
(
ÉÉ 
StreamReader
ÉÉ '
sr
ÉÉ( *
=
ÉÉ+ ,
new
ÉÉ- 0
StreamReader
ÉÉ1 =
(
ÉÉ= >
$str
ÉÉ> H
)
ÉÉH I
)
ÉÉI J
{
ÊÊ 
data
ÎÎ 
=
ÎÎ 
sr
ÎÎ !
.
ÎÎ! "
ReadLine
ÎÎ" *
(
ÎÎ* +
)
ÎÎ+ ,
;
ÎÎ, -
}
ÏÏ 
}
ÐÐ 
catch
ÑÑ 
(
ÑÑ 
IOException
ÑÑ "
exceptIO
ÑÑ# +
)
ÑÑ+ ,
{
ÒÒ 
IO
ÓÓ 
.
ÓÓ 
Logger
ÓÓ 
.
ÓÓ 
Log
ÓÓ !
(
ÓÓ! "
NLog
ÓÓ" &
.
ÓÓ& '
LogLevel
ÓÓ' /
.
ÓÓ/ 0
Warn
ÓÓ0 4
,
ÓÓ4 5
exceptIO
ÓÓ6 >
,
ÓÓ> ?
$str
ÓÓ@ [
)
ÓÓ[ \
;
ÓÓ\ ]
}
ÔÔ 
}
ÕÕ 
}
ÖÖ 	
else
×× 
{
ØØ 	
data
ÛÛ 
=
ÛÛ 
null
ÛÛ 
;
ÛÛ 
}
ÜÜ 	
if
ÝÝ 

(
ÝÝ  
PRIVATE_CONST_TRUE
ÝÝ 
)
ÝÝ 
{
ÞÞ 	
try
ßß 
{
àà 
int
áá 
value
áá 
=
áá 
int
áá 
.
áá  
Parse
áá  %
(
áá% &
data
áá& *
)
áá* +
;
áá+ ,
}
ââ 
catch
ãã 
(
ãã 
FormatException
ãã " 
exceptNumberFormat
ãã# 5
)
ãã5 6
{
ää 
IO
ææ 
.
ææ 
Logger
ææ 
.
ææ 
Log
ææ 
(
ææ 
NLog
ææ "
.
ææ" #
LogLevel
ææ# +
.
ææ+ ,
Warn
ææ, 0
,
ææ0 1 
exceptNumberFormat
ææ2 D
,
ææD E
$str
ææF j
+
ææk l 
exceptNumberFormat
ææm 
)ææ 
;ææ 
}
çç 
}
èè 	
}
éé 
public
ëë 

override
ëë 
void
ëë 
Good
ëë 
(
ëë 
)
ëë 
{
ìì 
GoodG2B1
íí 
(
íí 
)
íí 
;
íí 
GoodG2B2
îî 
(
îî 
)
îî 
;
îî 
GoodB2G1
ïï 
(
ïï 
)
ïï 
;
ïï 
GoodB2G2
ðð 
(
ðð 
)
ðð 
;
ðð 
}
ññ 
}óó 
}ôô ÜS
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_05.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_05 =
:> ?
AbstractTestCase@ P
{ 
private!! 
bool!! 
privateTrue!! 
=!! 
true!! #
;!!# $
private"" 
bool"" 
privateFalse"" 
="" 
false""  %
;""% &
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
string&& 
data&& 
;&& 
if'' 

('' 
privateTrue'' 
)'' 
{(( 	
data)) 
=)) 
$str)) 
;)) 
{** 
try++ 
{,, 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
$str..> H
)..H I
)..I J
{// 
data33 
=33 
sr33 !
.33! "
ReadLine33" *
(33* +
)33+ ,
;33, -
}44 
}55 
catch66 
(66 
IOException66 "
exceptIO66# +
)66+ ,
{77 
IO88 
.88 
Logger88 
.88 
Log88 !
(88! "
NLog88" &
.88& '
LogLevel88' /
.88/ 0
Warn880 4
,884 5
exceptIO886 >
,88> ?
$str88@ [
)88[ \
;88\ ]
}99 
}:: 
};; 	
else<< 
{== 	
data@@ 
=@@ 
null@@ 
;@@ 
}AA 	
ifBB 

(BB 
privateTrueBB 
)BB 
{CC 	
tryDD 
{EE 
intFF 
valueFF 
=FF 
intFF 
.FF  
ParseFF  %
(FF% &
dataFF& *
)FF* +
;FF+ ,
}GG 
catchHH 
(HH 
FormatExceptionHH "
exceptNumberFormatHH# 5
)HH5 6
{II 
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK "
.KK" #
LogLevelKK# +
.KK+ ,
WarnKK, 0
,KK0 1
exceptNumberFormatKK2 D
,KKD E
$strKKF `
+KKa b
dataKKc g
)KKg h
;KKh i
}LL 
}MM 	
}NN 
privateRR 
voidRR 
GoodG2B1RR 
(RR 
)RR 
{SS 
stringTT 
dataTT 
;TT 
ifUU 

(UU 
privateFalseUU 
)UU 
{VV 	
dataYY 
=YY 
nullYY 
;YY 
}ZZ 	
else[[ 
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
if`` 

(`` 
privateTrue`` 
)`` 
{aa 	
trybb 
{cc 
intdd 
valuedd 
=dd 
intdd 
.dd  
Parsedd  %
(dd% &
datadd& *
)dd* +
;dd+ ,
}ee 
catchff 
(ff 
FormatExceptionff "
exceptNumberFormatff# 5
)ff5 6
{gg 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptNumberFormatii2 D
,iiD E
$striiF `
+iia b
dataiic g
)iig h
;iih i
}jj 
}kk 	
}ll 
privateoo 
voidoo 
GoodG2B2oo 
(oo 
)oo 
{pp 
stringqq 
dataqq 
;qq 
ifrr 

(rr 
privateTruerr 
)rr 
{ss 	
datauu 
=uu 
$struu 
;uu 
}vv 	
elseww 
{xx 	
data{{ 
={{ 
null{{ 
;{{ 
}|| 	
if}} 

(}} 
privateTrue}} 
)}} 
{~~ 	
try 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
$str
> H
)
H I
)
I J
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
   
.
   
Logger
   
.
   
Log
   !
(
  ! "
NLog
  " &
.
  & '
LogLevel
  ' /
.
  / 0
Warn
  0 4
,
  4 5
exceptIO
  6 >
,
  > ?
$str
  @ [
)
  [ \
;
  \ ]
}
¡¡ 
}
¢¢ 
}
££ 	
else
¤¤ 
{
¥¥ 	
data
¨¨ 
=
¨¨ 
null
¨¨ 
;
¨¨ 
}
©© 	
if
ªª 

(
ªª 
privateFalse
ªª 
)
ªª 
{
«« 	
IO
­­ 
.
­­ 
	WriteLine
­­ 
(
­­ 
$str
­­ /
)
­­/ 0
;
­­0 1
}
®® 	
else
¯¯ 
{
°° 	
try
±± 
{
²² 
int
³³ 
value
³³ 
=
³³ 
int
³³ 
.
³³  
Parse
³³  %
(
³³% &
data
³³& *
)
³³* +
;
³³+ ,
}
´´ 
catch
µµ 
(
µµ 
FormatException
µµ " 
exceptNumberFormat
µµ# 5
)
µµ5 6
{
¶¶ 
IO
¸¸ 
.
¸¸ 
Logger
¸¸ 
.
¸¸ 
Log
¸¸ 
(
¸¸ 
NLog
¸¸ "
.
¸¸" #
LogLevel
¸¸# +
.
¸¸+ ,
Warn
¸¸, 0
,
¸¸0 1 
exceptNumberFormat
¸¸2 D
,
¸¸D E
$str
¸¸F j
+
¸¸k l 
exceptNumberFormat
¸¸m 
)¸¸ 
;¸¸ 
}
¹¹ 
}
ºº 	
}
»» 
private
¾¾ 
void
¾¾ 
GoodB2G2
¾¾ 
(
¾¾ 
)
¾¾ 
{
¿¿ 
string
ÀÀ 
data
ÀÀ 
;
ÀÀ 
if
ÁÁ 

(
ÁÁ 
privateTrue
ÁÁ 
)
ÁÁ 
{
ÂÂ 	
data
ÃÃ 
=
ÃÃ 
$str
ÃÃ 
;
ÃÃ 
{
ÄÄ 
try
ÅÅ 
{
ÆÆ 
using
ÈÈ 
(
ÈÈ 
StreamReader
ÈÈ '
sr
ÈÈ( *
=
ÈÈ+ ,
new
ÈÈ- 0
StreamReader
ÈÈ1 =
(
ÈÈ= >
$str
ÈÈ> H
)
ÈÈH I
)
ÈÈI J
{
ÉÉ 
data
ÍÍ 
=
ÍÍ 
sr
ÍÍ !
.
ÍÍ! "
ReadLine
ÍÍ" *
(
ÍÍ* +
)
ÍÍ+ ,
;
ÍÍ, -
}
ÎÎ 
}
ÏÏ 
catch
ÐÐ 
(
ÐÐ 
IOException
ÐÐ "
exceptIO
ÐÐ# +
)
ÐÐ+ ,
{
ÑÑ 
IO
ÒÒ 
.
ÒÒ 
Logger
ÒÒ 
.
ÒÒ 
Log
ÒÒ !
(
ÒÒ! "
NLog
ÒÒ" &
.
ÒÒ& '
LogLevel
ÒÒ' /
.
ÒÒ/ 0
Warn
ÒÒ0 4
,
ÒÒ4 5
exceptIO
ÒÒ6 >
,
ÒÒ> ?
$str
ÒÒ@ [
)
ÒÒ[ \
;
ÒÒ\ ]
}
ÓÓ 
}
ÔÔ 
}
ÕÕ 	
else
ÖÖ 
{
×× 	
data
ÚÚ 
=
ÚÚ 
null
ÚÚ 
;
ÚÚ 
}
ÛÛ 	
if
ÜÜ 

(
ÜÜ 
privateTrue
ÜÜ 
)
ÜÜ 
{
ÝÝ 	
try
ÞÞ 
{
ßß 
int
àà 
value
àà 
=
àà 
int
àà 
.
àà  
Parse
àà  %
(
àà% &
data
àà& *
)
àà* +
;
àà+ ,
}
áá 
catch
ââ 
(
ââ 
FormatException
ââ " 
exceptNumberFormat
ââ# 5
)
ââ5 6
{
ãã 
IO
åå 
.
åå 
Logger
åå 
.
åå 
Log
åå 
(
åå 
NLog
åå "
.
åå" #
LogLevel
åå# +
.
åå+ ,
Warn
åå, 0
,
åå0 1 
exceptNumberFormat
åå2 D
,
ååD E
$str
ååF j
+
ååk l 
exceptNumberFormat
ååm 
)åå 
;åå 
}
ææ 
}
çç 	
}
èè 
public
êê 

override
êê 
void
êê 
Good
êê 
(
êê 
)
êê 
{
ëë 
GoodG2B1
ìì 
(
ìì 
)
ìì 
;
ìì 
GoodG2B2
íí 
(
íí 
)
íí 
;
íí 
GoodB2G1
îî 
(
îî 
)
îî 
;
îî 
GoodB2G2
ïï 
(
ïï 
)
ïï 
;
ïï 
}
ðð 
}òò 
}óó ©V
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_06.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_06 =
:> ?
AbstractTestCase@ P
{ 
private!! 
const!! 
int!! 
PRIVATE_CONST_FIVE!! (
=!!) *
$num!!+ ,
;!!, -
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
string%% 
data%% 
;%% 
if&& 

(&& 
PRIVATE_CONST_FIVE&& 
==&&  
$num&&  !
)&&! "
{'' 	
data(( 
=(( 
$str(( 
;(( 
{)) 
try** 
{++ 
using-- 
(-- 
StreamReader-- '
sr--( *
=--+ ,
new--- 0
StreamReader--1 =
(--= >
$str--> H
)--H I
)--I J
{.. 
data22 
=22 
sr22 !
.22! "
ReadLine22" *
(22* +
)22+ ,
;22, -
}33 
}44 
catch55 
(55 
IOException55 "
exceptIO55# +
)55+ ,
{66 
IO77 
.77 
Logger77 
.77 
Log77 !
(77! "
NLog77" &
.77& '
LogLevel77' /
.77/ 0
Warn770 4
,774 5
exceptIO776 >
,77> ?
$str77@ [
)77[ \
;77\ ]
}88 
}99 
}:: 	
else;; 
{<< 	
data?? 
=?? 
null?? 
;?? 
}@@ 	
ifAA 

(AA 
PRIVATE_CONST_FIVEAA 
==AA  
$numAA  !
)AA! "
{BB 	
tryCC 
{DD 
intEE 
valueEE 
=EE 
intEE 
.EE  
ParseEE  %
(EE% &
dataEE& *
)EE* +
;EE+ ,
}FF 
catchGG 
(GG 
FormatExceptionGG "
exceptNumberFormatGG# 5
)GG5 6
{HH 
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ "
.JJ" #
LogLevelJJ# +
.JJ+ ,
WarnJJ, 0
,JJ0 1
exceptNumberFormatJJ2 D
,JJD E
$strJJF `
+JJa b
dataJJc g
)JJg h
;JJh i
}KK 
}LL 	
}MM 
privateQQ 
voidQQ 
GoodG2B1QQ 
(QQ 
)QQ 
{RR 
stringSS 
dataSS 
;SS 
ifTT 

(TT 
PRIVATE_CONST_FIVETT 
!=TT  
$numTT  !
)TT! "
{UU 	
dataXX 
=XX 
nullXX 
;XX 
}YY 	
elseZZ 
{[[ 	
data]] 
=]] 
$str]] 
;]] 
}^^ 	
if__ 

(__ 
PRIVATE_CONST_FIVE__ 
==__  
$num__  !
)__! "
{`` 	
tryaa 
{bb 
intcc 
valuecc 
=cc 
intcc 
.cc  
Parsecc  %
(cc% &
datacc& *
)cc* +
;cc+ ,
}dd 
catchee 
(ee 
FormatExceptionee "
exceptNumberFormatee# 5
)ee5 6
{ff 
IOhh 
.hh 
Loggerhh 
.hh 
Loghh 
(hh 
NLoghh "
.hh" #
LogLevelhh# +
.hh+ ,
Warnhh, 0
,hh0 1
exceptNumberFormathh2 D
,hhD E
$strhhF `
+hha b
datahhc g
)hhg h
;hhh i
}ii 
}jj 	
}kk 
privatenn 
voidnn 
GoodG2B2nn 
(nn 
)nn 
{oo 
stringpp 
datapp 
;pp 
ifqq 

(qq 
PRIVATE_CONST_FIVEqq 
==qq  
$numqq  !
)qq! "
{rr 	
datatt 
=tt 
$strtt 
;tt 
}uu 	
elsevv 
{ww 	
datazz 
=zz 
nullzz 
;zz 
}{{ 	
if|| 

(|| 
PRIVATE_CONST_FIVE|| 
==||  
$num||  !
)||! "
{}} 	
try~~ 
{ 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
$str
> H
)
H I
)
I J
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
   
}
¡¡ 
}
¢¢ 	
else
££ 
{
¤¤ 	
data
§§ 
=
§§ 
null
§§ 
;
§§ 
}
¨¨ 	
if
©© 

(
©©  
PRIVATE_CONST_FIVE
©© 
!=
©©  
$num
©©  !
)
©©! "
{
ªª 	
IO
¬¬ 
.
¬¬ 
	WriteLine
¬¬ 
(
¬¬ 
$str
¬¬ /
)
¬¬/ 0
;
¬¬0 1
}
­­ 	
else
®® 
{
¯¯ 	
try
°° 
{
±± 
int
²² 
value
²² 
=
²² 
int
²² 
.
²²  
Parse
²²  %
(
²²% &
data
²²& *
)
²²* +
;
²²+ ,
}
³³ 
catch
´´ 
(
´´ 
FormatException
´´ " 
exceptNumberFormat
´´# 5
)
´´5 6
{
µµ 
IO
·· 
.
·· 
Logger
·· 
.
·· 
Log
·· 
(
·· 
NLog
·· "
.
··" #
LogLevel
··# +
.
··+ ,
Warn
··, 0
,
··0 1 
exceptNumberFormat
··2 D
,
··D E
$str
··F j
+
··k l 
exceptNumberFormat
··m 
)·· 
;·· 
}
¸¸ 
}
¹¹ 	
}
ºº 
private
½½ 
void
½½ 
GoodB2G2
½½ 
(
½½ 
)
½½ 
{
¾¾ 
string
¿¿ 
data
¿¿ 
;
¿¿ 
if
ÀÀ 

(
ÀÀ  
PRIVATE_CONST_FIVE
ÀÀ 
==
ÀÀ  
$num
ÀÀ  !
)
ÀÀ! "
{
ÁÁ 	
data
ÂÂ 
=
ÂÂ 
$str
ÂÂ 
;
ÂÂ 
{
ÃÃ 
try
ÄÄ 
{
ÅÅ 
using
ÇÇ 
(
ÇÇ 
StreamReader
ÇÇ '
sr
ÇÇ( *
=
ÇÇ+ ,
new
ÇÇ- 0
StreamReader
ÇÇ1 =
(
ÇÇ= >
$str
ÇÇ> H
)
ÇÇH I
)
ÇÇI J
{
ÈÈ 
data
ÌÌ 
=
ÌÌ 
sr
ÌÌ !
.
ÌÌ! "
ReadLine
ÌÌ" *
(
ÌÌ* +
)
ÌÌ+ ,
;
ÌÌ, -
}
ÍÍ 
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
IOException
ÏÏ "
exceptIO
ÏÏ# +
)
ÏÏ+ ,
{
ÐÐ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ 
.
ÑÑ 
Log
ÑÑ !
(
ÑÑ! "
NLog
ÑÑ" &
.
ÑÑ& '
LogLevel
ÑÑ' /
.
ÑÑ/ 0
Warn
ÑÑ0 4
,
ÑÑ4 5
exceptIO
ÑÑ6 >
,
ÑÑ> ?
$str
ÑÑ@ [
)
ÑÑ[ \
;
ÑÑ\ ]
}
ÒÒ 
}
ÓÓ 
}
ÔÔ 	
else
ÕÕ 
{
ÖÖ 	
data
ÙÙ 
=
ÙÙ 
null
ÙÙ 
;
ÙÙ 
}
ÚÚ 	
if
ÛÛ 

(
ÛÛ  
PRIVATE_CONST_FIVE
ÛÛ 
==
ÛÛ  
$num
ÛÛ  !
)
ÛÛ! "
{
ÜÜ 	
try
ÝÝ 
{
ÞÞ 
int
ßß 
value
ßß 
=
ßß 
int
ßß 
.
ßß  
Parse
ßß  %
(
ßß% &
data
ßß& *
)
ßß* +
;
ßß+ ,
}
àà 
catch
áá 
(
áá 
FormatException
áá " 
exceptNumberFormat
áá# 5
)
áá5 6
{
ââ 
IO
ää 
.
ää 
Logger
ää 
.
ää 
Log
ää 
(
ää 
NLog
ää "
.
ää" #
LogLevel
ää# +
.
ää+ ,
Warn
ää, 0
,
ää0 1 
exceptNumberFormat
ää2 D
,
ääD E
$str
ääF j
+
ääk l 
exceptNumberFormat
ääm 
)ää 
;ää 
}
åå 
}
ææ 	
}
çç 
public
éé 

override
éé 
void
éé 
Good
éé 
(
éé 
)
éé 
{
êê 
GoodG2B1
ëë 
(
ëë 
)
ëë 
;
ëë 
GoodG2B2
ìì 
(
ìì 
)
ìì 
;
ìì 
GoodB2G1
íí 
(
íí 
)
íí 
;
íí 
GoodB2G2
îî 
(
îî 
)
îî 
;
îî 
}
ïï 
}ññ 
}òò ÉU
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_07.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_07 =
:> ?
AbstractTestCase@ P
{ 
private!! 
int!! 
privateFive!! 
=!! 
$num!! 
;!!  
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
string%% 
data%% 
;%% 
if&& 

(&& 
privateFive&& 
==&& 
$num&& 
)&& 
{'' 	
data(( 
=(( 
$str(( 
;(( 
{)) 
try** 
{++ 
using-- 
(-- 
StreamReader-- '
sr--( *
=--+ ,
new--- 0
StreamReader--1 =
(--= >
$str--> H
)--H I
)--I J
{.. 
data22 
=22 
sr22 !
.22! "
ReadLine22" *
(22* +
)22+ ,
;22, -
}33 
}44 
catch55 
(55 
IOException55 "
exceptIO55# +
)55+ ,
{66 
IO77 
.77 
Logger77 
.77 
Log77 !
(77! "
NLog77" &
.77& '
LogLevel77' /
.77/ 0
Warn770 4
,774 5
exceptIO776 >
,77> ?
$str77@ [
)77[ \
;77\ ]
}88 
}99 
}:: 	
else;; 
{<< 	
data?? 
=?? 
null?? 
;?? 
}@@ 	
ifAA 

(AA 
privateFiveAA 
==AA 
$numAA 
)AA 
{BB 	
tryCC 
{DD 
intEE 
valueEE 
=EE 
intEE 
.EE  
ParseEE  %
(EE% &
dataEE& *
)EE* +
;EE+ ,
}FF 
catchGG 
(GG 
FormatExceptionGG "
exceptNumberFormatGG# 5
)GG5 6
{HH 
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ "
.JJ" #
LogLevelJJ# +
.JJ+ ,
WarnJJ, 0
,JJ0 1
exceptNumberFormatJJ2 D
,JJD E
$strJJF `
+JJa b
dataJJc g
)JJg h
;JJh i
}KK 
}LL 	
}MM 
privateQQ 
voidQQ 
GoodG2B1QQ 
(QQ 
)QQ 
{RR 
stringSS 
dataSS 
;SS 
ifTT 

(TT 
privateFiveTT 
!=TT 
$numTT 
)TT 
{UU 	
dataXX 
=XX 
nullXX 
;XX 
}YY 	
elseZZ 
{[[ 	
data]] 
=]] 
$str]] 
;]] 
}^^ 	
if__ 

(__ 
privateFive__ 
==__ 
$num__ 
)__ 
{`` 	
tryaa 
{bb 
intcc 
valuecc 
=cc 
intcc 
.cc  
Parsecc  %
(cc% &
datacc& *
)cc* +
;cc+ ,
}dd 
catchee 
(ee 
FormatExceptionee "
exceptNumberFormatee# 5
)ee5 6
{ff 
IOhh 
.hh 
Loggerhh 
.hh 
Loghh 
(hh 
NLoghh "
.hh" #
LogLevelhh# +
.hh+ ,
Warnhh, 0
,hh0 1
exceptNumberFormathh2 D
,hhD E
$strhhF `
+hha b
datahhc g
)hhg h
;hhh i
}ii 
}jj 	
}kk 
privatenn 
voidnn 
GoodG2B2nn 
(nn 
)nn 
{oo 
stringpp 
datapp 
;pp 
ifqq 

(qq 
privateFiveqq 
==qq 
$numqq 
)qq 
{rr 	
datatt 
=tt 
$strtt 
;tt 
}uu 	
elsevv 
{ww 	
datazz 
=zz 
nullzz 
;zz 
}{{ 	
if|| 

(|| 
privateFive|| 
==|| 
$num|| 
)|| 
{}} 	
try~~ 
{ 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
$str
> H
)
H I
)
I J
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
   
}
¡¡ 
}
¢¢ 	
else
££ 
{
¤¤ 	
data
§§ 
=
§§ 
null
§§ 
;
§§ 
}
¨¨ 	
if
©© 

(
©© 
privateFive
©© 
!=
©© 
$num
©© 
)
©© 
{
ªª 	
IO
¬¬ 
.
¬¬ 
	WriteLine
¬¬ 
(
¬¬ 
$str
¬¬ /
)
¬¬/ 0
;
¬¬0 1
}
­­ 	
else
®® 
{
¯¯ 	
try
°° 
{
±± 
int
²² 
value
²² 
=
²² 
int
²² 
.
²²  
Parse
²²  %
(
²²% &
data
²²& *
)
²²* +
;
²²+ ,
}
³³ 
catch
´´ 
(
´´ 
FormatException
´´ " 
exceptNumberFormat
´´# 5
)
´´5 6
{
µµ 
IO
·· 
.
·· 
Logger
·· 
.
·· 
Log
·· 
(
·· 
NLog
·· "
.
··" #
LogLevel
··# +
.
··+ ,
Warn
··, 0
,
··0 1 
exceptNumberFormat
··2 D
,
··D E
$str
··F j
+
··k l 
exceptNumberFormat
··m 
)·· 
;·· 
}
¸¸ 
}
¹¹ 	
}
ºº 
private
½½ 
void
½½ 
GoodB2G2
½½ 
(
½½ 
)
½½ 
{
¾¾ 
string
¿¿ 
data
¿¿ 
;
¿¿ 
if
ÀÀ 

(
ÀÀ 
privateFive
ÀÀ 
==
ÀÀ 
$num
ÀÀ 
)
ÀÀ 
{
ÁÁ 	
data
ÂÂ 
=
ÂÂ 
$str
ÂÂ 
;
ÂÂ 
{
ÃÃ 
try
ÄÄ 
{
ÅÅ 
using
ÇÇ 
(
ÇÇ 
StreamReader
ÇÇ '
sr
ÇÇ( *
=
ÇÇ+ ,
new
ÇÇ- 0
StreamReader
ÇÇ1 =
(
ÇÇ= >
$str
ÇÇ> H
)
ÇÇH I
)
ÇÇI J
{
ÈÈ 
data
ÌÌ 
=
ÌÌ 
sr
ÌÌ !
.
ÌÌ! "
ReadLine
ÌÌ" *
(
ÌÌ* +
)
ÌÌ+ ,
;
ÌÌ, -
}
ÍÍ 
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
IOException
ÏÏ "
exceptIO
ÏÏ# +
)
ÏÏ+ ,
{
ÐÐ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ 
.
ÑÑ 
Log
ÑÑ !
(
ÑÑ! "
NLog
ÑÑ" &
.
ÑÑ& '
LogLevel
ÑÑ' /
.
ÑÑ/ 0
Warn
ÑÑ0 4
,
ÑÑ4 5
exceptIO
ÑÑ6 >
,
ÑÑ> ?
$str
ÑÑ@ [
)
ÑÑ[ \
;
ÑÑ\ ]
}
ÒÒ 
}
ÓÓ 
}
ÔÔ 	
else
ÕÕ 
{
ÖÖ 	
data
ÙÙ 
=
ÙÙ 
null
ÙÙ 
;
ÙÙ 
}
ÚÚ 	
if
ÛÛ 

(
ÛÛ 
privateFive
ÛÛ 
==
ÛÛ 
$num
ÛÛ 
)
ÛÛ 
{
ÜÜ 	
try
ÝÝ 
{
ÞÞ 
int
ßß 
value
ßß 
=
ßß 
int
ßß 
.
ßß  
Parse
ßß  %
(
ßß% &
data
ßß& *
)
ßß* +
;
ßß+ ,
}
àà 
catch
áá 
(
áá 
FormatException
áá " 
exceptNumberFormat
áá# 5
)
áá5 6
{
ââ 
IO
ää 
.
ää 
Logger
ää 
.
ää 
Log
ää 
(
ää 
NLog
ää "
.
ää" #
LogLevel
ää# +
.
ää+ ,
Warn
ää, 0
,
ää0 1 
exceptNumberFormat
ää2 D
,
ääD E
$str
ääF j
+
ääk l 
exceptNumberFormat
ääm 
)ää 
;ää 
}
åå 
}
ææ 	
}
çç 
public
éé 

override
éé 
void
éé 
Good
éé 
(
éé 
)
éé 
{
êê 
GoodG2B1
ëë 
(
ëë 
)
ëë 
;
ëë 
GoodG2B2
ìì 
(
ìì 
)
ìì 
;
ìì 
GoodB2G1
íí 
(
íí 
)
íí 
;
íí 
GoodB2G2
îî 
(
îî 
)
îî 
;
îî 
}
ïï 
}ññ 
}òò °X
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_08.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_08 =
:> ?
AbstractTestCase@ P
{ 
private!! 
static!! 
bool!! 
PrivateReturnsTrue!! *
(!!* +
)!!+ ,
{"" 
return## 
true## 
;## 
}$$ 
private&& 
static&& 
bool&& 
PrivateReturnsFalse&& +
(&&+ ,
)&&, -
{'' 
return(( 
false(( 
;(( 
})) 
public++ 

override++ 
void++ 
Bad++ 
(++ 
)++ 
{,, 
string-- 
data-- 
;-- 
if.. 

(.. 
PrivateReturnsTrue.. 
(.. 
)..  
)..  !
{// 	
data00 
=00 
$str00 
;00 
{11 
try22 
{33 
using55 
(55 
StreamReader55 '
sr55( *
=55+ ,
new55- 0
StreamReader551 =
(55= >
$str55> H
)55H I
)55I J
{66 
data:: 
=:: 
sr:: !
.::! "
ReadLine::" *
(::* +
)::+ ,
;::, -
};; 
}<< 
catch== 
(== 
IOException== "
exceptIO==# +
)==+ ,
{>> 
IO?? 
.?? 
Logger?? 
.?? 
Log?? !
(??! "
NLog??" &
.??& '
LogLevel??' /
.??/ 0
Warn??0 4
,??4 5
exceptIO??6 >
,??> ?
$str??@ [
)??[ \
;??\ ]
}@@ 
}AA 
}BB 	
elseCC 
{DD 	
dataGG 
=GG 
nullGG 
;GG 
}HH 	
ifII 

(II 
PrivateReturnsTrueII 
(II 
)II  
)II  !
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateYY 
voidYY 
GoodG2B1YY 
(YY 
)YY 
{ZZ 
string[[ 
data[[ 
;[[ 
if\\ 

(\\ 
PrivateReturnsFalse\\ 
(\\  
)\\  !
)\\! "
{]] 	
data`` 
=`` 
null`` 
;`` 
}aa 	
elsebb 
{cc 	
dataee 
=ee 
$stree 
;ee 
}ff 	
ifgg 

(gg 
PrivateReturnsTruegg 
(gg 
)gg  
)gg  !
{hh 	
tryii 
{jj 
intkk 
valuekk 
=kk 
intkk 
.kk  
Parsekk  %
(kk% &
datakk& *
)kk* +
;kk+ ,
}ll 
catchmm 
(mm 
FormatExceptionmm "
exceptNumberFormatmm# 5
)mm5 6
{nn 
IOpp 
.pp 
Loggerpp 
.pp 
Logpp 
(pp 
NLogpp "
.pp" #
LogLevelpp# +
.pp+ ,
Warnpp, 0
,pp0 1
exceptNumberFormatpp2 D
,ppD E
$strppF `
+ppa b
datappc g
)ppg h
;pph i
}qq 
}rr 	
}ss 
privatevv 
voidvv 
GoodG2B2vv 
(vv 
)vv 
{ww 
stringxx 
dataxx 
;xx 
ifyy 

(yy 
PrivateReturnsTrueyy 
(yy 
)yy  
)yy  !
{zz 	
data|| 
=|| 
$str|| 
;|| 
}}} 	
else~~ 
{ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
$str
> H
)
H I
)
I J
{
 
data
¢¢ 
=
¢¢ 
sr
¢¢ !
.
¢¢! "
ReadLine
¢¢" *
(
¢¢* +
)
¢¢+ ,
;
¢¢, -
}
££ 
}
¤¤ 
catch
¥¥ 
(
¥¥ 
IOException
¥¥ "
exceptIO
¥¥# +
)
¥¥+ ,
{
¦¦ 
IO
§§ 
.
§§ 
Logger
§§ 
.
§§ 
Log
§§ !
(
§§! "
NLog
§§" &
.
§§& '
LogLevel
§§' /
.
§§/ 0
Warn
§§0 4
,
§§4 5
exceptIO
§§6 >
,
§§> ?
$str
§§@ [
)
§§[ \
;
§§\ ]
}
¨¨ 
}
©© 
}
ªª 	
else
«« 
{
¬¬ 	
data
¯¯ 
=
¯¯ 
null
¯¯ 
;
¯¯ 
}
°° 	
if
±± 

(
±± !
PrivateReturnsFalse
±± 
(
±±  
)
±±  !
)
±±! "
{
²² 	
IO
´´ 
.
´´ 
	WriteLine
´´ 
(
´´ 
$str
´´ /
)
´´/ 0
;
´´0 1
}
µµ 	
else
¶¶ 
{
·· 	
try
¸¸ 
{
¹¹ 
int
ºº 
value
ºº 
=
ºº 
int
ºº 
.
ºº  
Parse
ºº  %
(
ºº% &
data
ºº& *
)
ºº* +
;
ºº+ ,
}
»» 
catch
¼¼ 
(
¼¼ 
FormatException
¼¼ " 
exceptNumberFormat
¼¼# 5
)
¼¼5 6
{
½½ 
IO
¿¿ 
.
¿¿ 
Logger
¿¿ 
.
¿¿ 
Log
¿¿ 
(
¿¿ 
NLog
¿¿ "
.
¿¿" #
LogLevel
¿¿# +
.
¿¿+ ,
Warn
¿¿, 0
,
¿¿0 1 
exceptNumberFormat
¿¿2 D
,
¿¿D E
$str
¿¿F j
+
¿¿k l 
exceptNumberFormat
¿¿m 
)¿¿ 
;¿¿ 
}
ÀÀ 
}
ÁÁ 	
}
ÂÂ 
private
ÅÅ 
void
ÅÅ 
GoodB2G2
ÅÅ 
(
ÅÅ 
)
ÅÅ 
{
ÆÆ 
string
ÇÇ 
data
ÇÇ 
;
ÇÇ 
if
ÈÈ 

(
ÈÈ  
PrivateReturnsTrue
ÈÈ 
(
ÈÈ 
)
ÈÈ  
)
ÈÈ  !
{
ÉÉ 	
data
ÊÊ 
=
ÊÊ 
$str
ÊÊ 
;
ÊÊ 
{
ËË 
try
ÌÌ 
{
ÍÍ 
using
ÏÏ 
(
ÏÏ 
StreamReader
ÏÏ '
sr
ÏÏ( *
=
ÏÏ+ ,
new
ÏÏ- 0
StreamReader
ÏÏ1 =
(
ÏÏ= >
$str
ÏÏ> H
)
ÏÏH I
)
ÏÏI J
{
ÐÐ 
data
ÔÔ 
=
ÔÔ 
sr
ÔÔ !
.
ÔÔ! "
ReadLine
ÔÔ" *
(
ÔÔ* +
)
ÔÔ+ ,
;
ÔÔ, -
}
ÕÕ 
}
ÖÖ 
catch
×× 
(
×× 
IOException
×× "
exceptIO
××# +
)
××+ ,
{
ØØ 
IO
ÙÙ 
.
ÙÙ 
Logger
ÙÙ 
.
ÙÙ 
Log
ÙÙ !
(
ÙÙ! "
NLog
ÙÙ" &
.
ÙÙ& '
LogLevel
ÙÙ' /
.
ÙÙ/ 0
Warn
ÙÙ0 4
,
ÙÙ4 5
exceptIO
ÙÙ6 >
,
ÙÙ> ?
$str
ÙÙ@ [
)
ÙÙ[ \
;
ÙÙ\ ]
}
ÚÚ 
}
ÛÛ 
}
ÜÜ 	
else
ÝÝ 
{
ÞÞ 	
data
áá 
=
áá 
null
áá 
;
áá 
}
ââ 	
if
ãã 

(
ãã  
PrivateReturnsTrue
ãã 
(
ãã 
)
ãã  
)
ãã  !
{
ää 	
try
åå 
{
ææ 
int
çç 
value
çç 
=
çç 
int
çç 
.
çç  
Parse
çç  %
(
çç% &
data
çç& *
)
çç* +
;
çç+ ,
}
èè 
catch
éé 
(
éé 
FormatException
éé " 
exceptNumberFormat
éé# 5
)
éé5 6
{
êê 
IO
ìì 
.
ìì 
Logger
ìì 
.
ìì 
Log
ìì 
(
ìì 
NLog
ìì "
.
ìì" #
LogLevel
ìì# +
.
ìì+ ,
Warn
ìì, 0
,
ìì0 1 
exceptNumberFormat
ìì2 D
,
ììD E
$str
ììF j
+
ììk l 
exceptNumberFormat
ììm 
)ìì 
;ìì 
}
íí 
}
îî 	
}
ïï 
public
ññ 

override
ññ 
void
ññ 
Good
ññ 
(
ññ 
)
ññ 
{
òò 
GoodG2B1
óó 
(
óó 
)
óó 
;
óó 
GoodG2B2
ôô 
(
ôô 
)
ôô 
;
ôô 
GoodB2G1
õõ 
(
õõ 
)
õõ 
;
õõ 
GoodB2G2
öö 
(
öö 
)
öö 
;
öö 
}
÷÷ 
}ùù 
}úú öT
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_09.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_09 =
:> ?
AbstractTestCase@ P
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!!  
STATIC_READONLY_TRUE!! #
)!!# $
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try%% 
{&& 
using(( 
((( 
StreamReader(( '
sr((( *
=((+ ,
new((- 0
StreamReader((1 =
(((= >
$str((> H
)((H I
)((I J
{)) 
data-- 
=-- 
sr-- !
.--! "
ReadLine--" *
(--* +
)--+ ,
;--, -
}.. 
}// 
catch00 
(00 
IOException00 "
exceptIO00# +
)00+ ,
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptIO226 >
,22> ?
$str22@ [
)22[ \
;22\ ]
}33 
}44 
}55 	
else66 
{77 	
data:: 
=:: 
null:: 
;:: 
};; 	
if<< 

(<< 
IO<< 
.<<  
STATIC_READONLY_TRUE<< #
)<<# $
{== 	
try>> 
{?? 
int@@ 
value@@ 
=@@ 
int@@ 
.@@  
Parse@@  %
(@@% &
data@@& *
)@@* +
;@@+ ,
}AA 
catchBB 
(BB 
FormatExceptionBB "
exceptNumberFormatBB# 5
)BB5 6
{CC 
IOEE 
.EE 
LoggerEE 
.EE 
LogEE 
(EE 
NLogEE "
.EE" #
LogLevelEE# +
.EE+ ,
WarnEE, 0
,EE0 1
exceptNumberFormatEE2 D
,EED E
$strEEF `
+EEa b
dataEEc g
)EEg h
;EEh i
}FF 
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
stringNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO !
STATIC_READONLY_FALSEOO $
)OO$ %
{PP 	
dataSS 
=SS 
nullSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$strXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ  
STATIC_READONLY_TRUEZZ #
)ZZ# $
{[[ 	
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
}ee 	
}ff 
privateii 
voidii 
GoodG2B2ii 
(ii 
)ii 
{jj 
stringkk 
datakk 
;kk 
ifll 

(ll 
IOll 
.ll  
STATIC_READONLY_TRUEll #
)ll# $
{mm 	
dataoo 
=oo 
$stroo 
;oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
ifww 

(ww 
IOww 
.ww  
STATIC_READONLY_TRUEww #
)ww# $
{xx 	
tryyy 
{zz 
int{{ 
value{{ 
={{ 
int{{ 
.{{  
Parse{{  %
({{% &
data{{& *
){{* +
;{{+ ,
}|| 
catch}} 
(}} 
FormatException}} "
exceptNumberFormat}}# 5
)}}5 6
{~~ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
$str
> H
)
H I
)
I J
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
¢¢ 
=
¢¢ 
null
¢¢ 
;
¢¢ 
}
££ 	
if
¤¤ 

(
¤¤ 
IO
¤¤ 
.
¤¤ #
STATIC_READONLY_FALSE
¤¤ $
)
¤¤$ %
{
¥¥ 	
IO
§§ 
.
§§ 
	WriteLine
§§ 
(
§§ 
$str
§§ /
)
§§/ 0
;
§§0 1
}
¨¨ 	
else
©© 
{
ªª 	
try
«« 
{
¬¬ 
int
­­ 
value
­­ 
=
­­ 
int
­­ 
.
­­  
Parse
­­  %
(
­­% &
data
­­& *
)
­­* +
;
­­+ ,
}
®® 
catch
¯¯ 
(
¯¯ 
FormatException
¯¯ " 
exceptNumberFormat
¯¯# 5
)
¯¯5 6
{
°° 
IO
²² 
.
²² 
Logger
²² 
.
²² 
Log
²² 
(
²² 
NLog
²² "
.
²²" #
LogLevel
²²# +
.
²²+ ,
Warn
²², 0
,
²²0 1 
exceptNumberFormat
²²2 D
,
²²D E
$str
²²F j
+
²²k l 
exceptNumberFormat
²²m 
)²² 
;²² 
}
³³ 
}
´´ 	
}
µµ 
private
¸¸ 
void
¸¸ 
GoodB2G2
¸¸ 
(
¸¸ 
)
¸¸ 
{
¹¹ 
string
ºº 
data
ºº 
;
ºº 
if
»» 

(
»» 
IO
»» 
.
»» "
STATIC_READONLY_TRUE
»» #
)
»»# $
{
¼¼ 	
data
½½ 
=
½½ 
$str
½½ 
;
½½ 
{
¾¾ 
try
¿¿ 
{
ÀÀ 
using
ÂÂ 
(
ÂÂ 
StreamReader
ÂÂ '
sr
ÂÂ( *
=
ÂÂ+ ,
new
ÂÂ- 0
StreamReader
ÂÂ1 =
(
ÂÂ= >
$str
ÂÂ> H
)
ÂÂH I
)
ÂÂI J
{
ÃÃ 
data
ÇÇ 
=
ÇÇ 
sr
ÇÇ !
.
ÇÇ! "
ReadLine
ÇÇ" *
(
ÇÇ* +
)
ÇÇ+ ,
;
ÇÇ, -
}
ÈÈ 
}
ÉÉ 
catch
ÊÊ 
(
ÊÊ 
IOException
ÊÊ "
exceptIO
ÊÊ# +
)
ÊÊ+ ,
{
ËË 
IO
ÌÌ 
.
ÌÌ 
Logger
ÌÌ 
.
ÌÌ 
Log
ÌÌ !
(
ÌÌ! "
NLog
ÌÌ" &
.
ÌÌ& '
LogLevel
ÌÌ' /
.
ÌÌ/ 0
Warn
ÌÌ0 4
,
ÌÌ4 5
exceptIO
ÌÌ6 >
,
ÌÌ> ?
$str
ÌÌ@ [
)
ÌÌ[ \
;
ÌÌ\ ]
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
else
ÐÐ 
{
ÑÑ 	
data
ÔÔ 
=
ÔÔ 
null
ÔÔ 
;
ÔÔ 
}
ÕÕ 	
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ "
STATIC_READONLY_TRUE
ÖÖ #
)
ÖÖ# $
{
×× 	
try
ØØ 
{
ÙÙ 
int
ÚÚ 
value
ÚÚ 
=
ÚÚ 
int
ÚÚ 
.
ÚÚ  
Parse
ÚÚ  %
(
ÚÚ% &
data
ÚÚ& *
)
ÚÚ* +
;
ÚÚ+ ,
}
ÛÛ 
catch
ÜÜ 
(
ÜÜ 
FormatException
ÜÜ " 
exceptNumberFormat
ÜÜ# 5
)
ÜÜ5 6
{
ÝÝ 
IO
ßß 
.
ßß 
Logger
ßß 
.
ßß 
Log
ßß 
(
ßß 
NLog
ßß "
.
ßß" #
LogLevel
ßß# +
.
ßß+ ,
Warn
ßß, 0
,
ßß0 1 
exceptNumberFormat
ßß2 D
,
ßßD E
$str
ßßF j
+
ßßk l 
exceptNumberFormat
ßßm 
)ßß 
;ßß 
}
àà 
}
áá 	
}
ââ 
public
ää 

override
ää 
void
ää 
Good
ää 
(
ää 
)
ää 
{
åå 
GoodG2B1
ææ 
(
ææ 
)
ææ 
;
ææ 
GoodG2B2
çç 
(
çç 
)
çç 
;
çç 
GoodB2G1
èè 
(
èè 
)
èè 
;
èè 
GoodB2G2
éé 
(
éé 
)
éé 
;
éé 
}
êê 
}ìì 
}íí T
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_10.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_10 =
:> ?
AbstractTestCase@ P
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!! 

staticTrue!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try%% 
{&& 
using(( 
((( 
StreamReader(( '
sr((( *
=((+ ,
new((- 0
StreamReader((1 =
(((= >
$str((> H
)((H I
)((I J
{)) 
data-- 
=-- 
sr-- !
.--! "
ReadLine--" *
(--* +
)--+ ,
;--, -
}.. 
}// 
catch00 
(00 
IOException00 "
exceptIO00# +
)00+ ,
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptIO226 >
,22> ?
$str22@ [
)22[ \
;22\ ]
}33 
}44 
}55 	
else66 
{77 	
data:: 
=:: 
null:: 
;:: 
};; 	
if<< 

(<< 
IO<< 
.<< 

staticTrue<< 
)<< 
{== 	
try>> 
{?? 
int@@ 
value@@ 
=@@ 
int@@ 
.@@  
Parse@@  %
(@@% &
data@@& *
)@@* +
;@@+ ,
}AA 
catchBB 
(BB 
FormatExceptionBB "
exceptNumberFormatBB# 5
)BB5 6
{CC 
IOEE 
.EE 
LoggerEE 
.EE 
LogEE 
(EE 
NLogEE "
.EE" #
LogLevelEE# +
.EE+ ,
WarnEE, 0
,EE0 1
exceptNumberFormatEE2 D
,EED E
$strEEF `
+EEa b
dataEEc g
)EEg h
;EEh i
}FF 
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
stringNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO 
staticFalseOO 
)OO 
{PP 	
dataSS 
=SS 
nullSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$strXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ 

staticTrueZZ 
)ZZ 
{[[ 	
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
}ee 	
}ff 
privateii 
voidii 
GoodG2B2ii 
(ii 
)ii 
{jj 
stringkk 
datakk 
;kk 
ifll 

(ll 
IOll 
.ll 

staticTruell 
)ll 
{mm 	
dataoo 
=oo 
$stroo 
;oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
ifww 

(ww 
IOww 
.ww 

staticTrueww 
)ww 
{xx 	
tryyy 
{zz 
int{{ 
value{{ 
={{ 
int{{ 
.{{  
Parse{{  %
({{% &
data{{& *
){{* +
;{{+ ,
}|| 
catch}} 
(}} 
FormatException}} "
exceptNumberFormat}}# 5
)}}5 6
{~~ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
$str
> H
)
H I
)
I J
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
¢¢ 
=
¢¢ 
null
¢¢ 
;
¢¢ 
}
££ 	
if
¤¤ 

(
¤¤ 
IO
¤¤ 
.
¤¤ 
staticFalse
¤¤ 
)
¤¤ 
{
¥¥ 	
IO
§§ 
.
§§ 
	WriteLine
§§ 
(
§§ 
$str
§§ /
)
§§/ 0
;
§§0 1
}
¨¨ 	
else
©© 
{
ªª 	
try
«« 
{
¬¬ 
int
­­ 
value
­­ 
=
­­ 
int
­­ 
.
­­  
Parse
­­  %
(
­­% &
data
­­& *
)
­­* +
;
­­+ ,
}
®® 
catch
¯¯ 
(
¯¯ 
FormatException
¯¯ " 
exceptNumberFormat
¯¯# 5
)
¯¯5 6
{
°° 
IO
²² 
.
²² 
Logger
²² 
.
²² 
Log
²² 
(
²² 
NLog
²² "
.
²²" #
LogLevel
²²# +
.
²²+ ,
Warn
²², 0
,
²²0 1 
exceptNumberFormat
²²2 D
,
²²D E
$str
²²F j
+
²²k l 
exceptNumberFormat
²²m 
)²² 
;²² 
}
³³ 
}
´´ 	
}
µµ 
private
¸¸ 
void
¸¸ 
GoodB2G2
¸¸ 
(
¸¸ 
)
¸¸ 
{
¹¹ 
string
ºº 
data
ºº 
;
ºº 
if
»» 

(
»» 
IO
»» 
.
»» 

staticTrue
»» 
)
»» 
{
¼¼ 	
data
½½ 
=
½½ 
$str
½½ 
;
½½ 
{
¾¾ 
try
¿¿ 
{
ÀÀ 
using
ÂÂ 
(
ÂÂ 
StreamReader
ÂÂ '
sr
ÂÂ( *
=
ÂÂ+ ,
new
ÂÂ- 0
StreamReader
ÂÂ1 =
(
ÂÂ= >
$str
ÂÂ> H
)
ÂÂH I
)
ÂÂI J
{
ÃÃ 
data
ÇÇ 
=
ÇÇ 
sr
ÇÇ !
.
ÇÇ! "
ReadLine
ÇÇ" *
(
ÇÇ* +
)
ÇÇ+ ,
;
ÇÇ, -
}
ÈÈ 
}
ÉÉ 
catch
ÊÊ 
(
ÊÊ 
IOException
ÊÊ "
exceptIO
ÊÊ# +
)
ÊÊ+ ,
{
ËË 
IO
ÌÌ 
.
ÌÌ 
Logger
ÌÌ 
.
ÌÌ 
Log
ÌÌ !
(
ÌÌ! "
NLog
ÌÌ" &
.
ÌÌ& '
LogLevel
ÌÌ' /
.
ÌÌ/ 0
Warn
ÌÌ0 4
,
ÌÌ4 5
exceptIO
ÌÌ6 >
,
ÌÌ> ?
$str
ÌÌ@ [
)
ÌÌ[ \
;
ÌÌ\ ]
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
else
ÐÐ 
{
ÑÑ 	
data
ÔÔ 
=
ÔÔ 
null
ÔÔ 
;
ÔÔ 
}
ÕÕ 	
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ 

staticTrue
ÖÖ 
)
ÖÖ 
{
×× 	
try
ØØ 
{
ÙÙ 
int
ÚÚ 
value
ÚÚ 
=
ÚÚ 
int
ÚÚ 
.
ÚÚ  
Parse
ÚÚ  %
(
ÚÚ% &
data
ÚÚ& *
)
ÚÚ* +
;
ÚÚ+ ,
}
ÛÛ 
catch
ÜÜ 
(
ÜÜ 
FormatException
ÜÜ " 
exceptNumberFormat
ÜÜ# 5
)
ÜÜ5 6
{
ÝÝ 
IO
ßß 
.
ßß 
Logger
ßß 
.
ßß 
Log
ßß 
(
ßß 
NLog
ßß "
.
ßß" #
LogLevel
ßß# +
.
ßß+ ,
Warn
ßß, 0
,
ßß0 1 
exceptNumberFormat
ßß2 D
,
ßßD E
$str
ßßF j
+
ßßk l 
exceptNumberFormat
ßßm 
)ßß 
;ßß 
}
àà 
}
áá 	
}
ââ 
public
ää 

override
ää 
void
ää 
Good
ää 
(
ää 
)
ää 
{
åå 
GoodG2B1
ææ 
(
ææ 
)
ææ 
;
ææ 
GoodG2B2
çç 
(
çç 
)
çç 
;
çç 
GoodB2G1
èè 
(
èè 
)
èè 
;
èè 
GoodB2G2
éé 
(
éé 
)
éé 
;
éé 
}
êê 
}ìì 
}íí W
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_11.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_11 =
:> ?
AbstractTestCase@ P
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!! 
StaticReturnsTrue!!  
(!!  !
)!!! "
)!!" #
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try%% 
{&& 
using(( 
((( 
StreamReader(( '
sr((( *
=((+ ,
new((- 0
StreamReader((1 =
(((= >
$str((> H
)((H I
)((I J
{)) 
data-- 
=-- 
sr-- !
.--! "
ReadLine--" *
(--* +
)--+ ,
;--, -
}.. 
}// 
catch00 
(00 
IOException00 "
exceptIO00# +
)00+ ,
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptIO226 >
,22> ?
$str22@ [
)22[ \
;22\ ]
}33 
}44 
}55 	
else66 
{77 	
data:: 
=:: 
null:: 
;:: 
};; 	
if<< 

(<<
 
IO<< 
.<< 
StaticReturnsTrue<< 
(<<  
)<<  !
)<<! "
{== 	
try>> 
{?? 
int@@ 
value@@ 
=@@ 
int@@ 
.@@  
Parse@@  %
(@@% &
data@@& *
)@@* +
;@@+ ,
}AA 
catchBB 
(BB 
FormatExceptionBB "
exceptNumberFormatBB# 5
)BB5 6
{CC 
IOEE 
.EE 
LoggerEE 
.EE 
LogEE 
(EE 
NLogEE "
.EE" #
LogLevelEE# +
.EE+ ,
WarnEE, 0
,EE0 1
exceptNumberFormatEE2 D
,EED E
$strEEF `
+EEa b
dataEEc g
)EEg h
;EEh i
}FF 
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
stringNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO 
StaticReturnsFalseOO !
(OO! "
)OO" #
)OO# $
{PP 	
dataSS 
=SS 
nullSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$strXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ 
StaticReturnsTrueZZ  
(ZZ  !
)ZZ! "
)ZZ" #
{[[ 	
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
}ee 	
}ff 
privateii 
voidii 
GoodG2B2ii 
(ii 
)ii 
{jj 
stringkk 
datakk 
;kk 
ifll 

(ll 
IOll 
.ll 
StaticReturnsTruell  
(ll  !
)ll! "
)ll" #
{mm 	
dataoo 
=oo 
$stroo 
;oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
ifww 

(ww 
IOww 
.ww 
StaticReturnsTrueww  
(ww  !
)ww! "
)ww" #
{xx 	
tryyy 
{zz 
int{{ 
value{{ 
={{ 
int{{ 
.{{  
Parse{{  %
({{% &
data{{& *
){{* +
;{{+ ,
}|| 
catch}} 
(}} 
FormatException}} "
exceptNumberFormat}}# 5
)}}5 6
{~~ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
$str
> H
)
H I
)
I J
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
¢¢ 
=
¢¢ 
null
¢¢ 
;
¢¢ 
}
££ 	
if
¤¤ 

(
¤¤ 
IO
¤¤ 
.
¤¤  
StaticReturnsFalse
¤¤ !
(
¤¤! "
)
¤¤" #
)
¤¤# $
{
¥¥ 	
IO
§§ 
.
§§ 
	WriteLine
§§ 
(
§§ 
$str
§§ /
)
§§/ 0
;
§§0 1
}
¨¨ 	
else
©© 
{
ªª 	
try
«« 
{
¬¬ 
int
­­ 
value
­­ 
=
­­ 
int
­­ 
.
­­  
Parse
­­  %
(
­­% &
data
­­& *
)
­­* +
;
­­+ ,
}
®® 
catch
¯¯ 
(
¯¯ 
FormatException
¯¯ " 
exceptNumberFormat
¯¯# 5
)
¯¯5 6
{
°° 
IO
²² 
.
²² 
Logger
²² 
.
²² 
Log
²² 
(
²² 
NLog
²² "
.
²²" #
LogLevel
²²# +
.
²²+ ,
Warn
²², 0
,
²²0 1 
exceptNumberFormat
²²2 D
,
²²D E
$str
²²F j
+
²²k l 
exceptNumberFormat
²²m 
)²² 
;²² 
}
³³ 
}
´´ 	
}
µµ 
private
¸¸ 
void
¸¸ 
GoodB2G2
¸¸ 
(
¸¸ 
)
¸¸ 
{
¹¹ 
string
ºº 
data
ºº 
;
ºº 
if
»» 

(
»» 
IO
»» 
.
»» 
StaticReturnsTrue
»»  
(
»»  !
)
»»! "
)
»»" #
{
¼¼ 	
data
½½ 
=
½½ 
$str
½½ 
;
½½ 
{
¾¾ 
try
¿¿ 
{
ÀÀ 
using
ÂÂ 
(
ÂÂ 
StreamReader
ÂÂ '
sr
ÂÂ( *
=
ÂÂ+ ,
new
ÂÂ- 0
StreamReader
ÂÂ1 =
(
ÂÂ= >
$str
ÂÂ> H
)
ÂÂH I
)
ÂÂI J
{
ÃÃ 
data
ÇÇ 
=
ÇÇ 
sr
ÇÇ !
.
ÇÇ! "
ReadLine
ÇÇ" *
(
ÇÇ* +
)
ÇÇ+ ,
;
ÇÇ, -
}
ÈÈ 
}
ÉÉ 
catch
ÊÊ 
(
ÊÊ 
IOException
ÊÊ "
exceptIO
ÊÊ# +
)
ÊÊ+ ,
{
ËË 
IO
ÌÌ 
.
ÌÌ 
Logger
ÌÌ 
.
ÌÌ 
Log
ÌÌ !
(
ÌÌ! "
NLog
ÌÌ" &
.
ÌÌ& '
LogLevel
ÌÌ' /
.
ÌÌ/ 0
Warn
ÌÌ0 4
,
ÌÌ4 5
exceptIO
ÌÌ6 >
,
ÌÌ> ?
$str
ÌÌ@ [
)
ÌÌ[ \
;
ÌÌ\ ]
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
else
ÐÐ 
{
ÑÑ 	
data
ÔÔ 
=
ÔÔ 
null
ÔÔ 
;
ÔÔ 
}
ÕÕ 	
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ 
StaticReturnsTrue
ÖÖ  
(
ÖÖ  !
)
ÖÖ! "
)
ÖÖ" #
{
×× 	
try
ØØ 
{
ÙÙ 
int
ÚÚ 
value
ÚÚ 
=
ÚÚ 
int
ÚÚ 
.
ÚÚ  
Parse
ÚÚ  %
(
ÚÚ% &
data
ÚÚ& *
)
ÚÚ* +
;
ÚÚ+ ,
}
ÛÛ 
catch
ÜÜ 
(
ÜÜ 
FormatException
ÜÜ " 
exceptNumberFormat
ÜÜ# 5
)
ÜÜ5 6
{
ÝÝ 
IO
ßß 
.
ßß 
Logger
ßß 
.
ßß 
Log
ßß 
(
ßß 
NLog
ßß "
.
ßß" #
LogLevel
ßß# +
.
ßß+ ,
Warn
ßß, 0
,
ßß0 1 
exceptNumberFormat
ßß2 D
,
ßßD E
$str
ßßF j
+
ßßk l 
exceptNumberFormat
ßßm 
)ßß 
;ßß 
}
àà 
}
áá 	
}
ââ 
public
ää 

override
ää 
void
ää 
Good
ää 
(
ää 
)
ää 
{
åå 
GoodG2B1
ææ 
(
ææ 
)
ææ 
;
ææ 
GoodG2B2
çç 
(
çç 
)
çç 
;
çç 
GoodB2G1
èè 
(
èè 
)
èè 
;
èè 
GoodB2G2
éé 
(
éé 
)
éé 
;
éé 
}
êê 
}ìì 
}íí ×O
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_12.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_12 =
:> ?
AbstractTestCase@ P
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!!
 
IO!! 
.!! $
StaticReturnsTrueOrFalse!! &
(!!& '
)!!' (
)!!( )
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try%% 
{&& 
using(( 
((( 
StreamReader(( '
sr((( *
=((+ ,
new((- 0
StreamReader((1 =
(((= >
$str((> H
)((H I
)((I J
{)) 
data-- 
=-- 
sr-- !
.--! "
ReadLine--" *
(--* +
)--+ ,
;--, -
}.. 
}// 
catch00 
(00 
IOException00 "
exceptIO00# +
)00+ ,
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptIO226 >
,22> ?
$str22@ [
)22[ \
;22\ ]
}33 
}44 
}55 	
else66 
{77 	
data99 
=99 
$str99 
;99 
}:: 	
if;; 

(;;
 
IO;; 
.;; $
StaticReturnsTrueOrFalse;; &
(;;& '
);;' (
);;( )
{<< 	
try== 
{>> 
int?? 
value?? 
=?? 
int?? 
.??  
Parse??  %
(??% &
data??& *
)??* +
;??+ ,
}@@ 
catchAA 
(AA 
FormatExceptionAA "
exceptNumberFormatAA# 5
)AA5 6
{BB 
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD "
.DD" #
LogLevelDD# +
.DD+ ,
WarnDD, 0
,DD0 1
exceptNumberFormatDD2 D
,DDD E
$strDDF `
+DDa b
dataDDc g
)DDg h
;DDh i
}EE 
}FF 	
elseGG 
{HH 	
tryII 
{JJ 
intKK 
valueKK 
=KK 
intKK 
.KK  
ParseKK  %
(KK% &
dataKK& *
)KK* +
;KK+ ,
}LL 
catchMM 
(MM 
FormatExceptionMM "
exceptNumberFormatMM# 5
)MM5 6
{NN 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP 
(PP 
NLogPP "
.PP" #
LogLevelPP# +
.PP+ ,
WarnPP, 0
,PP0 1
exceptNumberFormatPP2 D
,PPD E
$strPPF j
+PPk l
exceptNumberFormatPPm 
)	PP 
;
PP 
}QQ 
}RR 	
}SS 
privateXX 
voidXX 
GoodG2BXX 
(XX 
)XX 
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[
 
IO[[ 
.[[ $
StaticReturnsTrueOrFalse[[ &
([[& '
)[[' (
)[[( )
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datacc 
=cc 
$strcc 
;cc 
}dd 	
ifee 

(ee
 
IOee 
.ee $
StaticReturnsTrueOrFalseee &
(ee& '
)ee' (
)ee( )
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF `
+nna b
datannc g
)nng h
;nnh i
}oo 
}pp 	
elseqq 
{rr 	
tryss 
{tt 
intuu 
valueuu 
=uu 
intuu 
.uu  
Parseuu  %
(uu% &
datauu& *
)uu* +
;uu+ ,
}vv 
catchww 
(ww 
FormatExceptionww "
exceptNumberFormatww# 5
)ww5 6
{xx 
IOzz 
.zz 
Loggerzz 
.zz 
Logzz 
(zz 
NLogzz "
.zz" #
LogLevelzz# +
.zz+ ,
Warnzz, 0
,zz0 1
exceptNumberFormatzz2 D
,zzD E
$strzzF `
+zza b
datazzc g
)zzg h
;zzh i
}{{ 
}|| 	
}}} 
private
 
void
 
GoodB2G
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(

 
IO
 
.
 &
StaticReturnsTrueOrFalse
 &
(
& '
)
' (
)
( )
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
$str
> H
)
H I
)
I J
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
   
(
   
StreamReader
   '
sr
  ( *
=
  + ,
new
  - 0
StreamReader
  1 =
(
  = >
$str
  > H
)
  H I
)
  I J
{
¡¡ 
data
¥¥ 
=
¥¥ 
sr
¥¥ !
.
¥¥! "
ReadLine
¥¥" *
(
¥¥* +
)
¥¥+ ,
;
¥¥, -
}
¦¦ 
}
§§ 
catch
¨¨ 
(
¨¨ 
IOException
¨¨ "
exceptIO
¨¨# +
)
¨¨+ ,
{
©© 
IO
ªª 
.
ªª 
Logger
ªª 
.
ªª 
Log
ªª !
(
ªª! "
NLog
ªª" &
.
ªª& '
LogLevel
ªª' /
.
ªª/ 0
Warn
ªª0 4
,
ªª4 5
exceptIO
ªª6 >
,
ªª> ?
$str
ªª@ [
)
ªª[ \
;
ªª\ ]
}
«« 
}
¬¬ 
}
­­ 	
if
®® 

(
®®
 
IO
®® 
.
®® &
StaticReturnsTrueOrFalse
®® &
(
®®& '
)
®®' (
)
®®( )
{
¯¯ 	
try
°° 
{
±± 
int
²² 
value
²² 
=
²² 
int
²² 
.
²²  
Parse
²²  %
(
²²% &
data
²²& *
)
²²* +
;
²²+ ,
}
³³ 
catch
´´ 
(
´´ 
FormatException
´´ " 
exceptNumberFormat
´´# 5
)
´´5 6
{
µµ 
IO
·· 
.
·· 
Logger
·· 
.
·· 
Log
·· 
(
·· 
NLog
·· "
.
··" #
LogLevel
··# +
.
··+ ,
Warn
··, 0
,
··0 1 
exceptNumberFormat
··2 D
,
··D E
$str
··F j
+
··k l 
exceptNumberFormat
··m 
)·· 
;·· 
}
¸¸ 
}
¹¹ 	
else
ºº 
{
»» 	
try
¼¼ 
{
½½ 
int
¾¾ 
value
¾¾ 
=
¾¾ 
int
¾¾ 
.
¾¾  
Parse
¾¾  %
(
¾¾% &
data
¾¾& *
)
¾¾* +
;
¾¾+ ,
}
¿¿ 
catch
ÀÀ 
(
ÀÀ 
FormatException
ÀÀ " 
exceptNumberFormat
ÀÀ# 5
)
ÀÀ5 6
{
ÁÁ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ 
(
ÃÃ 
NLog
ÃÃ "
.
ÃÃ" #
LogLevel
ÃÃ# +
.
ÃÃ+ ,
Warn
ÃÃ, 0
,
ÃÃ0 1 
exceptNumberFormat
ÃÃ2 D
,
ÃÃD E
$str
ÃÃF j
+
ÃÃk l 
exceptNumberFormat
ÃÃm 
)ÃÃ 
;ÃÃ 
}
ÄÄ 
}
ÅÅ 	
}
ÆÆ 
public
ÈÈ 

override
ÈÈ 
void
ÈÈ 
Good
ÈÈ 
(
ÈÈ 
)
ÈÈ 
{
ÊÊ 
GoodG2B
ËË 
(
ËË 
)
ËË 
;
ËË 
GoodB2G
ÌÌ 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
}
ÍÍ 
}ÏÏ 
}ÐÐ ØW
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_13.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_13 =
:> ?
AbstractTestCase@ P
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!!  
STATIC_READONLY_FIVE!! #
==!!# %
$num!!% &
)!!& '
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try%% 
{&& 
using(( 
((( 
StreamReader(( '
sr((( *
=((+ ,
new((- 0
StreamReader((1 =
(((= >
$str((> H
)((H I
)((I J
{)) 
data-- 
=-- 
sr-- !
.--! "
ReadLine--" *
(--* +
)--+ ,
;--, -
}.. 
}// 
catch00 
(00 
IOException00 "
exceptIO00# +
)00+ ,
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptIO226 >
,22> ?
$str22@ [
)22[ \
;22\ ]
}33 
}44 
}55 	
else66 
{77 	
data:: 
=:: 
null:: 
;:: 
};; 	
if<< 

(<< 
IO<< 
.<<  
STATIC_READONLY_FIVE<< #
==<<# %
$num<<% &
)<<& '
{== 	
try>> 
{?? 
int@@ 
value@@ 
=@@ 
int@@ 
.@@  
Parse@@  %
(@@% &
data@@& *
)@@* +
;@@+ ,
}AA 
catchBB 
(BB 
FormatExceptionBB "
exceptNumberFormatBB# 5
)BB5 6
{CC 
IOEE 
.EE 
LoggerEE 
.EE 
LogEE 
(EE 
NLogEE "
.EE" #
LogLevelEE# +
.EE+ ,
WarnEE, 0
,EE0 1
exceptNumberFormatEE2 D
,EED E
$strEEF `
+EEa b
dataEEc g
)EEg h
;EEh i
}FF 
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
stringNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO  
STATIC_READONLY_FIVEOO #
!=OO# %
$numOO% &
)OO& '
{PP 	
dataSS 
=SS 
nullSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$strXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ  
STATIC_READONLY_FIVEZZ #
==ZZ# %
$numZZ% &
)ZZ& '
{[[ 	
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
}ee 	
}ff 
privateii 
voidii 
GoodG2B2ii 
(ii 
)ii 
{jj 
stringkk 
datakk 
;kk 
ifll 

(ll 
IOll 
.ll  
STATIC_READONLY_FIVEll #
==ll# %
$numll% &
)ll& '
{mm 	
dataoo 
=oo 
$stroo 
;oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
ifww 

(ww 
IOww 
.ww  
STATIC_READONLY_FIVEww #
==ww# %
$numww% &
)ww& '
{xx 	
tryyy 
{zz 
int{{ 
value{{ 
={{ 
int{{ 
.{{  
Parse{{  %
({{% &
data{{& *
){{* +
;{{+ ,
}|| 
catch}} 
(}} 
FormatException}} "
exceptNumberFormat}}# 5
)}}5 6
{~~ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
# %
$num
% &
)
& '
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
$str
> H
)
H I
)
I J
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
¢¢ 
=
¢¢ 
null
¢¢ 
;
¢¢ 
}
££ 	
if
¤¤ 

(
¤¤ 
IO
¤¤ 
.
¤¤ "
STATIC_READONLY_FIVE
¤¤ #
!=
¤¤# %
$num
¤¤% &
)
¤¤& '
{
¥¥ 	
IO
§§ 
.
§§ 
	WriteLine
§§ 
(
§§ 
$str
§§ /
)
§§/ 0
;
§§0 1
}
¨¨ 	
else
©© 
{
ªª 	
try
«« 
{
¬¬ 
int
­­ 
value
­­ 
=
­­ 
int
­­ 
.
­­  
Parse
­­  %
(
­­% &
data
­­& *
)
­­* +
;
­­+ ,
}
®® 
catch
¯¯ 
(
¯¯ 
FormatException
¯¯ " 
exceptNumberFormat
¯¯# 5
)
¯¯5 6
{
°° 
IO
²² 
.
²² 
Logger
²² 
.
²² 
Log
²² 
(
²² 
NLog
²² "
.
²²" #
LogLevel
²²# +
.
²²+ ,
Warn
²², 0
,
²²0 1 
exceptNumberFormat
²²2 D
,
²²D E
$str
²²F j
+
²²k l 
exceptNumberFormat
²²m 
)²² 
;²² 
}
³³ 
}
´´ 	
}
µµ 
private
¸¸ 
void
¸¸ 
GoodB2G2
¸¸ 
(
¸¸ 
)
¸¸ 
{
¹¹ 
string
ºº 
data
ºº 
;
ºº 
if
»» 

(
»» 
IO
»» 
.
»» "
STATIC_READONLY_FIVE
»» #
==
»»# %
$num
»»% &
)
»»& '
{
¼¼ 	
data
½½ 
=
½½ 
$str
½½ 
;
½½ 
{
¾¾ 
try
¿¿ 
{
ÀÀ 
using
ÂÂ 
(
ÂÂ 
StreamReader
ÂÂ '
sr
ÂÂ( *
=
ÂÂ+ ,
new
ÂÂ- 0
StreamReader
ÂÂ1 =
(
ÂÂ= >
$str
ÂÂ> H
)
ÂÂH I
)
ÂÂI J
{
ÃÃ 
data
ÇÇ 
=
ÇÇ 
sr
ÇÇ !
.
ÇÇ! "
ReadLine
ÇÇ" *
(
ÇÇ* +
)
ÇÇ+ ,
;
ÇÇ, -
}
ÈÈ 
}
ÉÉ 
catch
ÊÊ 
(
ÊÊ 
IOException
ÊÊ "
exceptIO
ÊÊ# +
)
ÊÊ+ ,
{
ËË 
IO
ÌÌ 
.
ÌÌ 
Logger
ÌÌ 
.
ÌÌ 
Log
ÌÌ !
(
ÌÌ! "
NLog
ÌÌ" &
.
ÌÌ& '
LogLevel
ÌÌ' /
.
ÌÌ/ 0
Warn
ÌÌ0 4
,
ÌÌ4 5
exceptIO
ÌÌ6 >
,
ÌÌ> ?
$str
ÌÌ@ [
)
ÌÌ[ \
;
ÌÌ\ ]
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
else
ÐÐ 
{
ÑÑ 	
data
ÔÔ 
=
ÔÔ 
null
ÔÔ 
;
ÔÔ 
}
ÕÕ 	
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ "
STATIC_READONLY_FIVE
ÖÖ #
==
ÖÖ# %
$num
ÖÖ% &
)
ÖÖ& '
{
×× 	
try
ØØ 
{
ÙÙ 
int
ÚÚ 
value
ÚÚ 
=
ÚÚ 
int
ÚÚ 
.
ÚÚ  
Parse
ÚÚ  %
(
ÚÚ% &
data
ÚÚ& *
)
ÚÚ* +
;
ÚÚ+ ,
}
ÛÛ 
catch
ÜÜ 
(
ÜÜ 
FormatException
ÜÜ " 
exceptNumberFormat
ÜÜ# 5
)
ÜÜ5 6
{
ÝÝ 
IO
ßß 
.
ßß 
Logger
ßß 
.
ßß 
Log
ßß 
(
ßß 
NLog
ßß "
.
ßß" #
LogLevel
ßß# +
.
ßß+ ,
Warn
ßß, 0
,
ßß0 1 
exceptNumberFormat
ßß2 D
,
ßßD E
$str
ßßF j
+
ßßk l 
exceptNumberFormat
ßßm 
)ßß 
;ßß 
}
àà 
}
áá 	
}
ââ 
public
ää 

override
ää 
void
ää 
Good
ää 
(
ää 
)
ää 
{
åå 
GoodG2B1
ææ 
(
ææ 
)
ææ 
;
ææ 
GoodG2B2
çç 
(
çç 
)
çç 
;
çç 
GoodB2G1
èè 
(
èè 
)
èè 
;
èè 
GoodB2G2
éé 
(
éé 
)
éé 
;
éé 
}
êê 
}ìì 
}íí ôV
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_14.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_14 =
:> ?
AbstractTestCase@ P
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!! 

staticFive!! 
==!! 
$num!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try%% 
{&& 
using(( 
((( 
StreamReader(( '
sr((( *
=((+ ,
new((- 0
StreamReader((1 =
(((= >
$str((> H
)((H I
)((I J
{)) 
data-- 
=-- 
sr-- !
.--! "
ReadLine--" *
(--* +
)--+ ,
;--, -
}.. 
}// 
catch00 
(00 
IOException00 "
exceptIO00# +
)00+ ,
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptIO226 >
,22> ?
$str22@ [
)22[ \
;22\ ]
}33 
}44 
}55 	
else66 
{77 	
data:: 
=:: 
null:: 
;:: 
};; 	
if<< 

(<< 
IO<< 
.<< 

staticFive<< 
==<< 
$num<< 
)<< 
{== 	
try>> 
{?? 
int@@ 
value@@ 
=@@ 
int@@ 
.@@  
Parse@@  %
(@@% &
data@@& *
)@@* +
;@@+ ,
}AA 
catchBB 
(BB 
FormatExceptionBB "
exceptNumberFormatBB# 5
)BB5 6
{CC 
IOEE 
.EE 
LoggerEE 
.EE 
LogEE 
(EE 
NLogEE "
.EE" #
LogLevelEE# +
.EE+ ,
WarnEE, 0
,EE0 1
exceptNumberFormatEE2 D
,EED E
$strEEF `
+EEa b
dataEEc g
)EEg h
;EEh i
}FF 
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
stringNN 
dataNN 
;NN 
ifOO 

(OO 
IOOO 
.OO 

staticFiveOO 
!=OO 
$numOO 
)OO 
{PP 	
dataSS 
=SS 
nullSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$strXX 
;XX 
}YY 	
ifZZ 

(ZZ 
IOZZ 
.ZZ 

staticFiveZZ 
==ZZ 
$numZZ 
)ZZ 
{[[ 	
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
}ee 	
}ff 
privateii 
voidii 
GoodG2B2ii 
(ii 
)ii 
{jj 
stringkk 
datakk 
;kk 
ifll 

(ll 
IOll 
.ll 

staticFivell 
==ll 
$numll 
)ll 
{mm 	
dataoo 
=oo 
$stroo 
;oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
ifww 

(ww 
IOww 
.ww 

staticFiveww 
==ww 
$numww 
)ww 
{xx 	
tryyy 
{zz 
int{{ 
value{{ 
={{ 
int{{ 
.{{  
Parse{{  %
({{% &
data{{& *
){{* +
;{{+ ,
}|| 
catch}} 
(}} 
FormatException}} "
exceptNumberFormat}}# 5
)}}5 6
{~~ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
$str
> H
)
H I
)
I J
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
¢¢ 
=
¢¢ 
null
¢¢ 
;
¢¢ 
}
££ 	
if
¤¤ 

(
¤¤ 
IO
¤¤ 
.
¤¤ 

staticFive
¤¤ 
!=
¤¤ 
$num
¤¤ 
)
¤¤ 
{
¥¥ 	
IO
§§ 
.
§§ 
	WriteLine
§§ 
(
§§ 
$str
§§ /
)
§§/ 0
;
§§0 1
}
¨¨ 	
else
©© 
{
ªª 	
try
«« 
{
¬¬ 
int
­­ 
value
­­ 
=
­­ 
int
­­ 
.
­­  
Parse
­­  %
(
­­% &
data
­­& *
)
­­* +
;
­­+ ,
}
®® 
catch
¯¯ 
(
¯¯ 
FormatException
¯¯ " 
exceptNumberFormat
¯¯# 5
)
¯¯5 6
{
°° 
IO
²² 
.
²² 
Logger
²² 
.
²² 
Log
²² 
(
²² 
NLog
²² "
.
²²" #
LogLevel
²²# +
.
²²+ ,
Warn
²², 0
,
²²0 1 
exceptNumberFormat
²²2 D
,
²²D E
$str
²²F j
+
²²k l 
exceptNumberFormat
²²m 
)²² 
;²² 
}
³³ 
}
´´ 	
}
µµ 
private
¸¸ 
void
¸¸ 
GoodB2G2
¸¸ 
(
¸¸ 
)
¸¸ 
{
¹¹ 
string
ºº 
data
ºº 
;
ºº 
if
»» 

(
»» 
IO
»» 
.
»» 

staticFive
»» 
==
»» 
$num
»» 
)
»» 
{
¼¼ 	
data
½½ 
=
½½ 
$str
½½ 
;
½½ 
{
¾¾ 
try
¿¿ 
{
ÀÀ 
using
ÂÂ 
(
ÂÂ 
StreamReader
ÂÂ '
sr
ÂÂ( *
=
ÂÂ+ ,
new
ÂÂ- 0
StreamReader
ÂÂ1 =
(
ÂÂ= >
$str
ÂÂ> H
)
ÂÂH I
)
ÂÂI J
{
ÃÃ 
data
ÇÇ 
=
ÇÇ 
sr
ÇÇ !
.
ÇÇ! "
ReadLine
ÇÇ" *
(
ÇÇ* +
)
ÇÇ+ ,
;
ÇÇ, -
}
ÈÈ 
}
ÉÉ 
catch
ÊÊ 
(
ÊÊ 
IOException
ÊÊ "
exceptIO
ÊÊ# +
)
ÊÊ+ ,
{
ËË 
IO
ÌÌ 
.
ÌÌ 
Logger
ÌÌ 
.
ÌÌ 
Log
ÌÌ !
(
ÌÌ! "
NLog
ÌÌ" &
.
ÌÌ& '
LogLevel
ÌÌ' /
.
ÌÌ/ 0
Warn
ÌÌ0 4
,
ÌÌ4 5
exceptIO
ÌÌ6 >
,
ÌÌ> ?
$str
ÌÌ@ [
)
ÌÌ[ \
;
ÌÌ\ ]
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
else
ÐÐ 
{
ÑÑ 	
data
ÔÔ 
=
ÔÔ 
null
ÔÔ 
;
ÔÔ 
}
ÕÕ 	
if
ÖÖ 

(
ÖÖ 
IO
ÖÖ 
.
ÖÖ 

staticFive
ÖÖ 
==
ÖÖ 
$num
ÖÖ 
)
ÖÖ 
{
×× 	
try
ØØ 
{
ÙÙ 
int
ÚÚ 
value
ÚÚ 
=
ÚÚ 
int
ÚÚ 
.
ÚÚ  
Parse
ÚÚ  %
(
ÚÚ% &
data
ÚÚ& *
)
ÚÚ* +
;
ÚÚ+ ,
}
ÛÛ 
catch
ÜÜ 
(
ÜÜ 
FormatException
ÜÜ " 
exceptNumberFormat
ÜÜ# 5
)
ÜÜ5 6
{
ÝÝ 
IO
ßß 
.
ßß 
Logger
ßß 
.
ßß 
Log
ßß 
(
ßß 
NLog
ßß "
.
ßß" #
LogLevel
ßß# +
.
ßß+ ,
Warn
ßß, 0
,
ßß0 1 
exceptNumberFormat
ßß2 D
,
ßßD E
$str
ßßF j
+
ßßk l 
exceptNumberFormat
ßßm 
)ßß 
;ßß 
}
àà 
}
áá 	
}
ââ 
public
ää 

override
ää 
void
ää 
Good
ää 
(
ää 
)
ää 
{
åå 
GoodG2B1
ææ 
(
ææ 
)
ææ 
;
ææ 
GoodG2B2
çç 
(
çç 
)
çç 
;
çç 
GoodB2G1
èè 
(
èè 
)
èè 
;
èè 
GoodB2G2
éé 
(
éé 
)
éé 
;
éé 
}
êê 
}ìì 
}íí `
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_15.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_15 =
:> ?
AbstractTestCase@ P
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
switch!! 
(!! 
$num!! 
)!! 
{"" 	
case## 
$num## 
:## 
data$$ 
=$$ 
$str$$ 
;$$ 
{%% 
try&& 
{'' 
using)) 
()) 
StreamReader)) '
sr))( *
=))+ ,
new))- 0
StreamReader))1 =
())= >
$str))> H
)))H I
)))I J
{** 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
catch11 
(11 
IOException11 "
exceptIO11# +
)11+ ,
{22 
IO33 
.33 
Logger33 
.33 
Log33 !
(33! "
NLog33" &
.33& '
LogLevel33' /
.33/ 0
Warn330 4
,334 5
exceptIO336 >
,33> ?
$str33@ [
)33[ \
;33\ ]
}44 
}55 
break66 
;66 
default77 
:77 
data:: 
=:: 
null:: 
;:: 
break;; 
;;; 
}<< 	
switch== 
(== 
$num== 
)== 
{>> 	
case?? 
$num?? 
:?? 
try@@ 
{AA 
intBB 
valueBB 
=BB 
intBB 
.BB  
ParseBB  %
(BB% &
dataBB& *
)BB* +
;BB+ ,
}CC 
catchDD 
(DD 
FormatExceptionDD "
exceptNumberFormatDD# 5
)DD5 6
{EE 
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG "
.GG" #
LogLevelGG# +
.GG+ ,
WarnGG, 0
,GG0 1
exceptNumberFormatGG2 D
,GGD E
$strGGF `
+GGa b
dataGGc g
)GGg h
;GGh i
}HH 
breakII 
;II 
defaultJJ 
:JJ 
IOLL 
.LL 
	WriteLineLL 
(LL 
$strLL /
)LL/ 0
;LL0 1
breakMM 
;MM 
}NN 	
}OO 
privateSS 
voidSS 
GoodG2B1SS 
(SS 
)SS 
{TT 
stringUU 
dataUU 
;UU 
switchVV 
(VV 
$numVV 
)VV 
{WW 	
caseXX 
$numXX 
:XX 
data[[ 
=[[ 
null[[ 
;[[ 
break\\ 
;\\ 
default]] 
:]] 
data__ 
=__ 
$str__ 
;__ 
break`` 
;`` 
}aa 	
switchbb 
(bb 
$numbb 
)bb 
{cc 	
casedd 
$numdd 
:dd 
tryee 
{ff 
intgg 
valuegg 
=gg 
intgg 
.gg  
Parsegg  %
(gg% &
datagg& *
)gg* +
;gg+ ,
}hh 
catchii 
(ii 
FormatExceptionii "
exceptNumberFormatii# 5
)ii5 6
{jj 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptNumberFormatll2 D
,llD E
$strllF `
+lla b
datallc g
)llg h
;llh i
}mm 
breaknn 
;nn 
defaultoo 
:oo 
IOqq 
.qq 
	WriteLineqq 
(qq 
$strqq /
)qq/ 0
;qq0 1
breakrr 
;rr 
}ss 	
}tt 
privateww 
voidww 
GoodG2B2ww 
(ww 
)ww 
{xx 
stringyy 
datayy 
;yy 
switchzz 
(zz 
$numzz 
)zz 
{{{ 	
case|| 
$num|| 
:|| 
data~~ 
=~~ 
$str~~ 
;~~ 
break 
; 
default
 
:
 
data
 
=
 
null
 
;
 
break
 
;
 
}
 	
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
break
 
;
 
default
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
switch
 
(
 
$num
 
)
 
{
 	
case
   
$num
   
:
   
data
¡¡ 
=
¡¡ 
$str
¡¡ 
;
¡¡ 
{
¢¢ 
try
££ 
{
¤¤ 
using
¦¦ 
(
¦¦ 
StreamReader
¦¦ '
sr
¦¦( *
=
¦¦+ ,
new
¦¦- 0
StreamReader
¦¦1 =
(
¦¦= >
$str
¦¦> H
)
¦¦H I
)
¦¦I J
{
§§ 
data
«« 
=
«« 
sr
«« !
.
««! "
ReadLine
««" *
(
««* +
)
««+ ,
;
««, -
}
¬¬ 
}
­­ 
catch
®® 
(
®® 
IOException
®® "
exceptIO
®®# +
)
®®+ ,
{
¯¯ 
IO
°° 
.
°° 
Logger
°° 
.
°° 
Log
°° !
(
°°! "
NLog
°°" &
.
°°& '
LogLevel
°°' /
.
°°/ 0
Warn
°°0 4
,
°°4 5
exceptIO
°°6 >
,
°°> ?
$str
°°@ [
)
°°[ \
;
°°\ ]
}
±± 
}
²² 
break
³³ 
;
³³ 
default
´´ 
:
´´ 
data
·· 
=
·· 
null
·· 
;
·· 
break
¸¸ 
;
¸¸ 
}
¹¹ 	
switch
ºº 
(
ºº 
$num
ºº 
)
ºº 
{
»» 	
case
¼¼ 
$num
¼¼ 
:
¼¼ 
IO
¾¾ 
.
¾¾ 
	WriteLine
¾¾ 
(
¾¾ 
$str
¾¾ /
)
¾¾/ 0
;
¾¾0 1
break
¿¿ 
;
¿¿ 
default
ÀÀ 
:
ÀÀ 
try
ÁÁ 
{
ÂÂ 
int
ÃÃ 
value
ÃÃ 
=
ÃÃ 
int
ÃÃ 
.
ÃÃ  
Parse
ÃÃ  %
(
ÃÃ% &
data
ÃÃ& *
)
ÃÃ* +
;
ÃÃ+ ,
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
FormatException
ÅÅ " 
exceptNumberFormat
ÅÅ# 5
)
ÅÅ5 6
{
ÆÆ 
IO
ÈÈ 
.
ÈÈ 
Logger
ÈÈ 
.
ÈÈ 
Log
ÈÈ 
(
ÈÈ 
NLog
ÈÈ "
.
ÈÈ" #
LogLevel
ÈÈ# +
.
ÈÈ+ ,
Warn
ÈÈ, 0
,
ÈÈ0 1 
exceptNumberFormat
ÈÈ2 D
,
ÈÈD E
$str
ÈÈF j
+
ÈÈk l 
exceptNumberFormat
ÈÈm 
)ÈÈ 
;ÈÈ 
}
ÉÉ 
break
ÊÊ 
;
ÊÊ 
}
ËË 	
}
ÌÌ 
private
ÏÏ 
void
ÏÏ 
GoodB2G2
ÏÏ 
(
ÏÏ 
)
ÏÏ 
{
ÐÐ 
string
ÑÑ 
data
ÑÑ 
;
ÑÑ 
switch
ÒÒ 
(
ÒÒ 
$num
ÒÒ 
)
ÒÒ 
{
ÓÓ 	
case
ÔÔ 
$num
ÔÔ 
:
ÔÔ 
data
ÕÕ 
=
ÕÕ 
$str
ÕÕ 
;
ÕÕ 
{
ÖÖ 
try
×× 
{
ØØ 
using
ÚÚ 
(
ÚÚ 
StreamReader
ÚÚ '
sr
ÚÚ( *
=
ÚÚ+ ,
new
ÚÚ- 0
StreamReader
ÚÚ1 =
(
ÚÚ= >
$str
ÚÚ> H
)
ÚÚH I
)
ÚÚI J
{
ÛÛ 
data
ßß 
=
ßß 
sr
ßß !
.
ßß! "
ReadLine
ßß" *
(
ßß* +
)
ßß+ ,
;
ßß, -
}
àà 
}
áá 
catch
ââ 
(
ââ 
IOException
ââ "
exceptIO
ââ# +
)
ââ+ ,
{
ãã 
IO
ää 
.
ää 
Logger
ää 
.
ää 
Log
ää !
(
ää! "
NLog
ää" &
.
ää& '
LogLevel
ää' /
.
ää/ 0
Warn
ää0 4
,
ää4 5
exceptIO
ää6 >
,
ää> ?
$str
ää@ [
)
ää[ \
;
ää\ ]
}
åå 
}
ææ 
break
çç 
;
çç 
default
èè 
:
èè 
data
ëë 
=
ëë 
null
ëë 
;
ëë 
break
ìì 
;
ìì 
}
íí 	
switch
îî 
(
îî 
$num
îî 
)
îî 
{
ïï 	
case
ðð 
$num
ðð 
:
ðð 
try
ññ 
{
òò 
int
óó 
value
óó 
=
óó 
int
óó 
.
óó  
Parse
óó  %
(
óó% &
data
óó& *
)
óó* +
;
óó+ ,
}
ôô 
catch
õõ 
(
õõ 
FormatException
õõ " 
exceptNumberFormat
õõ# 5
)
õõ5 6
{
öö 
IO
øø 
.
øø 
Logger
øø 
.
øø 
Log
øø 
(
øø 
NLog
øø "
.
øø" #
LogLevel
øø# +
.
øø+ ,
Warn
øø, 0
,
øø0 1 
exceptNumberFormat
øø2 D
,
øøD E
$str
øøF j
+
øøk l 
exceptNumberFormat
øøm 
)øø 
;øø 
}
ùù 
break
úú 
;
úú 
default
ûû 
:
ûû 
IO
ýý 
.
ýý 
	WriteLine
ýý 
(
ýý 
$str
ýý /
)
ýý/ 0
;
ýý0 1
break
þþ 
;
þþ 
}
ÿÿ 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} ý/
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_16.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_16 =
:> ?
AbstractTestCase@ P
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
while!! 
(!! 
true!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try%% 
{&& 
using(( 
((( 
StreamReader(( '
sr((( *
=((+ ,
new((- 0
StreamReader((1 =
(((= >
$str((> H
)((H I
)((I J
{)) 
data-- 
=-- 
sr-- !
.--! "
ReadLine--" *
(--* +
)--+ ,
;--, -
}.. 
}// 
catch00 
(00 
IOException00 "
exceptIO00# +
)00+ ,
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptIO226 >
,22> ?
$str22@ [
)22[ \
;22\ ]
}33 
}44 
break55 
;55 
}66 	
while77 
(77 
true77 
)77 
{88 	
try99 
{:: 
int;; 
value;; 
=;; 
int;; 
.;;  
Parse;;  %
(;;% &
data;;& *
);;* +
;;;+ ,
}<< 
catch== 
(== 
FormatException== "
exceptNumberFormat==# 5
)==5 6
{>> 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
exceptNumberFormat@@2 D
,@@D E
$str@@F `
+@@a b
data@@c g
)@@g h
;@@h i
}AA 
breakBB 
;BB 
}CC 	
}DD 
privateHH 
voidHH 
GoodG2BHH 
(HH 
)HH 
{II 
stringJJ 
dataJJ 
;JJ 
whileKK 
(KK 
trueKK 
)KK 
{LL 	
dataNN 
=NN 
$strNN 
;NN 
breakOO 
;OO 
}PP 	
whileQQ 
(QQ 
trueQQ 
)QQ 
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
break\\ 
;\\ 
}]] 	
}^^ 
privateaa 
voidaa 
GoodB2Gaa 
(aa 
)aa 
{bb 
stringcc 
datacc 
;cc 
whiledd 
(dd 
truedd 
)dd 
{ee 	
dataff 
=ff 
$strff 
;ff 
{gg 
tryhh 
{ii 
usingkk 
(kk 
StreamReaderkk '
srkk( *
=kk+ ,
newkk- 0
StreamReaderkk1 =
(kk= >
$strkk> H
)kkH I
)kkI J
{ll 
datapp 
=pp 
srpp !
.pp! "
ReadLinepp" *
(pp* +
)pp+ ,
;pp, -
}qq 
}rr 
catchss 
(ss 
IOExceptionss "
exceptIOss# +
)ss+ ,
{tt 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu !
(uu! "
NLoguu" &
.uu& '
LogLeveluu' /
.uu/ 0
Warnuu0 4
,uu4 5
exceptIOuu6 >
,uu> ?
$struu@ [
)uu[ \
;uu\ ]
}vv 
}ww 
breakxx 
;xx 
}yy 	
whilezz 
(zz 
truezz 
)zz 
{{{ 	
try|| 
{}} 
int~~ 
value~~ 
=~~ 
int~~ 
.~~  
Parse~~  %
(~~% &
data~~& *
)~~* +
;~~+ ,
} 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
break
 
;
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
} 
} /
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_17.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_17 =
:> ?
AbstractTestCase@ P
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data%% 
=%% 
$str%% 
;%% 
{&& 	
try'' 
{(( 
using** 
(** 
StreamReader** #
sr**$ &
=**' (
new**) ,
StreamReader**- 9
(**9 :
$str**: D
)**D E
)**E F
{++ 
data// 
=// 
sr// 
.// 
ReadLine// &
(//& '
)//' (
;//( )
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	
for77 
(77 
int77 
j77 
=77 
$num77 
;77 
j77 
<77 
$num77 
;77 
j77  
++77  "
)77" #
{88 	
try99 
{:: 
int;; 
value;; 
=;; 
int;; 
.;;  
Parse;;  %
(;;% &
data;;& *
);;* +
;;;+ ,
}<< 
catch== 
(== 
FormatException== "
exceptNumberFormat==# 5
)==5 6
{>> 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
exceptNumberFormat@@2 D
,@@D E
$str@@F `
+@@a b
data@@c g
)@@g h
;@@h i
}AA 
}BB 	
}CC 
privateGG 
voidGG 
GoodG2BGG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK 
forLL 
(LL 
intLL 
jLL 
=LL 
$numLL 
;LL 
jLL 
<LL 
$numLL 
;LL 
jLL  
++LL  "
)LL" #
{MM 	
tryNN 
{OO 
intPP 
valuePP 
=PP 
intPP 
.PP  
ParsePP  %
(PP% &
dataPP& *
)PP* +
;PP+ ,
}QQ 
catchRR 
(RR 
FormatExceptionRR "
exceptNumberFormatRR# 5
)RR5 6
{SS 
IOUU 
.UU 
LoggerUU 
.UU 
LogUU 
(UU 
NLogUU "
.UU" #
LogLevelUU# +
.UU+ ,
WarnUU, 0
,UU0 1
exceptNumberFormatUU2 D
,UUD E
$strUUF `
+UUa b
dataUUc g
)UUg h
;UUh i
}VV 
}WW 	
}XX 
private[[ 
void[[ 
GoodB2G[[ 
([[ 
)[[ 
{\\ 
string]] 
data]] 
;]] 
data^^ 
=^^ 
$str^^ 
;^^ 
{__ 	
try`` 
{aa 
usingcc 
(cc 
StreamReadercc #
srcc$ &
=cc' (
newcc) ,
StreamReadercc- 9
(cc9 :
$strcc: D
)ccD E
)ccE F
{dd 
datahh 
=hh 
srhh 
.hh 
ReadLinehh &
(hh& '
)hh' (
;hh( )
}ii 
}jj 
catchkk 
(kk 
IOExceptionkk 
exceptIOkk '
)kk' (
{ll 
IOmm 
.mm 
Loggermm 
.mm 
Logmm 
(mm 
NLogmm "
.mm" #
LogLevelmm# +
.mm+ ,
Warnmm, 0
,mm0 1
exceptIOmm2 :
,mm: ;
$strmm< W
)mmW X
;mmX Y
}nn 
}oo 	
forpp 
(pp 
intpp 
kpp 
=pp 
$numpp 
;pp 
kpp 
<pp 
$numpp 
;pp 
kpp  
++pp  "
)pp" #
{qq 	
tryrr 
{ss 
inttt 
valuett 
=tt 
inttt 
.tt  
Parsett  %
(tt% &
datatt& *
)tt* +
;tt+ ,
}uu 
catchvv 
(vv 
FormatExceptionvv "
exceptNumberFormatvv# 5
)vv5 6
{ww 
IOyy 
.yy 
Loggeryy 
.yy 
Logyy 
(yy 
NLogyy "
.yy" #
LogLevelyy# +
.yy+ ,
Warnyy, 0
,yy0 1
exceptNumberFormatyy2 D
,yyD E
$stryyF j
+yyk l
exceptNumberFormatyym 
)	yy 
;
yy 
}zz 
}{{ 	
}|| 
public~~ 

override~~ 
void~~ 
Good~~ 
(~~ 
)~~ 
{ 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
} 
} µM
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_21.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_21 =
:> ?
AbstractTestCase@ P
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{%% 	
try&& 
{'' 
using)) 
()) 
StreamReader)) #
sr))$ &
=))' (
new))) ,
StreamReader))- 9
())9 :
$str)): D
)))D E
)))E F
{** 
data.. 
=.. 
sr.. 
... 
ReadLine.. &
(..& '
)..' (
;..( )
}// 
}00 
catch11 
(11 
IOException11 
exceptIO11 '
)11' (
{22 
IO33 
.33 
Logger33 
.33 
Log33 
(33 
NLog33 "
.33" #
LogLevel33# +
.33+ ,
Warn33, 0
,330 1
exceptIO332 :
,33: ;
$str33< W
)33W X
;33X Y
}44 
}55 	

badPrivate66 
=66 
true66 
;66 
BadSink77 
(77 
data77 
)77 
;77 
}88 
private:: 
void:: 
BadSink:: 
(:: 
string:: 
data::  $
)::% &
{;; 
if<< 

(<< 

badPrivate<< 
)<< 
{== 	
try>> 
{?? 
int@@ 
value@@ 
=@@ 
int@@ 
.@@  
Parse@@  %
(@@% &
data@@& *
)@@* +
;@@+ ,
}AA 
catchBB 
(BB 
FormatExceptionBB "
exceptNumberFormatBB# 5
)BB5 6
{CC 
IOEE 
.EE 
LoggerEE 
.EE 
LogEE 
(EE 
NLogEE "
.EE" #
LogLevelEE# +
.EE+ ,
WarnEE, 0
,EE0 1
exceptNumberFormatEE2 D
,EED E
$strEEF `
+EEa b
dataEEc g
)EEg h
;EEh i
}FF 
}GG 	
}HH 
privateKK 
boolKK 
goodB2G1PrivateKK  
=KK! "
falseKK# (
;KK( )
privateLL 
boolLL 
goodB2G2PrivateLL  
=LL! "
falseLL# (
;LL( )
privateMM 
boolMM 
goodG2BPrivateMM 
=MM  !
falseMM" '
;MM' (
publicOO 

overrideOO 
voidOO 
GoodOO 
(OO 
)OO 
{PP 
GoodB2G1QQ 
(QQ 
)QQ 
;QQ 
GoodB2G2RR 
(RR 
)RR 
;RR 
GoodG2BSS 
(SS 
)SS 
;SS 
}TT 
privateWW 
voidWW 
GoodB2G1WW 
(WW 
)WW 
{XX 
stringYY 
dataYY 
;YY 
dataZZ 
=ZZ 
$strZZ 
;ZZ 
{[[ 	
try\\ 
{]] 
using__ 
(__ 
StreamReader__ #
sr__$ &
=__' (
new__) ,
StreamReader__- 9
(__9 :
$str__: D
)__D E
)__E F
{`` 
datadd 
=dd 
srdd 
.dd 
ReadLinedd &
(dd& '
)dd' (
;dd( )
}ee 
}ff 
catchgg 
(gg 
IOExceptiongg 
exceptIOgg '
)gg' (
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptIOii2 :
,ii: ;
$strii< W
)iiW X
;iiX Y
}jj 
}kk 	
goodB2G1Privatell 
=ll 
falsell 
;ll  
GoodB2G1Sinkmm 
(mm 
datamm 
)mm 
;mm 
}nn 
privatepp 
voidpp 
GoodB2G1Sinkpp 
(pp 
stringpp $
datapp% )
)pp* +
{qq 
ifrr 

(rr 
goodB2G1Privaterr 
)rr 
{ss 	
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu /
)uu/ 0
;uu0 1
}vv 	
elseww 
{xx 	
tryyy 
{zz 
int{{ 
value{{ 
={{ 
int{{ 
.{{  
Parse{{  %
({{% &
data{{& *
){{* +
;{{+ ,
}|| 
catch}} 
(}} 
FormatException}} "
exceptNumberFormat}}# 5
)}}5 6
{~~ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
{
 	
try
 
{
 
using
 
(
 
StreamReader
 #
sr
$ &
=
' (
new
) ,
StreamReader
- 9
(
9 :
$str
: D
)
D E
)
E F
{
 
data
 
=
 
sr
 
.
 
ReadLine
 &
(
& '
)
' (
;
( )
}
 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
}
 	
goodB2G2Private
 
=
 
true
 
;
 
GoodB2G2Sink
 
(
 
data
 
)
 
;
 
}
 
private
 
void
 
GoodB2G2Sink
 
(
 
string
 $
data
% )
)
* +
{
   
if
¡¡ 

(
¡¡ 
goodB2G2Private
¡¡ 
)
¡¡ 
{
¢¢ 	
try
££ 
{
¤¤ 
int
¥¥ 
value
¥¥ 
=
¥¥ 
int
¥¥ 
.
¥¥  
Parse
¥¥  %
(
¥¥% &
data
¥¥& *
)
¥¥* +
;
¥¥+ ,
}
¦¦ 
catch
§§ 
(
§§ 
FormatException
§§ " 
exceptNumberFormat
§§# 5
)
§§5 6
{
¨¨ 
IO
ªª 
.
ªª 
Logger
ªª 
.
ªª 
Log
ªª 
(
ªª 
NLog
ªª "
.
ªª" #
LogLevel
ªª# +
.
ªª+ ,
Warn
ªª, 0
,
ªª0 1 
exceptNumberFormat
ªª2 D
,
ªªD E
$str
ªªF j
+
ªªk l 
exceptNumberFormat
ªªm 
)ªª 
;ªª 
}
«« 
}
¬¬ 	
}
­­ 
private
°° 
void
°° 
GoodG2B
°° 
(
°° 
)
°° 
{
±± 
string
²² 
data
²² 
;
²² 
data
´´ 
=
´´ 
$str
´´ 
;
´´ 
goodG2BPrivate
µµ 
=
µµ 
true
µµ 
;
µµ 
GoodG2BSink
¶¶ 
(
¶¶ 
data
¶¶ 
)
¶¶ 
;
¶¶ 
}
·· 
private
¹¹ 
void
¹¹ 
GoodG2BSink
¹¹ 
(
¹¹ 
string
¹¹ #
data
¹¹$ (
)
¹¹) *
{
ºº 
if
»» 

(
»» 
goodG2BPrivate
»» 
)
»» 
{
¼¼ 	
try
½½ 
{
¾¾ 
int
¿¿ 
value
¿¿ 
=
¿¿ 
int
¿¿ 
.
¿¿  
Parse
¿¿  %
(
¿¿% &
data
¿¿& *
)
¿¿* +
;
¿¿+ ,
}
ÀÀ 
catch
ÁÁ 
(
ÁÁ 
FormatException
ÁÁ " 
exceptNumberFormat
ÁÁ# 5
)
ÁÁ5 6
{
ÂÂ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ 
.
ÄÄ 
Log
ÄÄ 
(
ÄÄ 
NLog
ÄÄ "
.
ÄÄ" #
LogLevel
ÄÄ# +
.
ÄÄ+ ,
Warn
ÄÄ, 0
,
ÄÄ0 1 
exceptNumberFormat
ÄÄ2 D
,
ÄÄD E
$str
ÄÄF `
+
ÄÄa b
data
ÄÄc g
)
ÄÄg h
;
ÄÄh i
}
ÅÅ 
}
ÆÆ 	
}
ÇÇ 
}ÉÉ 
}ÊÊ È/
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_22a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_22a >
:? @
AbstractTestCaseA Q
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
=## 
null## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{%% 	
try&& 
{'' 
using)) 
()) 
StreamReader)) #
sr))$ &
=))' (
new))) ,
StreamReader))- 9
())9 :
$str)): D
)))D E
)))E F
{** 
data.. 
=.. 
sr.. 
... 
ReadLine.. &
(..& '
)..' (
;..( )
}// 
}00 
catch11 
(11 
IOException11 
exceptIO11 '
)11' (
{22 
IO33 
.33 
Logger33 
.33 
Log33 
(33 
NLog33 "
.33" #
LogLevel33# +
.33+ ,
Warn33, 0
,330 1
exceptIO332 :
,33: ;
$str33< W
)33W X
;33X Y
}44 
}55 	
badPublicStatic66 
=66 
true66 
;66 D
8CWE117_Improper_Output_Neutralization_for_Logs__File_22b77 @
.77@ A
BadSink77A H
(77H I
data77I M
)77N O
;77O P
}88 
public;; 

static;; 
bool;;  
goodB2G1PublicStatic;; +
=;;, -
false;;. 3
;;;3 4
public<< 

static<< 
bool<<  
goodB2G2PublicStatic<< +
=<<, -
false<<. 3
;<<3 4
public== 

static== 
bool== 
goodG2BPublicStatic== *
===+ ,
false==- 2
;==2 3
public?? 

override?? 
void?? 
Good?? 
(?? 
)?? 
{@@ 
GoodB2G1AA 
(AA 
)AA 
;AA 
GoodB2G2BB 
(BB 
)BB 
;BB 
GoodG2BCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
voidGG 
GoodB2G1GG 
(GG 
)GG 
{HH 
stringII 
dataII 
=II 
nullII 
;II 
dataJJ 
=JJ 
$strJJ 
;JJ 
{KK 	
tryLL 
{MM 
usingOO 
(OO 
StreamReaderOO #
srOO$ &
=OO' (
newOO) ,
StreamReaderOO- 9
(OO9 :
$strOO: D
)OOD E
)OOE F
{PP 
dataTT 
=TT 
srTT 
.TT 
ReadLineTT &
(TT& '
)TT' (
;TT( )
}UU 
}VV 
catchWW 
(WW 
IOExceptionWW 
exceptIOWW '
)WW' (
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
exceptIOYY2 :
,YY: ;
$strYY< W
)YYW X
;YYX Y
}ZZ 
}[[ 	 
goodB2G1PublicStatic\\ 
=\\ 
false\\ $
;\\$ %D
8CWE117_Improper_Output_Neutralization_for_Logs__File_22b]] @
.]]@ A
GoodB2G1Sink]]A M
(]]M N
data]]N R
)]]S T
;]]T U
}^^ 
privateaa 
voidaa 
GoodB2G2aa 
(aa 
)aa 
{bb 
stringcc 
datacc 
=cc 
nullcc 
;cc 
datadd 
=dd 
$strdd 
;dd 
{ee 	
tryff 
{gg 
usingii 
(ii 
StreamReaderii #
srii$ &
=ii' (
newii) ,
StreamReaderii- 9
(ii9 :
$strii: D
)iiD E
)iiE F
{jj 
datann 
=nn 
srnn 
.nn 
ReadLinenn &
(nn& '
)nn' (
;nn( )
}oo 
}pp 
catchqq 
(qq 
IOExceptionqq 
exceptIOqq '
)qq' (
{rr 
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss "
.ss" #
LogLevelss# +
.ss+ ,
Warnss, 0
,ss0 1
exceptIOss2 :
,ss: ;
$strss< W
)ssW X
;ssX Y
}tt 
}uu 	 
goodB2G2PublicStaticvv 
=vv 
truevv #
;vv# $D
8CWE117_Improper_Output_Neutralization_for_Logs__File_22bww @
.ww@ A
GoodB2G2SinkwwA M
(wwM N
datawwN R
)wwS T
;wwT U
}xx 
private{{ 
void{{ 
GoodG2B{{ 
({{ 
){{ 
{|| 
string}} 
data}} 
=}} 
null}} 
;}} 
data 
= 
$str 
; !
goodG2BPublicStatic
 
=
 
true
 "
;
" #F
8CWE117_Improper_Output_Neutralization_for_Logs__File_22b
 @
.
@ A
GoodG2BSink
A L
(
L M
data
M Q
)
R S
;
S T
}
 
} 
} °(
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_22b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_22b >
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
if 

( D
8CWE117_Improper_Output_Neutralization_for_Logs__File_22a D
.D E
badPublicStaticE T
)T U
{ 	
try   
{!! 
int"" 
value"" 
="" 
int"" 
.""  
Parse""  %
(""% &
data""& *
)""* +
;""+ ,
}## 
catch$$ 
($$ 
FormatException$$ "
exceptNumberFormat$$# 5
)$$5 6
{%% 
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' "
.''" #
LogLevel''# +
.''+ ,
Warn'', 0
,''0 1
exceptNumberFormat''2 D
,''D E
$str''F `
+''a b
data''c g
)''g h
;''h i
}(( 
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
}00 
public55 

static55 
void55 
GoodB2G1Sink55 #
(55# $
string55$ *
data55+ /
)550 1
{66 
if77 

(77 D
8CWE117_Improper_Output_Neutralization_for_Logs__File_22a77 D
.77D E 
goodB2G1PublicStatic77E Y
)77Y Z
{88 	
data;; 
=;; 
null;; 
;;; 
}<< 	
else== 
{>> 	
try?? 
{@@ 
intAA 
valueAA 
=AA 
intAA 
.AA  
ParseAA  %
(AA% &
dataAA& *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
FormatExceptionCC "
exceptNumberFormatCC# 5
)CC5 6
{DD 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
exceptNumberFormatFF2 D
,FFD E
$strFFF j
+FFk l
exceptNumberFormatFFm 
)	FF 
;
FF 
}GG 
}HH 	
}II 
publicLL 

staticLL 
voidLL 
GoodB2G2SinkLL #
(LL# $
stringLL$ *
dataLL+ /
)LL0 1
{MM 
ifNN 

(NN D
8CWE117_Improper_Output_Neutralization_for_Logs__File_22aNN D
.NND E 
goodB2G2PublicStaticNNE Y
)NNY Z
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF j
+WWk l
exceptNumberFormatWWm 
)	WW 
;
WW 
}XX 
}YY 	
elseZZ 
{[[ 	
data^^ 
=^^ 
null^^ 
;^^ 
}__ 	
}`` 
publiccc 

staticcc 
voidcc 
GoodG2BSinkcc "
(cc" #
stringcc# )
datacc* .
)cc/ 0
{dd 
ifee 

(ee D
8CWE117_Improper_Output_Neutralization_for_Logs__File_22aee D
.eeD E
goodG2BPublicStaticeeE X
)eeX Y
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF `
+nna b
datannc g
)nng h
;nnh i
}oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
}ww 
}yy 
}zz  0
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_31.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_31 =
:> ?
AbstractTestCase@ P
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
dataCopy   
;   
{!! 	
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{$$ 
try%% 
{&& 
using(( 
((( 
StreamReader(( '
sr((( *
=((+ ,
new((- 0
StreamReader((1 =
(((= >
$str((> H
)((H I
)((I J
{)) 
data-- 
=-- 
sr-- !
.--! "
ReadLine--" *
(--* +
)--+ ,
;--, -
}.. 
}// 
catch00 
(00 
IOException00 "
exceptIO00# +
)00+ ,
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptIO226 >
,22> ?
$str22@ [
)22[ \
;22\ ]
}33 
}44 
dataCopy55 
=55 
data55 
;55 
}66 	
{77 	
string88 
data88 
=88 
dataCopy88 "
;88" #
try99 
{:: 
int;; 
value;; 
=;; 
int;; 
.;;  
Parse;;  %
(;;% &
data;;& *
);;* +
;;;+ ,
}<< 
catch== 
(== 
FormatException== "
exceptNumberFormat==# 5
)==5 6
{>> 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
exceptNumberFormat@@2 D
,@@D E
$str@@F `
+@@a b
data@@c g
)@@g h
;@@h i
}AA 
}BB 	
}CC 
publicFF 

overrideFF 
voidFF 
GoodFF 
(FF 
)FF 
{GG 
GoodG2BHH 
(HH 
)HH 
;HH 
GoodB2GII 
(II 
)II 
;II 
}JJ 
privateMM 
voidMM 
GoodG2BMM 
(MM 
)MM 
{NN 
stringOO 
dataCopyOO 
;OO 
{PP 	
stringQQ 
dataQQ 
;QQ 
dataSS 
=SS 
$strSS 
;SS 
dataCopyTT 
=TT 
dataTT 
;TT 
}UU 	
{VV 	
stringWW 
dataWW 
=WW 
dataCopyWW "
;WW" #
tryXX 
{YY 
intZZ 
valueZZ 
=ZZ 
intZZ 
.ZZ  
ParseZZ  %
(ZZ% &
dataZZ& *
)ZZ* +
;ZZ+ ,
}[[ 
catch\\ 
(\\ 
FormatException\\ "
exceptNumberFormat\\# 5
)\\5 6
{]] 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
exceptNumberFormat__2 D
,__D E
$str__F `
+__a b
data__c g
)__g h
;__h i
}`` 
}aa 	
}bb 
privateee 
voidee 
GoodB2Gee 
(ee 
)ee 
{ff 
stringgg 
dataCopygg 
;gg 
{hh 	
stringii 
dataii 
;ii 
datajj 
=jj 
$strjj 
;jj 
{kk 
tryll 
{mm 
usingoo 
(oo 
StreamReaderoo '
sroo( *
=oo+ ,
newoo- 0
StreamReaderoo1 =
(oo= >
$stroo> H
)ooH I
)ooI J
{pp 
datatt 
=tt 
srtt !
.tt! "
ReadLinett" *
(tt* +
)tt+ ,
;tt, -
}uu 
}vv 
catchww 
(ww 
IOExceptionww "
exceptIOww# +
)ww+ ,
{xx 
IOyy 
.yy 
Loggeryy 
.yy 
Logyy !
(yy! "
NLogyy" &
.yy& '
LogLevelyy' /
.yy/ 0
Warnyy0 4
,yy4 5
exceptIOyy6 >
,yy> ?
$stryy@ [
)yy[ \
;yy\ ]
}zz 
}{{ 
dataCopy|| 
=|| 
data|| 
;|| 
}}} 	
{~~ 	
string 
data 
= 
dataCopy "
;" #
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
} 
} 0
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_41.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_41 =
:> ?
AbstractTestCase@ P
{ 
private 
static 
void 
BadSink 
(  
string  &
data' +
), -
{ 
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public++ 

override++ 
void++ 
Bad++ 
(++ 
)++ 
{,, 
string-- 
data-- 
;-- 
data.. 
=.. 
$str.. 
;.. 
{// 	
try00 
{11 
using33 
(33 
StreamReader33 #
sr33$ &
=33' (
new33) ,
StreamReader33- 9
(339 :
$str33: D
)33D E
)33E F
{44 
data88 
=88 
sr88 
.88 
ReadLine88 &
(88& '
)88' (
;88( )
}99 
}:: 
catch;; 
(;; 
IOException;; 
exceptIO;; '
);;' (
{<< 
IO== 
.== 
Logger== 
.== 
Log== 
(== 
NLog== "
.==" #
LogLevel==# +
.==+ ,
Warn==, 0
,==0 1
exceptIO==2 :
,==: ;
$str==< W
)==W X
;==X Y
}>> 
}?? 	
BadSink@@ 
(@@ 
data@@ 
)@@ 
;@@ 
}AA 
publicDD 

overrideDD 
voidDD 
GoodDD 
(DD 
)DD 
{EE 
GoodG2BFF 
(FF 
)FF 
;FF 
GoodB2GGG 
(GG 
)GG 
;GG 
}HH 
privateJJ 
staticJJ 
voidJJ 
GoodG2BSinkJJ #
(JJ# $
stringJJ$ *
dataJJ+ /
)JJ0 1
{KK 
tryLL 
{MM 	
intNN 
valueNN 
=NN 
intNN 
.NN 
ParseNN !
(NN! "
dataNN" &
)NN& '
;NN' (
}OO 	
catchPP 
(PP 
FormatExceptionPP 
exceptNumberFormatPP 1
)PP1 2
{QQ 	
IOSS 
.SS 
LoggerSS 
.SS 
LogSS 
(SS 
NLogSS 
.SS 
LogLevelSS '
.SS' (
WarnSS( ,
,SS, -
exceptNumberFormatSS. @
,SS@ A
$strSSB \
+SS] ^
dataSS_ c
)SSc d
;SSd e
}TT 	
}UU 
privateXX 
staticXX 
voidXX 
GoodG2BXX 
(XX  
)XX  !
{YY 
stringZZ 
dataZZ 
;ZZ 
data\\ 
=\\ 
$str\\ 
;\\ 
GoodG2BSink]] 
(]] 
data]] 
)]] 
;]] 
}^^ 
private`` 
static`` 
void`` 
GoodB2GSink`` #
(``# $
string``$ *
data``+ /
)``0 1
{aa 
trybb 
{cc 	
intdd 
valuedd 
=dd 
intdd 
.dd 
Parsedd !
(dd! "
datadd" &
)dd& '
;dd' (
}ee 	
catchff 
(ff 
FormatExceptionff 
exceptNumberFormatff 1
)ff1 2
{gg 	
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii 
.ii 
LogLevelii '
.ii' (
Warnii( ,
,ii, -
exceptNumberFormatii. @
,ii@ A
$striiB f
+iig h
exceptNumberFormatiii {
)ii{ |
;ii| }
}jj 	
}kk 
privatenn 
staticnn 
voidnn 
GoodB2Gnn 
(nn  
)nn  !
{oo 
stringpp 
datapp 
;pp 
dataqq 
=qq 
$strqq 
;qq 
{rr 	
tryss 
{tt 
usingvv 
(vv 
StreamReadervv #
srvv$ &
=vv' (
newvv) ,
StreamReadervv- 9
(vv9 :
$strvv: D
)vvD E
)vvE F
{ww 
data{{ 
={{ 
sr{{ 
.{{ 
ReadLine{{ &
({{& '
){{' (
;{{( )
}|| 
}}} 
catch~~ 
(~~ 
IOException~~ 
exceptIO~~ '
)~~' (
{ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
}
 	
GoodB2GSink
 
(
 
data
 
)
 
;
 
}
 
} 
} ¢1
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_42.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_42 =
:> ?
AbstractTestCase@ P
{ 
private 
static 
string 
	BadSource #
(# $
)$ %
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try## 
{$$ 
using&& 
(&& 
StreamReader&& #
sr&&$ &
=&&' (
new&&) ,
StreamReader&&- 9
(&&9 :
$str&&: D
)&&D E
)&&E F
{'' 
data++ 
=++ 
sr++ 
.++ 
ReadLine++ &
(++& '
)++' (
;++( )
},, 
}-- 
catch.. 
(.. 
IOException.. 
exceptIO.. '
)..' (
{// 
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 "
.00" #
LogLevel00# +
.00+ ,
Warn00, 0
,000 1
exceptIO002 :
,00: ;
$str00< W
)00W X
;00X Y
}11 
}22 	
return33 
data33 
;33 
}44 
public66 

override66 
void66 
Bad66 
(66 
)66 
{77 
string88 
data88 
=88 
	BadSource88 
(88  
)88  !
;88! "
try99 
{:: 	
int;; 
value;; 
=;; 
int;; 
.;; 
Parse;; !
(;;! "
data;;" &
);;& '
;;;' (
}<< 	
catch== 
(== 
FormatException== 
exceptNumberFormat== 1
)==1 2
{>> 	
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ 
.@@ 
LogLevel@@ '
.@@' (
Warn@@( ,
,@@, -
exceptNumberFormat@@. @
,@@@ A
$str@@B \
+@@] ^
data@@_ c
)@@c d
;@@d e
}AA 	
}BB 
privateFF 
staticFF 
stringFF 
GoodG2BSourceFF '
(FF' (
)FF( )
{GG 
stringHH 
dataHH 
;HH 
dataJJ 
=JJ 
$strJJ 
;JJ 
returnKK 
dataKK 
;KK 
}LL 
privateNN 
staticNN 
voidNN 
GoodG2BNN 
(NN  
)NN  !
{OO 
stringPP 
dataPP 
=PP 
GoodG2BSourcePP #
(PP# $
)PP$ %
;PP% &
tryQQ 
{RR 	
intSS 
valueSS 
=SS 
intSS 
.SS 
ParseSS !
(SS! "
dataSS" &
)SS& '
;SS' (
}TT 	
catchUU 
(UU 
FormatExceptionUU 
exceptNumberFormatUU 1
)UU1 2
{VV 	
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX 
.XX 
LogLevelXX '
.XX' (
WarnXX( ,
,XX, -
exceptNumberFormatXX. @
,XX@ A
$strXXB \
+XX] ^
dataXX_ c
)XXc d
;XXd e
}YY 	
}ZZ 
private]] 
static]] 
string]] 
GoodB2GSource]] '
(]]' (
)]]( )
{^^ 
string__ 
data__ 
;__ 
data`` 
=`` 
$str`` 
;`` 
{aa 	
trybb 
{cc 
usingee 
(ee 
StreamReaderee #
sree$ &
=ee' (
newee) ,
StreamReaderee- 9
(ee9 :
$stree: D
)eeD E
)eeE F
{ff 
datajj 
=jj 
srjj 
.jj 
ReadLinejj &
(jj& '
)jj' (
;jj( )
}kk 
}ll 
catchmm 
(mm 
IOExceptionmm 
exceptIOmm '
)mm' (
{nn 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptIOoo2 :
,oo: ;
$stroo< W
)ooW X
;ooX Y
}pp 
}qq 	
returnrr 
datarr 
;rr 
}ss 
privateuu 
staticuu 
voiduu 
GoodB2Guu 
(uu  
)uu  !
{vv 
stringww 
dataww 
=ww 
GoodB2GSourceww #
(ww# $
)ww$ %
;ww% &
tryxx 
{yy 	
intzz 
valuezz 
=zz 
intzz 
.zz 
Parsezz !
(zz! "
datazz" &
)zz& '
;zz' (
}{{ 	
catch|| 
(|| 
FormatException|| 
exceptNumberFormat|| 1
)||1 2
{}} 	
IO 
. 
Logger 
. 
Log 
( 
NLog 
. 
LogLevel '
.' (
Warn( ,
,, -
exceptNumberFormat. @
,@ A
$strB f
+g h
exceptNumberFormati {
){ |
;| }
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
} 
} ý3
ÄC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_45.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class C
7CWE117_Improper_Output_Neutralization_for_Logs__File_45 =
:> ?
AbstractTestCase@ P
{ 
private 
string 
dataBad 
; 
private 
string 
dataGoodG2B 
; 
private   
string   
dataGoodB2G   
;   
private"" 
void"" 
BadSink"" 
("" 
)"" 
{## 
string$$ 
data$$ 
=$$ 
dataBad$$ 
;$$ 
try%% 
{&& 	
int'' 
value'' 
='' 
int'' 
.'' 
Parse'' !
(''! "
data''" &
)''& '
;''' (
}(( 	
catch)) 
()) 
FormatException)) 
exceptNumberFormat)) 1
)))1 2
{** 	
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, 
.,, 
LogLevel,, '
.,,' (
Warn,,( ,
,,,, -
exceptNumberFormat,,. @
,,,@ A
$str,,B \
+,,] ^
data,,_ c
),,c d
;,,d e
}-- 	
}.. 
public00 

override00 
void00 
Bad00 
(00 
)00 
{11 
string22 
data22 
;22 
data33 
=33 
$str33 
;33 
{44 	
try55 
{66 
using88 
(88 
StreamReader88 #
sr88$ &
=88' (
new88) ,
StreamReader88- 9
(889 :
$str88: D
)88D E
)88E F
{99 
data== 
=== 
sr== 
.== 
ReadLine== &
(==& '
)==' (
;==( )
}>> 
}?? 
catch@@ 
(@@ 
IOException@@ 
exceptIO@@ '
)@@' (
{AA 
IOBB 
.BB 
LoggerBB 
.BB 
LogBB 
(BB 
NLogBB "
.BB" #
LogLevelBB# +
.BB+ ,
WarnBB, 0
,BB0 1
exceptIOBB2 :
,BB: ;
$strBB< W
)BBW X
;BBX Y
}CC 
}DD 	
dataBadEE 
=EE 
dataEE 
;EE 
BadSinkFF 
(FF 
)FF 
;FF 
}GG 
publicJJ 

overrideJJ 
voidJJ 
GoodJJ 
(JJ 
)JJ 
{KK 
GoodG2BLL 
(LL 
)LL 
;LL 
GoodB2GMM 
(MM 
)MM 
;MM 
}NN 
privatePP 
voidPP 
GoodG2BSinkPP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
=RR 
dataGoodG2BRR !
;RR! "
trySS 
{TT 	
intUU 
valueUU 
=UU 
intUU 
.UU 
ParseUU !
(UU! "
dataUU" &
)UU& '
;UU' (
}VV 	
catchWW 
(WW 
FormatExceptionWW 
exceptNumberFormatWW 1
)WW1 2
{XX 	
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ 
.ZZ 
LogLevelZZ '
.ZZ' (
WarnZZ( ,
,ZZ, -
exceptNumberFormatZZ. @
,ZZ@ A
$strZZB \
+ZZ] ^
dataZZ_ c
)ZZc d
;ZZd e
}[[ 	
}\\ 
private__ 
void__ 
GoodG2B__ 
(__ 
)__ 
{`` 
stringaa 
dataaa 
;aa 
datacc 
=cc 
$strcc 
;cc 
dataGoodG2Bdd 
=dd 
datadd 
;dd 
GoodG2BSinkee 
(ee 
)ee 
;ee 
}ff 
privatehh 
voidhh 
GoodB2GSinkhh 
(hh 
)hh 
{ii 
stringjj 
datajj 
=jj 
dataGoodB2Gjj !
;jj! "
trykk 
{ll 	
intmm 
valuemm 
=mm 
intmm 
.mm 
Parsemm !
(mm! "
datamm" &
)mm& '
;mm' (
}nn 	
catchoo 
(oo 
FormatExceptionoo 
exceptNumberFormatoo 1
)oo1 2
{pp 	
IOrr 
.rr 
Loggerrr 
.rr 
Logrr 
(rr 
NLogrr 
.rr 
LogLevelrr '
.rr' (
Warnrr( ,
,rr, -
exceptNumberFormatrr. @
,rr@ A
$strrrB f
+rrg h
exceptNumberFormatrri {
)rr{ |
;rr| }
}ss 	
}tt 
privateww 
voidww 
GoodB2Gww 
(ww 
)ww 
{xx 
stringyy 
datayy 
;yy 
datazz 
=zz 
$strzz 
;zz 
{{{ 	
try|| 
{}} 
using 
( 
StreamReader #
sr$ &
=' (
new) ,
StreamReader- 9
(9 :
$str: D
)D E
)E F
{
 
data
 
=
 
sr
 
.
 
ReadLine
 &
(
& '
)
' (
;
( )
}
 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
}
 	
dataGoodB2G
 
=
 
data
 
;
 
GoodB2GSink
 
(
 
)
 
;
 
}
 
} 
} 
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_51a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_51a >
:? @
AbstractTestCaseA Q
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try## 
{$$ 
using&& 
(&& 
StreamReader&& #
sr&&$ &
=&&' (
new&&) ,
StreamReader&&- 9
(&&9 :
$str&&: D
)&&D E
)&&E F
{'' 
data++ 
=++ 
sr++ 
.++ 
ReadLine++ &
(++& '
)++' (
;++( )
},, 
}-- 
catch.. 
(.. 
IOException.. 
exceptIO.. '
)..' (
{// 
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 "
.00" #
LogLevel00# +
.00+ ,
Warn00, 0
,000 1
exceptIO002 :
,00: ;
$str00< W
)00W X
;00X Y
}11 
}22 	D
8CWE117_Improper_Output_Neutralization_for_Logs__File_51b33 @
.33@ A
BadSink33A H
(33H I
data33I M
)33O P
;33P Q
}44 
public77 

override77 
void77 
Good77 
(77 
)77 
{88 
GoodG2B99 
(99 
)99 
;99 
GoodB2G:: 
(:: 
):: 
;:: 
};; 
private>> 
void>> 
GoodG2B>> 
(>> 
)>> 
{?? 
string@@ 
data@@ 
;@@ 
dataBB 
=BB 
$strBB 
;BB D
8CWE117_Improper_Output_Neutralization_for_Logs__File_51bCC @
.CC@ A
GoodG2BSinkCCA L
(CCL M
dataCCM Q
)CCS T
;CCT U
}DD 
privateGG 
voidGG 
GoodB2GGG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
dataJJ 
=JJ 
$strJJ 
;JJ 
{KK 	
tryLL 
{MM 
usingOO 
(OO 
StreamReaderOO #
srOO$ &
=OO' (
newOO) ,
StreamReaderOO- 9
(OO9 :
$strOO: D
)OOD E
)OOE F
{PP 
dataTT 
=TT 
srTT 
.TT 
ReadLineTT &
(TT& '
)TT' (
;TT( )
}UU 
}VV 
catchWW 
(WW 
IOExceptionWW 
exceptIOWW '
)WW' (
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
exceptIOYY2 :
,YY: ;
$strYY< W
)YYW X
;YYX Y
}ZZ 
}[[ 	D
8CWE117_Improper_Output_Neutralization_for_Logs__File_51b\\ @
.\\@ A
GoodB2GSink\\A L
(\\L M
data\\M Q
)\\S T
;\\T U
}]] 
}__ 
}`` î
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_51b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_51b >
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH 
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_52a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_52a >
:? @
AbstractTestCaseA Q
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try## 
{$$ 
using&& 
(&& 
StreamReader&& #
sr&&$ &
=&&' (
new&&) ,
StreamReader&&- 9
(&&9 :
$str&&: D
)&&D E
)&&E F
{'' 
data++ 
=++ 
sr++ 
.++ 
ReadLine++ &
(++& '
)++' (
;++( )
},, 
}-- 
catch.. 
(.. 
IOException.. 
exceptIO.. '
)..' (
{// 
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 "
.00" #
LogLevel00# +
.00+ ,
Warn00, 0
,000 1
exceptIO002 :
,00: ;
$str00< W
)00W X
;00X Y
}11 
}22 	D
8CWE117_Improper_Output_Neutralization_for_Logs__File_52b33 @
.33@ A
BadSink33A H
(33H I
data33I M
)33N O
;33O P
}44 
public77 

override77 
void77 
Good77 
(77 
)77 
{88 
GoodG2B99 
(99 
)99 
;99 
GoodB2G:: 
(:: 
):: 
;:: 
};; 
private>> 
void>> 
GoodG2B>> 
(>> 
)>> 
{?? 
string@@ 
data@@ 
;@@ 
dataBB 
=BB 
$strBB 
;BB D
8CWE117_Improper_Output_Neutralization_for_Logs__File_52bCC @
.CC@ A
GoodG2BSinkCCA L
(CCL M
dataCCM Q
)CCR S
;CCS T
}DD 
privateGG 
voidGG 
GoodB2GGG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
dataJJ 
=JJ 
$strJJ 
;JJ 
{KK 	
tryLL 
{MM 
usingOO 
(OO 
StreamReaderOO #
srOO$ &
=OO' (
newOO) ,
StreamReaderOO- 9
(OO9 :
$strOO: D
)OOD E
)OOE F
{PP 
dataTT 
=TT 
srTT 
.TT 
ReadLineTT &
(TT& '
)TT' (
;TT( )
}UU 
}VV 
catchWW 
(WW 
IOExceptionWW 
exceptIOWW '
)WW' (
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
exceptIOYY2 :
,YY: ;
$strYY< W
)YYW X
;YYX Y
}ZZ 
}[[ 	D
8CWE117_Improper_Output_Neutralization_for_Logs__File_52b\\ @
.\\@ A
GoodB2GSink\\A L
(\\L M
data\\M Q
)\\R S
;\\S T
}]] 
}__ 
}`` è
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_52b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_52b >
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ D
8CWE117_Improper_Output_Neutralization_for_Logs__File_52c @
.@ A
BadSinkA H
(H I
dataI M
)N O
;O P
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% D
8CWE117_Improper_Output_Neutralization_for_Logs__File_52c&& @
.&&@ A
GoodG2BSink&&A L
(&&L M
data&&M Q
)&&R S
;&&S T
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ D
8CWE117_Improper_Output_Neutralization_for_Logs__File_52c,, @
.,,@ A
GoodB2GSink,,A L
(,,L M
data,,M Q
),,R S
;,,S T
}-- 
}// 
}00 î
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_52c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_52c >
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH 
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_53a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_53a >
:? @
AbstractTestCaseA Q
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try## 
{$$ 
using&& 
(&& 
StreamReader&& #
sr&&$ &
=&&' (
new&&) ,
StreamReader&&- 9
(&&9 :
$str&&: D
)&&D E
)&&E F
{'' 
data++ 
=++ 
sr++ 
.++ 
ReadLine++ &
(++& '
)++' (
;++( )
},, 
}-- 
catch.. 
(.. 
IOException.. 
exceptIO.. '
)..' (
{// 
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 "
.00" #
LogLevel00# +
.00+ ,
Warn00, 0
,000 1
exceptIO002 :
,00: ;
$str00< W
)00W X
;00X Y
}11 
}22 	D
8CWE117_Improper_Output_Neutralization_for_Logs__File_53b33 @
.33@ A
BadSink33A H
(33H I
data33I M
)33N O
;33O P
}44 
public77 

override77 
void77 
Good77 
(77 
)77 
{88 
GoodG2B99 
(99 
)99 
;99 
GoodB2G:: 
(:: 
):: 
;:: 
};; 
private>> 
void>> 
GoodG2B>> 
(>> 
)>> 
{?? 
string@@ 
data@@ 
;@@ 
dataBB 
=BB 
$strBB 
;BB D
8CWE117_Improper_Output_Neutralization_for_Logs__File_53bCC @
.CC@ A
GoodG2BSinkCCA L
(CCL M
dataCCM Q
)CCR S
;CCS T
}DD 
privateGG 
voidGG 
GoodB2GGG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
dataJJ 
=JJ 
$strJJ 
;JJ 
{KK 	
tryLL 
{MM 
usingOO 
(OO 
StreamReaderOO #
srOO$ &
=OO' (
newOO) ,
StreamReaderOO- 9
(OO9 :
$strOO: D
)OOD E
)OOE F
{PP 
dataTT 
=TT 
srTT 
.TT 
ReadLineTT &
(TT& '
)TT' (
;TT( )
}UU 
}VV 
catchWW 
(WW 
IOExceptionWW 
exceptIOWW '
)WW' (
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
exceptIOYY2 :
,YY: ;
$strYY< W
)YYW X
;YYX Y
}ZZ 
}[[ 	D
8CWE117_Improper_Output_Neutralization_for_Logs__File_53b\\ @
.\\@ A
GoodB2GSink\\A L
(\\L M
data\\M Q
)\\R S
;\\S T
}]] 
}__ 
}`` è
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_53b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_53b >
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ D
8CWE117_Improper_Output_Neutralization_for_Logs__File_53c @
.@ A
BadSinkA H
(H I
dataI M
)N O
;O P
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% D
8CWE117_Improper_Output_Neutralization_for_Logs__File_53c&& @
.&&@ A
GoodG2BSink&&A L
(&&L M
data&&M Q
)&&R S
;&&S T
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ D
8CWE117_Improper_Output_Neutralization_for_Logs__File_53c,, @
.,,@ A
GoodB2GSink,,A L
(,,L M
data,,M Q
),,R S
;,,S T
}-- 
}// 
}00 è
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_53c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_53c >
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ D
8CWE117_Improper_Output_Neutralization_for_Logs__File_53d @
.@ A
BadSinkA H
(H I
dataI M
)N O
;O P
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% D
8CWE117_Improper_Output_Neutralization_for_Logs__File_53d&& @
.&&@ A
GoodG2BSink&&A L
(&&L M
data&&M Q
)&&R S
;&&S T
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ D
8CWE117_Improper_Output_Neutralization_for_Logs__File_53d,, @
.,,@ A
GoodB2GSink,,A L
(,,L M
data,,M Q
),,R S
;,,S T
}-- 
}// 
}00 î
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_53d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_53d >
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH 
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_54a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54a >
:? @
AbstractTestCaseA Q
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try## 
{$$ 
using&& 
(&& 
StreamReader&& #
sr&&$ &
=&&' (
new&&) ,
StreamReader&&- 9
(&&9 :
$str&&: D
)&&D E
)&&E F
{'' 
data++ 
=++ 
sr++ 
.++ 
ReadLine++ &
(++& '
)++' (
;++( )
},, 
}-- 
catch.. 
(.. 
IOException.. 
exceptIO.. '
)..' (
{// 
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 "
.00" #
LogLevel00# +
.00+ ,
Warn00, 0
,000 1
exceptIO002 :
,00: ;
$str00< W
)00W X
;00X Y
}11 
}22 	D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54b33 @
.33@ A
BadSink33A H
(33H I
data33I M
)33N O
;33O P
}44 
public77 

override77 
void77 
Good77 
(77 
)77 
{88 
GoodG2B99 
(99 
)99 
;99 
GoodB2G:: 
(:: 
):: 
;:: 
};; 
private>> 
void>> 
GoodG2B>> 
(>> 
)>> 
{?? 
string@@ 
data@@ 
;@@ 
dataBB 
=BB 
$strBB 
;BB D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54bCC @
.CC@ A
GoodG2BSinkCCA L
(CCL M
dataCCM Q
)CCR S
;CCS T
}DD 
privateGG 
voidGG 
GoodB2GGG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
dataJJ 
=JJ 
$strJJ 
;JJ 
{KK 	
tryLL 
{MM 
usingOO 
(OO 
StreamReaderOO #
srOO$ &
=OO' (
newOO) ,
StreamReaderOO- 9
(OO9 :
$strOO: D
)OOD E
)OOE F
{PP 
dataTT 
=TT 
srTT 
.TT 
ReadLineTT &
(TT& '
)TT' (
;TT( )
}UU 
}VV 
catchWW 
(WW 
IOExceptionWW 
exceptIOWW '
)WW' (
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
exceptIOYY2 :
,YY: ;
$strYY< W
)YYW X
;YYX Y
}ZZ 
}[[ 	D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54b\\ @
.\\@ A
GoodB2GSink\\A L
(\\L M
data\\M Q
)\\R S
;\\S T
}]] 
}__ 
}`` è
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_54b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54b >
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54c @
.@ A
BadSinkA H
(H I
dataI M
)N O
;O P
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54c&& @
.&&@ A
GoodG2BSink&&A L
(&&L M
data&&M Q
)&&R S
;&&S T
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54c,, @
.,,@ A
GoodB2GSink,,A L
(,,L M
data,,M Q
),,R S
;,,S T
}-- 
}// 
}00 è
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_54c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54c >
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54d @
.@ A
BadSinkA H
(H I
dataI M
)N O
;O P
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54d&& @
.&&@ A
GoodG2BSink&&A L
(&&L M
data&&M Q
)&&R S
;&&S T
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54d,, @
.,,@ A
GoodB2GSink,,A L
(,,L M
data,,M Q
),,R S
;,,S T
}-- 
}// 
}00 è
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_54d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54d >
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54e @
.@ A
BadSinkA H
(H I
dataI M
)N O
;O P
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54e&& @
.&&@ A
GoodG2BSink&&A L
(&&L M
data&&M Q
)&&R S
;&&S T
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54e,, @
.,,@ A
GoodB2GSink,,A L
(,,L M
data,,M Q
),,R S
;,,S T
}-- 
}// 
}00 î
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_54e.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_54e >
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH ¡
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_61a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_61a >
:? @
AbstractTestCaseA Q
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
= D
8CWE117_Improper_Output_Neutralization_for_Logs__File_61b N
.N O
	BadSourceO X
(X Y
)Y Z
;Z [
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodG2B-- 
(-- 
)-- 
;-- 
GoodB2G.. 
(.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
)22  !
{33 
string44 
data44 
=44 D
8CWE117_Improper_Output_Neutralization_for_Logs__File_61b44 N
.44N O
GoodG2BSource44O \
(44\ ]
)44] ^
;44^ _
try55 
{66 	
int77 
value77 
=77 
int77 
.77 
Parse77 !
(77! "
data77" &
)77& '
;77' (
}88 	
catch99 
(99 
FormatException99 
exceptNumberFormat99 1
)991 2
{:: 	
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< 
.<< 
LogLevel<< '
.<<' (
Warn<<( ,
,<<, -
exceptNumberFormat<<. @
,<<@ A
$str<<B \
+<<] ^
data<<_ c
)<<c d
;<<d e
}== 	
}>> 
privateAA 
staticAA 
voidAA 
GoodB2GAA 
(AA  
)AA  !
{BB 
stringCC 
dataCC 
=CC D
8CWE117_Improper_Output_Neutralization_for_Logs__File_61bCC N
.CCN O
GoodB2GSourceCCO \
(CC\ ]
)CC] ^
;CC^ _
tryDD 
{EE 	
intFF 
valueFF 
=FF 
intFF 
.FF 
ParseFF !
(FF! "
dataFF" &
)FF& '
;FF' (
}GG 	
catchHH 
(HH 
FormatExceptionHH 
exceptNumberFormatHH 1
)HH1 2
{II 	
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK 
.KK 
LogLevelKK '
.KK' (
WarnKK( ,
,KK, -
exceptNumberFormatKK. @
,KK@ A
$strKKB f
+KKg h
exceptNumberFormatKKi {
)KK{ |
;KK| }
}LL 	
}MM 
}OO 
}PP ¡
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_61b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_61b >
{ 
public 

static 
string 
	BadSource "
(" #
)# $
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try## 
{$$ 
using&& 
(&& 
StreamReader&& #
sr&&$ &
=&&' (
new&&) ,
StreamReader&&- 9
(&&9 :
$str&&: D
)&&D E
)&&E F
{'' 
data++ 
=++ 
sr++ 
.++ 
ReadLine++ &
(++& '
)++' (
;++( )
},, 
}-- 
catch.. 
(.. 
IOException.. 
exceptIO.. '
)..' (
{// 
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 "
.00" #
LogLevel00# +
.00+ ,
Warn00, 0
,000 1
exceptIO002 :
,00: ;
$str00< W
)00W X
;00X Y
}11 
}22 	
return33 
data33 
;33 
}44 
public99 

static99 
string99 
GoodG2BSource99 &
(99& '
)99' (
{:: 
string;; 
data;; 
;;; 
data== 
=== 
$str== 
;== 
return>> 
data>> 
;>> 
}?? 
publicBB 

staticBB 
stringBB 
GoodB2GSourceBB &
(BB& '
)BB' (
{CC 
stringDD 
dataDD 
;DD 
dataEE 
=EE 
$strEE 
;EE 
{FF 	
tryGG 
{HH 
usingJJ 
(JJ 
StreamReaderJJ #
srJJ$ &
=JJ' (
newJJ) ,
StreamReaderJJ- 9
(JJ9 :
$strJJ: D
)JJD E
)JJE F
{KK 
dataOO 
=OO 
srOO 
.OO 
ReadLineOO &
(OO& '
)OO' (
;OO( )
}PP 
}QQ 
catchRR 
(RR 
IOExceptionRR 
exceptIORR '
)RR' (
{SS 
IOTT 
.TT 
LoggerTT 
.TT 
LogTT 
(TT 
NLogTT "
.TT" #
LogLevelTT# +
.TT+ ,
WarnTT, 0
,TT0 1
exceptIOTT2 :
,TT: ;
$strTT< W
)TTW X
;TTX Y
}UU 
}VV 	
returnWW 
dataWW 
;WW 
}XX 
}ZZ 
}[[ Ô$
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_66a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_66a >
:? @
AbstractTestCaseA Q
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try## 
{$$ 
using&& 
(&& 
StreamReader&& #
sr&&$ &
=&&' (
new&&) ,
StreamReader&&- 9
(&&9 :
$str&&: D
)&&D E
)&&E F
{'' 
data++ 
=++ 
sr++ 
.++ 
ReadLine++ &
(++& '
)++' (
;++( )
},, 
}-- 
catch.. 
(.. 
IOException.. 
exceptIO.. '
)..' (
{// 
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 "
.00" #
LogLevel00# +
.00+ ,
Warn00, 0
,000 1
exceptIO002 :
,00: ;
$str00< W
)00W X
;00X Y
}11 
}22 	
string33 
[33 
]33 
	dataArray33 
=33 
new33  
string33! '
[33' (
$num33( )
]33) *
;33* +
	dataArray44 
[44 
$num44 
]44 
=44 
data44 
;44 D
8CWE117_Improper_Output_Neutralization_for_Logs__File_66b55 @
.55@ A
BadSink55A H
(55H I
	dataArray55I R
)55T U
;55U V
}66 
public99 

override99 
void99 
Good99 
(99 
)99 
{:: 
GoodG2B;; 
(;; 
);; 
;;; 
GoodB2G<< 
(<< 
)<< 
;<< 
}== 
private@@ 
static@@ 
void@@ 
GoodG2B@@ 
(@@  
)@@  !
{AA 
stringBB 
dataBB 
;BB 
dataDD 
=DD 
$strDD 
;DD 
stringEE 
[EE 
]EE 
	dataArrayEE 
=EE 
newEE  
stringEE! '
[EE' (
$numEE( )
]EE) *
;EE* +
	dataArrayFF 
[FF 
$numFF 
]FF 
=FF 
dataFF 
;FF D
8CWE117_Improper_Output_Neutralization_for_Logs__File_66bGG @
.GG@ A
GoodG2BSinkGGA L
(GGL M
	dataArrayGGM V
)GGX Y
;GGY Z
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
)KK  !
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{OO 	
tryPP 
{QQ 
usingSS 
(SS 
StreamReaderSS #
srSS$ &
=SS' (
newSS) ,
StreamReaderSS- 9
(SS9 :
$strSS: D
)SSD E
)SSE F
{TT 
dataXX 
=XX 
srXX 
.XX 
ReadLineXX &
(XX& '
)XX' (
;XX( )
}YY 
}ZZ 
catch[[ 
([[ 
IOException[[ 
exceptIO[[ '
)[[' (
{\\ 
IO]] 
.]] 
Logger]] 
.]] 
Log]] 
(]] 
NLog]] "
.]]" #
LogLevel]]# +
.]]+ ,
Warn]], 0
,]]0 1
exceptIO]]2 :
,]]: ;
$str]]< W
)]]W X
;]]X Y
}^^ 
}__ 	
string`` 
[`` 
]`` 
	dataArray`` 
=`` 
new``  
string``! '
[``' (
$num``( )
]``) *
;``* +
	dataArrayaa 
[aa 
$numaa 
]aa 
=aa 
dataaa 
;aa D
8CWE117_Improper_Output_Neutralization_for_Logs__File_66bbb @
.bb@ A
GoodB2GSinkbbA L
(bbL M
	dataArraybbM V
)bbX Y
;bbY Z
}cc 
}ee 
}ff ø
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_66b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_66b >
{ 
public 

static 
void 
BadSink 
( 
string %
[% &
]& '
	dataArray( 1
)2 3
{ 
string 
data 
= 
	dataArray 
[  
$num  !
]! "
;" #
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
string--# )
[--) *
]--* +
	dataArray--, 5
)--6 7
{.. 
string// 
data// 
=// 
	dataArray// 
[//  
$num//  !
]//! "
;//" #
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
string<<# )
[<<) *
]<<* +
	dataArray<<, 5
)<<6 7
{== 
string>> 
data>> 
=>> 
	dataArray>> 
[>>  
$num>>  !
]>>! "
;>>" #
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK %
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_67a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_67a >
:? @
AbstractTestCaseA Q
{ 
public 

class 
	Container 
{ 
public   
string   
containerOne   "
;  " #
}!! 
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
string%% 
data%% 
;%% 
data&& 
=&& 
$str&& 
;&& 
{'' 	
try(( 
{)) 
using++ 
(++ 
StreamReader++ #
sr++$ &
=++' (
new++) ,
StreamReader++- 9
(++9 :
$str++: D
)++D E
)++E F
{,, 
data00 
=00 
sr00 
.00 
ReadLine00 &
(00& '
)00' (
;00( )
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	
	Container88 
dataContainer88 
=88  !
new88" %
	Container88& /
(88/ 0
)880 1
;881 2
dataContainer99 
.99 
containerOne99 "
=99# $
data99% )
;99) *D
8CWE117_Improper_Output_Neutralization_for_Logs__File_67b:: @
.::@ A
BadSink::A H
(::H I
dataContainer::I V
)::X Y
;::Y Z
};; 
public>> 

override>> 
void>> 
Good>> 
(>> 
)>> 
{?? 
GoodG2B@@ 
(@@ 
)@@ 
;@@ 
GoodB2GAA 
(AA 
)AA 
;AA 
}BB 
privateEE 
staticEE 
voidEE 
GoodG2BEE 
(EE  
)EE  !
{FF 
stringGG 
dataGG 
;GG 
dataII 
=II 
$strII 
;II 
	ContainerJJ 
dataContainerJJ 
=JJ  !
newJJ" %
	ContainerJJ& /
(JJ/ 0
)JJ0 1
;JJ1 2
dataContainerKK 
.KK 
containerOneKK "
=KK# $
dataKK% )
;KK) *D
8CWE117_Improper_Output_Neutralization_for_Logs__File_67bLL @
.LL@ A
GoodG2BSinkLLA L
(LLL M
dataContainerLLM Z
)LL\ ]
;LL] ^
}MM 
privatePP 
staticPP 
voidPP 
GoodB2GPP 
(PP  
)PP  !
{QQ 
stringRR 
dataRR 
;RR 
dataSS 
=SS 
$strSS 
;SS 
{TT 	
tryUU 
{VV 
usingXX 
(XX 
StreamReaderXX #
srXX$ &
=XX' (
newXX) ,
StreamReaderXX- 9
(XX9 :
$strXX: D
)XXD E
)XXE F
{YY 
data]] 
=]] 
sr]] 
.]] 
ReadLine]] &
(]]& '
)]]' (
;]]( )
}^^ 
}__ 
catch`` 
(`` 
IOException`` 
exceptIO`` '
)``' (
{aa 
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb "
.bb" #
LogLevelbb# +
.bb+ ,
Warnbb, 0
,bb0 1
exceptIObb2 :
,bb: ;
$strbb< W
)bbW X
;bbX Y
}cc 
}dd 	
	Containeree 
dataContaineree 
=ee  !
newee" %
	Containeree& /
(ee/ 0
)ee0 1
;ee1 2
dataContainerff 
.ff 
containerOneff "
=ff# $
dataff% )
;ff) *D
8CWE117_Improper_Output_Neutralization_for_Logs__File_67bgg @
.gg@ A
GoodB2GSinkggA L
(ggL M
dataContainerggM Z
)gg\ ]
;gg] ^
}hh 
}jj 
}kk ©
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_67b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_67b >
{ 
public 

static 
void 
BadSink 
( D
8CWE117_Improper_Output_Neutralization_for_Logs__File_67a W
.W X
	ContainerX a
dataContainerb o
)p q
{ 
string 
data 
= 
dataContainer #
.# $
containerOne$ 0
;0 1
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #D
8CWE117_Improper_Output_Neutralization_for_Logs__File_67a--# [
.--[ \
	Container--\ e
dataContainer--f s
)--t u
{.. 
string// 
data// 
=// 
dataContainer// #
.//# $
containerOne//$ 0
;//0 1
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #D
8CWE117_Improper_Output_Neutralization_for_Logs__File_67a<<# [
.<<[ \
	Container<<\ e
dataContainer<<f s
)<<t u
{== 
string>> 
data>> 
=>> 
dataContainer>> #
.>># $
containerOne>>$ 0
;>>0 1
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK ´
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_68a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_68a >
:? @
AbstractTestCaseA Q
{ 
public 

static 
string 
data 
; 
public   

override   
void   
Bad   
(   
)   
{!! 
data"" 
="" 
$str"" 
;"" 
{## 	
try$$ 
{%% 
using'' 
('' 
StreamReader'' #
sr''$ &
=''' (
new'') ,
StreamReader''- 9
(''9 :
$str'': D
)''D E
)''E F
{(( 
data,, 
=,, 
sr,, 
.,, 
ReadLine,, &
(,,& '
),,' (
;,,( )
}-- 
}.. 
catch// 
(// 
IOException// 
exceptIO// '
)//' (
{00 
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 "
.11" #
LogLevel11# +
.11+ ,
Warn11, 0
,110 1
exceptIO112 :
,11: ;
$str11< W
)11W X
;11X Y
}22 
}33 	D
8CWE117_Improper_Output_Neutralization_for_Logs__File_68b44 @
.44@ A
BadSink44A H
(44H I
)44I J
;44J K
}55 
public88 

override88 
void88 
Good88 
(88 
)88 
{99 
GoodG2B:: 
(:: 
):: 
;:: 
GoodB2G;; 
(;; 
);; 
;;; 
}<< 
private?? 
static?? 
void?? 
GoodG2B?? 
(??  
)??  !
{@@ 
dataBB 
=BB 
$strBB 
;BB D
8CWE117_Improper_Output_Neutralization_for_Logs__File_68bCC @
.CC@ A
GoodG2BSinkCCA L
(CCL M
)CCM N
;CCN O
}DD 
privateGG 
staticGG 
voidGG 
GoodB2GGG 
(GG  
)GG  !
{HH 
dataII 
=II 
$strII 
;II 
{JJ 	
tryKK 
{LL 
usingNN 
(NN 
StreamReaderNN #
srNN$ &
=NN' (
newNN) ,
StreamReaderNN- 9
(NN9 :
$strNN: D
)NND E
)NNE F
{OO 
dataSS 
=SS 
srSS 
.SS 
ReadLineSS &
(SS& '
)SS' (
;SS( )
}TT 
}UU 
catchVV 
(VV 
IOExceptionVV 
exceptIOVV '
)VV' (
{WW 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptIOXX2 :
,XX: ;
$strXX< W
)XXW X
;XXX Y
}YY 
}ZZ 	D
8CWE117_Improper_Output_Neutralization_for_Logs__File_68b[[ @
.[[@ A
GoodB2GSink[[A L
([[L M
)[[M N
;[[N O
}\\ 
}^^ 
}__ ý
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_68b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_68b >
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
string 
data 
= D
8CWE117_Improper_Output_Neutralization_for_Logs__File_68a N
.N O
dataO S
;S T
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
)--# $
{.. 
string// 
data// 
=// D
8CWE117_Improper_Output_Neutralization_for_Logs__File_68a// N
.//N O
data//O S
;//S T
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
)<<# $
{== 
string>> 
data>> 
=>> D
8CWE117_Improper_Output_Neutralization_for_Logs__File_68a>> N
.>>N O
data>>O S
;>>S T
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK Â
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_71a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_71a >
:? @
AbstractTestCaseA Q
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try## 
{$$ 
using&& 
(&& 
StreamReader&& #
sr&&$ &
=&&' (
new&&) ,
StreamReader&&- 9
(&&9 :
$str&&: D
)&&D E
)&&E F
{'' 
data++ 
=++ 
sr++ 
.++ 
ReadLine++ &
(++& '
)++' (
;++( )
},, 
}-- 
catch.. 
(.. 
IOException.. 
exceptIO.. '
)..' (
{// 
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 "
.00" #
LogLevel00# +
.00+ ,
Warn00, 0
,000 1
exceptIO002 :
,00: ;
$str00< W
)00W X
;00X Y
}11 
}22 	D
8CWE117_Improper_Output_Neutralization_for_Logs__File_71b33 @
.33@ A
BadSink33A H
(33H I
(33I J
Object33J P
)33P Q
data33Q U
)33W X
;33X Y
}44 
public77 

override77 
void77 
Good77 
(77 
)77 
{88 
GoodG2B99 
(99 
)99 
;99 
GoodB2G:: 
(:: 
):: 
;:: 
};; 
private>> 
static>> 
void>> 
GoodG2B>> 
(>>  
)>>  !
{?? 
string@@ 
data@@ 
;@@ 
dataBB 
=BB 
$strBB 
;BB D
8CWE117_Improper_Output_Neutralization_for_Logs__File_71bCC @
.CC@ A
GoodG2BSinkCCA L
(CCL M
(CCM N
ObjectCCN T
)CCT U
dataCCU Y
)CC[ \
;CC\ ]
}DD 
privateGG 
staticGG 
voidGG 
GoodB2GGG 
(GG  
)GG  !
{HH 
stringII 
dataII 
;II 
dataJJ 
=JJ 
$strJJ 
;JJ 
{KK 	
tryLL 
{MM 
usingOO 
(OO 
StreamReaderOO #
srOO$ &
=OO' (
newOO) ,
StreamReaderOO- 9
(OO9 :
$strOO: D
)OOD E
)OOE F
{PP 
dataTT 
=TT 
srTT 
.TT 
ReadLineTT &
(TT& '
)TT' (
;TT( )
}UU 
}VV 
catchWW 
(WW 
IOExceptionWW 
exceptIOWW '
)WW' (
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
exceptIOYY2 :
,YY: ;
$strYY< W
)YYW X
;YYX Y
}ZZ 
}[[ 	D
8CWE117_Improper_Output_Neutralization_for_Logs__File_71b\\ @
.\\@ A
GoodB2GSink\\A L
(\\L M
(\\M N
Object\\N T
)\\T U
data\\U Y
)\\[ \
;\\\ ]
}]] 
}__ 
}`` ª
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_71b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_71b >
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
string 
data 
= 
( 
string 
) 

dataObject (
;( )
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
Object..# )

dataObject..* 4
)..5 6
{// 
string00 
data00 
=00 
(00 
string00 
)00 

dataObject00 (
;00( )
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
Object==# )

dataObject==* 4
)==5 6
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 

dataObject?? (
;??( )
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ²,
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_72a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_72a >
:? @
AbstractTestCaseA Q
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{## 	
try$$ 
{%% 
using'' 
('' 
StreamReader'' #
sr''$ &
=''' (
new'') ,
StreamReader''- 9
(''9 :
$str'': D
)''D E
)''E F
{(( 
data,, 
=,, 
sr,, 
.,, 
ReadLine,, &
(,,& '
),,' (
;,,( )
}-- 
}.. 
catch// 
(// 
IOException// 
exceptIO// '
)//' (
{00 
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 "
.11" #
LogLevel11# +
.11+ ,
Warn11, 0
,110 1
exceptIO112 :
,11: ;
$str11< W
)11W X
;11X Y
}22 
}33 	
	Hashtable44 
dataHashtable44 
=44  !
new44" %
	Hashtable44& /
(44/ 0
$num440 1
)441 2
;442 3
dataHashtable55 
.55 
Add55 
(55 
$num55 
,55 
data55 !
)55! "
;55" #
dataHashtable66 
.66 
Add66 
(66 
$num66 
,66 
data66 !
)66! "
;66" #
dataHashtable77 
.77 
Add77 
(77 
$num77 
,77 
data77 !
)77! "
;77" #D
8CWE117_Improper_Output_Neutralization_for_Logs__File_72b88 @
.88@ A
BadSink88A H
(88H I
dataHashtable88I V
)88X Y
;88Y Z
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
)<< 
{== 
GoodG2B>> 
(>> 
)>> 
;>> 
GoodB2G?? 
(?? 
)?? 
;?? 
}@@ 
privateCC 
staticCC 
voidCC 
GoodG2BCC 
(CC  
)CC  !
{DD 
stringEE 
dataEE 
;EE 
dataGG 
=GG 
$strGG 
;GG 
	HashtableHH 
dataHashtableHH 
=HH  !
newHH" %
	HashtableHH& /
(HH/ 0
$numHH0 1
)HH1 2
;HH2 3
dataHashtableII 
.II 
AddII 
(II 
$numII 
,II 
dataII !
)II! "
;II" #
dataHashtableJJ 
.JJ 
AddJJ 
(JJ 
$numJJ 
,JJ 
dataJJ !
)JJ! "
;JJ" #
dataHashtableKK 
.KK 
AddKK 
(KK 
$numKK 
,KK 
dataKK !
)KK! "
;KK" #D
8CWE117_Improper_Output_Neutralization_for_Logs__File_72bLL @
.LL@ A
GoodG2BSinkLLA L
(LLL M
dataHashtableLLM Z
)LL\ ]
;LL] ^
}MM 
privatePP 
staticPP 
voidPP 
GoodB2GPP 
(PP  
)PP  !
{QQ 
stringRR 
dataRR 
;RR 
dataSS 
=SS 
$strSS 
;SS 
{TT 	
tryUU 
{VV 
usingXX 
(XX 
StreamReaderXX #
srXX$ &
=XX' (
newXX) ,
StreamReaderXX- 9
(XX9 :
$strXX: D
)XXD E
)XXE F
{YY 
data]] 
=]] 
sr]] 
.]] 
ReadLine]] &
(]]& '
)]]' (
;]]( )
}^^ 
}__ 
catch`` 
(`` 
IOException`` 
exceptIO`` '
)``' (
{aa 
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb "
.bb" #
LogLevelbb# +
.bb+ ,
Warnbb, 0
,bb0 1
exceptIObb2 :
,bb: ;
$strbb< W
)bbW X
;bbX Y
}cc 
}dd 	
	Hashtableee 
dataHashtableee 
=ee  !
newee" %
	Hashtableee& /
(ee/ 0
$numee0 1
)ee1 2
;ee2 3
dataHashtableff 
.ff 
Addff 
(ff 
$numff 
,ff 
dataff !
)ff! "
;ff" #
dataHashtablegg 
.gg 
Addgg 
(gg 
$numgg 
,gg 
datagg !
)gg! "
;gg" #
dataHashtablehh 
.hh 
Addhh 
(hh 
$numhh 
,hh 
datahh !
)hh! "
;hh" #D
8CWE117_Improper_Output_Neutralization_for_Logs__File_72bii @
.ii@ A
GoodB2GSinkiiA L
(iiL M
dataHashtableiiM Z
)ii\ ]
;ii] ^
}jj 
}ll 
}mm Õ
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_72b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_72b >
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
string 
data 
= 
( 
string 
) 
dataHashtable ,
[, -
$num- .
]. /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
	Hashtable..# ,
dataHashtable..- :
)..; <
{// 
string00 
data00 
=00 
(00 
string00 
)00 
dataHashtable00 ,
[00, -
$num00- .
]00. /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
	Hashtable==# ,
dataHashtable==- :
)==; <
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 
dataHashtable?? ,
[??, -
$num??- .
]??. /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ¸,
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_73a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_73a >
:? @
AbstractTestCaseA Q
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{## 	
try$$ 
{%% 
using'' 
('' 
StreamReader'' #
sr''$ &
=''' (
new'') ,
StreamReader''- 9
(''9 :
$str'': D
)''D E
)''E F
{(( 
data,, 
=,, 
sr,, 
.,, 
ReadLine,, &
(,,& '
),,' (
;,,( )
}-- 
}.. 
catch// 
(// 
IOException// 
exceptIO// '
)//' (
{00 
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 "
.11" #
LogLevel11# +
.11+ ,
Warn11, 0
,110 1
exceptIO112 :
,11: ;
$str11< W
)11W X
;11X Y
}22 
}33 	

LinkedList44 
<44 
string44 
>44 
dataLinkedList44 )
=44* +
new44, /

LinkedList440 :
<44: ;
string44; A
>44A B
(44B C
)44C D
;44D E
dataLinkedList55 
.55 
AddLast55 
(55 
data55 #
)55# $
;55$ %
dataLinkedList66 
.66 
AddLast66 
(66 
data66 #
)66# $
;66$ %
dataLinkedList77 
.77 
AddLast77 
(77 
data77 #
)77# $
;77$ %D
8CWE117_Improper_Output_Neutralization_for_Logs__File_73b88 @
.88@ A
BadSink88A H
(88H I
dataLinkedList88I W
)88Y Z
;88Z [
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
)<< 
{== 
GoodG2B>> 
(>> 
)>> 
;>> 
GoodB2G?? 
(?? 
)?? 
;?? 
}@@ 
privateCC 
staticCC 
voidCC 
GoodG2BCC 
(CC  
)CC  !
{DD 
stringEE 
dataEE 
;EE 
dataGG 
=GG 
$strGG 
;GG 

LinkedListHH 
<HH 
stringHH 
>HH 
dataLinkedListHH )
=HH* +
newHH, /

LinkedListHH0 :
<HH: ;
stringHH; A
>HHA B
(HHB C
)HHC D
;HHD E
dataLinkedListII 
.II 
AddLastII 
(II 
dataII #
)II# $
;II$ %
dataLinkedListJJ 
.JJ 
AddLastJJ 
(JJ 
dataJJ #
)JJ# $
;JJ$ %
dataLinkedListKK 
.KK 
AddLastKK 
(KK 
dataKK #
)KK# $
;KK$ %D
8CWE117_Improper_Output_Neutralization_for_Logs__File_73bLL @
.LL@ A
GoodG2BSinkLLA L
(LLL M
dataLinkedListLLM [
)LL] ^
;LL^ _
}MM 
privatePP 
staticPP 
voidPP 
GoodB2GPP 
(PP  
)PP  !
{QQ 
stringRR 
dataRR 
;RR 
dataSS 
=SS 
$strSS 
;SS 
{TT 	
tryUU 
{VV 
usingXX 
(XX 
StreamReaderXX #
srXX$ &
=XX' (
newXX) ,
StreamReaderXX- 9
(XX9 :
$strXX: D
)XXD E
)XXE F
{YY 
data]] 
=]] 
sr]] 
.]] 
ReadLine]] &
(]]& '
)]]' (
;]]( )
}^^ 
}__ 
catch`` 
(`` 
IOException`` 
exceptIO`` '
)``' (
{aa 
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb "
.bb" #
LogLevelbb# +
.bb+ ,
Warnbb, 0
,bb0 1
exceptIObb2 :
,bb: ;
$strbb< W
)bbW X
;bbX Y
}cc 
}dd 	

LinkedListee 
<ee 
stringee 
>ee 
dataLinkedListee )
=ee* +
newee, /

LinkedListee0 :
<ee: ;
stringee; A
>eeA B
(eeB C
)eeC D
;eeD E
dataLinkedListff 
.ff 
AddLastff 
(ff 
dataff #
)ff# $
;ff$ %
dataLinkedListgg 
.gg 
AddLastgg 
(gg 
datagg #
)gg# $
;gg$ %
dataLinkedListhh 
.hh 
AddLasthh 
(hh 
datahh #
)hh# $
;hh$ %D
8CWE117_Improper_Output_Neutralization_for_Logs__File_73bii @
.ii@ A
GoodB2GSinkiiA L
(iiL M
dataLinkedListiiM [
)ii] ^
;ii^ _
}jj 
}ll 
}mm 
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_73b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_73b >
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
string* 0
>0 1
dataLinkedList2 @
)A B
{ 
string 
data 
= 
dataLinkedList $
.$ %
Last% )
.) *
Value* /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #

LinkedList..# -
<..- .
string... 4
>..4 5
dataLinkedList..6 D
)..E F
{// 
string00 
data00 
=00 
dataLinkedList00 $
.00$ %
Last00% )
.00) *
Value00* /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

LinkedList==# -
<==- .
string==. 4
>==4 5
dataLinkedList==6 D
)==E F
{>> 
string?? 
data?? 
=?? 
dataLinkedList?? $
.??$ %
Last??% )
.??) *
Value??* /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ý/
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_74a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_74a >
:? @
AbstractTestCaseA Q
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{## 	
try$$ 
{%% 
using'' 
('' 
StreamReader'' #
sr''$ &
=''' (
new'') ,
StreamReader''- 9
(''9 :
$str'': D
)''D E
)''E F
{(( 
data,, 
=,, 
sr,, 
.,, 
ReadLine,, &
(,,& '
),,' (
;,,( )
}-- 
}.. 
catch// 
(// 
IOException// 
exceptIO// '
)//' (
{00 
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 "
.11" #
LogLevel11# +
.11+ ,
Warn11, 0
,110 1
exceptIO112 :
,11: ;
$str11< W
)11W X
;11X Y
}22 
}33 	

Dictionary44 
<44 
int44 
,44 
string44 
>44 
dataDictionary44 -
=44. /
new440 3

Dictionary444 >
<44> ?
int44? B
,44B C
string44C I
>44I J
(44J K
)44K L
;44L M
dataDictionary55 
.55 
Add55 
(55 
$num55 
,55 
data55 "
)55" #
;55# $
dataDictionary66 
.66 
Add66 
(66 
$num66 
,66 
data66 "
)66" #
;66# $
dataDictionary77 
.77 
Add77 
(77 
$num77 
,77 
data77 "
)77" #
;77# $D
8CWE117_Improper_Output_Neutralization_for_Logs__File_74b88 @
.88@ A
BadSink88A H
(88H I
dataDictionary88I W
)88Y Z
;88Z [
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
)<< 
{== 
GoodG2B>> 
(>> 
)>> 
;>> 
GoodB2G?? 
(?? 
)?? 
;?? 
}@@ 
privateCC 
staticCC 
voidCC 
GoodG2BCC 
(CC  
)CC  !
{DD 
stringEE 
dataEE 
;EE 
dataGG 
=GG 
$strGG 
;GG 

DictionaryHH 
<HH 
intHH 
,HH 
stringHH 
>HH 
dataDictionaryHH -
=HH. /
newHH0 3

DictionaryHH4 >
<HH> ?
intHH? B
,HHB C
stringHHC I
>HHI J
(HHJ K
)HHK L
;HHL M
dataDictionaryII 
.II 
AddII 
(II 
$numII 
,II 
dataII "
)II" #
;II# $
dataDictionaryJJ 
.JJ 
AddJJ 
(JJ 
$numJJ 
,JJ 
dataJJ "
)JJ" #
;JJ# $
dataDictionaryKK 
.KK 
AddKK 
(KK 
$numKK 
,KK 
dataKK "
)KK" #
;KK# $D
8CWE117_Improper_Output_Neutralization_for_Logs__File_74bLL @
.LL@ A
GoodG2BSinkLLA L
(LLL M
dataDictionaryLLM [
)LL] ^
;LL^ _
}MM 
privatePP 
staticPP 
voidPP 
GoodB2GPP 
(PP  
)PP  !
{QQ 
stringRR 
dataRR 
;RR 
dataSS 
=SS 
$strSS 
;SS 
{TT 	
tryUU 
{VV 
usingXX 
(XX 
StreamReaderXX #
srXX$ &
=XX' (
newXX) ,
StreamReaderXX- 9
(XX9 :
$strXX: D
)XXD E
)XXE F
{YY 
data]] 
=]] 
sr]] 
.]] 
ReadLine]] &
(]]& '
)]]' (
;]]( )
}^^ 
}__ 
catch`` 
(`` 
IOException`` 
exceptIO`` '
)``' (
{aa 
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb "
.bb" #
LogLevelbb# +
.bb+ ,
Warnbb, 0
,bb0 1
exceptIObb2 :
,bb: ;
$strbb< W
)bbW X
;bbX Y
}cc 
}dd 	

Dictionaryee 
<ee 
intee 
,ee 
stringee 
>ee 
dataDictionaryee -
=ee. /
newee0 3

Dictionaryee4 >
<ee> ?
intee? B
,eeB C
stringeeC I
>eeI J
(eeJ K
)eeK L
;eeL M
dataDictionaryff 
.ff 
Addff 
(ff 
$numff 
,ff 
dataff "
)ff" #
;ff# $
dataDictionarygg 
.gg 
Addgg 
(gg 
$numgg 
,gg 
datagg "
)gg" #
;gg# $
dataDictionaryhh 
.hh 
Addhh 
(hh 
$numhh 
,hh 
datahh "
)hh" #
;hh# $D
8CWE117_Improper_Output_Neutralization_for_Logs__File_74bii @
.ii@ A
GoodB2GSinkiiA L
(iiL M
dataDictionaryiiM [
)ii] ^
;ii^ _
}jj 
}ll 
}mm ¾
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_74b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_74b >
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
string. 4
>4 5
dataDictionary6 D
)E F
{ 
string 
data 
= 
dataDictionary $
[$ %
$num% &
]& '
;' (
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. #
(..# $

Dictionary..$ .
<... /
int../ 2
,..2 3
string..3 9
>..9 :
dataDictionary..; I
)..J K
{// 
string00 
data00 
=00 
dataDictionary00 $
[00$ %
$num00% &
]00& '
;00' (
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

Dictionary==# -
<==- .
int==. 1
,==1 2
string==2 8
>==8 9
dataDictionary==: H
)==I J
{>> 
string?? 
data?? 
=?? 
dataDictionary?? $
[??$ %
$num??% &
]??& '
;??' (
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL  C
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_75a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_75a >
:? @
AbstractTestCaseA Q
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{$$ 	
try%% 
{&& 
using(( 
((( 
StreamReader(( #
sr(($ &
=((' (
new(() ,
StreamReader((- 9
(((9 :
$str((: D
)((D E
)((E F
{)) 
data-- 
=-- 
sr-- 
.-- 
ReadLine-- &
(--& '
)--' (
;--( )
}.. 
}// 
catch00 
(00 
IOException00 
exceptIO00 '
)00' (
{11 
IO22 
.22 
Logger22 
.22 
Log22 
(22 
NLog22 "
.22" #
LogLevel22# +
.22+ ,
Warn22, 0
,220 1
exceptIO222 :
,22: ;
$str22< W
)22W X
;22X Y
}33 
}44 	
byte66 
[66 
]66 
dataSerialized66 
=66 
null66  $
;66$ %
try77 
{88 	
BinaryFormatter99 
bf99 
=99  
new99! $
BinaryFormatter99% 4
(994 5
)995 6
;996 7
using:: 
(:: 
var:: 
ms:: 
=:: 
new:: 
MemoryStream::  ,
(::, -
)::- .
)::. /
{;; 
bf<< 
.<< 
	Serialize<< 
(<< 
ms<< 
,<<  
data<<! %
)<<% &
;<<& '
dataSerialized== 
===  
ms==! #
.==# $
ToArray==$ +
(==+ ,
)==, -
;==- .
}>> D
8CWE117_Improper_Output_Neutralization_for_Logs__File_75b?? D
.??D E
BadSink??E L
(??L M
dataSerialized??M [
)??] ^
;??^ _
}@@ 	
catchAA 
(AA "
SerializationExceptionAA %
exceptSerializeAA& 5
)AA5 6
{BB 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
$strCC. X
,CCX Y
exceptSerializeCCZ i
)CCi j
;CCj k
}DD 	
}EE 
publicHH 

overrideHH 
voidHH 
GoodHH 
(HH 
)HH 
{II 
GoodG2BJJ 
(JJ 
)JJ 
;JJ 
GoodB2GKK 
(KK 
)KK 
;KK 
}LL 
privateOO 
staticOO 
voidOO 
GoodG2BOO 
(OO  
)OO  !
{PP 
stringQQ 
dataQQ 
;QQ 
dataRR 
=RR 
$strRR 
;RR 
{SS 	
tryTT 
{UU 
usingWW 
(WW 
StreamReaderWW #
srWW$ &
=WW' (
newWW) ,
StreamReaderWW- 9
(WW9 :
$strWW: D
)WWD E
)WWE F
{XX 
data\\ 
=\\ 
sr\\ 
.\\ 
ReadLine\\ &
(\\& '
)\\' (
;\\( )
}]] 
}^^ 
catch__ 
(__ 
IOException__ 
exceptIO__ '
)__' (
{`` 
IOaa 
.aa 
Loggeraa 
.aa 
Logaa 
(aa 
NLogaa "
.aa" #
LogLevelaa# +
.aa+ ,
Warnaa, 0
,aa0 1
exceptIOaa2 :
,aa: ;
$straa< W
)aaW X
;aaX Y
}bb 
}cc 	
byteee 
[ee 
]ee 
dataSerializedee 
=ee 
nullee  $
;ee$ %
tryff 
{gg 	
BinaryFormatterhh 
bfhh 
=hh  
newhh! $
BinaryFormatterhh% 4
(hh4 5
)hh5 6
;hh6 7
usingii 
(ii 
varii 
msii 
=ii 
newii 
MemoryStreamii  ,
(ii, -
)ii- .
)ii. /
{jj 
bfkk 
.kk 
	Serializekk 
(kk 
mskk 
,kk  
datakk! %
)kk% &
;kk& '
dataSerializedll 
=ll  
msll! #
.ll# $
ToArrayll$ +
(ll+ ,
)ll, -
;ll- .
}mm D
8CWE117_Improper_Output_Neutralization_for_Logs__File_75bnn D
.nnD E
GoodG2BSinknnE P
(nnP Q
dataSerializednnQ _
)nna b
;nnb c
}oo 	
catchpp 
(pp "
SerializationExceptionpp %
exceptSerializepp& 5
)pp5 6
{qq 	
IOrr 
.rr 
Loggerrr 
.rr 
Logrr 
(rr 
NLogrr 
.rr 
LogLevelrr '
.rr' (
Warnrr( ,
,rr, -
$strrr. X
,rrX Y
exceptSerializerrZ i
)rri j
;rrj k
}ss 	
}tt 
privateww 
staticww 
voidww 
GoodB2Gww 
(ww  
)ww  !
{xx 
stringyy 
datayy 
;yy 
datazz 
=zz 
$strzz 
;zz 
{{{ 	
try|| 
{}} 
using 
( 
StreamReader #
sr$ &
=' (
new) ,
StreamReader- 9
(9 :
$str: D
)D E
)E F
{
 
data
 
=
 
sr
 
.
 
ReadLine
 &
(
& '
)
' (
;
( )
}
 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
}
 	
byte
 
[
 
]
 
dataSerialized
 
=
 
null
  $
;
$ %
try
 
{
 	
BinaryFormatter
 
bf
 
=
  
new
! $
BinaryFormatter
% 4
(
4 5
)
5 6
;
6 7
using
 
(
 
var
 
ms
 
=
 
new
 
MemoryStream
  ,
(
, -
)
- .
)
. /
{
 
bf
 
.
 
	Serialize
 
(
 
ms
 
,
  
data
! %
)
% &
;
& '
dataSerialized
 
=
  
ms
! #
.
# $
ToArray
$ +
(
+ ,
)
, -
;
- .
}
 F
8CWE117_Improper_Output_Neutralization_for_Logs__File_75b
 D
.
D E
GoodB2GSink
E P
(
P Q
dataSerialized
Q _
)
a b
;
b c
}
 	
catch
 
(
 $
SerializationException
 %
exceptSerialize
& 5
)
5 6
{
 	
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 
.
 
LogLevel
 '
.
' (
Warn
( ,
,
, -
$str
. X
,
X Y
exceptSerialize
Z i
)
i j
;
j k
}
 	
}
 
} 
} Ú<
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_75b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_75b >
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
string## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
string)) 
))) 
binForm)) &
.))& '
Deserialize))' 2
())2 3
	memStream))3 <
)))< =
;))= >
}** 
try++ 
{,, 
int-- 
value-- 
=-- 
int-- 
.--  
Parse--  %
(--% &
data--& *
)--* +
;--+ ,
}.. 
catch// 
(// 
FormatException// "
exceptNumberFormat//# 5
)//5 6
{00 
IO22 
.22 
Logger22 
.22 
Log22 
(22 
NLog22 "
.22" #
LogLevel22# +
.22+ ,
Warn22, 0
,220 1
exceptNumberFormat222 D
,22D E
$str22F `
+22a b
data22c g
)22g h
;22h i
}33 
}44 	
catch55 
(55 "
SerializationException55 %
exceptSerialize55& 5
)555 6
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. Y
,77Y Z
exceptSerialize77[ j
)77j k
;77k l
}88 	
}99 
public>> 

static>> 
void>> 
GoodG2BSink>> "
(>>" #
byte>># '
[>>' (
]>>( )
dataSerialized>>* 8
)>>9 :
{?? 
try@@ 
{AA 	
stringBB 
dataBB 
;BB 
varCC 
binFormCC 
=CC 
newCC 
BinaryFormatterCC -
(CC- .
)CC. /
;CC/ 0
usingDD 
(DD 
varDD 
	memStreamDD  
=DD! "
newDD# &
MemoryStreamDD' 3
(DD3 4
)DD4 5
)DD5 6
{EE 
	memStreamFF 
.FF 
WriteFF 
(FF  
dataSerializedFF  .
,FF. /
$numFF0 1
,FF1 2
dataSerializedFF3 A
.FFA B
LengthFFB H
)FFH I
;FFI J
	memStreamGG 
.GG 
SeekGG 
(GG 
$numGG  
,GG  !

SeekOriginGG" ,
.GG, -
BeginGG- 2
)GG2 3
;GG3 4
dataHH 
=HH 
(HH 
stringHH 
)HH 
binFormHH &
.HH& '
DeserializeHH' 2
(HH2 3
	memStreamHH3 <
)HH< =
;HH= >
}II 
tryJJ 
{KK 
intLL 
valueLL 
=LL 
intLL 
.LL  
ParseLL  %
(LL% &
dataLL& *
)LL* +
;LL+ ,
}MM 
catchNN 
(NN 
FormatExceptionNN "
exceptNumberFormatNN# 5
)NN5 6
{OO 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptNumberFormatQQ2 D
,QQD E
$strQQF `
+QQa b
dataQQc g
)QQg h
;QQh i
}RR 
}SS 	
catchTT 
(TT "
SerializationExceptionTT %
exceptSerializeTT& 5
)TT5 6
{UU 	
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV 
.VV 
LogLevelVV '
.VV' (
WarnVV( ,
,VV, -
$strVV. Y
,VVY Z
exceptSerializeVV[ j
)VVj k
;VVk l
}WW 	
}XX 
public[[ 

static[[ 
void[[ 
GoodB2GSink[[ "
([[" #
byte[[# '
[[[' (
][[( )
dataSerialized[[* 8
)[[9 :
{\\ 
try]] 
{^^ 	
string__ 
data__ 
;__ 
var`` 
binForm`` 
=`` 
new`` 
BinaryFormatter`` -
(``- .
)``. /
;``/ 0
usingaa 
(aa 
varaa 
	memStreamaa  
=aa! "
newaa# &
MemoryStreamaa' 3
(aa3 4
)aa4 5
)aa5 6
{bb 
	memStreamcc 
.cc 
Writecc 
(cc  
dataSerializedcc  .
,cc. /
$numcc0 1
,cc1 2
dataSerializedcc3 A
.ccA B
LengthccB H
)ccH I
;ccI J
	memStreamdd 
.dd 
Seekdd 
(dd 
$numdd  
,dd  !

SeekOrigindd" ,
.dd, -
Begindd- 2
)dd2 3
;dd3 4
dataee 
=ee 
(ee 
stringee 
)ee 
binFormee &
.ee& '
Deserializeee' 2
(ee2 3
	memStreamee3 <
)ee< =
;ee= >
}ff 
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF j
+nnk l
exceptNumberFormatnnm 
)	nn 
;
nn 
}oo 
}pp 	
catchqq 
(qq "
SerializationExceptionqq %
exceptSerializeqq& 5
)qq5 6
{rr 	
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss 
.ss 
LogLevelss '
.ss' (
Warnss( ,
,ss, -
$strss. Y
,ssY Z
exceptSerializess[ j
)ssj k
;ssk l
}tt 	
}uu 
}ww 
}xx ô!
ÅC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_81a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class D
8CWE117_Improper_Output_Neutralization_for_Logs__File_81a >
:? @
AbstractTestCaseA Q
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try## 
{$$ 
using&& 
(&& 
StreamReader&& #
sr&&$ &
=&&' (
new&&) ,
StreamReader&&- 9
(&&9 :
$str&&: D
)&&D E
)&&E F
{'' 
data++ 
=++ 
sr++ 
.++ 
ReadLine++ &
(++& '
)++' (
;++( )
},, 
}-- 
catch.. 
(.. 
IOException.. 
exceptIO.. '
)..' (
{// 
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 "
.00" #
LogLevel00# +
.00+ ,
Warn00, 0
,000 1
exceptIO002 :
,00: ;
$str00< W
)00W X
;00X Y
}11 
}22 	H
<CWE117_Improper_Output_Neutralization_for_Logs__File_81_base33 D

baseObject33E O
=33P Q
new33R UH
;CWE117_Improper_Output_Neutralization_for_Logs__File_81_bad	33V 
(
33 
)
33 
;
33 

baseObject44 
.44 
Action44 
(44 
data44 
)44  
;44  !
}55 
public88 

override88 
void88 
Good88 
(88 
)88 
{99 
GoodG2B:: 
(:: 
):: 
;:: 
GoodB2G;; 
(;; 
);; 
;;; 
}<< 
private?? 
void?? 
GoodG2B?? 
(?? 
)?? 
{@@ 
stringAA 
dataAA 
;AA 
dataCC 
=CC 
$strCC 
;CC H
<CWE117_Improper_Output_Neutralization_for_Logs__File_81_baseDD D

baseObjectDDE O
=DDP Q
newDDR UL
?CWE117_Improper_Output_Neutralization_for_Logs__File_81_goodG2B	DDV 
(
DD 
)
DD 
;
DD 

baseObjectEE 
.EE 
ActionEE 
(EE 
dataEE 
)EE  
;EE  !
}FF 
privateII 
voidII 
GoodB2GII 
(II 
)II 
{JJ 
stringKK 
dataKK 
;KK 
dataLL 
=LL 
$strLL 
;LL 
{MM 	
tryNN 
{OO 
usingQQ 
(QQ 
StreamReaderQQ #
srQQ$ &
=QQ' (
newQQ) ,
StreamReaderQQ- 9
(QQ9 :
$strQQ: D
)QQD E
)QQE F
{RR 
dataVV 
=VV 
srVV 
.VV 
ReadLineVV &
(VV& '
)VV' (
;VV( )
}WW 
}XX 
catchYY 
(YY 
IOExceptionYY 
exceptIOYY '
)YY' (
{ZZ 
IO[[ 
.[[ 
Logger[[ 
.[[ 
Log[[ 
([[ 
NLog[[ "
.[[" #
LogLevel[[# +
.[[+ ,
Warn[[, 0
,[[0 1
exceptIO[[2 :
,[[: ;
$str[[< W
)[[W X
;[[X Y
}\\ 
}]] 	H
<CWE117_Improper_Output_Neutralization_for_Logs__File_81_base^^ D

baseObject^^E O
=^^P Q
new^^R UL
?CWE117_Improper_Output_Neutralization_for_Logs__File_81_goodB2G	^^V 
(
^^ 
)
^^ 
;
^^ 

baseObject__ 
.__ 
Action__ 
(__ 
data__ 
)__  
;__  !
}`` 
}bb 
}cc 
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_81_bad.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__File_81_bad A
:B CI
<CWE117_Improper_Output_Neutralization_for_Logs__File_81_base	D 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
}(( 
})) 
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_81_base.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
abstract 
class	 H
<CWE117_Improper_Output_Neutralization_for_Logs__File_81_base K
{ 
public 

abstract 
void 
Action 
(  
string  &
data' +
), -
;- .
} 
} 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_81_goodB2G.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__File_81_goodB2G E
:F GI
<CWE117_Improper_Output_Neutralization_for_Logs__File_81_base	H 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B f
+&&g h
exceptNumberFormat&&i {
)&&{ |
;&&| }
}'' 	
}(( 
})) 
}** 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__File_81_goodG2B.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__File_81_goodG2B E
:F GI
<CWE117_Improper_Output_Neutralization_for_Logs__File_81_base	H 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
})) 
}** £'
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_01.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_01 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	 
HttpCookieCollection##  
cookieSources##! .
=##/ 0
req##1 4
.##4 5
Cookies##5 <
;##< =
if$$ 
($$ 
cookieSources$$ 
!=$$  
null$$! %
)$$% &
{%% 
data'' 
='' 
cookieSources'' $
[''$ %
$num''% &
]''& '
.''' (
Value''( -
;''- .
}(( 
})) 	
try** 
{++ 	
int,, 
value,, 
=,, 
int,, 
.,, 
Parse,, !
(,,! "
data,," &
),,& '
;,,' (
}-- 	
catch.. 
(.. 
FormatException.. 
exceptNumberFormat.. 1
)..1 2
{// 	
IO11 
.11 
Logger11 
.11 
Log11 
(11 
NLog11 
.11 
LogLevel11 '
.11' (
Warn11( ,
,11, -
exceptNumberFormat11. @
,11@ A
$str11B \
+11] ^
data11_ c
)11c d
;11d e
}22 	
}33 
public66 

override66 
void66 
Good66 
(66 
HttpRequest66 )
req66* -
,66- .
HttpResponse66/ ;
resp66< @
)66@ A
{77 
GoodG2B88 
(88 
req88 
,88 
resp88 
)88 
;88 
GoodB2G99 
(99 
req99 
,99 
resp99 
)99 
;99 
}:: 
private== 
void== 
GoodG2B== 
(== 
HttpRequest== $
req==% (
,==( )
HttpResponse==* 6
resp==7 ;
)==; <
{>> 
string?? 
data?? 
;?? 
dataAA 
=AA 
$strAA 
;AA 
tryBB 
{CC 	
intDD 
valueDD 
=DD 
intDD 
.DD 
ParseDD !
(DD! "
dataDD" &
)DD& '
;DD' (
}EE 	
catchFF 
(FF 
FormatExceptionFF 
exceptNumberFormatFF 1
)FF1 2
{GG 	
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII 
.II 
LogLevelII '
.II' (
WarnII( ,
,II, -
exceptNumberFormatII. @
,II@ A
$strIIB \
+II] ^
dataII_ c
)IIc d
;IId e
}JJ 	
}KK 
privateNN 
voidNN 
GoodB2GNN 
(NN 
HttpRequestNN $
reqNN% (
,NN( )
HttpResponseNN* 6
respNN7 ;
)NN; <
{OO 
stringPP 
dataPP 
;PP 
dataQQ 
=QQ 
$strQQ 
;QQ 
{SS 	 
HttpCookieCollectionTT  
cookieSourcesTT! .
=TT/ 0
reqTT1 4
.TT4 5
CookiesTT5 <
;TT< =
ifUU 
(UU 
cookieSourcesUU 
!=UU  
nullUU! %
)UU% &
{VV 
dataXX 
=XX 
cookieSourcesXX $
[XX$ %
$numXX% &
]XX& '
.XX' (
ValueXX( -
;XX- .
}YY 
}ZZ 	
try[[ 
{\\ 	
int]] 
value]] 
=]] 
int]] 
.]] 
Parse]] !
(]]! "
data]]" &
)]]& '
;]]' (
}^^ 	
catch__ 
(__ 
FormatException__ 
exceptNumberFormat__ 1
)__1 2
{`` 	
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb 
.bb 
LogLevelbb '
.bb' (
Warnbb( ,
,bb, -
exceptNumberFormatbb. @
,bb@ A
$strbbB f
+bbg h
exceptNumberFormatbbi {
)bb{ |
;bb| }
}cc 	
}dd 
}ff 
}gg ìM
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_02.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_02 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
true   
)   
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$  
HttpCookieCollection%% $
cookieSources%%% 2
=%%3 4
req%%5 8
.%%8 9
Cookies%%9 @
;%%@ A
if&& 
(&& 
cookieSources&& !
!=&&" $
null&&% )
)&&) *
{'' 
data)) 
=)) 
cookieSources)) (
[))( )
$num))) *
]))* +
.))+ ,
Value)), 1
;))1 2
}** 
}++ 
},, 	
else-- 
{.. 	
data11 
=11 
null11 
;11 
}22 	
if33 

(33 
true33 
)33 
{44 	
try55 
{66 
int77 
value77 
=77 
int77 
.77  
Parse77  %
(77% &
data77& *
)77* +
;77+ ,
}88 
catch99 
(99 
FormatException99 "
exceptNumberFormat99# 5
)995 6
{:: 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
exceptNumberFormat<<2 D
,<<D E
$str<<F `
+<<a b
data<<c g
)<<g h
;<<h i
}== 
}>> 	
}?? 
privateCC 
voidCC 
GoodG2B1CC 
(CC 
HttpRequestCC %
reqCC& )
,CC) *
HttpResponseCC+ 7
respCC8 <
)CC< =
{DD 
stringEE 
dataEE 
;EE 
ifFF 

(FF 
falseFF 
)FF 
{GG 	
dataJJ 
=JJ 
nullJJ 
;JJ 
}KK 	
elseLL 
{MM 	
dataOO 
=OO 
$strOO 
;OO 
}PP 	
ifQQ 

(QQ 
trueQQ 
)QQ 
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
private`` 
void`` 
GoodG2B2`` 
(`` 
HttpRequest`` %
req``& )
,``) *
HttpResponse``+ 7
resp``8 <
)``< =
{aa 
stringbb 
databb 
;bb 
ifcc 

(cc 
truecc 
)cc 
{dd 	
dataff 
=ff 
$strff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
nullll 
;ll 
}mm 	
ifnn 

(nn 
truenn 
)nn 
{oo 	
trypp 
{qq 
intrr 
valuerr 
=rr 
intrr 
.rr  
Parserr  %
(rr% &
datarr& *
)rr* +
;rr+ ,
}ss 
catchtt 
(tt 
FormatExceptiontt "
exceptNumberFormattt# 5
)tt5 6
{uu 
IOww 
.ww 
Loggerww 
.ww 
Logww 
(ww 
NLogww "
.ww" #
LogLevelww# +
.ww+ ,
Warnww, 0
,ww0 1
exceptNumberFormatww2 D
,wwD E
$strwwF `
+wwa b
datawwc g
)wwg h
;wwh i
}xx 
}yy 	
}zz 
private}} 
void}} 
GoodB2G1}} 
(}} 
HttpRequest}} %
req}}& )
,}}) *
HttpResponse}}+ 7
resp}}8 <
)}}< =
{~~ 
string 
data 
; 
if
 

(
 
true
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
false
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ 
(
¡¡ 
NLog
¡¡ "
.
¡¡" #
LogLevel
¡¡# +
.
¡¡+ ,
Warn
¡¡, 0
,
¡¡0 1 
exceptNumberFormat
¡¡2 D
,
¡¡D E
$str
¡¡F j
+
¡¡k l 
exceptNumberFormat
¡¡m 
)¡¡ 
;¡¡ 
}
¢¢ 
}
££ 	
}
¤¤ 
private
§§ 
void
§§ 
GoodB2G2
§§ 
(
§§ 
HttpRequest
§§ %
req
§§& )
,
§§) *
HttpResponse
§§+ 7
resp
§§8 <
)
§§< =
{
¨¨ 
string
©© 
data
©© 
;
©© 
if
ªª 

(
ªª 
true
ªª 
)
ªª 
{
«« 	
data
¬¬ 
=
¬¬ 
$str
¬¬ 
;
¬¬ 
{
®® "
HttpCookieCollection
¯¯ $
cookieSources
¯¯% 2
=
¯¯3 4
req
¯¯5 8
.
¯¯8 9
Cookies
¯¯9 @
;
¯¯@ A
if
°° 
(
°° 
cookieSources
°° !
!=
°°" $
null
°°% )
)
°°) *
{
±± 
data
³³ 
=
³³ 
cookieSources
³³ (
[
³³( )
$num
³³) *
]
³³* +
.
³³+ ,
Value
³³, 1
;
³³1 2
}
´´ 
}
µµ 
}
¶¶ 	
else
·· 
{
¸¸ 	
data
»» 
=
»» 
null
»» 
;
»» 
}
¼¼ 	
if
½½ 

(
½½ 
true
½½ 
)
½½ 
{
¾¾ 	
try
¿¿ 
{
ÀÀ 
int
ÁÁ 
value
ÁÁ 
=
ÁÁ 
int
ÁÁ 
.
ÁÁ  
Parse
ÁÁ  %
(
ÁÁ% &
data
ÁÁ& *
)
ÁÁ* +
;
ÁÁ+ ,
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
FormatException
ÃÃ " 
exceptNumberFormat
ÃÃ# 5
)
ÃÃ5 6
{
ÄÄ 
IO
ÆÆ 
.
ÆÆ 
Logger
ÆÆ 
.
ÆÆ 
Log
ÆÆ 
(
ÆÆ 
NLog
ÆÆ "
.
ÆÆ" #
LogLevel
ÆÆ# +
.
ÆÆ+ ,
Warn
ÆÆ, 0
,
ÆÆ0 1 
exceptNumberFormat
ÆÆ2 D
,
ÆÆD E
$str
ÆÆF j
+
ÆÆk l 
exceptNumberFormat
ÆÆm 
)ÆÆ 
;ÆÆ 
}
ÇÇ 
}
ÈÈ 	
}
ÉÉ 
public
ËË 

override
ËË 
void
ËË 
Good
ËË 
(
ËË 
HttpRequest
ËË )
req
ËË* -
,
ËË- .
HttpResponse
ËË/ ;
resp
ËË< @
)
ËË@ A
{
ÌÌ 
GoodG2B1
ÍÍ 
(
ÍÍ 
req
ÍÍ 
,
ÍÍ 
resp
ÍÍ 
)
ÍÍ 
;
ÍÍ 
GoodG2B2
ÎÎ 
(
ÎÎ 
req
ÎÎ 
,
ÎÎ 
resp
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodB2G1
ÏÏ 
(
ÏÏ 
req
ÏÏ 
,
ÏÏ 
resp
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodB2G2
ÐÐ 
(
ÐÐ 
req
ÐÐ 
,
ÐÐ 
resp
ÐÐ 
)
ÐÐ 
;
ÐÐ 
}
ÑÑ 
}ÓÓ 
}ÔÔ ÎP
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_03.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_03 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
$num   
==   
$num   
)   
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$  
HttpCookieCollection%% $
cookieSources%%% 2
=%%3 4
req%%5 8
.%%8 9
Cookies%%9 @
;%%@ A
if&& 
(&& 
cookieSources&& !
!=&&" $
null&&% )
)&&) *
{'' 
data)) 
=)) 
cookieSources)) (
[))( )
$num))) *
]))* +
.))+ ,
Value)), 1
;))1 2
}** 
}++ 
},, 	
else-- 
{.. 	
data11 
=11 
null11 
;11 
}22 	
if33 

(33 
$num33 
==33 
$num33 
)33 
{44 	
try55 
{66 
int77 
value77 
=77 
int77 
.77  
Parse77  %
(77% &
data77& *
)77* +
;77+ ,
}88 
catch99 
(99 
FormatException99 "
exceptNumberFormat99# 5
)995 6
{:: 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
exceptNumberFormat<<2 D
,<<D E
$str<<F `
+<<a b
data<<c g
)<<g h
;<<h i
}== 
}>> 	
}?? 
privateCC 
voidCC 
GoodG2B1CC 
(CC 
HttpRequestCC %
reqCC& )
,CC) *
HttpResponseCC+ 7
respCC8 <
)CC< =
{DD 
stringEE 
dataEE 
;EE 
ifFF 

(FF 
$numFF 
!=FF 
$numFF 
)FF 
{GG 	
dataJJ 
=JJ 
nullJJ 
;JJ 
}KK 	
elseLL 
{MM 	
dataOO 
=OO 
$strOO 
;OO 
}PP 	
ifQQ 

(QQ 
$numQQ 
==QQ 
$numQQ 
)QQ 
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
private`` 
void`` 
GoodG2B2`` 
(`` 
HttpRequest`` %
req``& )
,``) *
HttpResponse``+ 7
resp``8 <
)``< =
{aa 
stringbb 
databb 
;bb 
ifcc 

(cc 
$numcc 
==cc 
$numcc 
)cc 
{dd 	
dataff 
=ff 
$strff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
nullll 
;ll 
}mm 	
ifnn 

(nn 
$numnn 
==nn 
$numnn 
)nn 
{oo 	
trypp 
{qq 
intrr 
valuerr 
=rr 
intrr 
.rr  
Parserr  %
(rr% &
datarr& *
)rr* +
;rr+ ,
}ss 
catchtt 
(tt 
FormatExceptiontt "
exceptNumberFormattt# 5
)tt5 6
{uu 
IOww 
.ww 
Loggerww 
.ww 
Logww 
(ww 
NLogww "
.ww" #
LogLevelww# +
.ww+ ,
Warnww, 0
,ww0 1
exceptNumberFormatww2 D
,wwD E
$strwwF `
+wwa b
datawwc g
)wwg h
;wwh i
}xx 
}yy 	
}zz 
private}} 
void}} 
GoodB2G1}} 
(}} 
HttpRequest}} %
req}}& )
,}}) *
HttpResponse}}+ 7
resp}}8 <
)}}< =
{~~ 
string 
data 
; 
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
$num
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ 
(
¡¡ 
NLog
¡¡ "
.
¡¡" #
LogLevel
¡¡# +
.
¡¡+ ,
Warn
¡¡, 0
,
¡¡0 1 
exceptNumberFormat
¡¡2 D
,
¡¡D E
$str
¡¡F j
+
¡¡k l 
exceptNumberFormat
¡¡m 
)¡¡ 
;¡¡ 
}
¢¢ 
}
££ 	
}
¤¤ 
private
§§ 
void
§§ 
GoodB2G2
§§ 
(
§§ 
HttpRequest
§§ %
req
§§& )
,
§§) *
HttpResponse
§§+ 7
resp
§§8 <
)
§§< =
{
¨¨ 
string
©© 
data
©© 
;
©© 
if
ªª 

(
ªª 
$num
ªª 
==
ªª 
$num
ªª 
)
ªª 
{
«« 	
data
¬¬ 
=
¬¬ 
$str
¬¬ 
;
¬¬ 
{
®® "
HttpCookieCollection
¯¯ $
cookieSources
¯¯% 2
=
¯¯3 4
req
¯¯5 8
.
¯¯8 9
Cookies
¯¯9 @
;
¯¯@ A
if
°° 
(
°° 
cookieSources
°° !
!=
°°" $
null
°°% )
)
°°) *
{
±± 
data
³³ 
=
³³ 
cookieSources
³³ (
[
³³( )
$num
³³) *
]
³³* +
.
³³+ ,
Value
³³, 1
;
³³1 2
}
´´ 
}
µµ 
}
¶¶ 	
else
·· 
{
¸¸ 	
data
»» 
=
»» 
null
»» 
;
»» 
}
¼¼ 	
if
½½ 

(
½½ 
$num
½½ 
==
½½ 
$num
½½ 
)
½½ 
{
¾¾ 	
try
¿¿ 
{
ÀÀ 
int
ÁÁ 
value
ÁÁ 
=
ÁÁ 
int
ÁÁ 
.
ÁÁ  
Parse
ÁÁ  %
(
ÁÁ% &
data
ÁÁ& *
)
ÁÁ* +
;
ÁÁ+ ,
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
FormatException
ÃÃ " 
exceptNumberFormat
ÃÃ# 5
)
ÃÃ5 6
{
ÄÄ 
IO
ÆÆ 
.
ÆÆ 
Logger
ÆÆ 
.
ÆÆ 
Log
ÆÆ 
(
ÆÆ 
NLog
ÆÆ "
.
ÆÆ" #
LogLevel
ÆÆ# +
.
ÆÆ+ ,
Warn
ÆÆ, 0
,
ÆÆ0 1 
exceptNumberFormat
ÆÆ2 D
,
ÆÆD E
$str
ÆÆF j
+
ÆÆk l 
exceptNumberFormat
ÆÆm 
)ÆÆ 
;ÆÆ 
}
ÇÇ 
}
ÈÈ 	
}
ÉÉ 
public
ËË 

override
ËË 
void
ËË 
Good
ËË 
(
ËË 
HttpRequest
ËË )
req
ËË* -
,
ËË- .
HttpResponse
ËË/ ;
resp
ËË< @
)
ËË@ A
{
ÌÌ 
GoodG2B1
ÍÍ 
(
ÍÍ 
req
ÍÍ 
,
ÍÍ 
resp
ÍÍ 
)
ÍÍ 
;
ÍÍ 
GoodG2B2
ÎÎ 
(
ÎÎ 
req
ÎÎ 
,
ÎÎ 
resp
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodB2G1
ÏÏ 
(
ÏÏ 
req
ÏÏ 
,
ÏÏ 
resp
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodB2G2
ÐÐ 
(
ÐÐ 
req
ÐÐ 
,
ÐÐ 
resp
ÐÐ 
)
ÐÐ 
;
ÐÐ 
}
ÑÑ 
}ÓÓ 
}ÔÔ ®Q
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_04.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_04 H
:I J
AbstractTestCaseWebK ^
{ 
private!! 
const!! 
bool!! 
PRIVATE_CONST_TRUE!! )
=!!* +
true!!, 0
;!!0 1
private"" 
const"" 
bool"" 
PRIVATE_CONST_FALSE"" *
=""+ ,
false""- 2
;""2 3
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
HttpRequest$$ (
req$$) ,
,$$, -
HttpResponse$$. :
resp$$; ?
)$$? @
{%% 
string&& 
data&& 
;&& 
if'' 

('' 
PRIVATE_CONST_TRUE'' 
)'' 
{(( 	
data)) 
=)) 
$str)) 
;)) 
{++  
HttpCookieCollection,, $
cookieSources,,% 2
=,,3 4
req,,5 8
.,,8 9
Cookies,,9 @
;,,@ A
if-- 
(-- 
cookieSources-- !
!=--" $
null--% )
)--) *
{.. 
data00 
=00 
cookieSources00 (
[00( )
$num00) *
]00* +
.00+ ,
Value00, 1
;001 2
}11 
}22 
}33 	
else44 
{55 	
data88 
=88 
null88 
;88 
}99 	
if:: 

(:: 
PRIVATE_CONST_TRUE:: 
):: 
{;; 	
try<< 
{== 
int>> 
value>> 
=>> 
int>> 
.>>  
Parse>>  %
(>>% &
data>>& *
)>>* +
;>>+ ,
}?? 
catch@@ 
(@@ 
FormatException@@ "
exceptNumberFormat@@# 5
)@@5 6
{AA 
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC "
.CC" #
LogLevelCC# +
.CC+ ,
WarnCC, 0
,CC0 1
exceptNumberFormatCC2 D
,CCD E
$strCCF `
+CCa b
dataCCc g
)CCg h
;CCh i
}DD 
}EE 	
}FF 
privateJJ 
voidJJ 
GoodG2B1JJ 
(JJ 
HttpRequestJJ %
reqJJ& )
,JJ) *
HttpResponseJJ+ 7
respJJ8 <
)JJ< =
{KK 
stringLL 
dataLL 
;LL 
ifMM 

(MM 
PRIVATE_CONST_FALSEMM 
)MM  
{NN 	
dataQQ 
=QQ 
nullQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataVV 
=VV 
$strVV 
;VV 
}WW 	
ifXX 

(XX 
PRIVATE_CONST_TRUEXX 
)XX 
{YY 	
tryZZ 
{[[ 
int\\ 
value\\ 
=\\ 
int\\ 
.\\  
Parse\\  %
(\\% &
data\\& *
)\\* +
;\\+ ,
}]] 
catch^^ 
(^^ 
FormatException^^ "
exceptNumberFormat^^# 5
)^^5 6
{__ 
IOaa 
.aa 
Loggeraa 
.aa 
Logaa 
(aa 
NLogaa "
.aa" #
LogLevelaa# +
.aa+ ,
Warnaa, 0
,aa0 1
exceptNumberFormataa2 D
,aaD E
$straaF `
+aaa b
dataaac g
)aag h
;aah i
}bb 
}cc 	
}dd 
privategg 
voidgg 
GoodG2B2gg 
(gg 
HttpRequestgg %
reqgg& )
,gg) *
HttpResponsegg+ 7
respgg8 <
)gg< =
{hh 
stringii 
dataii 
;ii 
ifjj 

(jj 
PRIVATE_CONST_TRUEjj 
)jj 
{kk 	
datamm 
=mm 
$strmm 
;mm 
}nn 	
elseoo 
{pp 	
datass 
=ss 
nullss 
;ss 
}tt 	
ifuu 

(uu 
PRIVATE_CONST_TRUEuu 
)uu 
{vv 	
tryww 
{xx 
intyy 
valueyy 
=yy 
intyy 
.yy  
Parseyy  %
(yy% &
datayy& *
)yy* +
;yy+ ,
}zz 
catch{{ 
({{ 
FormatException{{ "
exceptNumberFormat{{# 5
){{5 6
{|| 
IO~~ 
.~~ 
Logger~~ 
.~~ 
Log~~ 
(~~ 
NLog~~ "
.~~" #
LogLevel~~# +
.~~+ ,
Warn~~, 0
,~~0 1
exceptNumberFormat~~2 D
,~~D E
$str~~F `
+~~a b
data~~c g
)~~g h
;~~h i
} 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 !
PRIVATE_CONST_FALSE
 
)
  
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
   	
try
¡¡ 
{
¢¢ 
int
££ 
value
££ 
=
££ 
int
££ 
.
££  
Parse
££  %
(
££% &
data
££& *
)
££* +
;
££+ ,
}
¤¤ 
catch
¥¥ 
(
¥¥ 
FormatException
¥¥ " 
exceptNumberFormat
¥¥# 5
)
¥¥5 6
{
¦¦ 
IO
¨¨ 
.
¨¨ 
Logger
¨¨ 
.
¨¨ 
Log
¨¨ 
(
¨¨ 
NLog
¨¨ "
.
¨¨" #
LogLevel
¨¨# +
.
¨¨+ ,
Warn
¨¨, 0
,
¨¨0 1 
exceptNumberFormat
¨¨2 D
,
¨¨D E
$str
¨¨F j
+
¨¨k l 
exceptNumberFormat
¨¨m 
)¨¨ 
;¨¨ 
}
©© 
}
ªª 	
}
«« 
private
®® 
void
®® 
GoodB2G2
®® 
(
®® 
HttpRequest
®® %
req
®®& )
,
®®) *
HttpResponse
®®+ 7
resp
®®8 <
)
®®< =
{
¯¯ 
string
°° 
data
°° 
;
°° 
if
±± 

(
±±  
PRIVATE_CONST_TRUE
±± 
)
±± 
{
²² 	
data
³³ 
=
³³ 
$str
³³ 
;
³³ 
{
µµ "
HttpCookieCollection
¶¶ $
cookieSources
¶¶% 2
=
¶¶3 4
req
¶¶5 8
.
¶¶8 9
Cookies
¶¶9 @
;
¶¶@ A
if
·· 
(
·· 
cookieSources
·· !
!=
··" $
null
··% )
)
··) *
{
¸¸ 
data
ºº 
=
ºº 
cookieSources
ºº (
[
ºº( )
$num
ºº) *
]
ºº* +
.
ºº+ ,
Value
ºº, 1
;
ºº1 2
}
»» 
}
¼¼ 
}
½½ 	
else
¾¾ 
{
¿¿ 	
data
ÂÂ 
=
ÂÂ 
null
ÂÂ 
;
ÂÂ 
}
ÃÃ 	
if
ÄÄ 

(
ÄÄ  
PRIVATE_CONST_TRUE
ÄÄ 
)
ÄÄ 
{
ÅÅ 	
try
ÆÆ 
{
ÇÇ 
int
ÈÈ 
value
ÈÈ 
=
ÈÈ 
int
ÈÈ 
.
ÈÈ  
Parse
ÈÈ  %
(
ÈÈ% &
data
ÈÈ& *
)
ÈÈ* +
;
ÈÈ+ ,
}
ÉÉ 
catch
ÊÊ 
(
ÊÊ 
FormatException
ÊÊ " 
exceptNumberFormat
ÊÊ# 5
)
ÊÊ5 6
{
ËË 
IO
ÍÍ 
.
ÍÍ 
Logger
ÍÍ 
.
ÍÍ 
Log
ÍÍ 
(
ÍÍ 
NLog
ÍÍ "
.
ÍÍ" #
LogLevel
ÍÍ# +
.
ÍÍ+ ,
Warn
ÍÍ, 0
,
ÍÍ0 1 
exceptNumberFormat
ÍÍ2 D
,
ÍÍD E
$str
ÍÍF j
+
ÍÍk l 
exceptNumberFormat
ÍÍm 
)ÍÍ 
;ÍÍ 
}
ÎÎ 
}
ÏÏ 	
}
ÐÐ 
public
ÒÒ 

override
ÒÒ 
void
ÒÒ 
Good
ÒÒ 
(
ÒÒ 
HttpRequest
ÒÒ )
req
ÒÒ* -
,
ÒÒ- .
HttpResponse
ÒÒ/ ;
resp
ÒÒ< @
)
ÒÒ@ A
{
ÓÓ 
GoodG2B1
ÔÔ 
(
ÔÔ 
req
ÔÔ 
,
ÔÔ 
resp
ÔÔ 
)
ÔÔ 
;
ÔÔ 
GoodG2B2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G1
ÖÖ 
(
ÖÖ 
req
ÖÖ 
,
ÖÖ 
resp
ÖÖ 
)
ÖÖ 
;
ÖÖ 
GoodB2G2
×× 
(
×× 
req
×× 
,
×× 
resp
×× 
)
×× 
;
×× 
}
ØØ 
}ÚÚ 
}ÛÛ ²P
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_05.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_05 H
:I J
AbstractTestCaseWebK ^
{ 
private   
bool   
privateTrue   
=   
true   #
;  # $
private!! 
bool!! 
privateFalse!! 
=!! 
false!!  %
;!!% &
public## 

override## 
void## 
Bad## 
(## 
HttpRequest## (
req##) ,
,##, -
HttpResponse##. :
resp##; ?
)##? @
{$$ 
string%% 
data%% 
;%% 
if&& 

(&& 
privateTrue&& 
)&& 
{'' 	
data(( 
=(( 
$str(( 
;(( 
{**  
HttpCookieCollection++ $
cookieSources++% 2
=++3 4
req++5 8
.++8 9
Cookies++9 @
;++@ A
if,, 
(,, 
cookieSources,, !
!=,," $
null,,% )
),,) *
{-- 
data// 
=// 
cookieSources// (
[//( )
$num//) *
]//* +
.//+ ,
Value//, 1
;//1 2
}00 
}11 
}22 	
else33 
{44 	
data77 
=77 
null77 
;77 
}88 	
if99 

(99 
privateTrue99 
)99 
{:: 	
try;; 
{<< 
int== 
value== 
=== 
int== 
.==  
Parse==  %
(==% &
data==& *
)==* +
;==+ ,
}>> 
catch?? 
(?? 
FormatException?? "
exceptNumberFormat??# 5
)??5 6
{@@ 
IOBB 
.BB 
LoggerBB 
.BB 
LogBB 
(BB 
NLogBB "
.BB" #
LogLevelBB# +
.BB+ ,
WarnBB, 0
,BB0 1
exceptNumberFormatBB2 D
,BBD E
$strBBF `
+BBa b
dataBBc g
)BBg h
;BBh i
}CC 
}DD 	
}EE 
privateII 
voidII 
GoodG2B1II 
(II 
HttpRequestII %
reqII& )
,II) *
HttpResponseII+ 7
respII8 <
)II< =
{JJ 
stringKK 
dataKK 
;KK 
ifLL 

(LL 
privateFalseLL 
)LL 
{MM 	
dataPP 
=PP 
nullPP 
;PP 
}QQ 	
elseRR 
{SS 	
dataUU 
=UU 
$strUU 
;UU 
}VV 	
ifWW 

(WW 
privateTrueWW 
)WW 
{XX 	
tryYY 
{ZZ 
int[[ 
value[[ 
=[[ 
int[[ 
.[[  
Parse[[  %
([[% &
data[[& *
)[[* +
;[[+ ,
}\\ 
catch]] 
(]] 
FormatException]] "
exceptNumberFormat]]# 5
)]]5 6
{^^ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptNumberFormat``2 D
,``D E
$str``F `
+``a b
data``c g
)``g h
;``h i
}aa 
}bb 	
}cc 
privateff 
voidff 
GoodG2B2ff 
(ff 
HttpRequestff %
reqff& )
,ff) *
HttpResponseff+ 7
respff8 <
)ff< =
{gg 
stringhh 
datahh 
;hh 
ifii 

(ii 
privateTrueii 
)ii 
{jj 	
datall 
=ll 
$strll 
;ll 
}mm 	
elsenn 
{oo 	
datarr 
=rr 
nullrr 
;rr 
}ss 	
iftt 

(tt 
privateTruett 
)tt 
{uu 	
tryvv 
{ww 
intxx 
valuexx 
=xx 
intxx 
.xx  
Parsexx  %
(xx% &
dataxx& *
)xx* +
;xx+ ,
}yy 
catchzz 
(zz 
FormatExceptionzz "
exceptNumberFormatzz# 5
)zz5 6
{{{ 
IO}} 
.}} 
Logger}} 
.}} 
Log}} 
(}} 
NLog}} "
.}}" #
LogLevel}}# +
.}}+ ,
Warn}}, 0
,}}0 1
exceptNumberFormat}}2 D
,}}D E
$str}}F `
+}}a b
data}}c g
)}}g h
;}}h i
}~~ 
} 	
}
 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
 
privateTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateFalse
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
   
{
¡¡ 
int
¢¢ 
value
¢¢ 
=
¢¢ 
int
¢¢ 
.
¢¢  
Parse
¢¢  %
(
¢¢% &
data
¢¢& *
)
¢¢* +
;
¢¢+ ,
}
££ 
catch
¤¤ 
(
¤¤ 
FormatException
¤¤ " 
exceptNumberFormat
¤¤# 5
)
¤¤5 6
{
¥¥ 
IO
§§ 
.
§§ 
Logger
§§ 
.
§§ 
Log
§§ 
(
§§ 
NLog
§§ "
.
§§" #
LogLevel
§§# +
.
§§+ ,
Warn
§§, 0
,
§§0 1 
exceptNumberFormat
§§2 D
,
§§D E
$str
§§F j
+
§§k l 
exceptNumberFormat
§§m 
)§§ 
;§§ 
}
¨¨ 
}
©© 	
}
ªª 
private
­­ 
void
­­ 
GoodB2G2
­­ 
(
­­ 
HttpRequest
­­ %
req
­­& )
,
­­) *
HttpResponse
­­+ 7
resp
­­8 <
)
­­< =
{
®® 
string
¯¯ 
data
¯¯ 
;
¯¯ 
if
°° 

(
°° 
privateTrue
°° 
)
°° 
{
±± 	
data
²² 
=
²² 
$str
²² 
;
²² 
{
´´ "
HttpCookieCollection
µµ $
cookieSources
µµ% 2
=
µµ3 4
req
µµ5 8
.
µµ8 9
Cookies
µµ9 @
;
µµ@ A
if
¶¶ 
(
¶¶ 
cookieSources
¶¶ !
!=
¶¶" $
null
¶¶% )
)
¶¶) *
{
·· 
data
¹¹ 
=
¹¹ 
cookieSources
¹¹ (
[
¹¹( )
$num
¹¹) *
]
¹¹* +
.
¹¹+ ,
Value
¹¹, 1
;
¹¹1 2
}
ºº 
}
»» 
}
¼¼ 	
else
½½ 
{
¾¾ 	
data
ÁÁ 
=
ÁÁ 
null
ÁÁ 
;
ÁÁ 
}
ÂÂ 	
if
ÃÃ 

(
ÃÃ 
privateTrue
ÃÃ 
)
ÃÃ 
{
ÄÄ 	
try
ÅÅ 
{
ÆÆ 
int
ÇÇ 
value
ÇÇ 
=
ÇÇ 
int
ÇÇ 
.
ÇÇ  
Parse
ÇÇ  %
(
ÇÇ% &
data
ÇÇ& *
)
ÇÇ* +
;
ÇÇ+ ,
}
ÈÈ 
catch
ÉÉ 
(
ÉÉ 
FormatException
ÉÉ " 
exceptNumberFormat
ÉÉ# 5
)
ÉÉ5 6
{
ÊÊ 
IO
ÌÌ 
.
ÌÌ 
Logger
ÌÌ 
.
ÌÌ 
Log
ÌÌ 
(
ÌÌ 
NLog
ÌÌ "
.
ÌÌ" #
LogLevel
ÌÌ# +
.
ÌÌ+ ,
Warn
ÌÌ, 0
,
ÌÌ0 1 
exceptNumberFormat
ÌÌ2 D
,
ÌÌD E
$str
ÌÌF j
+
ÌÌk l 
exceptNumberFormat
ÌÌm 
)ÌÌ 
;ÌÌ 
}
ÍÍ 
}
ÎÎ 	
}
ÏÏ 
public
ÑÑ 

override
ÑÑ 
void
ÑÑ 
Good
ÑÑ 
(
ÑÑ 
HttpRequest
ÑÑ )
req
ÑÑ* -
,
ÑÑ- .
HttpResponse
ÑÑ/ ;
resp
ÑÑ< @
)
ÑÑ@ A
{
ÒÒ 
GoodG2B1
ÓÓ 
(
ÓÓ 
req
ÓÓ 
,
ÓÓ 
resp
ÓÓ 
)
ÓÓ 
;
ÓÓ 
GoodG2B2
ÔÔ 
(
ÔÔ 
req
ÔÔ 
,
ÔÔ 
resp
ÔÔ 
)
ÔÔ 
;
ÔÔ 
GoodB2G1
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G2
ÖÖ 
(
ÖÖ 
req
ÖÖ 
,
ÖÖ 
resp
ÖÖ 
)
ÖÖ 
;
ÖÖ 
}
×× 
}ÙÙ 
}ÚÚ ÿR
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_06.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_06 H
:I J
AbstractTestCaseWebK ^
{ 
private   
const   
int   
PRIVATE_CONST_FIVE   (
=  ) *
$num  + ,
;  , -
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
string$$ 
data$$ 
;$$ 
if%% 

(%% 
PRIVATE_CONST_FIVE%% 
==%%  
$num%%  !
)%%! "
{&& 	
data'' 
='' 
$str'' 
;'' 
{))  
HttpCookieCollection** $
cookieSources**% 2
=**3 4
req**5 8
.**8 9
Cookies**9 @
;**@ A
if++ 
(++ 
cookieSources++ !
!=++" $
null++% )
)++) *
{,, 
data.. 
=.. 
cookieSources.. (
[..( )
$num..) *
]..* +
...+ ,
Value.., 1
;..1 2
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
null66 
;66 
}77 	
if88 

(88 
PRIVATE_CONST_FIVE88 
==88  
$num88  !
)88! "
{99 	
try:: 
{;; 
int<< 
value<< 
=<< 
int<< 
.<<  
Parse<<  %
(<<% &
data<<& *
)<<* +
;<<+ ,
}== 
catch>> 
(>> 
FormatException>> "
exceptNumberFormat>># 5
)>>5 6
{?? 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA 
(AA 
NLogAA "
.AA" #
LogLevelAA# +
.AA+ ,
WarnAA, 0
,AA0 1
exceptNumberFormatAA2 D
,AAD E
$strAAF `
+AAa b
dataAAc g
)AAg h
;AAh i
}BB 
}CC 	
}DD 
privateHH 
voidHH 
GoodG2B1HH 
(HH 
HttpRequestHH %
reqHH& )
,HH) *
HttpResponseHH+ 7
respHH8 <
)HH< =
{II 
stringJJ 
dataJJ 
;JJ 
ifKK 

(KK 
PRIVATE_CONST_FIVEKK 
!=KK  
$numKK  !
)KK! "
{LL 	
dataOO 
=OO 
nullOO 
;OO 
}PP 	
elseQQ 
{RR 	
dataTT 
=TT 
$strTT 
;TT 
}UU 	
ifVV 

(VV 
PRIVATE_CONST_FIVEVV 
==VV  
$numVV  !
)VV! "
{WW 	
tryXX 
{YY 
intZZ 
valueZZ 
=ZZ 
intZZ 
.ZZ  
ParseZZ  %
(ZZ% &
dataZZ& *
)ZZ* +
;ZZ+ ,
}[[ 
catch\\ 
(\\ 
FormatException\\ "
exceptNumberFormat\\# 5
)\\5 6
{]] 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
exceptNumberFormat__2 D
,__D E
$str__F `
+__a b
data__c g
)__g h
;__h i
}`` 
}aa 	
}bb 
privateee 
voidee 
GoodG2B2ee 
(ee 
HttpRequestee %
reqee& )
,ee) *
HttpResponseee+ 7
respee8 <
)ee< =
{ff 
stringgg 
datagg 
;gg 
ifhh 

(hh 
PRIVATE_CONST_FIVEhh 
==hh  
$numhh  !
)hh! "
{ii 	
datakk 
=kk 
$strkk 
;kk 
}ll 	
elsemm 
{nn 	
dataqq 
=qq 
nullqq 
;qq 
}rr 	
ifss 

(ss 
PRIVATE_CONST_FIVEss 
==ss  
$numss  !
)ss! "
{tt 	
tryuu 
{vv 
intww 
valueww 
=ww 
intww 
.ww  
Parseww  %
(ww% &
dataww& *
)ww* +
;ww+ ,
}xx 
catchyy 
(yy 
FormatExceptionyy "
exceptNumberFormatyy# 5
)yy5 6
{zz 
IO|| 
.|| 
Logger|| 
.|| 
Log|| 
(|| 
NLog|| "
.||" #
LogLevel||# +
.||+ ,
Warn||, 0
,||0 1
exceptNumberFormat||2 D
,||D E
$str||F `
+||a b
data||c g
)||g h
;||h i
}}} 
}~~ 	
} 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
 	
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PRIVATE_CONST_FIVE
 
!=
  
$num
  !
)
! "
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
   
int
¡¡ 
value
¡¡ 
=
¡¡ 
int
¡¡ 
.
¡¡  
Parse
¡¡  %
(
¡¡% &
data
¡¡& *
)
¡¡* +
;
¡¡+ ,
}
¢¢ 
catch
££ 
(
££ 
FormatException
££ " 
exceptNumberFormat
££# 5
)
££5 6
{
¤¤ 
IO
¦¦ 
.
¦¦ 
Logger
¦¦ 
.
¦¦ 
Log
¦¦ 
(
¦¦ 
NLog
¦¦ "
.
¦¦" #
LogLevel
¦¦# +
.
¦¦+ ,
Warn
¦¦, 0
,
¦¦0 1 
exceptNumberFormat
¦¦2 D
,
¦¦D E
$str
¦¦F j
+
¦¦k l 
exceptNumberFormat
¦¦m 
)¦¦ 
;¦¦ 
}
§§ 
}
¨¨ 	
}
©© 
private
¬¬ 
void
¬¬ 
GoodB2G2
¬¬ 
(
¬¬ 
HttpRequest
¬¬ %
req
¬¬& )
,
¬¬) *
HttpResponse
¬¬+ 7
resp
¬¬8 <
)
¬¬< =
{
­­ 
string
®® 
data
®® 
;
®® 
if
¯¯ 

(
¯¯  
PRIVATE_CONST_FIVE
¯¯ 
==
¯¯  
$num
¯¯  !
)
¯¯! "
{
°° 	
data
±± 
=
±± 
$str
±± 
;
±± 
{
³³ "
HttpCookieCollection
´´ $
cookieSources
´´% 2
=
´´3 4
req
´´5 8
.
´´8 9
Cookies
´´9 @
;
´´@ A
if
µµ 
(
µµ 
cookieSources
µµ !
!=
µµ" $
null
µµ% )
)
µµ) *
{
¶¶ 
data
¸¸ 
=
¸¸ 
cookieSources
¸¸ (
[
¸¸( )
$num
¸¸) *
]
¸¸* +
.
¸¸+ ,
Value
¸¸, 1
;
¸¸1 2
}
¹¹ 
}
ºº 
}
»» 	
else
¼¼ 
{
½½ 	
data
ÀÀ 
=
ÀÀ 
null
ÀÀ 
;
ÀÀ 
}
ÁÁ 	
if
ÂÂ 

(
ÂÂ  
PRIVATE_CONST_FIVE
ÂÂ 
==
ÂÂ  
$num
ÂÂ  !
)
ÂÂ! "
{
ÃÃ 	
try
ÄÄ 
{
ÅÅ 
int
ÆÆ 
value
ÆÆ 
=
ÆÆ 
int
ÆÆ 
.
ÆÆ  
Parse
ÆÆ  %
(
ÆÆ% &
data
ÆÆ& *
)
ÆÆ* +
;
ÆÆ+ ,
}
ÇÇ 
catch
ÈÈ 
(
ÈÈ 
FormatException
ÈÈ " 
exceptNumberFormat
ÈÈ# 5
)
ÈÈ5 6
{
ÉÉ 
IO
ËË 
.
ËË 
Logger
ËË 
.
ËË 
Log
ËË 
(
ËË 
NLog
ËË "
.
ËË" #
LogLevel
ËË# +
.
ËË+ ,
Warn
ËË, 0
,
ËË0 1 
exceptNumberFormat
ËË2 D
,
ËËD E
$str
ËËF j
+
ËËk l 
exceptNumberFormat
ËËm 
)ËË 
;ËË 
}
ÌÌ 
}
ÍÍ 	
}
ÎÎ 
public
ÐÐ 

override
ÐÐ 
void
ÐÐ 
Good
ÐÐ 
(
ÐÐ 
HttpRequest
ÐÐ )
req
ÐÐ* -
,
ÐÐ- .
HttpResponse
ÐÐ/ ;
resp
ÐÐ< @
)
ÐÐ@ A
{
ÑÑ 
GoodG2B1
ÒÒ 
(
ÒÒ 
req
ÒÒ 
,
ÒÒ 
resp
ÒÒ 
)
ÒÒ 
;
ÒÒ 
GoodG2B2
ÓÓ 
(
ÓÓ 
req
ÓÓ 
,
ÓÓ 
resp
ÓÓ 
)
ÓÓ 
;
ÓÓ 
GoodB2G1
ÔÔ 
(
ÔÔ 
req
ÔÔ 
,
ÔÔ 
resp
ÔÔ 
)
ÔÔ 
;
ÔÔ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ÖÖ 
}ØØ 
}ÙÙ R
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_07.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_07 H
:I J
AbstractTestCaseWebK ^
{ 
private   
int   
privateFive   
=   
$num   
;    
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
string$$ 
data$$ 
;$$ 
if%% 

(%% 
privateFive%% 
==%% 
$num%% 
)%% 
{&& 	
data'' 
='' 
$str'' 
;'' 
{))  
HttpCookieCollection** $
cookieSources**% 2
=**3 4
req**5 8
.**8 9
Cookies**9 @
;**@ A
if++ 
(++ 
cookieSources++ !
!=++" $
null++% )
)++) *
{,, 
data.. 
=.. 
cookieSources.. (
[..( )
$num..) *
]..* +
...+ ,
Value.., 1
;..1 2
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
null66 
;66 
}77 	
if88 

(88 
privateFive88 
==88 
$num88 
)88 
{99 	
try:: 
{;; 
int<< 
value<< 
=<< 
int<< 
.<<  
Parse<<  %
(<<% &
data<<& *
)<<* +
;<<+ ,
}== 
catch>> 
(>> 
FormatException>> "
exceptNumberFormat>># 5
)>>5 6
{?? 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA 
(AA 
NLogAA "
.AA" #
LogLevelAA# +
.AA+ ,
WarnAA, 0
,AA0 1
exceptNumberFormatAA2 D
,AAD E
$strAAF `
+AAa b
dataAAc g
)AAg h
;AAh i
}BB 
}CC 	
}DD 
privateHH 
voidHH 
GoodG2B1HH 
(HH 
HttpRequestHH %
reqHH& )
,HH) *
HttpResponseHH+ 7
respHH8 <
)HH< =
{II 
stringJJ 
dataJJ 
;JJ 
ifKK 

(KK 
privateFiveKK 
!=KK 
$numKK 
)KK 
{LL 	
dataOO 
=OO 
nullOO 
;OO 
}PP 	
elseQQ 
{RR 	
dataTT 
=TT 
$strTT 
;TT 
}UU 	
ifVV 

(VV 
privateFiveVV 
==VV 
$numVV 
)VV 
{WW 	
tryXX 
{YY 
intZZ 
valueZZ 
=ZZ 
intZZ 
.ZZ  
ParseZZ  %
(ZZ% &
dataZZ& *
)ZZ* +
;ZZ+ ,
}[[ 
catch\\ 
(\\ 
FormatException\\ "
exceptNumberFormat\\# 5
)\\5 6
{]] 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
exceptNumberFormat__2 D
,__D E
$str__F `
+__a b
data__c g
)__g h
;__h i
}`` 
}aa 	
}bb 
privateee 
voidee 
GoodG2B2ee 
(ee 
HttpRequestee %
reqee& )
,ee) *
HttpResponseee+ 7
respee8 <
)ee< =
{ff 
stringgg 
datagg 
;gg 
ifhh 

(hh 
privateFivehh 
==hh 
$numhh 
)hh 
{ii 	
datakk 
=kk 
$strkk 
;kk 
}ll 	
elsemm 
{nn 	
dataqq 
=qq 
nullqq 
;qq 
}rr 	
ifss 

(ss 
privateFivess 
==ss 
$numss 
)ss 
{tt 	
tryuu 
{vv 
intww 
valueww 
=ww 
intww 
.ww  
Parseww  %
(ww% &
dataww& *
)ww* +
;ww+ ,
}xx 
catchyy 
(yy 
FormatExceptionyy "
exceptNumberFormatyy# 5
)yy5 6
{zz 
IO|| 
.|| 
Logger|| 
.|| 
Log|| 
(|| 
NLog|| "
.||" #
LogLevel||# +
.||+ ,
Warn||, 0
,||0 1
exceptNumberFormat||2 D
,||D E
$str||F `
+||a b
data||c g
)||g h
;||h i
}}} 
}~~ 	
} 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateFive
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
   
int
¡¡ 
value
¡¡ 
=
¡¡ 
int
¡¡ 
.
¡¡  
Parse
¡¡  %
(
¡¡% &
data
¡¡& *
)
¡¡* +
;
¡¡+ ,
}
¢¢ 
catch
££ 
(
££ 
FormatException
££ " 
exceptNumberFormat
££# 5
)
££5 6
{
¤¤ 
IO
¦¦ 
.
¦¦ 
Logger
¦¦ 
.
¦¦ 
Log
¦¦ 
(
¦¦ 
NLog
¦¦ "
.
¦¦" #
LogLevel
¦¦# +
.
¦¦+ ,
Warn
¦¦, 0
,
¦¦0 1 
exceptNumberFormat
¦¦2 D
,
¦¦D E
$str
¦¦F j
+
¦¦k l 
exceptNumberFormat
¦¦m 
)¦¦ 
;¦¦ 
}
§§ 
}
¨¨ 	
}
©© 
private
¬¬ 
void
¬¬ 
GoodB2G2
¬¬ 
(
¬¬ 
HttpRequest
¬¬ %
req
¬¬& )
,
¬¬) *
HttpResponse
¬¬+ 7
resp
¬¬8 <
)
¬¬< =
{
­­ 
string
®® 
data
®® 
;
®® 
if
¯¯ 

(
¯¯ 
privateFive
¯¯ 
==
¯¯ 
$num
¯¯ 
)
¯¯ 
{
°° 	
data
±± 
=
±± 
$str
±± 
;
±± 
{
³³ "
HttpCookieCollection
´´ $
cookieSources
´´% 2
=
´´3 4
req
´´5 8
.
´´8 9
Cookies
´´9 @
;
´´@ A
if
µµ 
(
µµ 
cookieSources
µµ !
!=
µµ" $
null
µµ% )
)
µµ) *
{
¶¶ 
data
¸¸ 
=
¸¸ 
cookieSources
¸¸ (
[
¸¸( )
$num
¸¸) *
]
¸¸* +
.
¸¸+ ,
Value
¸¸, 1
;
¸¸1 2
}
¹¹ 
}
ºº 
}
»» 	
else
¼¼ 
{
½½ 	
data
ÀÀ 
=
ÀÀ 
null
ÀÀ 
;
ÀÀ 
}
ÁÁ 	
if
ÂÂ 

(
ÂÂ 
privateFive
ÂÂ 
==
ÂÂ 
$num
ÂÂ 
)
ÂÂ 
{
ÃÃ 	
try
ÄÄ 
{
ÅÅ 
int
ÆÆ 
value
ÆÆ 
=
ÆÆ 
int
ÆÆ 
.
ÆÆ  
Parse
ÆÆ  %
(
ÆÆ% &
data
ÆÆ& *
)
ÆÆ* +
;
ÆÆ+ ,
}
ÇÇ 
catch
ÈÈ 
(
ÈÈ 
FormatException
ÈÈ " 
exceptNumberFormat
ÈÈ# 5
)
ÈÈ5 6
{
ÉÉ 
IO
ËË 
.
ËË 
Logger
ËË 
.
ËË 
Log
ËË 
(
ËË 
NLog
ËË "
.
ËË" #
LogLevel
ËË# +
.
ËË+ ,
Warn
ËË, 0
,
ËË0 1 
exceptNumberFormat
ËË2 D
,
ËËD E
$str
ËËF j
+
ËËk l 
exceptNumberFormat
ËËm 
)ËË 
;ËË 
}
ÌÌ 
}
ÍÍ 	
}
ÎÎ 
public
ÐÐ 

override
ÐÐ 
void
ÐÐ 
Good
ÐÐ 
(
ÐÐ 
HttpRequest
ÐÐ )
req
ÐÐ* -
,
ÐÐ- .
HttpResponse
ÐÐ/ ;
resp
ÐÐ< @
)
ÐÐ@ A
{
ÑÑ 
GoodG2B1
ÒÒ 
(
ÒÒ 
req
ÒÒ 
,
ÒÒ 
resp
ÒÒ 
)
ÒÒ 
;
ÒÒ 
GoodG2B2
ÓÓ 
(
ÓÓ 
req
ÓÓ 
,
ÓÓ 
resp
ÓÓ 
)
ÓÓ 
;
ÓÓ 
GoodB2G1
ÔÔ 
(
ÔÔ 
req
ÔÔ 
,
ÔÔ 
resp
ÔÔ 
)
ÔÔ 
;
ÔÔ 
GoodB2G2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ÖÖ 
}ØØ 
}ÙÙ ¤U
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_08.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_08 H
:I J
AbstractTestCaseWebK ^
{ 
private   
static   
bool   
PrivateReturnsTrue   *
(  * +
)  + ,
{!! 
return"" 
true"" 
;"" 
}## 
private%% 
static%% 
bool%% 
PrivateReturnsFalse%% +
(%%+ ,
)%%, -
{&& 
return'' 
false'' 
;'' 
}(( 
public** 

override** 
void** 
Bad** 
(** 
HttpRequest** (
req**) ,
,**, -
HttpResponse**. :
resp**; ?
)**? @
{++ 
string,, 
data,, 
;,, 
if-- 

(-- 
PrivateReturnsTrue-- 
(-- 
)--  
)--  !
{.. 	
data// 
=// 
$str// 
;// 
{11  
HttpCookieCollection22 $
cookieSources22% 2
=223 4
req225 8
.228 9
Cookies229 @
;22@ A
if33 
(33 
cookieSources33 !
!=33" $
null33% )
)33) *
{44 
data66 
=66 
cookieSources66 (
[66( )
$num66) *
]66* +
.66+ ,
Value66, 1
;661 2
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@ 
PrivateReturnsTrue@@ 
(@@ 
)@@  
)@@  !
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
HttpRequestPP %
reqPP& )
,PP) *
HttpResponsePP+ 7
respPP8 <
)PP< =
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
PrivateReturnsFalseSS 
(SS  
)SS  !
)SS! "
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
PrivateReturnsTrue^^ 
(^^ 
)^^  
)^^  !
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
HttpRequestmm %
reqmm& )
,mm) *
HttpResponsemm+ 7
respmm8 <
)mm< =
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
PrivateReturnsTruepp 
(pp 
)pp  
)pp  !
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
PrivateReturnsTrue{{ 
({{ 
){{  
){{  !
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
   

(
   !
PrivateReturnsFalse
   
(
    
)
    !
)
  ! "
{
¡¡ 	
IO
££ 
.
££ 
	WriteLine
££ 
(
££ 
$str
££ /
)
££/ 0
;
££0 1
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
try
§§ 
{
¨¨ 
int
©© 
value
©© 
=
©© 
int
©© 
.
©©  
Parse
©©  %
(
©©% &
data
©©& *
)
©©* +
;
©©+ ,
}
ªª 
catch
«« 
(
«« 
FormatException
«« " 
exceptNumberFormat
««# 5
)
««5 6
{
¬¬ 
IO
®® 
.
®® 
Logger
®® 
.
®® 
Log
®® 
(
®® 
NLog
®® "
.
®®" #
LogLevel
®®# +
.
®®+ ,
Warn
®®, 0
,
®®0 1 
exceptNumberFormat
®®2 D
,
®®D E
$str
®®F j
+
®®k l 
exceptNumberFormat
®®m 
)®® 
;®® 
}
¯¯ 
}
°° 	
}
±± 
private
´´ 
void
´´ 
GoodB2G2
´´ 
(
´´ 
HttpRequest
´´ %
req
´´& )
,
´´) *
HttpResponse
´´+ 7
resp
´´8 <
)
´´< =
{
µµ 
string
¶¶ 
data
¶¶ 
;
¶¶ 
if
·· 

(
··  
PrivateReturnsTrue
·· 
(
·· 
)
··  
)
··  !
{
¸¸ 	
data
¹¹ 
=
¹¹ 
$str
¹¹ 
;
¹¹ 
{
»» "
HttpCookieCollection
¼¼ $
cookieSources
¼¼% 2
=
¼¼3 4
req
¼¼5 8
.
¼¼8 9
Cookies
¼¼9 @
;
¼¼@ A
if
½½ 
(
½½ 
cookieSources
½½ !
!=
½½" $
null
½½% )
)
½½) *
{
¾¾ 
data
ÀÀ 
=
ÀÀ 
cookieSources
ÀÀ (
[
ÀÀ( )
$num
ÀÀ) *
]
ÀÀ* +
.
ÀÀ+ ,
Value
ÀÀ, 1
;
ÀÀ1 2
}
ÁÁ 
}
ÂÂ 
}
ÃÃ 	
else
ÄÄ 
{
ÅÅ 	
data
ÈÈ 
=
ÈÈ 
null
ÈÈ 
;
ÈÈ 
}
ÉÉ 	
if
ÊÊ 

(
ÊÊ  
PrivateReturnsTrue
ÊÊ 
(
ÊÊ 
)
ÊÊ  
)
ÊÊ  !
{
ËË 	
try
ÌÌ 
{
ÍÍ 
int
ÎÎ 
value
ÎÎ 
=
ÎÎ 
int
ÎÎ 
.
ÎÎ  
Parse
ÎÎ  %
(
ÎÎ% &
data
ÎÎ& *
)
ÎÎ* +
;
ÎÎ+ ,
}
ÏÏ 
catch
ÐÐ 
(
ÐÐ 
FormatException
ÐÐ " 
exceptNumberFormat
ÐÐ# 5
)
ÐÐ5 6
{
ÑÑ 
IO
ÓÓ 
.
ÓÓ 
Logger
ÓÓ 
.
ÓÓ 
Log
ÓÓ 
(
ÓÓ 
NLog
ÓÓ "
.
ÓÓ" #
LogLevel
ÓÓ# +
.
ÓÓ+ ,
Warn
ÓÓ, 0
,
ÓÓ0 1 
exceptNumberFormat
ÓÓ2 D
,
ÓÓD E
$str
ÓÓF j
+
ÓÓk l 
exceptNumberFormat
ÓÓm 
)ÓÓ 
;ÓÓ 
}
ÔÔ 
}
ÕÕ 	
}
ÖÖ 
public
ØØ 

override
ØØ 
void
ØØ 
Good
ØØ 
(
ØØ 
HttpRequest
ØØ )
req
ØØ* -
,
ØØ- .
HttpResponse
ØØ/ ;
resp
ØØ< @
)
ØØ@ A
{
ÙÙ 
GoodG2B1
ÚÚ 
(
ÚÚ 
req
ÚÚ 
,
ÚÚ 
resp
ÚÚ 
)
ÚÚ 
;
ÚÚ 
GoodG2B2
ÛÛ 
(
ÛÛ 
req
ÛÛ 
,
ÛÛ 
resp
ÛÛ 
)
ÛÛ 
;
ÛÛ 
GoodB2G1
ÜÜ 
(
ÜÜ 
req
ÜÜ 
,
ÜÜ 
resp
ÜÜ 
)
ÜÜ 
;
ÜÜ 
GoodB2G2
ÝÝ 
(
ÝÝ 
req
ÝÝ 
,
ÝÝ 
resp
ÝÝ 
)
ÝÝ 
;
ÝÝ 
}
ÞÞ 
}àà 
}áá ÒQ
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_09.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_09 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_TRUE   #
)  # $
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$  
HttpCookieCollection%% $
cookieSources%%% 2
=%%3 4
req%%5 8
.%%8 9
Cookies%%9 @
;%%@ A
if&& 
(&& 
cookieSources&& !
!=&&" $
null&&% )
)&&) *
{'' 
data)) 
=)) 
cookieSources)) (
[))( )
$num))) *
]))* +
.))+ ,
Value)), 1
;))1 2
}** 
}++ 
},, 	
else-- 
{.. 	
data11 
=11 
null11 
;11 
}22 	
if33 

(33 
IO33 
.33  
STATIC_READONLY_TRUE33 #
)33# $
{44 	
try55 
{66 
int77 
value77 
=77 
int77 
.77  
Parse77  %
(77% &
data77& *
)77* +
;77+ ,
}88 
catch99 
(99 
FormatException99 "
exceptNumberFormat99# 5
)995 6
{:: 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
exceptNumberFormat<<2 D
,<<D E
$str<<F `
+<<a b
data<<c g
)<<g h
;<<h i
}== 
}>> 	
}?? 
privateCC 
voidCC 
GoodG2B1CC 
(CC 
HttpRequestCC %
reqCC& )
,CC) *
HttpResponseCC+ 7
respCC8 <
)CC< =
{DD 
stringEE 
dataEE 
;EE 
ifFF 

(FF 
IOFF 
.FF !
STATIC_READONLY_FALSEFF $
)FF$ %
{GG 	
dataJJ 
=JJ 
nullJJ 
;JJ 
}KK 	
elseLL 
{MM 	
dataOO 
=OO 
$strOO 
;OO 
}PP 	
ifQQ 

(QQ 
IOQQ 
.QQ  
STATIC_READONLY_TRUEQQ #
)QQ# $
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
private`` 
void`` 
GoodG2B2`` 
(`` 
HttpRequest`` %
req``& )
,``) *
HttpResponse``+ 7
resp``8 <
)``< =
{aa 
stringbb 
databb 
;bb 
ifcc 

(cc 
IOcc 
.cc  
STATIC_READONLY_TRUEcc #
)cc# $
{dd 	
dataff 
=ff 
$strff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
nullll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn  
STATIC_READONLY_TRUEnn #
)nn# $
{oo 	
trypp 
{qq 
intrr 
valuerr 
=rr 
intrr 
.rr  
Parserr  %
(rr% &
datarr& *
)rr* +
;rr+ ,
}ss 
catchtt 
(tt 
FormatExceptiontt "
exceptNumberFormattt# 5
)tt5 6
{uu 
IOww 
.ww 
Loggerww 
.ww 
Logww 
(ww 
NLogww "
.ww" #
LogLevelww# +
.ww+ ,
Warnww, 0
,ww0 1
exceptNumberFormatww2 D
,wwD E
$strwwF `
+wwa b
datawwc g
)wwg h
;wwh i
}xx 
}yy 	
}zz 
private}} 
void}} 
GoodB2G1}} 
(}} 
HttpRequest}} %
req}}& )
,}}) *
HttpResponse}}+ 7
resp}}8 <
)}}< =
{~~ 
string 
data 
; 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 #
STATIC_READONLY_FALSE
 $
)
$ %
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ 
(
¡¡ 
NLog
¡¡ "
.
¡¡" #
LogLevel
¡¡# +
.
¡¡+ ,
Warn
¡¡, 0
,
¡¡0 1 
exceptNumberFormat
¡¡2 D
,
¡¡D E
$str
¡¡F j
+
¡¡k l 
exceptNumberFormat
¡¡m 
)¡¡ 
;¡¡ 
}
¢¢ 
}
££ 	
}
¤¤ 
private
§§ 
void
§§ 
GoodB2G2
§§ 
(
§§ 
HttpRequest
§§ %
req
§§& )
,
§§) *
HttpResponse
§§+ 7
resp
§§8 <
)
§§< =
{
¨¨ 
string
©© 
data
©© 
;
©© 
if
ªª 

(
ªª 
IO
ªª 
.
ªª "
STATIC_READONLY_TRUE
ªª #
)
ªª# $
{
«« 	
data
¬¬ 
=
¬¬ 
$str
¬¬ 
;
¬¬ 
{
®® "
HttpCookieCollection
¯¯ $
cookieSources
¯¯% 2
=
¯¯3 4
req
¯¯5 8
.
¯¯8 9
Cookies
¯¯9 @
;
¯¯@ A
if
°° 
(
°° 
cookieSources
°° !
!=
°°" $
null
°°% )
)
°°) *
{
±± 
data
³³ 
=
³³ 
cookieSources
³³ (
[
³³( )
$num
³³) *
]
³³* +
.
³³+ ,
Value
³³, 1
;
³³1 2
}
´´ 
}
µµ 
}
¶¶ 	
else
·· 
{
¸¸ 	
data
»» 
=
»» 
null
»» 
;
»» 
}
¼¼ 	
if
½½ 

(
½½ 
IO
½½ 
.
½½ "
STATIC_READONLY_TRUE
½½ #
)
½½# $
{
¾¾ 	
try
¿¿ 
{
ÀÀ 
int
ÁÁ 
value
ÁÁ 
=
ÁÁ 
int
ÁÁ 
.
ÁÁ  
Parse
ÁÁ  %
(
ÁÁ% &
data
ÁÁ& *
)
ÁÁ* +
;
ÁÁ+ ,
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
FormatException
ÃÃ " 
exceptNumberFormat
ÃÃ# 5
)
ÃÃ5 6
{
ÄÄ 
IO
ÆÆ 
.
ÆÆ 
Logger
ÆÆ 
.
ÆÆ 
Log
ÆÆ 
(
ÆÆ 
NLog
ÆÆ "
.
ÆÆ" #
LogLevel
ÆÆ# +
.
ÆÆ+ ,
Warn
ÆÆ, 0
,
ÆÆ0 1 
exceptNumberFormat
ÆÆ2 D
,
ÆÆD E
$str
ÆÆF j
+
ÆÆk l 
exceptNumberFormat
ÆÆm 
)ÆÆ 
;ÆÆ 
}
ÇÇ 
}
ÈÈ 	
}
ÉÉ 
public
ËË 

override
ËË 
void
ËË 
Good
ËË 
(
ËË 
HttpRequest
ËË )
req
ËË* -
,
ËË- .
HttpResponse
ËË/ ;
resp
ËË< @
)
ËË@ A
{
ÌÌ 
GoodG2B1
ÍÍ 
(
ÍÍ 
req
ÍÍ 
,
ÍÍ 
resp
ÍÍ 
)
ÍÍ 
;
ÍÍ 
GoodG2B2
ÎÎ 
(
ÎÎ 
req
ÎÎ 
,
ÎÎ 
resp
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodB2G1
ÏÏ 
(
ÏÏ 
req
ÏÏ 
,
ÏÏ 
resp
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodB2G2
ÐÐ 
(
ÐÐ 
req
ÐÐ 
,
ÐÐ 
resp
ÐÐ 
)
ÐÐ 
;
ÐÐ 
}
ÑÑ 
}ÓÓ 
}ÔÔ îP
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_10.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_10 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.   

staticTrue   
)   
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$  
HttpCookieCollection%% $
cookieSources%%% 2
=%%3 4
req%%5 8
.%%8 9
Cookies%%9 @
;%%@ A
if&& 
(&& 
cookieSources&& !
!=&&" $
null&&% )
)&&) *
{'' 
data)) 
=)) 
cookieSources)) (
[))( )
$num))) *
]))* +
.))+ ,
Value)), 1
;))1 2
}** 
}++ 
},, 	
else-- 
{.. 	
data11 
=11 
null11 
;11 
}22 	
if33 

(33 
IO33 
.33 

staticTrue33 
)33 
{44 	
try55 
{66 
int77 
value77 
=77 
int77 
.77  
Parse77  %
(77% &
data77& *
)77* +
;77+ ,
}88 
catch99 
(99 
FormatException99 "
exceptNumberFormat99# 5
)995 6
{:: 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
exceptNumberFormat<<2 D
,<<D E
$str<<F `
+<<a b
data<<c g
)<<g h
;<<h i
}== 
}>> 	
}?? 
privateCC 
voidCC 
GoodG2B1CC 
(CC 
HttpRequestCC %
reqCC& )
,CC) *
HttpResponseCC+ 7
respCC8 <
)CC< =
{DD 
stringEE 
dataEE 
;EE 
ifFF 

(FF 
IOFF 
.FF 
staticFalseFF 
)FF 
{GG 	
dataJJ 
=JJ 
nullJJ 
;JJ 
}KK 	
elseLL 
{MM 	
dataOO 
=OO 
$strOO 
;OO 
}PP 	
ifQQ 

(QQ 
IOQQ 
.QQ 

staticTrueQQ 
)QQ 
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
private`` 
void`` 
GoodG2B2`` 
(`` 
HttpRequest`` %
req``& )
,``) *
HttpResponse``+ 7
resp``8 <
)``< =
{aa 
stringbb 
databb 
;bb 
ifcc 

(cc 
IOcc 
.cc 

staticTruecc 
)cc 
{dd 	
dataff 
=ff 
$strff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
nullll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn 

staticTruenn 
)nn 
{oo 	
trypp 
{qq 
intrr 
valuerr 
=rr 
intrr 
.rr  
Parserr  %
(rr% &
datarr& *
)rr* +
;rr+ ,
}ss 
catchtt 
(tt 
FormatExceptiontt "
exceptNumberFormattt# 5
)tt5 6
{uu 
IOww 
.ww 
Loggerww 
.ww 
Logww 
(ww 
NLogww "
.ww" #
LogLevelww# +
.ww+ ,
Warnww, 0
,ww0 1
exceptNumberFormatww2 D
,wwD E
$strwwF `
+wwa b
datawwc g
)wwg h
;wwh i
}xx 
}yy 	
}zz 
private}} 
void}} 
GoodB2G1}} 
(}} 
HttpRequest}} %
req}}& )
,}}) *
HttpResponse}}+ 7
resp}}8 <
)}}< =
{~~ 
string 
data 
; 
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 
staticFalse
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ 
(
¡¡ 
NLog
¡¡ "
.
¡¡" #
LogLevel
¡¡# +
.
¡¡+ ,
Warn
¡¡, 0
,
¡¡0 1 
exceptNumberFormat
¡¡2 D
,
¡¡D E
$str
¡¡F j
+
¡¡k l 
exceptNumberFormat
¡¡m 
)¡¡ 
;¡¡ 
}
¢¢ 
}
££ 	
}
¤¤ 
private
§§ 
void
§§ 
GoodB2G2
§§ 
(
§§ 
HttpRequest
§§ %
req
§§& )
,
§§) *
HttpResponse
§§+ 7
resp
§§8 <
)
§§< =
{
¨¨ 
string
©© 
data
©© 
;
©© 
if
ªª 

(
ªª 
IO
ªª 
.
ªª 

staticTrue
ªª 
)
ªª 
{
«« 	
data
¬¬ 
=
¬¬ 
$str
¬¬ 
;
¬¬ 
{
®® "
HttpCookieCollection
¯¯ $
cookieSources
¯¯% 2
=
¯¯3 4
req
¯¯5 8
.
¯¯8 9
Cookies
¯¯9 @
;
¯¯@ A
if
°° 
(
°° 
cookieSources
°° !
!=
°°" $
null
°°% )
)
°°) *
{
±± 
data
³³ 
=
³³ 
cookieSources
³³ (
[
³³( )
$num
³³) *
]
³³* +
.
³³+ ,
Value
³³, 1
;
³³1 2
}
´´ 
}
µµ 
}
¶¶ 	
else
·· 
{
¸¸ 	
data
»» 
=
»» 
null
»» 
;
»» 
}
¼¼ 	
if
½½ 

(
½½ 
IO
½½ 
.
½½ 

staticTrue
½½ 
)
½½ 
{
¾¾ 	
try
¿¿ 
{
ÀÀ 
int
ÁÁ 
value
ÁÁ 
=
ÁÁ 
int
ÁÁ 
.
ÁÁ  
Parse
ÁÁ  %
(
ÁÁ% &
data
ÁÁ& *
)
ÁÁ* +
;
ÁÁ+ ,
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
FormatException
ÃÃ " 
exceptNumberFormat
ÃÃ# 5
)
ÃÃ5 6
{
ÄÄ 
IO
ÆÆ 
.
ÆÆ 
Logger
ÆÆ 
.
ÆÆ 
Log
ÆÆ 
(
ÆÆ 
NLog
ÆÆ "
.
ÆÆ" #
LogLevel
ÆÆ# +
.
ÆÆ+ ,
Warn
ÆÆ, 0
,
ÆÆ0 1 
exceptNumberFormat
ÆÆ2 D
,
ÆÆD E
$str
ÆÆF j
+
ÆÆk l 
exceptNumberFormat
ÆÆm 
)ÆÆ 
;ÆÆ 
}
ÇÇ 
}
ÈÈ 	
}
ÉÉ 
public
ËË 

override
ËË 
void
ËË 
Good
ËË 
(
ËË 
HttpRequest
ËË )
req
ËË* -
,
ËË- .
HttpResponse
ËË/ ;
resp
ËË< @
)
ËË@ A
{
ÌÌ 
GoodG2B1
ÍÍ 
(
ÍÍ 
req
ÍÍ 
,
ÍÍ 
resp
ÍÍ 
)
ÍÍ 
;
ÍÍ 
GoodG2B2
ÎÎ 
(
ÎÎ 
req
ÎÎ 
,
ÎÎ 
resp
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodB2G1
ÏÏ 
(
ÏÏ 
req
ÏÏ 
,
ÏÏ 
resp
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodB2G2
ÐÐ 
(
ÐÐ 
req
ÐÐ 
,
ÐÐ 
resp
ÐÐ 
)
ÐÐ 
;
ÐÐ 
}
ÑÑ 
}ÓÓ 
}ÔÔ ðS
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_11.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_11 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.   
StaticReturnsTrue    
(    !
)  ! "
)  " #
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$  
HttpCookieCollection%% $
cookieSources%%% 2
=%%3 4
req%%5 8
.%%8 9
Cookies%%9 @
;%%@ A
if&& 
(&& 
cookieSources&& !
!=&&" $
null&&% )
)&&) *
{'' 
data)) 
=)) 
cookieSources)) (
[))( )
$num))) *
]))* +
.))+ ,
Value)), 1
;))1 2
}** 
}++ 
},, 	
else-- 
{.. 	
data11 
=11 
null11 
;11 
}22 	
if33 

(33
 
IO33 
.33 
StaticReturnsTrue33 
(33  
)33  !
)33! "
{44 	
try55 
{66 
int77 
value77 
=77 
int77 
.77  
Parse77  %
(77% &
data77& *
)77* +
;77+ ,
}88 
catch99 
(99 
FormatException99 "
exceptNumberFormat99# 5
)995 6
{:: 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
exceptNumberFormat<<2 D
,<<D E
$str<<F `
+<<a b
data<<c g
)<<g h
;<<h i
}== 
}>> 	
}?? 
privateCC 
voidCC 
GoodG2B1CC 
(CC 
HttpRequestCC %
reqCC& )
,CC) *
HttpResponseCC+ 7
respCC8 <
)CC< =
{DD 
stringEE 
dataEE 
;EE 
ifFF 

(FF 
IOFF 
.FF 
StaticReturnsFalseFF !
(FF! "
)FF" #
)FF# $
{GG 	
dataJJ 
=JJ 
nullJJ 
;JJ 
}KK 	
elseLL 
{MM 	
dataOO 
=OO 
$strOO 
;OO 
}PP 	
ifQQ 

(QQ 
IOQQ 
.QQ 
StaticReturnsTrueQQ  
(QQ  !
)QQ! "
)QQ" #
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
private`` 
void`` 
GoodG2B2`` 
(`` 
HttpRequest`` %
req``& )
,``) *
HttpResponse``+ 7
resp``8 <
)``< =
{aa 
stringbb 
databb 
;bb 
ifcc 

(cc 
IOcc 
.cc 
StaticReturnsTruecc  
(cc  !
)cc! "
)cc" #
{dd 	
dataff 
=ff 
$strff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
nullll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn 
StaticReturnsTruenn  
(nn  !
)nn! "
)nn" #
{oo 	
trypp 
{qq 
intrr 
valuerr 
=rr 
intrr 
.rr  
Parserr  %
(rr% &
datarr& *
)rr* +
;rr+ ,
}ss 
catchtt 
(tt 
FormatExceptiontt "
exceptNumberFormattt# 5
)tt5 6
{uu 
IOww 
.ww 
Loggerww 
.ww 
Logww 
(ww 
NLogww "
.ww" #
LogLevelww# +
.ww+ ,
Warnww, 0
,ww0 1
exceptNumberFormatww2 D
,wwD E
$strwwF `
+wwa b
datawwc g
)wwg h
;wwh i
}xx 
}yy 	
}zz 
private}} 
void}} 
GoodB2G1}} 
(}} 
HttpRequest}} %
req}}& )
,}}) *
HttpResponse}}+ 7
resp}}8 <
)}}< =
{~~ 
string 
data 
; 
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
  
StaticReturnsFalse
 !
(
! "
)
" #
)
# $
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ 
(
¡¡ 
NLog
¡¡ "
.
¡¡" #
LogLevel
¡¡# +
.
¡¡+ ,
Warn
¡¡, 0
,
¡¡0 1 
exceptNumberFormat
¡¡2 D
,
¡¡D E
$str
¡¡F j
+
¡¡k l 
exceptNumberFormat
¡¡m 
)¡¡ 
;¡¡ 
}
¢¢ 
}
££ 	
}
¤¤ 
private
§§ 
void
§§ 
GoodB2G2
§§ 
(
§§ 
HttpRequest
§§ %
req
§§& )
,
§§) *
HttpResponse
§§+ 7
resp
§§8 <
)
§§< =
{
¨¨ 
string
©© 
data
©© 
;
©© 
if
ªª 

(
ªª 
IO
ªª 
.
ªª 
StaticReturnsTrue
ªª  
(
ªª  !
)
ªª! "
)
ªª" #
{
«« 	
data
¬¬ 
=
¬¬ 
$str
¬¬ 
;
¬¬ 
{
®® "
HttpCookieCollection
¯¯ $
cookieSources
¯¯% 2
=
¯¯3 4
req
¯¯5 8
.
¯¯8 9
Cookies
¯¯9 @
;
¯¯@ A
if
°° 
(
°° 
cookieSources
°° !
!=
°°" $
null
°°% )
)
°°) *
{
±± 
data
³³ 
=
³³ 
cookieSources
³³ (
[
³³( )
$num
³³) *
]
³³* +
.
³³+ ,
Value
³³, 1
;
³³1 2
}
´´ 
}
µµ 
}
¶¶ 	
else
·· 
{
¸¸ 	
data
»» 
=
»» 
null
»» 
;
»» 
}
¼¼ 	
if
½½ 

(
½½ 
IO
½½ 
.
½½ 
StaticReturnsTrue
½½  
(
½½  !
)
½½! "
)
½½" #
{
¾¾ 	
try
¿¿ 
{
ÀÀ 
int
ÁÁ 
value
ÁÁ 
=
ÁÁ 
int
ÁÁ 
.
ÁÁ  
Parse
ÁÁ  %
(
ÁÁ% &
data
ÁÁ& *
)
ÁÁ* +
;
ÁÁ+ ,
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
FormatException
ÃÃ " 
exceptNumberFormat
ÃÃ# 5
)
ÃÃ5 6
{
ÄÄ 
IO
ÆÆ 
.
ÆÆ 
Logger
ÆÆ 
.
ÆÆ 
Log
ÆÆ 
(
ÆÆ 
NLog
ÆÆ "
.
ÆÆ" #
LogLevel
ÆÆ# +
.
ÆÆ+ ,
Warn
ÆÆ, 0
,
ÆÆ0 1 
exceptNumberFormat
ÆÆ2 D
,
ÆÆD E
$str
ÆÆF j
+
ÆÆk l 
exceptNumberFormat
ÆÆm 
)ÆÆ 
;ÆÆ 
}
ÇÇ 
}
ÈÈ 	
}
ÉÉ 
public
ËË 

override
ËË 
void
ËË 
Good
ËË 
(
ËË 
HttpRequest
ËË )
req
ËË* -
,
ËË- .
HttpResponse
ËË/ ;
resp
ËË< @
)
ËË@ A
{
ÌÌ 
GoodG2B1
ÍÍ 
(
ÍÍ 
req
ÍÍ 
,
ÍÍ 
resp
ÍÍ 
)
ÍÍ 
;
ÍÍ 
GoodG2B2
ÎÎ 
(
ÎÎ 
req
ÎÎ 
,
ÎÎ 
resp
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodB2G1
ÏÏ 
(
ÏÏ 
req
ÏÏ 
,
ÏÏ 
resp
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodB2G2
ÐÐ 
(
ÐÐ 
req
ÐÐ 
,
ÐÐ 
resp
ÐÐ 
)
ÐÐ 
;
ÐÐ 
}
ÑÑ 
}ÓÓ 
}ÔÔ ÿI
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_12.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_12 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(  
 
IO   
.   $
StaticReturnsTrueOrFalse   &
(  & '
)  ' (
)  ( )
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$  
HttpCookieCollection%% $
cookieSources%%% 2
=%%3 4
req%%5 8
.%%8 9
Cookies%%9 @
;%%@ A
if&& 
(&& 
cookieSources&& !
!=&&" $
null&&% )
)&&) *
{'' 
data)) 
=)) 
cookieSources)) (
[))( )
$num))) *
]))* +
.))+ ,
Value)), 1
;))1 2
}** 
}++ 
},, 	
else-- 
{.. 	
data00 
=00 
$str00 
;00 
}11 	
if22 

(22
 
IO22 
.22 $
StaticReturnsTrueOrFalse22 &
(22& '
)22' (
)22( )
{33 	
try44 
{55 
int66 
value66 
=66 
int66 
.66  
Parse66  %
(66% &
data66& *
)66* +
;66+ ,
}77 
catch88 
(88 
FormatException88 "
exceptNumberFormat88# 5
)885 6
{99 
IO;; 
.;; 
Logger;; 
.;; 
Log;; 
(;; 
NLog;; "
.;;" #
LogLevel;;# +
.;;+ ,
Warn;;, 0
,;;0 1
exceptNumberFormat;;2 D
,;;D E
$str;;F `
+;;a b
data;;c g
);;g h
;;;h i
}<< 
}== 	
else>> 
{?? 	
try@@ 
{AA 
intBB 
valueBB 
=BB 
intBB 
.BB  
ParseBB  %
(BB% &
dataBB& *
)BB* +
;BB+ ,
}CC 
catchDD 
(DD 
FormatExceptionDD "
exceptNumberFormatDD# 5
)DD5 6
{EE 
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG "
.GG" #
LogLevelGG# +
.GG+ ,
WarnGG, 0
,GG0 1
exceptNumberFormatGG2 D
,GGD E
$strGGF j
+GGk l
exceptNumberFormatGGm 
)	GG 
;
GG 
}HH 
}II 	
}JJ 
privateOO 
voidOO 
GoodG2BOO 
(OO 
HttpRequestOO $
reqOO% (
,OO( )
HttpResponseOO* 6
respOO7 ;
)OO; <
{PP 
stringQQ 
dataQQ 
;QQ 
ifRR 

(RR
 
IORR 
.RR $
StaticReturnsTrueOrFalseRR &
(RR& '
)RR' (
)RR( )
{SS 	
dataUU 
=UU 
$strUU 
;UU 
}VV 	
elseWW 
{XX 	
dataZZ 
=ZZ 
$strZZ 
;ZZ 
}[[ 	
if\\ 

(\\
 
IO\\ 
.\\ $
StaticReturnsTrueOrFalse\\ &
(\\& '
)\\' (
)\\( )
{]] 	
try^^ 
{__ 
int`` 
value`` 
=`` 
int`` 
.``  
Parse``  %
(``% &
data``& *
)``* +
;``+ ,
}aa 
catchbb 
(bb 
FormatExceptionbb "
exceptNumberFormatbb# 5
)bb5 6
{cc 
IOee 
.ee 
Loggeree 
.ee 
Logee 
(ee 
NLogee "
.ee" #
LogLevelee# +
.ee+ ,
Warnee, 0
,ee0 1
exceptNumberFormatee2 D
,eeD E
$streeF `
+eea b
dataeec g
)eeg h
;eeh i
}ff 
}gg 	
elsehh 
{ii 	
tryjj 
{kk 
intll 
valuell 
=ll 
intll 
.ll  
Parsell  %
(ll% &
datall& *
)ll* +
;ll+ ,
}mm 
catchnn 
(nn 
FormatExceptionnn "
exceptNumberFormatnn# 5
)nn5 6
{oo 
IOqq 
.qq 
Loggerqq 
.qq 
Logqq 
(qq 
NLogqq "
.qq" #
LogLevelqq# +
.qq+ ,
Warnqq, 0
,qq0 1
exceptNumberFormatqq2 D
,qqD E
$strqqF `
+qqa b
dataqqc g
)qqg h
;qqh i
}rr 
}ss 	
}tt 
privatexx 
voidxx 
GoodB2Gxx 
(xx 
HttpRequestxx $
reqxx% (
,xx( )
HttpResponsexx* 6
respxx7 ;
)xx; <
{yy 
stringzz 
datazz 
;zz 
if{{ 

({{
 
IO{{ 
.{{ $
StaticReturnsTrueOrFalse{{ &
({{& '
){{' (
){{( )
{|| 	
data}} 
=}} 
$str}} 
;}} 
{ "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
if
 

(

 
IO
 
.
 &
StaticReturnsTrueOrFalse
 &
(
& '
)
' (
)
( )
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
   	
else
¡¡ 
{
¢¢ 	
try
££ 
{
¤¤ 
int
¥¥ 
value
¥¥ 
=
¥¥ 
int
¥¥ 
.
¥¥  
Parse
¥¥  %
(
¥¥% &
data
¥¥& *
)
¥¥* +
;
¥¥+ ,
}
¦¦ 
catch
§§ 
(
§§ 
FormatException
§§ " 
exceptNumberFormat
§§# 5
)
§§5 6
{
¨¨ 
IO
ªª 
.
ªª 
Logger
ªª 
.
ªª 
Log
ªª 
(
ªª 
NLog
ªª "
.
ªª" #
LogLevel
ªª# +
.
ªª+ ,
Warn
ªª, 0
,
ªª0 1 
exceptNumberFormat
ªª2 D
,
ªªD E
$str
ªªF j
+
ªªk l 
exceptNumberFormat
ªªm 
)ªª 
;ªª 
}
«« 
}
¬¬ 	
}
­­ 
public
¯¯ 

override
¯¯ 
void
¯¯ 
Good
¯¯ 
(
¯¯ 
HttpRequest
¯¯ )
req
¯¯* -
,
¯¯- .
HttpResponse
¯¯/ ;
resp
¯¯< @
)
¯¯@ A
{
±± 
GoodG2B
²² 
(
²² 
req
²² 
,
²² 
resp
²² 
)
²² 
;
²² 
GoodB2G
³³ 
(
³³ 
req
³³ 
,
³³ 
resp
³³ 
)
³³ 
;
³³ 
}
´´ 
}¶¶ 
}·· ´T
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_13.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_13 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_FIVE   #
==  # %
$num  % &
)  & '
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$  
HttpCookieCollection%% $
cookieSources%%% 2
=%%3 4
req%%5 8
.%%8 9
Cookies%%9 @
;%%@ A
if&& 
(&& 
cookieSources&& !
!=&&" $
null&&% )
)&&) *
{'' 
data)) 
=)) 
cookieSources)) (
[))( )
$num))) *
]))* +
.))+ ,
Value)), 1
;))1 2
}** 
}++ 
},, 	
else-- 
{.. 	
data11 
=11 
null11 
;11 
}22 	
if33 

(33 
IO33 
.33  
STATIC_READONLY_FIVE33 #
==33# %
$num33% &
)33& '
{44 	
try55 
{66 
int77 
value77 
=77 
int77 
.77  
Parse77  %
(77% &
data77& *
)77* +
;77+ ,
}88 
catch99 
(99 
FormatException99 "
exceptNumberFormat99# 5
)995 6
{:: 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
exceptNumberFormat<<2 D
,<<D E
$str<<F `
+<<a b
data<<c g
)<<g h
;<<h i
}== 
}>> 	
}?? 
privateCC 
voidCC 
GoodG2B1CC 
(CC 
HttpRequestCC %
reqCC& )
,CC) *
HttpResponseCC+ 7
respCC8 <
)CC< =
{DD 
stringEE 
dataEE 
;EE 
ifFF 

(FF 
IOFF 
.FF  
STATIC_READONLY_FIVEFF #
!=FF# %
$numFF% &
)FF& '
{GG 	
dataJJ 
=JJ 
nullJJ 
;JJ 
}KK 	
elseLL 
{MM 	
dataOO 
=OO 
$strOO 
;OO 
}PP 	
ifQQ 

(QQ 
IOQQ 
.QQ  
STATIC_READONLY_FIVEQQ #
==QQ# %
$numQQ% &
)QQ& '
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
private`` 
void`` 
GoodG2B2`` 
(`` 
HttpRequest`` %
req``& )
,``) *
HttpResponse``+ 7
resp``8 <
)``< =
{aa 
stringbb 
databb 
;bb 
ifcc 

(cc 
IOcc 
.cc  
STATIC_READONLY_FIVEcc #
==cc# %
$numcc% &
)cc& '
{dd 	
dataff 
=ff 
$strff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
nullll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn  
STATIC_READONLY_FIVEnn #
==nn# %
$numnn% &
)nn& '
{oo 	
trypp 
{qq 
intrr 
valuerr 
=rr 
intrr 
.rr  
Parserr  %
(rr% &
datarr& *
)rr* +
;rr+ ,
}ss 
catchtt 
(tt 
FormatExceptiontt "
exceptNumberFormattt# 5
)tt5 6
{uu 
IOww 
.ww 
Loggerww 
.ww 
Logww 
(ww 
NLogww "
.ww" #
LogLevelww# +
.ww+ ,
Warnww, 0
,ww0 1
exceptNumberFormatww2 D
,wwD E
$strwwF `
+wwa b
datawwc g
)wwg h
;wwh i
}xx 
}yy 	
}zz 
private}} 
void}} 
GoodB2G1}} 
(}} 
HttpRequest}} %
req}}& )
,}}) *
HttpResponse}}+ 7
resp}}8 <
)}}< =
{~~ 
string 
data 
; 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
# %
$num
% &
)
& '
{
 	
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
!=
# %
$num
% &
)
& '
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ 
(
¡¡ 
NLog
¡¡ "
.
¡¡" #
LogLevel
¡¡# +
.
¡¡+ ,
Warn
¡¡, 0
,
¡¡0 1 
exceptNumberFormat
¡¡2 D
,
¡¡D E
$str
¡¡F j
+
¡¡k l 
exceptNumberFormat
¡¡m 
)¡¡ 
;¡¡ 
}
¢¢ 
}
££ 	
}
¤¤ 
private
§§ 
void
§§ 
GoodB2G2
§§ 
(
§§ 
HttpRequest
§§ %
req
§§& )
,
§§) *
HttpResponse
§§+ 7
resp
§§8 <
)
§§< =
{
¨¨ 
string
©© 
data
©© 
;
©© 
if
ªª 

(
ªª 
IO
ªª 
.
ªª "
STATIC_READONLY_FIVE
ªª #
==
ªª# %
$num
ªª% &
)
ªª& '
{
«« 	
data
¬¬ 
=
¬¬ 
$str
¬¬ 
;
¬¬ 
{
®® "
HttpCookieCollection
¯¯ $
cookieSources
¯¯% 2
=
¯¯3 4
req
¯¯5 8
.
¯¯8 9
Cookies
¯¯9 @
;
¯¯@ A
if
°° 
(
°° 
cookieSources
°° !
!=
°°" $
null
°°% )
)
°°) *
{
±± 
data
³³ 
=
³³ 
cookieSources
³³ (
[
³³( )
$num
³³) *
]
³³* +
.
³³+ ,
Value
³³, 1
;
³³1 2
}
´´ 
}
µµ 
}
¶¶ 	
else
·· 
{
¸¸ 	
data
»» 
=
»» 
null
»» 
;
»» 
}
¼¼ 	
if
½½ 

(
½½ 
IO
½½ 
.
½½ "
STATIC_READONLY_FIVE
½½ #
==
½½# %
$num
½½% &
)
½½& '
{
¾¾ 	
try
¿¿ 
{
ÀÀ 
int
ÁÁ 
value
ÁÁ 
=
ÁÁ 
int
ÁÁ 
.
ÁÁ  
Parse
ÁÁ  %
(
ÁÁ% &
data
ÁÁ& *
)
ÁÁ* +
;
ÁÁ+ ,
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
FormatException
ÃÃ " 
exceptNumberFormat
ÃÃ# 5
)
ÃÃ5 6
{
ÄÄ 
IO
ÆÆ 
.
ÆÆ 
Logger
ÆÆ 
.
ÆÆ 
Log
ÆÆ 
(
ÆÆ 
NLog
ÆÆ "
.
ÆÆ" #
LogLevel
ÆÆ# +
.
ÆÆ+ ,
Warn
ÆÆ, 0
,
ÆÆ0 1 
exceptNumberFormat
ÆÆ2 D
,
ÆÆD E
$str
ÆÆF j
+
ÆÆk l 
exceptNumberFormat
ÆÆm 
)ÆÆ 
;ÆÆ 
}
ÇÇ 
}
ÈÈ 	
}
ÉÉ 
public
ËË 

override
ËË 
void
ËË 
Good
ËË 
(
ËË 
HttpRequest
ËË )
req
ËË* -
,
ËË- .
HttpResponse
ËË/ ;
resp
ËË< @
)
ËË@ A
{
ÌÌ 
GoodG2B1
ÍÍ 
(
ÍÍ 
req
ÍÍ 
,
ÍÍ 
resp
ÍÍ 
)
ÍÍ 
;
ÍÍ 
GoodG2B2
ÎÎ 
(
ÎÎ 
req
ÎÎ 
,
ÎÎ 
resp
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodB2G1
ÏÏ 
(
ÏÏ 
req
ÏÏ 
,
ÏÏ 
resp
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodB2G2
ÐÐ 
(
ÐÐ 
req
ÐÐ 
,
ÐÐ 
resp
ÐÐ 
)
ÐÐ 
;
ÐÐ 
}
ÑÑ 
}ÓÓ 
}ÔÔ ÐS
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_14.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_14 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.   

staticFive   
==   
$num   
)   
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$  
HttpCookieCollection%% $
cookieSources%%% 2
=%%3 4
req%%5 8
.%%8 9
Cookies%%9 @
;%%@ A
if&& 
(&& 
cookieSources&& !
!=&&" $
null&&% )
)&&) *
{'' 
data)) 
=)) 
cookieSources)) (
[))( )
$num))) *
]))* +
.))+ ,
Value)), 1
;))1 2
}** 
}++ 
},, 	
else-- 
{.. 	
data11 
=11 
null11 
;11 
}22 	
if33 

(33 
IO33 
.33 

staticFive33 
==33 
$num33 
)33 
{44 	
try55 
{66 
int77 
value77 
=77 
int77 
.77  
Parse77  %
(77% &
data77& *
)77* +
;77+ ,
}88 
catch99 
(99 
FormatException99 "
exceptNumberFormat99# 5
)995 6
{:: 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
exceptNumberFormat<<2 D
,<<D E
$str<<F `
+<<a b
data<<c g
)<<g h
;<<h i
}== 
}>> 	
}?? 
privateCC 
voidCC 
GoodG2B1CC 
(CC 
HttpRequestCC %
reqCC& )
,CC) *
HttpResponseCC+ 7
respCC8 <
)CC< =
{DD 
stringEE 
dataEE 
;EE 
ifFF 

(FF 
IOFF 
.FF 

staticFiveFF 
!=FF 
$numFF 
)FF 
{GG 	
dataJJ 
=JJ 
nullJJ 
;JJ 
}KK 	
elseLL 
{MM 	
dataOO 
=OO 
$strOO 
;OO 
}PP 	
ifQQ 

(QQ 
IOQQ 
.QQ 

staticFiveQQ 
==QQ 
$numQQ 
)QQ 
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
private`` 
void`` 
GoodG2B2`` 
(`` 
HttpRequest`` %
req``& )
,``) *
HttpResponse``+ 7
resp``8 <
)``< =
{aa 
stringbb 
databb 
;bb 
ifcc 

(cc 
IOcc 
.cc 

staticFivecc 
==cc 
$numcc 
)cc 
{dd 	
dataff 
=ff 
$strff 
;ff 
}gg 	
elsehh 
{ii 	
datall 
=ll 
nullll 
;ll 
}mm 	
ifnn 

(nn 
IOnn 
.nn 

staticFivenn 
==nn 
$numnn 
)nn 
{oo 	
trypp 
{qq 
intrr 
valuerr 
=rr 
intrr 
.rr  
Parserr  %
(rr% &
datarr& *
)rr* +
;rr+ ,
}ss 
catchtt 
(tt 
FormatExceptiontt "
exceptNumberFormattt# 5
)tt5 6
{uu 
IOww 
.ww 
Loggerww 
.ww 
Logww 
(ww 
NLogww "
.ww" #
LogLevelww# +
.ww+ ,
Warnww, 0
,ww0 1
exceptNumberFormatww2 D
,wwD E
$strwwF `
+wwa b
datawwc g
)wwg h
;wwh i
}xx 
}yy 	
}zz 
private}} 
void}} 
GoodB2G1}} 
(}} 
HttpRequest}} %
req}}& )
,}}) *
HttpResponse}}+ 7
resp}}8 <
)}}< =
{~~ 
string 
data 
; 
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 

staticFive
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ 
(
¡¡ 
NLog
¡¡ "
.
¡¡" #
LogLevel
¡¡# +
.
¡¡+ ,
Warn
¡¡, 0
,
¡¡0 1 
exceptNumberFormat
¡¡2 D
,
¡¡D E
$str
¡¡F j
+
¡¡k l 
exceptNumberFormat
¡¡m 
)¡¡ 
;¡¡ 
}
¢¢ 
}
££ 	
}
¤¤ 
private
§§ 
void
§§ 
GoodB2G2
§§ 
(
§§ 
HttpRequest
§§ %
req
§§& )
,
§§) *
HttpResponse
§§+ 7
resp
§§8 <
)
§§< =
{
¨¨ 
string
©© 
data
©© 
;
©© 
if
ªª 

(
ªª 
IO
ªª 
.
ªª 

staticFive
ªª 
==
ªª 
$num
ªª 
)
ªª 
{
«« 	
data
¬¬ 
=
¬¬ 
$str
¬¬ 
;
¬¬ 
{
®® "
HttpCookieCollection
¯¯ $
cookieSources
¯¯% 2
=
¯¯3 4
req
¯¯5 8
.
¯¯8 9
Cookies
¯¯9 @
;
¯¯@ A
if
°° 
(
°° 
cookieSources
°° !
!=
°°" $
null
°°% )
)
°°) *
{
±± 
data
³³ 
=
³³ 
cookieSources
³³ (
[
³³( )
$num
³³) *
]
³³* +
.
³³+ ,
Value
³³, 1
;
³³1 2
}
´´ 
}
µµ 
}
¶¶ 	
else
·· 
{
¸¸ 	
data
»» 
=
»» 
null
»» 
;
»» 
}
¼¼ 	
if
½½ 

(
½½ 
IO
½½ 
.
½½ 

staticFive
½½ 
==
½½ 
$num
½½ 
)
½½ 
{
¾¾ 	
try
¿¿ 
{
ÀÀ 
int
ÁÁ 
value
ÁÁ 
=
ÁÁ 
int
ÁÁ 
.
ÁÁ  
Parse
ÁÁ  %
(
ÁÁ% &
data
ÁÁ& *
)
ÁÁ* +
;
ÁÁ+ ,
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
FormatException
ÃÃ " 
exceptNumberFormat
ÃÃ# 5
)
ÃÃ5 6
{
ÄÄ 
IO
ÆÆ 
.
ÆÆ 
Logger
ÆÆ 
.
ÆÆ 
Log
ÆÆ 
(
ÆÆ 
NLog
ÆÆ "
.
ÆÆ" #
LogLevel
ÆÆ# +
.
ÆÆ+ ,
Warn
ÆÆ, 0
,
ÆÆ0 1 
exceptNumberFormat
ÆÆ2 D
,
ÆÆD E
$str
ÆÆF j
+
ÆÆk l 
exceptNumberFormat
ÆÆm 
)ÆÆ 
;ÆÆ 
}
ÇÇ 
}
ÈÈ 	
}
ÉÉ 
public
ËË 

override
ËË 
void
ËË 
Good
ËË 
(
ËË 
HttpRequest
ËË )
req
ËË* -
,
ËË- .
HttpResponse
ËË/ ;
resp
ËË< @
)
ËË@ A
{
ÌÌ 
GoodG2B1
ÍÍ 
(
ÍÍ 
req
ÍÍ 
,
ÍÍ 
resp
ÍÍ 
)
ÍÍ 
;
ÍÍ 
GoodG2B2
ÎÎ 
(
ÎÎ 
req
ÎÎ 
,
ÎÎ 
resp
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodB2G1
ÏÏ 
(
ÏÏ 
req
ÏÏ 
,
ÏÏ 
resp
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodB2G2
ÐÐ 
(
ÐÐ 
req
ÐÐ 
,
ÐÐ 
resp
ÐÐ 
)
ÐÐ 
;
ÐÐ 
}
ÑÑ 
}ÓÓ 
}ÔÔ  ]
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_15.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_15 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
switch   
(   
$num   
)   
{!! 	
case"" 
$num"" 
:"" 
data## 
=## 
$str## 
;## 
{%%  
HttpCookieCollection&& $
cookieSources&&% 2
=&&3 4
req&&5 8
.&&8 9
Cookies&&9 @
;&&@ A
if'' 
('' 
cookieSources'' !
!=''" $
null''% )
)'') *
{(( 
data** 
=** 
cookieSources** (
[**( )
$num**) *
]*** +
.**+ ,
Value**, 1
;**1 2
}++ 
},, 
break-- 
;-- 
default.. 
:.. 
data11 
=11 
null11 
;11 
break22 
;22 
}33 	
switch44 
(44 
$num44 
)44 
{55 	
case66 
$num66 
:66 
try77 
{88 
int99 
value99 
=99 
int99 
.99  
Parse99  %
(99% &
data99& *
)99* +
;99+ ,
}:: 
catch;; 
(;; 
FormatException;; "
exceptNumberFormat;;# 5
);;5 6
{<< 
IO>> 
.>> 
Logger>> 
.>> 
Log>> 
(>> 
NLog>> "
.>>" #
LogLevel>># +
.>>+ ,
Warn>>, 0
,>>0 1
exceptNumberFormat>>2 D
,>>D E
$str>>F `
+>>a b
data>>c g
)>>g h
;>>h i
}?? 
break@@ 
;@@ 
defaultAA 
:AA 
IOCC 
.CC 
	WriteLineCC 
(CC 
$strCC /
)CC/ 0
;CC0 1
breakDD 
;DD 
}EE 	
}FF 
privateJJ 
voidJJ 
GoodG2B1JJ 
(JJ 
HttpRequestJJ %
reqJJ& )
,JJ) *
HttpResponseJJ+ 7
respJJ8 <
)JJ< =
{KK 
stringLL 
dataLL 
;LL 
switchMM 
(MM 
$numMM 
)MM 
{NN 	
caseOO 
$numOO 
:OO 
dataRR 
=RR 
nullRR 
;RR 
breakSS 
;SS 
defaultTT 
:TT 
dataVV 
=VV 
$strVV 
;VV 
breakWW 
;WW 
}XX 	
switchYY 
(YY 
$numYY 
)YY 
{ZZ 	
case[[ 
$num[[ 
:[[ 
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
breakee 
;ee 
defaultff 
:ff 
IOhh 
.hh 
	WriteLinehh 
(hh 
$strhh /
)hh/ 0
;hh0 1
breakii 
;ii 
}jj 	
}kk 
privatenn 
voidnn 
GoodG2B2nn 
(nn 
HttpRequestnn %
reqnn& )
,nn) *
HttpResponsenn+ 7
respnn8 <
)nn< =
{oo 
stringpp 
datapp 
;pp 
switchqq 
(qq 
$numqq 
)qq 
{rr 	
casess 
$numss 
:ss 
datauu 
=uu 
$struu 
;uu 
breakvv 
;vv 
defaultww 
:ww 
datazz 
=zz 
nullzz 
;zz 
break{{ 
;{{ 
}|| 	
switch}} 
(}} 
$num}} 
)}} 
{~~ 	
case 
$num 
: 
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
break
 
;
 
default
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
data
 
=
 
$str
 
;
 
{
 "
HttpCookieCollection
 $
cookieSources
% 2
=
3 4
req
5 8
.
8 9
Cookies
9 @
;
@ A
if
 
(
 
cookieSources
 !
!=
" $
null
% )
)
) *
{
 
data
 
=
 
cookieSources
 (
[
( )
$num
) *
]
* +
.
+ ,
Value
, 1
;
1 2
}
   
}
¡¡ 
break
¢¢ 
;
¢¢ 
default
££ 
:
££ 
data
¦¦ 
=
¦¦ 
null
¦¦ 
;
¦¦ 
break
§§ 
;
§§ 
}
¨¨ 	
switch
©© 
(
©© 
$num
©© 
)
©© 
{
ªª 	
case
«« 
$num
«« 
:
«« 
IO
­­ 
.
­­ 
	WriteLine
­­ 
(
­­ 
$str
­­ /
)
­­/ 0
;
­­0 1
break
®® 
;
®® 
default
¯¯ 
:
¯¯ 
try
°° 
{
±± 
int
²² 
value
²² 
=
²² 
int
²² 
.
²²  
Parse
²²  %
(
²²% &
data
²²& *
)
²²* +
;
²²+ ,
}
³³ 
catch
´´ 
(
´´ 
FormatException
´´ " 
exceptNumberFormat
´´# 5
)
´´5 6
{
µµ 
IO
·· 
.
·· 
Logger
·· 
.
·· 
Log
·· 
(
·· 
NLog
·· "
.
··" #
LogLevel
··# +
.
··+ ,
Warn
··, 0
,
··0 1 
exceptNumberFormat
··2 D
,
··D E
$str
··F j
+
··k l 
exceptNumberFormat
··m 
)·· 
;·· 
}
¸¸ 
break
¹¹ 
;
¹¹ 
}
ºº 	
}
»» 
private
¾¾ 
void
¾¾ 
GoodB2G2
¾¾ 
(
¾¾ 
HttpRequest
¾¾ %
req
¾¾& )
,
¾¾) *
HttpResponse
¾¾+ 7
resp
¾¾8 <
)
¾¾< =
{
¿¿ 
string
ÀÀ 
data
ÀÀ 
;
ÀÀ 
switch
ÁÁ 
(
ÁÁ 
$num
ÁÁ 
)
ÁÁ 
{
ÂÂ 	
case
ÃÃ 
$num
ÃÃ 
:
ÃÃ 
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ "
HttpCookieCollection
ÇÇ $
cookieSources
ÇÇ% 2
=
ÇÇ3 4
req
ÇÇ5 8
.
ÇÇ8 9
Cookies
ÇÇ9 @
;
ÇÇ@ A
if
ÈÈ 
(
ÈÈ 
cookieSources
ÈÈ !
!=
ÈÈ" $
null
ÈÈ% )
)
ÈÈ) *
{
ÉÉ 
data
ËË 
=
ËË 
cookieSources
ËË (
[
ËË( )
$num
ËË) *
]
ËË* +
.
ËË+ ,
Value
ËË, 1
;
ËË1 2
}
ÌÌ 
}
ÍÍ 
break
ÎÎ 
;
ÎÎ 
default
ÏÏ 
:
ÏÏ 
data
ÒÒ 
=
ÒÒ 
null
ÒÒ 
;
ÒÒ 
break
ÓÓ 
;
ÓÓ 
}
ÔÔ 	
switch
ÕÕ 
(
ÕÕ 
$num
ÕÕ 
)
ÕÕ 
{
ÖÖ 	
case
×× 
$num
×× 
:
×× 
try
ØØ 
{
ÙÙ 
int
ÚÚ 
value
ÚÚ 
=
ÚÚ 
int
ÚÚ 
.
ÚÚ  
Parse
ÚÚ  %
(
ÚÚ% &
data
ÚÚ& *
)
ÚÚ* +
;
ÚÚ+ ,
}
ÛÛ 
catch
ÜÜ 
(
ÜÜ 
FormatException
ÜÜ " 
exceptNumberFormat
ÜÜ# 5
)
ÜÜ5 6
{
ÝÝ 
IO
ßß 
.
ßß 
Logger
ßß 
.
ßß 
Log
ßß 
(
ßß 
NLog
ßß "
.
ßß" #
LogLevel
ßß# +
.
ßß+ ,
Warn
ßß, 0
,
ßß0 1 
exceptNumberFormat
ßß2 D
,
ßßD E
$str
ßßF j
+
ßßk l 
exceptNumberFormat
ßßm 
)ßß 
;ßß 
}
àà 
break
áá 
;
áá 
default
ââ 
:
ââ 
IO
ää 
.
ää 
	WriteLine
ää 
(
ää 
$str
ää /
)
ää/ 0
;
ää0 1
break
åå 
;
åå 
}
ææ 	
}
çç 
public
éé 

override
éé 
void
éé 
Good
éé 
(
éé 
HttpRequest
éé )
req
éé* -
,
éé- .
HttpResponse
éé/ ;
resp
éé< @
)
éé@ A
{
êê 
GoodG2B1
ëë 
(
ëë 
req
ëë 
,
ëë 
resp
ëë 
)
ëë 
;
ëë 
GoodG2B2
ìì 
(
ìì 
req
ìì 
,
ìì 
resp
ìì 
)
ìì 
;
ìì 
GoodB2G1
íí 
(
íí 
req
íí 
,
íí 
resp
íí 
)
íí 
;
íí 
GoodB2G2
îî 
(
îî 
req
îî 
,
îî 
resp
îî 
)
îî 
;
îî 
}
ïï 
}ññ 
}òò ¸-
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_16.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_16 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
while   
(   
true   
)   
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$  
HttpCookieCollection%% $
cookieSources%%% 2
=%%3 4
req%%5 8
.%%8 9
Cookies%%9 @
;%%@ A
if&& 
(&& 
cookieSources&& !
!=&&" $
null&&% )
)&&) *
{'' 
data)) 
=)) 
cookieSources)) (
[))( )
$num))) *
]))* +
.))+ ,
Value)), 1
;))1 2
}** 
}++ 
break,, 
;,, 
}-- 	
while.. 
(.. 
true.. 
).. 
{// 	
try00 
{11 
int22 
value22 
=22 
int22 
.22  
Parse22  %
(22% &
data22& *
)22* +
;22+ ,
}33 
catch44 
(44 
FormatException44 "
exceptNumberFormat44# 5
)445 6
{55 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptNumberFormat772 D
,77D E
$str77F `
+77a b
data77c g
)77g h
;77h i
}88 
break99 
;99 
}:: 	
};; 
private?? 
void?? 
GoodG2B?? 
(?? 
HttpRequest?? $
req??% (
,??( )
HttpResponse??* 6
resp??7 ;
)??; <
{@@ 
stringAA 
dataAA 
;AA 
whileBB 
(BB 
trueBB 
)BB 
{CC 	
dataEE 
=EE 
$strEE 
;EE 
breakFF 
;FF 
}GG 	
whileHH 
(HH 
trueHH 
)HH 
{II 	
tryJJ 
{KK 
intLL 
valueLL 
=LL 
intLL 
.LL  
ParseLL  %
(LL% &
dataLL& *
)LL* +
;LL+ ,
}MM 
catchNN 
(NN 
FormatExceptionNN "
exceptNumberFormatNN# 5
)NN5 6
{OO 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptNumberFormatQQ2 D
,QQD E
$strQQF `
+QQa b
dataQQc g
)QQg h
;QQh i
}RR 
breakSS 
;SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodB2GXX 
(XX 
HttpRequestXX $
reqXX% (
,XX( )
HttpResponseXX* 6
respXX7 ;
)XX; <
{YY 
stringZZ 
dataZZ 
;ZZ 
while[[ 
([[ 
true[[ 
)[[ 
{\\ 	
data]] 
=]] 
$str]] 
;]] 
{__  
HttpCookieCollection`` $
cookieSources``% 2
=``3 4
req``5 8
.``8 9
Cookies``9 @
;``@ A
ifaa 
(aa 
cookieSourcesaa !
!=aa" $
nullaa% )
)aa) *
{bb 
datadd 
=dd 
cookieSourcesdd (
[dd( )
$numdd) *
]dd* +
.dd+ ,
Valuedd, 1
;dd1 2
}ee 
}ff 
breakgg 
;gg 
}hh 	
whileii 
(ii 
trueii 
)ii 
{jj 	
trykk 
{ll 
intmm 
valuemm 
=mm 
intmm 
.mm  
Parsemm  %
(mm% &
datamm& *
)mm* +
;mm+ ,
}nn 
catchoo 
(oo 
FormatExceptionoo "
exceptNumberFormatoo# 5
)oo5 6
{pp 
IOrr 
.rr 
Loggerrr 
.rr 
Logrr 
(rr 
NLogrr "
.rr" #
LogLevelrr# +
.rr+ ,
Warnrr, 0
,rr0 1
exceptNumberFormatrr2 D
,rrD E
$strrrF j
+rrk l
exceptNumberFormatrrm 
)	rr 
;
rr 
}ss 
breaktt 
;tt 
}uu 	
}vv 
publicxx 

overridexx 
voidxx 
Goodxx 
(xx 
HttpRequestxx )
reqxx* -
,xx- .
HttpResponsexx/ ;
respxx< @
)xx@ A
{yy 
GoodG2Bzz 
(zz 
reqzz 
,zz 
respzz 
)zz 
;zz 
GoodB2G{{ 
({{ 
req{{ 
,{{ 
resp{{ 
){{ 
;{{ 
}|| 
}~~ 
} -
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_17.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_17 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 	 
HttpCookieCollection''  
cookieSources''! .
=''/ 0
req''1 4
.''4 5
Cookies''5 <
;''< =
if(( 
((( 
cookieSources(( 
!=((  
null((! %
)((% &
{)) 
data++ 
=++ 
cookieSources++ $
[++$ %
$num++% &
]++& '
.++' (
Value++( -
;++- .
},, 
}-- 	
for.. 
(.. 
int.. 
j.. 
=.. 
$num.. 
;.. 
j.. 
<.. 
$num.. 
;.. 
j..  
++..  "
).." #
{// 	
try00 
{11 
int22 
value22 
=22 
int22 
.22  
Parse22  %
(22% &
data22& *
)22* +
;22+ ,
}33 
catch44 
(44 
FormatException44 "
exceptNumberFormat44# 5
)445 6
{55 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptNumberFormat772 D
,77D E
$str77F `
+77a b
data77c g
)77g h
;77h i
}88 
}99 	
}:: 
private>> 
void>> 
GoodG2B>> 
(>> 
HttpRequest>> $
req>>% (
,>>( )
HttpResponse>>* 6
resp>>7 ;
)>>; <
{?? 
string@@ 
data@@ 
;@@ 
dataBB 
=BB 
$strBB 
;BB 
forCC 
(CC 
intCC 
jCC 
=CC 
$numCC 
;CC 
jCC 
<CC 
$numCC 
;CC 
jCC  
++CC  "
)CC" #
{DD 	
tryEE 
{FF 
intGG 
valueGG 
=GG 
intGG 
.GG  
ParseGG  %
(GG% &
dataGG& *
)GG* +
;GG+ ,
}HH 
catchII 
(II 
FormatExceptionII "
exceptNumberFormatII# 5
)II5 6
{JJ 
IOLL 
.LL 
LoggerLL 
.LL 
LogLL 
(LL 
NLogLL "
.LL" #
LogLevelLL# +
.LL+ ,
WarnLL, 0
,LL0 1
exceptNumberFormatLL2 D
,LLD E
$strLLF `
+LLa b
dataLLc g
)LLg h
;LLh i
}MM 
}NN 	
}OO 
privateRR 
voidRR 
GoodB2GRR 
(RR 
HttpRequestRR $
reqRR% (
,RR( )
HttpResponseRR* 6
respRR7 ;
)RR; <
{SS 
stringTT 
dataTT 
;TT 
dataUU 
=UU 
$strUU 
;UU 
{WW 	 
HttpCookieCollectionXX  
cookieSourcesXX! .
=XX/ 0
reqXX1 4
.XX4 5
CookiesXX5 <
;XX< =
ifYY 
(YY 
cookieSourcesYY 
!=YY  
nullYY! %
)YY% &
{ZZ 
data\\ 
=\\ 
cookieSources\\ $
[\\$ %
$num\\% &
]\\& '
.\\' (
Value\\( -
;\\- .
}]] 
}^^ 	
for__ 
(__ 
int__ 
k__ 
=__ 
$num__ 
;__ 
k__ 
<__ 
$num__ 
;__ 
k__  
++__  "
)__" #
{`` 	
tryaa 
{bb 
intcc 
valuecc 
=cc 
intcc 
.cc  
Parsecc  %
(cc% &
datacc& *
)cc* +
;cc+ ,
}dd 
catchee 
(ee 
FormatExceptionee "
exceptNumberFormatee# 5
)ee5 6
{ff 
IOhh 
.hh 
Loggerhh 
.hh 
Loghh 
(hh 
NLoghh "
.hh" #
LogLevelhh# +
.hh+ ,
Warnhh, 0
,hh0 1
exceptNumberFormathh2 D
,hhD E
$strhhF j
+hhk l
exceptNumberFormathhm 
)	hh 
;
hh 
}ii 
}jj 	
}kk 
publicmm 

overridemm 
voidmm 
Goodmm 
(mm 
HttpRequestmm )
reqmm* -
,mm- .
HttpResponsemm/ ;
respmm< @
)mm@ A
{nn 
GoodG2Boo 
(oo 
reqoo 
,oo 
respoo 
)oo 
;oo 
GoodB2Gpp 
(pp 
reqpp 
,pp 
resppp 
)pp 
;pp 
}qq 
}ss 
}tt ÌN
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_21.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_21 H
:I J
AbstractTestCaseWebK ^
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public   

override   
void   
Bad   
(   
HttpRequest   (
req  ) ,
,  , -
HttpResponse  . :
resp  ; ?
)  ? @
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	 
HttpCookieCollection&&  
cookieSources&&! .
=&&/ 0
req&&1 4
.&&4 5
Cookies&&5 <
;&&< =
if'' 
('' 
cookieSources'' 
!=''  
null''! %
)''% &
{(( 
data** 
=** 
cookieSources** $
[**$ %
$num**% &
]**& '
.**' (
Value**( -
;**- .
}++ 
},, 	

badPrivate-- 
=-- 
true-- 
;-- 
BadSink.. 
(.. 
data.. 
,.. 
req.. 
,.. 
resp..  
)..  !
;..! "
}// 
private11 
void11 
BadSink11 
(11 
string11 
data11  $
,11% &
HttpRequest11' 2
req113 6
,116 7
HttpResponse118 D
resp11E I
)11I J
{22 
if33 

(33 

badPrivate33 
)33 
{44 	
try55 
{66 
int77 
value77 
=77 
int77 
.77  
Parse77  %
(77% &
data77& *
)77* +
;77+ ,
}88 
catch99 
(99 
FormatException99 "
exceptNumberFormat99# 5
)995 6
{:: 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
exceptNumberFormat<<2 D
,<<D E
$str<<F `
+<<a b
data<<c g
)<<g h
;<<h i
}== 
}>> 	
}?? 
privateBB 
boolBB 
goodB2G1PrivateBB  
=BB! "
falseBB# (
;BB( )
privateCC 
boolCC 
goodB2G2PrivateCC  
=CC! "
falseCC# (
;CC( )
privateDD 
boolDD 
goodG2BPrivateDD 
=DD  !
falseDD" '
;DD' (
publicFF 

overrideFF 
voidFF 
GoodFF 
(FF 
HttpRequestFF )
reqFF* -
,FF- .
HttpResponseFF/ ;
respFF< @
)FF@ A
{GG 
GoodB2G1HH 
(HH 
reqHH 
,HH 
respHH 
)HH 
;HH 
GoodB2G2II 
(II 
reqII 
,II 
respII 
)II 
;II 
GoodG2BJJ 
(JJ 
reqJJ 
,JJ 
respJJ 
)JJ 
;JJ 
}KK 
privateNN 
voidNN 
GoodB2G1NN 
(NN 
HttpRequestNN %
reqNN& )
,NN) *
HttpResponseNN+ 7
respNN8 <
)NN< =
{OO 
stringPP 
dataPP 
;PP 
dataQQ 
=QQ 
$strQQ 
;QQ 
{SS 	 
HttpCookieCollectionTT  
cookieSourcesTT! .
=TT/ 0
reqTT1 4
.TT4 5
CookiesTT5 <
;TT< =
ifUU 
(UU 
cookieSourcesUU 
!=UU  
nullUU! %
)UU% &
{VV 
dataXX 
=XX 
cookieSourcesXX $
[XX$ %
$numXX% &
]XX& '
.XX' (
ValueXX( -
;XX- .
}YY 
}ZZ 	
goodB2G1Private[[ 
=[[ 
false[[ 
;[[  
GoodB2G1Sink\\ 
(\\ 
data\\ 
,\\ 
req\\ 
,\\  
resp\\! %
)\\% &
;\\& '
}]] 
private__ 
void__ 
GoodB2G1Sink__ 
(__ 
string__ $
data__% )
,__* +
HttpRequest__, 7
req__8 ;
,__; <
HttpResponse__= I
resp__J N
)__N O
{`` 
ifaa 

(aa 
goodB2G1Privateaa 
)aa 
{bb 	
IOdd 
.dd 
	WriteLinedd 
(dd 
$strdd /
)dd/ 0
;dd0 1
}ee 	
elseff 
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF j
+ook l
exceptNumberFormatoom 
)	oo 
;
oo 
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G2uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
stringww 
dataww 
;ww 
dataxx 
=xx 
$strxx 
;xx 
{zz 	 
HttpCookieCollection{{  
cookieSources{{! .
={{/ 0
req{{1 4
.{{4 5
Cookies{{5 <
;{{< =
if|| 
(|| 
cookieSources|| 
!=||  
null||! %
)||% &
{}} 
data 
= 
cookieSources $
[$ %
$num% &
]& '
.' (
Value( -
;- .
}
 
}
 	
goodB2G2Private
 
=
 
true
 
;
 
GoodB2G2Sink
 
(
 
data
 
,
 
req
 
,
  
resp
! %
)
% &
;
& '
}
 
private
 
void
 
GoodB2G2Sink
 
(
 
string
 $
data
% )
,
* +
HttpRequest
, 7
req
8 ;
,
; <
HttpResponse
= I
resp
J N
)
N O
{
 
if
 

(
 
goodB2G2Private
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodG2B
 
(
 
HttpRequest
 $
req
% (
,
( )
HttpResponse
* 6
resp
7 ;
)
; <
{
 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
goodG2BPrivate
 
=
 
true
 
;
 
GoodG2BSink
 
(
 
data
 
,
 
req
 
,
 
resp
  $
)
$ %
;
% &
}
 
private
   
void
   
GoodG2BSink
   
(
   
string
   #
data
  $ (
,
  ) *
HttpRequest
  + 6
req
  7 :
,
  : ;
HttpResponse
  < H
resp
  I M
)
  M N
{
¡¡ 
if
¢¢ 

(
¢¢ 
goodG2BPrivate
¢¢ 
)
¢¢ 
{
££ 	
try
¤¤ 
{
¥¥ 
int
¦¦ 
value
¦¦ 
=
¦¦ 
int
¦¦ 
.
¦¦  
Parse
¦¦  %
(
¦¦% &
data
¦¦& *
)
¦¦* +
;
¦¦+ ,
}
§§ 
catch
¨¨ 
(
¨¨ 
FormatException
¨¨ " 
exceptNumberFormat
¨¨# 5
)
¨¨5 6
{
©© 
IO
«« 
.
«« 
Logger
«« 
.
«« 
Log
«« 
(
«« 
NLog
«« "
.
««" #
LogLevel
««# +
.
««+ ,
Warn
««, 0
,
««0 1 
exceptNumberFormat
««2 D
,
««D E
$str
««F `
+
««a b
data
««c g
)
««g h
;
««h i
}
¬¬ 
}
­­ 	
}
®® 
}°° 
}±± .
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_22a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_22a I
:J K
AbstractTestCaseWebL _
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public   

override   
void   
Bad   
(   
HttpRequest   (
req  ) ,
,  , -
HttpResponse  . :
resp  ; ?
)  ? @
{!! 
string"" 
data"" 
="" 
null"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	 
HttpCookieCollection&&  
cookieSources&&! .
=&&/ 0
req&&1 4
.&&4 5
Cookies&&5 <
;&&< =
if'' 
('' 
cookieSources'' 
!=''  
null''! %
)''% &
{(( 
data** 
=** 
cookieSources** $
[**$ %
$num**% &
]**& '
.**' (
Value**( -
;**- .
}++ 
},, 	
badPublicStatic-- 
=-- 
true-- 
;-- O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_22b.. K
...K L
BadSink..L S
(..S T
data..T X
,..Y Z
req..[ ^
,..^ _
resp..` d
)..d e
;..e f
}// 
public22 

static22 
bool22  
goodB2G1PublicStatic22 +
=22, -
false22. 3
;223 4
public33 

static33 
bool33  
goodB2G2PublicStatic33 +
=33, -
false33. 3
;333 4
public44 

static44 
bool44 
goodG2BPublicStatic44 *
=44+ ,
false44- 2
;442 3
public66 

override66 
void66 
Good66 
(66 
HttpRequest66 )
req66* -
,66- .
HttpResponse66/ ;
resp66< @
)66@ A
{77 
GoodB2G188 
(88 
req88 
,88 
resp88 
)88 
;88 
GoodB2G299 
(99 
req99 
,99 
resp99 
)99 
;99 
GoodG2B:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
};; 
private>> 
void>> 
GoodB2G1>> 
(>> 
HttpRequest>> %
req>>& )
,>>) *
HttpResponse>>+ 7
resp>>8 <
)>>< =
{?? 
string@@ 
data@@ 
=@@ 
null@@ 
;@@ 
dataAA 
=AA 
$strAA 
;AA 
{CC 	 
HttpCookieCollectionDD  
cookieSourcesDD! .
=DD/ 0
reqDD1 4
.DD4 5
CookiesDD5 <
;DD< =
ifEE 
(EE 
cookieSourcesEE 
!=EE  
nullEE! %
)EE% &
{FF 
dataHH 
=HH 
cookieSourcesHH $
[HH$ %
$numHH% &
]HH& '
.HH' (
ValueHH( -
;HH- .
}II 
}JJ 	 
goodB2G1PublicStaticKK 
=KK 
falseKK $
;KK$ %O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_22bLL K
.LLK L
GoodB2G1SinkLLL X
(LLX Y
dataLLY ]
,LL^ _
reqLL` c
,LLc d
respLLe i
)LLi j
;LLj k
}MM 
privatePP 
voidPP 
GoodB2G2PP 
(PP 
HttpRequestPP %
reqPP& )
,PP) *
HttpResponsePP+ 7
respPP8 <
)PP< =
{QQ 
stringRR 
dataRR 
=RR 
nullRR 
;RR 
dataSS 
=SS 
$strSS 
;SS 
{UU 	 
HttpCookieCollectionVV  
cookieSourcesVV! .
=VV/ 0
reqVV1 4
.VV4 5
CookiesVV5 <
;VV< =
ifWW 
(WW 
cookieSourcesWW 
!=WW  
nullWW! %
)WW% &
{XX 
dataZZ 
=ZZ 
cookieSourcesZZ $
[ZZ$ %
$numZZ% &
]ZZ& '
.ZZ' (
ValueZZ( -
;ZZ- .
}[[ 
}\\ 	 
goodB2G2PublicStatic]] 
=]] 
true]] #
;]]# $O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_22b^^ K
.^^K L
GoodB2G2Sink^^L X
(^^X Y
data^^Y ]
,^^^ _
req^^` c
,^^c d
resp^^e i
)^^i j
;^^j k
}__ 
privatebb 
voidbb 
GoodG2Bbb 
(bb 
HttpRequestbb $
reqbb% (
,bb( )
HttpResponsebb* 6
respbb7 ;
)bb; <
{cc 
stringdd 
datadd 
=dd 
nulldd 
;dd 
dataff 
=ff 
$strff 
;ff 
goodG2BPublicStaticgg 
=gg 
truegg "
;gg" #O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_22bhh K
.hhK L
GoodG2BSinkhhL W
(hhW X
datahhX \
,hh] ^
reqhh_ b
,hhb c
resphhd h
)hhh i
;hhi j
}ii 
}kk 
}ll Â,
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_22b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_22b I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
if 

( O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_22a O
.O P
badPublicStaticP _
)_ `
{ 	
try   
{!! 
int"" 
value"" 
="" 
int"" 
.""  
Parse""  %
(""% &
data""& *
)""* +
;""+ ,
}## 
catch$$ 
($$ 
FormatException$$ "
exceptNumberFormat$$# 5
)$$5 6
{%% 
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' "
.''" #
LogLevel''# +
.''+ ,
Warn'', 0
,''0 1
exceptNumberFormat''2 D
,''D E
$str''F `
+''a b
data''c g
)''g h
;''h i
}(( 
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
}00 
public55 

static55 
void55 
GoodB2G1Sink55 #
(55# $
string55$ *
data55+ /
,550 1
HttpRequest552 =
req55> A
,55A B
HttpResponse55C O
resp55P T
)55T U
{66 
if77 

(77 O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_22a77 O
.77O P 
goodB2G1PublicStatic77P d
)77d e
{88 	
data;; 
=;; 
null;; 
;;; 
}<< 	
else== 
{>> 	
try?? 
{@@ 
intAA 
valueAA 
=AA 
intAA 
.AA  
ParseAA  %
(AA% &
dataAA& *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
FormatExceptionCC "
exceptNumberFormatCC# 5
)CC5 6
{DD 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
exceptNumberFormatFF2 D
,FFD E
$strFFF j
+FFk l
exceptNumberFormatFFm 
)	FF 
;
FF 
}GG 
}HH 	
}II 
publicLL 

staticLL 
voidLL 
GoodB2G2SinkLL #
(LL# $
stringLL$ *
dataLL+ /
,LL0 1
HttpRequestLL2 =
reqLL> A
,LLA B
HttpResponseLLC O
respLLP T
)LLT U
{MM 
ifNN 

(NN O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_22aNN O
.NNO P 
goodB2G2PublicStaticNNP d
)NNd e
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF j
+WWk l
exceptNumberFormatWWm 
)	WW 
;
WW 
}XX 
}YY 	
elseZZ 
{[[ 	
data^^ 
=^^ 
null^^ 
;^^ 
}__ 	
}`` 
publiccc 

staticcc 
voidcc 
GoodG2BSinkcc "
(cc" #
stringcc# )
datacc* .
,cc/ 0
HttpRequestcc1 <
reqcc= @
,cc@ A
HttpResponseccB N
respccO S
)ccS T
{dd 
ifee 

(ee O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_22aee O
.eeO P
goodG2BPublicStaticeeP c
)eec d
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF `
+nna b
datannc g
)nng h
;nnh i
}oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
}ww 
}yy 
}zz å-
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_31.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_31 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
dataCopy 
; 
{   	
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$  
HttpCookieCollection%% $
cookieSources%%% 2
=%%3 4
req%%5 8
.%%8 9
Cookies%%9 @
;%%@ A
if&& 
(&& 
cookieSources&& !
!=&&" $
null&&% )
)&&) *
{'' 
data)) 
=)) 
cookieSources)) (
[))( )
$num))) *
]))* +
.))+ ,
Value)), 1
;))1 2
}** 
}++ 
dataCopy,, 
=,, 
data,, 
;,, 
}-- 	
{.. 	
string// 
data// 
=// 
dataCopy// "
;//" #
try00 
{11 
int22 
value22 
=22 
int22 
.22  
Parse22  %
(22% &
data22& *
)22* +
;22+ ,
}33 
catch44 
(44 
FormatException44 "
exceptNumberFormat44# 5
)445 6
{55 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptNumberFormat772 D
,77D E
$str77F `
+77a b
data77c g
)77g h
;77h i
}88 
}99 	
}:: 
public== 

override== 
void== 
Good== 
(== 
HttpRequest== )
req==* -
,==- .
HttpResponse==/ ;
resp==< @
)==@ A
{>> 
GoodG2B?? 
(?? 
req?? 
,?? 
resp?? 
)?? 
;?? 
GoodB2G@@ 
(@@ 
req@@ 
,@@ 
resp@@ 
)@@ 
;@@ 
}AA 
privateDD 
voidDD 
GoodG2BDD 
(DD 
HttpRequestDD $
reqDD% (
,DD( )
HttpResponseDD* 6
respDD7 ;
)DD; <
{EE 
stringFF 
dataCopyFF 
;FF 
{GG 	
stringHH 
dataHH 
;HH 
dataJJ 
=JJ 
$strJJ 
;JJ 
dataCopyKK 
=KK 
dataKK 
;KK 
}LL 	
{MM 	
stringNN 
dataNN 
=NN 
dataCopyNN "
;NN" #
tryOO 
{PP 
intQQ 
valueQQ 
=QQ 
intQQ 
.QQ  
ParseQQ  %
(QQ% &
dataQQ& *
)QQ* +
;QQ+ ,
}RR 
catchSS 
(SS 
FormatExceptionSS "
exceptNumberFormatSS# 5
)SS5 6
{TT 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$strVVF `
+VVa b
dataVVc g
)VVg h
;VVh i
}WW 
}XX 	
}YY 
private\\ 
void\\ 
GoodB2G\\ 
(\\ 
HttpRequest\\ $
req\\% (
,\\( )
HttpResponse\\* 6
resp\\7 ;
)\\; <
{]] 
string^^ 
dataCopy^^ 
;^^ 
{__ 	
string`` 
data`` 
;`` 
dataaa 
=aa 
$straa 
;aa 
{cc  
HttpCookieCollectiondd $
cookieSourcesdd% 2
=dd3 4
reqdd5 8
.dd8 9
Cookiesdd9 @
;dd@ A
ifee 
(ee 
cookieSourcesee !
!=ee" $
nullee% )
)ee) *
{ff 
datahh 
=hh 
cookieSourceshh (
[hh( )
$numhh) *
]hh* +
.hh+ ,
Valuehh, 1
;hh1 2
}ii 
}jj 
dataCopykk 
=kk 
datakk 
;kk 
}ll 	
{mm 	
stringnn 
datann 
=nn 
dataCopynn "
;nn" #
tryoo 
{pp 
intqq 
valueqq 
=qq 
intqq 
.qq  
Parseqq  %
(qq% &
dataqq& *
)qq* +
;qq+ ,
}rr 
catchss 
(ss 
FormatExceptionss "
exceptNumberFormatss# 5
)ss5 6
{tt 
IOvv 
.vv 
Loggervv 
.vv 
Logvv 
(vv 
NLogvv "
.vv" #
LogLevelvv# +
.vv+ ,
Warnvv, 0
,vv0 1
exceptNumberFormatvv2 D
,vvD E
$strvvF j
+vvk l
exceptNumberFormatvvm 
)	vv 
;
vv 
}ww 
}xx 	
}yy 
}{{ 
}|| 2
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_41.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_41 H
:I J
AbstractTestCaseWebK ^
{ 
private 
static 
void 
BadSink 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public** 

override** 
void** 
Bad** 
(** 
HttpRequest** (
req**) ,
,**, -
HttpResponse**. :
resp**; ?
)**? @
{++ 
string,, 
data,, 
;,, 
data-- 
=-- 
$str-- 
;-- 
{// 	 
HttpCookieCollection00  
cookieSources00! .
=00/ 0
req001 4
.004 5
Cookies005 <
;00< =
if11 
(11 
cookieSources11 
!=11  
null11! %
)11% &
{22 
data44 
=44 
cookieSources44 $
[44$ %
$num44% &
]44& '
.44' (
Value44( -
;44- .
}55 
}66 	
BadSink77 
(77 
data77 
,77 
req77 
,77 
resp77  
)77! "
;77" #
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
HttpRequest;; )
req;;* -
,;;- .
HttpResponse;;/ ;
resp;;< @
);;@ A
{<< 
GoodG2B== 
(== 
req== 
,== 
resp== 
)== 
;== 
GoodB2G>> 
(>> 
req>> 
,>> 
resp>> 
)>> 
;>> 
}?? 
privateAA 
staticAA 
voidAA 
GoodG2BSinkAA #
(AA# $
stringAA$ *
dataAA+ /
,AA0 1
HttpRequestAA2 =
reqAA> A
,AAA B
HttpResponseAAC O
respAAP T
)AAT U
{BB 
tryCC 
{DD 	
intEE 
valueEE 
=EE 
intEE 
.EE 
ParseEE !
(EE! "
dataEE" &
)EE& '
;EE' (
}FF 	
catchGG 
(GG 
FormatExceptionGG 
exceptNumberFormatGG 1
)GG1 2
{HH 	
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ 
.JJ 
LogLevelJJ '
.JJ' (
WarnJJ( ,
,JJ, -
exceptNumberFormatJJ. @
,JJ@ A
$strJJB \
+JJ] ^
dataJJ_ c
)JJc d
;JJd e
}KK 	
}LL 
privateOO 
staticOO 
voidOO 
GoodG2BOO 
(OO  
HttpRequestOO  +
reqOO, /
,OO/ 0
HttpResponseOO1 =
respOO> B
)OOB C
{PP 
stringQQ 
dataQQ 
;QQ 
dataSS 
=SS 
$strSS 
;SS 
GoodG2BSinkTT 
(TT 
dataTT 
,TT 
reqTT 
,TT 
respTT  $
)TT% &
;TT& '
}UU 
privateWW 
staticWW 
voidWW 
GoodB2GSinkWW #
(WW# $
stringWW$ *
dataWW+ /
,WW0 1
HttpRequestWW2 =
reqWW> A
,WWA B
HttpResponseWWC O
respWWP T
)WWT U
{XX 
tryYY 
{ZZ 	
int[[ 
value[[ 
=[[ 
int[[ 
.[[ 
Parse[[ !
([[! "
data[[" &
)[[& '
;[[' (
}\\ 	
catch]] 
(]] 
FormatException]] 
exceptNumberFormat]] 1
)]]1 2
{^^ 	
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` 
.`` 
LogLevel`` '
.``' (
Warn``( ,
,``, -
exceptNumberFormat``. @
,``@ A
$str``B f
+``g h
exceptNumberFormat``i {
)``{ |
;``| }
}aa 	
}bb 
privateee 
staticee 
voidee 
GoodB2Gee 
(ee  
HttpRequestee  +
reqee, /
,ee/ 0
HttpResponseee1 =
respee> B
)eeB C
{ff 
stringgg 
datagg 
;gg 
datahh 
=hh 
$strhh 
;hh 
{jj 	 
HttpCookieCollectionkk  
cookieSourceskk! .
=kk/ 0
reqkk1 4
.kk4 5
Cookieskk5 <
;kk< =
ifll 
(ll 
cookieSourcesll 
!=ll  
nullll! %
)ll% &
{mm 
dataoo 
=oo 
cookieSourcesoo $
[oo$ %
$numoo% &
]oo& '
.oo' (
Valueoo( -
;oo- .
}pp 
}qq 	
GoodB2GSinkrr 
(rr 
datarr 
,rr 
reqrr 
,rr 
resprr  $
)rr% &
;rr& '
}ss 
}uu 
}vv Ú2
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_42.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_42 H
:I J
AbstractTestCaseWebK ^
{ 
private 
static 
string 
	BadSource #
(# $
HttpRequest$ /
req0 3
,3 4
HttpResponse5 A
respB F
)F G
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	 
HttpCookieCollection##  
cookieSources##! .
=##/ 0
req##1 4
.##4 5
Cookies##5 <
;##< =
if$$ 
($$ 
cookieSources$$ 
!=$$  
null$$! %
)$$% &
{%% 
data'' 
='' 
cookieSources'' $
[''$ %
$num''% &
]''& '
.''' (
Value''( -
;''- .
}(( 
})) 	
return** 
data** 
;** 
}++ 
public-- 

override-- 
void-- 
Bad-- 
(-- 
HttpRequest-- (
req--) ,
,--, -
HttpResponse--. :
resp--; ?
)--? @
{.. 
string// 
data// 
=// 
	BadSource// 
(//  
req//  #
,//# $
resp//% )
)//) *
;//* +
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
private== 
static== 
string== 
GoodG2BSource== '
(==' (
HttpRequest==( 3
req==4 7
,==7 8
HttpResponse==9 E
resp==F J
)==J K
{>> 
string?? 
data?? 
;?? 
dataAA 
=AA 
$strAA 
;AA 
returnBB 
dataBB 
;BB 
}CC 
privateEE 
staticEE 
voidEE 
GoodG2BEE 
(EE  
HttpRequestEE  +
reqEE, /
,EE/ 0
HttpResponseEE1 =
respEE> B
)EEB C
{FF 
stringGG 
dataGG 
=GG 
GoodG2BSourceGG #
(GG# $
reqGG$ '
,GG' (
respGG) -
)GG- .
;GG. /
tryHH 
{II 	
intJJ 
valueJJ 
=JJ 
intJJ 
.JJ 
ParseJJ !
(JJ! "
dataJJ" &
)JJ& '
;JJ' (
}KK 	
catchLL 
(LL 
FormatExceptionLL 
exceptNumberFormatLL 1
)LL1 2
{MM 	
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO 
.OO 
LogLevelOO '
.OO' (
WarnOO( ,
,OO, -
exceptNumberFormatOO. @
,OO@ A
$strOOB \
+OO] ^
dataOO_ c
)OOc d
;OOd e
}PP 	
}QQ 
privateTT 
staticTT 
stringTT 
GoodB2GSourceTT '
(TT' (
HttpRequestTT( 3
reqTT4 7
,TT7 8
HttpResponseTT9 E
respTTF J
)TTJ K
{UU 
stringVV 
dataVV 
;VV 
dataWW 
=WW 
$strWW 
;WW 
{YY 	 
HttpCookieCollectionZZ  
cookieSourcesZZ! .
=ZZ/ 0
reqZZ1 4
.ZZ4 5
CookiesZZ5 <
;ZZ< =
if[[ 
([[ 
cookieSources[[ 
!=[[  
null[[! %
)[[% &
{\\ 
data^^ 
=^^ 
cookieSources^^ $
[^^$ %
$num^^% &
]^^& '
.^^' (
Value^^( -
;^^- .
}__ 
}`` 	
returnaa 
dataaa 
;aa 
}bb 
privatedd 
staticdd 
voiddd 
GoodB2Gdd 
(dd  
HttpRequestdd  +
reqdd, /
,dd/ 0
HttpResponsedd1 =
respdd> B
)ddB C
{ee 
stringff 
dataff 
=ff 
GoodB2GSourceff #
(ff# $
reqff$ '
,ff' (
respff) -
)ff- .
;ff. /
trygg 
{hh 	
intii 
valueii 
=ii 
intii 
.ii 
Parseii !
(ii! "
dataii" &
)ii& '
;ii' (
}jj 	
catchkk 
(kk 
FormatExceptionkk 
exceptNumberFormatkk 1
)kk1 2
{ll 	
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn 
.nn 
LogLevelnn '
.nn' (
Warnnn( ,
,nn, -
exceptNumberFormatnn. @
,nn@ A
$strnnB f
+nng h
exceptNumberFormatnni {
)nn{ |
;nn| }
}oo 	
}pp 
publicrr 

overriderr 
voidrr 
Goodrr 
(rr 
HttpRequestrr )
reqrr* -
,rr- .
HttpResponserr/ ;
resprr< @
)rr@ A
{ss 
GoodG2Btt 
(tt 
reqtt 
,tt 
resptt 
)tt 
;tt 
GoodB2Guu 
(uu 
requu 
,uu 
respuu 
)uu 
;uu 
}vv 
}xx 
}yy 5
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_45.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_45 H
:I J
AbstractTestCaseWebK ^
{ 
private 
string 
dataBad 
; 
private 
string 
dataGoodG2B 
; 
private 
string 
dataGoodB2G 
; 
private!! 
void!! 
BadSink!! 
(!! 
HttpRequest!! $
req!!% (
,!!( )
HttpResponse!!* 6
resp!!7 ;
)!!; <
{"" 
string## 
data## 
=## 
dataBad## 
;## 
try$$ 
{%% 	
int&& 
value&& 
=&& 
int&& 
.&& 
Parse&& !
(&&! "
data&&" &
)&&& '
;&&' (
}'' 	
catch(( 
((( 
FormatException(( 
exceptNumberFormat(( 1
)((1 2
{)) 	
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ 
.++ 
LogLevel++ '
.++' (
Warn++( ,
,++, -
exceptNumberFormat++. @
,++@ A
$str++B \
+++] ^
data++_ c
)++c d
;++d e
},, 	
}-- 
public// 

override// 
void// 
Bad// 
(// 
HttpRequest// (
req//) ,
,//, -
HttpResponse//. :
resp//; ?
)//? @
{00 
string11 
data11 
;11 
data22 
=22 
$str22 
;22 
{44 	 
HttpCookieCollection55  
cookieSources55! .
=55/ 0
req551 4
.554 5
Cookies555 <
;55< =
if66 
(66 
cookieSources66 
!=66  
null66! %
)66% &
{77 
data99 
=99 
cookieSources99 $
[99$ %
$num99% &
]99& '
.99' (
Value99( -
;99- .
}:: 
};; 	
dataBad<< 
=<< 
data<< 
;<< 
BadSink== 
(== 
req== 
,== 
resp== 
)== 
;== 
}>> 
publicAA 

overrideAA 
voidAA 
GoodAA 
(AA 
HttpRequestAA )
reqAA* -
,AA- .
HttpResponseAA/ ;
respAA< @
)AA@ A
{BB 
GoodG2BCC 
(CC 
reqCC 
,CC 
respCC 
)CC 
;CC 
GoodB2GDD 
(DD 
reqDD 
,DD 
respDD 
)DD 
;DD 
}EE 
privateGG 
voidGG 
GoodG2BSinkGG 
(GG 
HttpRequestGG (
reqGG) ,
,GG, -
HttpResponseGG. :
respGG; ?
)GG? @
{HH 
stringII 
dataII 
=II 
dataGoodG2BII !
;II! "
tryJJ 
{KK 	
intLL 
valueLL 
=LL 
intLL 
.LL 
ParseLL !
(LL! "
dataLL" &
)LL& '
;LL' (
}MM 	
catchNN 
(NN 
FormatExceptionNN 
exceptNumberFormatNN 1
)NN1 2
{OO 	
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ 
.QQ 
LogLevelQQ '
.QQ' (
WarnQQ( ,
,QQ, -
exceptNumberFormatQQ. @
,QQ@ A
$strQQB \
+QQ] ^
dataQQ_ c
)QQc d
;QQd e
}RR 	
}SS 
privateVV 
voidVV 
GoodG2BVV 
(VV 
HttpRequestVV $
reqVV% (
,VV( )
HttpResponseVV* 6
respVV7 ;
)VV; <
{WW 
stringXX 
dataXX 
;XX 
dataZZ 
=ZZ 
$strZZ 
;ZZ 
dataGoodG2B[[ 
=[[ 
data[[ 
;[[ 
GoodG2BSink\\ 
(\\ 
req\\ 
,\\ 
resp\\ 
)\\ 
;\\ 
}]] 
private__ 
void__ 
GoodB2GSink__ 
(__ 
HttpRequest__ (
req__) ,
,__, -
HttpResponse__. :
resp__; ?
)__? @
{`` 
stringaa 
dataaa 
=aa 
dataGoodB2Gaa !
;aa! "
trybb 
{cc 	
intdd 
valuedd 
=dd 
intdd 
.dd 
Parsedd !
(dd! "
datadd" &
)dd& '
;dd' (
}ee 	
catchff 
(ff 
FormatExceptionff 
exceptNumberFormatff 1
)ff1 2
{gg 	
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii 
.ii 
LogLevelii '
.ii' (
Warnii( ,
,ii, -
exceptNumberFormatii. @
,ii@ A
$striiB f
+iig h
exceptNumberFormatiii {
)ii{ |
;ii| }
}jj 	
}kk 
privatenn 
voidnn 
GoodB2Gnn 
(nn 
HttpRequestnn $
reqnn% (
,nn( )
HttpResponsenn* 6
respnn7 ;
)nn; <
{oo 
stringpp 
datapp 
;pp 
dataqq 
=qq 
$strqq 
;qq 
{ss 	 
HttpCookieCollectiontt  
cookieSourcestt! .
=tt/ 0
reqtt1 4
.tt4 5
Cookiestt5 <
;tt< =
ifuu 
(uu 
cookieSourcesuu 
!=uu  
nulluu! %
)uu% &
{vv 
dataxx 
=xx 
cookieSourcesxx $
[xx$ %
$numxx% &
]xx& '
.xx' (
Valuexx( -
;xx- .
}yy 
}zz 	
dataGoodB2G{{ 
={{ 
data{{ 
;{{ 
GoodB2GSink|| 
(|| 
req|| 
,|| 
resp|| 
)|| 
;|| 
}}} 
} 
} 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_51a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_51a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	 
HttpCookieCollection##  
cookieSources##! .
=##/ 0
req##1 4
.##4 5
Cookies##5 <
;##< =
if$$ 
($$ 
cookieSources$$ 
!=$$  
null$$! %
)$$% &
{%% 
data'' 
='' 
cookieSources'' $
[''$ %
$num''% &
]''& '
.''' (
Value''( -
;''- .
}(( 
})) 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_51b** K
.**K L
BadSink**L S
(**S T
data**T X
,**Y Z
req**[ ^
,**^ _
resp**` d
)**e f
;**f g
}++ 
public.. 

override.. 
void.. 
Good.. 
(.. 
HttpRequest.. )
req..* -
,..- .
HttpResponse../ ;
resp..< @
)..@ A
{// 
GoodG2B00 
(00 
req00 
,00 
resp00 
)00 
;00 
GoodB2G11 
(11 
req11 
,11 
resp11 
)11 
;11 
}22 
private55 
void55 
GoodG2B55 
(55 
HttpRequest55 $
req55% (
,55( )
HttpResponse55* 6
resp557 ;
)55; <
{66 
string77 
data77 
;77 
data99 
=99 
$str99 
;99 O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_51b:: K
.::K L
GoodG2BSink::L W
(::W X
data::X \
,::] ^
req::_ b
,::b c
resp::d h
)::i j
;::j k
};; 
private>> 
void>> 
GoodB2G>> 
(>> 
HttpRequest>> $
req>>% (
,>>( )
HttpResponse>>* 6
resp>>7 ;
)>>; <
{?? 
string@@ 
data@@ 
;@@ 
dataAA 
=AA 
$strAA 
;AA 
{CC 	 
HttpCookieCollectionDD  
cookieSourcesDD! .
=DD/ 0
reqDD1 4
.DD4 5
CookiesDD5 <
;DD< =
ifEE 
(EE 
cookieSourcesEE 
!=EE  
nullEE! %
)EE% &
{FF 
dataHH 
=HH 
cookieSourcesHH $
[HH$ %
$numHH% &
]HH& '
.HH' (
ValueHH( -
;HH- .
}II 
}JJ 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_51bKK K
.KKK L
GoodB2GSinkKKL W
(KKW X
dataKKX \
,KK] ^
reqKK_ b
,KKb c
respKKd h
)KKi j
;KKj k
}LL 
}NN 
}OO à
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_51b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_51b I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
,,,/ 0
HttpRequest,,1 <
req,,= @
,,,@ A
HttpResponse,,B N
resp,,O S
),,S T
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
,::/ 0
HttpRequest::1 <
req::= @
,::@ A
HttpResponse::B N
resp::O S
)::S T
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_52a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_52a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	 
HttpCookieCollection##  
cookieSources##! .
=##/ 0
req##1 4
.##4 5
Cookies##5 <
;##< =
if$$ 
($$ 
cookieSources$$ 
!=$$  
null$$! %
)$$% &
{%% 
data'' 
='' 
cookieSources'' $
[''$ %
$num''% &
]''& '
.''' (
Value''( -
;''- .
}(( 
})) 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_52b** K
.**K L
BadSink**L S
(**S T
data**T X
,**Y Z
req**[ ^
,**^ _
resp**` d
)**d e
;**e f
}++ 
public.. 

override.. 
void.. 
Good.. 
(.. 
HttpRequest.. )
req..* -
,..- .
HttpResponse../ ;
resp..< @
)..@ A
{// 
GoodG2B00 
(00 
req00 
,00 
resp00 
)00 
;00 
GoodB2G11 
(11 
req11 
,11 
resp11 
)11 
;11 
}22 
private55 
void55 
GoodG2B55 
(55 
HttpRequest55 $
req55% (
,55( )
HttpResponse55* 6
resp557 ;
)55; <
{66 
string77 
data77 
;77 
data99 
=99 
$str99 
;99 O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_52b:: K
.::K L
GoodG2BSink::L W
(::W X
data::X \
,::] ^
req::_ b
,::b c
resp::d h
)::h i
;::i j
};; 
private>> 
void>> 
GoodB2G>> 
(>> 
HttpRequest>> $
req>>% (
,>>( )
HttpResponse>>* 6
resp>>7 ;
)>>; <
{?? 
string@@ 
data@@ 
;@@ 
dataAA 
=AA 
$strAA 
;AA 
{CC 	 
HttpCookieCollectionDD  
cookieSourcesDD! .
=DD/ 0
reqDD1 4
.DD4 5
CookiesDD5 <
;DD< =
ifEE 
(EE 
cookieSourcesEE 
!=EE  
nullEE! %
)EE% &
{FF 
dataHH 
=HH 
cookieSourcesHH $
[HH$ %
$numHH% &
]HH& '
.HH' (
ValueHH( -
;HH- .
}II 
}JJ 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_52bKK K
.KKK L
GoodB2GSinkKKL W
(KKW X
dataKKX \
,KK] ^
reqKK_ b
,KKb c
respKKd h
)KKh i
;KKi j
}LL 
}NN 
}OO ¾
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_52b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_52b I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_52c K
.K L
BadSinkL S
(S T
dataT X
,Y Z
req[ ^
,^ _
resp` d
)d e
;e f
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_52c&& K
.&&K L
GoodG2BSink&&L W
(&&W X
data&&X \
,&&] ^
req&&_ b
,&&b c
resp&&d h
)&&h i
;&&i j
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_52c,, K
.,,K L
GoodB2GSink,,L W
(,,W X
data,,X \
,,,] ^
req,,_ b
,,,b c
resp,,d h
),,h i
;,,i j
}-- 
}// 
}00 à
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_52c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_52c I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
,,,/ 0
HttpRequest,,1 <
req,,= @
,,,@ A
HttpResponse,,B N
resp,,O S
),,S T
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
,::/ 0
HttpRequest::1 <
req::= @
,::@ A
HttpResponse::B N
resp::O S
)::S T
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	 
HttpCookieCollection##  
cookieSources##! .
=##/ 0
req##1 4
.##4 5
Cookies##5 <
;##< =
if$$ 
($$ 
cookieSources$$ 
!=$$  
null$$! %
)$$% &
{%% 
data'' 
='' 
cookieSources'' $
[''$ %
$num''% &
]''& '
.''' (
Value''( -
;''- .
}(( 
})) 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53b** K
.**K L
BadSink**L S
(**S T
data**T X
,**Y Z
req**[ ^
,**^ _
resp**` d
)**d e
;**e f
}++ 
public.. 

override.. 
void.. 
Good.. 
(.. 
HttpRequest.. )
req..* -
,..- .
HttpResponse../ ;
resp..< @
)..@ A
{// 
GoodG2B00 
(00 
req00 
,00 
resp00 
)00 
;00 
GoodB2G11 
(11 
req11 
,11 
resp11 
)11 
;11 
}22 
private55 
void55 
GoodG2B55 
(55 
HttpRequest55 $
req55% (
,55( )
HttpResponse55* 6
resp557 ;
)55; <
{66 
string77 
data77 
;77 
data99 
=99 
$str99 
;99 O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53b:: K
.::K L
GoodG2BSink::L W
(::W X
data::X \
,::] ^
req::_ b
,::b c
resp::d h
)::h i
;::i j
};; 
private>> 
void>> 
GoodB2G>> 
(>> 
HttpRequest>> $
req>>% (
,>>( )
HttpResponse>>* 6
resp>>7 ;
)>>; <
{?? 
string@@ 
data@@ 
;@@ 
dataAA 
=AA 
$strAA 
;AA 
{CC 	 
HttpCookieCollectionDD  
cookieSourcesDD! .
=DD/ 0
reqDD1 4
.DD4 5
CookiesDD5 <
;DD< =
ifEE 
(EE 
cookieSourcesEE 
!=EE  
nullEE! %
)EE% &
{FF 
dataHH 
=HH 
cookieSourcesHH $
[HH$ %
$numHH% &
]HH& '
.HH' (
ValueHH( -
;HH- .
}II 
}JJ 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53bKK K
.KKK L
GoodB2GSinkKKL W
(KKW X
dataKKX \
,KK] ^
reqKK_ b
,KKb c
respKKd h
)KKh i
;KKi j
}LL 
}NN 
}OO ¾
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53b I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53c K
.K L
BadSinkL S
(S T
dataT X
,Y Z
req[ ^
,^ _
resp` d
)d e
;e f
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53c&& K
.&&K L
GoodG2BSink&&L W
(&&W X
data&&X \
,&&] ^
req&&_ b
,&&b c
resp&&d h
)&&h i
;&&i j
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53c,, K
.,,K L
GoodB2GSink,,L W
(,,W X
data,,X \
,,,] ^
req,,_ b
,,,b c
resp,,d h
),,h i
;,,i j
}-- 
}// 
}00 ¾
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53c I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53d K
.K L
BadSinkL S
(S T
dataT X
,Y Z
req[ ^
,^ _
resp` d
)d e
;e f
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53d&& K
.&&K L
GoodG2BSink&&L W
(&&W X
data&&X \
,&&] ^
req&&_ b
,&&b c
resp&&d h
)&&h i
;&&i j
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53d,, K
.,,K L
GoodB2GSink,,L W
(,,W X
data,,X \
,,,] ^
req,,_ b
,,,b c
resp,,d h
),,h i
;,,i j
}-- 
}// 
}00 à
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_53d I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
,,,/ 0
HttpRequest,,1 <
req,,= @
,,,@ A
HttpResponse,,B N
resp,,O S
),,S T
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
,::/ 0
HttpRequest::1 <
req::= @
,::@ A
HttpResponse::B N
resp::O S
)::S T
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	 
HttpCookieCollection##  
cookieSources##! .
=##/ 0
req##1 4
.##4 5
Cookies##5 <
;##< =
if$$ 
($$ 
cookieSources$$ 
!=$$  
null$$! %
)$$% &
{%% 
data'' 
='' 
cookieSources'' $
[''$ %
$num''% &
]''& '
.''' (
Value''( -
;''- .
}(( 
})) 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54b** K
.**K L
BadSink**L S
(**S T
data**T X
,**Y Z
req**[ ^
,**^ _
resp**` d
)**d e
;**e f
}++ 
public.. 

override.. 
void.. 
Good.. 
(.. 
HttpRequest.. )
req..* -
,..- .
HttpResponse../ ;
resp..< @
)..@ A
{// 
GoodG2B00 
(00 
req00 
,00 
resp00 
)00 
;00 
GoodB2G11 
(11 
req11 
,11 
resp11 
)11 
;11 
}22 
private55 
void55 
GoodG2B55 
(55 
HttpRequest55 $
req55% (
,55( )
HttpResponse55* 6
resp557 ;
)55; <
{66 
string77 
data77 
;77 
data99 
=99 
$str99 
;99 O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54b:: K
.::K L
GoodG2BSink::L W
(::W X
data::X \
,::] ^
req::_ b
,::b c
resp::d h
)::h i
;::i j
};; 
private>> 
void>> 
GoodB2G>> 
(>> 
HttpRequest>> $
req>>% (
,>>( )
HttpResponse>>* 6
resp>>7 ;
)>>; <
{?? 
string@@ 
data@@ 
;@@ 
dataAA 
=AA 
$strAA 
;AA 
{CC 	 
HttpCookieCollectionDD  
cookieSourcesDD! .
=DD/ 0
reqDD1 4
.DD4 5
CookiesDD5 <
;DD< =
ifEE 
(EE 
cookieSourcesEE 
!=EE  
nullEE! %
)EE% &
{FF 
dataHH 
=HH 
cookieSourcesHH $
[HH$ %
$numHH% &
]HH& '
.HH' (
ValueHH( -
;HH- .
}II 
}JJ 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54bKK K
.KKK L
GoodB2GSinkKKL W
(KKW X
dataKKX \
,KK] ^
reqKK_ b
,KKb c
respKKd h
)KKh i
;KKi j
}LL 
}NN 
}OO ¾
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54b I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54c K
.K L
BadSinkL S
(S T
dataT X
,Y Z
req[ ^
,^ _
resp` d
)d e
;e f
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54c&& K
.&&K L
GoodG2BSink&&L W
(&&W X
data&&X \
,&&] ^
req&&_ b
,&&b c
resp&&d h
)&&h i
;&&i j
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54c,, K
.,,K L
GoodB2GSink,,L W
(,,W X
data,,X \
,,,] ^
req,,_ b
,,,b c
resp,,d h
),,h i
;,,i j
}-- 
}// 
}00 ¾
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54c I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54d K
.K L
BadSinkL S
(S T
dataT X
,Y Z
req[ ^
,^ _
resp` d
)d e
;e f
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54d&& K
.&&K L
GoodG2BSink&&L W
(&&W X
data&&X \
,&&] ^
req&&_ b
,&&b c
resp&&d h
)&&h i
;&&i j
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54d,, K
.,,K L
GoodB2GSink,,L W
(,,W X
data,,X \
,,,] ^
req,,_ b
,,,b c
resp,,d h
),,h i
;,,i j
}-- 
}// 
}00 ¾
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54d I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54e K
.K L
BadSinkL S
(S T
dataT X
,Y Z
req[ ^
,^ _
resp` d
)d e
;e f
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54e&& K
.&&K L
GoodG2BSink&&L W
(&&W X
data&&X \
,&&] ^
req&&_ b
,&&b c
resp&&d h
)&&h i
;&&i j
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54e,, K
.,,K L
GoodB2GSink,,L W
(,,W X
data,,X \
,,,] ^
req,,_ b
,,,b c
resp,,d h
),,h i
;,,i j
}-- 
}// 
}00 à
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54e.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_54e I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
,,,/ 0
HttpRequest,,1 <
req,,= @
,,,@ A
HttpResponse,,B N
resp,,O S
),,S T
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
,::/ 0
HttpRequest::1 <
req::= @
,::@ A
HttpResponse::B N
resp::O S
)::S T
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH é#
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_61a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_61a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
= O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_61b Y
.Y Z
	BadSourceZ c
(c d
reqd g
,g h
respi m
)m n
;n o
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
HttpRequest++ )
req++* -
,++- .
HttpResponse++/ ;
resp++< @
)++@ A
{,, 
GoodG2B-- 
(-- 
req-- 
,-- 
resp-- 
)-- 
;-- 
GoodB2G.. 
(.. 
req.. 
,.. 
resp.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
HttpRequest22  +
req22, /
,22/ 0
HttpResponse221 =
resp22> B
)22B C
{33 
string44 
data44 
=44 O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_61b44 Y
.44Y Z
GoodG2BSource44Z g
(44g h
req44h k
,44k l
resp44m q
)44q r
;44r s
try55 
{66 	
int77 
value77 
=77 
int77 
.77 
Parse77 !
(77! "
data77" &
)77& '
;77' (
}88 	
catch99 
(99 
FormatException99 
exceptNumberFormat99 1
)991 2
{:: 	
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< 
.<< 
LogLevel<< '
.<<' (
Warn<<( ,
,<<, -
exceptNumberFormat<<. @
,<<@ A
$str<<B \
+<<] ^
data<<_ c
)<<c d
;<<d e
}== 	
}>> 
privateAA 
staticAA 
voidAA 
GoodB2GAA 
(AA  
HttpRequestAA  +
reqAA, /
,AA/ 0
HttpResponseAA1 =
respAA> B
)AAB C
{BB 
stringCC 
dataCC 
=CC O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_61bCC Y
.CCY Z
GoodB2GSourceCCZ g
(CCg h
reqCCh k
,CCk l
respCCm q
)CCq r
;CCr s
tryDD 
{EE 	
intFF 
valueFF 
=FF 
intFF 
.FF 
ParseFF !
(FF! "
dataFF" &
)FF& '
;FF' (
}GG 	
catchHH 
(HH 
FormatExceptionHH 
exceptNumberFormatHH 1
)HH1 2
{II 	
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK 
.KK 
LogLevelKK '
.KK' (
WarnKK( ,
,KK, -
exceptNumberFormatKK. @
,KK@ A
$strKKB f
+KKg h
exceptNumberFormatKKi {
)KK{ |
;KK| }
}LL 	
}MM 
}OO 
}PP ð
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_61b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_61b I
{ 
public 

static 
string 
	BadSource "
(" #
HttpRequest# .
req/ 2
,2 3
HttpResponse4 @
respA E
)E F
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	 
HttpCookieCollection##  
cookieSources##! .
=##/ 0
req##1 4
.##4 5
Cookies##5 <
;##< =
if$$ 
($$ 
cookieSources$$ 
!=$$  
null$$! %
)$$% &
{%% 
data'' 
='' 
cookieSources'' $
[''$ %
$num''% &
]''& '
.''' (
Value''( -
;''- .
}(( 
})) 	
return** 
data** 
;** 
}++ 
public00 

static00 
string00 
GoodG2BSource00 &
(00& '
HttpRequest00' 2
req003 6
,006 7
HttpResponse008 D
resp00E I
)00I J
{11 
string22 
data22 
;22 
data44 
=44 
$str44 
;44 
return55 
data55 
;55 
}66 
public99 

static99 
string99 
GoodB2GSource99 &
(99& '
HttpRequest99' 2
req993 6
,996 7
HttpResponse998 D
resp99E I
)99I J
{:: 
string;; 
data;; 
;;; 
data<< 
=<< 
$str<< 
;<< 
{>> 	 
HttpCookieCollection??  
cookieSources??! .
=??/ 0
req??1 4
.??4 5
Cookies??5 <
;??< =
if@@ 
(@@ 
cookieSources@@ 
!=@@  
null@@! %
)@@% &
{AA 
dataCC 
=CC 
cookieSourcesCC $
[CC$ %
$numCC% &
]CC& '
.CC' (
ValueCC( -
;CC- .
}DD 
}EE 	
returnFF 
dataFF 
;FF 
}GG 
}II 
}JJ Ó$
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_66a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_66a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	 
HttpCookieCollection##  
cookieSources##! .
=##/ 0
req##1 4
.##4 5
Cookies##5 <
;##< =
if$$ 
($$ 
cookieSources$$ 
!=$$  
null$$! %
)$$% &
{%% 
data'' 
='' 
cookieSources'' $
[''$ %
$num''% &
]''& '
.''' (
Value''( -
;''- .
}(( 
})) 	
string** 
[** 
]** 
	dataArray** 
=** 
new**  
string**! '
[**' (
$num**( )
]**) *
;*** +
	dataArray++ 
[++ 
$num++ 
]++ 
=++ 
data++ 
;++ O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_66b,, K
.,,K L
BadSink,,L S
(,,S T
	dataArray,,T ]
,,,^ _
req,,` c
,,,c d
resp,,e i
),,j k
;,,k l
}-- 
public00 

override00 
void00 
Good00 
(00 
HttpRequest00 )
req00* -
,00- .
HttpResponse00/ ;
resp00< @
)00@ A
{11 
GoodG2B22 
(22 
req22 
,22 
resp22 
)22 
;22 
GoodB2G33 
(33 
req33 
,33 
resp33 
)33 
;33 
}44 
private77 
static77 
void77 
GoodG2B77 
(77  
HttpRequest77  +
req77, /
,77/ 0
HttpResponse771 =
resp77> B
)77B C
{88 
string99 
data99 
;99 
data;; 
=;; 
$str;; 
;;; 
string<< 
[<< 
]<< 
	dataArray<< 
=<< 
new<<  
string<<! '
[<<' (
$num<<( )
]<<) *
;<<* +
	dataArray== 
[== 
$num== 
]== 
=== 
data== 
;== O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_66b>> K
.>>K L
GoodG2BSink>>L W
(>>W X
	dataArray>>X a
,>>b c
req>>d g
,>>g h
resp>>i m
)>>n o
;>>o p
}?? 
privateBB 
staticBB 
voidBB 
GoodB2GBB 
(BB  
HttpRequestBB  +
reqBB, /
,BB/ 0
HttpResponseBB1 =
respBB> B
)BBB C
{CC 
stringDD 
dataDD 
;DD 
dataEE 
=EE 
$strEE 
;EE 
{GG 	 
HttpCookieCollectionHH  
cookieSourcesHH! .
=HH/ 0
reqHH1 4
.HH4 5
CookiesHH5 <
;HH< =
ifII 
(II 
cookieSourcesII 
!=II  
nullII! %
)II% &
{JJ 
dataLL 
=LL 
cookieSourcesLL $
[LL$ %
$numLL% &
]LL& '
.LL' (
ValueLL( -
;LL- .
}MM 
}NN 	
stringOO 
[OO 
]OO 
	dataArrayOO 
=OO 
newOO  
stringOO! '
[OO' (
$numOO( )
]OO) *
;OO* +
	dataArrayPP 
[PP 
$numPP 
]PP 
=PP 
dataPP 
;PP O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_66bQQ K
.QQK L
GoodB2GSinkQQL W
(QQW X
	dataArrayQQX a
,QQb c
reqQQd g
,QQg h
respQQi m
)QQn o
;QQo p
}RR 
}TT 
}UU ê
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_66b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_66b I
{ 
public 

static 
void 
BadSink 
( 
string %
[% &
]& '
	dataArray( 1
,2 3
HttpRequest4 ?
req@ C
,C D
HttpResponseE Q
respR V
)V W
{ 
string 
data 
= 
	dataArray 
[  
$num  !
]! "
;" #
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
string--# )
[--) *
]--* +
	dataArray--, 5
,--6 7
HttpRequest--8 C
req--D G
,--G H
HttpResponse--I U
resp--V Z
)--Z [
{.. 
string// 
data// 
=// 
	dataArray// 
[//  
$num//  !
]//! "
;//" #
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
string<<# )
[<<) *
]<<* +
	dataArray<<, 5
,<<6 7
HttpRequest<<8 C
req<<D G
,<<G H
HttpResponse<<I U
resp<<V Z
)<<Z [
{== 
string>> 
data>> 
=>> 
	dataArray>> 
[>>  
$num>>  !
]>>! "
;>>" #
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK %
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_67a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_67a I
:J K
AbstractTestCaseWebL _
{ 
public 

class 
	Container 
{ 
public 
string 
containerOne "
;" #
}   
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
string$$ 
data$$ 
;$$ 
data%% 
=%% 
$str%% 
;%% 
{'' 	 
HttpCookieCollection((  
cookieSources((! .
=((/ 0
req((1 4
.((4 5
Cookies((5 <
;((< =
if)) 
()) 
cookieSources)) 
!=))  
null))! %
)))% &
{** 
data,, 
=,, 
cookieSources,, $
[,,$ %
$num,,% &
],,& '
.,,' (
Value,,( -
;,,- .
}-- 
}.. 	
	Container// 
dataContainer// 
=//  !
new//" %
	Container//& /
(/// 0
)//0 1
;//1 2
dataContainer00 
.00 
containerOne00 "
=00# $
data00% )
;00) *O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_67b11 K
.11K L
BadSink11L S
(11S T
dataContainer11T a
,11b c
req11d g
,11g h
resp11i m
)11n o
;11o p
}22 
public55 

override55 
void55 
Good55 
(55 
HttpRequest55 )
req55* -
,55- .
HttpResponse55/ ;
resp55< @
)55@ A
{66 
GoodG2B77 
(77 
req77 
,77 
resp77 
)77 
;77 
GoodB2G88 
(88 
req88 
,88 
resp88 
)88 
;88 
}99 
private<< 
static<< 
void<< 
GoodG2B<< 
(<<  
HttpRequest<<  +
req<<, /
,<</ 0
HttpResponse<<1 =
resp<<> B
)<<B C
{== 
string>> 
data>> 
;>> 
data@@ 
=@@ 
$str@@ 
;@@ 
	ContainerAA 
dataContainerAA 
=AA  !
newAA" %
	ContainerAA& /
(AA/ 0
)AA0 1
;AA1 2
dataContainerBB 
.BB 
containerOneBB "
=BB# $
dataBB% )
;BB) *O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_67bCC K
.CCK L
GoodG2BSinkCCL W
(CCW X
dataContainerCCX e
,CCf g
reqCCh k
,CCk l
respCCm q
)CCr s
;CCs t
}DD 
privateGG 
staticGG 
voidGG 
GoodB2GGG 
(GG  
HttpRequestGG  +
reqGG, /
,GG/ 0
HttpResponseGG1 =
respGG> B
)GGB C
{HH 
stringII 
dataII 
;II 
dataJJ 
=JJ 
$strJJ 
;JJ 
{LL 	 
HttpCookieCollectionMM  
cookieSourcesMM! .
=MM/ 0
reqMM1 4
.MM4 5
CookiesMM5 <
;MM< =
ifNN 
(NN 
cookieSourcesNN 
!=NN  
nullNN! %
)NN% &
{OO 
dataQQ 
=QQ 
cookieSourcesQQ $
[QQ$ %
$numQQ% &
]QQ& '
.QQ' (
ValueQQ( -
;QQ- .
}RR 
}SS 	
	ContainerTT 
dataContainerTT 
=TT  !
newTT" %
	ContainerTT& /
(TT/ 0
)TT0 1
;TT1 2
dataContainerUU 
.UU 
containerOneUU "
=UU# $
dataUU% )
;UU) *O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_67bVV K
.VVK L
GoodB2GSinkVVL W
(VVW X
dataContainerVVX e
,VVf g
reqVVh k
,VVk l
respVVm q
)VVr s
;VVs t
}WW 
}YY 
}ZZ á 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_67b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_67b I
{ 
public 

static 
void 
BadSink 
( O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_67a b
.b c
	Containerc l
dataContainerm z
,{ |
HttpRequest	} 
req
 
,
 
HttpResponse
 
resp
 
)
  
{ 
string 
data 
= 
dataContainer #
.# $
containerOne$ 0
;0 1
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_67a--# f
.--f g
	Container--g p
dataContainer--q ~
,	-- 
HttpRequest
-- 
req
-- 
,
-- 
HttpResponse
-- 
resp
-- £
)
--£ ¤
{.. 
string// 
data// 
=// 
dataContainer// #
.//# $
containerOne//$ 0
;//0 1
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_67a<<# f
.<<f g
	Container<<g p
dataContainer<<q ~
,	<< 
HttpRequest
<< 
req
<< 
,
<< 
HttpResponse
<< 
resp
<< £
)
<<£ ¤
{== 
string>> 
data>> 
=>> 
dataContainer>> #
.>># $
containerOne>>$ 0
;>>0 1
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_68a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_68a I
:J K
AbstractTestCaseWebL _
{ 
public 

static 
string 
data 
; 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{   
data!! 
=!! 
$str!! 
;!! 
{## 	 
HttpCookieCollection$$  
cookieSources$$! .
=$$/ 0
req$$1 4
.$$4 5
Cookies$$5 <
;$$< =
if%% 
(%% 
cookieSources%% 
!=%%  
null%%! %
)%%% &
{&& 
data(( 
=(( 
cookieSources(( $
[(($ %
$num((% &
]((& '
.((' (
Value((( -
;((- .
})) 
}** 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_68b++ K
.++K L
BadSink++L S
(++S T
req++T W
,++W X
resp++Y ]
)++] ^
;++^ _
},, 
public// 

override// 
void// 
Good// 
(// 
HttpRequest// )
req//* -
,//- .
HttpResponse/// ;
resp//< @
)//@ A
{00 
GoodG2B11 
(11 
req11 
,11 
resp11 
)11 
;11 
GoodB2G22 
(22 
req22 
,22 
resp22 
)22 
;22 
}33 
private66 
static66 
void66 
GoodG2B66 
(66  
HttpRequest66  +
req66, /
,66/ 0
HttpResponse661 =
resp66> B
)66B C
{77 
data99 
=99 
$str99 
;99 O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_68b:: K
.::K L
GoodG2BSink::L W
(::W X
req::X [
,::[ \
resp::] a
)::a b
;::b c
};; 
private>> 
static>> 
void>> 
GoodB2G>> 
(>>  
HttpRequest>>  +
req>>, /
,>>/ 0
HttpResponse>>1 =
resp>>> B
)>>B C
{?? 
data@@ 
=@@ 
$str@@ 
;@@ 
{BB 	 
HttpCookieCollectionCC  
cookieSourcesCC! .
=CC/ 0
reqCC1 4
.CC4 5
CookiesCC5 <
;CC< =
ifDD 
(DD 
cookieSourcesDD 
!=DD  
nullDD! %
)DD% &
{EE 
dataGG 
=GG 
cookieSourcesGG $
[GG$ %
$numGG% &
]GG& '
.GG' (
ValueGG( -
;GG- .
}HH 
}II 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_68bJJ K
.JJK L
GoodB2GSinkJJL W
(JJW X
reqJJX [
,JJ[ \
respJJ] a
)JJa b
;JJb c
}KK 
}MM 
}NN ã
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_68b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_68b I
{ 
public 

static 
void 
BadSink 
( 
HttpRequest *
req+ .
,. /
HttpResponse0 <
resp= A
)A B
{ 
string 
data 
= O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_68a Y
.Y Z
dataZ ^
;^ _
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
HttpRequest--# .
req--/ 2
,--2 3
HttpResponse--4 @
resp--A E
)--E F
{.. 
string// 
data// 
=// O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_68a// Y
.//Y Z
data//Z ^
;//^ _
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
HttpRequest<<# .
req<</ 2
,<<2 3
HttpResponse<<4 @
resp<<A E
)<<E F
{== 
string>> 
data>> 
=>> O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_68a>> Y
.>>Y Z
data>>Z ^
;>>^ _
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK Á
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_71a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_71a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	 
HttpCookieCollection##  
cookieSources##! .
=##/ 0
req##1 4
.##4 5
Cookies##5 <
;##< =
if$$ 
($$ 
cookieSources$$ 
!=$$  
null$$! %
)$$% &
{%% 
data'' 
='' 
cookieSources'' $
[''$ %
$num''% &
]''& '
.''' (
Value''( -
;''- .
}(( 
})) 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_71b** K
.**K L
BadSink**L S
(**S T
(**T U
Object**U [
)**[ \
data**\ `
,**a b
req**c f
,**f g
resp**h l
)**m n
;**n o
}++ 
public.. 

override.. 
void.. 
Good.. 
(.. 
HttpRequest.. )
req..* -
,..- .
HttpResponse../ ;
resp..< @
)..@ A
{// 
GoodG2B00 
(00 
req00 
,00 
resp00 
)00 
;00 
GoodB2G11 
(11 
req11 
,11 
resp11 
)11 
;11 
}22 
private55 
static55 
void55 
GoodG2B55 
(55  
HttpRequest55  +
req55, /
,55/ 0
HttpResponse551 =
resp55> B
)55B C
{66 
string77 
data77 
;77 
data99 
=99 
$str99 
;99 O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_71b:: K
.::K L
GoodG2BSink::L W
(::W X
(::X Y
Object::Y _
)::_ `
data::` d
,::e f
req::g j
,::j k
resp::l p
)::q r
;::r s
};; 
private>> 
static>> 
void>> 
GoodB2G>> 
(>>  
HttpRequest>>  +
req>>, /
,>>/ 0
HttpResponse>>1 =
resp>>> B
)>>B C
{?? 
string@@ 
data@@ 
;@@ 
dataAA 
=AA 
$strAA 
;AA 
{CC 	 
HttpCookieCollectionDD  
cookieSourcesDD! .
=DD/ 0
reqDD1 4
.DD4 5
CookiesDD5 <
;DD< =
ifEE 
(EE 
cookieSourcesEE 
!=EE  
nullEE! %
)EE% &
{FF 
dataHH 
=HH 
cookieSourcesHH $
[HH$ %
$numHH% &
]HH& '
.HH' (
ValueHH( -
;HH- .
}II 
}JJ 	O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_71bKK K
.KKK L
GoodB2GSinkKKL W
(KKW X
(KKX Y
ObjectKKY _
)KK_ `
dataKK` d
,KKe f
reqKKg j
,KKj k
respKKl p
)KKq r
;KKr s
}LL 
}NN 
}OO 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_71b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_71b I
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
,1 2
HttpRequest3 >
req? B
,B C
HttpResponseD P
respQ U
)U V
{ 
string 
data 
= 
( 
string 
) 

dataObject (
;( )
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
Object..# )

dataObject..* 4
,..5 6
HttpRequest..7 B
req..C F
,..F G
HttpResponse..H T
resp..U Y
)..Y Z
{// 
string00 
data00 
=00 
(00 
string00 
)00 

dataObject00 (
;00( )
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
Object==# )

dataObject==* 4
,==5 6
HttpRequest==7 B
req==C F
,==F G
HttpResponse==H T
resp==U Y
)==Y Z
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 

dataObject?? (
;??( )
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ±,
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_72a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_72a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	 
HttpCookieCollection$$  
cookieSources$$! .
=$$/ 0
req$$1 4
.$$4 5
Cookies$$5 <
;$$< =
if%% 
(%% 
cookieSources%% 
!=%%  
null%%! %
)%%% &
{&& 
data(( 
=(( 
cookieSources(( $
[(($ %
$num((% &
]((& '
.((' (
Value((( -
;((- .
})) 
}** 	
	Hashtable++ 
dataHashtable++ 
=++  !
new++" %
	Hashtable++& /
(++/ 0
$num++0 1
)++1 2
;++2 3
dataHashtable,, 
.,, 
Add,, 
(,, 
$num,, 
,,, 
data,, !
),,! "
;,," #
dataHashtable-- 
.-- 
Add-- 
(-- 
$num-- 
,-- 
data-- !
)--! "
;--" #
dataHashtable.. 
... 
Add.. 
(.. 
$num.. 
,.. 
data.. !
)..! "
;.." #O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_72b// K
.//K L
BadSink//L S
(//S T
dataHashtable//T a
,//b c
req//d g
,//g h
resp//i m
)//n o
;//o p
}00 
public33 

override33 
void33 
Good33 
(33 
HttpRequest33 )
req33* -
,33- .
HttpResponse33/ ;
resp33< @
)33@ A
{44 
GoodG2B55 
(55 
req55 
,55 
resp55 
)55 
;55 
GoodB2G66 
(66 
req66 
,66 
resp66 
)66 
;66 
}77 
private:: 
static:: 
void:: 
GoodG2B:: 
(::  
HttpRequest::  +
req::, /
,::/ 0
HttpResponse::1 =
resp::> B
)::B C
{;; 
string<< 
data<< 
;<< 
data>> 
=>> 
$str>> 
;>> 
	Hashtable?? 
dataHashtable?? 
=??  !
new??" %
	Hashtable??& /
(??/ 0
$num??0 1
)??1 2
;??2 3
dataHashtable@@ 
.@@ 
Add@@ 
(@@ 
$num@@ 
,@@ 
data@@ !
)@@! "
;@@" #
dataHashtableAA 
.AA 
AddAA 
(AA 
$numAA 
,AA 
dataAA !
)AA! "
;AA" #
dataHashtableBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB !
)BB! "
;BB" #O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_72bCC K
.CCK L
GoodG2BSinkCCL W
(CCW X
dataHashtableCCX e
,CCf g
reqCCh k
,CCk l
respCCm q
)CCr s
;CCs t
}DD 
privateGG 
staticGG 
voidGG 
GoodB2GGG 
(GG  
HttpRequestGG  +
reqGG, /
,GG/ 0
HttpResponseGG1 =
respGG> B
)GGB C
{HH 
stringII 
dataII 
;II 
dataJJ 
=JJ 
$strJJ 
;JJ 
{LL 	 
HttpCookieCollectionMM  
cookieSourcesMM! .
=MM/ 0
reqMM1 4
.MM4 5
CookiesMM5 <
;MM< =
ifNN 
(NN 
cookieSourcesNN 
!=NN  
nullNN! %
)NN% &
{OO 
dataQQ 
=QQ 
cookieSourcesQQ $
[QQ$ %
$numQQ% &
]QQ& '
.QQ' (
ValueQQ( -
;QQ- .
}RR 
}SS 	
	HashtableTT 
dataHashtableTT 
=TT  !
newTT" %
	HashtableTT& /
(TT/ 0
$numTT0 1
)TT1 2
;TT2 3
dataHashtableUU 
.UU 
AddUU 
(UU 
$numUU 
,UU 
dataUU !
)UU! "
;UU" #
dataHashtableVV 
.VV 
AddVV 
(VV 
$numVV 
,VV 
dataVV !
)VV! "
;VV" #
dataHashtableWW 
.WW 
AddWW 
(WW 
$numWW 
,WW 
dataWW !
)WW! "
;WW" #O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_72bXX K
.XXK L
GoodB2GSinkXXL W
(XXW X
dataHashtableXXX e
,XXf g
reqXXh k
,XXk l
respXXm q
)XXr s
;XXs t
}YY 
}[[ 
}\\ Ç
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_72b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_72b I
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
,7 8
HttpRequest9 D
reqE H
,H I
HttpResponseJ V
respW [
)[ \
{ 
string 
data 
= 
( 
string 
) 
dataHashtable ,
[, -
$num- .
]. /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
	Hashtable..# ,
dataHashtable..- :
,..; <
HttpRequest..= H
req..I L
,..L M
HttpResponse..N Z
resp..[ _
).._ `
{// 
string00 
data00 
=00 
(00 
string00 
)00 
dataHashtable00 ,
[00, -
$num00- .
]00. /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
	Hashtable==# ,
dataHashtable==- :
,==; <
HttpRequest=== H
req==I L
,==L M
HttpResponse==N Z
resp==[ _
)==_ `
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 
dataHashtable?? ,
[??, -
$num??- .
]??. /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ·,
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_73a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_73a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	 
HttpCookieCollection$$  
cookieSources$$! .
=$$/ 0
req$$1 4
.$$4 5
Cookies$$5 <
;$$< =
if%% 
(%% 
cookieSources%% 
!=%%  
null%%! %
)%%% &
{&& 
data(( 
=(( 
cookieSources(( $
[(($ %
$num((% &
]((& '
.((' (
Value((( -
;((- .
})) 
}** 	

LinkedList++ 
<++ 
string++ 
>++ 
dataLinkedList++ )
=++* +
new++, /

LinkedList++0 :
<++: ;
string++; A
>++A B
(++B C
)++C D
;++D E
dataLinkedList,, 
.,, 
AddLast,, 
(,, 
data,, #
),,# $
;,,$ %
dataLinkedList-- 
.-- 
AddLast-- 
(-- 
data-- #
)--# $
;--$ %
dataLinkedList.. 
... 
AddLast.. 
(.. 
data.. #
)..# $
;..$ %O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_73b// K
.//K L
BadSink//L S
(//S T
dataLinkedList//T b
,//c d
req//e h
,//h i
resp//j n
)//o p
;//p q
}00 
public33 

override33 
void33 
Good33 
(33 
HttpRequest33 )
req33* -
,33- .
HttpResponse33/ ;
resp33< @
)33@ A
{44 
GoodG2B55 
(55 
req55 
,55 
resp55 
)55 
;55 
GoodB2G66 
(66 
req66 
,66 
resp66 
)66 
;66 
}77 
private:: 
static:: 
void:: 
GoodG2B:: 
(::  
HttpRequest::  +
req::, /
,::/ 0
HttpResponse::1 =
resp::> B
)::B C
{;; 
string<< 
data<< 
;<< 
data>> 
=>> 
$str>> 
;>> 

LinkedList?? 
<?? 
string?? 
>?? 
dataLinkedList?? )
=??* +
new??, /

LinkedList??0 :
<??: ;
string??; A
>??A B
(??B C
)??C D
;??D E
dataLinkedList@@ 
.@@ 
AddLast@@ 
(@@ 
data@@ #
)@@# $
;@@$ %
dataLinkedListAA 
.AA 
AddLastAA 
(AA 
dataAA #
)AA# $
;AA$ %
dataLinkedListBB 
.BB 
AddLastBB 
(BB 
dataBB #
)BB# $
;BB$ %O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_73bCC K
.CCK L
GoodG2BSinkCCL W
(CCW X
dataLinkedListCCX f
,CCg h
reqCCi l
,CCl m
respCCn r
)CCs t
;CCt u
}DD 
privateGG 
staticGG 
voidGG 
GoodB2GGG 
(GG  
HttpRequestGG  +
reqGG, /
,GG/ 0
HttpResponseGG1 =
respGG> B
)GGB C
{HH 
stringII 
dataII 
;II 
dataJJ 
=JJ 
$strJJ 
;JJ 
{LL 	 
HttpCookieCollectionMM  
cookieSourcesMM! .
=MM/ 0
reqMM1 4
.MM4 5
CookiesMM5 <
;MM< =
ifNN 
(NN 
cookieSourcesNN 
!=NN  
nullNN! %
)NN% &
{OO 
dataQQ 
=QQ 
cookieSourcesQQ $
[QQ$ %
$numQQ% &
]QQ& '
.QQ' (
ValueQQ( -
;QQ- .
}RR 
}SS 	

LinkedListTT 
<TT 
stringTT 
>TT 
dataLinkedListTT )
=TT* +
newTT, /

LinkedListTT0 :
<TT: ;
stringTT; A
>TTA B
(TTB C
)TTC D
;TTD E
dataLinkedListUU 
.UU 
AddLastUU 
(UU 
dataUU #
)UU# $
;UU$ %
dataLinkedListVV 
.VV 
AddLastVV 
(VV 
dataVV #
)VV# $
;VV$ %
dataLinkedListWW 
.WW 
AddLastWW 
(WW 
dataWW #
)WW# $
;WW$ %O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_73bXX K
.XXK L
GoodB2GSinkXXL W
(XXW X
dataLinkedListXXX f
,XXg h
reqXXi l
,XXl m
respXXn r
)XXs t
;XXt u
}YY 
}[[ 
}\\  
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_73b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_73b I
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
string* 0
>0 1
dataLinkedList2 @
,A B
HttpRequestC N
reqO R
,R S
HttpResponseT `
respa e
)e f
{ 
string 
data 
= 
dataLinkedList $
.$ %
Last% )
.) *
Value* /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #

LinkedList..# -
<..- .
string... 4
>..4 5
dataLinkedList..6 D
,..E F
HttpRequest..G R
req..S V
,..V W
HttpResponse..X d
resp..e i
)..i j
{// 
string00 
data00 
=00 
dataLinkedList00 $
.00$ %
Last00% )
.00) *
Value00* /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

LinkedList==# -
<==- .
string==. 4
>==4 5
dataLinkedList==6 D
,==E F
HttpRequest==G R
req==S V
,==V W
HttpResponse==X d
resp==e i
)==i j
{>> 
string?? 
data?? 
=?? 
dataLinkedList?? $
.??$ %
Last??% )
.??) *
Value??* /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ü/
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_74a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_74a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	 
HttpCookieCollection$$  
cookieSources$$! .
=$$/ 0
req$$1 4
.$$4 5
Cookies$$5 <
;$$< =
if%% 
(%% 
cookieSources%% 
!=%%  
null%%! %
)%%% &
{&& 
data(( 
=(( 
cookieSources(( $
[(($ %
$num((% &
]((& '
.((' (
Value((( -
;((- .
})) 
}** 	

Dictionary++ 
<++ 
int++ 
,++ 
string++ 
>++ 
dataDictionary++ -
=++. /
new++0 3

Dictionary++4 >
<++> ?
int++? B
,++B C
string++C I
>++I J
(++J K
)++K L
;++L M
dataDictionary,, 
.,, 
Add,, 
(,, 
$num,, 
,,, 
data,, "
),," #
;,,# $
dataDictionary-- 
.-- 
Add-- 
(-- 
$num-- 
,-- 
data-- "
)--" #
;--# $
dataDictionary.. 
... 
Add.. 
(.. 
$num.. 
,.. 
data.. "
).." #
;..# $O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_74b// K
.//K L
BadSink//L S
(//S T
dataDictionary//T b
,//c d
req//e h
,//h i
resp//j n
)//o p
;//p q
}00 
public33 

override33 
void33 
Good33 
(33 
HttpRequest33 )
req33* -
,33- .
HttpResponse33/ ;
resp33< @
)33@ A
{44 
GoodG2B55 
(55 
req55 
,55 
resp55 
)55 
;55 
GoodB2G66 
(66 
req66 
,66 
resp66 
)66 
;66 
}77 
private:: 
static:: 
void:: 
GoodG2B:: 
(::  
HttpRequest::  +
req::, /
,::/ 0
HttpResponse::1 =
resp::> B
)::B C
{;; 
string<< 
data<< 
;<< 
data>> 
=>> 
$str>> 
;>> 

Dictionary?? 
<?? 
int?? 
,?? 
string?? 
>?? 
dataDictionary?? -
=??. /
new??0 3

Dictionary??4 >
<??> ?
int??? B
,??B C
string??C I
>??I J
(??J K
)??K L
;??L M
dataDictionary@@ 
.@@ 
Add@@ 
(@@ 
$num@@ 
,@@ 
data@@ "
)@@" #
;@@# $
dataDictionaryAA 
.AA 
AddAA 
(AA 
$numAA 
,AA 
dataAA "
)AA" #
;AA# $
dataDictionaryBB 
.BB 
AddBB 
(BB 
$numBB 
,BB 
dataBB "
)BB" #
;BB# $O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_74bCC K
.CCK L
GoodG2BSinkCCL W
(CCW X
dataDictionaryCCX f
,CCg h
reqCCi l
,CCl m
respCCn r
)CCs t
;CCt u
}DD 
privateGG 
staticGG 
voidGG 
GoodB2GGG 
(GG  
HttpRequestGG  +
reqGG, /
,GG/ 0
HttpResponseGG1 =
respGG> B
)GGB C
{HH 
stringII 
dataII 
;II 
dataJJ 
=JJ 
$strJJ 
;JJ 
{LL 	 
HttpCookieCollectionMM  
cookieSourcesMM! .
=MM/ 0
reqMM1 4
.MM4 5
CookiesMM5 <
;MM< =
ifNN 
(NN 
cookieSourcesNN 
!=NN  
nullNN! %
)NN% &
{OO 
dataQQ 
=QQ 
cookieSourcesQQ $
[QQ$ %
$numQQ% &
]QQ& '
.QQ' (
ValueQQ( -
;QQ- .
}RR 
}SS 	

DictionaryTT 
<TT 
intTT 
,TT 
stringTT 
>TT 
dataDictionaryTT -
=TT. /
newTT0 3

DictionaryTT4 >
<TT> ?
intTT? B
,TTB C
stringTTC I
>TTI J
(TTJ K
)TTK L
;TTL M
dataDictionaryUU 
.UU 
AddUU 
(UU 
$numUU 
,UU 
dataUU "
)UU" #
;UU# $
dataDictionaryVV 
.VV 
AddVV 
(VV 
$numVV 
,VV 
dataVV "
)VV" #
;VV# $
dataDictionaryWW 
.WW 
AddWW 
(WW 
$numWW 
,WW 
dataWW "
)WW" #
;WW# $O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_74bXX K
.XXK L
GoodB2GSinkXXL W
(XXW X
dataDictionaryXXX f
,XXg h
reqXXi l
,XXl m
respXXn r
)XXs t
;XXt u
}YY 
}[[ 
}\\ ° 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_74b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_74b I
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
string. 4
>4 5
dataDictionary6 D
,E F
HttpRequestG R
reqS V
,V W
HttpResponseX d
respe i
)i j
{ 
string 
data 
= 
dataDictionary $
[$ %
$num% &
]& '
;' (
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. #
(..# $

Dictionary..$ .
<... /
int../ 2
,..2 3
string..3 9
>..9 :
dataDictionary..; I
,..J K
HttpRequest..L W
req..X [
,..[ \
HttpResponse..] i
resp..j n
)..n o
{// 
string00 
data00 
=00 
dataDictionary00 $
[00$ %
$num00% &
]00& '
;00' (
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

Dictionary==# -
<==- .
int==. 1
,==1 2
string==2 8
>==8 9
dataDictionary==: H
,==I J
HttpRequest==K V
req==W Z
,==Z [
HttpResponse==\ h
resp==i m
)==m n
{>> 
string?? 
data?? 
=?? 
dataDictionary?? $
[??$ %
$num??% &
]??& '
;??' (
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ð>
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_75a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_75a I
:J K
AbstractTestCaseWebL _
{ 
public   

override   
void   
Bad   
(   
HttpRequest   (
req  ) ,
,  , -
HttpResponse  . :
resp  ; ?
)  ? @
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	 
HttpCookieCollection&&  
cookieSources&&! .
=&&/ 0
req&&1 4
.&&4 5
Cookies&&5 <
;&&< =
if'' 
('' 
cookieSources'' 
!=''  
null''! %
)''% &
{(( 
data** 
=** 
cookieSources** $
[**$ %
$num**% &
]**& '
.**' (
Value**( -
;**- .
}++ 
},, 	
byte.. 
[.. 
].. 
dataSerialized.. 
=.. 
null..  $
;..$ %
try// 
{00 	
BinaryFormatter11 
bf11 
=11  
new11! $
BinaryFormatter11% 4
(114 5
)115 6
;116 7
using22 
(22 
var22 
ms22 
=22 
new22 
MemoryStream22  ,
(22, -
)22- .
)22. /
{33 
bf44 
.44 
	Serialize44 
(44 
ms44 
,44  
data44! %
)44% &
;44& '
dataSerialized55 
=55  
ms55! #
.55# $
ToArray55$ +
(55+ ,
)55, -
;55- .
}66 O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_75b77 O
.77O P
BadSink77P W
(77W X
dataSerialized77X f
,77g h
req77i l
,77l m
resp77n r
)77s t
;77t u
}88 	
catch99 
(99 "
SerializationException99 %
exceptSerialize99& 5
)995 6
{:: 	
IO;; 
.;; 
Logger;; 
.;; 
Log;; 
(;; 
NLog;; 
.;; 
LogLevel;; '
.;;' (
Warn;;( ,
,;;, -
$str;;. X
,;;X Y
exceptSerialize;;Z i
);;i j
;;;j k
}<< 	
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
HttpRequest@@ )
req@@* -
,@@- .
HttpResponse@@/ ;
resp@@< @
)@@@ A
{AA 
GoodG2BBB 
(BB 
reqBB 
,BB 
respBB 
)BB 
;BB 
GoodB2GCC 
(CC 
reqCC 
,CC 
respCC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
HttpRequestGG  +
reqGG, /
,GG/ 0
HttpResponseGG1 =
respGG> B
)GGB C
{HH 
stringII 
dataII 
;II 
dataJJ 
=JJ 
$strJJ 
;JJ 
{LL 	 
HttpCookieCollectionMM  
cookieSourcesMM! .
=MM/ 0
reqMM1 4
.MM4 5
CookiesMM5 <
;MM< =
ifNN 
(NN 
cookieSourcesNN 
!=NN  
nullNN! %
)NN% &
{OO 
dataQQ 
=QQ 
cookieSourcesQQ $
[QQ$ %
$numQQ% &
]QQ& '
.QQ' (
ValueQQ( -
;QQ- .
}RR 
}SS 	
byteUU 
[UU 
]UU 
dataSerializedUU 
=UU 
nullUU  $
;UU$ %
tryVV 
{WW 	
BinaryFormatterXX 
bfXX 
=XX  
newXX! $
BinaryFormatterXX% 4
(XX4 5
)XX5 6
;XX6 7
usingYY 
(YY 
varYY 
msYY 
=YY 
newYY 
MemoryStreamYY  ,
(YY, -
)YY- .
)YY. /
{ZZ 
bf[[ 
.[[ 
	Serialize[[ 
([[ 
ms[[ 
,[[  
data[[! %
)[[% &
;[[& '
dataSerialized\\ 
=\\  
ms\\! #
.\\# $
ToArray\\$ +
(\\+ ,
)\\, -
;\\- .
}]] O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_75b^^ O
.^^O P
GoodG2BSink^^P [
(^^[ \
dataSerialized^^\ j
,^^k l
req^^m p
,^^p q
resp^^r v
)^^w x
;^^x y
}__ 	
catch`` 
(`` "
SerializationException`` %
exceptSerialize``& 5
)``5 6
{aa 	
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb 
.bb 
LogLevelbb '
.bb' (
Warnbb( ,
,bb, -
$strbb. X
,bbX Y
exceptSerializebbZ i
)bbi j
;bbj k
}cc 	
}dd 
privategg 
staticgg 
voidgg 
GoodB2Ggg 
(gg  
HttpRequestgg  +
reqgg, /
,gg/ 0
HttpResponsegg1 =
respgg> B
)ggB C
{hh 
stringii 
dataii 
;ii 
datajj 
=jj 
$strjj 
;jj 
{ll 	 
HttpCookieCollectionmm  
cookieSourcesmm! .
=mm/ 0
reqmm1 4
.mm4 5
Cookiesmm5 <
;mm< =
ifnn 
(nn 
cookieSourcesnn 
!=nn  
nullnn! %
)nn% &
{oo 
dataqq 
=qq 
cookieSourcesqq $
[qq$ %
$numqq% &
]qq& '
.qq' (
Valueqq( -
;qq- .
}rr 
}ss 	
byteuu 
[uu 
]uu 
dataSerializeduu 
=uu 
nulluu  $
;uu$ %
tryvv 
{ww 	
BinaryFormatterxx 
bfxx 
=xx  
newxx! $
BinaryFormatterxx% 4
(xx4 5
)xx5 6
;xx6 7
usingyy 
(yy 
varyy 
msyy 
=yy 
newyy 
MemoryStreamyy  ,
(yy, -
)yy- .
)yy. /
{zz 
bf{{ 
.{{ 
	Serialize{{ 
({{ 
ms{{ 
,{{  
data{{! %
){{% &
;{{& '
dataSerialized|| 
=||  
ms||! #
.||# $
ToArray||$ +
(||+ ,
)||, -
;||- .
}}} O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_75b~~ O
.~~O P
GoodB2GSink~~P [
(~~[ \
dataSerialized~~\ j
,~~k l
req~~m p
,~~p q
resp~~r v
)~~w x
;~~x y
} 	
catch
 
(
 $
SerializationException
 %
exceptSerialize
& 5
)
5 6
{
 	
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 
.
 
LogLevel
 '
.
' (
Warn
( ,
,
, -
$str
. X
,
X Y
exceptSerialize
Z i
)
i j
;
j k
}
 	
}
 
} 
} Ì?
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_75b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_75b I
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
,5 6
HttpRequest7 B
reqC F
,F G
HttpResponseH T
respU Y
)Y Z
{   
try!! 
{"" 	
string## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
string)) 
))) 
binForm)) &
.))& '
Deserialize))' 2
())2 3
	memStream))3 <
)))< =
;))= >
}** 
try++ 
{,, 
int-- 
value-- 
=-- 
int-- 
.--  
Parse--  %
(--% &
data--& *
)--* +
;--+ ,
}.. 
catch// 
(// 
FormatException// "
exceptNumberFormat//# 5
)//5 6
{00 
IO22 
.22 
Logger22 
.22 
Log22 
(22 
NLog22 "
.22" #
LogLevel22# +
.22+ ,
Warn22, 0
,220 1
exceptNumberFormat222 D
,22D E
$str22F `
+22a b
data22c g
)22g h
;22h i
}33 
}44 	
catch55 
(55 "
SerializationException55 %
exceptSerialize55& 5
)555 6
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. Y
,77Y Z
exceptSerialize77[ j
)77j k
;77k l
}88 	
}99 
public>> 

static>> 
void>> 
GoodG2BSink>> "
(>>" #
byte>># '
[>>' (
]>>( )
dataSerialized>>* 8
,>>9 :
HttpRequest>>; F
req>>G J
,>>J K
HttpResponse>>L X
resp>>Y ]
)>>] ^
{?? 
try@@ 
{AA 	
stringBB 
dataBB 
;BB 
varCC 
binFormCC 
=CC 
newCC 
BinaryFormatterCC -
(CC- .
)CC. /
;CC/ 0
usingDD 
(DD 
varDD 
	memStreamDD  
=DD! "
newDD# &
MemoryStreamDD' 3
(DD3 4
)DD4 5
)DD5 6
{EE 
	memStreamFF 
.FF 
WriteFF 
(FF  
dataSerializedFF  .
,FF. /
$numFF0 1
,FF1 2
dataSerializedFF3 A
.FFA B
LengthFFB H
)FFH I
;FFI J
	memStreamGG 
.GG 
SeekGG 
(GG 
$numGG  
,GG  !

SeekOriginGG" ,
.GG, -
BeginGG- 2
)GG2 3
;GG3 4
dataHH 
=HH 
(HH 
stringHH 
)HH 
binFormHH &
.HH& '
DeserializeHH' 2
(HH2 3
	memStreamHH3 <
)HH< =
;HH= >
}II 
tryJJ 
{KK 
intLL 
valueLL 
=LL 
intLL 
.LL  
ParseLL  %
(LL% &
dataLL& *
)LL* +
;LL+ ,
}MM 
catchNN 
(NN 
FormatExceptionNN "
exceptNumberFormatNN# 5
)NN5 6
{OO 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptNumberFormatQQ2 D
,QQD E
$strQQF `
+QQa b
dataQQc g
)QQg h
;QQh i
}RR 
}SS 	
catchTT 
(TT "
SerializationExceptionTT %
exceptSerializeTT& 5
)TT5 6
{UU 	
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV 
.VV 
LogLevelVV '
.VV' (
WarnVV( ,
,VV, -
$strVV. Y
,VVY Z
exceptSerializeVV[ j
)VVj k
;VVk l
}WW 	
}XX 
public[[ 

static[[ 
void[[ 
GoodB2GSink[[ "
([[" #
byte[[# '
[[[' (
][[( )
dataSerialized[[* 8
,[[9 :
HttpRequest[[; F
req[[G J
,[[J K
HttpResponse[[L X
resp[[Y ]
)[[] ^
{\\ 
try]] 
{^^ 	
string__ 
data__ 
;__ 
var`` 
binForm`` 
=`` 
new`` 
BinaryFormatter`` -
(``- .
)``. /
;``/ 0
usingaa 
(aa 
varaa 
	memStreamaa  
=aa! "
newaa# &
MemoryStreamaa' 3
(aa3 4
)aa4 5
)aa5 6
{bb 
	memStreamcc 
.cc 
Writecc 
(cc  
dataSerializedcc  .
,cc. /
$numcc0 1
,cc1 2
dataSerializedcc3 A
.ccA B
LengthccB H
)ccH I
;ccI J
	memStreamdd 
.dd 
Seekdd 
(dd 
$numdd  
,dd  !

SeekOrigindd" ,
.dd, -
Begindd- 2
)dd2 3
;dd3 4
dataee 
=ee 
(ee 
stringee 
)ee 
binFormee &
.ee& '
Deserializeee' 2
(ee2 3
	memStreamee3 <
)ee< =
;ee= >
}ff 
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF j
+nnk l
exceptNumberFormatnnm 
)	nn 
;
nn 
}oo 
}pp 	
catchqq 
(qq "
SerializationExceptionqq %
exceptSerializeqq& 5
)qq5 6
{rr 	
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss 
.ss 
LogLevelss '
.ss' (
Warnss( ,
,ss, -
$strss. Y
,ssY Z
exceptSerializess[ j
)ssj k
;ssk l
}tt 	
}uu 
}ww 
}xx "
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	 
HttpCookieCollection##  
cookieSources##! .
=##/ 0
req##1 4
.##4 5
Cookies##5 <
;##< =
if$$ 
($$ 
cookieSources$$ 
!=$$  
null$$! %
)$$% &
{%% 
data'' 
='' 
cookieSources'' $
[''$ %
$num''% &
]''& '
.''' (
Value''( -
;''- .
}(( 
})) 	S
GCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_base** O

baseObject**P Z
=**[ \
new**] `S
FCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_bad	**a §
(
**§ ¨
)
**¨ ©
;
**© ª

baseObject++ 
.++ 
Action++ 
(++ 
data++ 
,++  
req++! $
,++$ %
resp++& *
)++* +
;+++ ,
},, 
public// 

override// 
void// 
Good// 
(// 
HttpRequest// )
req//* -
,//- .
HttpResponse/// ;
resp//< @
)//@ A
{00 
GoodG2B11 
(11 
req11 
,11 
resp11 
)11 
;11 
GoodB2G22 
(22 
req22 
,22 
resp22 
)22 
;22 
}33 
private66 
void66 
GoodG2B66 
(66 
HttpRequest66 $
req66% (
,66( )
HttpResponse66* 6
resp667 ;
)66; <
{77 
string88 
data88 
;88 
data:: 
=:: 
$str:: 
;:: S
GCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_base;; O

baseObject;;P Z
=;;[ \
new;;] `W
JCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_goodG2B	;;a «
(
;;« ¬
)
;;¬ ­
;
;;­ ®

baseObject<< 
.<< 
Action<< 
(<< 
data<< 
,<<  
req<<! $
,<<$ %
resp<<& *
)<<* +
;<<+ ,
}== 
private@@ 
void@@ 
GoodB2G@@ 
(@@ 
HttpRequest@@ $
req@@% (
,@@( )
HttpResponse@@* 6
resp@@7 ;
)@@; <
{AA 
stringBB 
dataBB 
;BB 
dataCC 
=CC 
$strCC 
;CC 
{EE 	 
HttpCookieCollectionFF  
cookieSourcesFF! .
=FF/ 0
reqFF1 4
.FF4 5
CookiesFF5 <
;FF< =
ifGG 
(GG 
cookieSourcesGG 
!=GG  
nullGG! %
)GG% &
{HH 
dataJJ 
=JJ 
cookieSourcesJJ $
[JJ$ %
$numJJ% &
]JJ& '
.JJ' (
ValueJJ( -
;JJ- .
}KK 
}LL 	S
GCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_baseMM O

baseObjectMMP Z
=MM[ \
newMM] `W
JCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_goodB2G	MMa «
(
MM« ¬
)
MM¬ ­
;
MM­ ®

baseObjectNN 
.NN 
ActionNN 
(NN 
dataNN 
,NN  
reqNN! $
,NN$ %
respNN& *
)NN* +
;NN+ ,
}OO 
}QQ 
}RR 
ÓC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_bad.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class R
FCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_bad L
:M NT
GCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_base	O 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
}(( 
})) 
ÔC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_base.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
abstract 
class	 S
GCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_base V
{ 
public 

abstract 
void 
Action 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
;Q R
} 
} °
×C:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_goodB2G.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class V
JCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_goodB2G P
:Q RT
GCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_base	S 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B f
+&&g h
exceptNumberFormat&&i {
)&&{ |
;&&| }
}'' 	
}(( 
})) 
}** ¢
×C:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_goodG2B.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class V
JCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_goodG2B P
:Q RT
GCWE117_Improper_Output_Neutralization_for_Logs__Get_Cookies_Web_81_base	S 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
})) 
}** ¦B
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_01.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_01 C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
TcpListener&& 
listener&&  
=&&! "
null&&# '
;&&' (
try'' 
{(( 
listener)) 
=)) 
new)) 
TcpListener)) *
())* +
	IPAddress))+ 4
.))4 5
Parse))5 :
()): ;
$str)); G
)))G H
,))H I
$num))J O
)))O P
;))P Q
listener** 
.** 
Start** 
(** 
)**  
;**  !
using++ 
(++ 
	TcpClient++  
tcpConn++! (
=++) *
listener+++ 3
.++3 4
AcceptTcpClient++4 C
(++C D
)++D E
)++E F
{,, 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
tcpConn..> E
...E F
	GetStream..F O
(..O P
)..P Q
)..Q R
)..R S
{// 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
finally99 
{:: 
if;; 
(;; 
listener;; 
!=;; 
null;;  $
);;$ %
{<< 
try== 
{>> 
listener??  
.??  !
Stop??! %
(??% &
)??& '
;??' (
}@@ 
catchAA 
(AA 
SocketExceptionAA )
seAA* ,
)AA, -
{BB 
IOCC 
.CC 
LoggerCC !
.CC! "
LogCC" %
(CC% &
NLogCC& *
.CC* +
LogLevelCC+ 3
.CC3 4
WarnCC4 8
,CC8 9
seCC: <
,CC< =
$strCC> Y
)CCY Z
;CCZ [
}DD 
}EE 
}FF 
}GG 	
tryHH 
{II 	
intJJ 
valueJJ 
=JJ 
intJJ 
.JJ 
ParseJJ !
(JJ! "
dataJJ" &
)JJ& '
;JJ' (
}KK 	
catchLL 
(LL 
FormatExceptionLL 
exceptNumberFormatLL 1
)LL1 2
{MM 	
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO 
.OO 
LogLevelOO '
.OO' (
WarnOO( ,
,OO, -
exceptNumberFormatOO. @
,OO@ A
$strOOB \
+OO] ^
dataOO_ c
)OOc d
;OOd e
}PP 	
}QQ 
publicTT 

overrideTT 
voidTT 
GoodTT 
(TT 
)TT 
{UU 
GoodG2BVV 
(VV 
)VV 
;VV 
GoodB2GWW 
(WW 
)WW 
;WW 
}XX 
private[[ 
void[[ 
GoodG2B[[ 
([[ 
)[[ 
{\\ 
string]] 
data]] 
;]] 
data__ 
=__ 
$str__ 
;__ 
try`` 
{aa 	
intbb 
valuebb 
=bb 
intbb 
.bb 
Parsebb !
(bb! "
databb" &
)bb& '
;bb' (
}cc 	
catchdd 
(dd 
FormatExceptiondd 
exceptNumberFormatdd 1
)dd1 2
{ee 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
exceptNumberFormatgg. @
,gg@ A
$strggB \
+gg] ^
datagg_ c
)ggc d
;ggd e
}hh 	
}ii 
privatell 
voidll 
GoodB2Gll 
(ll 
)ll 
{mm 
stringnn 
datann 
;nn 
dataoo 
=oo 
$stroo 
;oo 
{qq 	
TcpListenerrr 
listenerrr  
=rr! "
nullrr# '
;rr' (
tryss 
{tt 
listeneruu 
=uu 
newuu 
TcpListeneruu *
(uu* +
	IPAddressuu+ 4
.uu4 5
Parseuu5 :
(uu: ;
$struu; G
)uuG H
,uuH I
$numuuJ O
)uuO P
;uuP Q
listenervv 
.vv 
Startvv 
(vv 
)vv  
;vv  !
usingww 
(ww 
	TcpClientww  
tcpConnww! (
=ww) *
listenerww+ 3
.ww3 4
AcceptTcpClientww4 C
(wwC D
)wwD E
)wwE F
{xx 
usingzz 
(zz 
StreamReaderzz '
srzz( *
=zz+ ,
newzz- 0
StreamReaderzz1 =
(zz= >
tcpConnzz> E
.zzE F
	GetStreamzzF O
(zzO P
)zzP Q
)zzQ R
)zzR S
{{{ 
data}} 
=}} 
sr}} !
.}}! "
ReadLine}}" *
(}}* +
)}}+ ,
;}}, -
}~~ 
} 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
finally
 
{
 
if
 
(
 
listener
 
!=
 
null
  $
)
$ %
{
 
try
 
{
 
listener
  
.
  !
Stop
! %
(
% &
)
& '
;
' (
}
 
catch
 
(
 
SocketException
 )
se
* ,
)
, -
{
 
IO
 
.
 
Logger
 !
.
! "
Log
" %
(
% &
NLog
& *
.
* +
LogLevel
+ 3
.
3 4
Warn
4 8
,
8 9
se
: <
,
< =
$str
> Y
)
Y Z
;
Z [
}
 
}
 
}
 
}
 	
try
 
{
 	
int
 
value
 
=
 
int
 
.
 
Parse
 !
(
! "
data
" &
)
& '
;
' (
}
 	
catch
 
(
 
FormatException
  
exceptNumberFormat
 1
)
1 2
{
 	
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 
.
 
LogLevel
 '
.
' (
Warn
( ,
,
, - 
exceptNumberFormat
. @
,
@ A
$str
B f
+
g h 
exceptNumberFormat
i {
)
{ |
;
| }
}
 	
}
 
} 
}   Ûw
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_02.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_02 C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
if## 

(## 
true## 
)## 
{$$ 	
data%% 
=%% 
$str%% 
;%% 
{'' 
TcpListener(( 
listener(( $
=((% &
null((' +
;((+ ,
try)) 
{** 
listener++ 
=++ 
new++ "
TcpListener++# .
(++. /
	IPAddress++/ 8
.++8 9
Parse++9 >
(++> ?
$str++? K
)++K L
,++L M
$num++N S
)++S T
;++T U
listener,, 
.,, 
Start,, "
(,," #
),,# $
;,,$ %
using-- 
(-- 
	TcpClient-- $
tcpConn--% ,
=--- .
listener--/ 7
.--7 8
AcceptTcpClient--8 G
(--G H
)--H I
)--I J
{.. 
using00 
(00 
StreamReader00 +
sr00, .
=00/ 0
new001 4
StreamReader005 A
(00A B
tcpConn00B I
.00I J
	GetStream00J S
(00S T
)00T U
)00U V
)00V W
{11 
data33  
=33! "
sr33# %
.33% &
ReadLine33& .
(33. /
)33/ 0
;330 1
}44 
}55 
}66 
catch77 
(77 
IOException77 "
exceptIO77# +
)77+ ,
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptIO996 >
,99> ?
$str99@ [
)99[ \
;99\ ]
}:: 
finally;; 
{<< 
if== 
(== 
listener==  
!===! #
null==$ (
)==( )
{>> 
try?? 
{@@ 
listenerAA $
.AA$ %
StopAA% )
(AA) *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
SocketExceptionCC -
seCC. 0
)CC0 1
{DD 
IOEE 
.EE 
LoggerEE %
.EE% &
LogEE& )
(EE) *
NLogEE* .
.EE. /
LogLevelEE/ 7
.EE7 8
WarnEE8 <
,EE< =
seEE> @
,EE@ A
$strEEB ]
)EE] ^
;EE^ _
}FF 
}GG 
}HH 
}II 
}JJ 	
elseKK 
{LL 	
dataOO 
=OO 
nullOO 
;OO 
}PP 	
ifQQ 

(QQ 
trueQQ 
)QQ 
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
privateaa 
voidaa 
GoodG2B1aa 
(aa 
)aa 
{bb 
stringcc 
datacc 
;cc 
ifdd 

(dd 
falsedd 
)dd 
{ee 	
datahh 
=hh 
nullhh 
;hh 
}ii 	
elsejj 
{kk 	
datamm 
=mm 
$strmm 
;mm 
}nn 	
ifoo 

(oo 
trueoo 
)oo 
{pp 	
tryqq 
{rr 
intss 
valuess 
=ss 
intss 
.ss  
Parsess  %
(ss% &
datass& *
)ss* +
;ss+ ,
}tt 
catchuu 
(uu 
FormatExceptionuu "
exceptNumberFormatuu# 5
)uu5 6
{vv 
IOxx 
.xx 
Loggerxx 
.xx 
Logxx 
(xx 
NLogxx "
.xx" #
LogLevelxx# +
.xx+ ,
Warnxx, 0
,xx0 1
exceptNumberFormatxx2 D
,xxD E
$strxxF `
+xxa b
dataxxc g
)xxg h
;xxh i
}yy 
}zz 	
}{{ 
private~~ 
void~~ 
GoodG2B2~~ 
(~~ 
)~~ 
{ 
string
 
data
 
;
 
if
 

(
 
true
 
)
 
{
 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
true
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
true
 
)
 
{
 	
data
   
=
   
$str
   
;
   
{
¢¢ 
TcpListener
££ 
listener
££ $
=
££% &
null
££' +
;
££+ ,
try
¤¤ 
{
¥¥ 
listener
¦¦ 
=
¦¦ 
new
¦¦ "
TcpListener
¦¦# .
(
¦¦. /
	IPAddress
¦¦/ 8
.
¦¦8 9
Parse
¦¦9 >
(
¦¦> ?
$str
¦¦? K
)
¦¦K L
,
¦¦L M
$num
¦¦N S
)
¦¦S T
;
¦¦T U
listener
§§ 
.
§§ 
Start
§§ "
(
§§" #
)
§§# $
;
§§$ %
using
¨¨ 
(
¨¨ 
	TcpClient
¨¨ $
tcpConn
¨¨% ,
=
¨¨- .
listener
¨¨/ 7
.
¨¨7 8
AcceptTcpClient
¨¨8 G
(
¨¨G H
)
¨¨H I
)
¨¨I J
{
©© 
using
«« 
(
«« 
StreamReader
«« +
sr
««, .
=
««/ 0
new
««1 4
StreamReader
««5 A
(
««A B
tcpConn
««B I
.
««I J
	GetStream
««J S
(
««S T
)
««T U
)
««U V
)
««V W
{
¬¬ 
data
®®  
=
®®! "
sr
®®# %
.
®®% &
ReadLine
®®& .
(
®®. /
)
®®/ 0
;
®®0 1
}
¯¯ 
}
°° 
}
±± 
catch
²² 
(
²² 
IOException
²² "
exceptIO
²²# +
)
²²+ ,
{
³³ 
IO
´´ 
.
´´ 
Logger
´´ 
.
´´ 
Log
´´ !
(
´´! "
NLog
´´" &
.
´´& '
LogLevel
´´' /
.
´´/ 0
Warn
´´0 4
,
´´4 5
exceptIO
´´6 >
,
´´> ?
$str
´´@ [
)
´´[ \
;
´´\ ]
}
µµ 
finally
¶¶ 
{
·· 
if
¸¸ 
(
¸¸ 
listener
¸¸  
!=
¸¸! #
null
¸¸$ (
)
¸¸( )
{
¹¹ 
try
ºº 
{
»» 
listener
¼¼ $
.
¼¼$ %
Stop
¼¼% )
(
¼¼) *
)
¼¼* +
;
¼¼+ ,
}
½½ 
catch
¾¾ 
(
¾¾ 
SocketException
¾¾ -
se
¾¾. 0
)
¾¾0 1
{
¿¿ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ %
.
ÀÀ% &
Log
ÀÀ& )
(
ÀÀ) *
NLog
ÀÀ* .
.
ÀÀ. /
LogLevel
ÀÀ/ 7
.
ÀÀ7 8
Warn
ÀÀ8 <
,
ÀÀ< =
se
ÀÀ> @
,
ÀÀ@ A
$str
ÀÀB ]
)
ÀÀ] ^
;
ÀÀ^ _
}
ÁÁ 
}
ÂÂ 
}
ÃÃ 
}
ÄÄ 
}
ÅÅ 	
else
ÆÆ 
{
ÇÇ 	
data
ÊÊ 
=
ÊÊ 
null
ÊÊ 
;
ÊÊ 
}
ËË 	
if
ÌÌ 

(
ÌÌ 
false
ÌÌ 
)
ÌÌ 
{
ÍÍ 	
IO
ÏÏ 
.
ÏÏ 
	WriteLine
ÏÏ 
(
ÏÏ 
$str
ÏÏ /
)
ÏÏ/ 0
;
ÏÏ0 1
}
ÐÐ 	
else
ÑÑ 
{
ÒÒ 	
try
ÓÓ 
{
ÔÔ 
int
ÕÕ 
value
ÕÕ 
=
ÕÕ 
int
ÕÕ 
.
ÕÕ  
Parse
ÕÕ  %
(
ÕÕ% &
data
ÕÕ& *
)
ÕÕ* +
;
ÕÕ+ ,
}
ÖÖ 
catch
×× 
(
×× 
FormatException
×× " 
exceptNumberFormat
××# 5
)
××5 6
{
ØØ 
IO
ÚÚ 
.
ÚÚ 
Logger
ÚÚ 
.
ÚÚ 
Log
ÚÚ 
(
ÚÚ 
NLog
ÚÚ "
.
ÚÚ" #
LogLevel
ÚÚ# +
.
ÚÚ+ ,
Warn
ÚÚ, 0
,
ÚÚ0 1 
exceptNumberFormat
ÚÚ2 D
,
ÚÚD E
$str
ÚÚF j
+
ÚÚk l 
exceptNumberFormat
ÚÚm 
)ÚÚ 
;ÚÚ 
}
ÛÛ 
}
ÜÜ 	
}
ÝÝ 
private
àà 
void
àà 
GoodB2G2
àà 
(
àà 
)
àà 
{
áá 
string
ââ 
data
ââ 
;
ââ 
if
ãã 

(
ãã 
true
ãã 
)
ãã 
{
ää 	
data
åå 
=
åå 
$str
åå 
;
åå 
{
çç 
TcpListener
èè 
listener
èè $
=
èè% &
null
èè' +
;
èè+ ,
try
éé 
{
êê 
listener
ëë 
=
ëë 
new
ëë "
TcpListener
ëë# .
(
ëë. /
	IPAddress
ëë/ 8
.
ëë8 9
Parse
ëë9 >
(
ëë> ?
$str
ëë? K
)
ëëK L
,
ëëL M
$num
ëëN S
)
ëëS T
;
ëëT U
listener
ìì 
.
ìì 
Start
ìì "
(
ìì" #
)
ìì# $
;
ìì$ %
using
íí 
(
íí 
	TcpClient
íí $
tcpConn
íí% ,
=
íí- .
listener
íí/ 7
.
íí7 8
AcceptTcpClient
íí8 G
(
ííG H
)
ííH I
)
ííI J
{
îî 
using
ðð 
(
ðð 
StreamReader
ðð +
sr
ðð, .
=
ðð/ 0
new
ðð1 4
StreamReader
ðð5 A
(
ððA B
tcpConn
ððB I
.
ððI J
	GetStream
ððJ S
(
ððS T
)
ððT U
)
ððU V
)
ððV W
{
ññ 
data
óó  
=
óó! "
sr
óó# %
.
óó% &
ReadLine
óó& .
(
óó. /
)
óó/ 0
;
óó0 1
}
ôô 
}
õõ 
}
öö 
catch
÷÷ 
(
÷÷ 
IOException
÷÷ "
exceptIO
÷÷# +
)
÷÷+ ,
{
øø 
IO
ùù 
.
ùù 
Logger
ùù 
.
ùù 
Log
ùù !
(
ùù! "
NLog
ùù" &
.
ùù& '
LogLevel
ùù' /
.
ùù/ 0
Warn
ùù0 4
,
ùù4 5
exceptIO
ùù6 >
,
ùù> ?
$str
ùù@ [
)
ùù[ \
;
ùù\ ]
}
úú 
finally
ûû 
{
üü 
if
ýý 
(
ýý 
listener
ýý  
!=
ýý! #
null
ýý$ (
)
ýý( )
{
þþ 
try
ÿÿ 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
true
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
   
GoodG2B1
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
GoodG2B2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodB2G1
££ 
(
££ 
)
££ 
;
££ 
GoodB2G2
¤¤ 
(
¤¤ 
)
¤¤ 
;
¤¤ 
}
¥¥ 
}§§ 
}¨¨ Åz
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_03.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_03 C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
if## 

(## 
$num## 
==## 
$num## 
)## 
{$$ 	
data%% 
=%% 
$str%% 
;%% 
{'' 
TcpListener(( 
listener(( $
=((% &
null((' +
;((+ ,
try)) 
{** 
listener++ 
=++ 
new++ "
TcpListener++# .
(++. /
	IPAddress++/ 8
.++8 9
Parse++9 >
(++> ?
$str++? K
)++K L
,++L M
$num++N S
)++S T
;++T U
listener,, 
.,, 
Start,, "
(,," #
),,# $
;,,$ %
using-- 
(-- 
	TcpClient-- $
tcpConn--% ,
=--- .
listener--/ 7
.--7 8
AcceptTcpClient--8 G
(--G H
)--H I
)--I J
{.. 
using00 
(00 
StreamReader00 +
sr00, .
=00/ 0
new001 4
StreamReader005 A
(00A B
tcpConn00B I
.00I J
	GetStream00J S
(00S T
)00T U
)00U V
)00V W
{11 
data33  
=33! "
sr33# %
.33% &
ReadLine33& .
(33. /
)33/ 0
;330 1
}44 
}55 
}66 
catch77 
(77 
IOException77 "
exceptIO77# +
)77+ ,
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptIO996 >
,99> ?
$str99@ [
)99[ \
;99\ ]
}:: 
finally;; 
{<< 
if== 
(== 
listener==  
!===! #
null==$ (
)==( )
{>> 
try?? 
{@@ 
listenerAA $
.AA$ %
StopAA% )
(AA) *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
SocketExceptionCC -
seCC. 0
)CC0 1
{DD 
IOEE 
.EE 
LoggerEE %
.EE% &
LogEE& )
(EE) *
NLogEE* .
.EE. /
LogLevelEE/ 7
.EE7 8
WarnEE8 <
,EE< =
seEE> @
,EE@ A
$strEEB ]
)EE] ^
;EE^ _
}FF 
}GG 
}HH 
}II 
}JJ 	
elseKK 
{LL 	
dataOO 
=OO 
nullOO 
;OO 
}PP 	
ifQQ 

(QQ 
$numQQ 
==QQ 
$numQQ 
)QQ 
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
privateaa 
voidaa 
GoodG2B1aa 
(aa 
)aa 
{bb 
stringcc 
datacc 
;cc 
ifdd 

(dd 
$numdd 
!=dd 
$numdd 
)dd 
{ee 	
datahh 
=hh 
nullhh 
;hh 
}ii 	
elsejj 
{kk 	
datamm 
=mm 
$strmm 
;mm 
}nn 	
ifoo 

(oo 
$numoo 
==oo 
$numoo 
)oo 
{pp 	
tryqq 
{rr 
intss 
valuess 
=ss 
intss 
.ss  
Parsess  %
(ss% &
datass& *
)ss* +
;ss+ ,
}tt 
catchuu 
(uu 
FormatExceptionuu "
exceptNumberFormatuu# 5
)uu5 6
{vv 
IOxx 
.xx 
Loggerxx 
.xx 
Logxx 
(xx 
NLogxx "
.xx" #
LogLevelxx# +
.xx+ ,
Warnxx, 0
,xx0 1
exceptNumberFormatxx2 D
,xxD E
$strxxF `
+xxa b
dataxxc g
)xxg h
;xxh i
}yy 
}zz 	
}{{ 
private~~ 
void~~ 
GoodG2B2~~ 
(~~ 
)~~ 
{ 
string
 
data
 
;
 
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
data
   
=
   
$str
   
;
   
{
¢¢ 
TcpListener
££ 
listener
££ $
=
££% &
null
££' +
;
££+ ,
try
¤¤ 
{
¥¥ 
listener
¦¦ 
=
¦¦ 
new
¦¦ "
TcpListener
¦¦# .
(
¦¦. /
	IPAddress
¦¦/ 8
.
¦¦8 9
Parse
¦¦9 >
(
¦¦> ?
$str
¦¦? K
)
¦¦K L
,
¦¦L M
$num
¦¦N S
)
¦¦S T
;
¦¦T U
listener
§§ 
.
§§ 
Start
§§ "
(
§§" #
)
§§# $
;
§§$ %
using
¨¨ 
(
¨¨ 
	TcpClient
¨¨ $
tcpConn
¨¨% ,
=
¨¨- .
listener
¨¨/ 7
.
¨¨7 8
AcceptTcpClient
¨¨8 G
(
¨¨G H
)
¨¨H I
)
¨¨I J
{
©© 
using
«« 
(
«« 
StreamReader
«« +
sr
««, .
=
««/ 0
new
««1 4
StreamReader
««5 A
(
««A B
tcpConn
««B I
.
««I J
	GetStream
««J S
(
««S T
)
««T U
)
««U V
)
««V W
{
¬¬ 
data
®®  
=
®®! "
sr
®®# %
.
®®% &
ReadLine
®®& .
(
®®. /
)
®®/ 0
;
®®0 1
}
¯¯ 
}
°° 
}
±± 
catch
²² 
(
²² 
IOException
²² "
exceptIO
²²# +
)
²²+ ,
{
³³ 
IO
´´ 
.
´´ 
Logger
´´ 
.
´´ 
Log
´´ !
(
´´! "
NLog
´´" &
.
´´& '
LogLevel
´´' /
.
´´/ 0
Warn
´´0 4
,
´´4 5
exceptIO
´´6 >
,
´´> ?
$str
´´@ [
)
´´[ \
;
´´\ ]
}
µµ 
finally
¶¶ 
{
·· 
if
¸¸ 
(
¸¸ 
listener
¸¸  
!=
¸¸! #
null
¸¸$ (
)
¸¸( )
{
¹¹ 
try
ºº 
{
»» 
listener
¼¼ $
.
¼¼$ %
Stop
¼¼% )
(
¼¼) *
)
¼¼* +
;
¼¼+ ,
}
½½ 
catch
¾¾ 
(
¾¾ 
SocketException
¾¾ -
se
¾¾. 0
)
¾¾0 1
{
¿¿ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ %
.
ÀÀ% &
Log
ÀÀ& )
(
ÀÀ) *
NLog
ÀÀ* .
.
ÀÀ. /
LogLevel
ÀÀ/ 7
.
ÀÀ7 8
Warn
ÀÀ8 <
,
ÀÀ< =
se
ÀÀ> @
,
ÀÀ@ A
$str
ÀÀB ]
)
ÀÀ] ^
;
ÀÀ^ _
}
ÁÁ 
}
ÂÂ 
}
ÃÃ 
}
ÄÄ 
}
ÅÅ 	
else
ÆÆ 
{
ÇÇ 	
data
ÊÊ 
=
ÊÊ 
null
ÊÊ 
;
ÊÊ 
}
ËË 	
if
ÌÌ 

(
ÌÌ 
$num
ÌÌ 
!=
ÌÌ 
$num
ÌÌ 
)
ÌÌ 
{
ÍÍ 	
IO
ÏÏ 
.
ÏÏ 
	WriteLine
ÏÏ 
(
ÏÏ 
$str
ÏÏ /
)
ÏÏ/ 0
;
ÏÏ0 1
}
ÐÐ 	
else
ÑÑ 
{
ÒÒ 	
try
ÓÓ 
{
ÔÔ 
int
ÕÕ 
value
ÕÕ 
=
ÕÕ 
int
ÕÕ 
.
ÕÕ  
Parse
ÕÕ  %
(
ÕÕ% &
data
ÕÕ& *
)
ÕÕ* +
;
ÕÕ+ ,
}
ÖÖ 
catch
×× 
(
×× 
FormatException
×× " 
exceptNumberFormat
××# 5
)
××5 6
{
ØØ 
IO
ÚÚ 
.
ÚÚ 
Logger
ÚÚ 
.
ÚÚ 
Log
ÚÚ 
(
ÚÚ 
NLog
ÚÚ "
.
ÚÚ" #
LogLevel
ÚÚ# +
.
ÚÚ+ ,
Warn
ÚÚ, 0
,
ÚÚ0 1 
exceptNumberFormat
ÚÚ2 D
,
ÚÚD E
$str
ÚÚF j
+
ÚÚk l 
exceptNumberFormat
ÚÚm 
)ÚÚ 
;ÚÚ 
}
ÛÛ 
}
ÜÜ 	
}
ÝÝ 
private
àà 
void
àà 
GoodB2G2
àà 
(
àà 
)
àà 
{
áá 
string
ââ 
data
ââ 
;
ââ 
if
ãã 

(
ãã 
$num
ãã 
==
ãã 
$num
ãã 
)
ãã 
{
ää 	
data
åå 
=
åå 
$str
åå 
;
åå 
{
çç 
TcpListener
èè 
listener
èè $
=
èè% &
null
èè' +
;
èè+ ,
try
éé 
{
êê 
listener
ëë 
=
ëë 
new
ëë "
TcpListener
ëë# .
(
ëë. /
	IPAddress
ëë/ 8
.
ëë8 9
Parse
ëë9 >
(
ëë> ?
$str
ëë? K
)
ëëK L
,
ëëL M
$num
ëëN S
)
ëëS T
;
ëëT U
listener
ìì 
.
ìì 
Start
ìì "
(
ìì" #
)
ìì# $
;
ìì$ %
using
íí 
(
íí 
	TcpClient
íí $
tcpConn
íí% ,
=
íí- .
listener
íí/ 7
.
íí7 8
AcceptTcpClient
íí8 G
(
ííG H
)
ííH I
)
ííI J
{
îî 
using
ðð 
(
ðð 
StreamReader
ðð +
sr
ðð, .
=
ðð/ 0
new
ðð1 4
StreamReader
ðð5 A
(
ððA B
tcpConn
ððB I
.
ððI J
	GetStream
ððJ S
(
ððS T
)
ððT U
)
ððU V
)
ððV W
{
ññ 
data
óó  
=
óó! "
sr
óó# %
.
óó% &
ReadLine
óó& .
(
óó. /
)
óó/ 0
;
óó0 1
}
ôô 
}
õõ 
}
öö 
catch
÷÷ 
(
÷÷ 
IOException
÷÷ "
exceptIO
÷÷# +
)
÷÷+ ,
{
øø 
IO
ùù 
.
ùù 
Logger
ùù 
.
ùù 
Log
ùù !
(
ùù! "
NLog
ùù" &
.
ùù& '
LogLevel
ùù' /
.
ùù/ 0
Warn
ùù0 4
,
ùù4 5
exceptIO
ùù6 >
,
ùù> ?
$str
ùù@ [
)
ùù[ \
;
ùù\ ]
}
úú 
finally
ûû 
{
üü 
if
ýý 
(
ýý 
listener
ýý  
!=
ýý! #
null
ýý$ (
)
ýý( )
{
þþ 
try
ÿÿ 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
   
GoodG2B1
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
GoodG2B2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodB2G1
££ 
(
££ 
)
££ 
;
££ 
GoodB2G2
¤¤ 
(
¤¤ 
)
¤¤ 
;
¤¤ 
}
¥¥ 
}§§ 
}¨¨ {
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_04.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_04 C
:D E
AbstractTestCaseF V
{ 
private$$ 
const$$ 
bool$$ 
PRIVATE_CONST_TRUE$$ )
=$$* +
true$$, 0
;$$0 1
private%% 
const%% 
bool%% 
PRIVATE_CONST_FALSE%% *
=%%+ ,
false%%- 2
;%%2 3
public'' 

override'' 
void'' 
Bad'' 
('' 
)'' 
{(( 
string)) 
data)) 
;)) 
if** 

(** 
PRIVATE_CONST_TRUE** 
)** 
{++ 	
data,, 
=,, 
$str,, 
;,, 
{.. 
TcpListener// 
listener// $
=//% &
null//' +
;//+ ,
try00 
{11 
listener22 
=22 
new22 "
TcpListener22# .
(22. /
	IPAddress22/ 8
.228 9
Parse229 >
(22> ?
$str22? K
)22K L
,22L M
$num22N S
)22S T
;22T U
listener33 
.33 
Start33 "
(33" #
)33# $
;33$ %
using44 
(44 
	TcpClient44 $
tcpConn44% ,
=44- .
listener44/ 7
.447 8
AcceptTcpClient448 G
(44G H
)44H I
)44I J
{55 
using77 
(77 
StreamReader77 +
sr77, .
=77/ 0
new771 4
StreamReader775 A
(77A B
tcpConn77B I
.77I J
	GetStream77J S
(77S T
)77T U
)77U V
)77V W
{88 
data::  
=::! "
sr::# %
.::% &
ReadLine::& .
(::. /
)::/ 0
;::0 1
};; 
}<< 
}== 
catch>> 
(>> 
IOException>> "
exceptIO>># +
)>>+ ,
{?? 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ !
(@@! "
NLog@@" &
.@@& '
LogLevel@@' /
.@@/ 0
Warn@@0 4
,@@4 5
exceptIO@@6 >
,@@> ?
$str@@@ [
)@@[ \
;@@\ ]
}AA 
finallyBB 
{CC 
ifDD 
(DD 
listenerDD  
!=DD! #
nullDD$ (
)DD( )
{EE 
tryFF 
{GG 
listenerHH $
.HH$ %
StopHH% )
(HH) *
)HH* +
;HH+ ,
}II 
catchJJ 
(JJ 
SocketExceptionJJ -
seJJ. 0
)JJ0 1
{KK 
IOLL 
.LL 
LoggerLL %
.LL% &
LogLL& )
(LL) *
NLogLL* .
.LL. /
LogLevelLL/ 7
.LL7 8
WarnLL8 <
,LL< =
seLL> @
,LL@ A
$strLLB ]
)LL] ^
;LL^ _
}MM 
}NN 
}OO 
}PP 
}QQ 	
elseRR 
{SS 	
dataVV 
=VV 
nullVV 
;VV 
}WW 	
ifXX 

(XX 
PRIVATE_CONST_TRUEXX 
)XX 
{YY 	
tryZZ 
{[[ 
int\\ 
value\\ 
=\\ 
int\\ 
.\\  
Parse\\  %
(\\% &
data\\& *
)\\* +
;\\+ ,
}]] 
catch^^ 
(^^ 
FormatException^^ "
exceptNumberFormat^^# 5
)^^5 6
{__ 
IOaa 
.aa 
Loggeraa 
.aa 
Logaa 
(aa 
NLogaa "
.aa" #
LogLevelaa# +
.aa+ ,
Warnaa, 0
,aa0 1
exceptNumberFormataa2 D
,aaD E
$straaF `
+aaa b
dataaac g
)aag h
;aah i
}bb 
}cc 	
}dd 
privatehh 
voidhh 
GoodG2B1hh 
(hh 
)hh 
{ii 
stringjj 
datajj 
;jj 
ifkk 

(kk 
PRIVATE_CONST_FALSEkk 
)kk  
{ll 	
dataoo 
=oo 
nulloo 
;oo 
}pp 	
elseqq 
{rr 	
datatt 
=tt 
$strtt 
;tt 
}uu 	
ifvv 

(vv 
PRIVATE_CONST_TRUEvv 
)vv 
{ww 	
tryxx 
{yy 
intzz 
valuezz 
=zz 
intzz 
.zz  
Parsezz  %
(zz% &
datazz& *
)zz* +
;zz+ ,
}{{ 
catch|| 
(|| 
FormatException|| "
exceptNumberFormat||# 5
)||5 6
{}} 
IO 
. 
Logger 
. 
Log 
( 
NLog "
." #
LogLevel# +
.+ ,
Warn, 0
,0 1
exceptNumberFormat2 D
,D E
$strF `
+a b
datac g
)g h
;h i
}
 
}
 	
}
 
private
 
void
 
GoodG2B2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
¢¢ 
void
¢¢ 
GoodB2G1
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
string
¤¤ 
data
¤¤ 
;
¤¤ 
if
¥¥ 

(
¥¥  
PRIVATE_CONST_TRUE
¥¥ 
)
¥¥ 
{
¦¦ 	
data
§§ 
=
§§ 
$str
§§ 
;
§§ 
{
©© 
TcpListener
ªª 
listener
ªª $
=
ªª% &
null
ªª' +
;
ªª+ ,
try
«« 
{
¬¬ 
listener
­­ 
=
­­ 
new
­­ "
TcpListener
­­# .
(
­­. /
	IPAddress
­­/ 8
.
­­8 9
Parse
­­9 >
(
­­> ?
$str
­­? K
)
­­K L
,
­­L M
$num
­­N S
)
­­S T
;
­­T U
listener
®® 
.
®® 
Start
®® "
(
®®" #
)
®®# $
;
®®$ %
using
¯¯ 
(
¯¯ 
	TcpClient
¯¯ $
tcpConn
¯¯% ,
=
¯¯- .
listener
¯¯/ 7
.
¯¯7 8
AcceptTcpClient
¯¯8 G
(
¯¯G H
)
¯¯H I
)
¯¯I J
{
°° 
using
²² 
(
²² 
StreamReader
²² +
sr
²², .
=
²²/ 0
new
²²1 4
StreamReader
²²5 A
(
²²A B
tcpConn
²²B I
.
²²I J
	GetStream
²²J S
(
²²S T
)
²²T U
)
²²U V
)
²²V W
{
³³ 
data
µµ  
=
µµ! "
sr
µµ# %
.
µµ% &
ReadLine
µµ& .
(
µµ. /
)
µµ/ 0
;
µµ0 1
}
¶¶ 
}
·· 
}
¸¸ 
catch
¹¹ 
(
¹¹ 
IOException
¹¹ "
exceptIO
¹¹# +
)
¹¹+ ,
{
ºº 
IO
»» 
.
»» 
Logger
»» 
.
»» 
Log
»» !
(
»»! "
NLog
»»" &
.
»»& '
LogLevel
»»' /
.
»»/ 0
Warn
»»0 4
,
»»4 5
exceptIO
»»6 >
,
»»> ?
$str
»»@ [
)
»»[ \
;
»»\ ]
}
¼¼ 
finally
½½ 
{
¾¾ 
if
¿¿ 
(
¿¿ 
listener
¿¿  
!=
¿¿! #
null
¿¿$ (
)
¿¿( )
{
ÀÀ 
try
ÁÁ 
{
ÂÂ 
listener
ÃÃ $
.
ÃÃ$ %
Stop
ÃÃ% )
(
ÃÃ) *
)
ÃÃ* +
;
ÃÃ+ ,
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
SocketException
ÅÅ -
se
ÅÅ. 0
)
ÅÅ0 1
{
ÆÆ 
IO
ÇÇ 
.
ÇÇ 
Logger
ÇÇ %
.
ÇÇ% &
Log
ÇÇ& )
(
ÇÇ) *
NLog
ÇÇ* .
.
ÇÇ. /
LogLevel
ÇÇ/ 7
.
ÇÇ7 8
Warn
ÇÇ8 <
,
ÇÇ< =
se
ÇÇ> @
,
ÇÇ@ A
$str
ÇÇB ]
)
ÇÇ] ^
;
ÇÇ^ _
}
ÈÈ 
}
ÉÉ 
}
ÊÊ 
}
ËË 
}
ÌÌ 	
else
ÍÍ 
{
ÎÎ 	
data
ÑÑ 
=
ÑÑ 
null
ÑÑ 
;
ÑÑ 
}
ÒÒ 	
if
ÓÓ 

(
ÓÓ !
PRIVATE_CONST_FALSE
ÓÓ 
)
ÓÓ  
{
ÔÔ 	
IO
ÖÖ 
.
ÖÖ 
	WriteLine
ÖÖ 
(
ÖÖ 
$str
ÖÖ /
)
ÖÖ/ 0
;
ÖÖ0 1
}
×× 	
else
ØØ 
{
ÙÙ 	
try
ÚÚ 
{
ÛÛ 
int
ÜÜ 
value
ÜÜ 
=
ÜÜ 
int
ÜÜ 
.
ÜÜ  
Parse
ÜÜ  %
(
ÜÜ% &
data
ÜÜ& *
)
ÜÜ* +
;
ÜÜ+ ,
}
ÝÝ 
catch
ÞÞ 
(
ÞÞ 
FormatException
ÞÞ " 
exceptNumberFormat
ÞÞ# 5
)
ÞÞ5 6
{
ßß 
IO
áá 
.
áá 
Logger
áá 
.
áá 
Log
áá 
(
áá 
NLog
áá "
.
áá" #
LogLevel
áá# +
.
áá+ ,
Warn
áá, 0
,
áá0 1 
exceptNumberFormat
áá2 D
,
ááD E
$str
ááF j
+
áák l 
exceptNumberFormat
áám 
)áá 
;áá 
}
ââ 
}
ãã 	
}
ää 
private
çç 
void
çç 
GoodB2G2
çç 
(
çç 
)
çç 
{
èè 
string
éé 
data
éé 
;
éé 
if
êê 

(
êê  
PRIVATE_CONST_TRUE
êê 
)
êê 
{
ëë 	
data
ìì 
=
ìì 
$str
ìì 
;
ìì 
{
îî 
TcpListener
ïï 
listener
ïï $
=
ïï% &
null
ïï' +
;
ïï+ ,
try
ðð 
{
ññ 
listener
òò 
=
òò 
new
òò "
TcpListener
òò# .
(
òò. /
	IPAddress
òò/ 8
.
òò8 9
Parse
òò9 >
(
òò> ?
$str
òò? K
)
òòK L
,
òòL M
$num
òòN S
)
òòS T
;
òòT U
listener
óó 
.
óó 
Start
óó "
(
óó" #
)
óó# $
;
óó$ %
using
ôô 
(
ôô 
	TcpClient
ôô $
tcpConn
ôô% ,
=
ôô- .
listener
ôô/ 7
.
ôô7 8
AcceptTcpClient
ôô8 G
(
ôôG H
)
ôôH I
)
ôôI J
{
õõ 
using
÷÷ 
(
÷÷ 
StreamReader
÷÷ +
sr
÷÷, .
=
÷÷/ 0
new
÷÷1 4
StreamReader
÷÷5 A
(
÷÷A B
tcpConn
÷÷B I
.
÷÷I J
	GetStream
÷÷J S
(
÷÷S T
)
÷÷T U
)
÷÷U V
)
÷÷V W
{
øø 
data
úú  
=
úú! "
sr
úú# %
.
úú% &
ReadLine
úú& .
(
úú. /
)
úú/ 0
;
úú0 1
}
ûû 
}
üü 
}
ýý 
catch
þþ 
(
þþ 
IOException
þþ "
exceptIO
þþ# +
)
þþ+ ,
{
ÿÿ 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
finally
 
{
 
if
 
(
 
listener
  
!=
! #
null
$ (
)
( )
{
 
try
 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ 
(
¡¡ 
NLog
¡¡ "
.
¡¡" #
LogLevel
¡¡# +
.
¡¡+ ,
Warn
¡¡, 0
,
¡¡0 1 
exceptNumberFormat
¡¡2 D
,
¡¡D E
$str
¡¡F j
+
¡¡k l 
exceptNumberFormat
¡¡m 
)¡¡ 
;¡¡ 
}
¢¢ 
}
££ 	
}
¤¤ 
public
¦¦ 

override
¦¦ 
void
¦¦ 
Good
¦¦ 
(
¦¦ 
)
¦¦ 
{
§§ 
GoodG2B1
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
GoodG2B2
©© 
(
©© 
)
©© 
;
©© 
GoodB2G1
ªª 
(
ªª 
)
ªª 
;
ªª 
GoodB2G2
«« 
(
«« 
)
«« 
;
«« 
}
¬¬ 
}®® 
}¯¯ z
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_05.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_05 C
:D E
AbstractTestCaseF V
{ 
private## 
bool## 
privateTrue## 
=## 
true## #
;### $
private$$ 
bool$$ 
privateFalse$$ 
=$$ 
false$$  %
;$$% &
public&& 

override&& 
void&& 
Bad&& 
(&& 
)&& 
{'' 
string(( 
data(( 
;(( 
if)) 

()) 
privateTrue)) 
))) 
{** 	
data++ 
=++ 
$str++ 
;++ 
{-- 
TcpListener.. 
listener.. $
=..% &
null..' +
;..+ ,
try// 
{00 
listener11 
=11 
new11 "
TcpListener11# .
(11. /
	IPAddress11/ 8
.118 9
Parse119 >
(11> ?
$str11? K
)11K L
,11L M
$num11N S
)11S T
;11T U
listener22 
.22 
Start22 "
(22" #
)22# $
;22$ %
using33 
(33 
	TcpClient33 $
tcpConn33% ,
=33- .
listener33/ 7
.337 8
AcceptTcpClient338 G
(33G H
)33H I
)33I J
{44 
using66 
(66 
StreamReader66 +
sr66, .
=66/ 0
new661 4
StreamReader665 A
(66A B
tcpConn66B I
.66I J
	GetStream66J S
(66S T
)66T U
)66U V
)66V W
{77 
data99  
=99! "
sr99# %
.99% &
ReadLine99& .
(99. /
)99/ 0
;990 1
}:: 
};; 
}<< 
catch== 
(== 
IOException== "
exceptIO==# +
)==+ ,
{>> 
IO?? 
.?? 
Logger?? 
.?? 
Log?? !
(??! "
NLog??" &
.??& '
LogLevel??' /
.??/ 0
Warn??0 4
,??4 5
exceptIO??6 >
,??> ?
$str??@ [
)??[ \
;??\ ]
}@@ 
finallyAA 
{BB 
ifCC 
(CC 
listenerCC  
!=CC! #
nullCC$ (
)CC( )
{DD 
tryEE 
{FF 
listenerGG $
.GG$ %
StopGG% )
(GG) *
)GG* +
;GG+ ,
}HH 
catchII 
(II 
SocketExceptionII -
seII. 0
)II0 1
{JJ 
IOKK 
.KK 
LoggerKK %
.KK% &
LogKK& )
(KK) *
NLogKK* .
.KK. /
LogLevelKK/ 7
.KK7 8
WarnKK8 <
,KK< =
seKK> @
,KK@ A
$strKKB ]
)KK] ^
;KK^ _
}LL 
}MM 
}NN 
}OO 
}PP 	
elseQQ 
{RR 	
dataUU 
=UU 
nullUU 
;UU 
}VV 	
ifWW 

(WW 
privateTrueWW 
)WW 
{XX 	
tryYY 
{ZZ 
int[[ 
value[[ 
=[[ 
int[[ 
.[[  
Parse[[  %
([[% &
data[[& *
)[[* +
;[[+ ,
}\\ 
catch]] 
(]] 
FormatException]] "
exceptNumberFormat]]# 5
)]]5 6
{^^ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptNumberFormat``2 D
,``D E
$str``F `
+``a b
data``c g
)``g h
;``h i
}aa 
}bb 	
}cc 
privategg 
voidgg 
GoodG2B1gg 
(gg 
)gg 
{hh 
stringii 
dataii 
;ii 
ifjj 

(jj 
privateFalsejj 
)jj 
{kk 	
datann 
=nn 
nullnn 
;nn 
}oo 	
elsepp 
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
ifuu 

(uu 
privateTrueuu 
)uu 
{vv 	
tryww 
{xx 
intyy 
valueyy 
=yy 
intyy 
.yy  
Parseyy  %
(yy% &
datayy& *
)yy* +
;yy+ ,
}zz 
catch{{ 
({{ 
FormatException{{ "
exceptNumberFormat{{# 5
){{5 6
{|| 
IO~~ 
.~~ 
Logger~~ 
.~~ 
Log~~ 
(~~ 
NLog~~ "
.~~" #
LogLevel~~# +
.~~+ ,
Warn~~, 0
,~~0 1
exceptNumberFormat~~2 D
,~~D E
$str~~F `
+~~a b
data~~c g
)~~g h
;~~h i
} 
}
 	
}
 
private
 
void
 
GoodG2B2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateTrue
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
¡¡ 
void
¡¡ 
GoodB2G1
¡¡ 
(
¡¡ 
)
¡¡ 
{
¢¢ 
string
££ 
data
££ 
;
££ 
if
¤¤ 

(
¤¤ 
privateTrue
¤¤ 
)
¤¤ 
{
¥¥ 	
data
¦¦ 
=
¦¦ 
$str
¦¦ 
;
¦¦ 
{
¨¨ 
TcpListener
©© 
listener
©© $
=
©©% &
null
©©' +
;
©©+ ,
try
ªª 
{
«« 
listener
¬¬ 
=
¬¬ 
new
¬¬ "
TcpListener
¬¬# .
(
¬¬. /
	IPAddress
¬¬/ 8
.
¬¬8 9
Parse
¬¬9 >
(
¬¬> ?
$str
¬¬? K
)
¬¬K L
,
¬¬L M
$num
¬¬N S
)
¬¬S T
;
¬¬T U
listener
­­ 
.
­­ 
Start
­­ "
(
­­" #
)
­­# $
;
­­$ %
using
®® 
(
®® 
	TcpClient
®® $
tcpConn
®®% ,
=
®®- .
listener
®®/ 7
.
®®7 8
AcceptTcpClient
®®8 G
(
®®G H
)
®®H I
)
®®I J
{
¯¯ 
using
±± 
(
±± 
StreamReader
±± +
sr
±±, .
=
±±/ 0
new
±±1 4
StreamReader
±±5 A
(
±±A B
tcpConn
±±B I
.
±±I J
	GetStream
±±J S
(
±±S T
)
±±T U
)
±±U V
)
±±V W
{
²² 
data
´´  
=
´´! "
sr
´´# %
.
´´% &
ReadLine
´´& .
(
´´. /
)
´´/ 0
;
´´0 1
}
µµ 
}
¶¶ 
}
·· 
catch
¸¸ 
(
¸¸ 
IOException
¸¸ "
exceptIO
¸¸# +
)
¸¸+ ,
{
¹¹ 
IO
ºº 
.
ºº 
Logger
ºº 
.
ºº 
Log
ºº !
(
ºº! "
NLog
ºº" &
.
ºº& '
LogLevel
ºº' /
.
ºº/ 0
Warn
ºº0 4
,
ºº4 5
exceptIO
ºº6 >
,
ºº> ?
$str
ºº@ [
)
ºº[ \
;
ºº\ ]
}
»» 
finally
¼¼ 
{
½½ 
if
¾¾ 
(
¾¾ 
listener
¾¾  
!=
¾¾! #
null
¾¾$ (
)
¾¾( )
{
¿¿ 
try
ÀÀ 
{
ÁÁ 
listener
ÂÂ $
.
ÂÂ$ %
Stop
ÂÂ% )
(
ÂÂ) *
)
ÂÂ* +
;
ÂÂ+ ,
}
ÃÃ 
catch
ÄÄ 
(
ÄÄ 
SocketException
ÄÄ -
se
ÄÄ. 0
)
ÄÄ0 1
{
ÅÅ 
IO
ÆÆ 
.
ÆÆ 
Logger
ÆÆ %
.
ÆÆ% &
Log
ÆÆ& )
(
ÆÆ) *
NLog
ÆÆ* .
.
ÆÆ. /
LogLevel
ÆÆ/ 7
.
ÆÆ7 8
Warn
ÆÆ8 <
,
ÆÆ< =
se
ÆÆ> @
,
ÆÆ@ A
$str
ÆÆB ]
)
ÆÆ] ^
;
ÆÆ^ _
}
ÇÇ 
}
ÈÈ 
}
ÉÉ 
}
ÊÊ 
}
ËË 	
else
ÌÌ 
{
ÍÍ 	
data
ÐÐ 
=
ÐÐ 
null
ÐÐ 
;
ÐÐ 
}
ÑÑ 	
if
ÒÒ 

(
ÒÒ 
privateFalse
ÒÒ 
)
ÒÒ 
{
ÓÓ 	
IO
ÕÕ 
.
ÕÕ 
	WriteLine
ÕÕ 
(
ÕÕ 
$str
ÕÕ /
)
ÕÕ/ 0
;
ÕÕ0 1
}
ÖÖ 	
else
×× 
{
ØØ 	
try
ÙÙ 
{
ÚÚ 
int
ÛÛ 
value
ÛÛ 
=
ÛÛ 
int
ÛÛ 
.
ÛÛ  
Parse
ÛÛ  %
(
ÛÛ% &
data
ÛÛ& *
)
ÛÛ* +
;
ÛÛ+ ,
}
ÜÜ 
catch
ÝÝ 
(
ÝÝ 
FormatException
ÝÝ " 
exceptNumberFormat
ÝÝ# 5
)
ÝÝ5 6
{
ÞÞ 
IO
àà 
.
àà 
Logger
àà 
.
àà 
Log
àà 
(
àà 
NLog
àà "
.
àà" #
LogLevel
àà# +
.
àà+ ,
Warn
àà, 0
,
àà0 1 
exceptNumberFormat
àà2 D
,
ààD E
$str
ààF j
+
ààk l 
exceptNumberFormat
ààm 
)àà 
;àà 
}
áá 
}
ââ 	
}
ãã 
private
ææ 
void
ææ 
GoodB2G2
ææ 
(
ææ 
)
ææ 
{
çç 
string
èè 
data
èè 
;
èè 
if
éé 

(
éé 
privateTrue
éé 
)
éé 
{
êê 	
data
ëë 
=
ëë 
$str
ëë 
;
ëë 
{
íí 
TcpListener
îî 
listener
îî $
=
îî% &
null
îî' +
;
îî+ ,
try
ïï 
{
ðð 
listener
ññ 
=
ññ 
new
ññ "
TcpListener
ññ# .
(
ññ. /
	IPAddress
ññ/ 8
.
ññ8 9
Parse
ññ9 >
(
ññ> ?
$str
ññ? K
)
ññK L
,
ññL M
$num
ññN S
)
ññS T
;
ññT U
listener
òò 
.
òò 
Start
òò "
(
òò" #
)
òò# $
;
òò$ %
using
óó 
(
óó 
	TcpClient
óó $
tcpConn
óó% ,
=
óó- .
listener
óó/ 7
.
óó7 8
AcceptTcpClient
óó8 G
(
óóG H
)
óóH I
)
óóI J
{
ôô 
using
öö 
(
öö 
StreamReader
öö +
sr
öö, .
=
öö/ 0
new
öö1 4
StreamReader
öö5 A
(
ööA B
tcpConn
ööB I
.
ööI J
	GetStream
ööJ S
(
ööS T
)
ööT U
)
ööU V
)
ööV W
{
÷÷ 
data
ùù  
=
ùù! "
sr
ùù# %
.
ùù% &
ReadLine
ùù& .
(
ùù. /
)
ùù/ 0
;
ùù0 1
}
úú 
}
ûû 
}
üü 
catch
ýý 
(
ýý 
IOException
ýý "
exceptIO
ýý# +
)
ýý+ ,
{
þþ 
IO
ÿÿ 
.
ÿÿ 
Logger
ÿÿ 
.
ÿÿ 
Log
ÿÿ !
(
ÿÿ! "
NLog
ÿÿ" &
.
ÿÿ& '
LogLevel
ÿÿ' /
.
ÿÿ/ 0
Warn
ÿÿ0 4
,
ÿÿ4 5
exceptIO
ÿÿ6 >
,
ÿÿ> ?
$str
ÿÿ@ [
)
ÿÿ[ \
;
ÿÿ\ ]
}
 
finally
 
{
 
if
 
(
 
listener
  
!=
! #
null
$ (
)
( )
{
 
try
 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateTrue
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
   
.
   
Logger
   
.
   
Log
   
(
   
NLog
   "
.
  " #
LogLevel
  # +
.
  + ,
Warn
  , 0
,
  0 1 
exceptNumberFormat
  2 D
,
  D E
$str
  F j
+
  k l 
exceptNumberFormat
  m 
)   
;   
}
¡¡ 
}
¢¢ 	
}
££ 
public
¥¥ 

override
¥¥ 
void
¥¥ 
Good
¥¥ 
(
¥¥ 
)
¥¥ 
{
¦¦ 
GoodG2B1
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodG2B2
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
GoodB2G1
©© 
(
©© 
)
©© 
;
©© 
GoodB2G2
ªª 
(
ªª 
)
ªª 
;
ªª 
}
«« 
}­­ 
}®® è|
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_06.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_06 C
:D E
AbstractTestCaseF V
{ 
private## 
const## 
int## 
PRIVATE_CONST_FIVE## (
=##) *
$num##+ ,
;##, -
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
string'' 
data'' 
;'' 
if(( 

((( 
PRIVATE_CONST_FIVE(( 
==((  
$num((  !
)((! "
{)) 	
data** 
=** 
$str** 
;** 
{,, 
TcpListener-- 
listener-- $
=--% &
null--' +
;--+ ,
try.. 
{// 
listener00 
=00 
new00 "
TcpListener00# .
(00. /
	IPAddress00/ 8
.008 9
Parse009 >
(00> ?
$str00? K
)00K L
,00L M
$num00N S
)00S T
;00T U
listener11 
.11 
Start11 "
(11" #
)11# $
;11$ %
using22 
(22 
	TcpClient22 $
tcpConn22% ,
=22- .
listener22/ 7
.227 8
AcceptTcpClient228 G
(22G H
)22H I
)22I J
{33 
using55 
(55 
StreamReader55 +
sr55, .
=55/ 0
new551 4
StreamReader555 A
(55A B
tcpConn55B I
.55I J
	GetStream55J S
(55S T
)55T U
)55U V
)55V W
{66 
data88  
=88! "
sr88# %
.88% &
ReadLine88& .
(88. /
)88/ 0
;880 1
}99 
}:: 
};; 
catch<< 
(<< 
IOException<< "
exceptIO<<# +
)<<+ ,
{== 
IO>> 
.>> 
Logger>> 
.>> 
Log>> !
(>>! "
NLog>>" &
.>>& '
LogLevel>>' /
.>>/ 0
Warn>>0 4
,>>4 5
exceptIO>>6 >
,>>> ?
$str>>@ [
)>>[ \
;>>\ ]
}?? 
finally@@ 
{AA 
ifBB 
(BB 
listenerBB  
!=BB! #
nullBB$ (
)BB( )
{CC 
tryDD 
{EE 
listenerFF $
.FF$ %
StopFF% )
(FF) *
)FF* +
;FF+ ,
}GG 
catchHH 
(HH 
SocketExceptionHH -
seHH. 0
)HH0 1
{II 
IOJJ 
.JJ 
LoggerJJ %
.JJ% &
LogJJ& )
(JJ) *
NLogJJ* .
.JJ. /
LogLevelJJ/ 7
.JJ7 8
WarnJJ8 <
,JJ< =
seJJ> @
,JJ@ A
$strJJB ]
)JJ] ^
;JJ^ _
}KK 
}LL 
}MM 
}NN 
}OO 	
elsePP 
{QQ 	
dataTT 
=TT 
nullTT 
;TT 
}UU 	
ifVV 

(VV 
PRIVATE_CONST_FIVEVV 
==VV  
$numVV  !
)VV! "
{WW 	
tryXX 
{YY 
intZZ 
valueZZ 
=ZZ 
intZZ 
.ZZ  
ParseZZ  %
(ZZ% &
dataZZ& *
)ZZ* +
;ZZ+ ,
}[[ 
catch\\ 
(\\ 
FormatException\\ "
exceptNumberFormat\\# 5
)\\5 6
{]] 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
exceptNumberFormat__2 D
,__D E
$str__F `
+__a b
data__c g
)__g h
;__h i
}`` 
}aa 	
}bb 
privateff 
voidff 
GoodG2B1ff 
(ff 
)ff 
{gg 
stringhh 
datahh 
;hh 
ifii 

(ii 
PRIVATE_CONST_FIVEii 
!=ii  
$numii  !
)ii! "
{jj 	
datamm 
=mm 
nullmm 
;mm 
}nn 	
elseoo 
{pp 	
datarr 
=rr 
$strrr 
;rr 
}ss 	
iftt 

(tt 
PRIVATE_CONST_FIVEtt 
==tt  
$numtt  !
)tt! "
{uu 	
tryvv 
{ww 
intxx 
valuexx 
=xx 
intxx 
.xx  
Parsexx  %
(xx% &
dataxx& *
)xx* +
;xx+ ,
}yy 
catchzz 
(zz 
FormatExceptionzz "
exceptNumberFormatzz# 5
)zz5 6
{{{ 
IO}} 
.}} 
Logger}} 
.}} 
Log}} 
(}} 
NLog}} "
.}}" #
LogLevel}}# +
.}}+ ,
Warn}}, 0
,}}0 1
exceptNumberFormat}}2 D
,}}D E
$str}}F `
+}}a b
data}}c g
)}}g h
;}}h i
}~~ 
} 	
}
 
private
 
void
 
GoodG2B2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
   
void
   
GoodB2G1
   
(
   
)
   
{
¡¡ 
string
¢¢ 
data
¢¢ 
;
¢¢ 
if
££ 

(
££  
PRIVATE_CONST_FIVE
££ 
==
££  
$num
££  !
)
££! "
{
¤¤ 	
data
¥¥ 
=
¥¥ 
$str
¥¥ 
;
¥¥ 
{
§§ 
TcpListener
¨¨ 
listener
¨¨ $
=
¨¨% &
null
¨¨' +
;
¨¨+ ,
try
©© 
{
ªª 
listener
«« 
=
«« 
new
«« "
TcpListener
««# .
(
««. /
	IPAddress
««/ 8
.
««8 9
Parse
««9 >
(
««> ?
$str
««? K
)
««K L
,
««L M
$num
««N S
)
««S T
;
««T U
listener
¬¬ 
.
¬¬ 
Start
¬¬ "
(
¬¬" #
)
¬¬# $
;
¬¬$ %
using
­­ 
(
­­ 
	TcpClient
­­ $
tcpConn
­­% ,
=
­­- .
listener
­­/ 7
.
­­7 8
AcceptTcpClient
­­8 G
(
­­G H
)
­­H I
)
­­I J
{
®® 
using
°° 
(
°° 
StreamReader
°° +
sr
°°, .
=
°°/ 0
new
°°1 4
StreamReader
°°5 A
(
°°A B
tcpConn
°°B I
.
°°I J
	GetStream
°°J S
(
°°S T
)
°°T U
)
°°U V
)
°°V W
{
±± 
data
³³  
=
³³! "
sr
³³# %
.
³³% &
ReadLine
³³& .
(
³³. /
)
³³/ 0
;
³³0 1
}
´´ 
}
µµ 
}
¶¶ 
catch
·· 
(
·· 
IOException
·· "
exceptIO
··# +
)
··+ ,
{
¸¸ 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ !
(
¹¹! "
NLog
¹¹" &
.
¹¹& '
LogLevel
¹¹' /
.
¹¹/ 0
Warn
¹¹0 4
,
¹¹4 5
exceptIO
¹¹6 >
,
¹¹> ?
$str
¹¹@ [
)
¹¹[ \
;
¹¹\ ]
}
ºº 
finally
»» 
{
¼¼ 
if
½½ 
(
½½ 
listener
½½  
!=
½½! #
null
½½$ (
)
½½( )
{
¾¾ 
try
¿¿ 
{
ÀÀ 
listener
ÁÁ $
.
ÁÁ$ %
Stop
ÁÁ% )
(
ÁÁ) *
)
ÁÁ* +
;
ÁÁ+ ,
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
SocketException
ÃÃ -
se
ÃÃ. 0
)
ÃÃ0 1
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ %
.
ÅÅ% &
Log
ÅÅ& )
(
ÅÅ) *
NLog
ÅÅ* .
.
ÅÅ. /
LogLevel
ÅÅ/ 7
.
ÅÅ7 8
Warn
ÅÅ8 <
,
ÅÅ< =
se
ÅÅ> @
,
ÅÅ@ A
$str
ÅÅB ]
)
ÅÅ] ^
;
ÅÅ^ _
}
ÆÆ 
}
ÇÇ 
}
ÈÈ 
}
ÉÉ 
}
ÊÊ 	
else
ËË 
{
ÌÌ 	
data
ÏÏ 
=
ÏÏ 
null
ÏÏ 
;
ÏÏ 
}
ÐÐ 	
if
ÑÑ 

(
ÑÑ  
PRIVATE_CONST_FIVE
ÑÑ 
!=
ÑÑ  
$num
ÑÑ  !
)
ÑÑ! "
{
ÒÒ 	
IO
ÔÔ 
.
ÔÔ 
	WriteLine
ÔÔ 
(
ÔÔ 
$str
ÔÔ /
)
ÔÔ/ 0
;
ÔÔ0 1
}
ÕÕ 	
else
ÖÖ 
{
×× 	
try
ØØ 
{
ÙÙ 
int
ÚÚ 
value
ÚÚ 
=
ÚÚ 
int
ÚÚ 
.
ÚÚ  
Parse
ÚÚ  %
(
ÚÚ% &
data
ÚÚ& *
)
ÚÚ* +
;
ÚÚ+ ,
}
ÛÛ 
catch
ÜÜ 
(
ÜÜ 
FormatException
ÜÜ " 
exceptNumberFormat
ÜÜ# 5
)
ÜÜ5 6
{
ÝÝ 
IO
ßß 
.
ßß 
Logger
ßß 
.
ßß 
Log
ßß 
(
ßß 
NLog
ßß "
.
ßß" #
LogLevel
ßß# +
.
ßß+ ,
Warn
ßß, 0
,
ßß0 1 
exceptNumberFormat
ßß2 D
,
ßßD E
$str
ßßF j
+
ßßk l 
exceptNumberFormat
ßßm 
)ßß 
;ßß 
}
àà 
}
áá 	
}
ââ 
private
åå 
void
åå 
GoodB2G2
åå 
(
åå 
)
åå 
{
ææ 
string
çç 
data
çç 
;
çç 
if
èè 

(
èè  
PRIVATE_CONST_FIVE
èè 
==
èè  
$num
èè  !
)
èè! "
{
éé 	
data
êê 
=
êê 
$str
êê 
;
êê 
{
ìì 
TcpListener
íí 
listener
íí $
=
íí% &
null
íí' +
;
íí+ ,
try
îî 
{
ïï 
listener
ðð 
=
ðð 
new
ðð "
TcpListener
ðð# .
(
ðð. /
	IPAddress
ðð/ 8
.
ðð8 9
Parse
ðð9 >
(
ðð> ?
$str
ðð? K
)
ððK L
,
ððL M
$num
ððN S
)
ððS T
;
ððT U
listener
ññ 
.
ññ 
Start
ññ "
(
ññ" #
)
ññ# $
;
ññ$ %
using
òò 
(
òò 
	TcpClient
òò $
tcpConn
òò% ,
=
òò- .
listener
òò/ 7
.
òò7 8
AcceptTcpClient
òò8 G
(
òòG H
)
òòH I
)
òòI J
{
óó 
using
õõ 
(
õõ 
StreamReader
õõ +
sr
õõ, .
=
õõ/ 0
new
õõ1 4
StreamReader
õõ5 A
(
õõA B
tcpConn
õõB I
.
õõI J
	GetStream
õõJ S
(
õõS T
)
õõT U
)
õõU V
)
õõV W
{
öö 
data
øø  
=
øø! "
sr
øø# %
.
øø% &
ReadLine
øø& .
(
øø. /
)
øø/ 0
;
øø0 1
}
ùù 
}
úú 
}
ûû 
catch
üü 
(
üü 
IOException
üü "
exceptIO
üü# +
)
üü+ ,
{
ýý 
IO
þþ 
.
þþ 
Logger
þþ 
.
þþ 
Log
þþ !
(
þþ! "
NLog
þþ" &
.
þþ& '
LogLevel
þþ' /
.
þþ/ 0
Warn
þþ0 4
,
þþ4 5
exceptIO
þþ6 >
,
þþ> ?
$str
þþ@ [
)
þþ[ \
;
þþ\ ]
}
ÿÿ 
finally
 
{
 
if
 
(
 
listener
  
!=
! #
null
$ (
)
( )
{
 
try
 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
   
}
¡¡ 	
}
¢¢ 
public
¤¤ 

override
¤¤ 
void
¤¤ 
Good
¤¤ 
(
¤¤ 
)
¤¤ 
{
¥¥ 
GoodG2B1
¦¦ 
(
¦¦ 
)
¦¦ 
;
¦¦ 
GoodG2B2
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G1
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
GoodB2G2
©© 
(
©© 
)
©© 
;
©© 
}
ªª 
}¬¬ 
}­­ |
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_07.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_07 C
:D E
AbstractTestCaseF V
{ 
private## 
int## 
privateFive## 
=## 
$num## 
;##  
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
string'' 
data'' 
;'' 
if(( 

((( 
privateFive(( 
==(( 
$num(( 
)(( 
{)) 	
data** 
=** 
$str** 
;** 
{,, 
TcpListener-- 
listener-- $
=--% &
null--' +
;--+ ,
try.. 
{// 
listener00 
=00 
new00 "
TcpListener00# .
(00. /
	IPAddress00/ 8
.008 9
Parse009 >
(00> ?
$str00? K
)00K L
,00L M
$num00N S
)00S T
;00T U
listener11 
.11 
Start11 "
(11" #
)11# $
;11$ %
using22 
(22 
	TcpClient22 $
tcpConn22% ,
=22- .
listener22/ 7
.227 8
AcceptTcpClient228 G
(22G H
)22H I
)22I J
{33 
using55 
(55 
StreamReader55 +
sr55, .
=55/ 0
new551 4
StreamReader555 A
(55A B
tcpConn55B I
.55I J
	GetStream55J S
(55S T
)55T U
)55U V
)55V W
{66 
data88  
=88! "
sr88# %
.88% &
ReadLine88& .
(88. /
)88/ 0
;880 1
}99 
}:: 
};; 
catch<< 
(<< 
IOException<< "
exceptIO<<# +
)<<+ ,
{== 
IO>> 
.>> 
Logger>> 
.>> 
Log>> !
(>>! "
NLog>>" &
.>>& '
LogLevel>>' /
.>>/ 0
Warn>>0 4
,>>4 5
exceptIO>>6 >
,>>> ?
$str>>@ [
)>>[ \
;>>\ ]
}?? 
finally@@ 
{AA 
ifBB 
(BB 
listenerBB  
!=BB! #
nullBB$ (
)BB( )
{CC 
tryDD 
{EE 
listenerFF $
.FF$ %
StopFF% )
(FF) *
)FF* +
;FF+ ,
}GG 
catchHH 
(HH 
SocketExceptionHH -
seHH. 0
)HH0 1
{II 
IOJJ 
.JJ 
LoggerJJ %
.JJ% &
LogJJ& )
(JJ) *
NLogJJ* .
.JJ. /
LogLevelJJ/ 7
.JJ7 8
WarnJJ8 <
,JJ< =
seJJ> @
,JJ@ A
$strJJB ]
)JJ] ^
;JJ^ _
}KK 
}LL 
}MM 
}NN 
}OO 	
elsePP 
{QQ 	
dataTT 
=TT 
nullTT 
;TT 
}UU 	
ifVV 

(VV 
privateFiveVV 
==VV 
$numVV 
)VV 
{WW 	
tryXX 
{YY 
intZZ 
valueZZ 
=ZZ 
intZZ 
.ZZ  
ParseZZ  %
(ZZ% &
dataZZ& *
)ZZ* +
;ZZ+ ,
}[[ 
catch\\ 
(\\ 
FormatException\\ "
exceptNumberFormat\\# 5
)\\5 6
{]] 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
exceptNumberFormat__2 D
,__D E
$str__F `
+__a b
data__c g
)__g h
;__h i
}`` 
}aa 	
}bb 
privateff 
voidff 
GoodG2B1ff 
(ff 
)ff 
{gg 
stringhh 
datahh 
;hh 
ifii 

(ii 
privateFiveii 
!=ii 
$numii 
)ii 
{jj 	
datamm 
=mm 
nullmm 
;mm 
}nn 	
elseoo 
{pp 	
datarr 
=rr 
$strrr 
;rr 
}ss 	
iftt 

(tt 
privateFivett 
==tt 
$numtt 
)tt 
{uu 	
tryvv 
{ww 
intxx 
valuexx 
=xx 
intxx 
.xx  
Parsexx  %
(xx% &
dataxx& *
)xx* +
;xx+ ,
}yy 
catchzz 
(zz 
FormatExceptionzz "
exceptNumberFormatzz# 5
)zz5 6
{{{ 
IO}} 
.}} 
Logger}} 
.}} 
Log}} 
(}} 
NLog}} "
.}}" #
LogLevel}}# +
.}}+ ,
Warn}}, 0
,}}0 1
exceptNumberFormat}}2 D
,}}D E
$str}}F `
+}}a b
data}}c g
)}}g h
;}}h i
}~~ 
} 	
}
 
private
 
void
 
GoodG2B2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
   
void
   
GoodB2G1
   
(
   
)
   
{
¡¡ 
string
¢¢ 
data
¢¢ 
;
¢¢ 
if
££ 

(
££ 
privateFive
££ 
==
££ 
$num
££ 
)
££ 
{
¤¤ 	
data
¥¥ 
=
¥¥ 
$str
¥¥ 
;
¥¥ 
{
§§ 
TcpListener
¨¨ 
listener
¨¨ $
=
¨¨% &
null
¨¨' +
;
¨¨+ ,
try
©© 
{
ªª 
listener
«« 
=
«« 
new
«« "
TcpListener
««# .
(
««. /
	IPAddress
««/ 8
.
««8 9
Parse
««9 >
(
««> ?
$str
««? K
)
««K L
,
««L M
$num
««N S
)
««S T
;
««T U
listener
¬¬ 
.
¬¬ 
Start
¬¬ "
(
¬¬" #
)
¬¬# $
;
¬¬$ %
using
­­ 
(
­­ 
	TcpClient
­­ $
tcpConn
­­% ,
=
­­- .
listener
­­/ 7
.
­­7 8
AcceptTcpClient
­­8 G
(
­­G H
)
­­H I
)
­­I J
{
®® 
using
°° 
(
°° 
StreamReader
°° +
sr
°°, .
=
°°/ 0
new
°°1 4
StreamReader
°°5 A
(
°°A B
tcpConn
°°B I
.
°°I J
	GetStream
°°J S
(
°°S T
)
°°T U
)
°°U V
)
°°V W
{
±± 
data
³³  
=
³³! "
sr
³³# %
.
³³% &
ReadLine
³³& .
(
³³. /
)
³³/ 0
;
³³0 1
}
´´ 
}
µµ 
}
¶¶ 
catch
·· 
(
·· 
IOException
·· "
exceptIO
··# +
)
··+ ,
{
¸¸ 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ !
(
¹¹! "
NLog
¹¹" &
.
¹¹& '
LogLevel
¹¹' /
.
¹¹/ 0
Warn
¹¹0 4
,
¹¹4 5
exceptIO
¹¹6 >
,
¹¹> ?
$str
¹¹@ [
)
¹¹[ \
;
¹¹\ ]
}
ºº 
finally
»» 
{
¼¼ 
if
½½ 
(
½½ 
listener
½½  
!=
½½! #
null
½½$ (
)
½½( )
{
¾¾ 
try
¿¿ 
{
ÀÀ 
listener
ÁÁ $
.
ÁÁ$ %
Stop
ÁÁ% )
(
ÁÁ) *
)
ÁÁ* +
;
ÁÁ+ ,
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
SocketException
ÃÃ -
se
ÃÃ. 0
)
ÃÃ0 1
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ %
.
ÅÅ% &
Log
ÅÅ& )
(
ÅÅ) *
NLog
ÅÅ* .
.
ÅÅ. /
LogLevel
ÅÅ/ 7
.
ÅÅ7 8
Warn
ÅÅ8 <
,
ÅÅ< =
se
ÅÅ> @
,
ÅÅ@ A
$str
ÅÅB ]
)
ÅÅ] ^
;
ÅÅ^ _
}
ÆÆ 
}
ÇÇ 
}
ÈÈ 
}
ÉÉ 
}
ÊÊ 	
else
ËË 
{
ÌÌ 	
data
ÏÏ 
=
ÏÏ 
null
ÏÏ 
;
ÏÏ 
}
ÐÐ 	
if
ÑÑ 

(
ÑÑ 
privateFive
ÑÑ 
!=
ÑÑ 
$num
ÑÑ 
)
ÑÑ 
{
ÒÒ 	
IO
ÔÔ 
.
ÔÔ 
	WriteLine
ÔÔ 
(
ÔÔ 
$str
ÔÔ /
)
ÔÔ/ 0
;
ÔÔ0 1
}
ÕÕ 	
else
ÖÖ 
{
×× 	
try
ØØ 
{
ÙÙ 
int
ÚÚ 
value
ÚÚ 
=
ÚÚ 
int
ÚÚ 
.
ÚÚ  
Parse
ÚÚ  %
(
ÚÚ% &
data
ÚÚ& *
)
ÚÚ* +
;
ÚÚ+ ,
}
ÛÛ 
catch
ÜÜ 
(
ÜÜ 
FormatException
ÜÜ " 
exceptNumberFormat
ÜÜ# 5
)
ÜÜ5 6
{
ÝÝ 
IO
ßß 
.
ßß 
Logger
ßß 
.
ßß 
Log
ßß 
(
ßß 
NLog
ßß "
.
ßß" #
LogLevel
ßß# +
.
ßß+ ,
Warn
ßß, 0
,
ßß0 1 
exceptNumberFormat
ßß2 D
,
ßßD E
$str
ßßF j
+
ßßk l 
exceptNumberFormat
ßßm 
)ßß 
;ßß 
}
àà 
}
áá 	
}
ââ 
private
åå 
void
åå 
GoodB2G2
åå 
(
åå 
)
åå 
{
ææ 
string
çç 
data
çç 
;
çç 
if
èè 

(
èè 
privateFive
èè 
==
èè 
$num
èè 
)
èè 
{
éé 	
data
êê 
=
êê 
$str
êê 
;
êê 
{
ìì 
TcpListener
íí 
listener
íí $
=
íí% &
null
íí' +
;
íí+ ,
try
îî 
{
ïï 
listener
ðð 
=
ðð 
new
ðð "
TcpListener
ðð# .
(
ðð. /
	IPAddress
ðð/ 8
.
ðð8 9
Parse
ðð9 >
(
ðð> ?
$str
ðð? K
)
ððK L
,
ððL M
$num
ððN S
)
ððS T
;
ððT U
listener
ññ 
.
ññ 
Start
ññ "
(
ññ" #
)
ññ# $
;
ññ$ %
using
òò 
(
òò 
	TcpClient
òò $
tcpConn
òò% ,
=
òò- .
listener
òò/ 7
.
òò7 8
AcceptTcpClient
òò8 G
(
òòG H
)
òòH I
)
òòI J
{
óó 
using
õõ 
(
õõ 
StreamReader
õõ +
sr
õõ, .
=
õõ/ 0
new
õõ1 4
StreamReader
õõ5 A
(
õõA B
tcpConn
õõB I
.
õõI J
	GetStream
õõJ S
(
õõS T
)
õõT U
)
õõU V
)
õõV W
{
öö 
data
øø  
=
øø! "
sr
øø# %
.
øø% &
ReadLine
øø& .
(
øø. /
)
øø/ 0
;
øø0 1
}
ùù 
}
úú 
}
ûû 
catch
üü 
(
üü 
IOException
üü "
exceptIO
üü# +
)
üü+ ,
{
ýý 
IO
þþ 
.
þþ 
Logger
þþ 
.
þþ 
Log
þþ !
(
þþ! "
NLog
þþ" &
.
þþ& '
LogLevel
þþ' /
.
þþ/ 0
Warn
þþ0 4
,
þþ4 5
exceptIO
þþ6 >
,
þþ> ?
$str
þþ@ [
)
þþ[ \
;
þþ\ ]
}
ÿÿ 
finally
 
{
 
if
 
(
 
listener
  
!=
! #
null
$ (
)
( )
{
 
try
 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
   
}
¡¡ 	
}
¢¢ 
public
¤¤ 

override
¤¤ 
void
¤¤ 
Good
¤¤ 
(
¤¤ 
)
¤¤ 
{
¥¥ 
GoodG2B1
¦¦ 
(
¦¦ 
)
¦¦ 
;
¦¦ 
GoodG2B2
§§ 
(
§§ 
)
§§ 
;
§§ 
GoodB2G1
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
GoodB2G2
©© 
(
©© 
)
©© 
;
©© 
}
ªª 
}¬¬ 
}­­ 
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_08.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_08 C
:D E
AbstractTestCaseF V
{ 
private## 
static## 
bool## 
PrivateReturnsTrue## *
(##* +
)##+ ,
{$$ 
return%% 
true%% 
;%% 
}&& 
private(( 
static(( 
bool(( 
PrivateReturnsFalse(( +
(((+ ,
)((, -
{)) 
return** 
false** 
;** 
}++ 
public-- 

override-- 
void-- 
Bad-- 
(-- 
)-- 
{.. 
string// 
data// 
;// 
if00 

(00 
PrivateReturnsTrue00 
(00 
)00  
)00  !
{11 	
data22 
=22 
$str22 
;22 
{44 
TcpListener55 
listener55 $
=55% &
null55' +
;55+ ,
try66 
{77 
listener88 
=88 
new88 "
TcpListener88# .
(88. /
	IPAddress88/ 8
.888 9
Parse889 >
(88> ?
$str88? K
)88K L
,88L M
$num88N S
)88S T
;88T U
listener99 
.99 
Start99 "
(99" #
)99# $
;99$ %
using:: 
(:: 
	TcpClient:: $
tcpConn::% ,
=::- .
listener::/ 7
.::7 8
AcceptTcpClient::8 G
(::G H
)::H I
)::I J
{;; 
using== 
(== 
StreamReader== +
sr==, .
===/ 0
new==1 4
StreamReader==5 A
(==A B
tcpConn==B I
.==I J
	GetStream==J S
(==S T
)==T U
)==U V
)==V W
{>> 
data@@  
=@@! "
sr@@# %
.@@% &
ReadLine@@& .
(@@. /
)@@/ 0
;@@0 1
}AA 
}BB 
}CC 
catchDD 
(DD 
IOExceptionDD "
exceptIODD# +
)DD+ ,
{EE 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF !
(FF! "
NLogFF" &
.FF& '
LogLevelFF' /
.FF/ 0
WarnFF0 4
,FF4 5
exceptIOFF6 >
,FF> ?
$strFF@ [
)FF[ \
;FF\ ]
}GG 
finallyHH 
{II 
ifJJ 
(JJ 
listenerJJ  
!=JJ! #
nullJJ$ (
)JJ( )
{KK 
tryLL 
{MM 
listenerNN $
.NN$ %
StopNN% )
(NN) *
)NN* +
;NN+ ,
}OO 
catchPP 
(PP 
SocketExceptionPP -
sePP. 0
)PP0 1
{QQ 
IORR 
.RR 
LoggerRR %
.RR% &
LogRR& )
(RR) *
NLogRR* .
.RR. /
LogLevelRR/ 7
.RR7 8
WarnRR8 <
,RR< =
seRR> @
,RR@ A
$strRRB ]
)RR] ^
;RR^ _
}SS 
}TT 
}UU 
}VV 
}WW 	
elseXX 
{YY 	
data\\ 
=\\ 
null\\ 
;\\ 
}]] 	
if^^ 

(^^ 
PrivateReturnsTrue^^ 
(^^ 
)^^  
)^^  !
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatenn 
voidnn 
GoodG2B1nn 
(nn 
)nn 
{oo 
stringpp 
datapp 
;pp 
ifqq 

(qq 
PrivateReturnsFalseqq 
(qq  
)qq  !
)qq! "
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
elseww 
{xx 	
datazz 
=zz 
$strzz 
;zz 
}{{ 	
if|| 

(|| 
PrivateReturnsTrue|| 
(|| 
)||  
)||  !
{}} 	
try~~ 
{ 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodG2B2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
   
IO
¢¢ 
.
¢¢ 
Logger
¢¢ 
.
¢¢ 
Log
¢¢ 
(
¢¢ 
NLog
¢¢ "
.
¢¢" #
LogLevel
¢¢# +
.
¢¢+ ,
Warn
¢¢, 0
,
¢¢0 1 
exceptNumberFormat
¢¢2 D
,
¢¢D E
$str
¢¢F `
+
¢¢a b
data
¢¢c g
)
¢¢g h
;
¢¢h i
}
££ 
}
¤¤ 	
}
¥¥ 
private
¨¨ 
void
¨¨ 
GoodB2G1
¨¨ 
(
¨¨ 
)
¨¨ 
{
©© 
string
ªª 
data
ªª 
;
ªª 
if
«« 

(
««  
PrivateReturnsTrue
«« 
(
«« 
)
««  
)
««  !
{
¬¬ 	
data
­­ 
=
­­ 
$str
­­ 
;
­­ 
{
¯¯ 
TcpListener
°° 
listener
°° $
=
°°% &
null
°°' +
;
°°+ ,
try
±± 
{
²² 
listener
³³ 
=
³³ 
new
³³ "
TcpListener
³³# .
(
³³. /
	IPAddress
³³/ 8
.
³³8 9
Parse
³³9 >
(
³³> ?
$str
³³? K
)
³³K L
,
³³L M
$num
³³N S
)
³³S T
;
³³T U
listener
´´ 
.
´´ 
Start
´´ "
(
´´" #
)
´´# $
;
´´$ %
using
µµ 
(
µµ 
	TcpClient
µµ $
tcpConn
µµ% ,
=
µµ- .
listener
µµ/ 7
.
µµ7 8
AcceptTcpClient
µµ8 G
(
µµG H
)
µµH I
)
µµI J
{
¶¶ 
using
¸¸ 
(
¸¸ 
StreamReader
¸¸ +
sr
¸¸, .
=
¸¸/ 0
new
¸¸1 4
StreamReader
¸¸5 A
(
¸¸A B
tcpConn
¸¸B I
.
¸¸I J
	GetStream
¸¸J S
(
¸¸S T
)
¸¸T U
)
¸¸U V
)
¸¸V W
{
¹¹ 
data
»»  
=
»»! "
sr
»»# %
.
»»% &
ReadLine
»»& .
(
»». /
)
»»/ 0
;
»»0 1
}
¼¼ 
}
½½ 
}
¾¾ 
catch
¿¿ 
(
¿¿ 
IOException
¿¿ "
exceptIO
¿¿# +
)
¿¿+ ,
{
ÀÀ 
IO
ÁÁ 
.
ÁÁ 
Logger
ÁÁ 
.
ÁÁ 
Log
ÁÁ !
(
ÁÁ! "
NLog
ÁÁ" &
.
ÁÁ& '
LogLevel
ÁÁ' /
.
ÁÁ/ 0
Warn
ÁÁ0 4
,
ÁÁ4 5
exceptIO
ÁÁ6 >
,
ÁÁ> ?
$str
ÁÁ@ [
)
ÁÁ[ \
;
ÁÁ\ ]
}
ÂÂ 
finally
ÃÃ 
{
ÄÄ 
if
ÅÅ 
(
ÅÅ 
listener
ÅÅ  
!=
ÅÅ! #
null
ÅÅ$ (
)
ÅÅ( )
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
listener
ÉÉ $
.
ÉÉ$ %
Stop
ÉÉ% )
(
ÉÉ) *
)
ÉÉ* +
;
ÉÉ+ ,
}
ÊÊ 
catch
ËË 
(
ËË 
SocketException
ËË -
se
ËË. 0
)
ËË0 1
{
ÌÌ 
IO
ÍÍ 
.
ÍÍ 
Logger
ÍÍ %
.
ÍÍ% &
Log
ÍÍ& )
(
ÍÍ) *
NLog
ÍÍ* .
.
ÍÍ. /
LogLevel
ÍÍ/ 7
.
ÍÍ7 8
Warn
ÍÍ8 <
,
ÍÍ< =
se
ÍÍ> @
,
ÍÍ@ A
$str
ÍÍB ]
)
ÍÍ] ^
;
ÍÍ^ _
}
ÎÎ 
}
ÏÏ 
}
ÐÐ 
}
ÑÑ 
}
ÒÒ 	
else
ÓÓ 
{
ÔÔ 	
data
×× 
=
×× 
null
×× 
;
×× 
}
ØØ 	
if
ÙÙ 

(
ÙÙ !
PrivateReturnsFalse
ÙÙ 
(
ÙÙ  
)
ÙÙ  !
)
ÙÙ! "
{
ÚÚ 	
IO
ÜÜ 
.
ÜÜ 
	WriteLine
ÜÜ 
(
ÜÜ 
$str
ÜÜ /
)
ÜÜ/ 0
;
ÜÜ0 1
}
ÝÝ 	
else
ÞÞ 
{
ßß 	
try
àà 
{
áá 
int
ââ 
value
ââ 
=
ââ 
int
ââ 
.
ââ  
Parse
ââ  %
(
ââ% &
data
ââ& *
)
ââ* +
;
ââ+ ,
}
ãã 
catch
ää 
(
ää 
FormatException
ää " 
exceptNumberFormat
ää# 5
)
ää5 6
{
åå 
IO
çç 
.
çç 
Logger
çç 
.
çç 
Log
çç 
(
çç 
NLog
çç "
.
çç" #
LogLevel
çç# +
.
çç+ ,
Warn
çç, 0
,
çç0 1 
exceptNumberFormat
çç2 D
,
ççD E
$str
ççF j
+
ççk l 
exceptNumberFormat
ççm 
)çç 
;çç 
}
èè 
}
éé 	
}
êê 
private
íí 
void
íí 
GoodB2G2
íí 
(
íí 
)
íí 
{
îî 
string
ïï 
data
ïï 
;
ïï 
if
ðð 

(
ðð  
PrivateReturnsTrue
ðð 
(
ðð 
)
ðð  
)
ðð  !
{
ññ 	
data
òò 
=
òò 
$str
òò 
;
òò 
{
ôô 
TcpListener
õõ 
listener
õõ $
=
õõ% &
null
õõ' +
;
õõ+ ,
try
öö 
{
÷÷ 
listener
øø 
=
øø 
new
øø "
TcpListener
øø# .
(
øø. /
	IPAddress
øø/ 8
.
øø8 9
Parse
øø9 >
(
øø> ?
$str
øø? K
)
øøK L
,
øøL M
$num
øøN S
)
øøS T
;
øøT U
listener
ùù 
.
ùù 
Start
ùù "
(
ùù" #
)
ùù# $
;
ùù$ %
using
úú 
(
úú 
	TcpClient
úú $
tcpConn
úú% ,
=
úú- .
listener
úú/ 7
.
úú7 8
AcceptTcpClient
úú8 G
(
úúG H
)
úúH I
)
úúI J
{
ûû 
using
ýý 
(
ýý 
StreamReader
ýý +
sr
ýý, .
=
ýý/ 0
new
ýý1 4
StreamReader
ýý5 A
(
ýýA B
tcpConn
ýýB I
.
ýýI J
	GetStream
ýýJ S
(
ýýS T
)
ýýT U
)
ýýU V
)
ýýV W
{
þþ 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
finally
 
{
 
if
 
(
 
listener
  
!=
! #
null
$ (
)
( )
{
 
try
 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
try
   
{
¡¡ 
int
¢¢ 
value
¢¢ 
=
¢¢ 
int
¢¢ 
.
¢¢  
Parse
¢¢  %
(
¢¢% &
data
¢¢& *
)
¢¢* +
;
¢¢+ ,
}
££ 
catch
¤¤ 
(
¤¤ 
FormatException
¤¤ " 
exceptNumberFormat
¤¤# 5
)
¤¤5 6
{
¥¥ 
IO
§§ 
.
§§ 
Logger
§§ 
.
§§ 
Log
§§ 
(
§§ 
NLog
§§ "
.
§§" #
LogLevel
§§# +
.
§§+ ,
Warn
§§, 0
,
§§0 1 
exceptNumberFormat
§§2 D
,
§§D E
$str
§§F j
+
§§k l 
exceptNumberFormat
§§m 
)§§ 
;§§ 
}
¨¨ 
}
©© 	
}
ªª 
public
¬¬ 

override
¬¬ 
void
¬¬ 
Good
¬¬ 
(
¬¬ 
)
¬¬ 
{
­­ 
GoodG2B1
®® 
(
®® 
)
®® 
;
®® 
GoodG2B2
¯¯ 
(
¯¯ 
)
¯¯ 
;
¯¯ 
GoodB2G1
°° 
(
°° 
)
°° 
;
°° 
GoodB2G2
±± 
(
±± 
)
±± 
;
±± 
}
²² 
}´´ 
}µµ É{
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_09.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_09 C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
if## 

(## 
IO## 
.##  
STATIC_READONLY_TRUE## #
)### $
{$$ 	
data%% 
=%% 
$str%% 
;%% 
{'' 
TcpListener(( 
listener(( $
=((% &
null((' +
;((+ ,
try)) 
{** 
listener++ 
=++ 
new++ "
TcpListener++# .
(++. /
	IPAddress++/ 8
.++8 9
Parse++9 >
(++> ?
$str++? K
)++K L
,++L M
$num++N S
)++S T
;++T U
listener,, 
.,, 
Start,, "
(,," #
),,# $
;,,$ %
using-- 
(-- 
	TcpClient-- $
tcpConn--% ,
=--- .
listener--/ 7
.--7 8
AcceptTcpClient--8 G
(--G H
)--H I
)--I J
{.. 
using00 
(00 
StreamReader00 +
sr00, .
=00/ 0
new001 4
StreamReader005 A
(00A B
tcpConn00B I
.00I J
	GetStream00J S
(00S T
)00T U
)00U V
)00V W
{11 
data33  
=33! "
sr33# %
.33% &
ReadLine33& .
(33. /
)33/ 0
;330 1
}44 
}55 
}66 
catch77 
(77 
IOException77 "
exceptIO77# +
)77+ ,
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptIO996 >
,99> ?
$str99@ [
)99[ \
;99\ ]
}:: 
finally;; 
{<< 
if== 
(== 
listener==  
!===! #
null==$ (
)==( )
{>> 
try?? 
{@@ 
listenerAA $
.AA$ %
StopAA% )
(AA) *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
SocketExceptionCC -
seCC. 0
)CC0 1
{DD 
IOEE 
.EE 
LoggerEE %
.EE% &
LogEE& )
(EE) *
NLogEE* .
.EE. /
LogLevelEE/ 7
.EE7 8
WarnEE8 <
,EE< =
seEE> @
,EE@ A
$strEEB ]
)EE] ^
;EE^ _
}FF 
}GG 
}HH 
}II 
}JJ 	
elseKK 
{LL 	
dataOO 
=OO 
nullOO 
;OO 
}PP 	
ifQQ 

(QQ 
IOQQ 
.QQ  
STATIC_READONLY_TRUEQQ #
)QQ# $
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
privateaa 
voidaa 
GoodG2B1aa 
(aa 
)aa 
{bb 
stringcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd !
STATIC_READONLY_FALSEdd $
)dd$ %
{ee 	
datahh 
=hh 
nullhh 
;hh 
}ii 	
elsejj 
{kk 	
datamm 
=mm 
$strmm 
;mm 
}nn 	
ifoo 

(oo 
IOoo 
.oo  
STATIC_READONLY_TRUEoo #
)oo# $
{pp 	
tryqq 
{rr 
intss 
valuess 
=ss 
intss 
.ss  
Parsess  %
(ss% &
datass& *
)ss* +
;ss+ ,
}tt 
catchuu 
(uu 
FormatExceptionuu "
exceptNumberFormatuu# 5
)uu5 6
{vv 
IOxx 
.xx 
Loggerxx 
.xx 
Logxx 
(xx 
NLogxx "
.xx" #
LogLevelxx# +
.xx+ ,
Warnxx, 0
,xx0 1
exceptNumberFormatxx2 D
,xxD E
$strxxF `
+xxa b
dataxxc g
)xxg h
;xxh i
}yy 
}zz 	
}{{ 
private~~ 
void~~ 
GoodG2B2~~ 
(~~ 
)~~ 
{ 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
data
   
=
   
$str
   
;
   
{
¢¢ 
TcpListener
££ 
listener
££ $
=
££% &
null
££' +
;
££+ ,
try
¤¤ 
{
¥¥ 
listener
¦¦ 
=
¦¦ 
new
¦¦ "
TcpListener
¦¦# .
(
¦¦. /
	IPAddress
¦¦/ 8
.
¦¦8 9
Parse
¦¦9 >
(
¦¦> ?
$str
¦¦? K
)
¦¦K L
,
¦¦L M
$num
¦¦N S
)
¦¦S T
;
¦¦T U
listener
§§ 
.
§§ 
Start
§§ "
(
§§" #
)
§§# $
;
§§$ %
using
¨¨ 
(
¨¨ 
	TcpClient
¨¨ $
tcpConn
¨¨% ,
=
¨¨- .
listener
¨¨/ 7
.
¨¨7 8
AcceptTcpClient
¨¨8 G
(
¨¨G H
)
¨¨H I
)
¨¨I J
{
©© 
using
«« 
(
«« 
StreamReader
«« +
sr
««, .
=
««/ 0
new
««1 4
StreamReader
««5 A
(
««A B
tcpConn
««B I
.
««I J
	GetStream
««J S
(
««S T
)
««T U
)
««U V
)
««V W
{
¬¬ 
data
®®  
=
®®! "
sr
®®# %
.
®®% &
ReadLine
®®& .
(
®®. /
)
®®/ 0
;
®®0 1
}
¯¯ 
}
°° 
}
±± 
catch
²² 
(
²² 
IOException
²² "
exceptIO
²²# +
)
²²+ ,
{
³³ 
IO
´´ 
.
´´ 
Logger
´´ 
.
´´ 
Log
´´ !
(
´´! "
NLog
´´" &
.
´´& '
LogLevel
´´' /
.
´´/ 0
Warn
´´0 4
,
´´4 5
exceptIO
´´6 >
,
´´> ?
$str
´´@ [
)
´´[ \
;
´´\ ]
}
µµ 
finally
¶¶ 
{
·· 
if
¸¸ 
(
¸¸ 
listener
¸¸  
!=
¸¸! #
null
¸¸$ (
)
¸¸( )
{
¹¹ 
try
ºº 
{
»» 
listener
¼¼ $
.
¼¼$ %
Stop
¼¼% )
(
¼¼) *
)
¼¼* +
;
¼¼+ ,
}
½½ 
catch
¾¾ 
(
¾¾ 
SocketException
¾¾ -
se
¾¾. 0
)
¾¾0 1
{
¿¿ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ %
.
ÀÀ% &
Log
ÀÀ& )
(
ÀÀ) *
NLog
ÀÀ* .
.
ÀÀ. /
LogLevel
ÀÀ/ 7
.
ÀÀ7 8
Warn
ÀÀ8 <
,
ÀÀ< =
se
ÀÀ> @
,
ÀÀ@ A
$str
ÀÀB ]
)
ÀÀ] ^
;
ÀÀ^ _
}
ÁÁ 
}
ÂÂ 
}
ÃÃ 
}
ÄÄ 
}
ÅÅ 	
else
ÆÆ 
{
ÇÇ 	
data
ÊÊ 
=
ÊÊ 
null
ÊÊ 
;
ÊÊ 
}
ËË 	
if
ÌÌ 

(
ÌÌ 
IO
ÌÌ 
.
ÌÌ #
STATIC_READONLY_FALSE
ÌÌ $
)
ÌÌ$ %
{
ÍÍ 	
IO
ÏÏ 
.
ÏÏ 
	WriteLine
ÏÏ 
(
ÏÏ 
$str
ÏÏ /
)
ÏÏ/ 0
;
ÏÏ0 1
}
ÐÐ 	
else
ÑÑ 
{
ÒÒ 	
try
ÓÓ 
{
ÔÔ 
int
ÕÕ 
value
ÕÕ 
=
ÕÕ 
int
ÕÕ 
.
ÕÕ  
Parse
ÕÕ  %
(
ÕÕ% &
data
ÕÕ& *
)
ÕÕ* +
;
ÕÕ+ ,
}
ÖÖ 
catch
×× 
(
×× 
FormatException
×× " 
exceptNumberFormat
××# 5
)
××5 6
{
ØØ 
IO
ÚÚ 
.
ÚÚ 
Logger
ÚÚ 
.
ÚÚ 
Log
ÚÚ 
(
ÚÚ 
NLog
ÚÚ "
.
ÚÚ" #
LogLevel
ÚÚ# +
.
ÚÚ+ ,
Warn
ÚÚ, 0
,
ÚÚ0 1 
exceptNumberFormat
ÚÚ2 D
,
ÚÚD E
$str
ÚÚF j
+
ÚÚk l 
exceptNumberFormat
ÚÚm 
)ÚÚ 
;ÚÚ 
}
ÛÛ 
}
ÜÜ 	
}
ÝÝ 
private
àà 
void
àà 
GoodB2G2
àà 
(
àà 
)
àà 
{
áá 
string
ââ 
data
ââ 
;
ââ 
if
ãã 

(
ãã 
IO
ãã 
.
ãã "
STATIC_READONLY_TRUE
ãã #
)
ãã# $
{
ää 	
data
åå 
=
åå 
$str
åå 
;
åå 
{
çç 
TcpListener
èè 
listener
èè $
=
èè% &
null
èè' +
;
èè+ ,
try
éé 
{
êê 
listener
ëë 
=
ëë 
new
ëë "
TcpListener
ëë# .
(
ëë. /
	IPAddress
ëë/ 8
.
ëë8 9
Parse
ëë9 >
(
ëë> ?
$str
ëë? K
)
ëëK L
,
ëëL M
$num
ëëN S
)
ëëS T
;
ëëT U
listener
ìì 
.
ìì 
Start
ìì "
(
ìì" #
)
ìì# $
;
ìì$ %
using
íí 
(
íí 
	TcpClient
íí $
tcpConn
íí% ,
=
íí- .
listener
íí/ 7
.
íí7 8
AcceptTcpClient
íí8 G
(
ííG H
)
ííH I
)
ííI J
{
îî 
using
ðð 
(
ðð 
StreamReader
ðð +
sr
ðð, .
=
ðð/ 0
new
ðð1 4
StreamReader
ðð5 A
(
ððA B
tcpConn
ððB I
.
ððI J
	GetStream
ððJ S
(
ððS T
)
ððT U
)
ððU V
)
ððV W
{
ññ 
data
óó  
=
óó! "
sr
óó# %
.
óó% &
ReadLine
óó& .
(
óó. /
)
óó/ 0
;
óó0 1
}
ôô 
}
õõ 
}
öö 
catch
÷÷ 
(
÷÷ 
IOException
÷÷ "
exceptIO
÷÷# +
)
÷÷+ ,
{
øø 
IO
ùù 
.
ùù 
Logger
ùù 
.
ùù 
Log
ùù !
(
ùù! "
NLog
ùù" &
.
ùù& '
LogLevel
ùù' /
.
ùù/ 0
Warn
ùù0 4
,
ùù4 5
exceptIO
ùù6 >
,
ùù> ?
$str
ùù@ [
)
ùù[ \
;
ùù\ ]
}
úú 
finally
ûû 
{
üü 
if
ýý 
(
ýý 
listener
ýý  
!=
ýý! #
null
ýý$ (
)
ýý( )
{
þþ 
try
ÿÿ 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
   
GoodG2B1
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
GoodG2B2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodB2G1
££ 
(
££ 
)
££ 
;
££ 
GoodB2G2
¤¤ 
(
¤¤ 
)
¤¤ 
;
¤¤ 
}
¥¥ 
}§§ 
}¨¨ åz
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_10.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_10 C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
if## 

(## 
IO## 
.## 

staticTrue## 
)## 
{$$ 	
data%% 
=%% 
$str%% 
;%% 
{'' 
TcpListener(( 
listener(( $
=((% &
null((' +
;((+ ,
try)) 
{** 
listener++ 
=++ 
new++ "
TcpListener++# .
(++. /
	IPAddress++/ 8
.++8 9
Parse++9 >
(++> ?
$str++? K
)++K L
,++L M
$num++N S
)++S T
;++T U
listener,, 
.,, 
Start,, "
(,," #
),,# $
;,,$ %
using-- 
(-- 
	TcpClient-- $
tcpConn--% ,
=--- .
listener--/ 7
.--7 8
AcceptTcpClient--8 G
(--G H
)--H I
)--I J
{.. 
using00 
(00 
StreamReader00 +
sr00, .
=00/ 0
new001 4
StreamReader005 A
(00A B
tcpConn00B I
.00I J
	GetStream00J S
(00S T
)00T U
)00U V
)00V W
{11 
data33  
=33! "
sr33# %
.33% &
ReadLine33& .
(33. /
)33/ 0
;330 1
}44 
}55 
}66 
catch77 
(77 
IOException77 "
exceptIO77# +
)77+ ,
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptIO996 >
,99> ?
$str99@ [
)99[ \
;99\ ]
}:: 
finally;; 
{<< 
if== 
(== 
listener==  
!===! #
null==$ (
)==( )
{>> 
try?? 
{@@ 
listenerAA $
.AA$ %
StopAA% )
(AA) *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
SocketExceptionCC -
seCC. 0
)CC0 1
{DD 
IOEE 
.EE 
LoggerEE %
.EE% &
LogEE& )
(EE) *
NLogEE* .
.EE. /
LogLevelEE/ 7
.EE7 8
WarnEE8 <
,EE< =
seEE> @
,EE@ A
$strEEB ]
)EE] ^
;EE^ _
}FF 
}GG 
}HH 
}II 
}JJ 	
elseKK 
{LL 	
dataOO 
=OO 
nullOO 
;OO 
}PP 	
ifQQ 

(QQ 
IOQQ 
.QQ 

staticTrueQQ 
)QQ 
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
privateaa 
voidaa 
GoodG2B1aa 
(aa 
)aa 
{bb 
stringcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd 
staticFalsedd 
)dd 
{ee 	
datahh 
=hh 
nullhh 
;hh 
}ii 	
elsejj 
{kk 	
datamm 
=mm 
$strmm 
;mm 
}nn 	
ifoo 

(oo 
IOoo 
.oo 

staticTrueoo 
)oo 
{pp 	
tryqq 
{rr 
intss 
valuess 
=ss 
intss 
.ss  
Parsess  %
(ss% &
datass& *
)ss* +
;ss+ ,
}tt 
catchuu 
(uu 
FormatExceptionuu "
exceptNumberFormatuu# 5
)uu5 6
{vv 
IOxx 
.xx 
Loggerxx 
.xx 
Logxx 
(xx 
NLogxx "
.xx" #
LogLevelxx# +
.xx+ ,
Warnxx, 0
,xx0 1
exceptNumberFormatxx2 D
,xxD E
$strxxF `
+xxa b
dataxxc g
)xxg h
;xxh i
}yy 
}zz 	
}{{ 
private~~ 
void~~ 
GoodG2B2~~ 
(~~ 
)~~ 
{ 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
data
   
=
   
$str
   
;
   
{
¢¢ 
TcpListener
££ 
listener
££ $
=
££% &
null
££' +
;
££+ ,
try
¤¤ 
{
¥¥ 
listener
¦¦ 
=
¦¦ 
new
¦¦ "
TcpListener
¦¦# .
(
¦¦. /
	IPAddress
¦¦/ 8
.
¦¦8 9
Parse
¦¦9 >
(
¦¦> ?
$str
¦¦? K
)
¦¦K L
,
¦¦L M
$num
¦¦N S
)
¦¦S T
;
¦¦T U
listener
§§ 
.
§§ 
Start
§§ "
(
§§" #
)
§§# $
;
§§$ %
using
¨¨ 
(
¨¨ 
	TcpClient
¨¨ $
tcpConn
¨¨% ,
=
¨¨- .
listener
¨¨/ 7
.
¨¨7 8
AcceptTcpClient
¨¨8 G
(
¨¨G H
)
¨¨H I
)
¨¨I J
{
©© 
using
«« 
(
«« 
StreamReader
«« +
sr
««, .
=
««/ 0
new
««1 4
StreamReader
««5 A
(
««A B
tcpConn
««B I
.
««I J
	GetStream
««J S
(
««S T
)
««T U
)
««U V
)
««V W
{
¬¬ 
data
®®  
=
®®! "
sr
®®# %
.
®®% &
ReadLine
®®& .
(
®®. /
)
®®/ 0
;
®®0 1
}
¯¯ 
}
°° 
}
±± 
catch
²² 
(
²² 
IOException
²² "
exceptIO
²²# +
)
²²+ ,
{
³³ 
IO
´´ 
.
´´ 
Logger
´´ 
.
´´ 
Log
´´ !
(
´´! "
NLog
´´" &
.
´´& '
LogLevel
´´' /
.
´´/ 0
Warn
´´0 4
,
´´4 5
exceptIO
´´6 >
,
´´> ?
$str
´´@ [
)
´´[ \
;
´´\ ]
}
µµ 
finally
¶¶ 
{
·· 
if
¸¸ 
(
¸¸ 
listener
¸¸  
!=
¸¸! #
null
¸¸$ (
)
¸¸( )
{
¹¹ 
try
ºº 
{
»» 
listener
¼¼ $
.
¼¼$ %
Stop
¼¼% )
(
¼¼) *
)
¼¼* +
;
¼¼+ ,
}
½½ 
catch
¾¾ 
(
¾¾ 
SocketException
¾¾ -
se
¾¾. 0
)
¾¾0 1
{
¿¿ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ %
.
ÀÀ% &
Log
ÀÀ& )
(
ÀÀ) *
NLog
ÀÀ* .
.
ÀÀ. /
LogLevel
ÀÀ/ 7
.
ÀÀ7 8
Warn
ÀÀ8 <
,
ÀÀ< =
se
ÀÀ> @
,
ÀÀ@ A
$str
ÀÀB ]
)
ÀÀ] ^
;
ÀÀ^ _
}
ÁÁ 
}
ÂÂ 
}
ÃÃ 
}
ÄÄ 
}
ÅÅ 	
else
ÆÆ 
{
ÇÇ 	
data
ÊÊ 
=
ÊÊ 
null
ÊÊ 
;
ÊÊ 
}
ËË 	
if
ÌÌ 

(
ÌÌ 
IO
ÌÌ 
.
ÌÌ 
staticFalse
ÌÌ 
)
ÌÌ 
{
ÍÍ 	
IO
ÏÏ 
.
ÏÏ 
	WriteLine
ÏÏ 
(
ÏÏ 
$str
ÏÏ /
)
ÏÏ/ 0
;
ÏÏ0 1
}
ÐÐ 	
else
ÑÑ 
{
ÒÒ 	
try
ÓÓ 
{
ÔÔ 
int
ÕÕ 
value
ÕÕ 
=
ÕÕ 
int
ÕÕ 
.
ÕÕ  
Parse
ÕÕ  %
(
ÕÕ% &
data
ÕÕ& *
)
ÕÕ* +
;
ÕÕ+ ,
}
ÖÖ 
catch
×× 
(
×× 
FormatException
×× " 
exceptNumberFormat
××# 5
)
××5 6
{
ØØ 
IO
ÚÚ 
.
ÚÚ 
Logger
ÚÚ 
.
ÚÚ 
Log
ÚÚ 
(
ÚÚ 
NLog
ÚÚ "
.
ÚÚ" #
LogLevel
ÚÚ# +
.
ÚÚ+ ,
Warn
ÚÚ, 0
,
ÚÚ0 1 
exceptNumberFormat
ÚÚ2 D
,
ÚÚD E
$str
ÚÚF j
+
ÚÚk l 
exceptNumberFormat
ÚÚm 
)ÚÚ 
;ÚÚ 
}
ÛÛ 
}
ÜÜ 	
}
ÝÝ 
private
àà 
void
àà 
GoodB2G2
àà 
(
àà 
)
àà 
{
áá 
string
ââ 
data
ââ 
;
ââ 
if
ãã 

(
ãã 
IO
ãã 
.
ãã 

staticTrue
ãã 
)
ãã 
{
ää 	
data
åå 
=
åå 
$str
åå 
;
åå 
{
çç 
TcpListener
èè 
listener
èè $
=
èè% &
null
èè' +
;
èè+ ,
try
éé 
{
êê 
listener
ëë 
=
ëë 
new
ëë "
TcpListener
ëë# .
(
ëë. /
	IPAddress
ëë/ 8
.
ëë8 9
Parse
ëë9 >
(
ëë> ?
$str
ëë? K
)
ëëK L
,
ëëL M
$num
ëëN S
)
ëëS T
;
ëëT U
listener
ìì 
.
ìì 
Start
ìì "
(
ìì" #
)
ìì# $
;
ìì$ %
using
íí 
(
íí 
	TcpClient
íí $
tcpConn
íí% ,
=
íí- .
listener
íí/ 7
.
íí7 8
AcceptTcpClient
íí8 G
(
ííG H
)
ííH I
)
ííI J
{
îî 
using
ðð 
(
ðð 
StreamReader
ðð +
sr
ðð, .
=
ðð/ 0
new
ðð1 4
StreamReader
ðð5 A
(
ððA B
tcpConn
ððB I
.
ððI J
	GetStream
ððJ S
(
ððS T
)
ððT U
)
ððU V
)
ððV W
{
ññ 
data
óó  
=
óó! "
sr
óó# %
.
óó% &
ReadLine
óó& .
(
óó. /
)
óó/ 0
;
óó0 1
}
ôô 
}
õõ 
}
öö 
catch
÷÷ 
(
÷÷ 
IOException
÷÷ "
exceptIO
÷÷# +
)
÷÷+ ,
{
øø 
IO
ùù 
.
ùù 
Logger
ùù 
.
ùù 
Log
ùù !
(
ùù! "
NLog
ùù" &
.
ùù& '
LogLevel
ùù' /
.
ùù/ 0
Warn
ùù0 4
,
ùù4 5
exceptIO
ùù6 >
,
ùù> ?
$str
ùù@ [
)
ùù[ \
;
ùù\ ]
}
úú 
finally
ûû 
{
üü 
if
ýý 
(
ýý 
listener
ýý  
!=
ýý! #
null
ýý$ (
)
ýý( )
{
þþ 
try
ÿÿ 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
   
GoodG2B1
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
GoodG2B2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodB2G1
££ 
(
££ 
)
££ 
;
££ 
GoodB2G2
¤¤ 
(
¤¤ 
)
¤¤ 
;
¤¤ 
}
¥¥ 
}§§ 
}¨¨ ï}
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_11.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_11 C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
if## 

(## 
IO## 
.## 
StaticReturnsTrue##  
(##  !
)##! "
)##" #
{$$ 	
data%% 
=%% 
$str%% 
;%% 
{'' 
TcpListener(( 
listener(( $
=((% &
null((' +
;((+ ,
try)) 
{** 
listener++ 
=++ 
new++ "
TcpListener++# .
(++. /
	IPAddress++/ 8
.++8 9
Parse++9 >
(++> ?
$str++? K
)++K L
,++L M
$num++N S
)++S T
;++T U
listener,, 
.,, 
Start,, "
(,," #
),,# $
;,,$ %
using-- 
(-- 
	TcpClient-- $
tcpConn--% ,
=--- .
listener--/ 7
.--7 8
AcceptTcpClient--8 G
(--G H
)--H I
)--I J
{.. 
using00 
(00 
StreamReader00 +
sr00, .
=00/ 0
new001 4
StreamReader005 A
(00A B
tcpConn00B I
.00I J
	GetStream00J S
(00S T
)00T U
)00U V
)00V W
{11 
data33  
=33! "
sr33# %
.33% &
ReadLine33& .
(33. /
)33/ 0
;330 1
}44 
}55 
}66 
catch77 
(77 
IOException77 "
exceptIO77# +
)77+ ,
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptIO996 >
,99> ?
$str99@ [
)99[ \
;99\ ]
}:: 
finally;; 
{<< 
if== 
(== 
listener==  
!===! #
null==$ (
)==( )
{>> 
try?? 
{@@ 
listenerAA $
.AA$ %
StopAA% )
(AA) *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
SocketExceptionCC -
seCC. 0
)CC0 1
{DD 
IOEE 
.EE 
LoggerEE %
.EE% &
LogEE& )
(EE) *
NLogEE* .
.EE. /
LogLevelEE/ 7
.EE7 8
WarnEE8 <
,EE< =
seEE> @
,EE@ A
$strEEB ]
)EE] ^
;EE^ _
}FF 
}GG 
}HH 
}II 
}JJ 	
elseKK 
{LL 	
dataOO 
=OO 
nullOO 
;OO 
}PP 	
ifQQ 

(QQ
 
IOQQ 
.QQ 
StaticReturnsTrueQQ 
(QQ  
)QQ  !
)QQ! "
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
privateaa 
voidaa 
GoodG2B1aa 
(aa 
)aa 
{bb 
stringcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd 
StaticReturnsFalsedd !
(dd! "
)dd" #
)dd# $
{ee 	
datahh 
=hh 
nullhh 
;hh 
}ii 	
elsejj 
{kk 	
datamm 
=mm 
$strmm 
;mm 
}nn 	
ifoo 

(oo 
IOoo 
.oo 
StaticReturnsTrueoo  
(oo  !
)oo! "
)oo" #
{pp 	
tryqq 
{rr 
intss 
valuess 
=ss 
intss 
.ss  
Parsess  %
(ss% &
datass& *
)ss* +
;ss+ ,
}tt 
catchuu 
(uu 
FormatExceptionuu "
exceptNumberFormatuu# 5
)uu5 6
{vv 
IOxx 
.xx 
Loggerxx 
.xx 
Logxx 
(xx 
NLogxx "
.xx" #
LogLevelxx# +
.xx+ ,
Warnxx, 0
,xx0 1
exceptNumberFormatxx2 D
,xxD E
$strxxF `
+xxa b
dataxxc g
)xxg h
;xxh i
}yy 
}zz 	
}{{ 
private~~ 
void~~ 
GoodG2B2~~ 
(~~ 
)~~ 
{ 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
data
   
=
   
$str
   
;
   
{
¢¢ 
TcpListener
££ 
listener
££ $
=
££% &
null
££' +
;
££+ ,
try
¤¤ 
{
¥¥ 
listener
¦¦ 
=
¦¦ 
new
¦¦ "
TcpListener
¦¦# .
(
¦¦. /
	IPAddress
¦¦/ 8
.
¦¦8 9
Parse
¦¦9 >
(
¦¦> ?
$str
¦¦? K
)
¦¦K L
,
¦¦L M
$num
¦¦N S
)
¦¦S T
;
¦¦T U
listener
§§ 
.
§§ 
Start
§§ "
(
§§" #
)
§§# $
;
§§$ %
using
¨¨ 
(
¨¨ 
	TcpClient
¨¨ $
tcpConn
¨¨% ,
=
¨¨- .
listener
¨¨/ 7
.
¨¨7 8
AcceptTcpClient
¨¨8 G
(
¨¨G H
)
¨¨H I
)
¨¨I J
{
©© 
using
«« 
(
«« 
StreamReader
«« +
sr
««, .
=
««/ 0
new
««1 4
StreamReader
««5 A
(
««A B
tcpConn
««B I
.
««I J
	GetStream
««J S
(
««S T
)
««T U
)
««U V
)
««V W
{
¬¬ 
data
®®  
=
®®! "
sr
®®# %
.
®®% &
ReadLine
®®& .
(
®®. /
)
®®/ 0
;
®®0 1
}
¯¯ 
}
°° 
}
±± 
catch
²² 
(
²² 
IOException
²² "
exceptIO
²²# +
)
²²+ ,
{
³³ 
IO
´´ 
.
´´ 
Logger
´´ 
.
´´ 
Log
´´ !
(
´´! "
NLog
´´" &
.
´´& '
LogLevel
´´' /
.
´´/ 0
Warn
´´0 4
,
´´4 5
exceptIO
´´6 >
,
´´> ?
$str
´´@ [
)
´´[ \
;
´´\ ]
}
µµ 
finally
¶¶ 
{
·· 
if
¸¸ 
(
¸¸ 
listener
¸¸  
!=
¸¸! #
null
¸¸$ (
)
¸¸( )
{
¹¹ 
try
ºº 
{
»» 
listener
¼¼ $
.
¼¼$ %
Stop
¼¼% )
(
¼¼) *
)
¼¼* +
;
¼¼+ ,
}
½½ 
catch
¾¾ 
(
¾¾ 
SocketException
¾¾ -
se
¾¾. 0
)
¾¾0 1
{
¿¿ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ %
.
ÀÀ% &
Log
ÀÀ& )
(
ÀÀ) *
NLog
ÀÀ* .
.
ÀÀ. /
LogLevel
ÀÀ/ 7
.
ÀÀ7 8
Warn
ÀÀ8 <
,
ÀÀ< =
se
ÀÀ> @
,
ÀÀ@ A
$str
ÀÀB ]
)
ÀÀ] ^
;
ÀÀ^ _
}
ÁÁ 
}
ÂÂ 
}
ÃÃ 
}
ÄÄ 
}
ÅÅ 	
else
ÆÆ 
{
ÇÇ 	
data
ÊÊ 
=
ÊÊ 
null
ÊÊ 
;
ÊÊ 
}
ËË 	
if
ÌÌ 

(
ÌÌ 
IO
ÌÌ 
.
ÌÌ  
StaticReturnsFalse
ÌÌ !
(
ÌÌ! "
)
ÌÌ" #
)
ÌÌ# $
{
ÍÍ 	
IO
ÏÏ 
.
ÏÏ 
	WriteLine
ÏÏ 
(
ÏÏ 
$str
ÏÏ /
)
ÏÏ/ 0
;
ÏÏ0 1
}
ÐÐ 	
else
ÑÑ 
{
ÒÒ 	
try
ÓÓ 
{
ÔÔ 
int
ÕÕ 
value
ÕÕ 
=
ÕÕ 
int
ÕÕ 
.
ÕÕ  
Parse
ÕÕ  %
(
ÕÕ% &
data
ÕÕ& *
)
ÕÕ* +
;
ÕÕ+ ,
}
ÖÖ 
catch
×× 
(
×× 
FormatException
×× " 
exceptNumberFormat
××# 5
)
××5 6
{
ØØ 
IO
ÚÚ 
.
ÚÚ 
Logger
ÚÚ 
.
ÚÚ 
Log
ÚÚ 
(
ÚÚ 
NLog
ÚÚ "
.
ÚÚ" #
LogLevel
ÚÚ# +
.
ÚÚ+ ,
Warn
ÚÚ, 0
,
ÚÚ0 1 
exceptNumberFormat
ÚÚ2 D
,
ÚÚD E
$str
ÚÚF j
+
ÚÚk l 
exceptNumberFormat
ÚÚm 
)ÚÚ 
;ÚÚ 
}
ÛÛ 
}
ÜÜ 	
}
ÝÝ 
private
àà 
void
àà 
GoodB2G2
àà 
(
àà 
)
àà 
{
áá 
string
ââ 
data
ââ 
;
ââ 
if
ãã 

(
ãã 
IO
ãã 
.
ãã 
StaticReturnsTrue
ãã  
(
ãã  !
)
ãã! "
)
ãã" #
{
ää 	
data
åå 
=
åå 
$str
åå 
;
åå 
{
çç 
TcpListener
èè 
listener
èè $
=
èè% &
null
èè' +
;
èè+ ,
try
éé 
{
êê 
listener
ëë 
=
ëë 
new
ëë "
TcpListener
ëë# .
(
ëë. /
	IPAddress
ëë/ 8
.
ëë8 9
Parse
ëë9 >
(
ëë> ?
$str
ëë? K
)
ëëK L
,
ëëL M
$num
ëëN S
)
ëëS T
;
ëëT U
listener
ìì 
.
ìì 
Start
ìì "
(
ìì" #
)
ìì# $
;
ìì$ %
using
íí 
(
íí 
	TcpClient
íí $
tcpConn
íí% ,
=
íí- .
listener
íí/ 7
.
íí7 8
AcceptTcpClient
íí8 G
(
ííG H
)
ííH I
)
ííI J
{
îî 
using
ðð 
(
ðð 
StreamReader
ðð +
sr
ðð, .
=
ðð/ 0
new
ðð1 4
StreamReader
ðð5 A
(
ððA B
tcpConn
ððB I
.
ððI J
	GetStream
ððJ S
(
ððS T
)
ððT U
)
ððU V
)
ððV W
{
ññ 
data
óó  
=
óó! "
sr
óó# %
.
óó% &
ReadLine
óó& .
(
óó. /
)
óó/ 0
;
óó0 1
}
ôô 
}
õõ 
}
öö 
catch
÷÷ 
(
÷÷ 
IOException
÷÷ "
exceptIO
÷÷# +
)
÷÷+ ,
{
øø 
IO
ùù 
.
ùù 
Logger
ùù 
.
ùù 
Log
ùù !
(
ùù! "
NLog
ùù" &
.
ùù& '
LogLevel
ùù' /
.
ùù/ 0
Warn
ùù0 4
,
ùù4 5
exceptIO
ùù6 >
,
ùù> ?
$str
ùù@ [
)
ùù[ \
;
ùù\ ]
}
úú 
finally
ûû 
{
üü 
if
ýý 
(
ýý 
listener
ýý  
!=
ýý! #
null
ýý$ (
)
ýý( )
{
þþ 
try
ÿÿ 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
   
GoodG2B1
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
GoodG2B2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodB2G1
££ 
(
££ 
)
££ 
;
££ 
GoodB2G2
¤¤ 
(
¤¤ 
)
¤¤ 
;
¤¤ 
}
¥¥ 
}§§ 
}¨¨ Öv
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_12.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_12 C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
if## 

(##
 
IO## 
.## $
StaticReturnsTrueOrFalse## &
(##& '
)##' (
)##( )
{$$ 	
data%% 
=%% 
$str%% 
;%% 
{'' 
TcpListener(( 
listener(( $
=((% &
null((' +
;((+ ,
try)) 
{** 
listener++ 
=++ 
new++ "
TcpListener++# .
(++. /
	IPAddress++/ 8
.++8 9
Parse++9 >
(++> ?
$str++? K
)++K L
,++L M
$num++N S
)++S T
;++T U
listener,, 
.,, 
Start,, "
(,," #
),,# $
;,,$ %
using-- 
(-- 
	TcpClient-- $
tcpConn--% ,
=--- .
listener--/ 7
.--7 8
AcceptTcpClient--8 G
(--G H
)--H I
)--I J
{.. 
using00 
(00 
StreamReader00 +
sr00, .
=00/ 0
new001 4
StreamReader005 A
(00A B
tcpConn00B I
.00I J
	GetStream00J S
(00S T
)00T U
)00U V
)00V W
{11 
data33  
=33! "
sr33# %
.33% &
ReadLine33& .
(33. /
)33/ 0
;330 1
}44 
}55 
}66 
catch77 
(77 
IOException77 "
exceptIO77# +
)77+ ,
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptIO996 >
,99> ?
$str99@ [
)99[ \
;99\ ]
}:: 
finally;; 
{<< 
if== 
(== 
listener==  
!===! #
null==$ (
)==( )
{>> 
try?? 
{@@ 
listenerAA $
.AA$ %
StopAA% )
(AA) *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
SocketExceptionCC -
seCC. 0
)CC0 1
{DD 
IOEE 
.EE 
LoggerEE %
.EE% &
LogEE& )
(EE) *
NLogEE* .
.EE. /
LogLevelEE/ 7
.EE7 8
WarnEE8 <
,EE< =
seEE> @
,EE@ A
$strEEB ]
)EE] ^
;EE^ _
}FF 
}GG 
}HH 
}II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$strNN 
;NN 
}OO 	
ifPP 

(PP
 
IOPP 
.PP $
StaticReturnsTrueOrFalsePP &
(PP& '
)PP' (
)PP( )
{QQ 	
tryRR 
{SS 
intTT 
valueTT 
=TT 
intTT 
.TT  
ParseTT  %
(TT% &
dataTT& *
)TT* +
;TT+ ,
}UU 
catchVV 
(VV 
FormatExceptionVV "
exceptNumberFormatVV# 5
)VV5 6
{WW 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
exceptNumberFormatYY2 D
,YYD E
$strYYF `
+YYa b
dataYYc g
)YYg h
;YYh i
}ZZ 
}[[ 	
else\\ 
{]] 	
try^^ 
{__ 
int`` 
value`` 
=`` 
int`` 
.``  
Parse``  %
(``% &
data``& *
)``* +
;``+ ,
}aa 
catchbb 
(bb 
FormatExceptionbb "
exceptNumberFormatbb# 5
)bb5 6
{cc 
IOee 
.ee 
Loggeree 
.ee 
Logee 
(ee 
NLogee "
.ee" #
LogLevelee# +
.ee+ ,
Warnee, 0
,ee0 1
exceptNumberFormatee2 D
,eeD E
$streeF j
+eek l
exceptNumberFormateem 
)	ee 
;
ee 
}ff 
}gg 	
}hh 
privatemm 
voidmm 
GoodG2Bmm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp
 
IOpp 
.pp $
StaticReturnsTrueOrFalsepp &
(pp& '
)pp' (
)pp( )
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
dataxx 
=xx 
$strxx 
;xx 
}yy 	
ifzz 

(zz
 
IOzz 
.zz $
StaticReturnsTrueOrFalsezz &
(zz& '
)zz' (
)zz( )
{{{ 	
try|| 
{}} 
int~~ 
value~~ 
=~~ 
int~~ 
.~~  
Parse~~  %
(~~% &
data~~& *
)~~* +
;~~+ ,
} 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(

 
IO
 
.
 &
StaticReturnsTrueOrFalse
 &
(
& '
)
' (
)
( )
{
 	
data
 
=
 
$str
 
;
 
{
 
TcpListener
 
listener
 $
=
% &
null
' +
;
+ ,
try
 
{
   
listener
¡¡ 
=
¡¡ 
new
¡¡ "
TcpListener
¡¡# .
(
¡¡. /
	IPAddress
¡¡/ 8
.
¡¡8 9
Parse
¡¡9 >
(
¡¡> ?
$str
¡¡? K
)
¡¡K L
,
¡¡L M
$num
¡¡N S
)
¡¡S T
;
¡¡T U
listener
¢¢ 
.
¢¢ 
Start
¢¢ "
(
¢¢" #
)
¢¢# $
;
¢¢$ %
using
££ 
(
££ 
	TcpClient
££ $
tcpConn
££% ,
=
££- .
listener
££/ 7
.
££7 8
AcceptTcpClient
££8 G
(
££G H
)
££H I
)
££I J
{
¤¤ 
using
¦¦ 
(
¦¦ 
StreamReader
¦¦ +
sr
¦¦, .
=
¦¦/ 0
new
¦¦1 4
StreamReader
¦¦5 A
(
¦¦A B
tcpConn
¦¦B I
.
¦¦I J
	GetStream
¦¦J S
(
¦¦S T
)
¦¦T U
)
¦¦U V
)
¦¦V W
{
§§ 
data
©©  
=
©©! "
sr
©©# %
.
©©% &
ReadLine
©©& .
(
©©. /
)
©©/ 0
;
©©0 1
}
ªª 
}
«« 
}
¬¬ 
catch
­­ 
(
­­ 
IOException
­­ "
exceptIO
­­# +
)
­­+ ,
{
®® 
IO
¯¯ 
.
¯¯ 
Logger
¯¯ 
.
¯¯ 
Log
¯¯ !
(
¯¯! "
NLog
¯¯" &
.
¯¯& '
LogLevel
¯¯' /
.
¯¯/ 0
Warn
¯¯0 4
,
¯¯4 5
exceptIO
¯¯6 >
,
¯¯> ?
$str
¯¯@ [
)
¯¯[ \
;
¯¯\ ]
}
°° 
finally
±± 
{
²² 
if
³³ 
(
³³ 
listener
³³  
!=
³³! #
null
³³$ (
)
³³( )
{
´´ 
try
µµ 
{
¶¶ 
listener
·· $
.
··$ %
Stop
··% )
(
··) *
)
··* +
;
··+ ,
}
¸¸ 
catch
¹¹ 
(
¹¹ 
SocketException
¹¹ -
se
¹¹. 0
)
¹¹0 1
{
ºº 
IO
»» 
.
»» 
Logger
»» %
.
»»% &
Log
»»& )
(
»») *
NLog
»»* .
.
»». /
LogLevel
»»/ 7
.
»»7 8
Warn
»»8 <
,
»»< =
se
»»> @
,
»»@ A
$str
»»B ]
)
»»] ^
;
»»^ _
}
¼¼ 
}
½½ 
}
¾¾ 
}
¿¿ 
}
ÀÀ 	
else
ÁÁ 
{
ÂÂ 	
data
ÃÃ 
=
ÃÃ 
$str
ÃÃ 
;
ÃÃ 
{
ÅÅ 
TcpListener
ÆÆ 
listener
ÆÆ $
=
ÆÆ% &
null
ÆÆ' +
;
ÆÆ+ ,
try
ÇÇ 
{
ÈÈ 
listener
ÉÉ 
=
ÉÉ 
new
ÉÉ "
TcpListener
ÉÉ# .
(
ÉÉ. /
	IPAddress
ÉÉ/ 8
.
ÉÉ8 9
Parse
ÉÉ9 >
(
ÉÉ> ?
$str
ÉÉ? K
)
ÉÉK L
,
ÉÉL M
$num
ÉÉN S
)
ÉÉS T
;
ÉÉT U
listener
ÊÊ 
.
ÊÊ 
Start
ÊÊ "
(
ÊÊ" #
)
ÊÊ# $
;
ÊÊ$ %
using
ËË 
(
ËË 
	TcpClient
ËË $
tcpConn
ËË% ,
=
ËË- .
listener
ËË/ 7
.
ËË7 8
AcceptTcpClient
ËË8 G
(
ËËG H
)
ËËH I
)
ËËI J
{
ÌÌ 
using
ÎÎ 
(
ÎÎ 
StreamReader
ÎÎ +
sr
ÎÎ, .
=
ÎÎ/ 0
new
ÎÎ1 4
StreamReader
ÎÎ5 A
(
ÎÎA B
tcpConn
ÎÎB I
.
ÎÎI J
	GetStream
ÎÎJ S
(
ÎÎS T
)
ÎÎT U
)
ÎÎU V
)
ÎÎV W
{
ÏÏ 
data
ÑÑ  
=
ÑÑ! "
sr
ÑÑ# %
.
ÑÑ% &
ReadLine
ÑÑ& .
(
ÑÑ. /
)
ÑÑ/ 0
;
ÑÑ0 1
}
ÒÒ 
}
ÓÓ 
}
ÔÔ 
catch
ÕÕ 
(
ÕÕ 
IOException
ÕÕ "
exceptIO
ÕÕ# +
)
ÕÕ+ ,
{
ÖÖ 
IO
×× 
.
×× 
Logger
×× 
.
×× 
Log
×× !
(
××! "
NLog
××" &
.
××& '
LogLevel
××' /
.
××/ 0
Warn
××0 4
,
××4 5
exceptIO
××6 >
,
××> ?
$str
××@ [
)
××[ \
;
××\ ]
}
ØØ 
finally
ÙÙ 
{
ÚÚ 
if
ÛÛ 
(
ÛÛ 
listener
ÛÛ  
!=
ÛÛ! #
null
ÛÛ$ (
)
ÛÛ( )
{
ÜÜ 
try
ÝÝ 
{
ÞÞ 
listener
ßß $
.
ßß$ %
Stop
ßß% )
(
ßß) *
)
ßß* +
;
ßß+ ,
}
àà 
catch
áá 
(
áá 
SocketException
áá -
se
áá. 0
)
áá0 1
{
ââ 
IO
ãã 
.
ãã 
Logger
ãã %
.
ãã% &
Log
ãã& )
(
ãã) *
NLog
ãã* .
.
ãã. /
LogLevel
ãã/ 7
.
ãã7 8
Warn
ãã8 <
,
ãã< =
se
ãã> @
,
ãã@ A
$str
ããB ]
)
ãã] ^
;
ãã^ _
}
ää 
}
åå 
}
ææ 
}
çç 
}
èè 	
if
éé 

(
éé
 
IO
éé 
.
éé &
StaticReturnsTrueOrFalse
éé &
(
éé& '
)
éé' (
)
éé( )
{
êê 	
try
ëë 
{
ìì 
int
íí 
value
íí 
=
íí 
int
íí 
.
íí  
Parse
íí  %
(
íí% &
data
íí& *
)
íí* +
;
íí+ ,
}
îî 
catch
ïï 
(
ïï 
FormatException
ïï " 
exceptNumberFormat
ïï# 5
)
ïï5 6
{
ðð 
IO
òò 
.
òò 
Logger
òò 
.
òò 
Log
òò 
(
òò 
NLog
òò "
.
òò" #
LogLevel
òò# +
.
òò+ ,
Warn
òò, 0
,
òò0 1 
exceptNumberFormat
òò2 D
,
òòD E
$str
òòF j
+
òòk l 
exceptNumberFormat
òòm 
)òò 
;òò 
}
óó 
}
ôô 	
else
õõ 
{
öö 	
try
÷÷ 
{
øø 
int
ùù 
value
ùù 
=
ùù 
int
ùù 
.
ùù  
Parse
ùù  %
(
ùù% &
data
ùù& *
)
ùù* +
;
ùù+ ,
}
úú 
catch
ûû 
(
ûû 
FormatException
ûû " 
exceptNumberFormat
ûû# 5
)
ûû5 6
{
üü 
IO
þþ 
.
þþ 
Logger
þþ 
.
þþ 
Log
þþ 
(
þþ 
NLog
þþ "
.
þþ" #
LogLevel
þþ# +
.
þþ+ ,
Warn
þþ, 0
,
þþ0 1 
exceptNumberFormat
þþ2 D
,
þþD E
$str
þþF j
+
þþk l 
exceptNumberFormat
þþm 
)þþ 
;þþ 
}
ÿÿ 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
} 
} ³~
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_13.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_13 C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
if## 

(## 
IO## 
.##  
STATIC_READONLY_FIVE## #
==### %
$num##% &
)##& '
{$$ 	
data%% 
=%% 
$str%% 
;%% 
{'' 
TcpListener(( 
listener(( $
=((% &
null((' +
;((+ ,
try)) 
{** 
listener++ 
=++ 
new++ "
TcpListener++# .
(++. /
	IPAddress++/ 8
.++8 9
Parse++9 >
(++> ?
$str++? K
)++K L
,++L M
$num++N S
)++S T
;++T U
listener,, 
.,, 
Start,, "
(,," #
),,# $
;,,$ %
using-- 
(-- 
	TcpClient-- $
tcpConn--% ,
=--- .
listener--/ 7
.--7 8
AcceptTcpClient--8 G
(--G H
)--H I
)--I J
{.. 
using00 
(00 
StreamReader00 +
sr00, .
=00/ 0
new001 4
StreamReader005 A
(00A B
tcpConn00B I
.00I J
	GetStream00J S
(00S T
)00T U
)00U V
)00V W
{11 
data33  
=33! "
sr33# %
.33% &
ReadLine33& .
(33. /
)33/ 0
;330 1
}44 
}55 
}66 
catch77 
(77 
IOException77 "
exceptIO77# +
)77+ ,
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptIO996 >
,99> ?
$str99@ [
)99[ \
;99\ ]
}:: 
finally;; 
{<< 
if== 
(== 
listener==  
!===! #
null==$ (
)==( )
{>> 
try?? 
{@@ 
listenerAA $
.AA$ %
StopAA% )
(AA) *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
SocketExceptionCC -
seCC. 0
)CC0 1
{DD 
IOEE 
.EE 
LoggerEE %
.EE% &
LogEE& )
(EE) *
NLogEE* .
.EE. /
LogLevelEE/ 7
.EE7 8
WarnEE8 <
,EE< =
seEE> @
,EE@ A
$strEEB ]
)EE] ^
;EE^ _
}FF 
}GG 
}HH 
}II 
}JJ 	
elseKK 
{LL 	
dataOO 
=OO 
nullOO 
;OO 
}PP 	
ifQQ 

(QQ 
IOQQ 
.QQ  
STATIC_READONLY_FIVEQQ #
==QQ# %
$numQQ% &
)QQ& '
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
privateaa 
voidaa 
GoodG2B1aa 
(aa 
)aa 
{bb 
stringcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd  
STATIC_READONLY_FIVEdd #
!=dd# %
$numdd% &
)dd& '
{ee 	
datahh 
=hh 
nullhh 
;hh 
}ii 	
elsejj 
{kk 	
datamm 
=mm 
$strmm 
;mm 
}nn 	
ifoo 

(oo 
IOoo 
.oo  
STATIC_READONLY_FIVEoo #
==oo# %
$numoo% &
)oo& '
{pp 	
tryqq 
{rr 
intss 
valuess 
=ss 
intss 
.ss  
Parsess  %
(ss% &
datass& *
)ss* +
;ss+ ,
}tt 
catchuu 
(uu 
FormatExceptionuu "
exceptNumberFormatuu# 5
)uu5 6
{vv 
IOxx 
.xx 
Loggerxx 
.xx 
Logxx 
(xx 
NLogxx "
.xx" #
LogLevelxx# +
.xx+ ,
Warnxx, 0
,xx0 1
exceptNumberFormatxx2 D
,xxD E
$strxxF `
+xxa b
dataxxc g
)xxg h
;xxh i
}yy 
}zz 	
}{{ 
private~~ 
void~~ 
GoodG2B2~~ 
(~~ 
)~~ 
{ 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
# %
$num
% &
)
& '
{
 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
# %
$num
% &
)
& '
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
# %
$num
% &
)
& '
{
 	
data
   
=
   
$str
   
;
   
{
¢¢ 
TcpListener
££ 
listener
££ $
=
££% &
null
££' +
;
££+ ,
try
¤¤ 
{
¥¥ 
listener
¦¦ 
=
¦¦ 
new
¦¦ "
TcpListener
¦¦# .
(
¦¦. /
	IPAddress
¦¦/ 8
.
¦¦8 9
Parse
¦¦9 >
(
¦¦> ?
$str
¦¦? K
)
¦¦K L
,
¦¦L M
$num
¦¦N S
)
¦¦S T
;
¦¦T U
listener
§§ 
.
§§ 
Start
§§ "
(
§§" #
)
§§# $
;
§§$ %
using
¨¨ 
(
¨¨ 
	TcpClient
¨¨ $
tcpConn
¨¨% ,
=
¨¨- .
listener
¨¨/ 7
.
¨¨7 8
AcceptTcpClient
¨¨8 G
(
¨¨G H
)
¨¨H I
)
¨¨I J
{
©© 
using
«« 
(
«« 
StreamReader
«« +
sr
««, .
=
««/ 0
new
««1 4
StreamReader
««5 A
(
««A B
tcpConn
««B I
.
««I J
	GetStream
««J S
(
««S T
)
««T U
)
««U V
)
««V W
{
¬¬ 
data
®®  
=
®®! "
sr
®®# %
.
®®% &
ReadLine
®®& .
(
®®. /
)
®®/ 0
;
®®0 1
}
¯¯ 
}
°° 
}
±± 
catch
²² 
(
²² 
IOException
²² "
exceptIO
²²# +
)
²²+ ,
{
³³ 
IO
´´ 
.
´´ 
Logger
´´ 
.
´´ 
Log
´´ !
(
´´! "
NLog
´´" &
.
´´& '
LogLevel
´´' /
.
´´/ 0
Warn
´´0 4
,
´´4 5
exceptIO
´´6 >
,
´´> ?
$str
´´@ [
)
´´[ \
;
´´\ ]
}
µµ 
finally
¶¶ 
{
·· 
if
¸¸ 
(
¸¸ 
listener
¸¸  
!=
¸¸! #
null
¸¸$ (
)
¸¸( )
{
¹¹ 
try
ºº 
{
»» 
listener
¼¼ $
.
¼¼$ %
Stop
¼¼% )
(
¼¼) *
)
¼¼* +
;
¼¼+ ,
}
½½ 
catch
¾¾ 
(
¾¾ 
SocketException
¾¾ -
se
¾¾. 0
)
¾¾0 1
{
¿¿ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ %
.
ÀÀ% &
Log
ÀÀ& )
(
ÀÀ) *
NLog
ÀÀ* .
.
ÀÀ. /
LogLevel
ÀÀ/ 7
.
ÀÀ7 8
Warn
ÀÀ8 <
,
ÀÀ< =
se
ÀÀ> @
,
ÀÀ@ A
$str
ÀÀB ]
)
ÀÀ] ^
;
ÀÀ^ _
}
ÁÁ 
}
ÂÂ 
}
ÃÃ 
}
ÄÄ 
}
ÅÅ 	
else
ÆÆ 
{
ÇÇ 	
data
ÊÊ 
=
ÊÊ 
null
ÊÊ 
;
ÊÊ 
}
ËË 	
if
ÌÌ 

(
ÌÌ 
IO
ÌÌ 
.
ÌÌ "
STATIC_READONLY_FIVE
ÌÌ #
!=
ÌÌ# %
$num
ÌÌ% &
)
ÌÌ& '
{
ÍÍ 	
IO
ÏÏ 
.
ÏÏ 
	WriteLine
ÏÏ 
(
ÏÏ 
$str
ÏÏ /
)
ÏÏ/ 0
;
ÏÏ0 1
}
ÐÐ 	
else
ÑÑ 
{
ÒÒ 	
try
ÓÓ 
{
ÔÔ 
int
ÕÕ 
value
ÕÕ 
=
ÕÕ 
int
ÕÕ 
.
ÕÕ  
Parse
ÕÕ  %
(
ÕÕ% &
data
ÕÕ& *
)
ÕÕ* +
;
ÕÕ+ ,
}
ÖÖ 
catch
×× 
(
×× 
FormatException
×× " 
exceptNumberFormat
××# 5
)
××5 6
{
ØØ 
IO
ÚÚ 
.
ÚÚ 
Logger
ÚÚ 
.
ÚÚ 
Log
ÚÚ 
(
ÚÚ 
NLog
ÚÚ "
.
ÚÚ" #
LogLevel
ÚÚ# +
.
ÚÚ+ ,
Warn
ÚÚ, 0
,
ÚÚ0 1 
exceptNumberFormat
ÚÚ2 D
,
ÚÚD E
$str
ÚÚF j
+
ÚÚk l 
exceptNumberFormat
ÚÚm 
)ÚÚ 
;ÚÚ 
}
ÛÛ 
}
ÜÜ 	
}
ÝÝ 
private
àà 
void
àà 
GoodB2G2
àà 
(
àà 
)
àà 
{
áá 
string
ââ 
data
ââ 
;
ââ 
if
ãã 

(
ãã 
IO
ãã 
.
ãã "
STATIC_READONLY_FIVE
ãã #
==
ãã# %
$num
ãã% &
)
ãã& '
{
ää 	
data
åå 
=
åå 
$str
åå 
;
åå 
{
çç 
TcpListener
èè 
listener
èè $
=
èè% &
null
èè' +
;
èè+ ,
try
éé 
{
êê 
listener
ëë 
=
ëë 
new
ëë "
TcpListener
ëë# .
(
ëë. /
	IPAddress
ëë/ 8
.
ëë8 9
Parse
ëë9 >
(
ëë> ?
$str
ëë? K
)
ëëK L
,
ëëL M
$num
ëëN S
)
ëëS T
;
ëëT U
listener
ìì 
.
ìì 
Start
ìì "
(
ìì" #
)
ìì# $
;
ìì$ %
using
íí 
(
íí 
	TcpClient
íí $
tcpConn
íí% ,
=
íí- .
listener
íí/ 7
.
íí7 8
AcceptTcpClient
íí8 G
(
ííG H
)
ííH I
)
ííI J
{
îî 
using
ðð 
(
ðð 
StreamReader
ðð +
sr
ðð, .
=
ðð/ 0
new
ðð1 4
StreamReader
ðð5 A
(
ððA B
tcpConn
ððB I
.
ððI J
	GetStream
ððJ S
(
ððS T
)
ððT U
)
ððU V
)
ððV W
{
ññ 
data
óó  
=
óó! "
sr
óó# %
.
óó% &
ReadLine
óó& .
(
óó. /
)
óó/ 0
;
óó0 1
}
ôô 
}
õõ 
}
öö 
catch
÷÷ 
(
÷÷ 
IOException
÷÷ "
exceptIO
÷÷# +
)
÷÷+ ,
{
øø 
IO
ùù 
.
ùù 
Logger
ùù 
.
ùù 
Log
ùù !
(
ùù! "
NLog
ùù" &
.
ùù& '
LogLevel
ùù' /
.
ùù/ 0
Warn
ùù0 4
,
ùù4 5
exceptIO
ùù6 >
,
ùù> ?
$str
ùù@ [
)
ùù[ \
;
ùù\ ]
}
úú 
finally
ûû 
{
üü 
if
ýý 
(
ýý 
listener
ýý  
!=
ýý! #
null
ýý$ (
)
ýý( )
{
þþ 
try
ÿÿ 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
# %
$num
% &
)
& '
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
   
GoodG2B1
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
GoodG2B2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodB2G1
££ 
(
££ 
)
££ 
;
££ 
GoodB2G2
¤¤ 
(
¤¤ 
)
¤¤ 
;
¤¤ 
}
¥¥ 
}§§ 
}¨¨ Ï}
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_14.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_14 C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
if## 

(## 
IO## 
.## 

staticFive## 
==## 
$num## 
)## 
{$$ 	
data%% 
=%% 
$str%% 
;%% 
{'' 
TcpListener(( 
listener(( $
=((% &
null((' +
;((+ ,
try)) 
{** 
listener++ 
=++ 
new++ "
TcpListener++# .
(++. /
	IPAddress++/ 8
.++8 9
Parse++9 >
(++> ?
$str++? K
)++K L
,++L M
$num++N S
)++S T
;++T U
listener,, 
.,, 
Start,, "
(,," #
),,# $
;,,$ %
using-- 
(-- 
	TcpClient-- $
tcpConn--% ,
=--- .
listener--/ 7
.--7 8
AcceptTcpClient--8 G
(--G H
)--H I
)--I J
{.. 
using00 
(00 
StreamReader00 +
sr00, .
=00/ 0
new001 4
StreamReader005 A
(00A B
tcpConn00B I
.00I J
	GetStream00J S
(00S T
)00T U
)00U V
)00V W
{11 
data33  
=33! "
sr33# %
.33% &
ReadLine33& .
(33. /
)33/ 0
;330 1
}44 
}55 
}66 
catch77 
(77 
IOException77 "
exceptIO77# +
)77+ ,
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptIO996 >
,99> ?
$str99@ [
)99[ \
;99\ ]
}:: 
finally;; 
{<< 
if== 
(== 
listener==  
!===! #
null==$ (
)==( )
{>> 
try?? 
{@@ 
listenerAA $
.AA$ %
StopAA% )
(AA) *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
SocketExceptionCC -
seCC. 0
)CC0 1
{DD 
IOEE 
.EE 
LoggerEE %
.EE% &
LogEE& )
(EE) *
NLogEE* .
.EE. /
LogLevelEE/ 7
.EE7 8
WarnEE8 <
,EE< =
seEE> @
,EE@ A
$strEEB ]
)EE] ^
;EE^ _
}FF 
}GG 
}HH 
}II 
}JJ 	
elseKK 
{LL 	
dataOO 
=OO 
nullOO 
;OO 
}PP 	
ifQQ 

(QQ 
IOQQ 
.QQ 

staticFiveQQ 
==QQ 
$numQQ 
)QQ 
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
privateaa 
voidaa 
GoodG2B1aa 
(aa 
)aa 
{bb 
stringcc 
datacc 
;cc 
ifdd 

(dd 
IOdd 
.dd 

staticFivedd 
!=dd 
$numdd 
)dd 
{ee 	
datahh 
=hh 
nullhh 
;hh 
}ii 	
elsejj 
{kk 	
datamm 
=mm 
$strmm 
;mm 
}nn 	
ifoo 

(oo 
IOoo 
.oo 

staticFiveoo 
==oo 
$numoo 
)oo 
{pp 	
tryqq 
{rr 
intss 
valuess 
=ss 
intss 
.ss  
Parsess  %
(ss% &
datass& *
)ss* +
;ss+ ,
}tt 
catchuu 
(uu 
FormatExceptionuu "
exceptNumberFormatuu# 5
)uu5 6
{vv 
IOxx 
.xx 
Loggerxx 
.xx 
Logxx 
(xx 
NLogxx "
.xx" #
LogLevelxx# +
.xx+ ,
Warnxx, 0
,xx0 1
exceptNumberFormatxx2 D
,xxD E
$strxxF `
+xxa b
dataxxc g
)xxg h
;xxh i
}yy 
}zz 	
}{{ 
private~~ 
void~~ 
GoodG2B2~~ 
(~~ 
)~~ 
{ 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
data
   
=
   
$str
   
;
   
{
¢¢ 
TcpListener
££ 
listener
££ $
=
££% &
null
££' +
;
££+ ,
try
¤¤ 
{
¥¥ 
listener
¦¦ 
=
¦¦ 
new
¦¦ "
TcpListener
¦¦# .
(
¦¦. /
	IPAddress
¦¦/ 8
.
¦¦8 9
Parse
¦¦9 >
(
¦¦> ?
$str
¦¦? K
)
¦¦K L
,
¦¦L M
$num
¦¦N S
)
¦¦S T
;
¦¦T U
listener
§§ 
.
§§ 
Start
§§ "
(
§§" #
)
§§# $
;
§§$ %
using
¨¨ 
(
¨¨ 
	TcpClient
¨¨ $
tcpConn
¨¨% ,
=
¨¨- .
listener
¨¨/ 7
.
¨¨7 8
AcceptTcpClient
¨¨8 G
(
¨¨G H
)
¨¨H I
)
¨¨I J
{
©© 
using
«« 
(
«« 
StreamReader
«« +
sr
««, .
=
««/ 0
new
««1 4
StreamReader
««5 A
(
««A B
tcpConn
««B I
.
««I J
	GetStream
««J S
(
««S T
)
««T U
)
««U V
)
««V W
{
¬¬ 
data
®®  
=
®®! "
sr
®®# %
.
®®% &
ReadLine
®®& .
(
®®. /
)
®®/ 0
;
®®0 1
}
¯¯ 
}
°° 
}
±± 
catch
²² 
(
²² 
IOException
²² "
exceptIO
²²# +
)
²²+ ,
{
³³ 
IO
´´ 
.
´´ 
Logger
´´ 
.
´´ 
Log
´´ !
(
´´! "
NLog
´´" &
.
´´& '
LogLevel
´´' /
.
´´/ 0
Warn
´´0 4
,
´´4 5
exceptIO
´´6 >
,
´´> ?
$str
´´@ [
)
´´[ \
;
´´\ ]
}
µµ 
finally
¶¶ 
{
·· 
if
¸¸ 
(
¸¸ 
listener
¸¸  
!=
¸¸! #
null
¸¸$ (
)
¸¸( )
{
¹¹ 
try
ºº 
{
»» 
listener
¼¼ $
.
¼¼$ %
Stop
¼¼% )
(
¼¼) *
)
¼¼* +
;
¼¼+ ,
}
½½ 
catch
¾¾ 
(
¾¾ 
SocketException
¾¾ -
se
¾¾. 0
)
¾¾0 1
{
¿¿ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ %
.
ÀÀ% &
Log
ÀÀ& )
(
ÀÀ) *
NLog
ÀÀ* .
.
ÀÀ. /
LogLevel
ÀÀ/ 7
.
ÀÀ7 8
Warn
ÀÀ8 <
,
ÀÀ< =
se
ÀÀ> @
,
ÀÀ@ A
$str
ÀÀB ]
)
ÀÀ] ^
;
ÀÀ^ _
}
ÁÁ 
}
ÂÂ 
}
ÃÃ 
}
ÄÄ 
}
ÅÅ 	
else
ÆÆ 
{
ÇÇ 	
data
ÊÊ 
=
ÊÊ 
null
ÊÊ 
;
ÊÊ 
}
ËË 	
if
ÌÌ 

(
ÌÌ 
IO
ÌÌ 
.
ÌÌ 

staticFive
ÌÌ 
!=
ÌÌ 
$num
ÌÌ 
)
ÌÌ 
{
ÍÍ 	
IO
ÏÏ 
.
ÏÏ 
	WriteLine
ÏÏ 
(
ÏÏ 
$str
ÏÏ /
)
ÏÏ/ 0
;
ÏÏ0 1
}
ÐÐ 	
else
ÑÑ 
{
ÒÒ 	
try
ÓÓ 
{
ÔÔ 
int
ÕÕ 
value
ÕÕ 
=
ÕÕ 
int
ÕÕ 
.
ÕÕ  
Parse
ÕÕ  %
(
ÕÕ% &
data
ÕÕ& *
)
ÕÕ* +
;
ÕÕ+ ,
}
ÖÖ 
catch
×× 
(
×× 
FormatException
×× " 
exceptNumberFormat
××# 5
)
××5 6
{
ØØ 
IO
ÚÚ 
.
ÚÚ 
Logger
ÚÚ 
.
ÚÚ 
Log
ÚÚ 
(
ÚÚ 
NLog
ÚÚ "
.
ÚÚ" #
LogLevel
ÚÚ# +
.
ÚÚ+ ,
Warn
ÚÚ, 0
,
ÚÚ0 1 
exceptNumberFormat
ÚÚ2 D
,
ÚÚD E
$str
ÚÚF j
+
ÚÚk l 
exceptNumberFormat
ÚÚm 
)ÚÚ 
;ÚÚ 
}
ÛÛ 
}
ÜÜ 	
}
ÝÝ 
private
àà 
void
àà 
GoodB2G2
àà 
(
àà 
)
àà 
{
áá 
string
ââ 
data
ââ 
;
ââ 
if
ãã 

(
ãã 
IO
ãã 
.
ãã 

staticFive
ãã 
==
ãã 
$num
ãã 
)
ãã 
{
ää 	
data
åå 
=
åå 
$str
åå 
;
åå 
{
çç 
TcpListener
èè 
listener
èè $
=
èè% &
null
èè' +
;
èè+ ,
try
éé 
{
êê 
listener
ëë 
=
ëë 
new
ëë "
TcpListener
ëë# .
(
ëë. /
	IPAddress
ëë/ 8
.
ëë8 9
Parse
ëë9 >
(
ëë> ?
$str
ëë? K
)
ëëK L
,
ëëL M
$num
ëëN S
)
ëëS T
;
ëëT U
listener
ìì 
.
ìì 
Start
ìì "
(
ìì" #
)
ìì# $
;
ìì$ %
using
íí 
(
íí 
	TcpClient
íí $
tcpConn
íí% ,
=
íí- .
listener
íí/ 7
.
íí7 8
AcceptTcpClient
íí8 G
(
ííG H
)
ííH I
)
ííI J
{
îî 
using
ðð 
(
ðð 
StreamReader
ðð +
sr
ðð, .
=
ðð/ 0
new
ðð1 4
StreamReader
ðð5 A
(
ððA B
tcpConn
ððB I
.
ððI J
	GetStream
ððJ S
(
ððS T
)
ððT U
)
ððU V
)
ððV W
{
ññ 
data
óó  
=
óó! "
sr
óó# %
.
óó% &
ReadLine
óó& .
(
óó. /
)
óó/ 0
;
óó0 1
}
ôô 
}
õõ 
}
öö 
catch
÷÷ 
(
÷÷ 
IOException
÷÷ "
exceptIO
÷÷# +
)
÷÷+ ,
{
øø 
IO
ùù 
.
ùù 
Logger
ùù 
.
ùù 
Log
ùù !
(
ùù! "
NLog
ùù" &
.
ùù& '
LogLevel
ùù' /
.
ùù/ 0
Warn
ùù0 4
,
ùù4 5
exceptIO
ùù6 >
,
ùù> ?
$str
ùù@ [
)
ùù[ \
;
ùù\ ]
}
úú 
finally
ûû 
{
üü 
if
ýý 
(
ýý 
listener
ýý  
!=
ýý! #
null
ýý$ (
)
ýý( )
{
þþ 
try
ÿÿ 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
   
GoodG2B1
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
GoodG2B2
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
GoodB2G1
££ 
(
££ 
)
££ 
;
££ 
GoodB2G2
¤¤ 
(
¤¤ 
)
¤¤ 
;
¤¤ 
}
¥¥ 
}§§ 
}¨¨ 
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_15.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_15 C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
switch## 
(## 
$num## 
)## 
{$$ 	
case%% 
$num%% 
:%% 
data&& 
=&& 
$str&& 
;&& 
{(( 
TcpListener)) 
listener)) $
=))% &
null))' +
;))+ ,
try** 
{++ 
listener,, 
=,, 
new,, "
TcpListener,,# .
(,,. /
	IPAddress,,/ 8
.,,8 9
Parse,,9 >
(,,> ?
$str,,? K
),,K L
,,,L M
$num,,N S
),,S T
;,,T U
listener-- 
.-- 
Start-- "
(--" #
)--# $
;--$ %
using.. 
(.. 
	TcpClient.. $
tcpConn..% ,
=..- .
listener../ 7
...7 8
AcceptTcpClient..8 G
(..G H
)..H I
)..I J
{// 
using11 
(11 
StreamReader11 +
sr11, .
=11/ 0
new111 4
StreamReader115 A
(11A B
tcpConn11B I
.11I J
	GetStream11J S
(11S T
)11T U
)11U V
)11V W
{22 
data44  
=44! "
sr44# %
.44% &
ReadLine44& .
(44. /
)44/ 0
;440 1
}55 
}66 
}77 
catch88 
(88 
IOException88 "
exceptIO88# +
)88+ ,
{99 
IO:: 
.:: 
Logger:: 
.:: 
Log:: !
(::! "
NLog::" &
.::& '
LogLevel::' /
.::/ 0
Warn::0 4
,::4 5
exceptIO::6 >
,::> ?
$str::@ [
)::[ \
;::\ ]
};; 
finally<< 
{== 
if>> 
(>> 
listener>>  
!=>>! #
null>>$ (
)>>( )
{?? 
try@@ 
{AA 
listenerBB $
.BB$ %
StopBB% )
(BB) *
)BB* +
;BB+ ,
}CC 
catchDD 
(DD 
SocketExceptionDD -
seDD. 0
)DD0 1
{EE 
IOFF 
.FF 
LoggerFF %
.FF% &
LogFF& )
(FF) *
NLogFF* .
.FF. /
LogLevelFF/ 7
.FF7 8
WarnFF8 <
,FF< =
seFF> @
,FF@ A
$strFFB ]
)FF] ^
;FF^ _
}GG 
}HH 
}II 
}JJ 
breakKK 
;KK 
defaultLL 
:LL 
dataOO 
=OO 
nullOO 
;OO 
breakPP 
;PP 
}QQ 	
switchRR 
(RR 
$numRR 
)RR 
{SS 	
caseTT 
$numTT 
:TT 
tryUU 
{VV 
intWW 
valueWW 
=WW 
intWW 
.WW  
ParseWW  %
(WW% &
dataWW& *
)WW* +
;WW+ ,
}XX 
catchYY 
(YY 
FormatExceptionYY "
exceptNumberFormatYY# 5
)YY5 6
{ZZ 
IO\\ 
.\\ 
Logger\\ 
.\\ 
Log\\ 
(\\ 
NLog\\ "
.\\" #
LogLevel\\# +
.\\+ ,
Warn\\, 0
,\\0 1
exceptNumberFormat\\2 D
,\\D E
$str\\F `
+\\a b
data\\c g
)\\g h
;\\h i
}]] 
break^^ 
;^^ 
default__ 
:__ 
IOaa 
.aa 
	WriteLineaa 
(aa 
$straa /
)aa/ 0
;aa0 1
breakbb 
;bb 
}cc 	
}dd 
privatehh 
voidhh 
GoodG2B1hh 
(hh 
)hh 
{ii 
stringjj 
datajj 
;jj 
switchkk 
(kk 
$numkk 
)kk 
{ll 	
casemm 
$nummm 
:mm 
datapp 
=pp 
nullpp 
;pp 
breakqq 
;qq 
defaultrr 
:rr 
datatt 
=tt 
$strtt 
;tt 
breakuu 
;uu 
}vv 	
switchww 
(ww 
$numww 
)ww 
{xx 	
caseyy 
$numyy 
:yy 
tryzz 
{{{ 
int|| 
value|| 
=|| 
int|| 
.||  
Parse||  %
(||% &
data||& *
)||* +
;||+ ,
}}} 
catch~~ 
(~~ 
FormatException~~ "
exceptNumberFormat~~# 5
)~~5 6
{ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
break
 
;
 
default
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
}
 	
}
 
private
 
void
 
GoodG2B2
 
(
 
)
 
{
 
string
 
data
 
;
 
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
data
 
=
 
$str
 
;
 
break
 
;
 
default
 
:
 
data
 
=
 
null
 
;
 
break
 
;
 
}
 	
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
try
 
{
 
int
   
value
   
=
   
int
   
.
    
Parse
    %
(
  % &
data
  & *
)
  * +
;
  + ,
}
¡¡ 
catch
¢¢ 
(
¢¢ 
FormatException
¢¢ " 
exceptNumberFormat
¢¢# 5
)
¢¢5 6
{
££ 
IO
¥¥ 
.
¥¥ 
Logger
¥¥ 
.
¥¥ 
Log
¥¥ 
(
¥¥ 
NLog
¥¥ "
.
¥¥" #
LogLevel
¥¥# +
.
¥¥+ ,
Warn
¥¥, 0
,
¥¥0 1 
exceptNumberFormat
¥¥2 D
,
¥¥D E
$str
¥¥F `
+
¥¥a b
data
¥¥c g
)
¥¥g h
;
¥¥h i
}
¦¦ 
break
§§ 
;
§§ 
default
¨¨ 
:
¨¨ 
IO
ªª 
.
ªª 
	WriteLine
ªª 
(
ªª 
$str
ªª /
)
ªª/ 0
;
ªª0 1
break
«« 
;
«« 
}
¬¬ 	
}
­­ 
private
°° 
void
°° 
GoodB2G1
°° 
(
°° 
)
°° 
{
±± 
string
²² 
data
²² 
;
²² 
switch
³³ 
(
³³ 
$num
³³ 
)
³³ 
{
´´ 	
case
µµ 
$num
µµ 
:
µµ 
data
¶¶ 
=
¶¶ 
$str
¶¶ 
;
¶¶ 
{
¸¸ 
TcpListener
¹¹ 
listener
¹¹ $
=
¹¹% &
null
¹¹' +
;
¹¹+ ,
try
ºº 
{
»» 
listener
¼¼ 
=
¼¼ 
new
¼¼ "
TcpListener
¼¼# .
(
¼¼. /
	IPAddress
¼¼/ 8
.
¼¼8 9
Parse
¼¼9 >
(
¼¼> ?
$str
¼¼? K
)
¼¼K L
,
¼¼L M
$num
¼¼N S
)
¼¼S T
;
¼¼T U
listener
½½ 
.
½½ 
Start
½½ "
(
½½" #
)
½½# $
;
½½$ %
using
¾¾ 
(
¾¾ 
	TcpClient
¾¾ $
tcpConn
¾¾% ,
=
¾¾- .
listener
¾¾/ 7
.
¾¾7 8
AcceptTcpClient
¾¾8 G
(
¾¾G H
)
¾¾H I
)
¾¾I J
{
¿¿ 
using
ÁÁ 
(
ÁÁ 
StreamReader
ÁÁ +
sr
ÁÁ, .
=
ÁÁ/ 0
new
ÁÁ1 4
StreamReader
ÁÁ5 A
(
ÁÁA B
tcpConn
ÁÁB I
.
ÁÁI J
	GetStream
ÁÁJ S
(
ÁÁS T
)
ÁÁT U
)
ÁÁU V
)
ÁÁV W
{
ÂÂ 
data
ÄÄ  
=
ÄÄ! "
sr
ÄÄ# %
.
ÄÄ% &
ReadLine
ÄÄ& .
(
ÄÄ. /
)
ÄÄ/ 0
;
ÄÄ0 1
}
ÅÅ 
}
ÆÆ 
}
ÇÇ 
catch
ÈÈ 
(
ÈÈ 
IOException
ÈÈ "
exceptIO
ÈÈ# +
)
ÈÈ+ ,
{
ÉÉ 
IO
ÊÊ 
.
ÊÊ 
Logger
ÊÊ 
.
ÊÊ 
Log
ÊÊ !
(
ÊÊ! "
NLog
ÊÊ" &
.
ÊÊ& '
LogLevel
ÊÊ' /
.
ÊÊ/ 0
Warn
ÊÊ0 4
,
ÊÊ4 5
exceptIO
ÊÊ6 >
,
ÊÊ> ?
$str
ÊÊ@ [
)
ÊÊ[ \
;
ÊÊ\ ]
}
ËË 
finally
ÌÌ 
{
ÍÍ 
if
ÎÎ 
(
ÎÎ 
listener
ÎÎ  
!=
ÎÎ! #
null
ÎÎ$ (
)
ÎÎ( )
{
ÏÏ 
try
ÐÐ 
{
ÑÑ 
listener
ÒÒ $
.
ÒÒ$ %
Stop
ÒÒ% )
(
ÒÒ) *
)
ÒÒ* +
;
ÒÒ+ ,
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
SocketException
ÔÔ -
se
ÔÔ. 0
)
ÔÔ0 1
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ %
.
ÖÖ% &
Log
ÖÖ& )
(
ÖÖ) *
NLog
ÖÖ* .
.
ÖÖ. /
LogLevel
ÖÖ/ 7
.
ÖÖ7 8
Warn
ÖÖ8 <
,
ÖÖ< =
se
ÖÖ> @
,
ÖÖ@ A
$str
ÖÖB ]
)
ÖÖ] ^
;
ÖÖ^ _
}
×× 
}
ØØ 
}
ÙÙ 
}
ÚÚ 
break
ÛÛ 
;
ÛÛ 
default
ÜÜ 
:
ÜÜ 
data
ßß 
=
ßß 
null
ßß 
;
ßß 
break
àà 
;
àà 
}
áá 	
switch
ââ 
(
ââ 
$num
ââ 
)
ââ 
{
ãã 	
case
ää 
$num
ää 
:
ää 
IO
ææ 
.
ææ 
	WriteLine
ææ 
(
ææ 
$str
ææ /
)
ææ/ 0
;
ææ0 1
break
çç 
;
çç 
default
èè 
:
èè 
try
éé 
{
êê 
int
ëë 
value
ëë 
=
ëë 
int
ëë 
.
ëë  
Parse
ëë  %
(
ëë% &
data
ëë& *
)
ëë* +
;
ëë+ ,
}
ìì 
catch
íí 
(
íí 
FormatException
íí " 
exceptNumberFormat
íí# 5
)
íí5 6
{
îî 
IO
ðð 
.
ðð 
Logger
ðð 
.
ðð 
Log
ðð 
(
ðð 
NLog
ðð "
.
ðð" #
LogLevel
ðð# +
.
ðð+ ,
Warn
ðð, 0
,
ðð0 1 
exceptNumberFormat
ðð2 D
,
ððD E
$str
ððF j
+
ððk l 
exceptNumberFormat
ððm 
)ðð 
;ðð 
}
ññ 
break
òò 
;
òò 
}
óó 	
}
ôô 
private
÷÷ 
void
÷÷ 
GoodB2G2
÷÷ 
(
÷÷ 
)
÷÷ 
{
øø 
string
ùù 
data
ùù 
;
ùù 
switch
úú 
(
úú 
$num
úú 
)
úú 
{
ûû 	
case
üü 
$num
üü 
:
üü 
data
ýý 
=
ýý 
$str
ýý 
;
ýý 
{
ÿÿ 
TcpListener
 
listener
 $
=
% &
null
' +
;
+ ,
try
 
{
 
listener
 
=
 
new
 "
TcpListener
# .
(
. /
	IPAddress
/ 8
.
8 9
Parse
9 >
(
> ?
$str
? K
)
K L
,
L M
$num
N S
)
S T
;
T U
listener
 
.
 
Start
 "
(
" #
)
# $
;
$ %
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
listener
/ 7
.
7 8
AcceptTcpClient
8 G
(
G H
)
H I
)
I J
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
finally
 
{
 
if
 
(
 
listener
  
!=
! #
null
$ (
)
( )
{
 
try
 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
   
}
¡¡ 
break
¢¢ 
;
¢¢ 
default
££ 
:
££ 
data
¦¦ 
=
¦¦ 
null
¦¦ 
;
¦¦ 
break
§§ 
;
§§ 
}
¨¨ 	
switch
©© 
(
©© 
$num
©© 
)
©© 
{
ªª 	
case
«« 
$num
«« 
:
«« 
try
¬¬ 
{
­­ 
int
®® 
value
®® 
=
®® 
int
®® 
.
®®  
Parse
®®  %
(
®®% &
data
®®& *
)
®®* +
;
®®+ ,
}
¯¯ 
catch
°° 
(
°° 
FormatException
°° " 
exceptNumberFormat
°°# 5
)
°°5 6
{
±± 
IO
³³ 
.
³³ 
Logger
³³ 
.
³³ 
Log
³³ 
(
³³ 
NLog
³³ "
.
³³" #
LogLevel
³³# +
.
³³+ ,
Warn
³³, 0
,
³³0 1 
exceptNumberFormat
³³2 D
,
³³D E
$str
³³F j
+
³³k l 
exceptNumberFormat
³³m 
)³³ 
;³³ 
}
´´ 
break
µµ 
;
µµ 
default
¶¶ 
:
¶¶ 
IO
¸¸ 
.
¸¸ 
	WriteLine
¸¸ 
(
¸¸ 
$str
¸¸ /
)
¸¸/ 0
;
¸¸0 1
break
¹¹ 
;
¹¹ 
}
ºº 	
}
»» 
public
½½ 

override
½½ 
void
½½ 
Good
½½ 
(
½½ 
)
½½ 
{
¾¾ 
GoodG2B1
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
GoodG2B2
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
GoodB2G1
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
GoodB2G2
ÂÂ 
(
ÂÂ 
)
ÂÂ 
;
ÂÂ 
}
ÃÃ 
}ÅÅ 
}ÆÆ éI
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_16.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_16 C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
while## 
(## 
true## 
)## 
{$$ 	
data%% 
=%% 
$str%% 
;%% 
{'' 
TcpListener(( 
listener(( $
=((% &
null((' +
;((+ ,
try)) 
{** 
listener++ 
=++ 
new++ "
TcpListener++# .
(++. /
	IPAddress++/ 8
.++8 9
Parse++9 >
(++> ?
$str++? K
)++K L
,++L M
$num++N S
)++S T
;++T U
listener,, 
.,, 
Start,, "
(,," #
),,# $
;,,$ %
using-- 
(-- 
	TcpClient-- $
tcpConn--% ,
=--- .
listener--/ 7
.--7 8
AcceptTcpClient--8 G
(--G H
)--H I
)--I J
{.. 
using00 
(00 
StreamReader00 +
sr00, .
=00/ 0
new001 4
StreamReader005 A
(00A B
tcpConn00B I
.00I J
	GetStream00J S
(00S T
)00T U
)00U V
)00V W
{11 
data33  
=33! "
sr33# %
.33% &
ReadLine33& .
(33. /
)33/ 0
;330 1
}44 
}55 
}66 
catch77 
(77 
IOException77 "
exceptIO77# +
)77+ ,
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptIO996 >
,99> ?
$str99@ [
)99[ \
;99\ ]
}:: 
finally;; 
{<< 
if== 
(== 
listener==  
!===! #
null==$ (
)==( )
{>> 
try?? 
{@@ 
listenerAA $
.AA$ %
StopAA% )
(AA) *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
SocketExceptionCC -
seCC. 0
)CC0 1
{DD 
IOEE 
.EE 
LoggerEE %
.EE% &
LogEE& )
(EE) *
NLogEE* .
.EE. /
LogLevelEE/ 7
.EE7 8
WarnEE8 <
,EE< =
seEE> @
,EE@ A
$strEEB ]
)EE] ^
;EE^ _
}FF 
}GG 
}HH 
}II 
breakJJ 
;JJ 
}KK 	
whileLL 
(LL 
trueLL 
)LL 
{MM 	
tryNN 
{OO 
intPP 
valuePP 
=PP 
intPP 
.PP  
ParsePP  %
(PP% &
dataPP& *
)PP* +
;PP+ ,
}QQ 
catchRR 
(RR 
FormatExceptionRR "
exceptNumberFormatRR# 5
)RR5 6
{SS 
IOUU 
.UU 
LoggerUU 
.UU 
LogUU 
(UU 
NLogUU "
.UU" #
LogLevelUU# +
.UU+ ,
WarnUU, 0
,UU0 1
exceptNumberFormatUU2 D
,UUD E
$strUUF `
+UUa b
dataUUc g
)UUg h
;UUh i
}VV 
breakWW 
;WW 
}XX 	
}YY 
private]] 
void]] 
GoodG2B]] 
(]] 
)]] 
{^^ 
string__ 
data__ 
;__ 
while`` 
(`` 
true`` 
)`` 
{aa 	
datacc 
=cc 
$strcc 
;cc 
breakdd 
;dd 
}ee 	
whileff 
(ff 
trueff 
)ff 
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
breakqq 
;qq 
}rr 	
}ss 
privatevv 
voidvv 
GoodB2Gvv 
(vv 
)vv 
{ww 
stringxx 
dataxx 
;xx 
whileyy 
(yy 
trueyy 
)yy 
{zz 	
data{{ 
={{ 
$str{{ 
;{{ 
{}} 
TcpListener~~ 
listener~~ $
=~~% &
null~~' +
;~~+ ,
try 
{
 
listener
 
=
 
new
 "
TcpListener
# .
(
. /
	IPAddress
/ 8
.
8 9
Parse
9 >
(
> ?
$str
? K
)
K L
,
L M
$num
N S
)
S T
;
T U
listener
 
.
 
Start
 "
(
" #
)
# $
;
$ %
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
listener
/ 7
.
7 8
AcceptTcpClient
8 G
(
G H
)
H I
)
I J
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
finally
 
{
 
if
 
(
 
listener
  
!=
! #
null
$ (
)
( )
{
 
try
 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
 
}
 
}
 
}
 
break
   
;
   
}
¡¡ 	
while
¢¢ 
(
¢¢ 
true
¢¢ 
)
¢¢ 
{
££ 	
try
¤¤ 
{
¥¥ 
int
¦¦ 
value
¦¦ 
=
¦¦ 
int
¦¦ 
.
¦¦  
Parse
¦¦  %
(
¦¦% &
data
¦¦& *
)
¦¦* +
;
¦¦+ ,
}
§§ 
catch
¨¨ 
(
¨¨ 
FormatException
¨¨ " 
exceptNumberFormat
¨¨# 5
)
¨¨5 6
{
©© 
IO
«« 
.
«« 
Logger
«« 
.
«« 
Log
«« 
(
«« 
NLog
«« "
.
««" #
LogLevel
««# +
.
««+ ,
Warn
««, 0
,
««0 1 
exceptNumberFormat
««2 D
,
««D E
$str
««F j
+
««k l 
exceptNumberFormat
««m 
)«« 
;«« 
}
¬¬ 
break
­­ 
;
­­ 
}
®® 	
}
¯¯ 
public
±± 

override
±± 
void
±± 
Good
±± 
(
±± 
)
±± 
{
²² 
GoodG2B
³³ 
(
³³ 
)
³³ 
;
³³ 
GoodB2G
´´ 
(
´´ 
)
´´ 
;
´´ 
}
µµ 
}·· 
}¸¸ îH
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_17.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_17 C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data'' 
='' 
$str'' 
;'' 
{)) 	
TcpListener** 
listener**  
=**! "
null**# '
;**' (
try++ 
{,, 
listener-- 
=-- 
new-- 
TcpListener-- *
(--* +
	IPAddress--+ 4
.--4 5
Parse--5 :
(--: ;
$str--; G
)--G H
,--H I
$num--J O
)--O P
;--P Q
listener.. 
... 
Start.. 
(.. 
)..  
;..  !
using// 
(// 
	TcpClient//  
tcpConn//! (
=//) *
listener//+ 3
.//3 4
AcceptTcpClient//4 C
(//C D
)//D E
)//E F
{00 
using22 
(22 
StreamReader22 '
sr22( *
=22+ ,
new22- 0
StreamReader221 =
(22= >
tcpConn22> E
.22E F
	GetStream22F O
(22O P
)22P Q
)22Q R
)22R S
{33 
data55 
=55 
sr55 !
.55! "
ReadLine55" *
(55* +
)55+ ,
;55, -
}66 
}77 
}88 
catch99 
(99 
IOException99 
exceptIO99 '
)99' (
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; 
(;; 
NLog;; "
.;;" #
LogLevel;;# +
.;;+ ,
Warn;;, 0
,;;0 1
exceptIO;;2 :
,;;: ;
$str;;< W
);;W X
;;;X Y
}<< 
finally== 
{>> 
if?? 
(?? 
listener?? 
!=?? 
null??  $
)??$ %
{@@ 
tryAA 
{BB 
listenerCC  
.CC  !
StopCC! %
(CC% &
)CC& '
;CC' (
}DD 
catchEE 
(EE 
SocketExceptionEE )
seEE* ,
)EE, -
{FF 
IOGG 
.GG 
LoggerGG !
.GG! "
LogGG" %
(GG% &
NLogGG& *
.GG* +
LogLevelGG+ 3
.GG3 4
WarnGG4 8
,GG8 9
seGG: <
,GG< =
$strGG> Y
)GGY Z
;GGZ [
}HH 
}II 
}JJ 
}KK 	
forLL 
(LL 
intLL 
jLL 
=LL 
$numLL 
;LL 
jLL 
<LL 
$numLL 
;LL 
jLL  
++LL  "
)LL" #
{MM 	
tryNN 
{OO 
intPP 
valuePP 
=PP 
intPP 
.PP  
ParsePP  %
(PP% &
dataPP& *
)PP* +
;PP+ ,
}QQ 
catchRR 
(RR 
FormatExceptionRR "
exceptNumberFormatRR# 5
)RR5 6
{SS 
IOUU 
.UU 
LoggerUU 
.UU 
LogUU 
(UU 
NLogUU "
.UU" #
LogLevelUU# +
.UU+ ,
WarnUU, 0
,UU0 1
exceptNumberFormatUU2 D
,UUD E
$strUUF `
+UUa b
dataUUc g
)UUg h
;UUh i
}VV 
}WW 	
}XX 
private\\ 
void\\ 
GoodG2B\\ 
(\\ 
)\\ 
{]] 
string^^ 
data^^ 
;^^ 
data`` 
=`` 
$str`` 
;`` 
foraa 
(aa 
intaa 
jaa 
=aa 
$numaa 
;aa 
jaa 
<aa 
$numaa 
;aa 
jaa  
++aa  "
)aa" #
{bb 	
trycc 
{dd 
intee 
valueee 
=ee 
intee 
.ee  
Parseee  %
(ee% &
dataee& *
)ee* +
;ee+ ,
}ff 
catchgg 
(gg 
FormatExceptiongg "
exceptNumberFormatgg# 5
)gg5 6
{hh 
IOjj 
.jj 
Loggerjj 
.jj 
Logjj 
(jj 
NLogjj "
.jj" #
LogLeveljj# +
.jj+ ,
Warnjj, 0
,jj0 1
exceptNumberFormatjj2 D
,jjD E
$strjjF `
+jja b
datajjc g
)jjg h
;jjh i
}kk 
}ll 	
}mm 
privatepp 
voidpp 
GoodB2Gpp 
(pp 
)pp 
{qq 
stringrr 
datarr 
;rr 
datass 
=ss 
$strss 
;ss 
{uu 	
TcpListenervv 
listenervv  
=vv! "
nullvv# '
;vv' (
tryww 
{xx 
listeneryy 
=yy 
newyy 
TcpListeneryy *
(yy* +
	IPAddressyy+ 4
.yy4 5
Parseyy5 :
(yy: ;
$stryy; G
)yyG H
,yyH I
$numyyJ O
)yyO P
;yyP Q
listenerzz 
.zz 
Startzz 
(zz 
)zz  
;zz  !
using{{ 
({{ 
	TcpClient{{  
tcpConn{{! (
={{) *
listener{{+ 3
.{{3 4
AcceptTcpClient{{4 C
({{C D
){{D E
){{E F
{|| 
using~~ 
(~~ 
StreamReader~~ '
sr~~( *
=~~+ ,
new~~- 0
StreamReader~~1 =
(~~= >
tcpConn~~> E
.~~E F
	GetStream~~F O
(~~O P
)~~P Q
)~~Q R
)~~R S
{ 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
finally
 
{
 
if
 
(
 
listener
 
!=
 
null
  $
)
$ %
{
 
try
 
{
 
listener
  
.
  !
Stop
! %
(
% &
)
& '
;
' (
}
 
catch
 
(
 
SocketException
 )
se
* ,
)
, -
{
 
IO
 
.
 
Logger
 !
.
! "
Log
" %
(
% &
NLog
& *
.
* +
LogLevel
+ 3
.
3 4
Warn
4 8
,
8 9
se
: <
,
< =
$str
> Y
)
Y Z
;
Z [
}
 
}
 
}
 
}
 	
for
 
(
 
int
 
k
 
=
 
$num
 
;
 
k
 
<
 
$num
 
;
 
k
  
++
  "
)
" #
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ 
(
¡¡ 
NLog
¡¡ "
.
¡¡" #
LogLevel
¡¡# +
.
¡¡+ ,
Warn
¡¡, 0
,
¡¡0 1 
exceptNumberFormat
¡¡2 D
,
¡¡D E
$str
¡¡F j
+
¡¡k l 
exceptNumberFormat
¡¡m 
)¡¡ 
;¡¡ 
}
¢¢ 
}
££ 	
}
¤¤ 
public
¦¦ 

override
¦¦ 
void
¦¦ 
Good
¦¦ 
(
¦¦ 
)
¦¦ 
{
§§ 
GoodG2B
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
GoodB2G
©© 
(
©© 
)
©© 
;
©© 
}
ªª 
}¬¬ 
}­­ îs
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_21.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_21 C
:D E
AbstractTestCaseF V
{ 
private!! 
bool!! 

badPrivate!! 
=!! 
false!! #
;!!# $
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
string%% 
data%% 
;%% 
data&& 
=&& 
$str&& 
;&& 
{(( 	
TcpListener)) 
listener))  
=))! "
null))# '
;))' (
try** 
{++ 
listener,, 
=,, 
new,, 
TcpListener,, *
(,,* +
	IPAddress,,+ 4
.,,4 5
Parse,,5 :
(,,: ;
$str,,; G
),,G H
,,,H I
$num,,J O
),,O P
;,,P Q
listener-- 
.-- 
Start-- 
(-- 
)--  
;--  !
using.. 
(.. 
	TcpClient..  
tcpConn..! (
=..) *
listener..+ 3
...3 4
AcceptTcpClient..4 C
(..C D
)..D E
)..E F
{// 
using11 
(11 
StreamReader11 '
sr11( *
=11+ ,
new11- 0
StreamReader111 =
(11= >
tcpConn11> E
.11E F
	GetStream11F O
(11O P
)11P Q
)11Q R
)11R S
{22 
data44 
=44 
sr44 !
.44! "
ReadLine44" *
(44* +
)44+ ,
;44, -
}55 
}66 
}77 
catch88 
(88 
IOException88 
exceptIO88 '
)88' (
{99 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptIO::2 :
,::: ;
$str::< W
)::W X
;::X Y
};; 
finally<< 
{== 
if>> 
(>> 
listener>> 
!=>> 
null>>  $
)>>$ %
{?? 
try@@ 
{AA 
listenerBB  
.BB  !
StopBB! %
(BB% &
)BB& '
;BB' (
}CC 
catchDD 
(DD 
SocketExceptionDD )
seDD* ,
)DD, -
{EE 
IOFF 
.FF 
LoggerFF !
.FF! "
LogFF" %
(FF% &
NLogFF& *
.FF* +
LogLevelFF+ 3
.FF3 4
WarnFF4 8
,FF8 9
seFF: <
,FF< =
$strFF> Y
)FFY Z
;FFZ [
}GG 
}HH 
}II 
}JJ 	

badPrivateKK 
=KK 
trueKK 
;KK 
BadSinkLL 
(LL 
dataLL 
)LL 
;LL 
}MM 
privateOO 
voidOO 
BadSinkOO 
(OO 
stringOO 
dataOO  $
)OO% &
{PP 
ifQQ 

(QQ 

badPrivateQQ 
)QQ 
{RR 	
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
private`` 
bool`` 
goodB2G1Private``  
=``! "
false``# (
;``( )
privateaa 
boolaa 
goodB2G2Privateaa  
=aa! "
falseaa# (
;aa( )
privatebb 
boolbb 
goodG2BPrivatebb 
=bb  !
falsebb" '
;bb' (
publicdd 

overridedd 
voiddd 
Gooddd 
(dd 
)dd 
{ee 
GoodB2G1ff 
(ff 
)ff 
;ff 
GoodB2G2gg 
(gg 
)gg 
;gg 
GoodG2Bhh 
(hh 
)hh 
;hh 
}ii 
privatell 
voidll 
GoodB2G1ll 
(ll 
)ll 
{mm 
stringnn 
datann 
;nn 
dataoo 
=oo 
$stroo 
;oo 
{qq 	
TcpListenerrr 
listenerrr  
=rr! "
nullrr# '
;rr' (
tryss 
{tt 
listeneruu 
=uu 
newuu 
TcpListeneruu *
(uu* +
	IPAddressuu+ 4
.uu4 5
Parseuu5 :
(uu: ;
$struu; G
)uuG H
,uuH I
$numuuJ O
)uuO P
;uuP Q
listenervv 
.vv 
Startvv 
(vv 
)vv  
;vv  !
usingww 
(ww 
	TcpClientww  
tcpConnww! (
=ww) *
listenerww+ 3
.ww3 4
AcceptTcpClientww4 C
(wwC D
)wwD E
)wwE F
{xx 
usingzz 
(zz 
StreamReaderzz '
srzz( *
=zz+ ,
newzz- 0
StreamReaderzz1 =
(zz= >
tcpConnzz> E
.zzE F
	GetStreamzzF O
(zzO P
)zzP Q
)zzQ R
)zzR S
{{{ 
data}} 
=}} 
sr}} !
.}}! "
ReadLine}}" *
(}}* +
)}}+ ,
;}}, -
}~~ 
} 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
finally
 
{
 
if
 
(
 
listener
 
!=
 
null
  $
)
$ %
{
 
try
 
{
 
listener
  
.
  !
Stop
! %
(
% &
)
& '
;
' (
}
 
catch
 
(
 
SocketException
 )
se
* ,
)
, -
{
 
IO
 
.
 
Logger
 !
.
! "
Log
" %
(
% &
NLog
& *
.
* +
LogLevel
+ 3
.
3 4
Warn
4 8
,
8 9
se
: <
,
< =
$str
> Y
)
Y Z
;
Z [
}
 
}
 
}
 
}
 	
goodB2G1Private
 
=
 
false
 
;
  
GoodB2G1Sink
 
(
 
data
 
)
 
;
 
}
 
private
 
void
 
GoodB2G1Sink
 
(
 
string
 $
data
% )
)
* +
{
 
if
 

(
 
goodB2G1Private
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
   	
try
¡¡ 
{
¢¢ 
int
££ 
value
££ 
=
££ 
int
££ 
.
££  
Parse
££  %
(
££% &
data
££& *
)
££* +
;
££+ ,
}
¤¤ 
catch
¥¥ 
(
¥¥ 
FormatException
¥¥ " 
exceptNumberFormat
¥¥# 5
)
¥¥5 6
{
¦¦ 
IO
¨¨ 
.
¨¨ 
Logger
¨¨ 
.
¨¨ 
Log
¨¨ 
(
¨¨ 
NLog
¨¨ "
.
¨¨" #
LogLevel
¨¨# +
.
¨¨+ ,
Warn
¨¨, 0
,
¨¨0 1 
exceptNumberFormat
¨¨2 D
,
¨¨D E
$str
¨¨F j
+
¨¨k l 
exceptNumberFormat
¨¨m 
)¨¨ 
;¨¨ 
}
©© 
}
ªª 	
}
«« 
private
®® 
void
®® 
GoodB2G2
®® 
(
®® 
)
®® 
{
¯¯ 
string
°° 
data
°° 
;
°° 
data
±± 
=
±± 
$str
±± 
;
±± 
{
³³ 	
TcpListener
´´ 
listener
´´  
=
´´! "
null
´´# '
;
´´' (
try
µµ 
{
¶¶ 
listener
·· 
=
·· 
new
·· 
TcpListener
·· *
(
··* +
	IPAddress
··+ 4
.
··4 5
Parse
··5 :
(
··: ;
$str
··; G
)
··G H
,
··H I
$num
··J O
)
··O P
;
··P Q
listener
¸¸ 
.
¸¸ 
Start
¸¸ 
(
¸¸ 
)
¸¸  
;
¸¸  !
using
¹¹ 
(
¹¹ 
	TcpClient
¹¹  
tcpConn
¹¹! (
=
¹¹) *
listener
¹¹+ 3
.
¹¹3 4
AcceptTcpClient
¹¹4 C
(
¹¹C D
)
¹¹D E
)
¹¹E F
{
ºº 
using
¼¼ 
(
¼¼ 
StreamReader
¼¼ '
sr
¼¼( *
=
¼¼+ ,
new
¼¼- 0
StreamReader
¼¼1 =
(
¼¼= >
tcpConn
¼¼> E
.
¼¼E F
	GetStream
¼¼F O
(
¼¼O P
)
¼¼P Q
)
¼¼Q R
)
¼¼R S
{
½½ 
data
¿¿ 
=
¿¿ 
sr
¿¿ !
.
¿¿! "
ReadLine
¿¿" *
(
¿¿* +
)
¿¿+ ,
;
¿¿, -
}
ÀÀ 
}
ÁÁ 
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
IOException
ÃÃ 
exceptIO
ÃÃ '
)
ÃÃ' (
{
ÄÄ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ 
.
ÅÅ 
Log
ÅÅ 
(
ÅÅ 
NLog
ÅÅ "
.
ÅÅ" #
LogLevel
ÅÅ# +
.
ÅÅ+ ,
Warn
ÅÅ, 0
,
ÅÅ0 1
exceptIO
ÅÅ2 :
,
ÅÅ: ;
$str
ÅÅ< W
)
ÅÅW X
;
ÅÅX Y
}
ÆÆ 
finally
ÇÇ 
{
ÈÈ 
if
ÉÉ 
(
ÉÉ 
listener
ÉÉ 
!=
ÉÉ 
null
ÉÉ  $
)
ÉÉ$ %
{
ÊÊ 
try
ËË 
{
ÌÌ 
listener
ÍÍ  
.
ÍÍ  !
Stop
ÍÍ! %
(
ÍÍ% &
)
ÍÍ& '
;
ÍÍ' (
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
SocketException
ÏÏ )
se
ÏÏ* ,
)
ÏÏ, -
{
ÐÐ 
IO
ÑÑ 
.
ÑÑ 
Logger
ÑÑ !
.
ÑÑ! "
Log
ÑÑ" %
(
ÑÑ% &
NLog
ÑÑ& *
.
ÑÑ* +
LogLevel
ÑÑ+ 3
.
ÑÑ3 4
Warn
ÑÑ4 8
,
ÑÑ8 9
se
ÑÑ: <
,
ÑÑ< =
$str
ÑÑ> Y
)
ÑÑY Z
;
ÑÑZ [
}
ÒÒ 
}
ÓÓ 
}
ÔÔ 
}
ÕÕ 	
goodB2G2Private
ÖÖ 
=
ÖÖ 
true
ÖÖ 
;
ÖÖ 
GoodB2G2Sink
×× 
(
×× 
data
×× 
)
×× 
;
×× 
}
ØØ 
private
ÚÚ 
void
ÚÚ 
GoodB2G2Sink
ÚÚ 
(
ÚÚ 
string
ÚÚ $
data
ÚÚ% )
)
ÚÚ* +
{
ÛÛ 
if
ÜÜ 

(
ÜÜ 
goodB2G2Private
ÜÜ 
)
ÜÜ 
{
ÝÝ 	
try
ÞÞ 
{
ßß 
int
àà 
value
àà 
=
àà 
int
àà 
.
àà  
Parse
àà  %
(
àà% &
data
àà& *
)
àà* +
;
àà+ ,
}
áá 
catch
ââ 
(
ââ 
FormatException
ââ " 
exceptNumberFormat
ââ# 5
)
ââ5 6
{
ãã 
IO
åå 
.
åå 
Logger
åå 
.
åå 
Log
åå 
(
åå 
NLog
åå "
.
åå" #
LogLevel
åå# +
.
åå+ ,
Warn
åå, 0
,
åå0 1 
exceptNumberFormat
åå2 D
,
ååD E
$str
ååF j
+
ååk l 
exceptNumberFormat
ååm 
)åå 
;åå 
}
ææ 
}
çç 	
}
èè 
private
ëë 
void
ëë 
GoodG2B
ëë 
(
ëë 
)
ëë 
{
ìì 
string
íí 
data
íí 
;
íí 
data
ïï 
=
ïï 
$str
ïï 
;
ïï 
goodG2BPrivate
ðð 
=
ðð 
true
ðð 
;
ðð 
GoodG2BSink
ññ 
(
ññ 
data
ññ 
)
ññ 
;
ññ 
}
òò 
private
ôô 
void
ôô 
GoodG2BSink
ôô 
(
ôô 
string
ôô #
data
ôô$ (
)
ôô) *
{
õõ 
if
öö 

(
öö 
goodG2BPrivate
öö 
)
öö 
{
÷÷ 	
try
øø 
{
ùù 
int
úú 
value
úú 
=
úú 
int
úú 
.
úú  
Parse
úú  %
(
úú% &
data
úú& *
)
úú* +
;
úú+ ,
}
ûû 
catch
üü 
(
üü 
FormatException
üü " 
exceptNumberFormat
üü# 5
)
üü5 6
{
ýý 
IO
ÿÿ 
.
ÿÿ 
Logger
ÿÿ 
.
ÿÿ 
Log
ÿÿ 
(
ÿÿ 
NLog
ÿÿ "
.
ÿÿ" #
LogLevel
ÿÿ# +
.
ÿÿ+ ,
Warn
ÿÿ, 0
,
ÿÿ0 1 
exceptNumberFormat
ÿÿ2 D
,
ÿÿD E
$str
ÿÿF `
+
ÿÿa b
data
ÿÿc g
)
ÿÿg h
;
ÿÿh i
}
 
}
 	
}
 
} 
} ýU
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_22a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_22a D
:E F
AbstractTestCaseG W
{ 
public!! 

static!! 
bool!! 
badPublicStatic!! &
=!!' (
false!!) .
;!!. /
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
string%% 
data%% 
=%% 
null%% 
;%% 
data&& 
=&& 
$str&& 
;&& 
{(( 	
TcpListener)) 
listener))  
=))! "
null))# '
;))' (
try** 
{++ 
listener,, 
=,, 
new,, 
TcpListener,, *
(,,* +
	IPAddress,,+ 4
.,,4 5
Parse,,5 :
(,,: ;
$str,,; G
),,G H
,,,H I
$num,,J O
),,O P
;,,P Q
listener-- 
.-- 
Start-- 
(-- 
)--  
;--  !
using.. 
(.. 
	TcpClient..  
tcpConn..! (
=..) *
listener..+ 3
...3 4
AcceptTcpClient..4 C
(..C D
)..D E
)..E F
{// 
using11 
(11 
StreamReader11 '
sr11( *
=11+ ,
new11- 0
StreamReader111 =
(11= >
tcpConn11> E
.11E F
	GetStream11F O
(11O P
)11P Q
)11Q R
)11R S
{22 
data44 
=44 
sr44 !
.44! "
ReadLine44" *
(44* +
)44+ ,
;44, -
}55 
}66 
}77 
catch88 
(88 
IOException88 
exceptIO88 '
)88' (
{99 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptIO::2 :
,::: ;
$str::< W
)::W X
;::X Y
};; 
finally<< 
{== 
if>> 
(>> 
listener>> 
!=>> 
null>>  $
)>>$ %
{?? 
try@@ 
{AA 
listenerBB  
.BB  !
StopBB! %
(BB% &
)BB& '
;BB' (
}CC 
catchDD 
(DD 
SocketExceptionDD )
seDD* ,
)DD, -
{EE 
IOFF 
.FF 
LoggerFF !
.FF! "
LogFF" %
(FF% &
NLogFF& *
.FF* +
LogLevelFF+ 3
.FF3 4
WarnFF4 8
,FF8 9
seFF: <
,FF< =
$strFF> Y
)FFY Z
;FFZ [
}GG 
}HH 
}II 
}JJ 	
badPublicStaticKK 
=KK 
trueKK 
;KK J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_22bLL F
.LLF G
BadSinkLLG N
(LLN O
dataLLO S
)LLT U
;LLU V
}MM 
publicPP 

staticPP 
boolPP  
goodB2G1PublicStaticPP +
=PP, -
falsePP. 3
;PP3 4
publicQQ 

staticQQ 
boolQQ  
goodB2G2PublicStaticQQ +
=QQ, -
falseQQ. 3
;QQ3 4
publicRR 

staticRR 
boolRR 
goodG2BPublicStaticRR *
=RR+ ,
falseRR- 2
;RR2 3
publicTT 

overrideTT 
voidTT 
GoodTT 
(TT 
)TT 
{UU 
GoodB2G1VV 
(VV 
)VV 
;VV 
GoodB2G2WW 
(WW 
)WW 
;WW 
GoodG2BXX 
(XX 
)XX 
;XX 
}YY 
private\\ 
void\\ 
GoodB2G1\\ 
(\\ 
)\\ 
{]] 
string^^ 
data^^ 
=^^ 
null^^ 
;^^ 
data__ 
=__ 
$str__ 
;__ 
{aa 	
TcpListenerbb 
listenerbb  
=bb! "
nullbb# '
;bb' (
trycc 
{dd 
listeneree 
=ee 
newee 
TcpListeneree *
(ee* +
	IPAddressee+ 4
.ee4 5
Parseee5 :
(ee: ;
$stree; G
)eeG H
,eeH I
$numeeJ O
)eeO P
;eeP Q
listenerff 
.ff 
Startff 
(ff 
)ff  
;ff  !
usinggg 
(gg 
	TcpClientgg  
tcpConngg! (
=gg) *
listenergg+ 3
.gg3 4
AcceptTcpClientgg4 C
(ggC D
)ggD E
)ggE F
{hh 
usingjj 
(jj 
StreamReaderjj '
srjj( *
=jj+ ,
newjj- 0
StreamReaderjj1 =
(jj= >
tcpConnjj> E
.jjE F
	GetStreamjjF O
(jjO P
)jjP Q
)jjQ R
)jjR S
{kk 
datamm 
=mm 
srmm !
.mm! "
ReadLinemm" *
(mm* +
)mm+ ,
;mm, -
}nn 
}oo 
}pp 
catchqq 
(qq 
IOExceptionqq 
exceptIOqq '
)qq' (
{rr 
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss "
.ss" #
LogLevelss# +
.ss+ ,
Warnss, 0
,ss0 1
exceptIOss2 :
,ss: ;
$strss< W
)ssW X
;ssX Y
}tt 
finallyuu 
{vv 
ifww 
(ww 
listenerww 
!=ww 
nullww  $
)ww$ %
{xx 
tryyy 
{zz 
listener{{  
.{{  !
Stop{{! %
({{% &
){{& '
;{{' (
}|| 
catch}} 
(}} 
SocketException}} )
se}}* ,
)}}, -
{~~ 
IO 
. 
Logger !
.! "
Log" %
(% &
NLog& *
.* +
LogLevel+ 3
.3 4
Warn4 8
,8 9
se: <
,< =
$str> Y
)Y Z
;Z [
}
 
}
 
}
 
}
 	"
goodB2G1PublicStatic
 
=
 
false
 $
;
$ %L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_22b
 F
.
F G
GoodB2G1Sink
G S
(
S T
data
T X
)
Y Z
;
Z [
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
=
 
null
 
;
 
data
 
=
 
$str
 
;
 
{
 	
TcpListener
 
listener
  
=
! "
null
# '
;
' (
try
 
{
 
listener
 
=
 
new
 
TcpListener
 *
(
* +
	IPAddress
+ 4
.
4 5
Parse
5 :
(
: ;
$str
; G
)
G H
,
H I
$num
J O
)
O P
;
P Q
listener
 
.
 
Start
 
(
 
)
  
;
  !
using
 
(
 
	TcpClient
  
tcpConn
! (
=
) *
listener
+ 3
.
3 4
AcceptTcpClient
4 C
(
C D
)
D E
)
E F
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
tcpConn
> E
.
E F
	GetStream
F O
(
O P
)
P Q
)
Q R
)
R S
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
   
.
   
Logger
   
.
   
Log
   
(
   
NLog
   "
.
  " #
LogLevel
  # +
.
  + ,
Warn
  , 0
,
  0 1
exceptIO
  2 :
,
  : ;
$str
  < W
)
  W X
;
  X Y
}
¡¡ 
finally
¢¢ 
{
££ 
if
¤¤ 
(
¤¤ 
listener
¤¤ 
!=
¤¤ 
null
¤¤  $
)
¤¤$ %
{
¥¥ 
try
¦¦ 
{
§§ 
listener
¨¨  
.
¨¨  !
Stop
¨¨! %
(
¨¨% &
)
¨¨& '
;
¨¨' (
}
©© 
catch
ªª 
(
ªª 
SocketException
ªª )
se
ªª* ,
)
ªª, -
{
«« 
IO
¬¬ 
.
¬¬ 
Logger
¬¬ !
.
¬¬! "
Log
¬¬" %
(
¬¬% &
NLog
¬¬& *
.
¬¬* +
LogLevel
¬¬+ 3
.
¬¬3 4
Warn
¬¬4 8
,
¬¬8 9
se
¬¬: <
,
¬¬< =
$str
¬¬> Y
)
¬¬Y Z
;
¬¬Z [
}
­­ 
}
®® 
}
¯¯ 
}
°° 	"
goodB2G2PublicStatic
±± 
=
±± 
true
±± #
;
±±# $L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_22b
²² F
.
²²F G
GoodB2G2Sink
²²G S
(
²²S T
data
²²T X
)
²²Y Z
;
²²Z [
}
³³ 
private
¶¶ 
void
¶¶ 
GoodG2B
¶¶ 
(
¶¶ 
)
¶¶ 
{
·· 
string
¸¸ 
data
¸¸ 
=
¸¸ 
null
¸¸ 
;
¸¸ 
data
ºº 
=
ºº 
$str
ºº 
;
ºº !
goodG2BPublicStatic
»» 
=
»» 
true
»» "
;
»»" #L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_22b
¼¼ F
.
¼¼F G
GoodG2BSink
¼¼G R
(
¼¼R S
data
¼¼S W
)
¼¼X Y
;
¼¼Y Z
}
½½ 
}¿¿ 
}ÀÀ Ô(
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_22b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_22b D
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
if 

( J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_22a J
.J K
badPublicStaticK Z
)Z [
{ 	
try   
{!! 
int"" 
value"" 
="" 
int"" 
.""  
Parse""  %
(""% &
data""& *
)""* +
;""+ ,
}## 
catch$$ 
($$ 
FormatException$$ "
exceptNumberFormat$$# 5
)$$5 6
{%% 
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' "
.''" #
LogLevel''# +
.''+ ,
Warn'', 0
,''0 1
exceptNumberFormat''2 D
,''D E
$str''F `
+''a b
data''c g
)''g h
;''h i
}(( 
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
}00 
public55 

static55 
void55 
GoodB2G1Sink55 #
(55# $
string55$ *
data55+ /
)550 1
{66 
if77 

(77 J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_22a77 J
.77J K 
goodB2G1PublicStatic77K _
)77_ `
{88 	
data;; 
=;; 
null;; 
;;; 
}<< 	
else== 
{>> 	
try?? 
{@@ 
intAA 
valueAA 
=AA 
intAA 
.AA  
ParseAA  %
(AA% &
dataAA& *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
FormatExceptionCC "
exceptNumberFormatCC# 5
)CC5 6
{DD 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
exceptNumberFormatFF2 D
,FFD E
$strFFF j
+FFk l
exceptNumberFormatFFm 
)	FF 
;
FF 
}GG 
}HH 	
}II 
publicLL 

staticLL 
voidLL 
GoodB2G2SinkLL #
(LL# $
stringLL$ *
dataLL+ /
)LL0 1
{MM 
ifNN 

(NN J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_22aNN J
.NNJ K 
goodB2G2PublicStaticNNK _
)NN_ `
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF j
+WWk l
exceptNumberFormatWWm 
)	WW 
;
WW 
}XX 
}YY 	
elseZZ 
{[[ 	
data^^ 
=^^ 
null^^ 
;^^ 
}__ 	
}`` 
publiccc 

staticcc 
voidcc 
GoodG2BSinkcc "
(cc" #
stringcc# )
datacc* .
)cc/ 0
{dd 
ifee 

(ee J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_22aee J
.eeJ K
goodG2BPublicStaticeeK ^
)ee^ _
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF `
+nna b
datannc g
)nng h
;nnh i
}oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
}ww 
}yy 
}zz J
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_31.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_31 C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
dataCopy"" 
;"" 
{## 	
string$$ 
data$$ 
;$$ 
data%% 
=%% 
$str%% 
;%% 
{'' 
TcpListener(( 
listener(( $
=((% &
null((' +
;((+ ,
try)) 
{** 
listener++ 
=++ 
new++ "
TcpListener++# .
(++. /
	IPAddress++/ 8
.++8 9
Parse++9 >
(++> ?
$str++? K
)++K L
,++L M
$num++N S
)++S T
;++T U
listener,, 
.,, 
Start,, "
(,," #
),,# $
;,,$ %
using-- 
(-- 
	TcpClient-- $
tcpConn--% ,
=--- .
listener--/ 7
.--7 8
AcceptTcpClient--8 G
(--G H
)--H I
)--I J
{.. 
using00 
(00 
StreamReader00 +
sr00, .
=00/ 0
new001 4
StreamReader005 A
(00A B
tcpConn00B I
.00I J
	GetStream00J S
(00S T
)00T U
)00U V
)00V W
{11 
data33  
=33! "
sr33# %
.33% &
ReadLine33& .
(33. /
)33/ 0
;330 1
}44 
}55 
}66 
catch77 
(77 
IOException77 "
exceptIO77# +
)77+ ,
{88 
IO99 
.99 
Logger99 
.99 
Log99 !
(99! "
NLog99" &
.99& '
LogLevel99' /
.99/ 0
Warn990 4
,994 5
exceptIO996 >
,99> ?
$str99@ [
)99[ \
;99\ ]
}:: 
finally;; 
{<< 
if== 
(== 
listener==  
!===! #
null==$ (
)==( )
{>> 
try?? 
{@@ 
listenerAA $
.AA$ %
StopAA% )
(AA) *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
SocketExceptionCC -
seCC. 0
)CC0 1
{DD 
IOEE 
.EE 
LoggerEE %
.EE% &
LogEE& )
(EE) *
NLogEE* .
.EE. /
LogLevelEE/ 7
.EE7 8
WarnEE8 <
,EE< =
seEE> @
,EE@ A
$strEEB ]
)EE] ^
;EE^ _
}FF 
}GG 
}HH 
}II 
dataCopyJJ 
=JJ 
dataJJ 
;JJ 
}KK 	
{LL 	
stringMM 
dataMM 
=MM 
dataCopyMM "
;MM" #
tryNN 
{OO 
intPP 
valuePP 
=PP 
intPP 
.PP  
ParsePP  %
(PP% &
dataPP& *
)PP* +
;PP+ ,
}QQ 
catchRR 
(RR 
FormatExceptionRR "
exceptNumberFormatRR# 5
)RR5 6
{SS 
IOUU 
.UU 
LoggerUU 
.UU 
LogUU 
(UU 
NLogUU "
.UU" #
LogLevelUU# +
.UU+ ,
WarnUU, 0
,UU0 1
exceptNumberFormatUU2 D
,UUD E
$strUUF `
+UUa b
dataUUc g
)UUg h
;UUh i
}VV 
}WW 	
}XX 
public[[ 

override[[ 
void[[ 
Good[[ 
([[ 
)[[ 
{\\ 
GoodG2B]] 
(]] 
)]] 
;]] 
GoodB2G^^ 
(^^ 
)^^ 
;^^ 
}__ 
privatebb 
voidbb 
GoodG2Bbb 
(bb 
)bb 
{cc 
stringdd 
dataCopydd 
;dd 
{ee 	
stringff 
dataff 
;ff 
datahh 
=hh 
$strhh 
;hh 
dataCopyii 
=ii 
dataii 
;ii 
}jj 	
{kk 	
stringll 
datall 
=ll 
dataCopyll "
;ll" #
trymm 
{nn 
intoo 
valueoo 
=oo 
intoo 
.oo  
Parseoo  %
(oo% &
dataoo& *
)oo* +
;oo+ ,
}pp 
catchqq 
(qq 
FormatExceptionqq "
exceptNumberFormatqq# 5
)qq5 6
{rr 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
exceptNumberFormattt2 D
,ttD E
$strttF `
+tta b
datattc g
)ttg h
;tth i
}uu 
}vv 	
}ww 
privatezz 
voidzz 
GoodB2Gzz 
(zz 
)zz 
{{{ 
string|| 
dataCopy|| 
;|| 
{}} 	
string~~ 
data~~ 
;~~ 
data 
= 
$str 
; 
{
 
TcpListener
 
listener
 $
=
% &
null
' +
;
+ ,
try
 
{
 
listener
 
=
 
new
 "
TcpListener
# .
(
. /
	IPAddress
/ 8
.
8 9
Parse
9 >
(
> ?
$str
? K
)
K L
,
L M
$num
N S
)
S T
;
T U
listener
 
.
 
Start
 "
(
" #
)
# $
;
$ %
using
 
(
 
	TcpClient
 $
tcpConn
% ,
=
- .
listener
/ 7
.
7 8
AcceptTcpClient
8 G
(
G H
)
H I
)
I J
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
tcpConn
B I
.
I J
	GetStream
J S
(
S T
)
T U
)
U V
)
V W
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
finally
 
{
 
if
 
(
 
listener
  
!=
! #
null
$ (
)
( )
{
 
try
 
{
 
listener
 $
.
$ %
Stop
% )
(
) *
)
* +
;
+ ,
}
 
catch
 
(
 
SocketException
 -
se
. 0
)
0 1
{
 
IO
 
.
 
Logger
 %
.
% &
Log
& )
(
) *
NLog
* .
.
. /
LogLevel
/ 7
.
7 8
Warn
8 <
,
< =
se
> @
,
@ A
$str
B ]
)
] ^
;
^ _
}
   
}
¡¡ 
}
¢¢ 
}
££ 
dataCopy
¤¤ 
=
¤¤ 
data
¤¤ 
;
¤¤ 
}
¥¥ 	
{
¦¦ 	
string
§§ 
data
§§ 
=
§§ 
dataCopy
§§ "
;
§§" #
try
¨¨ 
{
©© 
int
ªª 
value
ªª 
=
ªª 
int
ªª 
.
ªª  
Parse
ªª  %
(
ªª% &
data
ªª& *
)
ªª* +
;
ªª+ ,
}
«« 
catch
¬¬ 
(
¬¬ 
FormatException
¬¬ " 
exceptNumberFormat
¬¬# 5
)
¬¬5 6
{
­­ 
IO
¯¯ 
.
¯¯ 
Logger
¯¯ 
.
¯¯ 
Log
¯¯ 
(
¯¯ 
NLog
¯¯ "
.
¯¯" #
LogLevel
¯¯# +
.
¯¯+ ,
Warn
¯¯, 0
,
¯¯0 1 
exceptNumberFormat
¯¯2 D
,
¯¯D E
$str
¯¯F j
+
¯¯k l 
exceptNumberFormat
¯¯m 
)¯¯ 
;¯¯ 
}
°° 
}
±± 	
}
²² 
}´´ 
}µµ ÐI
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_41.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_41 C
:D E
AbstractTestCaseF V
{ 
private   
static   
void   
BadSink   
(    
string    &
data  ' +
)  , -
{!! 
try"" 
{## 	
int$$ 
value$$ 
=$$ 
int$$ 
.$$ 
Parse$$ !
($$! "
data$$" &
)$$& '
;$$' (
}%% 	
catch&& 
(&& 
FormatException&& 
exceptNumberFormat&& 1
)&&1 2
{'' 	
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) 
.)) 
LogLevel)) '
.))' (
Warn))( ,
,)), -
exceptNumberFormat)). @
,))@ A
$str))B \
+))] ^
data))_ c
)))c d
;))d e
}** 	
}++ 
public-- 

override-- 
void-- 
Bad-- 
(-- 
)-- 
{.. 
string// 
data// 
;// 
data00 
=00 
$str00 
;00 
{22 	
TcpListener33 
listener33  
=33! "
null33# '
;33' (
try44 
{55 
listener66 
=66 
new66 
TcpListener66 *
(66* +
	IPAddress66+ 4
.664 5
Parse665 :
(66: ;
$str66; G
)66G H
,66H I
$num66J O
)66O P
;66P Q
listener77 
.77 
Start77 
(77 
)77  
;77  !
using88 
(88 
	TcpClient88  
tcpConn88! (
=88) *
listener88+ 3
.883 4
AcceptTcpClient884 C
(88C D
)88D E
)88E F
{99 
using;; 
(;; 
StreamReader;; '
sr;;( *
=;;+ ,
new;;- 0
StreamReader;;1 =
(;;= >
tcpConn;;> E
.;;E F
	GetStream;;F O
(;;O P
);;P Q
);;Q R
);;R S
{<< 
data>> 
=>> 
sr>> !
.>>! "
ReadLine>>" *
(>>* +
)>>+ ,
;>>, -
}?? 
}@@ 
}AA 
catchBB 
(BB 
IOExceptionBB 
exceptIOBB '
)BB' (
{CC 
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD "
.DD" #
LogLevelDD# +
.DD+ ,
WarnDD, 0
,DD0 1
exceptIODD2 :
,DD: ;
$strDD< W
)DDW X
;DDX Y
}EE 
finallyFF 
{GG 
ifHH 
(HH 
listenerHH 
!=HH 
nullHH  $
)HH$ %
{II 
tryJJ 
{KK 
listenerLL  
.LL  !
StopLL! %
(LL% &
)LL& '
;LL' (
}MM 
catchNN 
(NN 
SocketExceptionNN )
seNN* ,
)NN, -
{OO 
IOPP 
.PP 
LoggerPP !
.PP! "
LogPP" %
(PP% &
NLogPP& *
.PP* +
LogLevelPP+ 3
.PP3 4
WarnPP4 8
,PP8 9
sePP: <
,PP< =
$strPP> Y
)PPY Z
;PPZ [
}QQ 
}RR 
}SS 
}TT 	
BadSinkUU 
(UU 
dataUU 
)UU 
;UU 
}VV 
publicYY 

overrideYY 
voidYY 
GoodYY 
(YY 
)YY 
{ZZ 
GoodG2B[[ 
([[ 
)[[ 
;[[ 
GoodB2G\\ 
(\\ 
)\\ 
;\\ 
}]] 
private__ 
static__ 
void__ 
GoodG2BSink__ #
(__# $
string__$ *
data__+ /
)__0 1
{`` 
tryaa 
{bb 	
intcc 
valuecc 
=cc 
intcc 
.cc 
Parsecc !
(cc! "
datacc" &
)cc& '
;cc' (
}dd 	
catchee 
(ee 
FormatExceptionee 
exceptNumberFormatee 1
)ee1 2
{ff 	
IOhh 
.hh 
Loggerhh 
.hh 
Loghh 
(hh 
NLoghh 
.hh 
LogLevelhh '
.hh' (
Warnhh( ,
,hh, -
exceptNumberFormathh. @
,hh@ A
$strhhB \
+hh] ^
datahh_ c
)hhc d
;hhd e
}ii 	
}jj 
privatemm 
staticmm 
voidmm 
GoodG2Bmm 
(mm  
)mm  !
{nn 
stringoo 
dataoo 
;oo 
dataqq 
=qq 
$strqq 
;qq 
GoodG2BSinkrr 
(rr 
datarr 
)rr 
;rr 
}ss 
privateuu 
staticuu 
voiduu 
GoodB2GSinkuu #
(uu# $
stringuu$ *
datauu+ /
)uu0 1
{vv 
tryww 
{xx 	
intyy 
valueyy 
=yy 
intyy 
.yy 
Parseyy !
(yy! "
datayy" &
)yy& '
;yy' (
}zz 	
catch{{ 
({{ 
FormatException{{ 
exceptNumberFormat{{ 1
){{1 2
{|| 	
IO~~ 
.~~ 
Logger~~ 
.~~ 
Log~~ 
(~~ 
NLog~~ 
.~~ 
LogLevel~~ '
.~~' (
Warn~~( ,
,~~, -
exceptNumberFormat~~. @
,~~@ A
$str~~B f
+~~g h
exceptNumberFormat~~i {
)~~{ |
;~~| }
} 	
}
 
private
 
static
 
void
 
GoodB2G
 
(
  
)
  !
{
 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
{
 	
TcpListener
 
listener
  
=
! "
null
# '
;
' (
try
 
{
 
listener
 
=
 
new
 
TcpListener
 *
(
* +
	IPAddress
+ 4
.
4 5
Parse
5 :
(
: ;
$str
; G
)
G H
,
H I
$num
J O
)
O P
;
P Q
listener
 
.
 
Start
 
(
 
)
  
;
  !
using
 
(
 
	TcpClient
  
tcpConn
! (
=
) *
listener
+ 3
.
3 4
AcceptTcpClient
4 C
(
C D
)
D E
)
E F
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
tcpConn
> E
.
E F
	GetStream
F O
(
O P
)
P Q
)
Q R
)
R S
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
finally
 
{
 
if
 
(
 
listener
 
!=
 
null
  $
)
$ %
{
 
try
   
{
¡¡ 
listener
¢¢  
.
¢¢  !
Stop
¢¢! %
(
¢¢% &
)
¢¢& '
;
¢¢' (
}
££ 
catch
¤¤ 
(
¤¤ 
SocketException
¤¤ )
se
¤¤* ,
)
¤¤, -
{
¥¥ 
IO
¦¦ 
.
¦¦ 
Logger
¦¦ !
.
¦¦! "
Log
¦¦" %
(
¦¦% &
NLog
¦¦& *
.
¦¦* +
LogLevel
¦¦+ 3
.
¦¦3 4
Warn
¦¦4 8
,
¦¦8 9
se
¦¦: <
,
¦¦< =
$str
¦¦> Y
)
¦¦Y Z
;
¦¦Z [
}
§§ 
}
¨¨ 
}
©© 
}
ªª 	
GoodB2GSink
«« 
(
«« 
data
«« 
)
«« 
;
«« 
}
¬¬ 
}®® 
}¯¯ K
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_42.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_42 C
:D E
AbstractTestCaseF V
{ 
private   
static   
string   
	BadSource   #
(  # $
)  $ %
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
TcpListener&& 
listener&&  
=&&! "
null&&# '
;&&' (
try'' 
{(( 
listener)) 
=)) 
new)) 
TcpListener)) *
())* +
	IPAddress))+ 4
.))4 5
Parse))5 :
()): ;
$str)); G
)))G H
,))H I
$num))J O
)))O P
;))P Q
listener** 
.** 
Start** 
(** 
)**  
;**  !
using++ 
(++ 
	TcpClient++  
tcpConn++! (
=++) *
listener+++ 3
.++3 4
AcceptTcpClient++4 C
(++C D
)++D E
)++E F
{,, 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
tcpConn..> E
...E F
	GetStream..F O
(..O P
)..P Q
)..Q R
)..R S
{// 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
finally99 
{:: 
if;; 
(;; 
listener;; 
!=;; 
null;;  $
);;$ %
{<< 
try== 
{>> 
listener??  
.??  !
Stop??! %
(??% &
)??& '
;??' (
}@@ 
catchAA 
(AA 
SocketExceptionAA )
seAA* ,
)AA, -
{BB 
IOCC 
.CC 
LoggerCC !
.CC! "
LogCC" %
(CC% &
NLogCC& *
.CC* +
LogLevelCC+ 3
.CC3 4
WarnCC4 8
,CC8 9
seCC: <
,CC< =
$strCC> Y
)CCY Z
;CCZ [
}DD 
}EE 
}FF 
}GG 	
returnHH 
dataHH 
;HH 
}II 
publicKK 

overrideKK 
voidKK 
BadKK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
=MM 
	BadSourceMM 
(MM  
)MM  !
;MM! "
tryNN 
{OO 	
intPP 
valuePP 
=PP 
intPP 
.PP 
ParsePP !
(PP! "
dataPP" &
)PP& '
;PP' (
}QQ 	
catchRR 
(RR 
FormatExceptionRR 
exceptNumberFormatRR 1
)RR1 2
{SS 	
IOUU 
.UU 
LoggerUU 
.UU 
LogUU 
(UU 
NLogUU 
.UU 
LogLevelUU '
.UU' (
WarnUU( ,
,UU, -
exceptNumberFormatUU. @
,UU@ A
$strUUB \
+UU] ^
dataUU_ c
)UUc d
;UUd e
}VV 	
}WW 
private[[ 
static[[ 
string[[ 
GoodG2BSource[[ '
([[' (
)[[( )
{\\ 
string]] 
data]] 
;]] 
data__ 
=__ 
$str__ 
;__ 
return`` 
data`` 
;`` 
}aa 
privatecc 
staticcc 
voidcc 
GoodG2Bcc 
(cc  
)cc  !
{dd 
stringee 
dataee 
=ee 
GoodG2BSourceee #
(ee# $
)ee$ %
;ee% &
tryff 
{gg 	
inthh 
valuehh 
=hh 
inthh 
.hh 
Parsehh !
(hh! "
datahh" &
)hh& '
;hh' (
}ii 	
catchjj 
(jj 
FormatExceptionjj 
exceptNumberFormatjj 1
)jj1 2
{kk 	
IOmm 
.mm 
Loggermm 
.mm 
Logmm 
(mm 
NLogmm 
.mm 
LogLevelmm '
.mm' (
Warnmm( ,
,mm, -
exceptNumberFormatmm. @
,mm@ A
$strmmB \
+mm] ^
datamm_ c
)mmc d
;mmd e
}nn 	
}oo 
privaterr 
staticrr 
stringrr 
GoodB2GSourcerr '
(rr' (
)rr( )
{ss 
stringtt 
datatt 
;tt 
datauu 
=uu 
$struu 
;uu 
{ww 	
TcpListenerxx 
listenerxx  
=xx! "
nullxx# '
;xx' (
tryyy 
{zz 
listener{{ 
={{ 
new{{ 
TcpListener{{ *
({{* +
	IPAddress{{+ 4
.{{4 5
Parse{{5 :
({{: ;
$str{{; G
){{G H
,{{H I
$num{{J O
){{O P
;{{P Q
listener|| 
.|| 
Start|| 
(|| 
)||  
;||  !
using}} 
(}} 
	TcpClient}}  
tcpConn}}! (
=}}) *
listener}}+ 3
.}}3 4
AcceptTcpClient}}4 C
(}}C D
)}}D E
)}}E F
{~~ 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
tcpConn
> E
.
E F
	GetStream
F O
(
O P
)
P Q
)
Q R
)
R S
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
finally
 
{
 
if
 
(
 
listener
 
!=
 
null
  $
)
$ %
{
 
try
 
{
 
listener
  
.
  !
Stop
! %
(
% &
)
& '
;
' (
}
 
catch
 
(
 
SocketException
 )
se
* ,
)
, -
{
 
IO
 
.
 
Logger
 !
.
! "
Log
" %
(
% &
NLog
& *
.
* +
LogLevel
+ 3
.
3 4
Warn
4 8
,
8 9
se
: <
,
< =
$str
> Y
)
Y Z
;
Z [
}
 
}
 
}
 
}
 	
return
 
data
 
;
 
}
 
private
 
static
 
void
 
GoodB2G
 
(
  
)
  !
{
 
string
 
data
 
=
 
GoodB2GSource
 #
(
# $
)
$ %
;
% &
try
   
{
¡¡ 	
int
¢¢ 
value
¢¢ 
=
¢¢ 
int
¢¢ 
.
¢¢ 
Parse
¢¢ !
(
¢¢! "
data
¢¢" &
)
¢¢& '
;
¢¢' (
}
££ 	
catch
¤¤ 
(
¤¤ 
FormatException
¤¤  
exceptNumberFormat
¤¤ 1
)
¤¤1 2
{
¥¥ 	
IO
§§ 
.
§§ 
Logger
§§ 
.
§§ 
Log
§§ 
(
§§ 
NLog
§§ 
.
§§ 
LogLevel
§§ '
.
§§' (
Warn
§§( ,
,
§§, - 
exceptNumberFormat
§§. @
,
§§@ A
$str
§§B f
+
§§g h 
exceptNumberFormat
§§i {
)
§§{ |
;
§§| }
}
¨¨ 	
}
©© 
public
«« 

override
«« 
void
«« 
Good
«« 
(
«« 
)
«« 
{
¬¬ 
GoodG2B
­­ 
(
­­ 
)
­­ 
;
­­ 
GoodB2G
®® 
(
®® 
)
®® 
;
®® 
}
¯¯ 
}±± 
}²² ïM
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_45.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_45 C
:D E
AbstractTestCaseF V
{ 
private   
string   
dataBad   
;   
private!! 
string!! 
dataGoodG2B!! 
;!! 
private"" 
string"" 
dataGoodB2G"" 
;"" 
private$$ 
void$$ 
BadSink$$ 
($$ 
)$$ 
{%% 
string&& 
data&& 
=&& 
dataBad&& 
;&& 
try'' 
{(( 	
int)) 
value)) 
=)) 
int)) 
.)) 
Parse)) !
())! "
data))" &
)))& '
;))' (
}** 	
catch++ 
(++ 
FormatException++ 
exceptNumberFormat++ 1
)++1 2
{,, 	
IO.. 
... 
Logger.. 
... 
Log.. 
(.. 
NLog.. 
... 
LogLevel.. '
...' (
Warn..( ,
,.., -
exceptNumberFormat... @
,..@ A
$str..B \
+..] ^
data.._ c
)..c d
;..d e
}// 	
}00 
public22 

override22 
void22 
Bad22 
(22 
)22 
{33 
string44 
data44 
;44 
data55 
=55 
$str55 
;55 
{77 	
TcpListener88 
listener88  
=88! "
null88# '
;88' (
try99 
{:: 
listener;; 
=;; 
new;; 
TcpListener;; *
(;;* +
	IPAddress;;+ 4
.;;4 5
Parse;;5 :
(;;: ;
$str;;; G
);;G H
,;;H I
$num;;J O
);;O P
;;;P Q
listener<< 
.<< 
Start<< 
(<< 
)<<  
;<<  !
using== 
(== 
	TcpClient==  
tcpConn==! (
===) *
listener==+ 3
.==3 4
AcceptTcpClient==4 C
(==C D
)==D E
)==E F
{>> 
using@@ 
(@@ 
StreamReader@@ '
sr@@( *
=@@+ ,
new@@- 0
StreamReader@@1 =
(@@= >
tcpConn@@> E
.@@E F
	GetStream@@F O
(@@O P
)@@P Q
)@@Q R
)@@R S
{AA 
dataCC 
=CC 
srCC !
.CC! "
ReadLineCC" *
(CC* +
)CC+ ,
;CC, -
}DD 
}EE 
}FF 
catchGG 
(GG 
IOExceptionGG 
exceptIOGG '
)GG' (
{HH 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptIOII2 :
,II: ;
$strII< W
)IIW X
;IIX Y
}JJ 
finallyKK 
{LL 
ifMM 
(MM 
listenerMM 
!=MM 
nullMM  $
)MM$ %
{NN 
tryOO 
{PP 
listenerQQ  
.QQ  !
StopQQ! %
(QQ% &
)QQ& '
;QQ' (
}RR 
catchSS 
(SS 
SocketExceptionSS )
seSS* ,
)SS, -
{TT 
IOUU 
.UU 
LoggerUU !
.UU! "
LogUU" %
(UU% &
NLogUU& *
.UU* +
LogLevelUU+ 3
.UU3 4
WarnUU4 8
,UU8 9
seUU: <
,UU< =
$strUU> Y
)UUY Z
;UUZ [
}VV 
}WW 
}XX 
}YY 	
dataBadZZ 
=ZZ 
dataZZ 
;ZZ 
BadSink[[ 
([[ 
)[[ 
;[[ 
}\\ 
public__ 

override__ 
void__ 
Good__ 
(__ 
)__ 
{`` 
GoodG2Baa 
(aa 
)aa 
;aa 
GoodB2Gbb 
(bb 
)bb 
;bb 
}cc 
privateee 
voidee 
GoodG2BSinkee 
(ee 
)ee 
{ff 
stringgg 
datagg 
=gg 
dataGoodG2Bgg !
;gg! "
tryhh 
{ii 	
intjj 
valuejj 
=jj 
intjj 
.jj 
Parsejj !
(jj! "
datajj" &
)jj& '
;jj' (
}kk 	
catchll 
(ll 
FormatExceptionll 
exceptNumberFormatll 1
)ll1 2
{mm 	
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo 
.oo 
LogLeveloo '
.oo' (
Warnoo( ,
,oo, -
exceptNumberFormatoo. @
,oo@ A
$strooB \
+oo] ^
dataoo_ c
)ooc d
;ood e
}pp 	
}qq 
privatett 
voidtt 
GoodG2Btt 
(tt 
)tt 
{uu 
stringvv 
datavv 
;vv 
dataxx 
=xx 
$strxx 
;xx 
dataGoodG2Byy 
=yy 
datayy 
;yy 
GoodG2BSinkzz 
(zz 
)zz 
;zz 
}{{ 
private}} 
void}} 
GoodB2GSink}} 
(}} 
)}} 
{~~ 
string 
data 
= 
dataGoodB2G !
;! "
try
 
{
 	
int
 
value
 
=
 
int
 
.
 
Parse
 !
(
! "
data
" &
)
& '
;
' (
}
 	
catch
 
(
 
FormatException
  
exceptNumberFormat
 1
)
1 2
{
 	
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 
.
 
LogLevel
 '
.
' (
Warn
( ,
,
, - 
exceptNumberFormat
. @
,
@ A
$str
B f
+
g h 
exceptNumberFormat
i {
)
{ |
;
| }
}
 	
}
 
private
 
void
 
GoodB2G
 
(
 
)
 
{
 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
{
 	
TcpListener
 
listener
  
=
! "
null
# '
;
' (
try
 
{
 
listener
 
=
 
new
 
TcpListener
 *
(
* +
	IPAddress
+ 4
.
4 5
Parse
5 :
(
: ;
$str
; G
)
G H
,
H I
$num
J O
)
O P
;
P Q
listener
 
.
 
Start
 
(
 
)
  
;
  !
using
 
(
 
	TcpClient
  
tcpConn
! (
=
) *
listener
+ 3
.
3 4
AcceptTcpClient
4 C
(
C D
)
D E
)
E F
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
tcpConn
> E
.
E F
	GetStream
F O
(
O P
)
P Q
)
Q R
)
R S
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
}
   
catch
¡¡ 
(
¡¡ 
IOException
¡¡ 
exceptIO
¡¡ '
)
¡¡' (
{
¢¢ 
IO
££ 
.
££ 
Logger
££ 
.
££ 
Log
££ 
(
££ 
NLog
££ "
.
££" #
LogLevel
££# +
.
££+ ,
Warn
££, 0
,
££0 1
exceptIO
££2 :
,
££: ;
$str
££< W
)
££W X
;
££X Y
}
¤¤ 
finally
¥¥ 
{
¦¦ 
if
§§ 
(
§§ 
listener
§§ 
!=
§§ 
null
§§  $
)
§§$ %
{
¨¨ 
try
©© 
{
ªª 
listener
««  
.
««  !
Stop
««! %
(
««% &
)
««& '
;
««' (
}
¬¬ 
catch
­­ 
(
­­ 
SocketException
­­ )
se
­­* ,
)
­­, -
{
®® 
IO
¯¯ 
.
¯¯ 
Logger
¯¯ !
.
¯¯! "
Log
¯¯" %
(
¯¯% &
NLog
¯¯& *
.
¯¯* +
LogLevel
¯¯+ 3
.
¯¯3 4
Warn
¯¯4 8
,
¯¯8 9
se
¯¯: <
,
¯¯< =
$str
¯¯> Y
)
¯¯Y Z
;
¯¯Z [
}
°° 
}
±± 
}
²² 
}
³³ 	
dataGoodB2G
´´ 
=
´´ 
data
´´ 
;
´´ 
GoodB2GSink
µµ 
(
µµ 
)
µµ 
;
µµ 
}
¶¶ 
}¸¸ 
}¹¹ ð4
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_51a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_51a D
:E F
AbstractTestCaseG W
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
TcpListener&& 
listener&&  
=&&! "
null&&# '
;&&' (
try'' 
{(( 
listener)) 
=)) 
new)) 
TcpListener)) *
())* +
	IPAddress))+ 4
.))4 5
Parse))5 :
()): ;
$str)); G
)))G H
,))H I
$num))J O
)))O P
;))P Q
listener** 
.** 
Start** 
(** 
)**  
;**  !
using++ 
(++ 
	TcpClient++  
tcpConn++! (
=++) *
listener+++ 3
.++3 4
AcceptTcpClient++4 C
(++C D
)++D E
)++E F
{,, 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
tcpConn..> E
...E F
	GetStream..F O
(..O P
)..P Q
)..Q R
)..R S
{// 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
finally99 
{:: 
if;; 
(;; 
listener;; 
!=;; 
null;;  $
);;$ %
{<< 
try== 
{>> 
listener??  
.??  !
Stop??! %
(??% &
)??& '
;??' (
}@@ 
catchAA 
(AA 
SocketExceptionAA )
seAA* ,
)AA, -
{BB 
IOCC 
.CC 
LoggerCC !
.CC! "
LogCC" %
(CC% &
NLogCC& *
.CC* +
LogLevelCC+ 3
.CC3 4
WarnCC4 8
,CC8 9
seCC: <
,CC< =
$strCC> Y
)CCY Z
;CCZ [
}DD 
}EE 
}FF 
}GG 	J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_51bHH F
.HHF G
BadSinkHHG N
(HHN O
dataHHO S
)HHU V
;HHV W
}II 
publicLL 

overrideLL 
voidLL 
GoodLL 
(LL 
)LL 
{MM 
GoodG2BNN 
(NN 
)NN 
;NN 
GoodB2GOO 
(OO 
)OO 
;OO 
}PP 
privateSS 
voidSS 
GoodG2BSS 
(SS 
)SS 
{TT 
stringUU 
dataUU 
;UU 
dataWW 
=WW 
$strWW 
;WW J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_51bXX F
.XXF G
GoodG2BSinkXXG R
(XXR S
dataXXS W
)XXY Z
;XXZ [
}YY 
private\\ 
void\\ 
GoodB2G\\ 
(\\ 
)\\ 
{]] 
string^^ 
data^^ 
;^^ 
data__ 
=__ 
$str__ 
;__ 
{aa 	
TcpListenerbb 
listenerbb  
=bb! "
nullbb# '
;bb' (
trycc 
{dd 
listeneree 
=ee 
newee 
TcpListeneree *
(ee* +
	IPAddressee+ 4
.ee4 5
Parseee5 :
(ee: ;
$stree; G
)eeG H
,eeH I
$numeeJ O
)eeO P
;eeP Q
listenerff 
.ff 
Startff 
(ff 
)ff  
;ff  !
usinggg 
(gg 
	TcpClientgg  
tcpConngg! (
=gg) *
listenergg+ 3
.gg3 4
AcceptTcpClientgg4 C
(ggC D
)ggD E
)ggE F
{hh 
usingjj 
(jj 
StreamReaderjj '
srjj( *
=jj+ ,
newjj- 0
StreamReaderjj1 =
(jj= >
tcpConnjj> E
.jjE F
	GetStreamjjF O
(jjO P
)jjP Q
)jjQ R
)jjR S
{kk 
datamm 
=mm 
srmm !
.mm! "
ReadLinemm" *
(mm* +
)mm+ ,
;mm, -
}nn 
}oo 
}pp 
catchqq 
(qq 
IOExceptionqq 
exceptIOqq '
)qq' (
{rr 
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss "
.ss" #
LogLevelss# +
.ss+ ,
Warnss, 0
,ss0 1
exceptIOss2 :
,ss: ;
$strss< W
)ssW X
;ssX Y
}tt 
finallyuu 
{vv 
ifww 
(ww 
listenerww 
!=ww 
nullww  $
)ww$ %
{xx 
tryyy 
{zz 
listener{{  
.{{  !
Stop{{! %
({{% &
){{& '
;{{' (
}|| 
catch}} 
(}} 
SocketException}} )
se}}* ,
)}}, -
{~~ 
IO 
. 
Logger !
.! "
Log" %
(% &
NLog& *
.* +
LogLevel+ 3
.3 4
Warn4 8
,8 9
se: <
,< =
$str> Y
)Y Z
;Z [
}
 
}
 
}
 
}
 	L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_51b
 F
.
F G
GoodB2GSink
G R
(
R S
data
S W
)
Y Z
;
Z [
}
 
} 
} ú
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_51b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_51b D
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH ð4
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_52a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_52a D
:E F
AbstractTestCaseG W
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
TcpListener&& 
listener&&  
=&&! "
null&&# '
;&&' (
try'' 
{(( 
listener)) 
=)) 
new)) 
TcpListener)) *
())* +
	IPAddress))+ 4
.))4 5
Parse))5 :
()): ;
$str)); G
)))G H
,))H I
$num))J O
)))O P
;))P Q
listener** 
.** 
Start** 
(** 
)**  
;**  !
using++ 
(++ 
	TcpClient++  
tcpConn++! (
=++) *
listener+++ 3
.++3 4
AcceptTcpClient++4 C
(++C D
)++D E
)++E F
{,, 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
tcpConn..> E
...E F
	GetStream..F O
(..O P
)..P Q
)..Q R
)..R S
{// 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
finally99 
{:: 
if;; 
(;; 
listener;; 
!=;; 
null;;  $
);;$ %
{<< 
try== 
{>> 
listener??  
.??  !
Stop??! %
(??% &
)??& '
;??' (
}@@ 
catchAA 
(AA 
SocketExceptionAA )
seAA* ,
)AA, -
{BB 
IOCC 
.CC 
LoggerCC !
.CC! "
LogCC" %
(CC% &
NLogCC& *
.CC* +
LogLevelCC+ 3
.CC3 4
WarnCC4 8
,CC8 9
seCC: <
,CC< =
$strCC> Y
)CCY Z
;CCZ [
}DD 
}EE 
}FF 
}GG 	J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_52bHH F
.HHF G
BadSinkHHG N
(HHN O
dataHHO S
)HHT U
;HHU V
}II 
publicLL 

overrideLL 
voidLL 
GoodLL 
(LL 
)LL 
{MM 
GoodG2BNN 
(NN 
)NN 
;NN 
GoodB2GOO 
(OO 
)OO 
;OO 
}PP 
privateSS 
voidSS 
GoodG2BSS 
(SS 
)SS 
{TT 
stringUU 
dataUU 
;UU 
dataWW 
=WW 
$strWW 
;WW J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_52bXX F
.XXF G
GoodG2BSinkXXG R
(XXR S
dataXXS W
)XXX Y
;XXY Z
}YY 
private\\ 
void\\ 
GoodB2G\\ 
(\\ 
)\\ 
{]] 
string^^ 
data^^ 
;^^ 
data__ 
=__ 
$str__ 
;__ 
{aa 	
TcpListenerbb 
listenerbb  
=bb! "
nullbb# '
;bb' (
trycc 
{dd 
listeneree 
=ee 
newee 
TcpListeneree *
(ee* +
	IPAddressee+ 4
.ee4 5
Parseee5 :
(ee: ;
$stree; G
)eeG H
,eeH I
$numeeJ O
)eeO P
;eeP Q
listenerff 
.ff 
Startff 
(ff 
)ff  
;ff  !
usinggg 
(gg 
	TcpClientgg  
tcpConngg! (
=gg) *
listenergg+ 3
.gg3 4
AcceptTcpClientgg4 C
(ggC D
)ggD E
)ggE F
{hh 
usingjj 
(jj 
StreamReaderjj '
srjj( *
=jj+ ,
newjj- 0
StreamReaderjj1 =
(jj= >
tcpConnjj> E
.jjE F
	GetStreamjjF O
(jjO P
)jjP Q
)jjQ R
)jjR S
{kk 
datamm 
=mm 
srmm !
.mm! "
ReadLinemm" *
(mm* +
)mm+ ,
;mm, -
}nn 
}oo 
}pp 
catchqq 
(qq 
IOExceptionqq 
exceptIOqq '
)qq' (
{rr 
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss "
.ss" #
LogLevelss# +
.ss+ ,
Warnss, 0
,ss0 1
exceptIOss2 :
,ss: ;
$strss< W
)ssW X
;ssX Y
}tt 
finallyuu 
{vv 
ifww 
(ww 
listenerww 
!=ww 
nullww  $
)ww$ %
{xx 
tryyy 
{zz 
listener{{  
.{{  !
Stop{{! %
({{% &
){{& '
;{{' (
}|| 
catch}} 
(}} 
SocketException}} )
se}}* ,
)}}, -
{~~ 
IO 
. 
Logger !
.! "
Log" %
(% &
NLog& *
.* +
LogLevel+ 3
.3 4
Warn4 8
,8 9
se: <
,< =
$str> Y
)Y Z
;Z [
}
 
}
 
}
 
}
 	L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_52b
 F
.
F G
GoodB2GSink
G R
(
R S
data
S W
)
X Y
;
Y Z
}
 
} 
} 
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_52b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_52b D
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_52c F
.F G
BadSinkG N
(N O
dataO S
)T U
;U V
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_52c&& F
.&&F G
GoodG2BSink&&G R
(&&R S
data&&S W
)&&X Y
;&&Y Z
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_52c,, F
.,,F G
GoodB2GSink,,G R
(,,R S
data,,S W
),,X Y
;,,Y Z
}-- 
}// 
}00 ú
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_52c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_52c D
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH ð4
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53a D
:E F
AbstractTestCaseG W
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
TcpListener&& 
listener&&  
=&&! "
null&&# '
;&&' (
try'' 
{(( 
listener)) 
=)) 
new)) 
TcpListener)) *
())* +
	IPAddress))+ 4
.))4 5
Parse))5 :
()): ;
$str)); G
)))G H
,))H I
$num))J O
)))O P
;))P Q
listener** 
.** 
Start** 
(** 
)**  
;**  !
using++ 
(++ 
	TcpClient++  
tcpConn++! (
=++) *
listener+++ 3
.++3 4
AcceptTcpClient++4 C
(++C D
)++D E
)++E F
{,, 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
tcpConn..> E
...E F
	GetStream..F O
(..O P
)..P Q
)..Q R
)..R S
{// 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
finally99 
{:: 
if;; 
(;; 
listener;; 
!=;; 
null;;  $
);;$ %
{<< 
try== 
{>> 
listener??  
.??  !
Stop??! %
(??% &
)??& '
;??' (
}@@ 
catchAA 
(AA 
SocketExceptionAA )
seAA* ,
)AA, -
{BB 
IOCC 
.CC 
LoggerCC !
.CC! "
LogCC" %
(CC% &
NLogCC& *
.CC* +
LogLevelCC+ 3
.CC3 4
WarnCC4 8
,CC8 9
seCC: <
,CC< =
$strCC> Y
)CCY Z
;CCZ [
}DD 
}EE 
}FF 
}GG 	J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53bHH F
.HHF G
BadSinkHHG N
(HHN O
dataHHO S
)HHT U
;HHU V
}II 
publicLL 

overrideLL 
voidLL 
GoodLL 
(LL 
)LL 
{MM 
GoodG2BNN 
(NN 
)NN 
;NN 
GoodB2GOO 
(OO 
)OO 
;OO 
}PP 
privateSS 
voidSS 
GoodG2BSS 
(SS 
)SS 
{TT 
stringUU 
dataUU 
;UU 
dataWW 
=WW 
$strWW 
;WW J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53bXX F
.XXF G
GoodG2BSinkXXG R
(XXR S
dataXXS W
)XXX Y
;XXY Z
}YY 
private\\ 
void\\ 
GoodB2G\\ 
(\\ 
)\\ 
{]] 
string^^ 
data^^ 
;^^ 
data__ 
=__ 
$str__ 
;__ 
{aa 	
TcpListenerbb 
listenerbb  
=bb! "
nullbb# '
;bb' (
trycc 
{dd 
listeneree 
=ee 
newee 
TcpListeneree *
(ee* +
	IPAddressee+ 4
.ee4 5
Parseee5 :
(ee: ;
$stree; G
)eeG H
,eeH I
$numeeJ O
)eeO P
;eeP Q
listenerff 
.ff 
Startff 
(ff 
)ff  
;ff  !
usinggg 
(gg 
	TcpClientgg  
tcpConngg! (
=gg) *
listenergg+ 3
.gg3 4
AcceptTcpClientgg4 C
(ggC D
)ggD E
)ggE F
{hh 
usingjj 
(jj 
StreamReaderjj '
srjj( *
=jj+ ,
newjj- 0
StreamReaderjj1 =
(jj= >
tcpConnjj> E
.jjE F
	GetStreamjjF O
(jjO P
)jjP Q
)jjQ R
)jjR S
{kk 
datamm 
=mm 
srmm !
.mm! "
ReadLinemm" *
(mm* +
)mm+ ,
;mm, -
}nn 
}oo 
}pp 
catchqq 
(qq 
IOExceptionqq 
exceptIOqq '
)qq' (
{rr 
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss "
.ss" #
LogLevelss# +
.ss+ ,
Warnss, 0
,ss0 1
exceptIOss2 :
,ss: ;
$strss< W
)ssW X
;ssX Y
}tt 
finallyuu 
{vv 
ifww 
(ww 
listenerww 
!=ww 
nullww  $
)ww$ %
{xx 
tryyy 
{zz 
listener{{  
.{{  !
Stop{{! %
({{% &
){{& '
;{{' (
}|| 
catch}} 
(}} 
SocketException}} )
se}}* ,
)}}, -
{~~ 
IO 
. 
Logger !
.! "
Log" %
(% &
NLog& *
.* +
LogLevel+ 3
.3 4
Warn4 8
,8 9
se: <
,< =
$str> Y
)Y Z
;Z [
}
 
}
 
}
 
}
 	L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53b
 F
.
F G
GoodB2GSink
G R
(
R S
data
S W
)
X Y
;
Y Z
}
 
} 
} 
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53b D
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53c F
.F G
BadSinkG N
(N O
dataO S
)T U
;U V
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53c&& F
.&&F G
GoodG2BSink&&G R
(&&R S
data&&S W
)&&X Y
;&&Y Z
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53c,, F
.,,F G
GoodB2GSink,,G R
(,,R S
data,,S W
),,X Y
;,,Y Z
}-- 
}// 
}00 
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53c D
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53d F
.F G
BadSinkG N
(N O
dataO S
)T U
;U V
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53d&& F
.&&F G
GoodG2BSink&&G R
(&&R S
data&&S W
)&&X Y
;&&Y Z
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53d,, F
.,,F G
GoodB2GSink,,G R
(,,R S
data,,S W
),,X Y
;,,Y Z
}-- 
}// 
}00 ú
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53d D
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH ð4
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54a D
:E F
AbstractTestCaseG W
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
TcpListener&& 
listener&&  
=&&! "
null&&# '
;&&' (
try'' 
{(( 
listener)) 
=)) 
new)) 
TcpListener)) *
())* +
	IPAddress))+ 4
.))4 5
Parse))5 :
()): ;
$str)); G
)))G H
,))H I
$num))J O
)))O P
;))P Q
listener** 
.** 
Start** 
(** 
)**  
;**  !
using++ 
(++ 
	TcpClient++  
tcpConn++! (
=++) *
listener+++ 3
.++3 4
AcceptTcpClient++4 C
(++C D
)++D E
)++E F
{,, 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
tcpConn..> E
...E F
	GetStream..F O
(..O P
)..P Q
)..Q R
)..R S
{// 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
finally99 
{:: 
if;; 
(;; 
listener;; 
!=;; 
null;;  $
);;$ %
{<< 
try== 
{>> 
listener??  
.??  !
Stop??! %
(??% &
)??& '
;??' (
}@@ 
catchAA 
(AA 
SocketExceptionAA )
seAA* ,
)AA, -
{BB 
IOCC 
.CC 
LoggerCC !
.CC! "
LogCC" %
(CC% &
NLogCC& *
.CC* +
LogLevelCC+ 3
.CC3 4
WarnCC4 8
,CC8 9
seCC: <
,CC< =
$strCC> Y
)CCY Z
;CCZ [
}DD 
}EE 
}FF 
}GG 	J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54bHH F
.HHF G
BadSinkHHG N
(HHN O
dataHHO S
)HHT U
;HHU V
}II 
publicLL 

overrideLL 
voidLL 
GoodLL 
(LL 
)LL 
{MM 
GoodG2BNN 
(NN 
)NN 
;NN 
GoodB2GOO 
(OO 
)OO 
;OO 
}PP 
privateSS 
voidSS 
GoodG2BSS 
(SS 
)SS 
{TT 
stringUU 
dataUU 
;UU 
dataWW 
=WW 
$strWW 
;WW J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54bXX F
.XXF G
GoodG2BSinkXXG R
(XXR S
dataXXS W
)XXX Y
;XXY Z
}YY 
private\\ 
void\\ 
GoodB2G\\ 
(\\ 
)\\ 
{]] 
string^^ 
data^^ 
;^^ 
data__ 
=__ 
$str__ 
;__ 
{aa 	
TcpListenerbb 
listenerbb  
=bb! "
nullbb# '
;bb' (
trycc 
{dd 
listeneree 
=ee 
newee 
TcpListeneree *
(ee* +
	IPAddressee+ 4
.ee4 5
Parseee5 :
(ee: ;
$stree; G
)eeG H
,eeH I
$numeeJ O
)eeO P
;eeP Q
listenerff 
.ff 
Startff 
(ff 
)ff  
;ff  !
usinggg 
(gg 
	TcpClientgg  
tcpConngg! (
=gg) *
listenergg+ 3
.gg3 4
AcceptTcpClientgg4 C
(ggC D
)ggD E
)ggE F
{hh 
usingjj 
(jj 
StreamReaderjj '
srjj( *
=jj+ ,
newjj- 0
StreamReaderjj1 =
(jj= >
tcpConnjj> E
.jjE F
	GetStreamjjF O
(jjO P
)jjP Q
)jjQ R
)jjR S
{kk 
datamm 
=mm 
srmm !
.mm! "
ReadLinemm" *
(mm* +
)mm+ ,
;mm, -
}nn 
}oo 
}pp 
catchqq 
(qq 
IOExceptionqq 
exceptIOqq '
)qq' (
{rr 
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss "
.ss" #
LogLevelss# +
.ss+ ,
Warnss, 0
,ss0 1
exceptIOss2 :
,ss: ;
$strss< W
)ssW X
;ssX Y
}tt 
finallyuu 
{vv 
ifww 
(ww 
listenerww 
!=ww 
nullww  $
)ww$ %
{xx 
tryyy 
{zz 
listener{{  
.{{  !
Stop{{! %
({{% &
){{& '
;{{' (
}|| 
catch}} 
(}} 
SocketException}} )
se}}* ,
)}}, -
{~~ 
IO 
. 
Logger !
.! "
Log" %
(% &
NLog& *
.* +
LogLevel+ 3
.3 4
Warn4 8
,8 9
se: <
,< =
$str> Y
)Y Z
;Z [
}
 
}
 
}
 
}
 	L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54b
 F
.
F G
GoodB2GSink
G R
(
R S
data
S W
)
X Y
;
Y Z
}
 
} 
} 
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54b D
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54c F
.F G
BadSinkG N
(N O
dataO S
)T U
;U V
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54c&& F
.&&F G
GoodG2BSink&&G R
(&&R S
data&&S W
)&&X Y
;&&Y Z
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54c,, F
.,,F G
GoodB2GSink,,G R
(,,R S
data,,S W
),,X Y
;,,Y Z
}-- 
}// 
}00 
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54c D
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54d F
.F G
BadSinkG N
(N O
dataO S
)T U
;U V
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54d&& F
.&&F G
GoodG2BSink&&G R
(&&R S
data&&S W
)&&X Y
;&&Y Z
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54d,, F
.,,F G
GoodB2GSink,,G R
(,,R S
data,,S W
),,X Y
;,,Y Z
}-- 
}// 
}00 
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54d D
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54e F
.F G
BadSinkG N
(N O
dataO S
)T U
;U V
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54e&& F
.&&F G
GoodG2BSink&&G R
(&&R S
data&&S W
)&&X Y
;&&Y Z
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54e,, F
.,,F G
GoodB2GSink,,G R
(,,R S
data,,S W
),,X Y
;,,Y Z
}-- 
}// 
}00 ú
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54e.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54e D
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH ¿
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_61a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_61a D
:E F
AbstractTestCaseG W
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
= J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_61b T
.T U
	BadSourceU ^
(^ _
)_ `
;` a
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodG2B-- 
(-- 
)-- 
;-- 
GoodB2G.. 
(.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
)22  !
{33 
string44 
data44 
=44 J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_61b44 T
.44T U
GoodG2BSource44U b
(44b c
)44c d
;44d e
try55 
{66 	
int77 
value77 
=77 
int77 
.77 
Parse77 !
(77! "
data77" &
)77& '
;77' (
}88 	
catch99 
(99 
FormatException99 
exceptNumberFormat99 1
)991 2
{:: 	
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< 
.<< 
LogLevel<< '
.<<' (
Warn<<( ,
,<<, -
exceptNumberFormat<<. @
,<<@ A
$str<<B \
+<<] ^
data<<_ c
)<<c d
;<<d e
}== 	
}>> 
privateAA 
staticAA 
voidAA 
GoodB2GAA 
(AA  
)AA  !
{BB 
stringCC 
dataCC 
=CC J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_61bCC T
.CCT U
GoodB2GSourceCCU b
(CCb c
)CCc d
;CCd e
tryDD 
{EE 	
intFF 
valueFF 
=FF 
intFF 
.FF 
ParseFF !
(FF! "
dataFF" &
)FF& '
;FF' (
}GG 	
catchHH 
(HH 
FormatExceptionHH 
exceptNumberFormatHH 1
)HH1 2
{II 	
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK 
.KK 
LogLevelKK '
.KK' (
WarnKK( ,
,KK, -
exceptNumberFormatKK. @
,KK@ A
$strKKB f
+KKg h
exceptNumberFormatKKi {
)KK{ |
;KK| }
}LL 	
}MM 
}OO 
}PP å/
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_61b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_61b D
{ 
public   

static   
string   
	BadSource   "
(  " #
)  # $
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
TcpListener&& 
listener&&  
=&&! "
null&&# '
;&&' (
try'' 
{(( 
listener)) 
=)) 
new)) 
TcpListener)) *
())* +
	IPAddress))+ 4
.))4 5
Parse))5 :
()): ;
$str)); G
)))G H
,))H I
$num))J O
)))O P
;))P Q
listener** 
.** 
Start** 
(** 
)**  
;**  !
using++ 
(++ 
	TcpClient++  
tcpConn++! (
=++) *
listener+++ 3
.++3 4
AcceptTcpClient++4 C
(++C D
)++D E
)++E F
{,, 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
tcpConn..> E
...E F
	GetStream..F O
(..O P
)..P Q
)..Q R
)..R S
{// 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
finally99 
{:: 
if;; 
(;; 
listener;; 
!=;; 
null;;  $
);;$ %
{<< 
try== 
{>> 
listener??  
.??  !
Stop??! %
(??% &
)??& '
;??' (
}@@ 
catchAA 
(AA 
SocketExceptionAA )
seAA* ,
)AA, -
{BB 
IOCC 
.CC 
LoggerCC !
.CC! "
LogCC" %
(CC% &
NLogCC& *
.CC* +
LogLevelCC+ 3
.CC3 4
WarnCC4 8
,CC8 9
seCC: <
,CC< =
$strCC> Y
)CCY Z
;CCZ [
}DD 
}EE 
}FF 
}GG 	
returnHH 
dataHH 
;HH 
}II 
publicNN 

staticNN 
stringNN 
GoodG2BSourceNN &
(NN& '
)NN' (
{OO 
stringPP 
dataPP 
;PP 
dataRR 
=RR 
$strRR 
;RR 
returnSS 
dataSS 
;SS 
}TT 
publicWW 

staticWW 
stringWW 
GoodB2GSourceWW &
(WW& '
)WW' (
{XX 
stringYY 
dataYY 
;YY 
dataZZ 
=ZZ 
$strZZ 
;ZZ 
{\\ 	
TcpListener]] 
listener]]  
=]]! "
null]]# '
;]]' (
try^^ 
{__ 
listener`` 
=`` 
new`` 
TcpListener`` *
(``* +
	IPAddress``+ 4
.``4 5
Parse``5 :
(``: ;
$str``; G
)``G H
,``H I
$num``J O
)``O P
;``P Q
listeneraa 
.aa 
Startaa 
(aa 
)aa  
;aa  !
usingbb 
(bb 
	TcpClientbb  
tcpConnbb! (
=bb) *
listenerbb+ 3
.bb3 4
AcceptTcpClientbb4 C
(bbC D
)bbD E
)bbE F
{cc 
usingee 
(ee 
StreamReaderee '
sree( *
=ee+ ,
newee- 0
StreamReaderee1 =
(ee= >
tcpConnee> E
.eeE F
	GetStreameeF O
(eeO P
)eeP Q
)eeQ R
)eeR S
{ff 
datahh 
=hh 
srhh !
.hh! "
ReadLinehh" *
(hh* +
)hh+ ,
;hh, -
}ii 
}jj 
}kk 
catchll 
(ll 
IOExceptionll 
exceptIOll '
)ll' (
{mm 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptIOnn2 :
,nn: ;
$strnn< W
)nnW X
;nnX Y
}oo 
finallypp 
{qq 
ifrr 
(rr 
listenerrr 
!=rr 
nullrr  $
)rr$ %
{ss 
trytt 
{uu 
listenervv  
.vv  !
Stopvv! %
(vv% &
)vv& '
;vv' (
}ww 
catchxx 
(xx 
SocketExceptionxx )
sexx* ,
)xx, -
{yy 
IOzz 
.zz 
Loggerzz !
.zz! "
Logzz" %
(zz% &
NLogzz& *
.zz* +
LogLevelzz+ 3
.zz3 4
Warnzz4 8
,zz8 9
sezz: <
,zz< =
$strzz> Y
)zzY Z
;zzZ [
}{{ 
}|| 
}}} 
}~~ 	
return 
data 
; 
}
 
} 
} =
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_66a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_66a D
:E F
AbstractTestCaseG W
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
TcpListener&& 
listener&&  
=&&! "
null&&# '
;&&' (
try'' 
{(( 
listener)) 
=)) 
new)) 
TcpListener)) *
())* +
	IPAddress))+ 4
.))4 5
Parse))5 :
()): ;
$str)); G
)))G H
,))H I
$num))J O
)))O P
;))P Q
listener** 
.** 
Start** 
(** 
)**  
;**  !
using++ 
(++ 
	TcpClient++  
tcpConn++! (
=++) *
listener+++ 3
.++3 4
AcceptTcpClient++4 C
(++C D
)++D E
)++E F
{,, 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
tcpConn..> E
...E F
	GetStream..F O
(..O P
)..P Q
)..Q R
)..R S
{// 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
finally99 
{:: 
if;; 
(;; 
listener;; 
!=;; 
null;;  $
);;$ %
{<< 
try== 
{>> 
listener??  
.??  !
Stop??! %
(??% &
)??& '
;??' (
}@@ 
catchAA 
(AA 
SocketExceptionAA )
seAA* ,
)AA, -
{BB 
IOCC 
.CC 
LoggerCC !
.CC! "
LogCC" %
(CC% &
NLogCC& *
.CC* +
LogLevelCC+ 3
.CC3 4
WarnCC4 8
,CC8 9
seCC: <
,CC< =
$strCC> Y
)CCY Z
;CCZ [
}DD 
}EE 
}FF 
}GG 	
stringHH 
[HH 
]HH 
	dataArrayHH 
=HH 
newHH  
stringHH! '
[HH' (
$numHH( )
]HH) *
;HH* +
	dataArrayII 
[II 
$numII 
]II 
=II 
dataII 
;II J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_66bJJ F
.JJF G
BadSinkJJG N
(JJN O
	dataArrayJJO X
)JJZ [
;JJ[ \
}KK 
publicNN 

overrideNN 
voidNN 
GoodNN 
(NN 
)NN 
{OO 
GoodG2BPP 
(PP 
)PP 
;PP 
GoodB2GQQ 
(QQ 
)QQ 
;QQ 
}RR 
privateUU 
staticUU 
voidUU 
GoodG2BUU 
(UU  
)UU  !
{VV 
stringWW 
dataWW 
;WW 
dataYY 
=YY 
$strYY 
;YY 
stringZZ 
[ZZ 
]ZZ 
	dataArrayZZ 
=ZZ 
newZZ  
stringZZ! '
[ZZ' (
$numZZ( )
]ZZ) *
;ZZ* +
	dataArray[[ 
[[[ 
$num[[ 
][[ 
=[[ 
data[[ 
;[[ J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_66b\\ F
.\\F G
GoodG2BSink\\G R
(\\R S
	dataArray\\S \
)\\^ _
;\\_ `
}]] 
private`` 
static`` 
void`` 
GoodB2G`` 
(``  
)``  !
{aa 
stringbb 
databb 
;bb 
datacc 
=cc 
$strcc 
;cc 
{ee 	
TcpListenerff 
listenerff  
=ff! "
nullff# '
;ff' (
trygg 
{hh 
listenerii 
=ii 
newii 
TcpListenerii *
(ii* +
	IPAddressii+ 4
.ii4 5
Parseii5 :
(ii: ;
$strii; G
)iiG H
,iiH I
$numiiJ O
)iiO P
;iiP Q
listenerjj 
.jj 
Startjj 
(jj 
)jj  
;jj  !
usingkk 
(kk 
	TcpClientkk  
tcpConnkk! (
=kk) *
listenerkk+ 3
.kk3 4
AcceptTcpClientkk4 C
(kkC D
)kkD E
)kkE F
{ll 
usingnn 
(nn 
StreamReadernn '
srnn( *
=nn+ ,
newnn- 0
StreamReadernn1 =
(nn= >
tcpConnnn> E
.nnE F
	GetStreamnnF O
(nnO P
)nnP Q
)nnQ R
)nnR S
{oo 
dataqq 
=qq 
srqq !
.qq! "
ReadLineqq" *
(qq* +
)qq+ ,
;qq, -
}rr 
}ss 
}tt 
catchuu 
(uu 
IOExceptionuu 
exceptIOuu '
)uu' (
{vv 
IOww 
.ww 
Loggerww 
.ww 
Logww 
(ww 
NLogww "
.ww" #
LogLevelww# +
.ww+ ,
Warnww, 0
,ww0 1
exceptIOww2 :
,ww: ;
$strww< W
)wwW X
;wwX Y
}xx 
finallyyy 
{zz 
if{{ 
({{ 
listener{{ 
!={{ 
null{{  $
){{$ %
{|| 
try}} 
{~~ 
listener  
.  !
Stop! %
(% &
)& '
;' (
}
 
catch
 
(
 
SocketException
 )
se
* ,
)
, -
{
 
IO
 
.
 
Logger
 !
.
! "
Log
" %
(
% &
NLog
& *
.
* +
LogLevel
+ 3
.
3 4
Warn
4 8
,
8 9
se
: <
,
< =
$str
> Y
)
Y Z
;
Z [
}
 
}
 
}
 
}
 	
string
 
[
 
]
 
	dataArray
 
=
 
new
  
string
! '
[
' (
$num
( )
]
) *
;
* +
	dataArray
 
[
 
$num
 
]
 
=
 
data
 
;
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_66b
 F
.
F G
GoodB2GSink
G R
(
R S
	dataArray
S \
)
^ _
;
_ `
}
 
} 
} 
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_66b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_66b D
{ 
public 

static 
void 
BadSink 
( 
string %
[% &
]& '
	dataArray( 1
)2 3
{ 
string 
data 
= 
	dataArray 
[  
$num  !
]! "
;" #
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
string--# )
[--) *
]--* +
	dataArray--, 5
)--6 7
{.. 
string// 
data// 
=// 
	dataArray// 
[//  
$num//  !
]//! "
;//" #
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
string<<# )
[<<) *
]<<* +
	dataArray<<, 5
)<<6 7
{== 
string>> 
data>> 
=>> 
	dataArray>> 
[>>  
$num>>  !
]>>! "
;>>" #
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK è=
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_67a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_67a D
:E F
AbstractTestCaseG W
{ 
public   

class   
	Container   
{!! 
public"" 
string"" 
containerOne"" "
;""" #
}## 
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
string'' 
data'' 
;'' 
data(( 
=(( 
$str(( 
;(( 
{** 	
TcpListener++ 
listener++  
=++! "
null++# '
;++' (
try,, 
{-- 
listener.. 
=.. 
new.. 
TcpListener.. *
(..* +
	IPAddress..+ 4
...4 5
Parse..5 :
(..: ;
$str..; G
)..G H
,..H I
$num..J O
)..O P
;..P Q
listener// 
.// 
Start// 
(// 
)//  
;//  !
using00 
(00 
	TcpClient00  
tcpConn00! (
=00) *
listener00+ 3
.003 4
AcceptTcpClient004 C
(00C D
)00D E
)00E F
{11 
using33 
(33 
StreamReader33 '
sr33( *
=33+ ,
new33- 0
StreamReader331 =
(33= >
tcpConn33> E
.33E F
	GetStream33F O
(33O P
)33P Q
)33Q R
)33R S
{44 
data66 
=66 
sr66 !
.66! "
ReadLine66" *
(66* +
)66+ ,
;66, -
}77 
}88 
}99 
catch:: 
(:: 
IOException:: 
exceptIO:: '
)::' (
{;; 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
exceptIO<<2 :
,<<: ;
$str<<< W
)<<W X
;<<X Y
}== 
finally>> 
{?? 
if@@ 
(@@ 
listener@@ 
!=@@ 
null@@  $
)@@$ %
{AA 
tryBB 
{CC 
listenerDD  
.DD  !
StopDD! %
(DD% &
)DD& '
;DD' (
}EE 
catchFF 
(FF 
SocketExceptionFF )
seFF* ,
)FF, -
{GG 
IOHH 
.HH 
LoggerHH !
.HH! "
LogHH" %
(HH% &
NLogHH& *
.HH* +
LogLevelHH+ 3
.HH3 4
WarnHH4 8
,HH8 9
seHH: <
,HH< =
$strHH> Y
)HHY Z
;HHZ [
}II 
}JJ 
}KK 
}LL 	
	ContainerMM 
dataContainerMM 
=MM  !
newMM" %
	ContainerMM& /
(MM/ 0
)MM0 1
;MM1 2
dataContainerNN 
.NN 
containerOneNN "
=NN# $
dataNN% )
;NN) *J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_67bOO F
.OOF G
BadSinkOOG N
(OON O
dataContainerOOO \
)OO^ _
;OO_ `
}PP 
publicSS 

overrideSS 
voidSS 
GoodSS 
(SS 
)SS 
{TT 
GoodG2BUU 
(UU 
)UU 
;UU 
GoodB2GVV 
(VV 
)VV 
;VV 
}WW 
privateZZ 
staticZZ 
voidZZ 
GoodG2BZZ 
(ZZ  
)ZZ  !
{[[ 
string\\ 
data\\ 
;\\ 
data^^ 
=^^ 
$str^^ 
;^^ 
	Container__ 
dataContainer__ 
=__  !
new__" %
	Container__& /
(__/ 0
)__0 1
;__1 2
dataContainer`` 
.`` 
containerOne`` "
=``# $
data``% )
;``) *J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_67baa F
.aaF G
GoodG2BSinkaaG R
(aaR S
dataContaineraaS `
)aab c
;aac d
}bb 
privateee 
staticee 
voidee 
GoodB2Gee 
(ee  
)ee  !
{ff 
stringgg 
datagg 
;gg 
datahh 
=hh 
$strhh 
;hh 
{jj 	
TcpListenerkk 
listenerkk  
=kk! "
nullkk# '
;kk' (
tryll 
{mm 
listenernn 
=nn 
newnn 
TcpListenernn *
(nn* +
	IPAddressnn+ 4
.nn4 5
Parsenn5 :
(nn: ;
$strnn; G
)nnG H
,nnH I
$numnnJ O
)nnO P
;nnP Q
listeneroo 
.oo 
Startoo 
(oo 
)oo  
;oo  !
usingpp 
(pp 
	TcpClientpp  
tcpConnpp! (
=pp) *
listenerpp+ 3
.pp3 4
AcceptTcpClientpp4 C
(ppC D
)ppD E
)ppE F
{qq 
usingss 
(ss 
StreamReaderss '
srss( *
=ss+ ,
newss- 0
StreamReaderss1 =
(ss= >
tcpConnss> E
.ssE F
	GetStreamssF O
(ssO P
)ssP Q
)ssQ R
)ssR S
{tt 
datavv 
=vv 
srvv !
.vv! "
ReadLinevv" *
(vv* +
)vv+ ,
;vv, -
}ww 
}xx 
}yy 
catchzz 
(zz 
IOExceptionzz 
exceptIOzz '
)zz' (
{{{ 
IO|| 
.|| 
Logger|| 
.|| 
Log|| 
(|| 
NLog|| "
.||" #
LogLevel||# +
.||+ ,
Warn||, 0
,||0 1
exceptIO||2 :
,||: ;
$str||< W
)||W X
;||X Y
}}} 
finally~~ 
{ 
if
 
(
 
listener
 
!=
 
null
  $
)
$ %
{
 
try
 
{
 
listener
  
.
  !
Stop
! %
(
% &
)
& '
;
' (
}
 
catch
 
(
 
SocketException
 )
se
* ,
)
, -
{
 
IO
 
.
 
Logger
 !
.
! "
Log
" %
(
% &
NLog
& *
.
* +
LogLevel
+ 3
.
3 4
Warn
4 8
,
8 9
se
: <
,
< =
$str
> Y
)
Y Z
;
Z [
}
 
}
 
}
 
}
 	
	Container
 
dataContainer
 
=
  !
new
" %
	Container
& /
(
/ 0
)
0 1
;
1 2
dataContainer
 
.
 
containerOne
 "
=
# $
data
% )
;
) *L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_67b
 F
.
F G
GoodB2GSink
G R
(
R S
dataContainer
S `
)
b c
;
c d
}
 
} 
} Ç
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_67b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_67b D
{ 
public 

static 
void 
BadSink 
( J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_67a ]
.] ^
	Container^ g
dataContainerh u
)v w
{ 
string 
data 
= 
dataContainer #
.# $
containerOne$ 0
;0 1
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_67a--# a
.--a b
	Container--b k
dataContainer--l y
)--z {
{.. 
string// 
data// 
=// 
dataContainer// #
.//# $
containerOne//$ 0
;//0 1
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_67a<<# a
.<<a b
	Container<<b k
dataContainer<<l y
)<<z {
{== 
string>> 
data>> 
=>> 
dataContainer>> #
.>># $
containerOne>>$ 0
;>>0 1
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK 4
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_68a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_68a D
:E F
AbstractTestCaseG W
{ 
public   

static   
string   
data   
;   
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 	
TcpListener'' 
listener''  
=''! "
null''# '
;''' (
try(( 
{)) 
listener** 
=** 
new** 
TcpListener** *
(*** +
	IPAddress**+ 4
.**4 5
Parse**5 :
(**: ;
$str**; G
)**G H
,**H I
$num**J O
)**O P
;**P Q
listener++ 
.++ 
Start++ 
(++ 
)++  
;++  !
using,, 
(,, 
	TcpClient,,  
tcpConn,,! (
=,,) *
listener,,+ 3
.,,3 4
AcceptTcpClient,,4 C
(,,C D
),,D E
),,E F
{-- 
using// 
(// 
StreamReader// '
sr//( *
=//+ ,
new//- 0
StreamReader//1 =
(//= >
tcpConn//> E
.//E F
	GetStream//F O
(//O P
)//P Q
)//Q R
)//R S
{00 
data22 
=22 
sr22 !
.22! "
ReadLine22" *
(22* +
)22+ ,
;22, -
}33 
}44 
}55 
catch66 
(66 
IOException66 
exceptIO66 '
)66' (
{77 
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 "
.88" #
LogLevel88# +
.88+ ,
Warn88, 0
,880 1
exceptIO882 :
,88: ;
$str88< W
)88W X
;88X Y
}99 
finally:: 
{;; 
if<< 
(<< 
listener<< 
!=<< 
null<<  $
)<<$ %
{== 
try>> 
{?? 
listener@@  
.@@  !
Stop@@! %
(@@% &
)@@& '
;@@' (
}AA 
catchBB 
(BB 
SocketExceptionBB )
seBB* ,
)BB, -
{CC 
IODD 
.DD 
LoggerDD !
.DD! "
LogDD" %
(DD% &
NLogDD& *
.DD* +
LogLevelDD+ 3
.DD3 4
WarnDD4 8
,DD8 9
seDD: <
,DD< =
$strDD> Y
)DDY Z
;DDZ [
}EE 
}FF 
}GG 
}HH 	J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_68bII F
.IIF G
BadSinkIIG N
(IIN O
)IIO P
;IIP Q
}JJ 
publicMM 

overrideMM 
voidMM 
GoodMM 
(MM 
)MM 
{NN 
GoodG2BOO 
(OO 
)OO 
;OO 
GoodB2GPP 
(PP 
)PP 
;PP 
}QQ 
privateTT 
staticTT 
voidTT 
GoodG2BTT 
(TT  
)TT  !
{UU 
dataWW 
=WW 
$strWW 
;WW J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_68bXX F
.XXF G
GoodG2BSinkXXG R
(XXR S
)XXS T
;XXT U
}YY 
private\\ 
static\\ 
void\\ 
GoodB2G\\ 
(\\  
)\\  !
{]] 
data^^ 
=^^ 
$str^^ 
;^^ 
{`` 	
TcpListeneraa 
listeneraa  
=aa! "
nullaa# '
;aa' (
trybb 
{cc 
listenerdd 
=dd 
newdd 
TcpListenerdd *
(dd* +
	IPAddressdd+ 4
.dd4 5
Parsedd5 :
(dd: ;
$strdd; G
)ddG H
,ddH I
$numddJ O
)ddO P
;ddP Q
listeneree 
.ee 
Startee 
(ee 
)ee  
;ee  !
usingff 
(ff 
	TcpClientff  
tcpConnff! (
=ff) *
listenerff+ 3
.ff3 4
AcceptTcpClientff4 C
(ffC D
)ffD E
)ffE F
{gg 
usingii 
(ii 
StreamReaderii '
srii( *
=ii+ ,
newii- 0
StreamReaderii1 =
(ii= >
tcpConnii> E
.iiE F
	GetStreamiiF O
(iiO P
)iiP Q
)iiQ R
)iiR S
{jj 
datall 
=ll 
srll !
.ll! "
ReadLinell" *
(ll* +
)ll+ ,
;ll, -
}mm 
}nn 
}oo 
catchpp 
(pp 
IOExceptionpp 
exceptIOpp '
)pp' (
{qq 
IOrr 
.rr 
Loggerrr 
.rr 
Logrr 
(rr 
NLogrr "
.rr" #
LogLevelrr# +
.rr+ ,
Warnrr, 0
,rr0 1
exceptIOrr2 :
,rr: ;
$strrr< W
)rrW X
;rrX Y
}ss 
finallytt 
{uu 
ifvv 
(vv 
listenervv 
!=vv 
nullvv  $
)vv$ %
{ww 
tryxx 
{yy 
listenerzz  
.zz  !
Stopzz! %
(zz% &
)zz& '
;zz' (
}{{ 
catch|| 
(|| 
SocketException|| )
se||* ,
)||, -
{}} 
IO~~ 
.~~ 
Logger~~ !
.~~! "
Log~~" %
(~~% &
NLog~~& *
.~~* +
LogLevel~~+ 3
.~~3 4
Warn~~4 8
,~~8 9
se~~: <
,~~< =
$str~~> Y
)~~Y Z
;~~Z [
} 
}
 
}
 
}
 	L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_68b
 F
.
F G
GoodB2GSink
G R
(
R S
)
S T
;
T U
}
 
} 
} 
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_68b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_68b D
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
string 
data 
= J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_68a T
.T U
dataU Y
;Y Z
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
)--# $
{.. 
string// 
data// 
=// J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_68a// T
.//T U
data//U Y
;//Y Z
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
)<<# $
{== 
string>> 
data>> 
=>> J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_68a>> T
.>>T U
data>>U Y
;>>Y Z
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK ´6
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_71a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_71a D
:E F
AbstractTestCaseG W
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
TcpListener&& 
listener&&  
=&&! "
null&&# '
;&&' (
try'' 
{(( 
listener)) 
=)) 
new)) 
TcpListener)) *
())* +
	IPAddress))+ 4
.))4 5
Parse))5 :
()): ;
$str)); G
)))G H
,))H I
$num))J O
)))O P
;))P Q
listener** 
.** 
Start** 
(** 
)**  
;**  !
using++ 
(++ 
	TcpClient++  
tcpConn++! (
=++) *
listener+++ 3
.++3 4
AcceptTcpClient++4 C
(++C D
)++D E
)++E F
{,, 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
tcpConn..> E
...E F
	GetStream..F O
(..O P
)..P Q
)..Q R
)..R S
{// 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
finally99 
{:: 
if;; 
(;; 
listener;; 
!=;; 
null;;  $
);;$ %
{<< 
try== 
{>> 
listener??  
.??  !
Stop??! %
(??% &
)??& '
;??' (
}@@ 
catchAA 
(AA 
SocketExceptionAA )
seAA* ,
)AA, -
{BB 
IOCC 
.CC 
LoggerCC !
.CC! "
LogCC" %
(CC% &
NLogCC& *
.CC* +
LogLevelCC+ 3
.CC3 4
WarnCC4 8
,CC8 9
seCC: <
,CC< =
$strCC> Y
)CCY Z
;CCZ [
}DD 
}EE 
}FF 
}GG 	J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_71bHH F
.HHF G
BadSinkHHG N
(HHN O
(HHO P
ObjectHHP V
)HHV W
dataHHW [
)HH] ^
;HH^ _
}II 
publicLL 

overrideLL 
voidLL 
GoodLL 
(LL 
)LL 
{MM 
GoodG2BNN 
(NN 
)NN 
;NN 
GoodB2GOO 
(OO 
)OO 
;OO 
}PP 
privateSS 
staticSS 
voidSS 
GoodG2BSS 
(SS  
)SS  !
{TT 
stringUU 
dataUU 
;UU 
dataWW 
=WW 
$strWW 
;WW J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_71bXX F
.XXF G
GoodG2BSinkXXG R
(XXR S
(XXS T
ObjectXXT Z
)XXZ [
dataXX[ _
)XXa b
;XXb c
}YY 
private\\ 
static\\ 
void\\ 
GoodB2G\\ 
(\\  
)\\  !
{]] 
string^^ 
data^^ 
;^^ 
data__ 
=__ 
$str__ 
;__ 
{aa 	
TcpListenerbb 
listenerbb  
=bb! "
nullbb# '
;bb' (
trycc 
{dd 
listeneree 
=ee 
newee 
TcpListeneree *
(ee* +
	IPAddressee+ 4
.ee4 5
Parseee5 :
(ee: ;
$stree; G
)eeG H
,eeH I
$numeeJ O
)eeO P
;eeP Q
listenerff 
.ff 
Startff 
(ff 
)ff  
;ff  !
usinggg 
(gg 
	TcpClientgg  
tcpConngg! (
=gg) *
listenergg+ 3
.gg3 4
AcceptTcpClientgg4 C
(ggC D
)ggD E
)ggE F
{hh 
usingjj 
(jj 
StreamReaderjj '
srjj( *
=jj+ ,
newjj- 0
StreamReaderjj1 =
(jj= >
tcpConnjj> E
.jjE F
	GetStreamjjF O
(jjO P
)jjP Q
)jjQ R
)jjR S
{kk 
datamm 
=mm 
srmm !
.mm! "
ReadLinemm" *
(mm* +
)mm+ ,
;mm, -
}nn 
}oo 
}pp 
catchqq 
(qq 
IOExceptionqq 
exceptIOqq '
)qq' (
{rr 
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss "
.ss" #
LogLevelss# +
.ss+ ,
Warnss, 0
,ss0 1
exceptIOss2 :
,ss: ;
$strss< W
)ssW X
;ssX Y
}tt 
finallyuu 
{vv 
ifww 
(ww 
listenerww 
!=ww 
nullww  $
)ww$ %
{xx 
tryyy 
{zz 
listener{{  
.{{  !
Stop{{! %
({{% &
){{& '
;{{' (
}|| 
catch}} 
(}} 
SocketException}} )
se}}* ,
)}}, -
{~~ 
IO 
. 
Logger !
.! "
Log" %
(% &
NLog& *
.* +
LogLevel+ 3
.3 4
Warn4 8
,8 9
se: <
,< =
$str> Y
)Y Z
;Z [
}
 
}
 
}
 
}
 	L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_71b
 F
.
F G
GoodB2GSink
G R
(
R S
(
S T
Object
T Z
)
Z [
data
[ _
)
a b
;
b c
}
 
} 
} ¶
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_71b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_71b D
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
string 
data 
= 
( 
string 
) 

dataObject (
;( )
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
Object..# )

dataObject..* 4
)..5 6
{// 
string00 
data00 
=00 
(00 
string00 
)00 

dataObject00 (
;00( )
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
Object==# )

dataObject==* 4
)==5 6
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 

dataObject?? (
;??( )
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ´E
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_72a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_72a D
:E F
AbstractTestCaseG W
{ 
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 	
TcpListener'' 
listener''  
=''! "
null''# '
;''' (
try(( 
{)) 
listener** 
=** 
new** 
TcpListener** *
(*** +
	IPAddress**+ 4
.**4 5
Parse**5 :
(**: ;
$str**; G
)**G H
,**H I
$num**J O
)**O P
;**P Q
listener++ 
.++ 
Start++ 
(++ 
)++  
;++  !
using,, 
(,, 
	TcpClient,,  
tcpConn,,! (
=,,) *
listener,,+ 3
.,,3 4
AcceptTcpClient,,4 C
(,,C D
),,D E
),,E F
{-- 
using// 
(// 
StreamReader// '
sr//( *
=//+ ,
new//- 0
StreamReader//1 =
(//= >
tcpConn//> E
.//E F
	GetStream//F O
(//O P
)//P Q
)//Q R
)//R S
{00 
data22 
=22 
sr22 !
.22! "
ReadLine22" *
(22* +
)22+ ,
;22, -
}33 
}44 
}55 
catch66 
(66 
IOException66 
exceptIO66 '
)66' (
{77 
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 "
.88" #
LogLevel88# +
.88+ ,
Warn88, 0
,880 1
exceptIO882 :
,88: ;
$str88< W
)88W X
;88X Y
}99 
finally:: 
{;; 
if<< 
(<< 
listener<< 
!=<< 
null<<  $
)<<$ %
{== 
try>> 
{?? 
listener@@  
.@@  !
Stop@@! %
(@@% &
)@@& '
;@@' (
}AA 
catchBB 
(BB 
SocketExceptionBB )
seBB* ,
)BB, -
{CC 
IODD 
.DD 
LoggerDD !
.DD! "
LogDD" %
(DD% &
NLogDD& *
.DD* +
LogLevelDD+ 3
.DD3 4
WarnDD4 8
,DD8 9
seDD: <
,DD< =
$strDD> Y
)DDY Z
;DDZ [
}EE 
}FF 
}GG 
}HH 	
	HashtableII 
dataHashtableII 
=II  !
newII" %
	HashtableII& /
(II/ 0
$numII0 1
)II1 2
;II2 3
dataHashtableJJ 
.JJ 
AddJJ 
(JJ 
$numJJ 
,JJ 
dataJJ !
)JJ! "
;JJ" #
dataHashtableKK 
.KK 
AddKK 
(KK 
$numKK 
,KK 
dataKK !
)KK! "
;KK" #
dataHashtableLL 
.LL 
AddLL 
(LL 
$numLL 
,LL 
dataLL !
)LL! "
;LL" #J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_72bMM F
.MMF G
BadSinkMMG N
(MMN O
dataHashtableMMO \
)MM^ _
;MM_ `
}NN 
publicQQ 

overrideQQ 
voidQQ 
GoodQQ 
(QQ 
)QQ 
{RR 
GoodG2BSS 
(SS 
)SS 
;SS 
GoodB2GTT 
(TT 
)TT 
;TT 
}UU 
privateXX 
staticXX 
voidXX 
GoodG2BXX 
(XX  
)XX  !
{YY 
stringZZ 
dataZZ 
;ZZ 
data\\ 
=\\ 
$str\\ 
;\\ 
	Hashtable]] 
dataHashtable]] 
=]]  !
new]]" %
	Hashtable]]& /
(]]/ 0
$num]]0 1
)]]1 2
;]]2 3
dataHashtable^^ 
.^^ 
Add^^ 
(^^ 
$num^^ 
,^^ 
data^^ !
)^^! "
;^^" #
dataHashtable__ 
.__ 
Add__ 
(__ 
$num__ 
,__ 
data__ !
)__! "
;__" #
dataHashtable`` 
.`` 
Add`` 
(`` 
$num`` 
,`` 
data`` !
)``! "
;``" #J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_72baa F
.aaF G
GoodG2BSinkaaG R
(aaR S
dataHashtableaaS `
)aab c
;aac d
}bb 
privateee 
staticee 
voidee 
GoodB2Gee 
(ee  
)ee  !
{ff 
stringgg 
datagg 
;gg 
datahh 
=hh 
$strhh 
;hh 
{jj 	
TcpListenerkk 
listenerkk  
=kk! "
nullkk# '
;kk' (
tryll 
{mm 
listenernn 
=nn 
newnn 
TcpListenernn *
(nn* +
	IPAddressnn+ 4
.nn4 5
Parsenn5 :
(nn: ;
$strnn; G
)nnG H
,nnH I
$numnnJ O
)nnO P
;nnP Q
listeneroo 
.oo 
Startoo 
(oo 
)oo  
;oo  !
usingpp 
(pp 
	TcpClientpp  
tcpConnpp! (
=pp) *
listenerpp+ 3
.pp3 4
AcceptTcpClientpp4 C
(ppC D
)ppD E
)ppE F
{qq 
usingss 
(ss 
StreamReaderss '
srss( *
=ss+ ,
newss- 0
StreamReaderss1 =
(ss= >
tcpConnss> E
.ssE F
	GetStreamssF O
(ssO P
)ssP Q
)ssQ R
)ssR S
{tt 
datavv 
=vv 
srvv !
.vv! "
ReadLinevv" *
(vv* +
)vv+ ,
;vv, -
}ww 
}xx 
}yy 
catchzz 
(zz 
IOExceptionzz 
exceptIOzz '
)zz' (
{{{ 
IO|| 
.|| 
Logger|| 
.|| 
Log|| 
(|| 
NLog|| "
.||" #
LogLevel||# +
.||+ ,
Warn||, 0
,||0 1
exceptIO||2 :
,||: ;
$str||< W
)||W X
;||X Y
}}} 
finally~~ 
{ 
if
 
(
 
listener
 
!=
 
null
  $
)
$ %
{
 
try
 
{
 
listener
  
.
  !
Stop
! %
(
% &
)
& '
;
' (
}
 
catch
 
(
 
SocketException
 )
se
* ,
)
, -
{
 
IO
 
.
 
Logger
 !
.
! "
Log
" %
(
% &
NLog
& *
.
* +
LogLevel
+ 3
.
3 4
Warn
4 8
,
8 9
se
: <
,
< =
$str
> Y
)
Y Z
;
Z [
}
 
}
 
}
 
}
 	
	Hashtable
 
dataHashtable
 
=
  !
new
" %
	Hashtable
& /
(
/ 0
$num
0 1
)
1 2
;
2 3
dataHashtable
 
.
 
Add
 
(
 
$num
 
,
 
data
 !
)
! "
;
" #
dataHashtable
 
.
 
Add
 
(
 
$num
 
,
 
data
 !
)
! "
;
" #
dataHashtable
 
.
 
Add
 
(
 
$num
 
,
 
data
 !
)
! "
;
" #L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_72b
 F
.
F G
GoodB2GSink
G R
(
R S
dataHashtable
S `
)
b c
;
c d
}
 
} 
} á
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_72b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_72b D
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
string 
data 
= 
( 
string 
) 
dataHashtable ,
[, -
$num- .
]. /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
	Hashtable..# ,
dataHashtable..- :
)..; <
{// 
string00 
data00 
=00 
(00 
string00 
)00 
dataHashtable00 ,
[00, -
$num00- .
]00. /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
	Hashtable==# ,
dataHashtable==- :
)==; <
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 
dataHashtable?? ,
[??, -
$num??- .
]??. /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ¸E
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_73a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_73a D
:E F
AbstractTestCaseG W
{ 
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 	
TcpListener'' 
listener''  
=''! "
null''# '
;''' (
try(( 
{)) 
listener** 
=** 
new** 
TcpListener** *
(*** +
	IPAddress**+ 4
.**4 5
Parse**5 :
(**: ;
$str**; G
)**G H
,**H I
$num**J O
)**O P
;**P Q
listener++ 
.++ 
Start++ 
(++ 
)++  
;++  !
using,, 
(,, 
	TcpClient,,  
tcpConn,,! (
=,,) *
listener,,+ 3
.,,3 4
AcceptTcpClient,,4 C
(,,C D
),,D E
),,E F
{-- 
using// 
(// 
StreamReader// '
sr//( *
=//+ ,
new//- 0
StreamReader//1 =
(//= >
tcpConn//> E
.//E F
	GetStream//F O
(//O P
)//P Q
)//Q R
)//R S
{00 
data22 
=22 
sr22 !
.22! "
ReadLine22" *
(22* +
)22+ ,
;22, -
}33 
}44 
}55 
catch66 
(66 
IOException66 
exceptIO66 '
)66' (
{77 
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 "
.88" #
LogLevel88# +
.88+ ,
Warn88, 0
,880 1
exceptIO882 :
,88: ;
$str88< W
)88W X
;88X Y
}99 
finally:: 
{;; 
if<< 
(<< 
listener<< 
!=<< 
null<<  $
)<<$ %
{== 
try>> 
{?? 
listener@@  
.@@  !
Stop@@! %
(@@% &
)@@& '
;@@' (
}AA 
catchBB 
(BB 
SocketExceptionBB )
seBB* ,
)BB, -
{CC 
IODD 
.DD 
LoggerDD !
.DD! "
LogDD" %
(DD% &
NLogDD& *
.DD* +
LogLevelDD+ 3
.DD3 4
WarnDD4 8
,DD8 9
seDD: <
,DD< =
$strDD> Y
)DDY Z
;DDZ [
}EE 
}FF 
}GG 
}HH 	

LinkedListII 
<II 
stringII 
>II 
dataLinkedListII )
=II* +
newII, /

LinkedListII0 :
<II: ;
stringII; A
>IIA B
(IIB C
)IIC D
;IID E
dataLinkedListJJ 
.JJ 
AddLastJJ 
(JJ 
dataJJ #
)JJ# $
;JJ$ %
dataLinkedListKK 
.KK 
AddLastKK 
(KK 
dataKK #
)KK# $
;KK$ %
dataLinkedListLL 
.LL 
AddLastLL 
(LL 
dataLL #
)LL# $
;LL$ %J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_73bMM F
.MMF G
BadSinkMMG N
(MMN O
dataLinkedListMMO ]
)MM_ `
;MM` a
}NN 
publicQQ 

overrideQQ 
voidQQ 
GoodQQ 
(QQ 
)QQ 
{RR 
GoodG2BSS 
(SS 
)SS 
;SS 
GoodB2GTT 
(TT 
)TT 
;TT 
}UU 
privateXX 
staticXX 
voidXX 
GoodG2BXX 
(XX  
)XX  !
{YY 
stringZZ 
dataZZ 
;ZZ 
data\\ 
=\\ 
$str\\ 
;\\ 

LinkedList]] 
<]] 
string]] 
>]] 
dataLinkedList]] )
=]]* +
new]], /

LinkedList]]0 :
<]]: ;
string]]; A
>]]A B
(]]B C
)]]C D
;]]D E
dataLinkedList^^ 
.^^ 
AddLast^^ 
(^^ 
data^^ #
)^^# $
;^^$ %
dataLinkedList__ 
.__ 
AddLast__ 
(__ 
data__ #
)__# $
;__$ %
dataLinkedList`` 
.`` 
AddLast`` 
(`` 
data`` #
)``# $
;``$ %J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_73baa F
.aaF G
GoodG2BSinkaaG R
(aaR S
dataLinkedListaaS a
)aac d
;aad e
}bb 
privateee 
staticee 
voidee 
GoodB2Gee 
(ee  
)ee  !
{ff 
stringgg 
datagg 
;gg 
datahh 
=hh 
$strhh 
;hh 
{jj 	
TcpListenerkk 
listenerkk  
=kk! "
nullkk# '
;kk' (
tryll 
{mm 
listenernn 
=nn 
newnn 
TcpListenernn *
(nn* +
	IPAddressnn+ 4
.nn4 5
Parsenn5 :
(nn: ;
$strnn; G
)nnG H
,nnH I
$numnnJ O
)nnO P
;nnP Q
listeneroo 
.oo 
Startoo 
(oo 
)oo  
;oo  !
usingpp 
(pp 
	TcpClientpp  
tcpConnpp! (
=pp) *
listenerpp+ 3
.pp3 4
AcceptTcpClientpp4 C
(ppC D
)ppD E
)ppE F
{qq 
usingss 
(ss 
StreamReaderss '
srss( *
=ss+ ,
newss- 0
StreamReaderss1 =
(ss= >
tcpConnss> E
.ssE F
	GetStreamssF O
(ssO P
)ssP Q
)ssQ R
)ssR S
{tt 
datavv 
=vv 
srvv !
.vv! "
ReadLinevv" *
(vv* +
)vv+ ,
;vv, -
}ww 
}xx 
}yy 
catchzz 
(zz 
IOExceptionzz 
exceptIOzz '
)zz' (
{{{ 
IO|| 
.|| 
Logger|| 
.|| 
Log|| 
(|| 
NLog|| "
.||" #
LogLevel||# +
.||+ ,
Warn||, 0
,||0 1
exceptIO||2 :
,||: ;
$str||< W
)||W X
;||X Y
}}} 
finally~~ 
{ 
if
 
(
 
listener
 
!=
 
null
  $
)
$ %
{
 
try
 
{
 
listener
  
.
  !
Stop
! %
(
% &
)
& '
;
' (
}
 
catch
 
(
 
SocketException
 )
se
* ,
)
, -
{
 
IO
 
.
 
Logger
 !
.
! "
Log
" %
(
% &
NLog
& *
.
* +
LogLevel
+ 3
.
3 4
Warn
4 8
,
8 9
se
: <
,
< =
$str
> Y
)
Y Z
;
Z [
}
 
}
 
}
 
}
 	

LinkedList
 
<
 
string
 
>
 
dataLinkedList
 )
=
* +
new
, /

LinkedList
0 :
<
: ;
string
; A
>
A B
(
B C
)
C D
;
D E
dataLinkedList
 
.
 
AddLast
 
(
 
data
 #
)
# $
;
$ %
dataLinkedList
 
.
 
AddLast
 
(
 
data
 #
)
# $
;
$ %
dataLinkedList
 
.
 
AddLast
 
(
 
data
 #
)
# $
;
$ %L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_73b
 F
.
F G
GoodB2GSink
G R
(
R S
dataLinkedList
S a
)
c d
;
d e
}
 
} 
} £
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_73b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_73b D
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
string* 0
>0 1
dataLinkedList2 @
)A B
{ 
string 
data 
= 
dataLinkedList $
.$ %
Last% )
.) *
Value* /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #

LinkedList..# -
<..- .
string... 4
>..4 5
dataLinkedList..6 D
)..E F
{// 
string00 
data00 
=00 
dataLinkedList00 $
.00$ %
Last00% )
.00) *
Value00* /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

LinkedList==# -
<==- .
string==. 4
>==4 5
dataLinkedList==6 D
)==E F
{>> 
string?? 
data?? 
=?? 
dataLinkedList?? $
.??$ %
Last??% )
.??) *
Value??* /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL I
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_74a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_74a D
:E F
AbstractTestCaseG W
{ 
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 	
TcpListener'' 
listener''  
=''! "
null''# '
;''' (
try(( 
{)) 
listener** 
=** 
new** 
TcpListener** *
(*** +
	IPAddress**+ 4
.**4 5
Parse**5 :
(**: ;
$str**; G
)**G H
,**H I
$num**J O
)**O P
;**P Q
listener++ 
.++ 
Start++ 
(++ 
)++  
;++  !
using,, 
(,, 
	TcpClient,,  
tcpConn,,! (
=,,) *
listener,,+ 3
.,,3 4
AcceptTcpClient,,4 C
(,,C D
),,D E
),,E F
{-- 
using// 
(// 
StreamReader// '
sr//( *
=//+ ,
new//- 0
StreamReader//1 =
(//= >
tcpConn//> E
.//E F
	GetStream//F O
(//O P
)//P Q
)//Q R
)//R S
{00 
data22 
=22 
sr22 !
.22! "
ReadLine22" *
(22* +
)22+ ,
;22, -
}33 
}44 
}55 
catch66 
(66 
IOException66 
exceptIO66 '
)66' (
{77 
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 "
.88" #
LogLevel88# +
.88+ ,
Warn88, 0
,880 1
exceptIO882 :
,88: ;
$str88< W
)88W X
;88X Y
}99 
finally:: 
{;; 
if<< 
(<< 
listener<< 
!=<< 
null<<  $
)<<$ %
{== 
try>> 
{?? 
listener@@  
.@@  !
Stop@@! %
(@@% &
)@@& '
;@@' (
}AA 
catchBB 
(BB 
SocketExceptionBB )
seBB* ,
)BB, -
{CC 
IODD 
.DD 
LoggerDD !
.DD! "
LogDD" %
(DD% &
NLogDD& *
.DD* +
LogLevelDD+ 3
.DD3 4
WarnDD4 8
,DD8 9
seDD: <
,DD< =
$strDD> Y
)DDY Z
;DDZ [
}EE 
}FF 
}GG 
}HH 	

DictionaryII 
<II 
intII 
,II 
stringII 
>II 
dataDictionaryII -
=II. /
newII0 3

DictionaryII4 >
<II> ?
intII? B
,IIB C
stringIIC I
>III J
(IIJ K
)IIK L
;IIL M
dataDictionaryJJ 
.JJ 
AddJJ 
(JJ 
$numJJ 
,JJ 
dataJJ "
)JJ" #
;JJ# $
dataDictionaryKK 
.KK 
AddKK 
(KK 
$numKK 
,KK 
dataKK "
)KK" #
;KK# $
dataDictionaryLL 
.LL 
AddLL 
(LL 
$numLL 
,LL 
dataLL "
)LL" #
;LL# $J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_74bMM F
.MMF G
BadSinkMMG N
(MMN O
dataDictionaryMMO ]
)MM_ `
;MM` a
}NN 
publicQQ 

overrideQQ 
voidQQ 
GoodQQ 
(QQ 
)QQ 
{RR 
GoodG2BSS 
(SS 
)SS 
;SS 
GoodB2GTT 
(TT 
)TT 
;TT 
}UU 
privateXX 
staticXX 
voidXX 
GoodG2BXX 
(XX  
)XX  !
{YY 
stringZZ 
dataZZ 
;ZZ 
data\\ 
=\\ 
$str\\ 
;\\ 

Dictionary]] 
<]] 
int]] 
,]] 
string]] 
>]] 
dataDictionary]] -
=]]. /
new]]0 3

Dictionary]]4 >
<]]> ?
int]]? B
,]]B C
string]]C I
>]]I J
(]]J K
)]]K L
;]]L M
dataDictionary^^ 
.^^ 
Add^^ 
(^^ 
$num^^ 
,^^ 
data^^ "
)^^" #
;^^# $
dataDictionary__ 
.__ 
Add__ 
(__ 
$num__ 
,__ 
data__ "
)__" #
;__# $
dataDictionary`` 
.`` 
Add`` 
(`` 
$num`` 
,`` 
data`` "
)``" #
;``# $J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_74baa F
.aaF G
GoodG2BSinkaaG R
(aaR S
dataDictionaryaaS a
)aac d
;aad e
}bb 
privateee 
staticee 
voidee 
GoodB2Gee 
(ee  
)ee  !
{ff 
stringgg 
datagg 
;gg 
datahh 
=hh 
$strhh 
;hh 
{jj 	
TcpListenerkk 
listenerkk  
=kk! "
nullkk# '
;kk' (
tryll 
{mm 
listenernn 
=nn 
newnn 
TcpListenernn *
(nn* +
	IPAddressnn+ 4
.nn4 5
Parsenn5 :
(nn: ;
$strnn; G
)nnG H
,nnH I
$numnnJ O
)nnO P
;nnP Q
listeneroo 
.oo 
Startoo 
(oo 
)oo  
;oo  !
usingpp 
(pp 
	TcpClientpp  
tcpConnpp! (
=pp) *
listenerpp+ 3
.pp3 4
AcceptTcpClientpp4 C
(ppC D
)ppD E
)ppE F
{qq 
usingss 
(ss 
StreamReaderss '
srss( *
=ss+ ,
newss- 0
StreamReaderss1 =
(ss= >
tcpConnss> E
.ssE F
	GetStreamssF O
(ssO P
)ssP Q
)ssQ R
)ssR S
{tt 
datavv 
=vv 
srvv !
.vv! "
ReadLinevv" *
(vv* +
)vv+ ,
;vv, -
}ww 
}xx 
}yy 
catchzz 
(zz 
IOExceptionzz 
exceptIOzz '
)zz' (
{{{ 
IO|| 
.|| 
Logger|| 
.|| 
Log|| 
(|| 
NLog|| "
.||" #
LogLevel||# +
.||+ ,
Warn||, 0
,||0 1
exceptIO||2 :
,||: ;
$str||< W
)||W X
;||X Y
}}} 
finally~~ 
{ 
if
 
(
 
listener
 
!=
 
null
  $
)
$ %
{
 
try
 
{
 
listener
  
.
  !
Stop
! %
(
% &
)
& '
;
' (
}
 
catch
 
(
 
SocketException
 )
se
* ,
)
, -
{
 
IO
 
.
 
Logger
 !
.
! "
Log
" %
(
% &
NLog
& *
.
* +
LogLevel
+ 3
.
3 4
Warn
4 8
,
8 9
se
: <
,
< =
$str
> Y
)
Y Z
;
Z [
}
 
}
 
}
 
}
 	

Dictionary
 
<
 
int
 
,
 
string
 
>
 
dataDictionary
 -
=
. /
new
0 3

Dictionary
4 >
<
> ?
int
? B
,
B C
string
C I
>
I J
(
J K
)
K L
;
L M
dataDictionary
 
.
 
Add
 
(
 
$num
 
,
 
data
 "
)
" #
;
# $
dataDictionary
 
.
 
Add
 
(
 
$num
 
,
 
data
 "
)
" #
;
# $
dataDictionary
 
.
 
Add
 
(
 
$num
 
,
 
data
 "
)
" #
;
# $L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_74b
 F
.
F G
GoodB2GSink
G R
(
R S
dataDictionary
S a
)
c d
;
d e
}
 
} 
} Ê
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_74b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_74b D
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
string. 4
>4 5
dataDictionary6 D
)E F
{ 
string 
data 
= 
dataDictionary $
[$ %
$num% &
]& '
;' (
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. #
(..# $

Dictionary..$ .
<... /
int../ 2
,..2 3
string..3 9
>..9 :
dataDictionary..; I
)..J K
{// 
string00 
data00 
=00 
dataDictionary00 $
[00$ %
$num00% &
]00& '
;00' (
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

Dictionary==# -
<==- .
int==. 1
,==1 2
string==2 8
>==8 9
dataDictionary==: H
)==I J
{>> 
string?? 
data?? 
=?? 
dataDictionary?? $
[??$ %
$num??% &
]??& '
;??' (
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL j
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_75a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_75a D
:E F
AbstractTestCaseG W
{   
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
string$$ 
data$$ 
;$$ 
data%% 
=%% 
$str%% 
;%% 
{'' 	
TcpListener(( 
listener((  
=((! "
null((# '
;((' (
try)) 
{** 
listener++ 
=++ 
new++ 
TcpListener++ *
(++* +
	IPAddress+++ 4
.++4 5
Parse++5 :
(++: ;
$str++; G
)++G H
,++H I
$num++J O
)++O P
;++P Q
listener,, 
.,, 
Start,, 
(,, 
),,  
;,,  !
using-- 
(-- 
	TcpClient--  
tcpConn--! (
=--) *
listener--+ 3
.--3 4
AcceptTcpClient--4 C
(--C D
)--D E
)--E F
{.. 
using00 
(00 
StreamReader00 '
sr00( *
=00+ ,
new00- 0
StreamReader001 =
(00= >
tcpConn00> E
.00E F
	GetStream00F O
(00O P
)00P Q
)00Q R
)00R S
{11 
data33 
=33 
sr33 !
.33! "
ReadLine33" *
(33* +
)33+ ,
;33, -
}44 
}55 
}66 
catch77 
(77 
IOException77 
exceptIO77 '
)77' (
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
exceptIO992 :
,99: ;
$str99< W
)99W X
;99X Y
}:: 
finally;; 
{<< 
if== 
(== 
listener== 
!=== 
null==  $
)==$ %
{>> 
try?? 
{@@ 
listenerAA  
.AA  !
StopAA! %
(AA% &
)AA& '
;AA' (
}BB 
catchCC 
(CC 
SocketExceptionCC )
seCC* ,
)CC, -
{DD 
IOEE 
.EE 
LoggerEE !
.EE! "
LogEE" %
(EE% &
NLogEE& *
.EE* +
LogLevelEE+ 3
.EE3 4
WarnEE4 8
,EE8 9
seEE: <
,EE< =
$strEE> Y
)EEY Z
;EEZ [
}FF 
}GG 
}HH 
}II 	
byteKK 
[KK 
]KK 
dataSerializedKK 
=KK 
nullKK  $
;KK$ %
tryLL 
{MM 	
BinaryFormatterNN 
bfNN 
=NN  
newNN! $
BinaryFormatterNN% 4
(NN4 5
)NN5 6
;NN6 7
usingOO 
(OO 
varOO 
msOO 
=OO 
newOO 
MemoryStreamOO  ,
(OO, -
)OO- .
)OO. /
{PP 
bfQQ 
.QQ 
	SerializeQQ 
(QQ 
msQQ 
,QQ  
dataQQ! %
)QQ% &
;QQ& '
dataSerializedRR 
=RR  
msRR! #
.RR# $
ToArrayRR$ +
(RR+ ,
)RR, -
;RR- .
}SS J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_75bTT J
.TTJ K
BadSinkTTK R
(TTR S
dataSerializedTTS a
)TTc d
;TTd e
}UU 	
catchVV 
(VV "
SerializationExceptionVV %
exceptSerializeVV& 5
)VV5 6
{WW 	
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX 
.XX 
LogLevelXX '
.XX' (
WarnXX( ,
,XX, -
$strXX. X
,XXX Y
exceptSerializeXXZ i
)XXi j
;XXj k
}YY 	
}ZZ 
public]] 

override]] 
void]] 
Good]] 
(]] 
)]] 
{^^ 
GoodG2B__ 
(__ 
)__ 
;__ 
GoodB2G`` 
(`` 
)`` 
;`` 
}aa 
privatedd 
staticdd 
voiddd 
GoodG2Bdd 
(dd  
)dd  !
{ee 
stringff 
dataff 
;ff 
datagg 
=gg 
$strgg 
;gg 
{ii 	
TcpListenerjj 
listenerjj  
=jj! "
nulljj# '
;jj' (
trykk 
{ll 
listenermm 
=mm 
newmm 
TcpListenermm *
(mm* +
	IPAddressmm+ 4
.mm4 5
Parsemm5 :
(mm: ;
$strmm; G
)mmG H
,mmH I
$nummmJ O
)mmO P
;mmP Q
listenernn 
.nn 
Startnn 
(nn 
)nn  
;nn  !
usingoo 
(oo 
	TcpClientoo  
tcpConnoo! (
=oo) *
listeneroo+ 3
.oo3 4
AcceptTcpClientoo4 C
(ooC D
)ooD E
)ooE F
{pp 
usingrr 
(rr 
StreamReaderrr '
srrr( *
=rr+ ,
newrr- 0
StreamReaderrr1 =
(rr= >
tcpConnrr> E
.rrE F
	GetStreamrrF O
(rrO P
)rrP Q
)rrQ R
)rrR S
{ss 
datauu 
=uu 
sruu !
.uu! "
ReadLineuu" *
(uu* +
)uu+ ,
;uu, -
}vv 
}ww 
}xx 
catchyy 
(yy 
IOExceptionyy 
exceptIOyy '
)yy' (
{zz 
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ "
.{{" #
LogLevel{{# +
.{{+ ,
Warn{{, 0
,{{0 1
exceptIO{{2 :
,{{: ;
$str{{< W
){{W X
;{{X Y
}|| 
finally}} 
{~~ 
if 
( 
listener 
!= 
null  $
)$ %
{
 
try
 
{
 
listener
  
.
  !
Stop
! %
(
% &
)
& '
;
' (
}
 
catch
 
(
 
SocketException
 )
se
* ,
)
, -
{
 
IO
 
.
 
Logger
 !
.
! "
Log
" %
(
% &
NLog
& *
.
* +
LogLevel
+ 3
.
3 4
Warn
4 8
,
8 9
se
: <
,
< =
$str
> Y
)
Y Z
;
Z [
}
 
}
 
}
 
}
 	
byte
 
[
 
]
 
dataSerialized
 
=
 
null
  $
;
$ %
try
 
{
 	
BinaryFormatter
 
bf
 
=
  
new
! $
BinaryFormatter
% 4
(
4 5
)
5 6
;
6 7
using
 
(
 
var
 
ms
 
=
 
new
 
MemoryStream
  ,
(
, -
)
- .
)
. /
{
 
bf
 
.
 
	Serialize
 
(
 
ms
 
,
  
data
! %
)
% &
;
& '
dataSerialized
 
=
  
ms
! #
.
# $
ToArray
$ +
(
+ ,
)
, -
;
- .
}
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_75b
 J
.
J K
GoodG2BSink
K V
(
V W
dataSerialized
W e
)
g h
;
h i
}
 	
catch
 
(
 $
SerializationException
 %
exceptSerialize
& 5
)
5 6
{
 	
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 
.
 
LogLevel
 '
.
' (
Warn
( ,
,
, -
$str
. X
,
X Y
exceptSerialize
Z i
)
i j
;
j k
}
 	
}
 
private
 
static
 
void
 
GoodB2G
 
(
  
)
  !
{
   
string
¡¡ 
data
¡¡ 
;
¡¡ 
data
¢¢ 
=
¢¢ 
$str
¢¢ 
;
¢¢ 
{
¤¤ 	
TcpListener
¥¥ 
listener
¥¥  
=
¥¥! "
null
¥¥# '
;
¥¥' (
try
¦¦ 
{
§§ 
listener
¨¨ 
=
¨¨ 
new
¨¨ 
TcpListener
¨¨ *
(
¨¨* +
	IPAddress
¨¨+ 4
.
¨¨4 5
Parse
¨¨5 :
(
¨¨: ;
$str
¨¨; G
)
¨¨G H
,
¨¨H I
$num
¨¨J O
)
¨¨O P
;
¨¨P Q
listener
©© 
.
©© 
Start
©© 
(
©© 
)
©©  
;
©©  !
using
ªª 
(
ªª 
	TcpClient
ªª  
tcpConn
ªª! (
=
ªª) *
listener
ªª+ 3
.
ªª3 4
AcceptTcpClient
ªª4 C
(
ªªC D
)
ªªD E
)
ªªE F
{
«« 
using
­­ 
(
­­ 
StreamReader
­­ '
sr
­­( *
=
­­+ ,
new
­­- 0
StreamReader
­­1 =
(
­­= >
tcpConn
­­> E
.
­­E F
	GetStream
­­F O
(
­­O P
)
­­P Q
)
­­Q R
)
­­R S
{
®® 
data
°° 
=
°° 
sr
°° !
.
°°! "
ReadLine
°°" *
(
°°* +
)
°°+ ,
;
°°, -
}
±± 
}
²² 
}
³³ 
catch
´´ 
(
´´ 
IOException
´´ 
exceptIO
´´ '
)
´´' (
{
µµ 
IO
¶¶ 
.
¶¶ 
Logger
¶¶ 
.
¶¶ 
Log
¶¶ 
(
¶¶ 
NLog
¶¶ "
.
¶¶" #
LogLevel
¶¶# +
.
¶¶+ ,
Warn
¶¶, 0
,
¶¶0 1
exceptIO
¶¶2 :
,
¶¶: ;
$str
¶¶< W
)
¶¶W X
;
¶¶X Y
}
·· 
finally
¸¸ 
{
¹¹ 
if
ºº 
(
ºº 
listener
ºº 
!=
ºº 
null
ºº  $
)
ºº$ %
{
»» 
try
¼¼ 
{
½½ 
listener
¾¾  
.
¾¾  !
Stop
¾¾! %
(
¾¾% &
)
¾¾& '
;
¾¾' (
}
¿¿ 
catch
ÀÀ 
(
ÀÀ 
SocketException
ÀÀ )
se
ÀÀ* ,
)
ÀÀ, -
{
ÁÁ 
IO
ÂÂ 
.
ÂÂ 
Logger
ÂÂ !
.
ÂÂ! "
Log
ÂÂ" %
(
ÂÂ% &
NLog
ÂÂ& *
.
ÂÂ* +
LogLevel
ÂÂ+ 3
.
ÂÂ3 4
Warn
ÂÂ4 8
,
ÂÂ8 9
se
ÂÂ: <
,
ÂÂ< =
$str
ÂÂ> Y
)
ÂÂY Z
;
ÂÂZ [
}
ÃÃ 
}
ÄÄ 
}
ÅÅ 
}
ÆÆ 	
byte
ÈÈ 
[
ÈÈ 
]
ÈÈ 
dataSerialized
ÈÈ 
=
ÈÈ 
null
ÈÈ  $
;
ÈÈ$ %
try
ÉÉ 
{
ÊÊ 	
BinaryFormatter
ËË 
bf
ËË 
=
ËË  
new
ËË! $
BinaryFormatter
ËË% 4
(
ËË4 5
)
ËË5 6
;
ËË6 7
using
ÌÌ 
(
ÌÌ 
var
ÌÌ 
ms
ÌÌ 
=
ÌÌ 
new
ÌÌ 
MemoryStream
ÌÌ  ,
(
ÌÌ, -
)
ÌÌ- .
)
ÌÌ. /
{
ÍÍ 
bf
ÎÎ 
.
ÎÎ 
	Serialize
ÎÎ 
(
ÎÎ 
ms
ÎÎ 
,
ÎÎ  
data
ÎÎ! %
)
ÎÎ% &
;
ÎÎ& '
dataSerialized
ÏÏ 
=
ÏÏ  
ms
ÏÏ! #
.
ÏÏ# $
ToArray
ÏÏ$ +
(
ÏÏ+ ,
)
ÏÏ, -
;
ÏÏ- .
}
ÐÐ L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_75b
ÑÑ J
.
ÑÑJ K
GoodB2GSink
ÑÑK V
(
ÑÑV W
dataSerialized
ÑÑW e
)
ÑÑg h
;
ÑÑh i
}
ÒÒ 	
catch
ÓÓ 
(
ÓÓ $
SerializationException
ÓÓ %
exceptSerialize
ÓÓ& 5
)
ÓÓ5 6
{
ÔÔ 	
IO
ÕÕ 
.
ÕÕ 
Logger
ÕÕ 
.
ÕÕ 
Log
ÕÕ 
(
ÕÕ 
NLog
ÕÕ 
.
ÕÕ 
LogLevel
ÕÕ '
.
ÕÕ' (
Warn
ÕÕ( ,
,
ÕÕ, -
$str
ÕÕ. X
,
ÕÕX Y
exceptSerialize
ÕÕZ i
)
ÕÕi j
;
ÕÕj k
}
ÖÖ 	
}
×× 
}ÙÙ 
}ÚÚ æ<
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_75b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_75b D
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
string## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
string)) 
))) 
binForm)) &
.))& '
Deserialize))' 2
())2 3
	memStream))3 <
)))< =
;))= >
}** 
try++ 
{,, 
int-- 
value-- 
=-- 
int-- 
.--  
Parse--  %
(--% &
data--& *
)--* +
;--+ ,
}.. 
catch// 
(// 
FormatException// "
exceptNumberFormat//# 5
)//5 6
{00 
IO22 
.22 
Logger22 
.22 
Log22 
(22 
NLog22 "
.22" #
LogLevel22# +
.22+ ,
Warn22, 0
,220 1
exceptNumberFormat222 D
,22D E
$str22F `
+22a b
data22c g
)22g h
;22h i
}33 
}44 	
catch55 
(55 "
SerializationException55 %
exceptSerialize55& 5
)555 6
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. Y
,77Y Z
exceptSerialize77[ j
)77j k
;77k l
}88 	
}99 
public>> 

static>> 
void>> 
GoodG2BSink>> "
(>>" #
byte>># '
[>>' (
]>>( )
dataSerialized>>* 8
)>>9 :
{?? 
try@@ 
{AA 	
stringBB 
dataBB 
;BB 
varCC 
binFormCC 
=CC 
newCC 
BinaryFormatterCC -
(CC- .
)CC. /
;CC/ 0
usingDD 
(DD 
varDD 
	memStreamDD  
=DD! "
newDD# &
MemoryStreamDD' 3
(DD3 4
)DD4 5
)DD5 6
{EE 
	memStreamFF 
.FF 
WriteFF 
(FF  
dataSerializedFF  .
,FF. /
$numFF0 1
,FF1 2
dataSerializedFF3 A
.FFA B
LengthFFB H
)FFH I
;FFI J
	memStreamGG 
.GG 
SeekGG 
(GG 
$numGG  
,GG  !

SeekOriginGG" ,
.GG, -
BeginGG- 2
)GG2 3
;GG3 4
dataHH 
=HH 
(HH 
stringHH 
)HH 
binFormHH &
.HH& '
DeserializeHH' 2
(HH2 3
	memStreamHH3 <
)HH< =
;HH= >
}II 
tryJJ 
{KK 
intLL 
valueLL 
=LL 
intLL 
.LL  
ParseLL  %
(LL% &
dataLL& *
)LL* +
;LL+ ,
}MM 
catchNN 
(NN 
FormatExceptionNN "
exceptNumberFormatNN# 5
)NN5 6
{OO 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptNumberFormatQQ2 D
,QQD E
$strQQF `
+QQa b
dataQQc g
)QQg h
;QQh i
}RR 
}SS 	
catchTT 
(TT "
SerializationExceptionTT %
exceptSerializeTT& 5
)TT5 6
{UU 	
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV 
.VV 
LogLevelVV '
.VV' (
WarnVV( ,
,VV, -
$strVV. Y
,VVY Z
exceptSerializeVV[ j
)VVj k
;VVk l
}WW 	
}XX 
public[[ 

static[[ 
void[[ 
GoodB2GSink[[ "
([[" #
byte[[# '
[[[' (
][[( )
dataSerialized[[* 8
)[[9 :
{\\ 
try]] 
{^^ 	
string__ 
data__ 
;__ 
var`` 
binForm`` 
=`` 
new`` 
BinaryFormatter`` -
(``- .
)``. /
;``/ 0
usingaa 
(aa 
varaa 
	memStreamaa  
=aa! "
newaa# &
MemoryStreamaa' 3
(aa3 4
)aa4 5
)aa5 6
{bb 
	memStreamcc 
.cc 
Writecc 
(cc  
dataSerializedcc  .
,cc. /
$numcc0 1
,cc1 2
dataSerializedcc3 A
.ccA B
LengthccB H
)ccH I
;ccI J
	memStreamdd 
.dd 
Seekdd 
(dd 
$numdd  
,dd  !

SeekOrigindd" ,
.dd, -
Begindd- 2
)dd2 3
;dd3 4
dataee 
=ee 
(ee 
stringee 
)ee 
binFormee &
.ee& '
Deserializeee' 2
(ee2 3
	memStreamee3 <
)ee< =
;ee= >
}ff 
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF j
+nnk l
exceptNumberFormatnnm 
)	nn 
;
nn 
}oo 
}pp 	
catchqq 
(qq "
SerializationExceptionqq %
exceptSerializeqq& 5
)qq5 6
{rr 	
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss 
.ss 
LogLevelss '
.ss' (
Warnss( ,
,ss, -
$strss. Y
,ssY Z
exceptSerializess[ j
)ssj k
;ssk l
}tt 	
}uu 
}ww 
}xx ¦:
ËC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class J
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81a D
:E F
AbstractTestCaseG W
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
TcpListener&& 
listener&&  
=&&! "
null&&# '
;&&' (
try'' 
{(( 
listener)) 
=)) 
new)) 
TcpListener)) *
())* +
	IPAddress))+ 4
.))4 5
Parse))5 :
()): ;
$str)); G
)))G H
,))H I
$num))J O
)))O P
;))P Q
listener** 
.** 
Start** 
(** 
)**  
;**  !
using++ 
(++ 
	TcpClient++  
tcpConn++! (
=++) *
listener+++ 3
.++3 4
AcceptTcpClient++4 C
(++C D
)++D E
)++E F
{,, 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
tcpConn..> E
...E F
	GetStream..F O
(..O P
)..P Q
)..Q R
)..R S
{// 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
finally99 
{:: 
if;; 
(;; 
listener;; 
!=;; 
null;;  $
);;$ %
{<< 
try== 
{>> 
listener??  
.??  !
Stop??! %
(??% &
)??& '
;??' (
}@@ 
catchAA 
(AA 
SocketExceptionAA )
seAA* ,
)AA, -
{BB 
IOCC 
.CC 
LoggerCC !
.CC! "
LogCC" %
(CC% &
NLogCC& *
.CC* +
LogLevelCC+ 3
.CC3 4
WarnCC4 8
,CC8 9
seCC: <
,CC< =
$strCC> Y
)CCY Z
;CCZ [
}DD 
}EE 
}FF 
}GG 	N
BCWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_baseHH J

baseObjectHHK U
=HHV W
newHHX [N
ACWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_bad	HH\ 
(
HH 
)
HH 
;
HH  

baseObjectII 
.II 
ActionII 
(II 
dataII 
)II  
;II  !
}JJ 
publicMM 

overrideMM 
voidMM 
GoodMM 
(MM 
)MM 
{NN 
GoodG2BOO 
(OO 
)OO 
;OO 
GoodB2GPP 
(PP 
)PP 
;PP 
}QQ 
privateTT 
voidTT 
GoodG2BTT 
(TT 
)TT 
{UU 
stringVV 
dataVV 
;VV 
dataXX 
=XX 
$strXX 
;XX N
BCWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_baseYY J

baseObjectYYK U
=YYV W
newYYX [R
ECWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_goodG2B	YY\ ¡
(
YY¡ ¢
)
YY¢ £
;
YY£ ¤

baseObjectZZ 
.ZZ 
ActionZZ 
(ZZ 
dataZZ 
)ZZ  
;ZZ  !
}[[ 
private^^ 
void^^ 
GoodB2G^^ 
(^^ 
)^^ 
{__ 
string`` 
data`` 
;`` 
dataaa 
=aa 
$straa 
;aa 
{cc 	
TcpListenerdd 
listenerdd  
=dd! "
nulldd# '
;dd' (
tryee 
{ff 
listenergg 
=gg 
newgg 
TcpListenergg *
(gg* +
	IPAddressgg+ 4
.gg4 5
Parsegg5 :
(gg: ;
$strgg; G
)ggG H
,ggH I
$numggJ O
)ggO P
;ggP Q
listenerhh 
.hh 
Starthh 
(hh 
)hh  
;hh  !
usingii 
(ii 
	TcpClientii  
tcpConnii! (
=ii) *
listenerii+ 3
.ii3 4
AcceptTcpClientii4 C
(iiC D
)iiD E
)iiE F
{jj 
usingll 
(ll 
StreamReaderll '
srll( *
=ll+ ,
newll- 0
StreamReaderll1 =
(ll= >
tcpConnll> E
.llE F
	GetStreamllF O
(llO P
)llP Q
)llQ R
)llR S
{mm 
dataoo 
=oo 
sroo !
.oo! "
ReadLineoo" *
(oo* +
)oo+ ,
;oo, -
}pp 
}qq 
}rr 
catchss 
(ss 
IOExceptionss 
exceptIOss '
)ss' (
{tt 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu "
.uu" #
LogLeveluu# +
.uu+ ,
Warnuu, 0
,uu0 1
exceptIOuu2 :
,uu: ;
$struu< W
)uuW X
;uuX Y
}vv 
finallyww 
{xx 
ifyy 
(yy 
listeneryy 
!=yy 
nullyy  $
)yy$ %
{zz 
try{{ 
{|| 
listener}}  
.}}  !
Stop}}! %
(}}% &
)}}& '
;}}' (
}~~ 
catch 
( 
SocketException )
se* ,
), -
{
 
IO
 
.
 
Logger
 !
.
! "
Log
" %
(
% &
NLog
& *
.
* +
LogLevel
+ 3
.
3 4
Warn
4 8
,
8 9
se
: <
,
< =
$str
> Y
)
Y Z
;
Z [
}
 
}
 
}
 
}
 	P
BCWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_base
 J

baseObject
K U
=
V W
new
X [T
ECWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_goodB2G\ ¡
(¡ ¢
)¢ £
;£ ¤

baseObject
 
.
 
Action
 
(
 
data
 
)
  
;
  !
}
 
} 
} 
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_bad.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_bad G
:H IO
BCWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_base	J 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
}(( 
})) 
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_base.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
abstract 
class	 N
BCWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_base Q
{ 
public 

abstract 
void 
Action 
(  
string  &
data' +
), -
;- .
} 
} ­
ÒC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_goodB2G.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class Q
ECWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_goodB2G K
:L MO
BCWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_base	N 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B f
+&&g h
exceptNumberFormat&&i {
)&&{ |
;&&| }
}'' 	
}(( 
})) 
}** 
ÒC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_goodG2B.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class Q
ECWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_goodG2B K
:L MO
BCWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81_base	N 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
})) 
}** Þ-
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_01.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_01 B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using'' 
('' 
	WebClient''  
client''! '
=''( )
new''* -
	WebClient''. 7
(''7 8
)''8 9
)''9 :
{(( 
using)) 
()) 
StreamReader)) '
sr))( *
=))+ ,
new))- 0
StreamReader))1 =
())= >
client))> D
.))D E
OpenRead))E M
())M N
$str))N g
)))g h
)))h i
)))i j
{** 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	
try77 
{88 	
int99 
value99 
=99 
int99 
.99 
Parse99 !
(99! "
data99" &
)99& '
;99' (
}:: 	
catch;; 
(;; 
FormatException;; 
exceptNumberFormat;; 1
);;1 2
{<< 	
IO>> 
.>> 
Logger>> 
.>> 
Log>> 
(>> 
NLog>> 
.>> 
LogLevel>> '
.>>' (
Warn>>( ,
,>>, -
exceptNumberFormat>>. @
,>>@ A
$str>>B \
+>>] ^
data>>_ c
)>>c d
;>>d e
}?? 	
}@@ 
publicCC 

overrideCC 
voidCC 
GoodCC 
(CC 
)CC 
{DD 
GoodG2BEE 
(EE 
)EE 
;EE 
GoodB2GFF 
(FF 
)FF 
;FF 
}GG 
privateJJ 
voidJJ 
GoodG2BJJ 
(JJ 
)JJ 
{KK 
stringLL 
dataLL 
;LL 
dataNN 
=NN 
$strNN 
;NN 
tryOO 
{PP 	
intQQ 
valueQQ 
=QQ 
intQQ 
.QQ 
ParseQQ !
(QQ! "
dataQQ" &
)QQ& '
;QQ' (
}RR 	
catchSS 
(SS 
FormatExceptionSS 
exceptNumberFormatSS 1
)SS1 2
{TT 	
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV 
.VV 
LogLevelVV '
.VV' (
WarnVV( ,
,VV, -
exceptNumberFormatVV. @
,VV@ A
$strVVB \
+VV] ^
dataVV_ c
)VVc d
;VVd e
}WW 	
}XX 
private[[ 
void[[ 
GoodB2G[[ 
([[ 
)[[ 
{\\ 
string]] 
data]] 
;]] 
data^^ 
=^^ 
$str^^ 
;^^ 
{`` 	
tryaa 
{bb 
usingcc 
(cc 
	WebClientcc  
clientcc! '
=cc( )
newcc* -
	WebClientcc. 7
(cc7 8
)cc8 9
)cc9 :
{dd 
usingee 
(ee 
StreamReaderee '
sree( *
=ee+ ,
newee- 0
StreamReaderee1 =
(ee= >
clientee> D
.eeD E
OpenReadeeE M
(eeM N
$streeN g
)eeg h
)eeh i
)eei j
{ff 
datajj 
=jj 
srjj !
.jj! "
ReadLinejj" *
(jj* +
)jj+ ,
;jj, -
}kk 
}ll 
}mm 
catchnn 
(nn 
IOExceptionnn 
exceptIOnn '
)nn' (
{oo 
IOpp 
.pp 
Loggerpp 
.pp 
Logpp 
(pp 
NLogpp "
.pp" #
LogLevelpp# +
.pp+ ,
Warnpp, 0
,pp0 1
exceptIOpp2 :
,pp: ;
$strpp< W
)ppW X
;ppX Y
}qq 
}rr 	
tryss 
{tt 	
intuu 
valueuu 
=uu 
intuu 
.uu 
Parseuu !
(uu! "
datauu" &
)uu& '
;uu' (
}vv 	
catchww 
(ww 
FormatExceptionww 
exceptNumberFormatww 1
)ww1 2
{xx 	
IOzz 
.zz 
Loggerzz 
.zz 
Logzz 
(zz 
NLogzz 
.zz 
LogLevelzz '
.zz' (
Warnzz( ,
,zz, -
exceptNumberFormatzz. @
,zz@ A
$strzzB f
+zzg h
exceptNumberFormatzzi {
)zz{ |
;zz| }
}{{ 	
}|| 
}~~ 
} ÞX
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_02.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_02 B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
true"" 
)"" 
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using)) 
()) 
	WebClient)) $
client))% +
=)), -
new)). 1
	WebClient))2 ;
()); <
)))< =
)))= >
{** 
using++ 
(++ 
StreamReader++ +
sr++, .
=++/ 0
new++1 4
StreamReader++5 A
(++A B
client++B H
.++H I
OpenRead++I Q
(++Q R
$str++R k
)++k l
)++l m
)++m n
{,, 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@ 
true@@ 
)@@ 
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
falseSS 
)SS 
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
true^^ 
)^^ 
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
truepp 
)pp 
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
true{{ 
){{ 
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
true
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	WebClient
 $
client
% +
=
, -
new
. 1
	WebClient
2 ;
(
; <
)
< =
)
= >
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
client
B H
.
H I
OpenRead
I Q
(
Q R
$str
R k
)
k l
)
l m
)
m n
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
false
«« 
)
«« 
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
true
ÂÂ 
)
ÂÂ 
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÉÉ 
(
ÉÉ 
	WebClient
ÉÉ $
client
ÉÉ% +
=
ÉÉ, -
new
ÉÉ. 1
	WebClient
ÉÉ2 ;
(
ÉÉ; <
)
ÉÉ< =
)
ÉÉ= >
{
ÊÊ 
using
ËË 
(
ËË 
StreamReader
ËË +
sr
ËË, .
=
ËË/ 0
new
ËË1 4
StreamReader
ËË5 A
(
ËËA B
client
ËËB H
.
ËËH I
OpenRead
ËËI Q
(
ËËQ R
$str
ËËR k
)
ËËk l
)
ËËl m
)
ËËm n
{
ÌÌ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
true
àà 
)
àà 
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ À[
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_03.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_03 B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
$num"" 
=="" 
$num"" 
)"" 
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using)) 
()) 
	WebClient)) $
client))% +
=)), -
new)). 1
	WebClient))2 ;
()); <
)))< =
)))= >
{** 
using++ 
(++ 
StreamReader++ +
sr++, .
=++/ 0
new++1 4
StreamReader++5 A
(++A B
client++B H
.++H I
OpenRead++I Q
(++Q R
$str++R k
)++k l
)++l m
)++m n
{,, 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@ 
$num@@ 
==@@ 
$num@@ 
)@@ 
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
$numSS 
!=SS 
$numSS 
)SS 
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
$num^^ 
==^^ 
$num^^ 
)^^ 
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
$numpp 
==pp 
$numpp 
)pp 
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
$num{{ 
=={{ 
$num{{ 
){{ 
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	WebClient
 $
client
% +
=
, -
new
. 1
	WebClient
2 ;
(
; <
)
< =
)
= >
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
client
B H
.
H I
OpenRead
I Q
(
Q R
$str
R k
)
k l
)
l m
)
m n
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
$num
«« 
!=
«« 
$num
«« 
)
«« 
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
$num
ÂÂ 
==
ÂÂ 
$num
ÂÂ 
)
ÂÂ 
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÉÉ 
(
ÉÉ 
	WebClient
ÉÉ $
client
ÉÉ% +
=
ÉÉ, -
new
ÉÉ. 1
	WebClient
ÉÉ2 ;
(
ÉÉ; <
)
ÉÉ< =
)
ÉÉ= >
{
ÊÊ 
using
ËË 
(
ËË 
StreamReader
ËË +
sr
ËË, .
=
ËË/ 0
new
ËË1 4
StreamReader
ËË5 A
(
ËËA B
client
ËËB H
.
ËËH I
OpenRead
ËËI Q
(
ËËQ R
$str
ËËR k
)
ËËk l
)
ËËl m
)
ËËm n
{
ÌÌ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
$num
àà 
==
àà 
$num
àà 
)
àà 
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ ¬\
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_04.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_04 B
:C D
AbstractTestCaseE U
{ 
private## 
const## 
bool## 
PRIVATE_CONST_TRUE## )
=##* +
true##, 0
;##0 1
private$$ 
const$$ 
bool$$ 
PRIVATE_CONST_FALSE$$ *
=$$+ ,
false$$- 2
;$$2 3
public&& 

override&& 
void&& 
Bad&& 
(&& 
)&& 
{'' 
string(( 
data(( 
;(( 
if)) 

()) 
PRIVATE_CONST_TRUE)) 
))) 
{** 	
data++ 
=++ 
$str++ 
;++ 
{-- 
try.. 
{// 
using00 
(00 
	WebClient00 $
client00% +
=00, -
new00. 1
	WebClient002 ;
(00; <
)00< =
)00= >
{11 
using22 
(22 
StreamReader22 +
sr22, .
=22/ 0
new221 4
StreamReader225 A
(22A B
client22B H
.22H I
OpenRead22I Q
(22Q R
$str22R k
)22k l
)22l m
)22m n
{33 
data77  
=77! "
sr77# %
.77% &
ReadLine77& .
(77. /
)77/ 0
;770 1
}88 
}99 
}:: 
catch;; 
(;; 
IOException;; "
exceptIO;;# +
);;+ ,
{<< 
IO== 
.== 
Logger== 
.== 
Log== !
(==! "
NLog==" &
.==& '
LogLevel==' /
.==/ 0
Warn==0 4
,==4 5
exceptIO==6 >
,==> ?
$str==@ [
)==[ \
;==\ ]
}>> 
}?? 
}@@ 	
elseAA 
{BB 	
dataEE 
=EE 
nullEE 
;EE 
}FF 	
ifGG 

(GG 
PRIVATE_CONST_TRUEGG 
)GG 
{HH 	
tryII 
{JJ 
intKK 
valueKK 
=KK 
intKK 
.KK  
ParseKK  %
(KK% &
dataKK& *
)KK* +
;KK+ ,
}LL 
catchMM 
(MM 
FormatExceptionMM "
exceptNumberFormatMM# 5
)MM5 6
{NN 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP 
(PP 
NLogPP "
.PP" #
LogLevelPP# +
.PP+ ,
WarnPP, 0
,PP0 1
exceptNumberFormatPP2 D
,PPD E
$strPPF `
+PPa b
dataPPc g
)PPg h
;PPh i
}QQ 
}RR 	
}SS 
privateWW 
voidWW 
GoodG2B1WW 
(WW 
)WW 
{XX 
stringYY 
dataYY 
;YY 
ifZZ 

(ZZ 
PRIVATE_CONST_FALSEZZ 
)ZZ  
{[[ 	
data^^ 
=^^ 
null^^ 
;^^ 
}__ 	
else`` 
{aa 	
datacc 
=cc 
$strcc 
;cc 
}dd 	
ifee 

(ee 
PRIVATE_CONST_TRUEee 
)ee 
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF `
+nna b
datannc g
)nng h
;nnh i
}oo 
}pp 	
}qq 
privatett 
voidtt 
GoodG2B2tt 
(tt 
)tt 
{uu 
stringvv 
datavv 
;vv 
ifww 

(ww 
PRIVATE_CONST_TRUEww 
)ww 
{xx 	
datazz 
=zz 
$strzz 
;zz 
}{{ 	
else|| 
{}} 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	WebClient
 $
client
% +
=
, -
new
. 1
	WebClient
2 ;
(
; <
)
< =
)
= >
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
client
B H
.
H I
OpenRead
I Q
(
Q R
$str
R k
)
k l
)
l m
)
m n
{
 
data
¢¢  
=
¢¢! "
sr
¢¢# %
.
¢¢% &
ReadLine
¢¢& .
(
¢¢. /
)
¢¢/ 0
;
¢¢0 1
}
££ 
}
¤¤ 
}
¥¥ 
catch
¦¦ 
(
¦¦ 
IOException
¦¦ "
exceptIO
¦¦# +
)
¦¦+ ,
{
§§ 
IO
¨¨ 
.
¨¨ 
Logger
¨¨ 
.
¨¨ 
Log
¨¨ !
(
¨¨! "
NLog
¨¨" &
.
¨¨& '
LogLevel
¨¨' /
.
¨¨/ 0
Warn
¨¨0 4
,
¨¨4 5
exceptIO
¨¨6 >
,
¨¨> ?
$str
¨¨@ [
)
¨¨[ \
;
¨¨\ ]
}
©© 
}
ªª 
}
«« 	
else
¬¬ 
{
­­ 	
data
°° 
=
°° 
null
°° 
;
°° 
}
±± 	
if
²² 

(
²² !
PRIVATE_CONST_FALSE
²² 
)
²²  
{
³³ 	
IO
µµ 
.
µµ 
	WriteLine
µµ 
(
µµ 
$str
µµ /
)
µµ/ 0
;
µµ0 1
}
¶¶ 	
else
·· 
{
¸¸ 	
try
¹¹ 
{
ºº 
int
»» 
value
»» 
=
»» 
int
»» 
.
»»  
Parse
»»  %
(
»»% &
data
»»& *
)
»»* +
;
»»+ ,
}
¼¼ 
catch
½½ 
(
½½ 
FormatException
½½ " 
exceptNumberFormat
½½# 5
)
½½5 6
{
¾¾ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ 
.
ÀÀ 
Log
ÀÀ 
(
ÀÀ 
NLog
ÀÀ "
.
ÀÀ" #
LogLevel
ÀÀ# +
.
ÀÀ+ ,
Warn
ÀÀ, 0
,
ÀÀ0 1 
exceptNumberFormat
ÀÀ2 D
,
ÀÀD E
$str
ÀÀF j
+
ÀÀk l 
exceptNumberFormat
ÀÀm 
)ÀÀ 
;ÀÀ 
}
ÁÁ 
}
ÂÂ 	
}
ÃÃ 
private
ÆÆ 
void
ÆÆ 
GoodB2G2
ÆÆ 
(
ÆÆ 
)
ÆÆ 
{
ÇÇ 
string
ÈÈ 
data
ÈÈ 
;
ÈÈ 
if
ÉÉ 

(
ÉÉ  
PRIVATE_CONST_TRUE
ÉÉ 
)
ÉÉ 
{
ÊÊ 	
data
ËË 
=
ËË 
$str
ËË 
;
ËË 
{
ÍÍ 
try
ÎÎ 
{
ÏÏ 
using
ÐÐ 
(
ÐÐ 
	WebClient
ÐÐ $
client
ÐÐ% +
=
ÐÐ, -
new
ÐÐ. 1
	WebClient
ÐÐ2 ;
(
ÐÐ; <
)
ÐÐ< =
)
ÐÐ= >
{
ÑÑ 
using
ÒÒ 
(
ÒÒ 
StreamReader
ÒÒ +
sr
ÒÒ, .
=
ÒÒ/ 0
new
ÒÒ1 4
StreamReader
ÒÒ5 A
(
ÒÒA B
client
ÒÒB H
.
ÒÒH I
OpenRead
ÒÒI Q
(
ÒÒQ R
$str
ÒÒR k
)
ÒÒk l
)
ÒÒl m
)
ÒÒm n
{
ÓÓ 
data
××  
=
××! "
sr
××# %
.
××% &
ReadLine
××& .
(
××. /
)
××/ 0
;
××0 1
}
ØØ 
}
ÙÙ 
}
ÚÚ 
catch
ÛÛ 
(
ÛÛ 
IOException
ÛÛ "
exceptIO
ÛÛ# +
)
ÛÛ+ ,
{
ÜÜ 
IO
ÝÝ 
.
ÝÝ 
Logger
ÝÝ 
.
ÝÝ 
Log
ÝÝ !
(
ÝÝ! "
NLog
ÝÝ" &
.
ÝÝ& '
LogLevel
ÝÝ' /
.
ÝÝ/ 0
Warn
ÝÝ0 4
,
ÝÝ4 5
exceptIO
ÝÝ6 >
,
ÝÝ> ?
$str
ÝÝ@ [
)
ÝÝ[ \
;
ÝÝ\ ]
}
ÞÞ 
}
ßß 
}
àà 	
else
áá 
{
ââ 	
data
åå 
=
åå 
null
åå 
;
åå 
}
ææ 	
if
çç 

(
çç  
PRIVATE_CONST_TRUE
çç 
)
çç 
{
èè 	
try
éé 
{
êê 
int
ëë 
value
ëë 
=
ëë 
int
ëë 
.
ëë  
Parse
ëë  %
(
ëë% &
data
ëë& *
)
ëë* +
;
ëë+ ,
}
ìì 
catch
íí 
(
íí 
FormatException
íí " 
exceptNumberFormat
íí# 5
)
íí5 6
{
îî 
IO
ðð 
.
ðð 
Logger
ðð 
.
ðð 
Log
ðð 
(
ðð 
NLog
ðð "
.
ðð" #
LogLevel
ðð# +
.
ðð+ ,
Warn
ðð, 0
,
ðð0 1 
exceptNumberFormat
ðð2 D
,
ððD E
$str
ððF j
+
ððk l 
exceptNumberFormat
ððm 
)ðð 
;ðð 
}
ññ 
}
òò 	
}
óó 
public
õõ 

override
õõ 
void
õõ 
Good
õõ 
(
õõ 
)
õõ 
{
öö 
GoodG2B1
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷ 
GoodG2B2
øø 
(
øø 
)
øø 
;
øø 
GoodB2G1
ùù 
(
ùù 
)
ùù 
;
ùù 
GoodB2G2
úú 
(
úú 
)
úú 
;
úú 
}
ûû 
}ýý 
}þþ ª[
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_05.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_05 B
:C D
AbstractTestCaseE U
{ 
private"" 
bool"" 
privateTrue"" 
="" 
true"" #
;""# $
private## 
bool## 
privateFalse## 
=## 
false##  %
;##% &
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
string'' 
data'' 
;'' 
if(( 

((( 
privateTrue(( 
)(( 
{)) 	
data** 
=** 
$str** 
;** 
{,, 
try-- 
{.. 
using// 
(// 
	WebClient// $
client//% +
=//, -
new//. 1
	WebClient//2 ;
(//; <
)//< =
)//= >
{00 
using11 
(11 
StreamReader11 +
sr11, .
=11/ 0
new111 4
StreamReader115 A
(11A B
client11B H
.11H I
OpenRead11I Q
(11Q R
$str11R k
)11k l
)11l m
)11m n
{22 
data66  
=66! "
sr66# %
.66% &
ReadLine66& .
(66. /
)66/ 0
;660 1
}77 
}88 
}99 
catch:: 
(:: 
IOException:: "
exceptIO::# +
)::+ ,
{;; 
IO<< 
.<< 
Logger<< 
.<< 
Log<< !
(<<! "
NLog<<" &
.<<& '
LogLevel<<' /
.<</ 0
Warn<<0 4
,<<4 5
exceptIO<<6 >
,<<> ?
$str<<@ [
)<<[ \
;<<\ ]
}== 
}>> 
}?? 	
else@@ 
{AA 	
dataDD 
=DD 
nullDD 
;DD 
}EE 	
ifFF 

(FF 
privateTrueFF 
)FF 
{GG 	
tryHH 
{II 
intJJ 
valueJJ 
=JJ 
intJJ 
.JJ  
ParseJJ  %
(JJ% &
dataJJ& *
)JJ* +
;JJ+ ,
}KK 
catchLL 
(LL 
FormatExceptionLL "
exceptNumberFormatLL# 5
)LL5 6
{MM 
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO "
.OO" #
LogLevelOO# +
.OO+ ,
WarnOO, 0
,OO0 1
exceptNumberFormatOO2 D
,OOD E
$strOOF `
+OOa b
dataOOc g
)OOg h
;OOh i
}PP 
}QQ 	
}RR 
privateVV 
voidVV 
GoodG2B1VV 
(VV 
)VV 
{WW 
stringXX 
dataXX 
;XX 
ifYY 

(YY 
privateFalseYY 
)YY 
{ZZ 	
data]] 
=]] 
null]] 
;]] 
}^^ 	
else__ 
{`` 	
databb 
=bb 
$strbb 
;bb 
}cc 	
ifdd 

(dd 
privateTruedd 
)dd 
{ee 	
tryff 
{gg 
inthh 
valuehh 
=hh 
inthh 
.hh  
Parsehh  %
(hh% &
datahh& *
)hh* +
;hh+ ,
}ii 
catchjj 
(jj 
FormatExceptionjj "
exceptNumberFormatjj# 5
)jj5 6
{kk 
IOmm 
.mm 
Loggermm 
.mm 
Logmm 
(mm 
NLogmm "
.mm" #
LogLevelmm# +
.mm+ ,
Warnmm, 0
,mm0 1
exceptNumberFormatmm2 D
,mmD E
$strmmF `
+mma b
datammc g
)mmg h
;mmh i
}nn 
}oo 	
}pp 
privatess 
voidss 
GoodG2B2ss 
(ss 
)ss 
{tt 
stringuu 
datauu 
;uu 
ifvv 

(vv 
privateTruevv 
)vv 
{ww 	
datayy 
=yy 
$stryy 
;yy 
}zz 	
else{{ 
{|| 	
data 
= 
null 
; 
}
 	
if
 

(
 
privateTrue
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	WebClient
 $
client
% +
=
, -
new
. 1
	WebClient
2 ;
(
; <
)
< =
)
= >
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
client
B H
.
H I
OpenRead
I Q
(
Q R
$str
R k
)
k l
)
l m
)
m n
{
 
data
¡¡  
=
¡¡! "
sr
¡¡# %
.
¡¡% &
ReadLine
¡¡& .
(
¡¡. /
)
¡¡/ 0
;
¡¡0 1
}
¢¢ 
}
££ 
}
¤¤ 
catch
¥¥ 
(
¥¥ 
IOException
¥¥ "
exceptIO
¥¥# +
)
¥¥+ ,
{
¦¦ 
IO
§§ 
.
§§ 
Logger
§§ 
.
§§ 
Log
§§ !
(
§§! "
NLog
§§" &
.
§§& '
LogLevel
§§' /
.
§§/ 0
Warn
§§0 4
,
§§4 5
exceptIO
§§6 >
,
§§> ?
$str
§§@ [
)
§§[ \
;
§§\ ]
}
¨¨ 
}
©© 
}
ªª 	
else
«« 
{
¬¬ 	
data
¯¯ 
=
¯¯ 
null
¯¯ 
;
¯¯ 
}
°° 	
if
±± 

(
±± 
privateFalse
±± 
)
±± 
{
²² 	
IO
´´ 
.
´´ 
	WriteLine
´´ 
(
´´ 
$str
´´ /
)
´´/ 0
;
´´0 1
}
µµ 	
else
¶¶ 
{
·· 	
try
¸¸ 
{
¹¹ 
int
ºº 
value
ºº 
=
ºº 
int
ºº 
.
ºº  
Parse
ºº  %
(
ºº% &
data
ºº& *
)
ºº* +
;
ºº+ ,
}
»» 
catch
¼¼ 
(
¼¼ 
FormatException
¼¼ " 
exceptNumberFormat
¼¼# 5
)
¼¼5 6
{
½½ 
IO
¿¿ 
.
¿¿ 
Logger
¿¿ 
.
¿¿ 
Log
¿¿ 
(
¿¿ 
NLog
¿¿ "
.
¿¿" #
LogLevel
¿¿# +
.
¿¿+ ,
Warn
¿¿, 0
,
¿¿0 1 
exceptNumberFormat
¿¿2 D
,
¿¿D E
$str
¿¿F j
+
¿¿k l 
exceptNumberFormat
¿¿m 
)¿¿ 
;¿¿ 
}
ÀÀ 
}
ÁÁ 	
}
ÂÂ 
private
ÅÅ 
void
ÅÅ 
GoodB2G2
ÅÅ 
(
ÅÅ 
)
ÅÅ 
{
ÆÆ 
string
ÇÇ 
data
ÇÇ 
;
ÇÇ 
if
ÈÈ 

(
ÈÈ 
privateTrue
ÈÈ 
)
ÈÈ 
{
ÉÉ 	
data
ÊÊ 
=
ÊÊ 
$str
ÊÊ 
;
ÊÊ 
{
ÌÌ 
try
ÍÍ 
{
ÎÎ 
using
ÏÏ 
(
ÏÏ 
	WebClient
ÏÏ $
client
ÏÏ% +
=
ÏÏ, -
new
ÏÏ. 1
	WebClient
ÏÏ2 ;
(
ÏÏ; <
)
ÏÏ< =
)
ÏÏ= >
{
ÐÐ 
using
ÑÑ 
(
ÑÑ 
StreamReader
ÑÑ +
sr
ÑÑ, .
=
ÑÑ/ 0
new
ÑÑ1 4
StreamReader
ÑÑ5 A
(
ÑÑA B
client
ÑÑB H
.
ÑÑH I
OpenRead
ÑÑI Q
(
ÑÑQ R
$str
ÑÑR k
)
ÑÑk l
)
ÑÑl m
)
ÑÑm n
{
ÒÒ 
data
ÖÖ  
=
ÖÖ! "
sr
ÖÖ# %
.
ÖÖ% &
ReadLine
ÖÖ& .
(
ÖÖ. /
)
ÖÖ/ 0
;
ÖÖ0 1
}
×× 
}
ØØ 
}
ÙÙ 
catch
ÚÚ 
(
ÚÚ 
IOException
ÚÚ "
exceptIO
ÚÚ# +
)
ÚÚ+ ,
{
ÛÛ 
IO
ÜÜ 
.
ÜÜ 
Logger
ÜÜ 
.
ÜÜ 
Log
ÜÜ !
(
ÜÜ! "
NLog
ÜÜ" &
.
ÜÜ& '
LogLevel
ÜÜ' /
.
ÜÜ/ 0
Warn
ÜÜ0 4
,
ÜÜ4 5
exceptIO
ÜÜ6 >
,
ÜÜ> ?
$str
ÜÜ@ [
)
ÜÜ[ \
;
ÜÜ\ ]
}
ÝÝ 
}
ÞÞ 
}
ßß 	
else
àà 
{
áá 	
data
ää 
=
ää 
null
ää 
;
ää 
}
åå 	
if
ææ 

(
ææ 
privateTrue
ææ 
)
ææ 
{
çç 	
try
èè 
{
éé 
int
êê 
value
êê 
=
êê 
int
êê 
.
êê  
Parse
êê  %
(
êê% &
data
êê& *
)
êê* +
;
êê+ ,
}
ëë 
catch
ìì 
(
ìì 
FormatException
ìì " 
exceptNumberFormat
ìì# 5
)
ìì5 6
{
íí 
IO
ïï 
.
ïï 
Logger
ïï 
.
ïï 
Log
ïï 
(
ïï 
NLog
ïï "
.
ïï" #
LogLevel
ïï# +
.
ïï+ ,
Warn
ïï, 0
,
ïï0 1 
exceptNumberFormat
ïï2 D
,
ïïD E
$str
ïïF j
+
ïïk l 
exceptNumberFormat
ïïm 
)ïï 
;ïï 
}
ðð 
}
ññ 	
}
òò 
public
ôô 

override
ôô 
void
ôô 
Good
ôô 
(
ôô 
)
ôô 
{
õõ 
GoodG2B1
öö 
(
öö 
)
öö 
;
öö 
GoodG2B2
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷ 
GoodB2G1
øø 
(
øø 
)
øø 
;
øø 
GoodB2G2
ùù 
(
ùù 
)
ùù 
;
ùù 
}
úú 
}üü 
}ýý û]
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_06.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_06 B
:C D
AbstractTestCaseE U
{ 
private"" 
const"" 
int"" 
PRIVATE_CONST_FIVE"" (
="") *
$num""+ ,
;"", -
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
string&& 
data&& 
;&& 
if'' 

('' 
PRIVATE_CONST_FIVE'' 
==''  
$num''  !
)''! "
{(( 	
data)) 
=)) 
$str)) 
;)) 
{++ 
try,, 
{-- 
using.. 
(.. 
	WebClient.. $
client..% +
=.., -
new... 1
	WebClient..2 ;
(..; <
)..< =
)..= >
{// 
using00 
(00 
StreamReader00 +
sr00, .
=00/ 0
new001 4
StreamReader005 A
(00A B
client00B H
.00H I
OpenRead00I Q
(00Q R
$str00R k
)00k l
)00l m
)00m n
{11 
data55  
=55! "
sr55# %
.55% &
ReadLine55& .
(55. /
)55/ 0
;550 1
}66 
}77 
}88 
catch99 
(99 
IOException99 "
exceptIO99# +
)99+ ,
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
exceptIO;;6 >
,;;> ?
$str;;@ [
);;[ \
;;;\ ]
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataCC 
=CC 
nullCC 
;CC 
}DD 	
ifEE 

(EE 
PRIVATE_CONST_FIVEEE 
==EE  
$numEE  !
)EE! "
{FF 	
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateUU 
voidUU 
GoodG2B1UU 
(UU 
)UU 
{VV 
stringWW 
dataWW 
;WW 
ifXX 

(XX 
PRIVATE_CONST_FIVEXX 
!=XX  
$numXX  !
)XX! "
{YY 	
data\\ 
=\\ 
null\\ 
;\\ 
}]] 	
else^^ 
{__ 	
dataaa 
=aa 
$straa 
;aa 
}bb 	
ifcc 

(cc 
PRIVATE_CONST_FIVEcc 
==cc  
$numcc  !
)cc! "
{dd 	
tryee 
{ff 
intgg 
valuegg 
=gg 
intgg 
.gg  
Parsegg  %
(gg% &
datagg& *
)gg* +
;gg+ ,
}hh 
catchii 
(ii 
FormatExceptionii "
exceptNumberFormatii# 5
)ii5 6
{jj 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptNumberFormatll2 D
,llD E
$strllF `
+lla b
datallc g
)llg h
;llh i
}mm 
}nn 	
}oo 
privaterr 
voidrr 
GoodG2B2rr 
(rr 
)rr 
{ss 
stringtt 
datatt 
;tt 
ifuu 

(uu 
PRIVATE_CONST_FIVEuu 
==uu  
$numuu  !
)uu! "
{vv 	
dataxx 
=xx 
$strxx 
;xx 
}yy 	
elsezz 
{{{ 	
data~~ 
=~~ 
null~~ 
;~~ 
} 	
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	WebClient
 $
client
% +
=
, -
new
. 1
	WebClient
2 ;
(
; <
)
< =
)
= >
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
client
B H
.
H I
OpenRead
I Q
(
Q R
$str
R k
)
k l
)
l m
)
m n
{
 
data
    
=
  ! "
sr
  # %
.
  % &
ReadLine
  & .
(
  . /
)
  / 0
;
  0 1
}
¡¡ 
}
¢¢ 
}
££ 
catch
¤¤ 
(
¤¤ 
IOException
¤¤ "
exceptIO
¤¤# +
)
¤¤+ ,
{
¥¥ 
IO
¦¦ 
.
¦¦ 
Logger
¦¦ 
.
¦¦ 
Log
¦¦ !
(
¦¦! "
NLog
¦¦" &
.
¦¦& '
LogLevel
¦¦' /
.
¦¦/ 0
Warn
¦¦0 4
,
¦¦4 5
exceptIO
¦¦6 >
,
¦¦> ?
$str
¦¦@ [
)
¦¦[ \
;
¦¦\ ]
}
§§ 
}
¨¨ 
}
©© 	
else
ªª 
{
«« 	
data
®® 
=
®® 
null
®® 
;
®® 
}
¯¯ 	
if
°° 

(
°°  
PRIVATE_CONST_FIVE
°° 
!=
°°  
$num
°°  !
)
°°! "
{
±± 	
IO
³³ 
.
³³ 
	WriteLine
³³ 
(
³³ 
$str
³³ /
)
³³/ 0
;
³³0 1
}
´´ 	
else
µµ 
{
¶¶ 	
try
·· 
{
¸¸ 
int
¹¹ 
value
¹¹ 
=
¹¹ 
int
¹¹ 
.
¹¹  
Parse
¹¹  %
(
¹¹% &
data
¹¹& *
)
¹¹* +
;
¹¹+ ,
}
ºº 
catch
»» 
(
»» 
FormatException
»» " 
exceptNumberFormat
»»# 5
)
»»5 6
{
¼¼ 
IO
¾¾ 
.
¾¾ 
Logger
¾¾ 
.
¾¾ 
Log
¾¾ 
(
¾¾ 
NLog
¾¾ "
.
¾¾" #
LogLevel
¾¾# +
.
¾¾+ ,
Warn
¾¾, 0
,
¾¾0 1 
exceptNumberFormat
¾¾2 D
,
¾¾D E
$str
¾¾F j
+
¾¾k l 
exceptNumberFormat
¾¾m 
)¾¾ 
;¾¾ 
}
¿¿ 
}
ÀÀ 	
}
ÁÁ 
private
ÄÄ 
void
ÄÄ 
GoodB2G2
ÄÄ 
(
ÄÄ 
)
ÄÄ 
{
ÅÅ 
string
ÆÆ 
data
ÆÆ 
;
ÆÆ 
if
ÇÇ 

(
ÇÇ  
PRIVATE_CONST_FIVE
ÇÇ 
==
ÇÇ  
$num
ÇÇ  !
)
ÇÇ! "
{
ÈÈ 	
data
ÉÉ 
=
ÉÉ 
$str
ÉÉ 
;
ÉÉ 
{
ËË 
try
ÌÌ 
{
ÍÍ 
using
ÎÎ 
(
ÎÎ 
	WebClient
ÎÎ $
client
ÎÎ% +
=
ÎÎ, -
new
ÎÎ. 1
	WebClient
ÎÎ2 ;
(
ÎÎ; <
)
ÎÎ< =
)
ÎÎ= >
{
ÏÏ 
using
ÐÐ 
(
ÐÐ 
StreamReader
ÐÐ +
sr
ÐÐ, .
=
ÐÐ/ 0
new
ÐÐ1 4
StreamReader
ÐÐ5 A
(
ÐÐA B
client
ÐÐB H
.
ÐÐH I
OpenRead
ÐÐI Q
(
ÐÐQ R
$str
ÐÐR k
)
ÐÐk l
)
ÐÐl m
)
ÐÐm n
{
ÑÑ 
data
ÕÕ  
=
ÕÕ! "
sr
ÕÕ# %
.
ÕÕ% &
ReadLine
ÕÕ& .
(
ÕÕ. /
)
ÕÕ/ 0
;
ÕÕ0 1
}
ÖÖ 
}
×× 
}
ØØ 
catch
ÙÙ 
(
ÙÙ 
IOException
ÙÙ "
exceptIO
ÙÙ# +
)
ÙÙ+ ,
{
ÚÚ 
IO
ÛÛ 
.
ÛÛ 
Logger
ÛÛ 
.
ÛÛ 
Log
ÛÛ !
(
ÛÛ! "
NLog
ÛÛ" &
.
ÛÛ& '
LogLevel
ÛÛ' /
.
ÛÛ/ 0
Warn
ÛÛ0 4
,
ÛÛ4 5
exceptIO
ÛÛ6 >
,
ÛÛ> ?
$str
ÛÛ@ [
)
ÛÛ[ \
;
ÛÛ\ ]
}
ÜÜ 
}
ÝÝ 
}
ÞÞ 	
else
ßß 
{
àà 	
data
ãã 
=
ãã 
null
ãã 
;
ãã 
}
ää 	
if
åå 

(
åå  
PRIVATE_CONST_FIVE
åå 
==
åå  
$num
åå  !
)
åå! "
{
ææ 	
try
çç 
{
èè 
int
éé 
value
éé 
=
éé 
int
éé 
.
éé  
Parse
éé  %
(
éé% &
data
éé& *
)
éé* +
;
éé+ ,
}
êê 
catch
ëë 
(
ëë 
FormatException
ëë " 
exceptNumberFormat
ëë# 5
)
ëë5 6
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî 
(
îî 
NLog
îî "
.
îî" #
LogLevel
îî# +
.
îî+ ,
Warn
îî, 0
,
îî0 1 
exceptNumberFormat
îî2 D
,
îîD E
$str
îîF j
+
îîk l 
exceptNumberFormat
îîm 
)îî 
;îî 
}
ïï 
}
ðð 	
}
ññ 
public
óó 

override
óó 
void
óó 
Good
óó 
(
óó 
)
óó 
{
ôô 
GoodG2B1
õõ 
(
õõ 
)
õõ 
;
õõ 
GoodG2B2
öö 
(
öö 
)
öö 
;
öö 
GoodB2G1
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷ 
GoodB2G2
øø 
(
øø 
)
øø 
;
øø 
}
ùù 
}ûû 
}üü ]
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_07.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_07 B
:C D
AbstractTestCaseE U
{ 
private"" 
int"" 
privateFive"" 
="" 
$num"" 
;""  
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
string&& 
data&& 
;&& 
if'' 

('' 
privateFive'' 
=='' 
$num'' 
)'' 
{(( 	
data)) 
=)) 
$str)) 
;)) 
{++ 
try,, 
{-- 
using.. 
(.. 
	WebClient.. $
client..% +
=.., -
new... 1
	WebClient..2 ;
(..; <
)..< =
)..= >
{// 
using00 
(00 
StreamReader00 +
sr00, .
=00/ 0
new001 4
StreamReader005 A
(00A B
client00B H
.00H I
OpenRead00I Q
(00Q R
$str00R k
)00k l
)00l m
)00m n
{11 
data55  
=55! "
sr55# %
.55% &
ReadLine55& .
(55. /
)55/ 0
;550 1
}66 
}77 
}88 
catch99 
(99 
IOException99 "
exceptIO99# +
)99+ ,
{:: 
IO;; 
.;; 
Logger;; 
.;; 
Log;; !
(;;! "
NLog;;" &
.;;& '
LogLevel;;' /
.;;/ 0
Warn;;0 4
,;;4 5
exceptIO;;6 >
,;;> ?
$str;;@ [
);;[ \
;;;\ ]
}<< 
}== 
}>> 	
else?? 
{@@ 	
dataCC 
=CC 
nullCC 
;CC 
}DD 	
ifEE 

(EE 
privateFiveEE 
==EE 
$numEE 
)EE 
{FF 	
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateUU 
voidUU 
GoodG2B1UU 
(UU 
)UU 
{VV 
stringWW 
dataWW 
;WW 
ifXX 

(XX 
privateFiveXX 
!=XX 
$numXX 
)XX 
{YY 	
data\\ 
=\\ 
null\\ 
;\\ 
}]] 	
else^^ 
{__ 	
dataaa 
=aa 
$straa 
;aa 
}bb 	
ifcc 

(cc 
privateFivecc 
==cc 
$numcc 
)cc 
{dd 	
tryee 
{ff 
intgg 
valuegg 
=gg 
intgg 
.gg  
Parsegg  %
(gg% &
datagg& *
)gg* +
;gg+ ,
}hh 
catchii 
(ii 
FormatExceptionii "
exceptNumberFormatii# 5
)ii5 6
{jj 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
exceptNumberFormatll2 D
,llD E
$strllF `
+lla b
datallc g
)llg h
;llh i
}mm 
}nn 	
}oo 
privaterr 
voidrr 
GoodG2B2rr 
(rr 
)rr 
{ss 
stringtt 
datatt 
;tt 
ifuu 

(uu 
privateFiveuu 
==uu 
$numuu 
)uu 
{vv 	
dataxx 
=xx 
$strxx 
;xx 
}yy 	
elsezz 
{{{ 	
data~~ 
=~~ 
null~~ 
;~~ 
} 	
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	WebClient
 $
client
% +
=
, -
new
. 1
	WebClient
2 ;
(
; <
)
< =
)
= >
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
client
B H
.
H I
OpenRead
I Q
(
Q R
$str
R k
)
k l
)
l m
)
m n
{
 
data
    
=
  ! "
sr
  # %
.
  % &
ReadLine
  & .
(
  . /
)
  / 0
;
  0 1
}
¡¡ 
}
¢¢ 
}
££ 
catch
¤¤ 
(
¤¤ 
IOException
¤¤ "
exceptIO
¤¤# +
)
¤¤+ ,
{
¥¥ 
IO
¦¦ 
.
¦¦ 
Logger
¦¦ 
.
¦¦ 
Log
¦¦ !
(
¦¦! "
NLog
¦¦" &
.
¦¦& '
LogLevel
¦¦' /
.
¦¦/ 0
Warn
¦¦0 4
,
¦¦4 5
exceptIO
¦¦6 >
,
¦¦> ?
$str
¦¦@ [
)
¦¦[ \
;
¦¦\ ]
}
§§ 
}
¨¨ 
}
©© 	
else
ªª 
{
«« 	
data
®® 
=
®® 
null
®® 
;
®® 
}
¯¯ 	
if
°° 

(
°° 
privateFive
°° 
!=
°° 
$num
°° 
)
°° 
{
±± 	
IO
³³ 
.
³³ 
	WriteLine
³³ 
(
³³ 
$str
³³ /
)
³³/ 0
;
³³0 1
}
´´ 	
else
µµ 
{
¶¶ 	
try
·· 
{
¸¸ 
int
¹¹ 
value
¹¹ 
=
¹¹ 
int
¹¹ 
.
¹¹  
Parse
¹¹  %
(
¹¹% &
data
¹¹& *
)
¹¹* +
;
¹¹+ ,
}
ºº 
catch
»» 
(
»» 
FormatException
»» " 
exceptNumberFormat
»»# 5
)
»»5 6
{
¼¼ 
IO
¾¾ 
.
¾¾ 
Logger
¾¾ 
.
¾¾ 
Log
¾¾ 
(
¾¾ 
NLog
¾¾ "
.
¾¾" #
LogLevel
¾¾# +
.
¾¾+ ,
Warn
¾¾, 0
,
¾¾0 1 
exceptNumberFormat
¾¾2 D
,
¾¾D E
$str
¾¾F j
+
¾¾k l 
exceptNumberFormat
¾¾m 
)¾¾ 
;¾¾ 
}
¿¿ 
}
ÀÀ 	
}
ÁÁ 
private
ÄÄ 
void
ÄÄ 
GoodB2G2
ÄÄ 
(
ÄÄ 
)
ÄÄ 
{
ÅÅ 
string
ÆÆ 
data
ÆÆ 
;
ÆÆ 
if
ÇÇ 

(
ÇÇ 
privateFive
ÇÇ 
==
ÇÇ 
$num
ÇÇ 
)
ÇÇ 
{
ÈÈ 	
data
ÉÉ 
=
ÉÉ 
$str
ÉÉ 
;
ÉÉ 
{
ËË 
try
ÌÌ 
{
ÍÍ 
using
ÎÎ 
(
ÎÎ 
	WebClient
ÎÎ $
client
ÎÎ% +
=
ÎÎ, -
new
ÎÎ. 1
	WebClient
ÎÎ2 ;
(
ÎÎ; <
)
ÎÎ< =
)
ÎÎ= >
{
ÏÏ 
using
ÐÐ 
(
ÐÐ 
StreamReader
ÐÐ +
sr
ÐÐ, .
=
ÐÐ/ 0
new
ÐÐ1 4
StreamReader
ÐÐ5 A
(
ÐÐA B
client
ÐÐB H
.
ÐÐH I
OpenRead
ÐÐI Q
(
ÐÐQ R
$str
ÐÐR k
)
ÐÐk l
)
ÐÐl m
)
ÐÐm n
{
ÑÑ 
data
ÕÕ  
=
ÕÕ! "
sr
ÕÕ# %
.
ÕÕ% &
ReadLine
ÕÕ& .
(
ÕÕ. /
)
ÕÕ/ 0
;
ÕÕ0 1
}
ÖÖ 
}
×× 
}
ØØ 
catch
ÙÙ 
(
ÙÙ 
IOException
ÙÙ "
exceptIO
ÙÙ# +
)
ÙÙ+ ,
{
ÚÚ 
IO
ÛÛ 
.
ÛÛ 
Logger
ÛÛ 
.
ÛÛ 
Log
ÛÛ !
(
ÛÛ! "
NLog
ÛÛ" &
.
ÛÛ& '
LogLevel
ÛÛ' /
.
ÛÛ/ 0
Warn
ÛÛ0 4
,
ÛÛ4 5
exceptIO
ÛÛ6 >
,
ÛÛ> ?
$str
ÛÛ@ [
)
ÛÛ[ \
;
ÛÛ\ ]
}
ÜÜ 
}
ÝÝ 
}
ÞÞ 	
else
ßß 
{
àà 	
data
ãã 
=
ãã 
null
ãã 
;
ãã 
}
ää 	
if
åå 

(
åå 
privateFive
åå 
==
åå 
$num
åå 
)
åå 
{
ææ 	
try
çç 
{
èè 
int
éé 
value
éé 
=
éé 
int
éé 
.
éé  
Parse
éé  %
(
éé% &
data
éé& *
)
éé* +
;
éé+ ,
}
êê 
catch
ëë 
(
ëë 
FormatException
ëë " 
exceptNumberFormat
ëë# 5
)
ëë5 6
{
ìì 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî 
(
îî 
NLog
îî "
.
îî" #
LogLevel
îî# +
.
îî+ ,
Warn
îî, 0
,
îî0 1 
exceptNumberFormat
îî2 D
,
îîD E
$str
îîF j
+
îîk l 
exceptNumberFormat
îîm 
)îî 
;îî 
}
ïï 
}
ðð 	
}
ññ 
public
óó 

override
óó 
void
óó 
Good
óó 
(
óó 
)
óó 
{
ôô 
GoodG2B1
õõ 
(
õõ 
)
õõ 
;
õõ 
GoodG2B2
öö 
(
öö 
)
öö 
;
öö 
GoodB2G1
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷ 
GoodB2G2
øø 
(
øø 
)
øø 
;
øø 
}
ùù 
}ûû 
}üü þ_
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_08.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_08 B
:C D
AbstractTestCaseE U
{ 
private"" 
static"" 
bool"" 
PrivateReturnsTrue"" *
(""* +
)""+ ,
{## 
return$$ 
true$$ 
;$$ 
}%% 
private'' 
static'' 
bool'' 
PrivateReturnsFalse'' +
(''+ ,
)'', -
{(( 
return)) 
false)) 
;)) 
}** 
public,, 

override,, 
void,, 
Bad,, 
(,, 
),, 
{-- 
string.. 
data.. 
;.. 
if// 

(// 
PrivateReturnsTrue// 
(// 
)//  
)//  !
{00 	
data11 
=11 
$str11 
;11 
{33 
try44 
{55 
using66 
(66 
	WebClient66 $
client66% +
=66, -
new66. 1
	WebClient662 ;
(66; <
)66< =
)66= >
{77 
using88 
(88 
StreamReader88 +
sr88, .
=88/ 0
new881 4
StreamReader885 A
(88A B
client88B H
.88H I
OpenRead88I Q
(88Q R
$str88R k
)88k l
)88l m
)88m n
{99 
data==  
===! "
sr==# %
.==% &
ReadLine==& .
(==. /
)==/ 0
;==0 1
}>> 
}?? 
}@@ 
catchAA 
(AA 
IOExceptionAA "
exceptIOAA# +
)AA+ ,
{BB 
IOCC 
.CC 
LoggerCC 
.CC 
LogCC !
(CC! "
NLogCC" &
.CC& '
LogLevelCC' /
.CC/ 0
WarnCC0 4
,CC4 5
exceptIOCC6 >
,CC> ?
$strCC@ [
)CC[ \
;CC\ ]
}DD 
}EE 
}FF 	
elseGG 
{HH 	
dataKK 
=KK 
nullKK 
;KK 
}LL 	
ifMM 

(MM 
PrivateReturnsTrueMM 
(MM 
)MM  
)MM  !
{NN 	
tryOO 
{PP 
intQQ 
valueQQ 
=QQ 
intQQ 
.QQ  
ParseQQ  %
(QQ% &
dataQQ& *
)QQ* +
;QQ+ ,
}RR 
catchSS 
(SS 
FormatExceptionSS "
exceptNumberFormatSS# 5
)SS5 6
{TT 
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV "
.VV" #
LogLevelVV# +
.VV+ ,
WarnVV, 0
,VV0 1
exceptNumberFormatVV2 D
,VVD E
$strVVF `
+VVa b
dataVVc g
)VVg h
;VVh i
}WW 
}XX 	
}YY 
private]] 
void]] 
GoodG2B1]] 
(]] 
)]] 
{^^ 
string__ 
data__ 
;__ 
if`` 

(`` 
PrivateReturnsFalse`` 
(``  
)``  !
)``! "
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
elseff 
{gg 	
dataii 
=ii 
$strii 
;ii 
}jj 	
ifkk 

(kk 
PrivateReturnsTruekk 
(kk 
)kk  
)kk  !
{ll 	
trymm 
{nn 
intoo 
valueoo 
=oo 
intoo 
.oo  
Parseoo  %
(oo% &
dataoo& *
)oo* +
;oo+ ,
}pp 
catchqq 
(qq 
FormatExceptionqq "
exceptNumberFormatqq# 5
)qq5 6
{rr 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
exceptNumberFormattt2 D
,ttD E
$strttF `
+tta b
datattc g
)ttg h
;tth i
}uu 
}vv 	
}ww 
privatezz 
voidzz 
GoodG2B2zz 
(zz 
)zz 
{{{ 
string|| 
data|| 
;|| 
if}} 

(}} 
PrivateReturnsTrue}} 
(}} 
)}}  
)}}  !
{~~ 	
data
 
=
 
$str
 
;
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
   
using
¡¡ 
(
¡¡ 
	WebClient
¡¡ $
client
¡¡% +
=
¡¡, -
new
¡¡. 1
	WebClient
¡¡2 ;
(
¡¡; <
)
¡¡< =
)
¡¡= >
{
¢¢ 
using
££ 
(
££ 
StreamReader
££ +
sr
££, .
=
££/ 0
new
££1 4
StreamReader
££5 A
(
££A B
client
££B H
.
££H I
OpenRead
££I Q
(
££Q R
$str
££R k
)
££k l
)
££l m
)
££m n
{
¤¤ 
data
¨¨  
=
¨¨! "
sr
¨¨# %
.
¨¨% &
ReadLine
¨¨& .
(
¨¨. /
)
¨¨/ 0
;
¨¨0 1
}
©© 
}
ªª 
}
«« 
catch
¬¬ 
(
¬¬ 
IOException
¬¬ "
exceptIO
¬¬# +
)
¬¬+ ,
{
­­ 
IO
®® 
.
®® 
Logger
®® 
.
®® 
Log
®® !
(
®®! "
NLog
®®" &
.
®®& '
LogLevel
®®' /
.
®®/ 0
Warn
®®0 4
,
®®4 5
exceptIO
®®6 >
,
®®> ?
$str
®®@ [
)
®®[ \
;
®®\ ]
}
¯¯ 
}
°° 
}
±± 	
else
²² 
{
³³ 	
data
¶¶ 
=
¶¶ 
null
¶¶ 
;
¶¶ 
}
·· 	
if
¸¸ 

(
¸¸ !
PrivateReturnsFalse
¸¸ 
(
¸¸  
)
¸¸  !
)
¸¸! "
{
¹¹ 	
IO
»» 
.
»» 
	WriteLine
»» 
(
»» 
$str
»» /
)
»»/ 0
;
»»0 1
}
¼¼ 	
else
½½ 
{
¾¾ 	
try
¿¿ 
{
ÀÀ 
int
ÁÁ 
value
ÁÁ 
=
ÁÁ 
int
ÁÁ 
.
ÁÁ  
Parse
ÁÁ  %
(
ÁÁ% &
data
ÁÁ& *
)
ÁÁ* +
;
ÁÁ+ ,
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
FormatException
ÃÃ " 
exceptNumberFormat
ÃÃ# 5
)
ÃÃ5 6
{
ÄÄ 
IO
ÆÆ 
.
ÆÆ 
Logger
ÆÆ 
.
ÆÆ 
Log
ÆÆ 
(
ÆÆ 
NLog
ÆÆ "
.
ÆÆ" #
LogLevel
ÆÆ# +
.
ÆÆ+ ,
Warn
ÆÆ, 0
,
ÆÆ0 1 
exceptNumberFormat
ÆÆ2 D
,
ÆÆD E
$str
ÆÆF j
+
ÆÆk l 
exceptNumberFormat
ÆÆm 
)ÆÆ 
;ÆÆ 
}
ÇÇ 
}
ÈÈ 	
}
ÉÉ 
private
ÌÌ 
void
ÌÌ 
GoodB2G2
ÌÌ 
(
ÌÌ 
)
ÌÌ 
{
ÍÍ 
string
ÎÎ 
data
ÎÎ 
;
ÎÎ 
if
ÏÏ 

(
ÏÏ  
PrivateReturnsTrue
ÏÏ 
(
ÏÏ 
)
ÏÏ  
)
ÏÏ  !
{
ÐÐ 	
data
ÑÑ 
=
ÑÑ 
$str
ÑÑ 
;
ÑÑ 
{
ÓÓ 
try
ÔÔ 
{
ÕÕ 
using
ÖÖ 
(
ÖÖ 
	WebClient
ÖÖ $
client
ÖÖ% +
=
ÖÖ, -
new
ÖÖ. 1
	WebClient
ÖÖ2 ;
(
ÖÖ; <
)
ÖÖ< =
)
ÖÖ= >
{
×× 
using
ØØ 
(
ØØ 
StreamReader
ØØ +
sr
ØØ, .
=
ØØ/ 0
new
ØØ1 4
StreamReader
ØØ5 A
(
ØØA B
client
ØØB H
.
ØØH I
OpenRead
ØØI Q
(
ØØQ R
$str
ØØR k
)
ØØk l
)
ØØl m
)
ØØm n
{
ÙÙ 
data
ÝÝ  
=
ÝÝ! "
sr
ÝÝ# %
.
ÝÝ% &
ReadLine
ÝÝ& .
(
ÝÝ. /
)
ÝÝ/ 0
;
ÝÝ0 1
}
ÞÞ 
}
ßß 
}
àà 
catch
áá 
(
áá 
IOException
áá "
exceptIO
áá# +
)
áá+ ,
{
ââ 
IO
ãã 
.
ãã 
Logger
ãã 
.
ãã 
Log
ãã !
(
ãã! "
NLog
ãã" &
.
ãã& '
LogLevel
ãã' /
.
ãã/ 0
Warn
ãã0 4
,
ãã4 5
exceptIO
ãã6 >
,
ãã> ?
$str
ãã@ [
)
ãã[ \
;
ãã\ ]
}
ää 
}
åå 
}
ææ 	
else
çç 
{
èè 	
data
ëë 
=
ëë 
null
ëë 
;
ëë 
}
ìì 	
if
íí 

(
íí  
PrivateReturnsTrue
íí 
(
íí 
)
íí  
)
íí  !
{
îî 	
try
ïï 
{
ðð 
int
ññ 
value
ññ 
=
ññ 
int
ññ 
.
ññ  
Parse
ññ  %
(
ññ% &
data
ññ& *
)
ññ* +
;
ññ+ ,
}
òò 
catch
óó 
(
óó 
FormatException
óó " 
exceptNumberFormat
óó# 5
)
óó5 6
{
ôô 
IO
öö 
.
öö 
Logger
öö 
.
öö 
Log
öö 
(
öö 
NLog
öö "
.
öö" #
LogLevel
öö# +
.
öö+ ,
Warn
öö, 0
,
öö0 1 
exceptNumberFormat
öö2 D
,
ööD E
$str
ööF j
+
öök l 
exceptNumberFormat
ööm 
)öö 
;öö 
}
÷÷ 
}
øø 	
}
ùù 
public
ûû 

override
ûû 
void
ûû 
Good
ûû 
(
ûû 
)
ûû 
{
üü 
GoodG2B1
ýý 
(
ýý 
)
ýý 
;
ýý 
GoodG2B2
þþ 
(
þþ 
)
þþ 
;
þþ 
GoodB2G1
ÿÿ 
(
ÿÿ 
)
ÿÿ 
;
ÿÿ 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} Ä\
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_09.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_09 B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
.""  
STATIC_READONLY_TRUE"" #
)""# $
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using)) 
()) 
	WebClient)) $
client))% +
=)), -
new)). 1
	WebClient))2 ;
()); <
)))< =
)))= >
{** 
using++ 
(++ 
StreamReader++ +
sr++, .
=++/ 0
new++1 4
StreamReader++5 A
(++A B
client++B H
.++H I
OpenRead++I Q
(++Q R
$str++R k
)++k l
)++l m
)++m n
{,, 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@ 
IO@@ 
.@@  
STATIC_READONLY_TRUE@@ #
)@@# $
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
IOSS 
.SS !
STATIC_READONLY_FALSESS $
)SS$ %
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
IO^^ 
.^^  
STATIC_READONLY_TRUE^^ #
)^^# $
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
IOpp 
.pp  
STATIC_READONLY_TRUEpp #
)pp# $
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
IO{{ 
.{{  
STATIC_READONLY_TRUE{{ #
){{# $
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	WebClient
 $
client
% +
=
, -
new
. 1
	WebClient
2 ;
(
; <
)
< =
)
= >
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
client
B H
.
H I
OpenRead
I Q
(
Q R
$str
R k
)
k l
)
l m
)
m n
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
IO
«« 
.
«« #
STATIC_READONLY_FALSE
«« $
)
««$ %
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
IO
ÂÂ 
.
ÂÂ "
STATIC_READONLY_TRUE
ÂÂ #
)
ÂÂ# $
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÉÉ 
(
ÉÉ 
	WebClient
ÉÉ $
client
ÉÉ% +
=
ÉÉ, -
new
ÉÉ. 1
	WebClient
ÉÉ2 ;
(
ÉÉ; <
)
ÉÉ< =
)
ÉÉ= >
{
ÊÊ 
using
ËË 
(
ËË 
StreamReader
ËË +
sr
ËË, .
=
ËË/ 0
new
ËË1 4
StreamReader
ËË5 A
(
ËËA B
client
ËËB H
.
ËËH I
OpenRead
ËËI Q
(
ËËQ R
$str
ËËR k
)
ËËk l
)
ËËl m
)
ËËm n
{
ÌÌ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
IO
àà 
.
àà "
STATIC_READONLY_TRUE
àà #
)
àà# $
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ à[
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_10.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_10 B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
."" 

staticTrue"" 
)"" 
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using)) 
()) 
	WebClient)) $
client))% +
=)), -
new)). 1
	WebClient))2 ;
()); <
)))< =
)))= >
{** 
using++ 
(++ 
StreamReader++ +
sr++, .
=++/ 0
new++1 4
StreamReader++5 A
(++A B
client++B H
.++H I
OpenRead++I Q
(++Q R
$str++R k
)++k l
)++l m
)++m n
{,, 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@ 
IO@@ 
.@@ 

staticTrue@@ 
)@@ 
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
IOSS 
.SS 
staticFalseSS 
)SS 
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
IO^^ 
.^^ 

staticTrue^^ 
)^^ 
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
IOpp 
.pp 

staticTruepp 
)pp 
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
IO{{ 
.{{ 

staticTrue{{ 
){{ 
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	WebClient
 $
client
% +
=
, -
new
. 1
	WebClient
2 ;
(
; <
)
< =
)
= >
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
client
B H
.
H I
OpenRead
I Q
(
Q R
$str
R k
)
k l
)
l m
)
m n
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
IO
«« 
.
«« 
staticFalse
«« 
)
«« 
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
IO
ÂÂ 
.
ÂÂ 

staticTrue
ÂÂ 
)
ÂÂ 
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÉÉ 
(
ÉÉ 
	WebClient
ÉÉ $
client
ÉÉ% +
=
ÉÉ, -
new
ÉÉ. 1
	WebClient
ÉÉ2 ;
(
ÉÉ; <
)
ÉÉ< =
)
ÉÉ= >
{
ÊÊ 
using
ËË 
(
ËË 
StreamReader
ËË +
sr
ËË, .
=
ËË/ 0
new
ËË1 4
StreamReader
ËË5 A
(
ËËA B
client
ËËB H
.
ËËH I
OpenRead
ËËI Q
(
ËËQ R
$str
ËËR k
)
ËËk l
)
ËËl m
)
ËËm n
{
ÌÌ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
IO
àà 
.
àà 

staticTrue
àà 
)
àà 
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ â^
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_11.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_11 B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
."" 
StaticReturnsTrue""  
(""  !
)""! "
)""" #
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using)) 
()) 
	WebClient)) $
client))% +
=)), -
new)). 1
	WebClient))2 ;
()); <
)))< =
)))= >
{** 
using++ 
(++ 
StreamReader++ +
sr++, .
=++/ 0
new++1 4
StreamReader++5 A
(++A B
client++B H
.++H I
OpenRead++I Q
(++Q R
$str++R k
)++k l
)++l m
)++m n
{,, 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@
 
IO@@ 
.@@ 
StaticReturnsTrue@@ 
(@@  
)@@  !
)@@! "
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
IOSS 
.SS 
StaticReturnsFalseSS !
(SS! "
)SS" #
)SS# $
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
IO^^ 
.^^ 
StaticReturnsTrue^^  
(^^  !
)^^! "
)^^" #
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
IOpp 
.pp 
StaticReturnsTruepp  
(pp  !
)pp! "
)pp" #
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
IO{{ 
.{{ 
StaticReturnsTrue{{  
({{  !
){{! "
){{" #
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	WebClient
 $
client
% +
=
, -
new
. 1
	WebClient
2 ;
(
; <
)
< =
)
= >
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
client
B H
.
H I
OpenRead
I Q
(
Q R
$str
R k
)
k l
)
l m
)
m n
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
IO
«« 
.
««  
StaticReturnsFalse
«« !
(
««! "
)
««" #
)
««# $
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
IO
ÂÂ 
.
ÂÂ 
StaticReturnsTrue
ÂÂ  
(
ÂÂ  !
)
ÂÂ! "
)
ÂÂ" #
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÉÉ 
(
ÉÉ 
	WebClient
ÉÉ $
client
ÉÉ% +
=
ÉÉ, -
new
ÉÉ. 1
	WebClient
ÉÉ2 ;
(
ÉÉ; <
)
ÉÉ< =
)
ÉÉ= >
{
ÊÊ 
using
ËË 
(
ËË 
StreamReader
ËË +
sr
ËË, .
=
ËË/ 0
new
ËË1 4
StreamReader
ËË5 A
(
ËËA B
client
ËËB H
.
ËËH I
OpenRead
ËËI Q
(
ËËQ R
$str
ËËR k
)
ËËk l
)
ËËl m
)
ËËm n
{
ÌÌ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
IO
àà 
.
àà 
StaticReturnsTrue
àà  
(
àà  !
)
àà! "
)
àà" #
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ W
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_12.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_12 B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

(""
 
IO"" 
."" $
StaticReturnsTrueOrFalse"" &
(""& '
)""' (
)""( )
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using)) 
()) 
	WebClient)) $
client))% +
=)), -
new)). 1
	WebClient))2 ;
()); <
)))< =
)))= >
{** 
using++ 
(++ 
StreamReader++ +
sr++, .
=++/ 0
new++1 4
StreamReader++5 A
(++A B
client++B H
.++H I
OpenRead++I Q
(++Q R
$str++R k
)++k l
)++l m
)++m n
{,, 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data== 
=== 
$str== 
;== 
}>> 	
if?? 

(??
 
IO?? 
.?? $
StaticReturnsTrueOrFalse?? &
(??& '
)??' (
)??( )
{@@ 	
tryAA 
{BB 
intCC 
valueCC 
=CC 
intCC 
.CC  
ParseCC  %
(CC% &
dataCC& *
)CC* +
;CC+ ,
}DD 
catchEE 
(EE 
FormatExceptionEE "
exceptNumberFormatEE# 5
)EE5 6
{FF 
IOHH 
.HH 
LoggerHH 
.HH 
LogHH 
(HH 
NLogHH "
.HH" #
LogLevelHH# +
.HH+ ,
WarnHH, 0
,HH0 1
exceptNumberFormatHH2 D
,HHD E
$strHHF `
+HHa b
dataHHc g
)HHg h
;HHh i
}II 
}JJ 	
elseKK 
{LL 	
tryMM 
{NN 
intOO 
valueOO 
=OO 
intOO 
.OO  
ParseOO  %
(OO% &
dataOO& *
)OO* +
;OO+ ,
}PP 
catchQQ 
(QQ 
FormatExceptionQQ "
exceptNumberFormatQQ# 5
)QQ5 6
{RR 
IOTT 
.TT 
LoggerTT 
.TT 
LogTT 
(TT 
NLogTT "
.TT" #
LogLevelTT# +
.TT+ ,
WarnTT, 0
,TT0 1
exceptNumberFormatTT2 D
,TTD E
$strTTF j
+TTk l
exceptNumberFormatTTm 
)	TT 
;
TT 
}UU 
}VV 	
}WW 
private\\ 
void\\ 
GoodG2B\\ 
(\\ 
)\\ 
{]] 
string^^ 
data^^ 
;^^ 
if__ 

(__
 
IO__ 
.__ $
StaticReturnsTrueOrFalse__ &
(__& '
)__' (
)__( )
{`` 	
databb 
=bb 
$strbb 
;bb 
}cc 	
elsedd 
{ee 	
datagg 
=gg 
$strgg 
;gg 
}hh 	
ifii 

(ii
 
IOii 
.ii $
StaticReturnsTrueOrFalseii &
(ii& '
)ii' (
)ii( )
{jj 	
trykk 
{ll 
intmm 
valuemm 
=mm 
intmm 
.mm  
Parsemm  %
(mm% &
datamm& *
)mm* +
;mm+ ,
}nn 
catchoo 
(oo 
FormatExceptionoo "
exceptNumberFormatoo# 5
)oo5 6
{pp 
IOrr 
.rr 
Loggerrr 
.rr 
Logrr 
(rr 
NLogrr "
.rr" #
LogLevelrr# +
.rr+ ,
Warnrr, 0
,rr0 1
exceptNumberFormatrr2 D
,rrD E
$strrrF `
+rra b
datarrc g
)rrg h
;rrh i
}ss 
}tt 	
elseuu 
{vv 	
tryww 
{xx 
intyy 
valueyy 
=yy 
intyy 
.yy  
Parseyy  %
(yy% &
datayy& *
)yy* +
;yy+ ,
}zz 
catch{{ 
({{ 
FormatException{{ "
exceptNumberFormat{{# 5
){{5 6
{|| 
IO~~ 
.~~ 
Logger~~ 
.~~ 
Log~~ 
(~~ 
NLog~~ "
.~~" #
LogLevel~~# +
.~~+ ,
Warn~~, 0
,~~0 1
exceptNumberFormat~~2 D
,~~D E
$str~~F `
+~~a b
data~~c g
)~~g h
;~~h i
} 
}
 	
}
 
private
 
void
 
GoodB2G
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(

 
IO
 
.
 &
StaticReturnsTrueOrFalse
 &
(
& '
)
' (
)
( )
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	WebClient
 $
client
% +
=
, -
new
. 1
	WebClient
2 ;
(
; <
)
< =
)
= >
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
client
B H
.
H I
OpenRead
I Q
(
Q R
$str
R k
)
k l
)
l m
)
m n
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
   
{
¡¡ 	
data
¢¢ 
=
¢¢ 
$str
¢¢ 
;
¢¢ 
{
¤¤ 
try
¥¥ 
{
¦¦ 
using
§§ 
(
§§ 
	WebClient
§§ $
client
§§% +
=
§§, -
new
§§. 1
	WebClient
§§2 ;
(
§§; <
)
§§< =
)
§§= >
{
¨¨ 
using
©© 
(
©© 
StreamReader
©© +
sr
©©, .
=
©©/ 0
new
©©1 4
StreamReader
©©5 A
(
©©A B
client
©©B H
.
©©H I
OpenRead
©©I Q
(
©©Q R
$str
©©R k
)
©©k l
)
©©l m
)
©©m n
{
ªª 
data
®®  
=
®®! "
sr
®®# %
.
®®% &
ReadLine
®®& .
(
®®. /
)
®®/ 0
;
®®0 1
}
¯¯ 
}
°° 
}
±± 
catch
²² 
(
²² 
IOException
²² "
exceptIO
²²# +
)
²²+ ,
{
³³ 
IO
´´ 
.
´´ 
Logger
´´ 
.
´´ 
Log
´´ !
(
´´! "
NLog
´´" &
.
´´& '
LogLevel
´´' /
.
´´/ 0
Warn
´´0 4
,
´´4 5
exceptIO
´´6 >
,
´´> ?
$str
´´@ [
)
´´[ \
;
´´\ ]
}
µµ 
}
¶¶ 
}
·· 	
if
¸¸ 

(
¸¸
 
IO
¸¸ 
.
¸¸ &
StaticReturnsTrueOrFalse
¸¸ &
(
¸¸& '
)
¸¸' (
)
¸¸( )
{
¹¹ 	
try
ºº 
{
»» 
int
¼¼ 
value
¼¼ 
=
¼¼ 
int
¼¼ 
.
¼¼  
Parse
¼¼  %
(
¼¼% &
data
¼¼& *
)
¼¼* +
;
¼¼+ ,
}
½½ 
catch
¾¾ 
(
¾¾ 
FormatException
¾¾ " 
exceptNumberFormat
¾¾# 5
)
¾¾5 6
{
¿¿ 
IO
ÁÁ 
.
ÁÁ 
Logger
ÁÁ 
.
ÁÁ 
Log
ÁÁ 
(
ÁÁ 
NLog
ÁÁ "
.
ÁÁ" #
LogLevel
ÁÁ# +
.
ÁÁ+ ,
Warn
ÁÁ, 0
,
ÁÁ0 1 
exceptNumberFormat
ÁÁ2 D
,
ÁÁD E
$str
ÁÁF j
+
ÁÁk l 
exceptNumberFormat
ÁÁm 
)ÁÁ 
;ÁÁ 
}
ÂÂ 
}
ÃÃ 	
else
ÄÄ 
{
ÅÅ 	
try
ÆÆ 
{
ÇÇ 
int
ÈÈ 
value
ÈÈ 
=
ÈÈ 
int
ÈÈ 
.
ÈÈ  
Parse
ÈÈ  %
(
ÈÈ% &
data
ÈÈ& *
)
ÈÈ* +
;
ÈÈ+ ,
}
ÉÉ 
catch
ÊÊ 
(
ÊÊ 
FormatException
ÊÊ " 
exceptNumberFormat
ÊÊ# 5
)
ÊÊ5 6
{
ËË 
IO
ÍÍ 
.
ÍÍ 
Logger
ÍÍ 
.
ÍÍ 
Log
ÍÍ 
(
ÍÍ 
NLog
ÍÍ "
.
ÍÍ" #
LogLevel
ÍÍ# +
.
ÍÍ+ ,
Warn
ÍÍ, 0
,
ÍÍ0 1 
exceptNumberFormat
ÍÍ2 D
,
ÍÍD E
$str
ÍÍF j
+
ÍÍk l 
exceptNumberFormat
ÍÍm 
)ÍÍ 
;ÍÍ 
}
ÎÎ 
}
ÏÏ 	
}
ÐÐ 
public
ÒÒ 

override
ÒÒ 
void
ÒÒ 
Good
ÒÒ 
(
ÒÒ 
)
ÒÒ 
{
ÔÔ 
GoodG2B
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G
ÖÖ 
(
ÖÖ 
)
ÖÖ 
;
ÖÖ 
}
×× 
}ÙÙ 
}ÚÚ ¦_
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_13.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_13 B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
.""  
STATIC_READONLY_FIVE"" #
==""# %
$num""% &
)""& '
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using)) 
()) 
	WebClient)) $
client))% +
=)), -
new)). 1
	WebClient))2 ;
()); <
)))< =
)))= >
{** 
using++ 
(++ 
StreamReader++ +
sr++, .
=++/ 0
new++1 4
StreamReader++5 A
(++A B
client++B H
.++H I
OpenRead++I Q
(++Q R
$str++R k
)++k l
)++l m
)++m n
{,, 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@ 
IO@@ 
.@@  
STATIC_READONLY_FIVE@@ #
==@@# %
$num@@% &
)@@& '
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
IOSS 
.SS  
STATIC_READONLY_FIVESS #
!=SS# %
$numSS% &
)SS& '
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
IO^^ 
.^^  
STATIC_READONLY_FIVE^^ #
==^^# %
$num^^% &
)^^& '
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
IOpp 
.pp  
STATIC_READONLY_FIVEpp #
==pp# %
$numpp% &
)pp& '
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
IO{{ 
.{{  
STATIC_READONLY_FIVE{{ #
=={{# %
$num{{% &
){{& '
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
# %
$num
% &
)
& '
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	WebClient
 $
client
% +
=
, -
new
. 1
	WebClient
2 ;
(
; <
)
< =
)
= >
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
client
B H
.
H I
OpenRead
I Q
(
Q R
$str
R k
)
k l
)
l m
)
m n
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
IO
«« 
.
«« "
STATIC_READONLY_FIVE
«« #
!=
««# %
$num
««% &
)
««& '
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
IO
ÂÂ 
.
ÂÂ "
STATIC_READONLY_FIVE
ÂÂ #
==
ÂÂ# %
$num
ÂÂ% &
)
ÂÂ& '
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÉÉ 
(
ÉÉ 
	WebClient
ÉÉ $
client
ÉÉ% +
=
ÉÉ, -
new
ÉÉ. 1
	WebClient
ÉÉ2 ;
(
ÉÉ; <
)
ÉÉ< =
)
ÉÉ= >
{
ÊÊ 
using
ËË 
(
ËË 
StreamReader
ËË +
sr
ËË, .
=
ËË/ 0
new
ËË1 4
StreamReader
ËË5 A
(
ËËA B
client
ËËB H
.
ËËH I
OpenRead
ËËI Q
(
ËËQ R
$str
ËËR k
)
ËËk l
)
ËËl m
)
ËËm n
{
ÌÌ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
IO
àà 
.
àà "
STATIC_READONLY_FIVE
àà #
==
àà# %
$num
àà% &
)
àà& '
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ Â^
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_14.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_14 B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
."" 

staticFive"" 
=="" 
$num"" 
)"" 
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using)) 
()) 
	WebClient)) $
client))% +
=)), -
new)). 1
	WebClient))2 ;
()); <
)))< =
)))= >
{** 
using++ 
(++ 
StreamReader++ +
sr++, .
=++/ 0
new++1 4
StreamReader++5 A
(++A B
client++B H
.++H I
OpenRead++I Q
(++Q R
$str++R k
)++k l
)++l m
)++m n
{,, 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
}99 	
else:: 
{;; 	
data>> 
=>> 
null>> 
;>> 
}?? 	
if@@ 

(@@ 
IO@@ 
.@@ 

staticFive@@ 
==@@ 
$num@@ 
)@@ 
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
IOSS 
.SS 

staticFiveSS 
!=SS 
$numSS 
)SS 
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data\\ 
=\\ 
$str\\ 
;\\ 
}]] 	
if^^ 

(^^ 
IO^^ 
.^^ 

staticFive^^ 
==^^ 
$num^^ 
)^^ 
{__ 	
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
}ii 	
}jj 
privatemm 
voidmm 
GoodG2B2mm 
(mm 
)mm 
{nn 
stringoo 
dataoo 
;oo 
ifpp 

(pp 
IOpp 
.pp 

staticFivepp 
==pp 
$numpp 
)pp 
{qq 	
datass 
=ss 
$strss 
;ss 
}tt 	
elseuu 
{vv 	
datayy 
=yy 
nullyy 
;yy 
}zz 	
if{{ 

({{ 
IO{{ 
.{{ 

staticFive{{ 
=={{ 
$num{{ 
){{ 
{|| 	
try}} 
{~~ 
int 
value 
= 
int 
.  
Parse  %
(% &
data& *
)* +
;+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
using
 
(
 
	WebClient
 $
client
% +
=
, -
new
. 1
	WebClient
2 ;
(
; <
)
< =
)
= >
{
 
using
 
(
 
StreamReader
 +
sr
, .
=
/ 0
new
1 4
StreamReader
5 A
(
A B
client
B H
.
H I
OpenRead
I Q
(
Q R
$str
R k
)
k l
)
l m
)
m n
{
 
data
  
=
! "
sr
# %
.
% &
ReadLine
& .
(
. /
)
/ 0
;
0 1
}
 
}
 
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
   
IO
¡¡ 
.
¡¡ 
Logger
¡¡ 
.
¡¡ 
Log
¡¡ !
(
¡¡! "
NLog
¡¡" &
.
¡¡& '
LogLevel
¡¡' /
.
¡¡/ 0
Warn
¡¡0 4
,
¡¡4 5
exceptIO
¡¡6 >
,
¡¡> ?
$str
¡¡@ [
)
¡¡[ \
;
¡¡\ ]
}
¢¢ 
}
££ 
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
IO
«« 
.
«« 

staticFive
«« 
!=
«« 
$num
«« 
)
«« 
{
¬¬ 	
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® /
)
®®/ 0
;
®®0 1
}
¯¯ 	
else
°° 
{
±± 	
try
²² 
{
³³ 
int
´´ 
value
´´ 
=
´´ 
int
´´ 
.
´´  
Parse
´´  %
(
´´% &
data
´´& *
)
´´* +
;
´´+ ,
}
µµ 
catch
¶¶ 
(
¶¶ 
FormatException
¶¶ " 
exceptNumberFormat
¶¶# 5
)
¶¶5 6
{
·· 
IO
¹¹ 
.
¹¹ 
Logger
¹¹ 
.
¹¹ 
Log
¹¹ 
(
¹¹ 
NLog
¹¹ "
.
¹¹" #
LogLevel
¹¹# +
.
¹¹+ ,
Warn
¹¹, 0
,
¹¹0 1 
exceptNumberFormat
¹¹2 D
,
¹¹D E
$str
¹¹F j
+
¹¹k l 
exceptNumberFormat
¹¹m 
)¹¹ 
;¹¹ 
}
ºº 
}
»» 	
}
¼¼ 
private
¿¿ 
void
¿¿ 
GoodB2G2
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 
string
ÁÁ 
data
ÁÁ 
;
ÁÁ 
if
ÂÂ 

(
ÂÂ 
IO
ÂÂ 
.
ÂÂ 

staticFive
ÂÂ 
==
ÂÂ 
$num
ÂÂ 
)
ÂÂ 
{
ÃÃ 	
data
ÄÄ 
=
ÄÄ 
$str
ÄÄ 
;
ÄÄ 
{
ÆÆ 
try
ÇÇ 
{
ÈÈ 
using
ÉÉ 
(
ÉÉ 
	WebClient
ÉÉ $
client
ÉÉ% +
=
ÉÉ, -
new
ÉÉ. 1
	WebClient
ÉÉ2 ;
(
ÉÉ; <
)
ÉÉ< =
)
ÉÉ= >
{
ÊÊ 
using
ËË 
(
ËË 
StreamReader
ËË +
sr
ËË, .
=
ËË/ 0
new
ËË1 4
StreamReader
ËË5 A
(
ËËA B
client
ËËB H
.
ËËH I
OpenRead
ËËI Q
(
ËËQ R
$str
ËËR k
)
ËËk l
)
ËËl m
)
ËËm n
{
ÌÌ 
data
ÐÐ  
=
ÐÐ! "
sr
ÐÐ# %
.
ÐÐ% &
ReadLine
ÐÐ& .
(
ÐÐ. /
)
ÐÐ/ 0
;
ÐÐ0 1
}
ÑÑ 
}
ÒÒ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
IOException
ÔÔ "
exceptIO
ÔÔ# +
)
ÔÔ+ ,
{
ÕÕ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ !
(
ÖÖ! "
NLog
ÖÖ" &
.
ÖÖ& '
LogLevel
ÖÖ' /
.
ÖÖ/ 0
Warn
ÖÖ0 4
,
ÖÖ4 5
exceptIO
ÖÖ6 >
,
ÖÖ> ?
$str
ÖÖ@ [
)
ÖÖ[ \
;
ÖÖ\ ]
}
×× 
}
ØØ 
}
ÙÙ 	
else
ÚÚ 
{
ÛÛ 	
data
ÞÞ 
=
ÞÞ 
null
ÞÞ 
;
ÞÞ 
}
ßß 	
if
àà 

(
àà 
IO
àà 
.
àà 

staticFive
àà 
==
àà 
$num
àà 
)
àà 
{
áá 	
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
}
ëë 	
}
ìì 
public
îî 

override
îî 
void
îî 
Good
îî 
(
îî 
)
îî 
{
ïï 
GoodG2B1
ðð 
(
ðð 
)
ðð 
;
ðð 
GoodG2B2
ññ 
(
ññ 
)
ññ 
;
ññ 
GoodB2G1
òò 
(
òò 
)
òò 
;
òò 
GoodB2G2
óó 
(
óó 
)
óó 
;
óó 
}
ôô 
}öö 
}÷÷ ðg
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_15.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_15 B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
switch"" 
("" 
$num"" 
)"" 
{## 	
case$$ 
$num$$ 
:$$ 
data%% 
=%% 
$str%% 
;%% 
{'' 
try(( 
{)) 
using** 
(** 
	WebClient** $
client**% +
=**, -
new**. 1
	WebClient**2 ;
(**; <
)**< =
)**= >
{++ 
using,, 
(,, 
StreamReader,, +
sr,,, .
=,,/ 0
new,,1 4
StreamReader,,5 A
(,,A B
client,,B H
.,,H I
OpenRead,,I Q
(,,Q R
$str,,R k
),,k l
),,l m
),,m n
{-- 
data11  
=11! "
sr11# %
.11% &
ReadLine11& .
(11. /
)11/ 0
;110 1
}22 
}33 
}44 
catch55 
(55 
IOException55 "
exceptIO55# +
)55+ ,
{66 
IO77 
.77 
Logger77 
.77 
Log77 !
(77! "
NLog77" &
.77& '
LogLevel77' /
.77/ 0
Warn770 4
,774 5
exceptIO776 >
,77> ?
$str77@ [
)77[ \
;77\ ]
}88 
}99 
break:: 
;:: 
default;; 
:;; 
data>> 
=>> 
null>> 
;>> 
break?? 
;?? 
}@@ 	
switchAA 
(AA 
$numAA 
)AA 
{BB 	
caseCC 
$numCC 
:CC 
tryDD 
{EE 
intFF 
valueFF 
=FF 
intFF 
.FF  
ParseFF  %
(FF% &
dataFF& *
)FF* +
;FF+ ,
}GG 
catchHH 
(HH 
FormatExceptionHH "
exceptNumberFormatHH# 5
)HH5 6
{II 
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK "
.KK" #
LogLevelKK# +
.KK+ ,
WarnKK, 0
,KK0 1
exceptNumberFormatKK2 D
,KKD E
$strKKF `
+KKa b
dataKKc g
)KKg h
;KKh i
}LL 
breakMM 
;MM 
defaultNN 
:NN 
IOPP 
.PP 
	WriteLinePP 
(PP 
$strPP /
)PP/ 0
;PP0 1
breakQQ 
;QQ 
}RR 	
}SS 
privateWW 
voidWW 
GoodG2B1WW 
(WW 
)WW 
{XX 
stringYY 
dataYY 
;YY 
switchZZ 
(ZZ 
$numZZ 
)ZZ 
{[[ 	
case\\ 
$num\\ 
:\\ 
data__ 
=__ 
null__ 
;__ 
break`` 
;`` 
defaultaa 
:aa 
datacc 
=cc 
$strcc 
;cc 
breakdd 
;dd 
}ee 	
switchff 
(ff 
$numff 
)ff 
{gg 	
casehh 
$numhh 
:hh 
tryii 
{jj 
intkk 
valuekk 
=kk 
intkk 
.kk  
Parsekk  %
(kk% &
datakk& *
)kk* +
;kk+ ,
}ll 
catchmm 
(mm 
FormatExceptionmm "
exceptNumberFormatmm# 5
)mm5 6
{nn 
IOpp 
.pp 
Loggerpp 
.pp 
Logpp 
(pp 
NLogpp "
.pp" #
LogLevelpp# +
.pp+ ,
Warnpp, 0
,pp0 1
exceptNumberFormatpp2 D
,ppD E
$strppF `
+ppa b
datappc g
)ppg h
;pph i
}qq 
breakrr 
;rr 
defaultss 
:ss 
IOuu 
.uu 
	WriteLineuu 
(uu 
$struu /
)uu/ 0
;uu0 1
breakvv 
;vv 
}ww 	
}xx 
private{{ 
void{{ 
GoodG2B2{{ 
({{ 
){{ 
{|| 
string}} 
data}} 
;}} 
switch~~ 
(~~ 
$num~~ 
)~~ 
{ 	
case
 
$num
 
:
 
data
 
=
 
$str
 
;
 
break
 
;
 
default
 
:
 
data
 
=
 
null
 
;
 
break
 
;
 
}
 	
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
break
 
;
 
default
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
   
string
¡¡ 
data
¡¡ 
;
¡¡ 
switch
¢¢ 
(
¢¢ 
$num
¢¢ 
)
¢¢ 
{
££ 	
case
¤¤ 
$num
¤¤ 
:
¤¤ 
data
¥¥ 
=
¥¥ 
$str
¥¥ 
;
¥¥ 
{
§§ 
try
¨¨ 
{
©© 
using
ªª 
(
ªª 
	WebClient
ªª $
client
ªª% +
=
ªª, -
new
ªª. 1
	WebClient
ªª2 ;
(
ªª; <
)
ªª< =
)
ªª= >
{
«« 
using
¬¬ 
(
¬¬ 
StreamReader
¬¬ +
sr
¬¬, .
=
¬¬/ 0
new
¬¬1 4
StreamReader
¬¬5 A
(
¬¬A B
client
¬¬B H
.
¬¬H I
OpenRead
¬¬I Q
(
¬¬Q R
$str
¬¬R k
)
¬¬k l
)
¬¬l m
)
¬¬m n
{
­­ 
data
±±  
=
±±! "
sr
±±# %
.
±±% &
ReadLine
±±& .
(
±±. /
)
±±/ 0
;
±±0 1
}
²² 
}
³³ 
}
´´ 
catch
µµ 
(
µµ 
IOException
µµ "
exceptIO
µµ# +
)
µµ+ ,
{
¶¶ 
IO
·· 
.
·· 
Logger
·· 
.
·· 
Log
·· !
(
··! "
NLog
··" &
.
··& '
LogLevel
··' /
.
··/ 0
Warn
··0 4
,
··4 5
exceptIO
··6 >
,
··> ?
$str
··@ [
)
··[ \
;
··\ ]
}
¸¸ 
}
¹¹ 
break
ºº 
;
ºº 
default
»» 
:
»» 
data
¾¾ 
=
¾¾ 
null
¾¾ 
;
¾¾ 
break
¿¿ 
;
¿¿ 
}
ÀÀ 	
switch
ÁÁ 
(
ÁÁ 
$num
ÁÁ 
)
ÁÁ 
{
ÂÂ 	
case
ÃÃ 
$num
ÃÃ 
:
ÃÃ 
IO
ÅÅ 
.
ÅÅ 
	WriteLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ /
)
ÅÅ/ 0
;
ÅÅ0 1
break
ÆÆ 
;
ÆÆ 
default
ÇÇ 
:
ÇÇ 
try
ÈÈ 
{
ÉÉ 
int
ÊÊ 
value
ÊÊ 
=
ÊÊ 
int
ÊÊ 
.
ÊÊ  
Parse
ÊÊ  %
(
ÊÊ% &
data
ÊÊ& *
)
ÊÊ* +
;
ÊÊ+ ,
}
ËË 
catch
ÌÌ 
(
ÌÌ 
FormatException
ÌÌ " 
exceptNumberFormat
ÌÌ# 5
)
ÌÌ5 6
{
ÍÍ 
IO
ÏÏ 
.
ÏÏ 
Logger
ÏÏ 
.
ÏÏ 
Log
ÏÏ 
(
ÏÏ 
NLog
ÏÏ "
.
ÏÏ" #
LogLevel
ÏÏ# +
.
ÏÏ+ ,
Warn
ÏÏ, 0
,
ÏÏ0 1 
exceptNumberFormat
ÏÏ2 D
,
ÏÏD E
$str
ÏÏF j
+
ÏÏk l 
exceptNumberFormat
ÏÏm 
)ÏÏ 
;ÏÏ 
}
ÐÐ 
break
ÑÑ 
;
ÑÑ 
}
ÒÒ 	
}
ÓÓ 
private
ÖÖ 
void
ÖÖ 
GoodB2G2
ÖÖ 
(
ÖÖ 
)
ÖÖ 
{
×× 
string
ØØ 
data
ØØ 
;
ØØ 
switch
ÙÙ 
(
ÙÙ 
$num
ÙÙ 
)
ÙÙ 
{
ÚÚ 	
case
ÛÛ 
$num
ÛÛ 
:
ÛÛ 
data
ÜÜ 
=
ÜÜ 
$str
ÜÜ 
;
ÜÜ 
{
ÞÞ 
try
ßß 
{
àà 
using
áá 
(
áá 
	WebClient
áá $
client
áá% +
=
áá, -
new
áá. 1
	WebClient
áá2 ;
(
áá; <
)
áá< =
)
áá= >
{
ââ 
using
ãã 
(
ãã 
StreamReader
ãã +
sr
ãã, .
=
ãã/ 0
new
ãã1 4
StreamReader
ãã5 A
(
ããA B
client
ããB H
.
ããH I
OpenRead
ããI Q
(
ããQ R
$str
ããR k
)
ããk l
)
ããl m
)
ããm n
{
ää 
data
èè  
=
èè! "
sr
èè# %
.
èè% &
ReadLine
èè& .
(
èè. /
)
èè/ 0
;
èè0 1
}
éé 
}
êê 
}
ëë 
catch
ìì 
(
ìì 
IOException
ìì "
exceptIO
ìì# +
)
ìì+ ,
{
íí 
IO
îî 
.
îî 
Logger
îî 
.
îî 
Log
îî !
(
îî! "
NLog
îî" &
.
îî& '
LogLevel
îî' /
.
îî/ 0
Warn
îî0 4
,
îî4 5
exceptIO
îî6 >
,
îî> ?
$str
îî@ [
)
îî[ \
;
îî\ ]
}
ïï 
}
ðð 
break
ññ 
;
ññ 
default
òò 
:
òò 
data
õõ 
=
õõ 
null
õõ 
;
õõ 
break
öö 
;
öö 
}
÷÷ 	
switch
øø 
(
øø 
$num
øø 
)
øø 
{
ùù 	
case
úú 
$num
úú 
:
úú 
try
ûû 
{
üü 
int
ýý 
value
ýý 
=
ýý 
int
ýý 
.
ýý  
Parse
ýý  %
(
ýý% &
data
ýý& *
)
ýý* +
;
ýý+ ,
}
þþ 
catch
ÿÿ 
(
ÿÿ 
FormatException
ÿÿ " 
exceptNumberFormat
ÿÿ# 5
)
ÿÿ5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
break
 
;
 
default
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B1
 
(
 
)
 
;
 
GoodG2B2
 
(
 
)
 
;
 
GoodB2G1
 
(
 
)
 
;
 
GoodB2G2
 
(
 
)
 
;
 
}
 
} 
} ù4
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_16.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_16 B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
while"" 
("" 
true"" 
)"" 
{## 	
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using)) 
()) 
	WebClient)) $
client))% +
=)), -
new)). 1
	WebClient))2 ;
()); <
)))< =
)))= >
{** 
using++ 
(++ 
StreamReader++ +
sr++, .
=++/ 0
new++1 4
StreamReader++5 A
(++A B
client++B H
.++H I
OpenRead++I Q
(++Q R
$str++R k
)++k l
)++l m
)++m n
{,, 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
break99 
;99 
}:: 	
while;; 
(;; 
true;; 
);; 
{<< 	
try== 
{>> 
int?? 
value?? 
=?? 
int?? 
.??  
Parse??  %
(??% &
data??& *
)??* +
;??+ ,
}@@ 
catchAA 
(AA 
FormatExceptionAA "
exceptNumberFormatAA# 5
)AA5 6
{BB 
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD "
.DD" #
LogLevelDD# +
.DD+ ,
WarnDD, 0
,DD0 1
exceptNumberFormatDD2 D
,DDD E
$strDDF `
+DDa b
dataDDc g
)DDg h
;DDh i
}EE 
breakFF 
;FF 
}GG 	
}HH 
privateLL 
voidLL 
GoodG2BLL 
(LL 
)LL 
{MM 
stringNN 
dataNN 
;NN 
whileOO 
(OO 
trueOO 
)OO 
{PP 	
dataRR 
=RR 
$strRR 
;RR 
breakSS 
;SS 
}TT 	
whileUU 
(UU 
trueUU 
)UU 
{VV 	
tryWW 
{XX 
intYY 
valueYY 
=YY 
intYY 
.YY  
ParseYY  %
(YY% &
dataYY& *
)YY* +
;YY+ ,
}ZZ 
catch[[ 
([[ 
FormatException[[ "
exceptNumberFormat[[# 5
)[[5 6
{\\ 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
exceptNumberFormat^^2 D
,^^D E
$str^^F `
+^^a b
data^^c g
)^^g h
;^^h i
}__ 
break`` 
;`` 
}aa 	
}bb 
privateee 
voidee 
GoodB2Gee 
(ee 
)ee 
{ff 
stringgg 
datagg 
;gg 
whilehh 
(hh 
truehh 
)hh 
{ii 	
datajj 
=jj 
$strjj 
;jj 
{ll 
trymm 
{nn 
usingoo 
(oo 
	WebClientoo $
clientoo% +
=oo, -
newoo. 1
	WebClientoo2 ;
(oo; <
)oo< =
)oo= >
{pp 
usingqq 
(qq 
StreamReaderqq +
srqq, .
=qq/ 0
newqq1 4
StreamReaderqq5 A
(qqA B
clientqqB H
.qqH I
OpenReadqqI Q
(qqQ R
$strqqR k
)qqk l
)qql m
)qqm n
{rr 
datavv  
=vv! "
srvv# %
.vv% &
ReadLinevv& .
(vv. /
)vv/ 0
;vv0 1
}ww 
}xx 
}yy 
catchzz 
(zz 
IOExceptionzz "
exceptIOzz# +
)zz+ ,
{{{ 
IO|| 
.|| 
Logger|| 
.|| 
Log|| !
(||! "
NLog||" &
.||& '
LogLevel||' /
.||/ 0
Warn||0 4
,||4 5
exceptIO||6 >
,||> ?
$str||@ [
)||[ \
;||\ ]
}}} 
}~~ 
break 
; 
}
 	
while
 
(
 
true
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
break
 
;
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
} 
} ¢4
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_17.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_17 B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data&& 
=&& 
$str&& 
;&& 
{(( 	
try)) 
{** 
using++ 
(++ 
	WebClient++  
client++! '
=++( )
new++* -
	WebClient++. 7
(++7 8
)++8 9
)++9 :
{,, 
using-- 
(-- 
StreamReader-- '
sr--( *
=--+ ,
new--- 0
StreamReader--1 =
(--= >
client--> D
.--D E
OpenRead--E M
(--M N
$str--N g
)--g h
)--h i
)--i j
{.. 
data22 
=22 
sr22 !
.22! "
ReadLine22" *
(22* +
)22+ ,
;22, -
}33 
}44 
}55 
catch66 
(66 
IOException66 
exceptIO66 '
)66' (
{77 
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 "
.88" #
LogLevel88# +
.88+ ,
Warn88, 0
,880 1
exceptIO882 :
,88: ;
$str88< W
)88W X
;88X Y
}99 
}:: 	
for;; 
(;; 
int;; 
j;; 
=;; 
$num;; 
;;; 
j;; 
<;; 
$num;; 
;;; 
j;;  
++;;  "
);;" #
{<< 	
try== 
{>> 
int?? 
value?? 
=?? 
int?? 
.??  
Parse??  %
(??% &
data??& *
)??* +
;??+ ,
}@@ 
catchAA 
(AA 
FormatExceptionAA "
exceptNumberFormatAA# 5
)AA5 6
{BB 
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD "
.DD" #
LogLevelDD# +
.DD+ ,
WarnDD, 0
,DD0 1
exceptNumberFormatDD2 D
,DDD E
$strDDF `
+DDa b
dataDDc g
)DDg h
;DDh i
}EE 
}FF 	
}GG 
privateKK 
voidKK 
GoodG2BKK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
;MM 
dataOO 
=OO 
$strOO 
;OO 
forPP 
(PP 
intPP 
jPP 
=PP 
$numPP 
;PP 
jPP 
<PP 
$numPP 
;PP 
jPP  
++PP  "
)PP" #
{QQ 	
tryRR 
{SS 
intTT 
valueTT 
=TT 
intTT 
.TT  
ParseTT  %
(TT% &
dataTT& *
)TT* +
;TT+ ,
}UU 
catchVV 
(VV 
FormatExceptionVV "
exceptNumberFormatVV# 5
)VV5 6
{WW 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
exceptNumberFormatYY2 D
,YYD E
$strYYF `
+YYa b
dataYYc g
)YYg h
;YYh i
}ZZ 
}[[ 	
}\\ 
private__ 
void__ 
GoodB2G__ 
(__ 
)__ 
{`` 
stringaa 
dataaa 
;aa 
databb 
=bb 
$strbb 
;bb 
{dd 	
tryee 
{ff 
usinggg 
(gg 
	WebClientgg  
clientgg! '
=gg( )
newgg* -
	WebClientgg. 7
(gg7 8
)gg8 9
)gg9 :
{hh 
usingii 
(ii 
StreamReaderii '
srii( *
=ii+ ,
newii- 0
StreamReaderii1 =
(ii= >
clientii> D
.iiD E
OpenReadiiE M
(iiM N
$striiN g
)iig h
)iih i
)iii j
{jj 
datann 
=nn 
srnn !
.nn! "
ReadLinenn" *
(nn* +
)nn+ ,
;nn, -
}oo 
}pp 
}qq 
catchrr 
(rr 
IOExceptionrr 
exceptIOrr '
)rr' (
{ss 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
exceptIOtt2 :
,tt: ;
$strtt< W
)ttW X
;ttX Y
}uu 
}vv 	
forww 
(ww 
intww 
kww 
=ww 
$numww 
;ww 
kww 
<ww 
$numww 
;ww 
kww  
++ww  "
)ww" #
{xx 	
tryyy 
{zz 
int{{ 
value{{ 
={{ 
int{{ 
.{{  
Parse{{  %
({{% &
data{{& *
){{* +
;{{+ ,
}|| 
catch}} 
(}} 
FormatException}} "
exceptNumberFormat}}# 5
)}}5 6
{~~ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
} 
} ùT
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_21.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_21 B
:C D
AbstractTestCaseE U
{ 
private   
bool   

badPrivate   
=   
false   #
;  # $
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
string$$ 
data$$ 
;$$ 
data%% 
=%% 
$str%% 
;%% 
{'' 	
try(( 
{)) 
using** 
(** 
	WebClient**  
client**! '
=**( )
new*** -
	WebClient**. 7
(**7 8
)**8 9
)**9 :
{++ 
using,, 
(,, 
StreamReader,, '
sr,,( *
=,,+ ,
new,,- 0
StreamReader,,1 =
(,,= >
client,,> D
.,,D E
OpenRead,,E M
(,,M N
$str,,N g
),,g h
),,h i
),,i j
{-- 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
}99 	

badPrivate:: 
=:: 
true:: 
;:: 
BadSink;; 
(;; 
data;; 
);; 
;;; 
}<< 
private>> 
void>> 
BadSink>> 
(>> 
string>> 
data>>  $
)>>% &
{?? 
if@@ 

(@@ 

badPrivate@@ 
)@@ 
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
}KK 	
}LL 
privateOO 
boolOO 
goodB2G1PrivateOO  
=OO! "
falseOO# (
;OO( )
privatePP 
boolPP 
goodB2G2PrivatePP  
=PP! "
falsePP# (
;PP( )
privateQQ 
boolQQ 
goodG2BPrivateQQ 
=QQ  !
falseQQ" '
;QQ' (
publicSS 

overrideSS 
voidSS 
GoodSS 
(SS 
)SS 
{TT 
GoodB2G1UU 
(UU 
)UU 
;UU 
GoodB2G2VV 
(VV 
)VV 
;VV 
GoodG2BWW 
(WW 
)WW 
;WW 
}XX 
private[[ 
void[[ 
GoodB2G1[[ 
([[ 
)[[ 
{\\ 
string]] 
data]] 
;]] 
data^^ 
=^^ 
$str^^ 
;^^ 
{`` 	
tryaa 
{bb 
usingcc 
(cc 
	WebClientcc  
clientcc! '
=cc( )
newcc* -
	WebClientcc. 7
(cc7 8
)cc8 9
)cc9 :
{dd 
usingee 
(ee 
StreamReaderee '
sree( *
=ee+ ,
newee- 0
StreamReaderee1 =
(ee= >
clientee> D
.eeD E
OpenReadeeE M
(eeM N
$streeN g
)eeg h
)eeh i
)eei j
{ff 
datajj 
=jj 
srjj !
.jj! "
ReadLinejj" *
(jj* +
)jj+ ,
;jj, -
}kk 
}ll 
}mm 
catchnn 
(nn 
IOExceptionnn 
exceptIOnn '
)nn' (
{oo 
IOpp 
.pp 
Loggerpp 
.pp 
Logpp 
(pp 
NLogpp "
.pp" #
LogLevelpp# +
.pp+ ,
Warnpp, 0
,pp0 1
exceptIOpp2 :
,pp: ;
$strpp< W
)ppW X
;ppX Y
}qq 
}rr 	
goodB2G1Privatess 
=ss 
falsess 
;ss  
GoodB2G1Sinktt 
(tt 
datatt 
)tt 
;tt 
}uu 
privateww 
voidww 
GoodB2G1Sinkww 
(ww 
stringww $
dataww% )
)ww* +
{xx 
ifyy 

(yy 
goodB2G1Privateyy 
)yy 
{zz 	
IO|| 
.|| 
	WriteLine|| 
(|| 
$str|| /
)||/ 0
;||0 1
}}} 	
else~~ 
{ 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
)
 
{
 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
{
 	
try
 
{
 
using
 
(
 
	WebClient
  
client
! '
=
( )
new
* -
	WebClient
. 7
(
7 8
)
8 9
)
9 :
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
client
> D
.
D E
OpenRead
E M
(
M N
$str
N g
)
g h
)
h i
)
i j
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
}
 
catch
   
(
   
IOException
   
exceptIO
   '
)
  ' (
{
¡¡ 
IO
¢¢ 
.
¢¢ 
Logger
¢¢ 
.
¢¢ 
Log
¢¢ 
(
¢¢ 
NLog
¢¢ "
.
¢¢" #
LogLevel
¢¢# +
.
¢¢+ ,
Warn
¢¢, 0
,
¢¢0 1
exceptIO
¢¢2 :
,
¢¢: ;
$str
¢¢< W
)
¢¢W X
;
¢¢X Y
}
££ 
}
¤¤ 	
goodB2G2Private
¥¥ 
=
¥¥ 
true
¥¥ 
;
¥¥ 
GoodB2G2Sink
¦¦ 
(
¦¦ 
data
¦¦ 
)
¦¦ 
;
¦¦ 
}
§§ 
private
©© 
void
©© 
GoodB2G2Sink
©© 
(
©© 
string
©© $
data
©©% )
)
©©* +
{
ªª 
if
«« 

(
«« 
goodB2G2Private
«« 
)
«« 
{
¬¬ 	
try
­­ 
{
®® 
int
¯¯ 
value
¯¯ 
=
¯¯ 
int
¯¯ 
.
¯¯  
Parse
¯¯  %
(
¯¯% &
data
¯¯& *
)
¯¯* +
;
¯¯+ ,
}
°° 
catch
±± 
(
±± 
FormatException
±± " 
exceptNumberFormat
±±# 5
)
±±5 6
{
²² 
IO
´´ 
.
´´ 
Logger
´´ 
.
´´ 
Log
´´ 
(
´´ 
NLog
´´ "
.
´´" #
LogLevel
´´# +
.
´´+ ,
Warn
´´, 0
,
´´0 1 
exceptNumberFormat
´´2 D
,
´´D E
$str
´´F j
+
´´k l 
exceptNumberFormat
´´m 
)´´ 
;´´ 
}
µµ 
}
¶¶ 	
}
·· 
private
ºº 
void
ºº 
GoodG2B
ºº 
(
ºº 
)
ºº 
{
»» 
string
¼¼ 
data
¼¼ 
;
¼¼ 
data
¾¾ 
=
¾¾ 
$str
¾¾ 
;
¾¾ 
goodG2BPrivate
¿¿ 
=
¿¿ 
true
¿¿ 
;
¿¿ 
GoodG2BSink
ÀÀ 
(
ÀÀ 
data
ÀÀ 
)
ÀÀ 
;
ÀÀ 
}
ÁÁ 
private
ÃÃ 
void
ÃÃ 
GoodG2BSink
ÃÃ 
(
ÃÃ 
string
ÃÃ #
data
ÃÃ$ (
)
ÃÃ) *
{
ÄÄ 
if
ÅÅ 

(
ÅÅ 
goodG2BPrivate
ÅÅ 
)
ÅÅ 
{
ÆÆ 	
try
ÇÇ 
{
ÈÈ 
int
ÉÉ 
value
ÉÉ 
=
ÉÉ 
int
ÉÉ 
.
ÉÉ  
Parse
ÉÉ  %
(
ÉÉ% &
data
ÉÉ& *
)
ÉÉ* +
;
ÉÉ+ ,
}
ÊÊ 
catch
ËË 
(
ËË 
FormatException
ËË " 
exceptNumberFormat
ËË# 5
)
ËË5 6
{
ÌÌ 
IO
ÎÎ 
.
ÎÎ 
Logger
ÎÎ 
.
ÎÎ 
Log
ÎÎ 
(
ÎÎ 
NLog
ÎÎ "
.
ÎÎ" #
LogLevel
ÎÎ# +
.
ÎÎ+ ,
Warn
ÎÎ, 0
,
ÎÎ0 1 
exceptNumberFormat
ÎÎ2 D
,
ÎÎD E
$str
ÎÎF `
+
ÎÎa b
data
ÎÎc g
)
ÎÎg h
;
ÎÎh i
}
ÏÏ 
}
ÐÐ 	
}
ÑÑ 
}ÓÓ 
}ÔÔ 7
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_22a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_22a C
:D E
AbstractTestCaseF V
{ 
public   

static   
bool   
badPublicStatic   &
=  ' (
false  ) .
;  . /
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
string$$ 
data$$ 
=$$ 
null$$ 
;$$ 
data%% 
=%% 
$str%% 
;%% 
{'' 	
try(( 
{)) 
using** 
(** 
	WebClient**  
client**! '
=**( )
new*** -
	WebClient**. 7
(**7 8
)**8 9
)**9 :
{++ 
using,, 
(,, 
StreamReader,, '
sr,,( *
=,,+ ,
new,,- 0
StreamReader,,1 =
(,,= >
client,,> D
.,,D E
OpenRead,,E M
(,,M N
$str,,N g
),,g h
),,h i
),,i j
{-- 
data11 
=11 
sr11 !
.11! "
ReadLine11" *
(11* +
)11+ ,
;11, -
}22 
}33 
}44 
catch55 
(55 
IOException55 
exceptIO55 '
)55' (
{66 
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 "
.77" #
LogLevel77# +
.77+ ,
Warn77, 0
,770 1
exceptIO772 :
,77: ;
$str77< W
)77W X
;77X Y
}88 
}99 	
badPublicStatic:: 
=:: 
true:: 
;:: I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_22b;; E
.;;E F
BadSink;;F M
(;;M N
data;;N R
);;S T
;;;T U
}<< 
public?? 

static?? 
bool??  
goodB2G1PublicStatic?? +
=??, -
false??. 3
;??3 4
public@@ 

static@@ 
bool@@  
goodB2G2PublicStatic@@ +
=@@, -
false@@. 3
;@@3 4
publicAA 

staticAA 
boolAA 
goodG2BPublicStaticAA *
=AA+ ,
falseAA- 2
;AA2 3
publicCC 

overrideCC 
voidCC 
GoodCC 
(CC 
)CC 
{DD 
GoodB2G1EE 
(EE 
)EE 
;EE 
GoodB2G2FF 
(FF 
)FF 
;FF 
GoodG2BGG 
(GG 
)GG 
;GG 
}HH 
privateKK 
voidKK 
GoodB2G1KK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
=MM 
nullMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{PP 	
tryQQ 
{RR 
usingSS 
(SS 
	WebClientSS  
clientSS! '
=SS( )
newSS* -
	WebClientSS. 7
(SS7 8
)SS8 9
)SS9 :
{TT 
usingUU 
(UU 
StreamReaderUU '
srUU( *
=UU+ ,
newUU- 0
StreamReaderUU1 =
(UU= >
clientUU> D
.UUD E
OpenReadUUE M
(UUM N
$strUUN g
)UUg h
)UUh i
)UUi j
{VV 
dataZZ 
=ZZ 
srZZ !
.ZZ! "
ReadLineZZ" *
(ZZ* +
)ZZ+ ,
;ZZ, -
}[[ 
}\\ 
}]] 
catch^^ 
(^^ 
IOException^^ 
exceptIO^^ '
)^^' (
{__ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptIO``2 :
,``: ;
$str``< W
)``W X
;``X Y
}aa 
}bb 	 
goodB2G1PublicStaticcc 
=cc 
falsecc $
;cc$ %I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_22bdd E
.ddE F
GoodB2G1SinkddF R
(ddR S
dataddS W
)ddX Y
;ddY Z
}ee 
privatehh 
voidhh 
GoodB2G2hh 
(hh 
)hh 
{ii 
stringjj 
datajj 
=jj 
nulljj 
;jj 
datakk 
=kk 
$strkk 
;kk 
{mm 	
trynn 
{oo 
usingpp 
(pp 
	WebClientpp  
clientpp! '
=pp( )
newpp* -
	WebClientpp. 7
(pp7 8
)pp8 9
)pp9 :
{qq 
usingrr 
(rr 
StreamReaderrr '
srrr( *
=rr+ ,
newrr- 0
StreamReaderrr1 =
(rr= >
clientrr> D
.rrD E
OpenReadrrE M
(rrM N
$strrrN g
)rrg h
)rrh i
)rri j
{ss 
dataww 
=ww 
srww !
.ww! "
ReadLineww" *
(ww* +
)ww+ ,
;ww, -
}xx 
}yy 
}zz 
catch{{ 
({{ 
IOException{{ 
exceptIO{{ '
){{' (
{|| 
IO}} 
.}} 
Logger}} 
.}} 
Log}} 
(}} 
NLog}} "
.}}" #
LogLevel}}# +
.}}+ ,
Warn}}, 0
,}}0 1
exceptIO}}2 :
,}}: ;
$str}}< W
)}}W X
;}}X Y
}~~ 
} 	"
goodB2G2PublicStatic
 
=
 
true
 #
;
# $K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_22b
 E
.
E F
GoodB2G2Sink
F R
(
R S
data
S W
)
X Y
;
Y Z
}
 
private
 
void
 
GoodG2B
 
(
 
)
 
{
 
string
 
data
 
=
 
null
 
;
 
data
 
=
 
$str
 
;
 !
goodG2BPublicStatic
 
=
 
true
 "
;
" #K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_22b
 E
.
E F
GoodG2BSink
F Q
(
Q R
data
R V
)
W X
;
X Y
}
 
} 
} Î(
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_22b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_22b C
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
if 

( I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_22a I
.I J
badPublicStaticJ Y
)Y Z
{ 	
try   
{!! 
int"" 
value"" 
="" 
int"" 
.""  
Parse""  %
(""% &
data""& *
)""* +
;""+ ,
}## 
catch$$ 
($$ 
FormatException$$ "
exceptNumberFormat$$# 5
)$$5 6
{%% 
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' "
.''" #
LogLevel''# +
.''+ ,
Warn'', 0
,''0 1
exceptNumberFormat''2 D
,''D E
$str''F `
+''a b
data''c g
)''g h
;''h i
}(( 
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
}00 
public55 

static55 
void55 
GoodB2G1Sink55 #
(55# $
string55$ *
data55+ /
)550 1
{66 
if77 

(77 I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_22a77 I
.77I J 
goodB2G1PublicStatic77J ^
)77^ _
{88 	
data;; 
=;; 
null;; 
;;; 
}<< 	
else== 
{>> 	
try?? 
{@@ 
intAA 
valueAA 
=AA 
intAA 
.AA  
ParseAA  %
(AA% &
dataAA& *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
FormatExceptionCC "
exceptNumberFormatCC# 5
)CC5 6
{DD 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
exceptNumberFormatFF2 D
,FFD E
$strFFF j
+FFk l
exceptNumberFormatFFm 
)	FF 
;
FF 
}GG 
}HH 	
}II 
publicLL 

staticLL 
voidLL 
GoodB2G2SinkLL #
(LL# $
stringLL$ *
dataLL+ /
)LL0 1
{MM 
ifNN 

(NN I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_22aNN I
.NNI J 
goodB2G2PublicStaticNNJ ^
)NN^ _
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF j
+WWk l
exceptNumberFormatWWm 
)	WW 
;
WW 
}XX 
}YY 	
elseZZ 
{[[ 	
data^^ 
=^^ 
null^^ 
;^^ 
}__ 	
}`` 
publiccc 

staticcc 
voidcc 
GoodG2BSinkcc "
(cc" #
stringcc# )
datacc* .
)cc/ 0
{dd 
ifee 

(ee I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_22aee I
.eeI J
goodG2BPublicStaticeeJ ]
)ee] ^
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF `
+nna b
datannc g
)nng h
;nnh i
}oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
}ww 
}yy 
}zz ²5
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_31.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_31 B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
dataCopy!! 
;!! 
{"" 	
string## 
data## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 
try'' 
{(( 
using)) 
()) 
	WebClient)) $
client))% +
=)), -
new)). 1
	WebClient))2 ;
()); <
)))< =
)))= >
{** 
using++ 
(++ 
StreamReader++ +
sr++, .
=++/ 0
new++1 4
StreamReader++5 A
(++A B
client++B H
.++H I
OpenRead++I Q
(++Q R
$str++R k
)++k l
)++l m
)++m n
{,, 
data00  
=00! "
sr00# %
.00% &
ReadLine00& .
(00. /
)00/ 0
;000 1
}11 
}22 
}33 
catch44 
(44 
IOException44 "
exceptIO44# +
)44+ ,
{55 
IO66 
.66 
Logger66 
.66 
Log66 !
(66! "
NLog66" &
.66& '
LogLevel66' /
.66/ 0
Warn660 4
,664 5
exceptIO666 >
,66> ?
$str66@ [
)66[ \
;66\ ]
}77 
}88 
dataCopy99 
=99 
data99 
;99 
}:: 	
{;; 	
string<< 
data<< 
=<< 
dataCopy<< "
;<<" #
try== 
{>> 
int?? 
value?? 
=?? 
int?? 
.??  
Parse??  %
(??% &
data??& *
)??* +
;??+ ,
}@@ 
catchAA 
(AA 
FormatExceptionAA "
exceptNumberFormatAA# 5
)AA5 6
{BB 
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD "
.DD" #
LogLevelDD# +
.DD+ ,
WarnDD, 0
,DD0 1
exceptNumberFormatDD2 D
,DDD E
$strDDF `
+DDa b
dataDDc g
)DDg h
;DDh i
}EE 
}FF 	
}GG 
publicJJ 

overrideJJ 
voidJJ 
GoodJJ 
(JJ 
)JJ 
{KK 
GoodG2BLL 
(LL 
)LL 
;LL 
GoodB2GMM 
(MM 
)MM 
;MM 
}NN 
privateQQ 
voidQQ 
GoodG2BQQ 
(QQ 
)QQ 
{RR 
stringSS 
dataCopySS 
;SS 
{TT 	
stringUU 
dataUU 
;UU 
dataWW 
=WW 
$strWW 
;WW 
dataCopyXX 
=XX 
dataXX 
;XX 
}YY 	
{ZZ 	
string[[ 
data[[ 
=[[ 
dataCopy[[ "
;[[" #
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
}ee 	
}ff 
privateii 
voidii 
GoodB2Gii 
(ii 
)ii 
{jj 
stringkk 
dataCopykk 
;kk 
{ll 	
stringmm 
datamm 
;mm 
datann 
=nn 
$strnn 
;nn 
{pp 
tryqq 
{rr 
usingss 
(ss 
	WebClientss $
clientss% +
=ss, -
newss. 1
	WebClientss2 ;
(ss; <
)ss< =
)ss= >
{tt 
usinguu 
(uu 
StreamReaderuu +
sruu, .
=uu/ 0
newuu1 4
StreamReaderuu5 A
(uuA B
clientuuB H
.uuH I
OpenReaduuI Q
(uuQ R
$struuR k
)uuk l
)uul m
)uum n
{vv 
datazz  
=zz! "
srzz# %
.zz% &
ReadLinezz& .
(zz. /
)zz/ 0
;zz0 1
}{{ 
}|| 
}}} 
catch~~ 
(~~ 
IOException~~ "
exceptIO~~# +
)~~+ ,
{ 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
dataCopy
 
=
 
data
 
;
 
}
 	
{
 	
string
 
data
 
=
 
dataCopy
 "
;
" #
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
} 
} 5
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_41.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_41 B
:C D
AbstractTestCaseE U
{ 
private 
static 
void 
BadSink 
(  
string  &
data' +
), -
{   
try!! 
{"" 	
int## 
value## 
=## 
int## 
.## 
Parse## !
(##! "
data##" &
)##& '
;##' (
}$$ 	
catch%% 
(%% 
FormatException%% 
exceptNumberFormat%% 1
)%%1 2
{&& 	
IO(( 
.(( 
Logger(( 
.(( 
Log(( 
((( 
NLog(( 
.(( 
LogLevel(( '
.((' (
Warn((( ,
,((, -
exceptNumberFormat((. @
,((@ A
$str((B \
+((] ^
data((_ c
)((c d
;((d e
})) 	
}** 
public,, 

override,, 
void,, 
Bad,, 
(,, 
),, 
{-- 
string.. 
data.. 
;.. 
data// 
=// 
$str// 
;// 
{11 	
try22 
{33 
using44 
(44 
	WebClient44  
client44! '
=44( )
new44* -
	WebClient44. 7
(447 8
)448 9
)449 :
{55 
using66 
(66 
StreamReader66 '
sr66( *
=66+ ,
new66- 0
StreamReader661 =
(66= >
client66> D
.66D E
OpenRead66E M
(66M N
$str66N g
)66g h
)66h i
)66i j
{77 
data;; 
=;; 
sr;; !
.;;! "
ReadLine;;" *
(;;* +
);;+ ,
;;;, -
}<< 
}== 
}>> 
catch?? 
(?? 
IOException?? 
exceptIO?? '
)??' (
{@@ 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA 
(AA 
NLogAA "
.AA" #
LogLevelAA# +
.AA+ ,
WarnAA, 0
,AA0 1
exceptIOAA2 :
,AA: ;
$strAA< W
)AAW X
;AAX Y
}BB 
}CC 	
BadSinkDD 
(DD 
dataDD 
)DD 
;DD 
}EE 
publicHH 

overrideHH 
voidHH 
GoodHH 
(HH 
)HH 
{II 
GoodG2BJJ 
(JJ 
)JJ 
;JJ 
GoodB2GKK 
(KK 
)KK 
;KK 
}LL 
privateNN 
staticNN 
voidNN 
GoodG2BSinkNN #
(NN# $
stringNN$ *
dataNN+ /
)NN0 1
{OO 
tryPP 
{QQ 	
intRR 
valueRR 
=RR 
intRR 
.RR 
ParseRR !
(RR! "
dataRR" &
)RR& '
;RR' (
}SS 	
catchTT 
(TT 
FormatExceptionTT 
exceptNumberFormatTT 1
)TT1 2
{UU 	
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW 
.WW 
LogLevelWW '
.WW' (
WarnWW( ,
,WW, -
exceptNumberFormatWW. @
,WW@ A
$strWWB \
+WW] ^
dataWW_ c
)WWc d
;WWd e
}XX 	
}YY 
private\\ 
static\\ 
void\\ 
GoodG2B\\ 
(\\  
)\\  !
{]] 
string^^ 
data^^ 
;^^ 
data`` 
=`` 
$str`` 
;`` 
GoodG2BSinkaa 
(aa 
dataaa 
)aa 
;aa 
}bb 
privatedd 
staticdd 
voiddd 
GoodB2GSinkdd #
(dd# $
stringdd$ *
datadd+ /
)dd0 1
{ee 
tryff 
{gg 	
inthh 
valuehh 
=hh 
inthh 
.hh 
Parsehh !
(hh! "
datahh" &
)hh& '
;hh' (
}ii 	
catchjj 
(jj 
FormatExceptionjj 
exceptNumberFormatjj 1
)jj1 2
{kk 	
IOmm 
.mm 
Loggermm 
.mm 
Logmm 
(mm 
NLogmm 
.mm 
LogLevelmm '
.mm' (
Warnmm( ,
,mm, -
exceptNumberFormatmm. @
,mm@ A
$strmmB f
+mmg h
exceptNumberFormatmmi {
)mm{ |
;mm| }
}nn 	
}oo 
privaterr 
staticrr 
voidrr 
GoodB2Grr 
(rr  
)rr  !
{ss 
stringtt 
datatt 
;tt 
datauu 
=uu 
$struu 
;uu 
{ww 	
tryxx 
{yy 
usingzz 
(zz 
	WebClientzz  
clientzz! '
=zz( )
newzz* -
	WebClientzz. 7
(zz7 8
)zz8 9
)zz9 :
{{{ 
using|| 
(|| 
StreamReader|| '
sr||( *
=||+ ,
new||- 0
StreamReader||1 =
(||= >
client||> D
.||D E
OpenRead||E M
(||M N
$str||N g
)||g h
)||h i
)||i j
{}} 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
}
 	
GoodB2GSink
 
(
 
data
 
)
 
;
 
}
 
} 
} Â6
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_42.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_42 B
:C D
AbstractTestCaseE U
{ 
private 
static 
string 
	BadSource #
(# $
)$ %
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using'' 
('' 
	WebClient''  
client''! '
=''( )
new''* -
	WebClient''. 7
(''7 8
)''8 9
)''9 :
{(( 
using)) 
()) 
StreamReader)) '
sr))( *
=))+ ,
new))- 0
StreamReader))1 =
())= >
client))> D
.))D E
OpenRead))E M
())M N
$str))N g
)))g h
)))h i
)))i j
{** 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	
return77 
data77 
;77 
}88 
public:: 

override:: 
void:: 
Bad:: 
(:: 
):: 
{;; 
string<< 
data<< 
=<< 
	BadSource<< 
(<<  
)<<  !
;<<! "
try== 
{>> 	
int?? 
value?? 
=?? 
int?? 
.?? 
Parse?? !
(??! "
data??" &
)??& '
;??' (
}@@ 	
catchAA 
(AA 
FormatExceptionAA 
exceptNumberFormatAA 1
)AA1 2
{BB 	
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD 
.DD 
LogLevelDD '
.DD' (
WarnDD( ,
,DD, -
exceptNumberFormatDD. @
,DD@ A
$strDDB \
+DD] ^
dataDD_ c
)DDc d
;DDd e
}EE 	
}FF 
privateJJ 
staticJJ 
stringJJ 
GoodG2BSourceJJ '
(JJ' (
)JJ( )
{KK 
stringLL 
dataLL 
;LL 
dataNN 
=NN 
$strNN 
;NN 
returnOO 
dataOO 
;OO 
}PP 
privateRR 
staticRR 
voidRR 
GoodG2BRR 
(RR  
)RR  !
{SS 
stringTT 
dataTT 
=TT 
GoodG2BSourceTT #
(TT# $
)TT$ %
;TT% &
tryUU 
{VV 	
intWW 
valueWW 
=WW 
intWW 
.WW 
ParseWW !
(WW! "
dataWW" &
)WW& '
;WW' (
}XX 	
catchYY 
(YY 
FormatExceptionYY 
exceptNumberFormatYY 1
)YY1 2
{ZZ 	
IO\\ 
.\\ 
Logger\\ 
.\\ 
Log\\ 
(\\ 
NLog\\ 
.\\ 
LogLevel\\ '
.\\' (
Warn\\( ,
,\\, -
exceptNumberFormat\\. @
,\\@ A
$str\\B \
+\\] ^
data\\_ c
)\\c d
;\\d e
}]] 	
}^^ 
privateaa 
staticaa 
stringaa 
GoodB2GSourceaa '
(aa' (
)aa( )
{bb 
stringcc 
datacc 
;cc 
datadd 
=dd 
$strdd 
;dd 
{ff 	
trygg 
{hh 
usingii 
(ii 
	WebClientii  
clientii! '
=ii( )
newii* -
	WebClientii. 7
(ii7 8
)ii8 9
)ii9 :
{jj 
usingkk 
(kk 
StreamReaderkk '
srkk( *
=kk+ ,
newkk- 0
StreamReaderkk1 =
(kk= >
clientkk> D
.kkD E
OpenReadkkE M
(kkM N
$strkkN g
)kkg h
)kkh i
)kki j
{ll 
datapp 
=pp 
srpp !
.pp! "
ReadLinepp" *
(pp* +
)pp+ ,
;pp, -
}qq 
}rr 
}ss 
catchtt 
(tt 
IOExceptiontt 
exceptIOtt '
)tt' (
{uu 
IOvv 
.vv 
Loggervv 
.vv 
Logvv 
(vv 
NLogvv "
.vv" #
LogLevelvv# +
.vv+ ,
Warnvv, 0
,vv0 1
exceptIOvv2 :
,vv: ;
$strvv< W
)vvW X
;vvX Y
}ww 
}xx 	
returnyy 
datayy 
;yy 
}zz 
private|| 
static|| 
void|| 
GoodB2G|| 
(||  
)||  !
{}} 
string~~ 
data~~ 
=~~ 
GoodB2GSource~~ #
(~~# $
)~~$ %
;~~% &
try 
{
 	
int
 
value
 
=
 
int
 
.
 
Parse
 !
(
! "
data
" &
)
& '
;
' (
}
 	
catch
 
(
 
FormatException
  
exceptNumberFormat
 1
)
1 2
{
 	
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 
.
 
LogLevel
 '
.
' (
Warn
( ,
,
, - 
exceptNumberFormat
. @
,
@ A
$str
B f
+
g h 
exceptNumberFormat
i {
)
{ |
;
| }
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
} 
} 9
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_45.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_45 B
:C D
AbstractTestCaseE U
{ 
private 
string 
dataBad 
; 
private   
string   
dataGoodG2B   
;   
private!! 
string!! 
dataGoodB2G!! 
;!! 
private## 
void## 
BadSink## 
(## 
)## 
{$$ 
string%% 
data%% 
=%% 
dataBad%% 
;%% 
try&& 
{'' 	
int(( 
value(( 
=(( 
int(( 
.(( 
Parse(( !
(((! "
data((" &
)((& '
;((' (
})) 	
catch** 
(** 
FormatException** 
exceptNumberFormat** 1
)**1 2
{++ 	
IO-- 
.-- 
Logger-- 
.-- 
Log-- 
(-- 
NLog-- 
.-- 
LogLevel-- '
.--' (
Warn--( ,
,--, -
exceptNumberFormat--. @
,--@ A
$str--B \
+--] ^
data--_ c
)--c d
;--d e
}.. 	
}// 
public11 

override11 
void11 
Bad11 
(11 
)11 
{22 
string33 
data33 
;33 
data44 
=44 
$str44 
;44 
{66 	
try77 
{88 
using99 
(99 
	WebClient99  
client99! '
=99( )
new99* -
	WebClient99. 7
(997 8
)998 9
)999 :
{:: 
using;; 
(;; 
StreamReader;; '
sr;;( *
=;;+ ,
new;;- 0
StreamReader;;1 =
(;;= >
client;;> D
.;;D E
OpenRead;;E M
(;;M N
$str;;N g
);;g h
);;h i
);;i j
{<< 
data@@ 
=@@ 
sr@@ !
.@@! "
ReadLine@@" *
(@@* +
)@@+ ,
;@@, -
}AA 
}BB 
}CC 
catchDD 
(DD 
IOExceptionDD 
exceptIODD '
)DD' (
{EE 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
exceptIOFF2 :
,FF: ;
$strFF< W
)FFW X
;FFX Y
}GG 
}HH 	
dataBadII 
=II 
dataII 
;II 
BadSinkJJ 
(JJ 
)JJ 
;JJ 
}KK 
publicNN 

overrideNN 
voidNN 
GoodNN 
(NN 
)NN 
{OO 
GoodG2BPP 
(PP 
)PP 
;PP 
GoodB2GQQ 
(QQ 
)QQ 
;QQ 
}RR 
privateTT 
voidTT 
GoodG2BSinkTT 
(TT 
)TT 
{UU 
stringVV 
dataVV 
=VV 
dataGoodG2BVV !
;VV! "
tryWW 
{XX 	
intYY 
valueYY 
=YY 
intYY 
.YY 
ParseYY !
(YY! "
dataYY" &
)YY& '
;YY' (
}ZZ 	
catch[[ 
([[ 
FormatException[[ 
exceptNumberFormat[[ 1
)[[1 2
{\\ 	
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ 
.^^ 
LogLevel^^ '
.^^' (
Warn^^( ,
,^^, -
exceptNumberFormat^^. @
,^^@ A
$str^^B \
+^^] ^
data^^_ c
)^^c d
;^^d e
}__ 	
}`` 
privatecc 
voidcc 
GoodG2Bcc 
(cc 
)cc 
{dd 
stringee 
dataee 
;ee 
datagg 
=gg 
$strgg 
;gg 
dataGoodG2Bhh 
=hh 
datahh 
;hh 
GoodG2BSinkii 
(ii 
)ii 
;ii 
}jj 
privatell 
voidll 
GoodB2GSinkll 
(ll 
)ll 
{mm 
stringnn 
datann 
=nn 
dataGoodB2Gnn !
;nn! "
tryoo 
{pp 	
intqq 
valueqq 
=qq 
intqq 
.qq 
Parseqq !
(qq! "
dataqq" &
)qq& '
;qq' (
}rr 	
catchss 
(ss 
FormatExceptionss 
exceptNumberFormatss 1
)ss1 2
{tt 	
IOvv 
.vv 
Loggervv 
.vv 
Logvv 
(vv 
NLogvv 
.vv 
LogLevelvv '
.vv' (
Warnvv( ,
,vv, -
exceptNumberFormatvv. @
,vv@ A
$strvvB f
+vvg h
exceptNumberFormatvvi {
)vv{ |
;vv| }
}ww 	
}xx 
private{{ 
void{{ 
GoodB2G{{ 
({{ 
){{ 
{|| 
string}} 
data}} 
;}} 
data~~ 
=~~ 
$str~~ 
;~~ 
{
 	
try
 
{
 
using
 
(
 
	WebClient
  
client
! '
=
( )
new
* -
	WebClient
. 7
(
7 8
)
8 9
)
9 :
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
client
> D
.
D E
OpenRead
E M
(
M N
$str
N g
)
g h
)
h i
)
i j
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
}
 	
dataGoodB2G
 
=
 
data
 
;
 
GoodB2GSink
 
(
 
)
 
;
 
}
 
} 
} é!
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_51a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_51a C
:D E
AbstractTestCaseF V
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using'' 
('' 
	WebClient''  
client''! '
=''( )
new''* -
	WebClient''. 7
(''7 8
)''8 9
)''9 :
{(( 
using)) 
()) 
StreamReader)) '
sr))( *
=))+ ,
new))- 0
StreamReader))1 =
())= >
client))> D
.))D E
OpenRead))E M
())M N
$str))N g
)))g h
)))h i
)))i j
{** 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_51b77 E
.77E F
BadSink77F M
(77M N
data77N R
)77T U
;77U V
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
dataFF 
=FF 
$strFF 
;FF I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_51bGG E
.GGE F
GoodG2BSinkGGF Q
(GGQ R
dataGGR V
)GGX Y
;GGY Z
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{PP 	
tryQQ 
{RR 
usingSS 
(SS 
	WebClientSS  
clientSS! '
=SS( )
newSS* -
	WebClientSS. 7
(SS7 8
)SS8 9
)SS9 :
{TT 
usingUU 
(UU 
StreamReaderUU '
srUU( *
=UU+ ,
newUU- 0
StreamReaderUU1 =
(UU= >
clientUU> D
.UUD E
OpenReadUUE M
(UUM N
$strUUN g
)UUg h
)UUh i
)UUi j
{VV 
dataZZ 
=ZZ 
srZZ !
.ZZ! "
ReadLineZZ" *
(ZZ* +
)ZZ+ ,
;ZZ, -
}[[ 
}\\ 
}]] 
catch^^ 
(^^ 
IOException^^ 
exceptIO^^ '
)^^' (
{__ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptIO``2 :
,``: ;
$str``< W
)``W X
;``X Y
}aa 
}bb 	I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_51bcc E
.ccE F
GoodB2GSinkccF Q
(ccQ R
dataccR V
)ccX Y
;ccY Z
}dd 
}ff 
}gg ø
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_51b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_51b C
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH é!
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_52a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_52a C
:D E
AbstractTestCaseF V
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using'' 
('' 
	WebClient''  
client''! '
=''( )
new''* -
	WebClient''. 7
(''7 8
)''8 9
)''9 :
{(( 
using)) 
()) 
StreamReader)) '
sr))( *
=))+ ,
new))- 0
StreamReader))1 =
())= >
client))> D
.))D E
OpenRead))E M
())M N
$str))N g
)))g h
)))h i
)))i j
{** 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_52b77 E
.77E F
BadSink77F M
(77M N
data77N R
)77S T
;77T U
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
dataFF 
=FF 
$strFF 
;FF I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_52bGG E
.GGE F
GoodG2BSinkGGF Q
(GGQ R
dataGGR V
)GGW X
;GGX Y
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{PP 	
tryQQ 
{RR 
usingSS 
(SS 
	WebClientSS  
clientSS! '
=SS( )
newSS* -
	WebClientSS. 7
(SS7 8
)SS8 9
)SS9 :
{TT 
usingUU 
(UU 
StreamReaderUU '
srUU( *
=UU+ ,
newUU- 0
StreamReaderUU1 =
(UU= >
clientUU> D
.UUD E
OpenReadUUE M
(UUM N
$strUUN g
)UUg h
)UUh i
)UUi j
{VV 
dataZZ 
=ZZ 
srZZ !
.ZZ! "
ReadLineZZ" *
(ZZ* +
)ZZ+ ,
;ZZ, -
}[[ 
}\\ 
}]] 
catch^^ 
(^^ 
IOException^^ 
exceptIO^^ '
)^^' (
{__ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptIO``2 :
,``: ;
$str``< W
)``W X
;``X Y
}aa 
}bb 	I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_52bcc E
.ccE F
GoodB2GSinkccF Q
(ccQ R
dataccR V
)ccW X
;ccX Y
}dd 
}ff 
}gg 
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_52b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_52b C
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_52c E
.E F
BadSinkF M
(M N
dataN R
)S T
;T U
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_52c&& E
.&&E F
GoodG2BSink&&F Q
(&&Q R
data&&R V
)&&W X
;&&X Y
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_52c,, E
.,,E F
GoodB2GSink,,F Q
(,,Q R
data,,R V
),,W X
;,,X Y
}-- 
}// 
}00 ø
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_52c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_52c C
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH é!
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53a C
:D E
AbstractTestCaseF V
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using'' 
('' 
	WebClient''  
client''! '
=''( )
new''* -
	WebClient''. 7
(''7 8
)''8 9
)''9 :
{(( 
using)) 
()) 
StreamReader)) '
sr))( *
=))+ ,
new))- 0
StreamReader))1 =
())= >
client))> D
.))D E
OpenRead))E M
())M N
$str))N g
)))g h
)))h i
)))i j
{** 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53b77 E
.77E F
BadSink77F M
(77M N
data77N R
)77S T
;77T U
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
dataFF 
=FF 
$strFF 
;FF I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53bGG E
.GGE F
GoodG2BSinkGGF Q
(GGQ R
dataGGR V
)GGW X
;GGX Y
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{PP 	
tryQQ 
{RR 
usingSS 
(SS 
	WebClientSS  
clientSS! '
=SS( )
newSS* -
	WebClientSS. 7
(SS7 8
)SS8 9
)SS9 :
{TT 
usingUU 
(UU 
StreamReaderUU '
srUU( *
=UU+ ,
newUU- 0
StreamReaderUU1 =
(UU= >
clientUU> D
.UUD E
OpenReadUUE M
(UUM N
$strUUN g
)UUg h
)UUh i
)UUi j
{VV 
dataZZ 
=ZZ 
srZZ !
.ZZ! "
ReadLineZZ" *
(ZZ* +
)ZZ+ ,
;ZZ, -
}[[ 
}\\ 
}]] 
catch^^ 
(^^ 
IOException^^ 
exceptIO^^ '
)^^' (
{__ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptIO``2 :
,``: ;
$str``< W
)``W X
;``X Y
}aa 
}bb 	I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53bcc E
.ccE F
GoodB2GSinkccF Q
(ccQ R
dataccR V
)ccW X
;ccX Y
}dd 
}ff 
}gg 
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53b C
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53c E
.E F
BadSinkF M
(M N
dataN R
)S T
;T U
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53c&& E
.&&E F
GoodG2BSink&&F Q
(&&Q R
data&&R V
)&&W X
;&&X Y
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53c,, E
.,,E F
GoodB2GSink,,F Q
(,,Q R
data,,R V
),,W X
;,,X Y
}-- 
}// 
}00 
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53c C
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53d E
.E F
BadSinkF M
(M N
dataN R
)S T
;T U
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53d&& E
.&&E F
GoodG2BSink&&F Q
(&&Q R
data&&R V
)&&W X
;&&X Y
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53d,, E
.,,E F
GoodB2GSink,,F Q
(,,Q R
data,,R V
),,W X
;,,X Y
}-- 
}// 
}00 ø
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53d C
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH é!
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54a C
:D E
AbstractTestCaseF V
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using'' 
('' 
	WebClient''  
client''! '
=''( )
new''* -
	WebClient''. 7
(''7 8
)''8 9
)''9 :
{(( 
using)) 
()) 
StreamReader)) '
sr))( *
=))+ ,
new))- 0
StreamReader))1 =
())= >
client))> D
.))D E
OpenRead))E M
())M N
$str))N g
)))g h
)))h i
)))i j
{** 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54b77 E
.77E F
BadSink77F M
(77M N
data77N R
)77S T
;77T U
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
dataFF 
=FF 
$strFF 
;FF I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54bGG E
.GGE F
GoodG2BSinkGGF Q
(GGQ R
dataGGR V
)GGW X
;GGX Y
}HH 
privateKK 
voidKK 
GoodB2GKK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{PP 	
tryQQ 
{RR 
usingSS 
(SS 
	WebClientSS  
clientSS! '
=SS( )
newSS* -
	WebClientSS. 7
(SS7 8
)SS8 9
)SS9 :
{TT 
usingUU 
(UU 
StreamReaderUU '
srUU( *
=UU+ ,
newUU- 0
StreamReaderUU1 =
(UU= >
clientUU> D
.UUD E
OpenReadUUE M
(UUM N
$strUUN g
)UUg h
)UUh i
)UUi j
{VV 
dataZZ 
=ZZ 
srZZ !
.ZZ! "
ReadLineZZ" *
(ZZ* +
)ZZ+ ,
;ZZ, -
}[[ 
}\\ 
}]] 
catch^^ 
(^^ 
IOException^^ 
exceptIO^^ '
)^^' (
{__ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptIO``2 :
,``: ;
$str``< W
)``W X
;``X Y
}aa 
}bb 	I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54bcc E
.ccE F
GoodB2GSinkccF Q
(ccQ R
dataccR V
)ccW X
;ccX Y
}dd 
}ff 
}gg 
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54b C
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54c E
.E F
BadSinkF M
(M N
dataN R
)S T
;T U
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54c&& E
.&&E F
GoodG2BSink&&F Q
(&&Q R
data&&R V
)&&W X
;&&X Y
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54c,, E
.,,E F
GoodB2GSink,,F Q
(,,Q R
data,,R V
),,W X
;,,X Y
}-- 
}// 
}00 
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54c C
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54d E
.E F
BadSinkF M
(M N
dataN R
)S T
;T U
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54d&& E
.&&E F
GoodG2BSink&&F Q
(&&Q R
data&&R V
)&&W X
;&&X Y
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54d,, E
.,,E F
GoodB2GSink,,F Q
(,,Q R
data,,R V
),,W X
;,,X Y
}-- 
}// 
}00 
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54d C
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54e E
.E F
BadSinkF M
(M N
dataN R
)S T
;T U
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54e&& E
.&&E F
GoodG2BSink&&F Q
(&&Q R
data&&R V
)&&W X
;&&X Y
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54e,, E
.,,E F
GoodB2GSink,,F Q
(,,Q R
data,,R V
),,W X
;,,X Y
}-- 
}// 
}00 ø
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54e.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54e C
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH º
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_61a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_61a C
:D E
AbstractTestCaseF V
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
= I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_61b S
.S T
	BadSourceT ]
(] ^
)^ _
;_ `
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodG2B-- 
(-- 
)-- 
;-- 
GoodB2G.. 
(.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
)22  !
{33 
string44 
data44 
=44 I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_61b44 S
.44S T
GoodG2BSource44T a
(44a b
)44b c
;44c d
try55 
{66 	
int77 
value77 
=77 
int77 
.77 
Parse77 !
(77! "
data77" &
)77& '
;77' (
}88 	
catch99 
(99 
FormatException99 
exceptNumberFormat99 1
)991 2
{:: 	
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< 
.<< 
LogLevel<< '
.<<' (
Warn<<( ,
,<<, -
exceptNumberFormat<<. @
,<<@ A
$str<<B \
+<<] ^
data<<_ c
)<<c d
;<<d e
}== 	
}>> 
privateAA 
staticAA 
voidAA 
GoodB2GAA 
(AA  
)AA  !
{BB 
stringCC 
dataCC 
=CC I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_61bCC S
.CCS T
GoodB2GSourceCCT a
(CCa b
)CCb c
;CCc d
tryDD 
{EE 	
intFF 
valueFF 
=FF 
intFF 
.FF 
ParseFF !
(FF! "
dataFF" &
)FF& '
;FF' (
}GG 	
catchHH 
(HH 
FormatExceptionHH 
exceptNumberFormatHH 1
)HH1 2
{II 	
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK 
.KK 
LogLevelKK '
.KK' (
WarnKK( ,
,KK, -
exceptNumberFormatKK. @
,KK@ A
$strKKB f
+KKg h
exceptNumberFormatKKi {
)KK{ |
;KK| }
}LL 	
}MM 
}OO 
}PP ÷
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_61b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_61b C
{ 
public 

static 
string 
	BadSource "
(" #
)# $
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using'' 
('' 
	WebClient''  
client''! '
=''( )
new''* -
	WebClient''. 7
(''7 8
)''8 9
)''9 :
{(( 
using)) 
()) 
StreamReader)) '
sr))( *
=))+ ,
new))- 0
StreamReader))1 =
())= >
client))> D
.))D E
OpenRead))E M
())M N
$str))N g
)))g h
)))h i
)))i j
{** 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	
return77 
data77 
;77 
}88 
public== 

static== 
string== 
GoodG2BSource== &
(==& '
)==' (
{>> 
string?? 
data?? 
;?? 
dataAA 
=AA 
$strAA 
;AA 
returnBB 
dataBB 
;BB 
}CC 
publicFF 

staticFF 
stringFF 
GoodB2GSourceFF &
(FF& '
)FF' (
{GG 
stringHH 
dataHH 
;HH 
dataII 
=II 
$strII 
;II 
{KK 	
tryLL 
{MM 
usingNN 
(NN 
	WebClientNN  
clientNN! '
=NN( )
newNN* -
	WebClientNN. 7
(NN7 8
)NN8 9
)NN9 :
{OO 
usingPP 
(PP 
StreamReaderPP '
srPP( *
=PP+ ,
newPP- 0
StreamReaderPP1 =
(PP= >
clientPP> D
.PPD E
OpenReadPPE M
(PPM N
$strPPN g
)PPg h
)PPh i
)PPi j
{QQ 
dataUU 
=UU 
srUU !
.UU! "
ReadLineUU" *
(UU* +
)UU+ ,
;UU, -
}VV 
}WW 
}XX 
catchYY 
(YY 
IOExceptionYY 
exceptIOYY '
)YY' (
{ZZ 
IO[[ 
.[[ 
Logger[[ 
.[[ 
Log[[ 
([[ 
NLog[[ "
.[[" #
LogLevel[[# +
.[[+ ,
Warn[[, 0
,[[0 1
exceptIO[[2 :
,[[: ;
$str[[< W
)[[W X
;[[X Y
}\\ 
}]] 	
return^^ 
data^^ 
;^^ 
}__ 
}aa 
}bb ¹)
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_66a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_66a C
:D E
AbstractTestCaseF V
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using'' 
('' 
	WebClient''  
client''! '
=''( )
new''* -
	WebClient''. 7
(''7 8
)''8 9
)''9 :
{(( 
using)) 
()) 
StreamReader)) '
sr))( *
=))+ ,
new))- 0
StreamReader))1 =
())= >
client))> D
.))D E
OpenRead))E M
())M N
$str))N g
)))g h
)))h i
)))i j
{** 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	
string77 
[77 
]77 
	dataArray77 
=77 
new77  
string77! '
[77' (
$num77( )
]77) *
;77* +
	dataArray88 
[88 
$num88 
]88 
=88 
data88 
;88 I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_66b99 E
.99E F
BadSink99F M
(99M N
	dataArray99N W
)99Y Z
;99Z [
}:: 
public== 

override== 
void== 
Good== 
(== 
)== 
{>> 
GoodG2B?? 
(?? 
)?? 
;?? 
GoodB2G@@ 
(@@ 
)@@ 
;@@ 
}AA 
privateDD 
staticDD 
voidDD 
GoodG2BDD 
(DD  
)DD  !
{EE 
stringFF 
dataFF 
;FF 
dataHH 
=HH 
$strHH 
;HH 
stringII 
[II 
]II 
	dataArrayII 
=II 
newII  
stringII! '
[II' (
$numII( )
]II) *
;II* +
	dataArrayJJ 
[JJ 
$numJJ 
]JJ 
=JJ 
dataJJ 
;JJ I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_66bKK E
.KKE F
GoodG2BSinkKKF Q
(KKQ R
	dataArrayKKR [
)KK] ^
;KK^ _
}LL 
privateOO 
staticOO 
voidOO 
GoodB2GOO 
(OO  
)OO  !
{PP 
stringQQ 
dataQQ 
;QQ 
dataRR 
=RR 
$strRR 
;RR 
{TT 	
tryUU 
{VV 
usingWW 
(WW 
	WebClientWW  
clientWW! '
=WW( )
newWW* -
	WebClientWW. 7
(WW7 8
)WW8 9
)WW9 :
{XX 
usingYY 
(YY 
StreamReaderYY '
srYY( *
=YY+ ,
newYY- 0
StreamReaderYY1 =
(YY= >
clientYY> D
.YYD E
OpenReadYYE M
(YYM N
$strYYN g
)YYg h
)YYh i
)YYi j
{ZZ 
data^^ 
=^^ 
sr^^ !
.^^! "
ReadLine^^" *
(^^* +
)^^+ ,
;^^, -
}__ 
}`` 
}aa 
catchbb 
(bb 
IOExceptionbb 
exceptIObb '
)bb' (
{cc 
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd "
.dd" #
LogLeveldd# +
.dd+ ,
Warndd, 0
,dd0 1
exceptIOdd2 :
,dd: ;
$strdd< W
)ddW X
;ddX Y
}ee 
}ff 	
stringgg 
[gg 
]gg 
	dataArraygg 
=gg 
newgg  
stringgg! '
[gg' (
$numgg( )
]gg) *
;gg* +
	dataArrayhh 
[hh 
$numhh 
]hh 
=hh 
datahh 
;hh I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_66bii E
.iiE F
GoodB2GSinkiiF Q
(iiQ R
	dataArrayiiR [
)ii] ^
;ii^ _
}jj 
}ll 
}mm 
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_66b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_66b C
{ 
public 

static 
void 
BadSink 
( 
string %
[% &
]& '
	dataArray( 1
)2 3
{ 
string 
data 
= 
	dataArray 
[  
$num  !
]! "
;" #
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
string--# )
[--) *
]--* +
	dataArray--, 5
)--6 7
{.. 
string// 
data// 
=// 
	dataArray// 
[//  
$num//  !
]//! "
;//" #
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
string<<# )
[<<) *
]<<* +
	dataArray<<, 5
)<<6 7
{== 
string>> 
data>> 
=>> 
	dataArray>> 
[>>  
$num>>  !
]>>! "
;>>" #
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK ÷)
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_67a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_67a C
:D E
AbstractTestCaseF V
{ 
public 

class 
	Container 
{   
public!! 
string!! 
containerOne!! "
;!!" #
}"" 
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
string&& 
data&& 
;&& 
data'' 
='' 
$str'' 
;'' 
{)) 	
try** 
{++ 
using,, 
(,, 
	WebClient,,  
client,,! '
=,,( )
new,,* -
	WebClient,,. 7
(,,7 8
),,8 9
),,9 :
{-- 
using.. 
(.. 
StreamReader.. '
sr..( *
=..+ ,
new..- 0
StreamReader..1 =
(..= >
client..> D
...D E
OpenRead..E M
(..M N
$str..N g
)..g h
)..h i
)..i j
{// 
data33 
=33 
sr33 !
.33! "
ReadLine33" *
(33* +
)33+ ,
;33, -
}44 
}55 
}66 
catch77 
(77 
IOException77 
exceptIO77 '
)77' (
{88 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
exceptIO992 :
,99: ;
$str99< W
)99W X
;99X Y
}:: 
};; 	
	Container<< 
dataContainer<< 
=<<  !
new<<" %
	Container<<& /
(<</ 0
)<<0 1
;<<1 2
dataContainer== 
.== 
containerOne== "
===# $
data==% )
;==) *I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_67b>> E
.>>E F
BadSink>>F M
(>>M N
dataContainer>>N [
)>>] ^
;>>^ _
}?? 
publicBB 

overrideBB 
voidBB 
GoodBB 
(BB 
)BB 
{CC 
GoodG2BDD 
(DD 
)DD 
;DD 
GoodB2GEE 
(EE 
)EE 
;EE 
}FF 
privateII 
staticII 
voidII 
GoodG2BII 
(II  
)II  !
{JJ 
stringKK 
dataKK 
;KK 
dataMM 
=MM 
$strMM 
;MM 
	ContainerNN 
dataContainerNN 
=NN  !
newNN" %
	ContainerNN& /
(NN/ 0
)NN0 1
;NN1 2
dataContainerOO 
.OO 
containerOneOO "
=OO# $
dataOO% )
;OO) *I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_67bPP E
.PPE F
GoodG2BSinkPPF Q
(PPQ R
dataContainerPPR _
)PPa b
;PPb c
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
stringVV 
dataVV 
;VV 
dataWW 
=WW 
$strWW 
;WW 
{YY 	
tryZZ 
{[[ 
using\\ 
(\\ 
	WebClient\\  
client\\! '
=\\( )
new\\* -
	WebClient\\. 7
(\\7 8
)\\8 9
)\\9 :
{]] 
using^^ 
(^^ 
StreamReader^^ '
sr^^( *
=^^+ ,
new^^- 0
StreamReader^^1 =
(^^= >
client^^> D
.^^D E
OpenRead^^E M
(^^M N
$str^^N g
)^^g h
)^^h i
)^^i j
{__ 
datacc 
=cc 
srcc !
.cc! "
ReadLinecc" *
(cc* +
)cc+ ,
;cc, -
}dd 
}ee 
}ff 
catchgg 
(gg 
IOExceptiongg 
exceptIOgg '
)gg' (
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptIOii2 :
,ii: ;
$strii< W
)iiW X
;iiX Y
}jj 
}kk 	
	Containerll 
dataContainerll 
=ll  !
newll" %
	Containerll& /
(ll/ 0
)ll0 1
;ll1 2
dataContainermm 
.mm 
containerOnemm "
=mm# $
datamm% )
;mm) *I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_67bnn E
.nnE F
GoodB2GSinknnF Q
(nnQ R
dataContainernnR _
)nna b
;nnb c
}oo 
}qq 
}rr Â
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_67b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_67b C
{ 
public 

static 
void 
BadSink 
( I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_67a \
.\ ]
	Container] f
dataContainerg t
)u v
{ 
string 
data 
= 
dataContainer #
.# $
containerOne$ 0
;0 1
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_67a--# `
.--` a
	Container--a j
dataContainer--k x
)--y z
{.. 
string// 
data// 
=// 
dataContainer// #
.//# $
containerOne//$ 0
;//0 1
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_67a<<# `
.<<` a
	Container<<a j
dataContainer<<k x
)<<y z
{== 
string>> 
data>> 
=>> 
dataContainer>> #
.>># $
containerOne>>$ 0
;>>0 1
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK !
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_68a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_68a C
:D E
AbstractTestCaseF V
{ 
public 

static 
string 
data 
; 
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
data## 
=## 
$str## 
;## 
{%% 	
try&& 
{'' 
using(( 
((( 
	WebClient((  
client((! '
=((( )
new((* -
	WebClient((. 7
(((7 8
)((8 9
)((9 :
{)) 
using** 
(** 
StreamReader** '
sr**( *
=**+ ,
new**- 0
StreamReader**1 =
(**= >
client**> D
.**D E
OpenRead**E M
(**M N
$str**N g
)**g h
)**h i
)**i j
{++ 
data// 
=// 
sr// !
.//! "
ReadLine//" *
(//* +
)//+ ,
;//, -
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_68b88 E
.88E F
BadSink88F M
(88M N
)88N O
;88O P
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
)<< 
{== 
GoodG2B>> 
(>> 
)>> 
;>> 
GoodB2G?? 
(?? 
)?? 
;?? 
}@@ 
privateCC 
staticCC 
voidCC 
GoodG2BCC 
(CC  
)CC  !
{DD 
dataFF 
=FF 
$strFF 
;FF I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_68bGG E
.GGE F
GoodG2BSinkGGF Q
(GGQ R
)GGR S
;GGS T
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
)KK  !
{LL 
dataMM 
=MM 
$strMM 
;MM 
{OO 	
tryPP 
{QQ 
usingRR 
(RR 
	WebClientRR  
clientRR! '
=RR( )
newRR* -
	WebClientRR. 7
(RR7 8
)RR8 9
)RR9 :
{SS 
usingTT 
(TT 
StreamReaderTT '
srTT( *
=TT+ ,
newTT- 0
StreamReaderTT1 =
(TT= >
clientTT> D
.TTD E
OpenReadTTE M
(TTM N
$strTTN g
)TTg h
)TTh i
)TTi j
{UU 
dataYY 
=YY 
srYY !
.YY! "
ReadLineYY" *
(YY* +
)YY+ ,
;YY, -
}ZZ 
}[[ 
}\\ 
catch]] 
(]] 
IOException]] 
exceptIO]] '
)]]' (
{^^ 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
exceptIO__2 :
,__: ;
$str__< W
)__W X
;__X Y
}`` 
}aa 	I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_68bbb E
.bbE F
GoodB2GSinkbbF Q
(bbQ R
)bbR S
;bbS T
}cc 
}ee 
}ff 
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_68b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_68b C
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
string 
data 
= I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_68a S
.S T
dataT X
;X Y
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
)--# $
{.. 
string// 
data// 
=// I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_68a// S
.//S T
data//T X
;//X Y
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
)<<# $
{== 
string>> 
data>> 
=>> I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_68a>> S
.>>S T
data>>T X
;>>X Y
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK §#
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_71a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_71a C
:D E
AbstractTestCaseF V
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using'' 
('' 
	WebClient''  
client''! '
=''( )
new''* -
	WebClient''. 7
(''7 8
)''8 9
)''9 :
{(( 
using)) 
()) 
StreamReader)) '
sr))( *
=))+ ,
new))- 0
StreamReader))1 =
())= >
client))> D
.))D E
OpenRead))E M
())M N
$str))N g
)))g h
)))h i
)))i j
{** 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_71b77 E
.77E F
BadSink77F M
(77M N
(77N O
Object77O U
)77U V
data77V Z
)77\ ]
;77] ^
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
);; 
{<< 
GoodG2B== 
(== 
)== 
;== 
GoodB2G>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
staticBB 
voidBB 
GoodG2BBB 
(BB  
)BB  !
{CC 
stringDD 
dataDD 
;DD 
dataFF 
=FF 
$strFF 
;FF I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_71bGG E
.GGE F
GoodG2BSinkGGF Q
(GGQ R
(GGR S
ObjectGGS Y
)GGY Z
dataGGZ ^
)GG` a
;GGa b
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
)KK  !
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{PP 	
tryQQ 
{RR 
usingSS 
(SS 
	WebClientSS  
clientSS! '
=SS( )
newSS* -
	WebClientSS. 7
(SS7 8
)SS8 9
)SS9 :
{TT 
usingUU 
(UU 
StreamReaderUU '
srUU( *
=UU+ ,
newUU- 0
StreamReaderUU1 =
(UU= >
clientUU> D
.UUD E
OpenReadUUE M
(UUM N
$strUUN g
)UUg h
)UUh i
)UUi j
{VV 
dataZZ 
=ZZ 
srZZ !
.ZZ! "
ReadLineZZ" *
(ZZ* +
)ZZ+ ,
;ZZ, -
}[[ 
}\\ 
}]] 
catch^^ 
(^^ 
IOException^^ 
exceptIO^^ '
)^^' (
{__ 
IO`` 
.`` 
Logger`` 
.`` 
Log`` 
(`` 
NLog`` "
.``" #
LogLevel``# +
.``+ ,
Warn``, 0
,``0 1
exceptIO``2 :
,``: ;
$str``< W
)``W X
;``X Y
}aa 
}bb 	I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_71bcc E
.ccE F
GoodB2GSinkccF Q
(ccQ R
(ccR S
ObjectccS Y
)ccY Z
dataccZ ^
)cc` a
;cca b
}dd 
}ff 
}gg ´
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_71b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_71b C
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
string 
data 
= 
( 
string 
) 

dataObject (
;( )
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
Object..# )

dataObject..* 4
)..5 6
{// 
string00 
data00 
=00 
(00 
string00 
)00 

dataObject00 (
;00( )
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
Object==# )

dataObject==* 4
)==5 6
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 

dataObject?? (
;??( )
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL 1
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_72a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_72a C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
try&& 
{'' 
using(( 
((( 
	WebClient((  
client((! '
=((( )
new((* -
	WebClient((. 7
(((7 8
)((8 9
)((9 :
{)) 
using** 
(** 
StreamReader** '
sr**( *
=**+ ,
new**- 0
StreamReader**1 =
(**= >
client**> D
.**D E
OpenRead**E M
(**M N
$str**N g
)**g h
)**h i
)**i j
{++ 
data// 
=// 
sr// !
.//! "
ReadLine//" *
(//* +
)//+ ,
;//, -
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	
	Hashtable88 
dataHashtable88 
=88  !
new88" %
	Hashtable88& /
(88/ 0
$num880 1
)881 2
;882 3
dataHashtable99 
.99 
Add99 
(99 
$num99 
,99 
data99 !
)99! "
;99" #
dataHashtable:: 
.:: 
Add:: 
(:: 
$num:: 
,:: 
data:: !
)::! "
;::" #
dataHashtable;; 
.;; 
Add;; 
(;; 
$num;; 
,;; 
data;; !
);;! "
;;;" #I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_72b<< E
.<<E F
BadSink<<F M
(<<M N
dataHashtable<<N [
)<<] ^
;<<^ _
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK 
	HashtableLL 
dataHashtableLL 
=LL  !
newLL" %
	HashtableLL& /
(LL/ 0
$numLL0 1
)LL1 2
;LL2 3
dataHashtableMM 
.MM 
AddMM 
(MM 
$numMM 
,MM 
dataMM !
)MM! "
;MM" #
dataHashtableNN 
.NN 
AddNN 
(NN 
$numNN 
,NN 
dataNN !
)NN! "
;NN" #
dataHashtableOO 
.OO 
AddOO 
(OO 
$numOO 
,OO 
dataOO !
)OO! "
;OO" #I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_72bPP E
.PPE F
GoodG2BSinkPPF Q
(PPQ R
dataHashtablePPR _
)PPa b
;PPb c
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
stringVV 
dataVV 
;VV 
dataWW 
=WW 
$strWW 
;WW 
{YY 	
tryZZ 
{[[ 
using\\ 
(\\ 
	WebClient\\  
client\\! '
=\\( )
new\\* -
	WebClient\\. 7
(\\7 8
)\\8 9
)\\9 :
{]] 
using^^ 
(^^ 
StreamReader^^ '
sr^^( *
=^^+ ,
new^^- 0
StreamReader^^1 =
(^^= >
client^^> D
.^^D E
OpenRead^^E M
(^^M N
$str^^N g
)^^g h
)^^h i
)^^i j
{__ 
datacc 
=cc 
srcc !
.cc! "
ReadLinecc" *
(cc* +
)cc+ ,
;cc, -
}dd 
}ee 
}ff 
catchgg 
(gg 
IOExceptiongg 
exceptIOgg '
)gg' (
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptIOii2 :
,ii: ;
$strii< W
)iiW X
;iiX Y
}jj 
}kk 	
	Hashtablell 
dataHashtablell 
=ll  !
newll" %
	Hashtablell& /
(ll/ 0
$numll0 1
)ll1 2
;ll2 3
dataHashtablemm 
.mm 
Addmm 
(mm 
$nummm 
,mm 
datamm !
)mm! "
;mm" #
dataHashtablenn 
.nn 
Addnn 
(nn 
$numnn 
,nn 
datann !
)nn! "
;nn" #
dataHashtableoo 
.oo 
Addoo 
(oo 
$numoo 
,oo 
dataoo !
)oo! "
;oo" #I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_72bpp E
.ppE F
GoodB2GSinkppF Q
(ppQ R
dataHashtableppR _
)ppa b
;ppb c
}qq 
}ss 
}tt ß
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_72b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_72b C
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
string 
data 
= 
( 
string 
) 
dataHashtable ,
[, -
$num- .
]. /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
	Hashtable..# ,
dataHashtable..- :
)..; <
{// 
string00 
data00 
=00 
(00 
string00 
)00 
dataHashtable00 ,
[00, -
$num00- .
]00. /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
	Hashtable==# ,
dataHashtable==- :
)==; <
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 
dataHashtable?? ,
[??, -
$num??- .
]??. /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL 1
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_73a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_73a C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
try&& 
{'' 
using(( 
((( 
	WebClient((  
client((! '
=((( )
new((* -
	WebClient((. 7
(((7 8
)((8 9
)((9 :
{)) 
using** 
(** 
StreamReader** '
sr**( *
=**+ ,
new**- 0
StreamReader**1 =
(**= >
client**> D
.**D E
OpenRead**E M
(**M N
$str**N g
)**g h
)**h i
)**i j
{++ 
data// 
=// 
sr// !
.//! "
ReadLine//" *
(//* +
)//+ ,
;//, -
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	

LinkedList88 
<88 
string88 
>88 
dataLinkedList88 )
=88* +
new88, /

LinkedList880 :
<88: ;
string88; A
>88A B
(88B C
)88C D
;88D E
dataLinkedList99 
.99 
AddLast99 
(99 
data99 #
)99# $
;99$ %
dataLinkedList:: 
.:: 
AddLast:: 
(:: 
data:: #
)::# $
;::$ %
dataLinkedList;; 
.;; 
AddLast;; 
(;; 
data;; #
);;# $
;;;$ %I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_73b<< E
.<<E F
BadSink<<F M
(<<M N
dataLinkedList<<N \
)<<^ _
;<<_ `
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK 

LinkedListLL 
<LL 
stringLL 
>LL 
dataLinkedListLL )
=LL* +
newLL, /

LinkedListLL0 :
<LL: ;
stringLL; A
>LLA B
(LLB C
)LLC D
;LLD E
dataLinkedListMM 
.MM 
AddLastMM 
(MM 
dataMM #
)MM# $
;MM$ %
dataLinkedListNN 
.NN 
AddLastNN 
(NN 
dataNN #
)NN# $
;NN$ %
dataLinkedListOO 
.OO 
AddLastOO 
(OO 
dataOO #
)OO# $
;OO$ %I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_73bPP E
.PPE F
GoodG2BSinkPPF Q
(PPQ R
dataLinkedListPPR `
)PPb c
;PPc d
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
stringVV 
dataVV 
;VV 
dataWW 
=WW 
$strWW 
;WW 
{YY 	
tryZZ 
{[[ 
using\\ 
(\\ 
	WebClient\\  
client\\! '
=\\( )
new\\* -
	WebClient\\. 7
(\\7 8
)\\8 9
)\\9 :
{]] 
using^^ 
(^^ 
StreamReader^^ '
sr^^( *
=^^+ ,
new^^- 0
StreamReader^^1 =
(^^= >
client^^> D
.^^D E
OpenRead^^E M
(^^M N
$str^^N g
)^^g h
)^^h i
)^^i j
{__ 
datacc 
=cc 
srcc !
.cc! "
ReadLinecc" *
(cc* +
)cc+ ,
;cc, -
}dd 
}ee 
}ff 
catchgg 
(gg 
IOExceptiongg 
exceptIOgg '
)gg' (
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptIOii2 :
,ii: ;
$strii< W
)iiW X
;iiX Y
}jj 
}kk 	

LinkedListll 
<ll 
stringll 
>ll 
dataLinkedListll )
=ll* +
newll, /

LinkedListll0 :
<ll: ;
stringll; A
>llA B
(llB C
)llC D
;llD E
dataLinkedListmm 
.mm 
AddLastmm 
(mm 
datamm #
)mm# $
;mm$ %
dataLinkedListnn 
.nn 
AddLastnn 
(nn 
datann #
)nn# $
;nn$ %
dataLinkedListoo 
.oo 
AddLastoo 
(oo 
dataoo #
)oo# $
;oo$ %I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_73bpp E
.ppE F
GoodB2GSinkppF Q
(ppQ R
dataLinkedListppR `
)ppb c
;ppc d
}qq 
}ss 
}tt ¡
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_73b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_73b C
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
string* 0
>0 1
dataLinkedList2 @
)A B
{ 
string 
data 
= 
dataLinkedList $
.$ %
Last% )
.) *
Value* /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #

LinkedList..# -
<..- .
string... 4
>..4 5
dataLinkedList..6 D
)..E F
{// 
string00 
data00 
=00 
dataLinkedList00 $
.00$ %
Last00% )
.00) *
Value00* /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

LinkedList==# -
<==- .
string==. 4
>==4 5
dataLinkedList==6 D
)==E F
{>> 
string?? 
data?? 
=?? 
dataLinkedList?? $
.??$ %
Last??% )
.??) *
Value??* /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL â4
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_74a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_74a C
:D E
AbstractTestCaseF V
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
try&& 
{'' 
using(( 
((( 
	WebClient((  
client((! '
=((( )
new((* -
	WebClient((. 7
(((7 8
)((8 9
)((9 :
{)) 
using** 
(** 
StreamReader** '
sr**( *
=**+ ,
new**- 0
StreamReader**1 =
(**= >
client**> D
.**D E
OpenRead**E M
(**M N
$str**N g
)**g h
)**h i
)**i j
{++ 
data// 
=// 
sr// !
.//! "
ReadLine//" *
(//* +
)//+ ,
;//, -
}00 
}11 
}22 
catch33 
(33 
IOException33 
exceptIO33 '
)33' (
{44 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptIO552 :
,55: ;
$str55< W
)55W X
;55X Y
}66 
}77 	

Dictionary88 
<88 
int88 
,88 
string88 
>88 
dataDictionary88 -
=88. /
new880 3

Dictionary884 >
<88> ?
int88? B
,88B C
string88C I
>88I J
(88J K
)88K L
;88L M
dataDictionary99 
.99 
Add99 
(99 
$num99 
,99 
data99 "
)99" #
;99# $
dataDictionary:: 
.:: 
Add:: 
(:: 
$num:: 
,:: 
data:: "
)::" #
;::# $
dataDictionary;; 
.;; 
Add;; 
(;; 
$num;; 
,;; 
data;; "
);;" #
;;;# $I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_74b<< E
.<<E F
BadSink<<F M
(<<M N
dataDictionary<<N \
)<<^ _
;<<_ `
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
GoodB2GCC 
(CC 
)CC 
;CC 
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
)GG  !
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK 

DictionaryLL 
<LL 
intLL 
,LL 
stringLL 
>LL 
dataDictionaryLL -
=LL. /
newLL0 3

DictionaryLL4 >
<LL> ?
intLL? B
,LLB C
stringLLC I
>LLI J
(LLJ K
)LLK L
;LLL M
dataDictionaryMM 
.MM 
AddMM 
(MM 
$numMM 
,MM 
dataMM "
)MM" #
;MM# $
dataDictionaryNN 
.NN 
AddNN 
(NN 
$numNN 
,NN 
dataNN "
)NN" #
;NN# $
dataDictionaryOO 
.OO 
AddOO 
(OO 
$numOO 
,OO 
dataOO "
)OO" #
;OO# $I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_74bPP E
.PPE F
GoodG2BSinkPPF Q
(PPQ R
dataDictionaryPPR `
)PPb c
;PPc d
}QQ 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
)TT  !
{UU 
stringVV 
dataVV 
;VV 
dataWW 
=WW 
$strWW 
;WW 
{YY 	
tryZZ 
{[[ 
using\\ 
(\\ 
	WebClient\\  
client\\! '
=\\( )
new\\* -
	WebClient\\. 7
(\\7 8
)\\8 9
)\\9 :
{]] 
using^^ 
(^^ 
StreamReader^^ '
sr^^( *
=^^+ ,
new^^- 0
StreamReader^^1 =
(^^= >
client^^> D
.^^D E
OpenRead^^E M
(^^M N
$str^^N g
)^^g h
)^^h i
)^^i j
{__ 
datacc 
=cc 
srcc !
.cc! "
ReadLinecc" *
(cc* +
)cc+ ,
;cc, -
}dd 
}ee 
}ff 
catchgg 
(gg 
IOExceptiongg 
exceptIOgg '
)gg' (
{hh 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptIOii2 :
,ii: ;
$strii< W
)iiW X
;iiX Y
}jj 
}kk 	

Dictionaryll 
<ll 
intll 
,ll 
stringll 
>ll 
dataDictionaryll -
=ll. /
newll0 3

Dictionaryll4 >
<ll> ?
intll? B
,llB C
stringllC I
>llI J
(llJ K
)llK L
;llL M
dataDictionarymm 
.mm 
Addmm 
(mm 
$nummm 
,mm 
datamm "
)mm" #
;mm# $
dataDictionarynn 
.nn 
Addnn 
(nn 
$numnn 
,nn 
datann "
)nn" #
;nn# $
dataDictionaryoo 
.oo 
Addoo 
(oo 
$numoo 
,oo 
dataoo "
)oo" #
;oo# $I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_74bpp E
.ppE F
GoodB2GSinkppF Q
(ppQ R
dataDictionaryppR `
)ppb c
;ppc d
}qq 
}ss 
}tt È
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_74b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_74b C
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
string. 4
>4 5
dataDictionary6 D
)E F
{ 
string 
data 
= 
dataDictionary $
[$ %
$num% &
]& '
;' (
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. #
(..# $

Dictionary..$ .
<... /
int../ 2
,..2 3
string..3 9
>..9 :
dataDictionary..; I
)..J K
{// 
string00 
data00 
=00 
dataDictionary00 $
[00$ %
$num00% &
]00& '
;00' (
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

Dictionary==# -
<==- .
int==. 1
,==1 2
string==2 8
>==8 9
dataDictionary==: H
)==I J
{>> 
string?? 
data?? 
=?? 
dataDictionary?? $
[??$ %
$num??% &
]??& '
;??' (
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ÷J
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_75a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_75a C
:D E
AbstractTestCaseF V
{ 
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 	
try'' 
{(( 
using)) 
()) 
	WebClient))  
client))! '
=))( )
new))* -
	WebClient)). 7
())7 8
)))8 9
)))9 :
{** 
using++ 
(++ 
StreamReader++ '
sr++( *
=+++ ,
new++- 0
StreamReader++1 =
(++= >
client++> D
.++D E
OpenRead++E M
(++M N
$str++N g
)++g h
)++h i
)++i j
{,, 
data00 
=00 
sr00 !
.00! "
ReadLine00" *
(00* +
)00+ ,
;00, -
}11 
}22 
}33 
catch44 
(44 
IOException44 
exceptIO44 '
)44' (
{55 
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 "
.66" #
LogLevel66# +
.66+ ,
Warn66, 0
,660 1
exceptIO662 :
,66: ;
$str66< W
)66W X
;66X Y
}77 
}88 	
byte:: 
[:: 
]:: 
dataSerialized:: 
=:: 
null::  $
;::$ %
try;; 
{<< 	
BinaryFormatter== 
bf== 
===  
new==! $
BinaryFormatter==% 4
(==4 5
)==5 6
;==6 7
using>> 
(>> 
var>> 
ms>> 
=>> 
new>> 
MemoryStream>>  ,
(>>, -
)>>- .
)>>. /
{?? 
bf@@ 
.@@ 
	Serialize@@ 
(@@ 
ms@@ 
,@@  
data@@! %
)@@% &
;@@& '
dataSerializedAA 
=AA  
msAA! #
.AA# $
ToArrayAA$ +
(AA+ ,
)AA, -
;AA- .
}BB I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_75bCC I
.CCI J
BadSinkCCJ Q
(CCQ R
dataSerializedCCR `
)CCb c
;CCc d
}DD 	
catchEE 
(EE "
SerializationExceptionEE %
exceptSerializeEE& 5
)EE5 6
{FF 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
$strGG. X
,GGX Y
exceptSerializeGGZ i
)GGi j
;GGj k
}HH 	
}II 
publicLL 

overrideLL 
voidLL 
GoodLL 
(LL 
)LL 
{MM 
GoodG2BNN 
(NN 
)NN 
;NN 
GoodB2GOO 
(OO 
)OO 
;OO 
}PP 
privateSS 
staticSS 
voidSS 
GoodG2BSS 
(SS  
)SS  !
{TT 
stringUU 
dataUU 
;UU 
dataVV 
=VV 
$strVV 
;VV 
{XX 	
tryYY 
{ZZ 
using[[ 
([[ 
	WebClient[[  
client[[! '
=[[( )
new[[* -
	WebClient[[. 7
([[7 8
)[[8 9
)[[9 :
{\\ 
using]] 
(]] 
StreamReader]] '
sr]]( *
=]]+ ,
new]]- 0
StreamReader]]1 =
(]]= >
client]]> D
.]]D E
OpenRead]]E M
(]]M N
$str]]N g
)]]g h
)]]h i
)]]i j
{^^ 
databb 
=bb 
srbb !
.bb! "
ReadLinebb" *
(bb* +
)bb+ ,
;bb, -
}cc 
}dd 
}ee 
catchff 
(ff 
IOExceptionff 
exceptIOff '
)ff' (
{gg 
IOhh 
.hh 
Loggerhh 
.hh 
Loghh 
(hh 
NLoghh "
.hh" #
LogLevelhh# +
.hh+ ,
Warnhh, 0
,hh0 1
exceptIOhh2 :
,hh: ;
$strhh< W
)hhW X
;hhX Y
}ii 
}jj 	
bytell 
[ll 
]ll 
dataSerializedll 
=ll 
nullll  $
;ll$ %
trymm 
{nn 	
BinaryFormatteroo 
bfoo 
=oo  
newoo! $
BinaryFormatteroo% 4
(oo4 5
)oo5 6
;oo6 7
usingpp 
(pp 
varpp 
mspp 
=pp 
newpp 
MemoryStreampp  ,
(pp, -
)pp- .
)pp. /
{qq 
bfrr 
.rr 
	Serializerr 
(rr 
msrr 
,rr  
datarr! %
)rr% &
;rr& '
dataSerializedss 
=ss  
msss! #
.ss# $
ToArrayss$ +
(ss+ ,
)ss, -
;ss- .
}tt I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_75buu I
.uuI J
GoodG2BSinkuuJ U
(uuU V
dataSerializeduuV d
)uuf g
;uug h
}vv 	
catchww 
(ww "
SerializationExceptionww %
exceptSerializeww& 5
)ww5 6
{xx 	
IOyy 
.yy 
Loggeryy 
.yy 
Logyy 
(yy 
NLogyy 
.yy 
LogLevelyy '
.yy' (
Warnyy( ,
,yy, -
$stryy. X
,yyX Y
exceptSerializeyyZ i
)yyi j
;yyj k
}zz 	
}{{ 
private~~ 
static~~ 
void~~ 
GoodB2G~~ 
(~~  
)~~  !
{ 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
{
 	
try
 
{
 
using
 
(
 
	WebClient
  
client
! '
=
( )
new
* -
	WebClient
. 7
(
7 8
)
8 9
)
9 :
{
 
using
 
(
 
StreamReader
 '
sr
( *
=
+ ,
new
- 0
StreamReader
1 =
(
= >
client
> D
.
D E
OpenRead
E M
(
M N
$str
N g
)
g h
)
h i
)
i j
{
 
data
 
=
 
sr
 !
.
! "
ReadLine
" *
(
* +
)
+ ,
;
, -
}
 
}
 
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
}
 	
byte
 
[
 
]
 
dataSerialized
 
=
 
null
  $
;
$ %
try
 
{
 	
BinaryFormatter
 
bf
 
=
  
new
! $
BinaryFormatter
% 4
(
4 5
)
5 6
;
6 7
using
 
(
 
var
 
ms
 
=
 
new
 
MemoryStream
  ,
(
, -
)
- .
)
. /
{
 
bf
 
.
 
	Serialize
 
(
 
ms
 
,
  
data
! %
)
% &
;
& '
dataSerialized
 
=
  
ms
! #
.
# $
ToArray
$ +
(
+ ,
)
, -
;
- .
}
 K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_75b
   I
.
  I J
GoodB2GSink
  J U
(
  U V
dataSerialized
  V d
)
  f g
;
  g h
}
¡¡ 	
catch
¢¢ 
(
¢¢ $
SerializationException
¢¢ %
exceptSerialize
¢¢& 5
)
¢¢5 6
{
££ 	
IO
¤¤ 
.
¤¤ 
Logger
¤¤ 
.
¤¤ 
Log
¤¤ 
(
¤¤ 
NLog
¤¤ 
.
¤¤ 
LogLevel
¤¤ '
.
¤¤' (
Warn
¤¤( ,
,
¤¤, -
$str
¤¤. X
,
¤¤X Y
exceptSerialize
¤¤Z i
)
¤¤i j
;
¤¤j k
}
¥¥ 	
}
¦¦ 
}¨¨ 
}©© ä<
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_75b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_75b C
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
string## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
string)) 
))) 
binForm)) &
.))& '
Deserialize))' 2
())2 3
	memStream))3 <
)))< =
;))= >
}** 
try++ 
{,, 
int-- 
value-- 
=-- 
int-- 
.--  
Parse--  %
(--% &
data--& *
)--* +
;--+ ,
}.. 
catch// 
(// 
FormatException// "
exceptNumberFormat//# 5
)//5 6
{00 
IO22 
.22 
Logger22 
.22 
Log22 
(22 
NLog22 "
.22" #
LogLevel22# +
.22+ ,
Warn22, 0
,220 1
exceptNumberFormat222 D
,22D E
$str22F `
+22a b
data22c g
)22g h
;22h i
}33 
}44 	
catch55 
(55 "
SerializationException55 %
exceptSerialize55& 5
)555 6
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. Y
,77Y Z
exceptSerialize77[ j
)77j k
;77k l
}88 	
}99 
public>> 

static>> 
void>> 
GoodG2BSink>> "
(>>" #
byte>># '
[>>' (
]>>( )
dataSerialized>>* 8
)>>9 :
{?? 
try@@ 
{AA 	
stringBB 
dataBB 
;BB 
varCC 
binFormCC 
=CC 
newCC 
BinaryFormatterCC -
(CC- .
)CC. /
;CC/ 0
usingDD 
(DD 
varDD 
	memStreamDD  
=DD! "
newDD# &
MemoryStreamDD' 3
(DD3 4
)DD4 5
)DD5 6
{EE 
	memStreamFF 
.FF 
WriteFF 
(FF  
dataSerializedFF  .
,FF. /
$numFF0 1
,FF1 2
dataSerializedFF3 A
.FFA B
LengthFFB H
)FFH I
;FFI J
	memStreamGG 
.GG 
SeekGG 
(GG 
$numGG  
,GG  !

SeekOriginGG" ,
.GG, -
BeginGG- 2
)GG2 3
;GG3 4
dataHH 
=HH 
(HH 
stringHH 
)HH 
binFormHH &
.HH& '
DeserializeHH' 2
(HH2 3
	memStreamHH3 <
)HH< =
;HH= >
}II 
tryJJ 
{KK 
intLL 
valueLL 
=LL 
intLL 
.LL  
ParseLL  %
(LL% &
dataLL& *
)LL* +
;LL+ ,
}MM 
catchNN 
(NN 
FormatExceptionNN "
exceptNumberFormatNN# 5
)NN5 6
{OO 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptNumberFormatQQ2 D
,QQD E
$strQQF `
+QQa b
dataQQc g
)QQg h
;QQh i
}RR 
}SS 	
catchTT 
(TT "
SerializationExceptionTT %
exceptSerializeTT& 5
)TT5 6
{UU 	
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV 
.VV 
LogLevelVV '
.VV' (
WarnVV( ,
,VV, -
$strVV. Y
,VVY Z
exceptSerializeVV[ j
)VVj k
;VVk l
}WW 	
}XX 
public[[ 

static[[ 
void[[ 
GoodB2GSink[[ "
([[" #
byte[[# '
[[[' (
][[( )
dataSerialized[[* 8
)[[9 :
{\\ 
try]] 
{^^ 	
string__ 
data__ 
;__ 
var`` 
binForm`` 
=`` 
new`` 
BinaryFormatter`` -
(``- .
)``. /
;``/ 0
usingaa 
(aa 
varaa 
	memStreamaa  
=aa! "
newaa# &
MemoryStreamaa' 3
(aa3 4
)aa4 5
)aa5 6
{bb 
	memStreamcc 
.cc 
Writecc 
(cc  
dataSerializedcc  .
,cc. /
$numcc0 1
,cc1 2
dataSerializedcc3 A
.ccA B
LengthccB H
)ccH I
;ccI J
	memStreamdd 
.dd 
Seekdd 
(dd 
$numdd  
,dd  !

SeekOrigindd" ,
.dd, -
Begindd- 2
)dd2 3
;dd3 4
dataee 
=ee 
(ee 
stringee 
)ee 
binFormee &
.ee& '
Deserializeee' 2
(ee2 3
	memStreamee3 <
)ee< =
;ee= >
}ff 
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF j
+nnk l
exceptNumberFormatnnm 
)	nn 
;
nn 
}oo 
}pp 	
catchqq 
(qq "
SerializationExceptionqq %
exceptSerializeqq& 5
)qq5 6
{rr 	
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss 
.ss 
LogLevelss '
.ss' (
Warnss( ,
,ss, -
$strss. Y
,ssY Z
exceptSerializess[ j
)ssj k
;ssk l
}tt 	
}uu 
}ww 
}xx è&
ÊC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_81a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class I
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_81a C
:D E
AbstractTestCaseF V
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 	
try%% 
{&& 
using'' 
('' 
	WebClient''  
client''! '
=''( )
new''* -
	WebClient''. 7
(''7 8
)''8 9
)''9 :
{(( 
using)) 
()) 
StreamReader)) '
sr))( *
=))+ ,
new))- 0
StreamReader))1 =
())= >
client))> D
.))D E
OpenRead))E M
())M N
$str))N g
)))g h
)))h i
)))i j
{** 
data.. 
=.. 
sr.. !
...! "
ReadLine.." *
(..* +
)..+ ,
;.., -
}// 
}00 
}11 
catch22 
(22 
IOException22 
exceptIO22 '
)22' (
{33 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptIO442 :
,44: ;
$str44< W
)44W X
;44X Y
}55 
}66 	M
ACWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_base77 I

baseObject77J T
=77U V
new77W ZM
@CWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_bad	77[ 
(
77 
)
77 
;
77 

baseObject88 
.88 
Action88 
(88 
data88 
)88  
;88  !
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
)<< 
{== 
GoodG2B>> 
(>> 
)>> 
;>> 
GoodB2G?? 
(?? 
)?? 
;?? 
}@@ 
privateCC 
voidCC 
GoodG2BCC 
(CC 
)CC 
{DD 
stringEE 
dataEE 
;EE 
dataGG 
=GG 
$strGG 
;GG M
ACWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_baseHH I

baseObjectHHJ T
=HHU V
newHHW ZQ
DCWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_goodG2B	HH[ 
(
HH  
)
HH  ¡
;
HH¡ ¢

baseObjectII 
.II 
ActionII 
(II 
dataII 
)II  
;II  !
}JJ 
privateMM 
voidMM 
GoodB2GMM 
(MM 
)MM 
{NN 
stringOO 
dataOO 
;OO 
dataPP 
=PP 
$strPP 
;PP 
{RR 	
trySS 
{TT 
usingUU 
(UU 
	WebClientUU  
clientUU! '
=UU( )
newUU* -
	WebClientUU. 7
(UU7 8
)UU8 9
)UU9 :
{VV 
usingWW 
(WW 
StreamReaderWW '
srWW( *
=WW+ ,
newWW- 0
StreamReaderWW1 =
(WW= >
clientWW> D
.WWD E
OpenReadWWE M
(WWM N
$strWWN g
)WWg h
)WWh i
)WWi j
{XX 
data\\ 
=\\ 
sr\\ !
.\\! "
ReadLine\\" *
(\\* +
)\\+ ,
;\\, -
}]] 
}^^ 
}__ 
catch`` 
(`` 
IOException`` 
exceptIO`` '
)``' (
{aa 
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb "
.bb" #
LogLevelbb# +
.bb+ ,
Warnbb, 0
,bb0 1
exceptIObb2 :
,bb: ;
$strbb< W
)bbW X
;bbX Y
}cc 
}dd 	M
ACWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_baseee I

baseObjecteeJ T
=eeU V
neweeW ZQ
DCWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_goodB2G	ee[ 
(
ee  
)
ee  ¡
;
ee¡ ¢

baseObjectff 
.ff 
Actionff 
(ff 
dataff 
)ff  
;ff  !
}gg 
}ii 
}jj 
ÍC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_bad.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class L
@CWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_bad F
:G HN
ACWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_base	I 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
}(( 
})) 
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_base.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
abstract 
class	 M
ACWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_base P
{ 
public 

abstract 
void 
Action 
(  
string  &
data' +
), -
;- .
} 
} ª
ÑC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_goodB2G.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class P
DCWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_goodB2G J
:K LN
ACWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_base	M 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B f
+&&g h
exceptNumberFormat&&i {
)&&{ |
;&&| }
}'' 	
}(( 
})) 
}** 
ÑC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_goodG2B.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class P
DCWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_goodG2B J
:K LN
ACWE117_Improper_Output_Neutralization_for_Logs__NetClient_81_base	M 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
})) 
}** Ý!
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_01.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_01 G
:H I
AbstractTestCaseWebJ ]
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data!! 
=!! 
req!! 
.!! 
Params!! 
.!! 
Get!! 
(!! 
$str!! $
)!!$ %
;!!% &
try"" 
{## 	
int$$ 
value$$ 
=$$ 
int$$ 
.$$ 
Parse$$ !
($$! "
data$$" &
)$$& '
;$$' (
}%% 	
catch&& 
(&& 
FormatException&& 
exceptNumberFormat&& 1
)&&1 2
{'' 	
IO)) 
.)) 
Logger)) 
.)) 
Log)) 
()) 
NLog)) 
.)) 
LogLevel)) '
.))' (
Warn))( ,
,)), -
exceptNumberFormat)). @
,))@ A
$str))B \
+))] ^
data))_ c
)))c d
;))d e
}** 	
}++ 
public.. 

override.. 
void.. 
Good.. 
(.. 
HttpRequest.. )
req..* -
,..- .
HttpResponse../ ;
resp..< @
)..@ A
{// 
GoodG2B00 
(00 
req00 
,00 
resp00 
)00 
;00 
GoodB2G11 
(11 
req11 
,11 
resp11 
)11 
;11 
}22 
private55 
void55 
GoodG2B55 
(55 
HttpRequest55 $
req55% (
,55( )
HttpResponse55* 6
resp557 ;
)55; <
{66 
string77 
data77 
;77 
data99 
=99 
$str99 
;99 
try:: 
{;; 	
int<< 
value<< 
=<< 
int<< 
.<< 
Parse<< !
(<<! "
data<<" &
)<<& '
;<<' (
}== 	
catch>> 
(>> 
FormatException>> 
exceptNumberFormat>> 1
)>>1 2
{?? 	
IOAA 
.AA 
LoggerAA 
.AA 
LogAA 
(AA 
NLogAA 
.AA 
LogLevelAA '
.AA' (
WarnAA( ,
,AA, -
exceptNumberFormatAA. @
,AA@ A
$strAAB \
+AA] ^
dataAA_ c
)AAc d
;AAd e
}BB 	
}CC 
privateFF 
voidFF 
GoodB2GFF 
(FF 
HttpRequestFF $
reqFF% (
,FF( )
HttpResponseFF* 6
respFF7 ;
)FF; <
{GG 
stringHH 
dataHH 
;HH 
dataJJ 
=JJ 
reqJJ 
.JJ 
ParamsJJ 
.JJ 
GetJJ 
(JJ 
$strJJ $
)JJ$ %
;JJ% &
tryKK 
{LL 	
intMM 
valueMM 
=MM 
intMM 
.MM 
ParseMM !
(MM! "
dataMM" &
)MM& '
;MM' (
}NN 	
catchOO 
(OO 
FormatExceptionOO 
exceptNumberFormatOO 1
)OO1 2
{PP 	
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR 
.RR 
LogLevelRR '
.RR' (
WarnRR( ,
,RR, -
exceptNumberFormatRR. @
,RR@ A
$strRRB f
+RRg h
exceptNumberFormatRRi {
)RR{ |
;RR| }
}SS 	
}TT 
}VV 
}WW ÒD
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_02.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_02 G
:H I
AbstractTestCaseWebJ ]
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
true   
)   
{!! 	
data## 
=## 
req## 
.## 
Params## 
.## 
Get## !
(##! "
$str##" (
)##( )
;##) *
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++ 
true++ 
)++ 
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
HttpRequest;; %
req;;& )
,;;) *
HttpResponse;;+ 7
resp;;8 <
);;< =
{<< 
string== 
data== 
;== 
if>> 

(>> 
false>> 
)>> 
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
trueII 
)II 
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
HttpRequestXX %
reqXX& )
,XX) *
HttpResponseXX+ 7
respXX8 <
)XX< =
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
true[[ 
)[[ 
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
trueff 
)ff 
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
truexx 
)xx 
{yy 	
data{{ 
={{ 
req{{ 
.{{ 
Params{{ 
.{{ 
Get{{ !
({{! "
$str{{" (
){{( )
;{{) *
}|| 	
else}} 
{~~ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
false
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
 
true
 
)
 
{
 	
data
 
=
 
req
 
.
 
Params
 
.
 
Get
 !
(
! "
$str
" (
)
( )
;
) *
}
 	
else
 
{
   	
data
££ 
=
££ 
null
££ 
;
££ 
}
¤¤ 	
if
¥¥ 

(
¥¥ 
true
¥¥ 
)
¥¥ 
{
¦¦ 	
try
§§ 
{
¨¨ 
int
©© 
value
©© 
=
©© 
int
©© 
.
©©  
Parse
©©  %
(
©©% &
data
©©& *
)
©©* +
;
©©+ ,
}
ªª 
catch
«« 
(
«« 
FormatException
«« " 
exceptNumberFormat
««# 5
)
««5 6
{
¬¬ 
IO
®® 
.
®® 
Logger
®® 
.
®® 
Log
®® 
(
®® 
NLog
®® "
.
®®" #
LogLevel
®®# +
.
®®+ ,
Warn
®®, 0
,
®®0 1 
exceptNumberFormat
®®2 D
,
®®D E
$str
®®F j
+
®®k l 
exceptNumberFormat
®®m 
)®® 
;®® 
}
¯¯ 
}
°° 	
}
±± 
public
³³ 

override
³³ 
void
³³ 
Good
³³ 
(
³³ 
HttpRequest
³³ )
req
³³* -
,
³³- .
HttpResponse
³³/ ;
resp
³³< @
)
³³@ A
{
´´ 
GoodG2B1
µµ 
(
µµ 
req
µµ 
,
µµ 
resp
µµ 
)
µµ 
;
µµ 
GoodG2B2
¶¶ 
(
¶¶ 
req
¶¶ 
,
¶¶ 
resp
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G1
·· 
(
·· 
req
·· 
,
·· 
resp
·· 
)
·· 
;
·· 
GoodB2G2
¸¸ 
(
¸¸ 
req
¸¸ 
,
¸¸ 
resp
¸¸ 
)
¸¸ 
;
¸¸ 
}
¹¹ 
}»» 
}¼¼ °G
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_03.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_03 G
:H I
AbstractTestCaseWebJ ]
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
$num   
==   
$num   
)   
{!! 	
data## 
=## 
req## 
.## 
Params## 
.## 
Get## !
(##! "
$str##" (
)##( )
;##) *
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++ 
$num++ 
==++ 
$num++ 
)++ 
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
HttpRequest;; %
req;;& )
,;;) *
HttpResponse;;+ 7
resp;;8 <
);;< =
{<< 
string== 
data== 
;== 
if>> 

(>> 
$num>> 
!=>> 
$num>> 
)>> 
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
$numII 
==II 
$numII 
)II 
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
HttpRequestXX %
reqXX& )
,XX) *
HttpResponseXX+ 7
respXX8 <
)XX< =
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
$num[[ 
==[[ 
$num[[ 
)[[ 
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
$numff 
==ff 
$numff 
)ff 
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
$numxx 
==xx 
$numxx 
)xx 
{yy 	
data{{ 
={{ 
req{{ 
.{{ 
Params{{ 
.{{ 
Get{{ !
({{! "
$str{{" (
){{( )
;{{) *
}|| 	
else}} 
{~~ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
$num
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
data
 
=
 
req
 
.
 
Params
 
.
 
Get
 !
(
! "
$str
" (
)
( )
;
) *
}
 	
else
 
{
   	
data
££ 
=
££ 
null
££ 
;
££ 
}
¤¤ 	
if
¥¥ 

(
¥¥ 
$num
¥¥ 
==
¥¥ 
$num
¥¥ 
)
¥¥ 
{
¦¦ 	
try
§§ 
{
¨¨ 
int
©© 
value
©© 
=
©© 
int
©© 
.
©©  
Parse
©©  %
(
©©% &
data
©©& *
)
©©* +
;
©©+ ,
}
ªª 
catch
«« 
(
«« 
FormatException
«« " 
exceptNumberFormat
««# 5
)
««5 6
{
¬¬ 
IO
®® 
.
®® 
Logger
®® 
.
®® 
Log
®® 
(
®® 
NLog
®® "
.
®®" #
LogLevel
®®# +
.
®®+ ,
Warn
®®, 0
,
®®0 1 
exceptNumberFormat
®®2 D
,
®®D E
$str
®®F j
+
®®k l 
exceptNumberFormat
®®m 
)®® 
;®® 
}
¯¯ 
}
°° 	
}
±± 
public
³³ 

override
³³ 
void
³³ 
Good
³³ 
(
³³ 
HttpRequest
³³ )
req
³³* -
,
³³- .
HttpResponse
³³/ ;
resp
³³< @
)
³³@ A
{
´´ 
GoodG2B1
µµ 
(
µµ 
req
µµ 
,
µµ 
resp
µµ 
)
µµ 
;
µµ 
GoodG2B2
¶¶ 
(
¶¶ 
req
¶¶ 
,
¶¶ 
resp
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G1
·· 
(
·· 
req
·· 
,
·· 
resp
·· 
)
·· 
;
·· 
GoodB2G2
¸¸ 
(
¸¸ 
req
¸¸ 
,
¸¸ 
resp
¸¸ 
)
¸¸ 
;
¸¸ 
}
¹¹ 
}»» 
}¼¼ H
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_04.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_04 G
:H I
AbstractTestCaseWebJ ]
{ 
private!! 
const!! 
bool!! 
PRIVATE_CONST_TRUE!! )
=!!* +
true!!, 0
;!!0 1
private"" 
const"" 
bool"" 
PRIVATE_CONST_FALSE"" *
=""+ ,
false""- 2
;""2 3
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
HttpRequest$$ (
req$$) ,
,$$, -
HttpResponse$$. :
resp$$; ?
)$$? @
{%% 
string&& 
data&& 
;&& 
if'' 

('' 
PRIVATE_CONST_TRUE'' 
)'' 
{(( 	
data** 
=** 
req** 
.** 
Params** 
.** 
Get** !
(**! "
$str**" (
)**( )
;**) *
}++ 	
else,, 
{-- 	
data00 
=00 
null00 
;00 
}11 	
if22 

(22 
PRIVATE_CONST_TRUE22 
)22 
{33 	
try44 
{55 
int66 
value66 
=66 
int66 
.66  
Parse66  %
(66% &
data66& *
)66* +
;66+ ,
}77 
catch88 
(88 
FormatException88 "
exceptNumberFormat88# 5
)885 6
{99 
IO;; 
.;; 
Logger;; 
.;; 
Log;; 
(;; 
NLog;; "
.;;" #
LogLevel;;# +
.;;+ ,
Warn;;, 0
,;;0 1
exceptNumberFormat;;2 D
,;;D E
$str;;F `
+;;a b
data;;c g
);;g h
;;;h i
}<< 
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
stringDD 
dataDD 
;DD 
ifEE 

(EE 
PRIVATE_CONST_FALSEEE 
)EE  
{FF 	
dataII 
=II 
nullII 
;II 
}JJ 	
elseKK 
{LL 	
dataNN 
=NN 
$strNN 
;NN 
}OO 	
ifPP 

(PP 
PRIVATE_CONST_TRUEPP 
)PP 
{QQ 	
tryRR 
{SS 
intTT 
valueTT 
=TT 
intTT 
.TT  
ParseTT  %
(TT% &
dataTT& *
)TT* +
;TT+ ,
}UU 
catchVV 
(VV 
FormatExceptionVV "
exceptNumberFormatVV# 5
)VV5 6
{WW 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
exceptNumberFormatYY2 D
,YYD E
$strYYF `
+YYa b
dataYYc g
)YYg h
;YYh i
}ZZ 
}[[ 	
}\\ 
private__ 
void__ 
GoodG2B2__ 
(__ 
HttpRequest__ %
req__& )
,__) *
HttpResponse__+ 7
resp__8 <
)__< =
{`` 
stringaa 
dataaa 
;aa 
ifbb 

(bb 
PRIVATE_CONST_TRUEbb 
)bb 
{cc 	
dataee 
=ee 
$stree 
;ee 
}ff 	
elsegg 
{hh 	
datakk 
=kk 
nullkk 
;kk 
}ll 	
ifmm 

(mm 
PRIVATE_CONST_TRUEmm 
)mm 
{nn 	
tryoo 
{pp 
intqq 
valueqq 
=qq 
intqq 
.qq  
Parseqq  %
(qq% &
dataqq& *
)qq* +
;qq+ ,
}rr 
catchss 
(ss 
FormatExceptionss "
exceptNumberFormatss# 5
)ss5 6
{tt 
IOvv 
.vv 
Loggervv 
.vv 
Logvv 
(vv 
NLogvv "
.vv" #
LogLevelvv# +
.vv+ ,
Warnvv, 0
,vv0 1
exceptNumberFormatvv2 D
,vvD E
$strvvF `
+vva b
datavvc g
)vvg h
;vvh i
}ww 
}xx 	
}yy 
private|| 
void|| 
GoodB2G1|| 
(|| 
HttpRequest|| %
req||& )
,||) *
HttpResponse||+ 7
resp||8 <
)||< =
{}} 
string~~ 
data~~ 
;~~ 
if 

( 
PRIVATE_CONST_TRUE 
) 
{
 	
data
 
=
 
req
 
.
 
Params
 
.
 
Get
 !
(
! "
$str
" (
)
( )
;
) *
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 !
PRIVATE_CONST_FALSE
 
)
  
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
   
data
   
;
   
if
¡¡ 

(
¡¡  
PRIVATE_CONST_TRUE
¡¡ 
)
¡¡ 
{
¢¢ 	
data
¤¤ 
=
¤¤ 
req
¤¤ 
.
¤¤ 
Params
¤¤ 
.
¤¤ 
Get
¤¤ !
(
¤¤! "
$str
¤¤" (
)
¤¤( )
;
¤¤) *
}
¥¥ 	
else
¦¦ 
{
§§ 	
data
ªª 
=
ªª 
null
ªª 
;
ªª 
}
«« 	
if
¬¬ 

(
¬¬  
PRIVATE_CONST_TRUE
¬¬ 
)
¬¬ 
{
­­ 	
try
®® 
{
¯¯ 
int
°° 
value
°° 
=
°° 
int
°° 
.
°°  
Parse
°°  %
(
°°% &
data
°°& *
)
°°* +
;
°°+ ,
}
±± 
catch
²² 
(
²² 
FormatException
²² " 
exceptNumberFormat
²²# 5
)
²²5 6
{
³³ 
IO
µµ 
.
µµ 
Logger
µµ 
.
µµ 
Log
µµ 
(
µµ 
NLog
µµ "
.
µµ" #
LogLevel
µµ# +
.
µµ+ ,
Warn
µµ, 0
,
µµ0 1 
exceptNumberFormat
µµ2 D
,
µµD E
$str
µµF j
+
µµk l 
exceptNumberFormat
µµm 
)µµ 
;µµ 
}
¶¶ 
}
·· 	
}
¸¸ 
public
ºº 

override
ºº 
void
ºº 
Good
ºº 
(
ºº 
HttpRequest
ºº )
req
ºº* -
,
ºº- .
HttpResponse
ºº/ ;
resp
ºº< @
)
ºº@ A
{
»» 
GoodG2B1
¼¼ 
(
¼¼ 
req
¼¼ 
,
¼¼ 
resp
¼¼ 
)
¼¼ 
;
¼¼ 
GoodG2B2
½½ 
(
½½ 
req
½½ 
,
½½ 
resp
½½ 
)
½½ 
;
½½ 
GoodB2G1
¾¾ 
(
¾¾ 
req
¾¾ 
,
¾¾ 
resp
¾¾ 
)
¾¾ 
;
¾¾ 
GoodB2G2
¿¿ 
(
¿¿ 
req
¿¿ 
,
¿¿ 
resp
¿¿ 
)
¿¿ 
;
¿¿ 
}
ÀÀ 
}ÂÂ 
}ÃÃ G
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_05.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_05 G
:H I
AbstractTestCaseWebJ ]
{ 
private   
bool   
privateTrue   
=   
true   #
;  # $
private!! 
bool!! 
privateFalse!! 
=!! 
false!!  %
;!!% &
public## 

override## 
void## 
Bad## 
(## 
HttpRequest## (
req##) ,
,##, -
HttpResponse##. :
resp##; ?
)##? @
{$$ 
string%% 
data%% 
;%% 
if&& 

(&& 
privateTrue&& 
)&& 
{'' 	
data)) 
=)) 
req)) 
.)) 
Params)) 
.)) 
Get)) !
())! "
$str))" (
)))( )
;))) *
}** 	
else++ 
{,, 	
data// 
=// 
null// 
;// 
}00 	
if11 

(11 
privateTrue11 
)11 
{22 	
try33 
{44 
int55 
value55 
=55 
int55 
.55  
Parse55  %
(55% &
data55& *
)55* +
;55+ ,
}66 
catch77 
(77 
FormatException77 "
exceptNumberFormat77# 5
)775 6
{88 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptNumberFormat::2 D
,::D E
$str::F `
+::a b
data::c g
)::g h
;::h i
};; 
}<< 	
}== 
privateAA 
voidAA 
GoodG2B1AA 
(AA 
HttpRequestAA %
reqAA& )
,AA) *
HttpResponseAA+ 7
respAA8 <
)AA< =
{BB 
stringCC 
dataCC 
;CC 
ifDD 

(DD 
privateFalseDD 
)DD 
{EE 	
dataHH 
=HH 
nullHH 
;HH 
}II 	
elseJJ 
{KK 	
dataMM 
=MM 
$strMM 
;MM 
}NN 	
ifOO 

(OO 
privateTrueOO 
)OO 
{PP 	
tryQQ 
{RR 
intSS 
valueSS 
=SS 
intSS 
.SS  
ParseSS  %
(SS% &
dataSS& *
)SS* +
;SS+ ,
}TT 
catchUU 
(UU 
FormatExceptionUU "
exceptNumberFormatUU# 5
)UU5 6
{VV 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$strXXF `
+XXa b
dataXXc g
)XXg h
;XXh i
}YY 
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
string`` 
data`` 
;`` 
ifaa 

(aa 
privateTrueaa 
)aa 
{bb 	
datadd 
=dd 
$strdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
nulljj 
;jj 
}kk 	
ifll 

(ll 
privateTruell 
)ll 
{mm 	
trynn 
{oo 
intpp 
valuepp 
=pp 
intpp 
.pp  
Parsepp  %
(pp% &
datapp& *
)pp* +
;pp+ ,
}qq 
catchrr 
(rr 
FormatExceptionrr "
exceptNumberFormatrr# 5
)rr5 6
{ss 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu "
.uu" #
LogLeveluu# +
.uu+ ,
Warnuu, 0
,uu0 1
exceptNumberFormatuu2 D
,uuD E
$struuF `
+uua b
datauuc g
)uug h
;uuh i
}vv 
}ww 	
}xx 
private{{ 
void{{ 
GoodB2G1{{ 
({{ 
HttpRequest{{ %
req{{& )
,{{) *
HttpResponse{{+ 7
resp{{8 <
){{< =
{|| 
string}} 
data}} 
;}} 
if~~ 

(~~ 
privateTrue~~ 
)~~ 
{ 	
data
 
=
 
req
 
.
 
Params
 
.
 
Get
 !
(
! "
$str
" (
)
( )
;
) *
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateFalse
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
   

(
   
privateTrue
   
)
   
{
¡¡ 	
data
££ 
=
££ 
req
££ 
.
££ 
Params
££ 
.
££ 
Get
££ !
(
££! "
$str
££" (
)
££( )
;
££) *
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
data
©© 
=
©© 
null
©© 
;
©© 
}
ªª 	
if
«« 

(
«« 
privateTrue
«« 
)
«« 
{
¬¬ 	
try
­­ 
{
®® 
int
¯¯ 
value
¯¯ 
=
¯¯ 
int
¯¯ 
.
¯¯  
Parse
¯¯  %
(
¯¯% &
data
¯¯& *
)
¯¯* +
;
¯¯+ ,
}
°° 
catch
±± 
(
±± 
FormatException
±± " 
exceptNumberFormat
±±# 5
)
±±5 6
{
²² 
IO
´´ 
.
´´ 
Logger
´´ 
.
´´ 
Log
´´ 
(
´´ 
NLog
´´ "
.
´´" #
LogLevel
´´# +
.
´´+ ,
Warn
´´, 0
,
´´0 1 
exceptNumberFormat
´´2 D
,
´´D E
$str
´´F j
+
´´k l 
exceptNumberFormat
´´m 
)´´ 
;´´ 
}
µµ 
}
¶¶ 	
}
·· 
public
¹¹ 

override
¹¹ 
void
¹¹ 
Good
¹¹ 
(
¹¹ 
HttpRequest
¹¹ )
req
¹¹* -
,
¹¹- .
HttpResponse
¹¹/ ;
resp
¹¹< @
)
¹¹@ A
{
ºº 
GoodG2B1
»» 
(
»» 
req
»» 
,
»» 
resp
»» 
)
»» 
;
»» 
GoodG2B2
¼¼ 
(
¼¼ 
req
¼¼ 
,
¼¼ 
resp
¼¼ 
)
¼¼ 
;
¼¼ 
GoodB2G1
½½ 
(
½½ 
req
½½ 
,
½½ 
resp
½½ 
)
½½ 
;
½½ 
GoodB2G2
¾¾ 
(
¾¾ 
req
¾¾ 
,
¾¾ 
resp
¾¾ 
)
¾¾ 
;
¾¾ 
}
¿¿ 
}ÁÁ 
}ÂÂ áI
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_06.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_06 G
:H I
AbstractTestCaseWebJ ]
{ 
private   
const   
int   
PRIVATE_CONST_FIVE   (
=  ) *
$num  + ,
;  , -
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
string$$ 
data$$ 
;$$ 
if%% 

(%% 
PRIVATE_CONST_FIVE%% 
==%%  
$num%%  !
)%%! "
{&& 	
data(( 
=(( 
req(( 
.(( 
Params(( 
.(( 
Get(( !
(((! "
$str((" (
)((( )
;(() *
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
if00 

(00 
PRIVATE_CONST_FIVE00 
==00  
$num00  !
)00! "
{11 	
try22 
{33 
int44 
value44 
=44 
int44 
.44  
Parse44  %
(44% &
data44& *
)44* +
;44+ ,
}55 
catch66 
(66 
FormatException66 "
exceptNumberFormat66# 5
)665 6
{77 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
exceptNumberFormat992 D
,99D E
$str99F `
+99a b
data99c g
)99g h
;99h i
}:: 
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
stringBB 
dataBB 
;BB 
ifCC 

(CC 
PRIVATE_CONST_FIVECC 
!=CC  
$numCC  !
)CC! "
{DD 	
dataGG 
=GG 
nullGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$strLL 
;LL 
}MM 	
ifNN 

(NN 
PRIVATE_CONST_FIVENN 
==NN  
$numNN  !
)NN! "
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF `
+WWa b
dataWWc g
)WWg h
;WWh i
}XX 
}YY 	
}ZZ 
private]] 
void]] 
GoodG2B2]] 
(]] 
HttpRequest]] %
req]]& )
,]]) *
HttpResponse]]+ 7
resp]]8 <
)]]< =
{^^ 
string__ 
data__ 
;__ 
if`` 

(`` 
PRIVATE_CONST_FIVE`` 
==``  
$num``  !
)``! "
{aa 	
datacc 
=cc 
$strcc 
;cc 
}dd 	
elseee 
{ff 	
dataii 
=ii 
nullii 
;ii 
}jj 	
ifkk 

(kk 
PRIVATE_CONST_FIVEkk 
==kk  
$numkk  !
)kk! "
{ll 	
trymm 
{nn 
intoo 
valueoo 
=oo 
intoo 
.oo  
Parseoo  %
(oo% &
dataoo& *
)oo* +
;oo+ ,
}pp 
catchqq 
(qq 
FormatExceptionqq "
exceptNumberFormatqq# 5
)qq5 6
{rr 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
exceptNumberFormattt2 D
,ttD E
$strttF `
+tta b
datattc g
)ttg h
;tth i
}uu 
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
HttpRequestzz %
reqzz& )
,zz) *
HttpResponsezz+ 7
respzz8 <
)zz< =
{{{ 
string|| 
data|| 
;|| 
if}} 

(}} 
PRIVATE_CONST_FIVE}} 
==}}  
$num}}  !
)}}! "
{~~ 	
data
 
=
 
req
 
.
 
Params
 
.
 
Get
 !
(
! "
$str
" (
)
( )
;
) *
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PRIVATE_CONST_FIVE
 
!=
  
$num
  !
)
! "
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
   	
data
¢¢ 
=
¢¢ 
req
¢¢ 
.
¢¢ 
Params
¢¢ 
.
¢¢ 
Get
¢¢ !
(
¢¢! "
$str
¢¢" (
)
¢¢( )
;
¢¢) *
}
££ 	
else
¤¤ 
{
¥¥ 	
data
¨¨ 
=
¨¨ 
null
¨¨ 
;
¨¨ 
}
©© 	
if
ªª 

(
ªª  
PRIVATE_CONST_FIVE
ªª 
==
ªª  
$num
ªª  !
)
ªª! "
{
«« 	
try
¬¬ 
{
­­ 
int
®® 
value
®® 
=
®® 
int
®® 
.
®®  
Parse
®®  %
(
®®% &
data
®®& *
)
®®* +
;
®®+ ,
}
¯¯ 
catch
°° 
(
°° 
FormatException
°° " 
exceptNumberFormat
°°# 5
)
°°5 6
{
±± 
IO
³³ 
.
³³ 
Logger
³³ 
.
³³ 
Log
³³ 
(
³³ 
NLog
³³ "
.
³³" #
LogLevel
³³# +
.
³³+ ,
Warn
³³, 0
,
³³0 1 
exceptNumberFormat
³³2 D
,
³³D E
$str
³³F j
+
³³k l 
exceptNumberFormat
³³m 
)³³ 
;³³ 
}
´´ 
}
µµ 	
}
¶¶ 
public
¸¸ 

override
¸¸ 
void
¸¸ 
Good
¸¸ 
(
¸¸ 
HttpRequest
¸¸ )
req
¸¸* -
,
¸¸- .
HttpResponse
¸¸/ ;
resp
¸¸< @
)
¸¸@ A
{
¹¹ 
GoodG2B1
ºº 
(
ºº 
req
ºº 
,
ºº 
resp
ºº 
)
ºº 
;
ºº 
GoodG2B2
»» 
(
»» 
req
»» 
,
»» 
resp
»» 
)
»» 
;
»» 
GoodB2G1
¼¼ 
(
¼¼ 
req
¼¼ 
,
¼¼ 
resp
¼¼ 
)
¼¼ 
;
¼¼ 
GoodB2G2
½½ 
(
½½ 
req
½½ 
,
½½ 
resp
½½ 
)
½½ 
;
½½ 
}
¾¾ 
}ÀÀ 
}ÁÁ I
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_07.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_07 G
:H I
AbstractTestCaseWebJ ]
{ 
private   
int   
privateFive   
=   
$num   
;    
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
string$$ 
data$$ 
;$$ 
if%% 

(%% 
privateFive%% 
==%% 
$num%% 
)%% 
{&& 	
data(( 
=(( 
req(( 
.(( 
Params(( 
.(( 
Get(( !
(((! "
$str((" (
)((( )
;(() *
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
if00 

(00 
privateFive00 
==00 
$num00 
)00 
{11 	
try22 
{33 
int44 
value44 
=44 
int44 
.44  
Parse44  %
(44% &
data44& *
)44* +
;44+ ,
}55 
catch66 
(66 
FormatException66 "
exceptNumberFormat66# 5
)665 6
{77 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
exceptNumberFormat992 D
,99D E
$str99F `
+99a b
data99c g
)99g h
;99h i
}:: 
};; 	
}<< 
private@@ 
void@@ 
GoodG2B1@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
stringBB 
dataBB 
;BB 
ifCC 

(CC 
privateFiveCC 
!=CC 
$numCC 
)CC 
{DD 	
dataGG 
=GG 
nullGG 
;GG 
}HH 	
elseII 
{JJ 	
dataLL 
=LL 
$strLL 
;LL 
}MM 	
ifNN 

(NN 
privateFiveNN 
==NN 
$numNN 
)NN 
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF `
+WWa b
dataWWc g
)WWg h
;WWh i
}XX 
}YY 	
}ZZ 
private]] 
void]] 
GoodG2B2]] 
(]] 
HttpRequest]] %
req]]& )
,]]) *
HttpResponse]]+ 7
resp]]8 <
)]]< =
{^^ 
string__ 
data__ 
;__ 
if`` 

(`` 
privateFive`` 
==`` 
$num`` 
)`` 
{aa 	
datacc 
=cc 
$strcc 
;cc 
}dd 	
elseee 
{ff 	
dataii 
=ii 
nullii 
;ii 
}jj 	
ifkk 

(kk 
privateFivekk 
==kk 
$numkk 
)kk 
{ll 	
trymm 
{nn 
intoo 
valueoo 
=oo 
intoo 
.oo  
Parseoo  %
(oo% &
dataoo& *
)oo* +
;oo+ ,
}pp 
catchqq 
(qq 
FormatExceptionqq "
exceptNumberFormatqq# 5
)qq5 6
{rr 
IOtt 
.tt 
Loggertt 
.tt 
Logtt 
(tt 
NLogtt "
.tt" #
LogLeveltt# +
.tt+ ,
Warntt, 0
,tt0 1
exceptNumberFormattt2 D
,ttD E
$strttF `
+tta b
datattc g
)ttg h
;tth i
}uu 
}vv 	
}ww 
privatezz 
voidzz 
GoodB2G1zz 
(zz 
HttpRequestzz %
reqzz& )
,zz) *
HttpResponsezz+ 7
respzz8 <
)zz< =
{{{ 
string|| 
data|| 
;|| 
if}} 

(}} 
privateFive}} 
==}} 
$num}} 
)}} 
{~~ 	
data
 
=
 
req
 
.
 
Params
 
.
 
Get
 !
(
! "
$str
" (
)
( )
;
) *
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateFive
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
   	
data
¢¢ 
=
¢¢ 
req
¢¢ 
.
¢¢ 
Params
¢¢ 
.
¢¢ 
Get
¢¢ !
(
¢¢! "
$str
¢¢" (
)
¢¢( )
;
¢¢) *
}
££ 	
else
¤¤ 
{
¥¥ 	
data
¨¨ 
=
¨¨ 
null
¨¨ 
;
¨¨ 
}
©© 	
if
ªª 

(
ªª 
privateFive
ªª 
==
ªª 
$num
ªª 
)
ªª 
{
«« 	
try
¬¬ 
{
­­ 
int
®® 
value
®® 
=
®® 
int
®® 
.
®®  
Parse
®®  %
(
®®% &
data
®®& *
)
®®* +
;
®®+ ,
}
¯¯ 
catch
°° 
(
°° 
FormatException
°° " 
exceptNumberFormat
°°# 5
)
°°5 6
{
±± 
IO
³³ 
.
³³ 
Logger
³³ 
.
³³ 
Log
³³ 
(
³³ 
NLog
³³ "
.
³³" #
LogLevel
³³# +
.
³³+ ,
Warn
³³, 0
,
³³0 1 
exceptNumberFormat
³³2 D
,
³³D E
$str
³³F j
+
³³k l 
exceptNumberFormat
³³m 
)³³ 
;³³ 
}
´´ 
}
µµ 	
}
¶¶ 
public
¸¸ 

override
¸¸ 
void
¸¸ 
Good
¸¸ 
(
¸¸ 
HttpRequest
¸¸ )
req
¸¸* -
,
¸¸- .
HttpResponse
¸¸/ ;
resp
¸¸< @
)
¸¸@ A
{
¹¹ 
GoodG2B1
ºº 
(
ºº 
req
ºº 
,
ºº 
resp
ºº 
)
ºº 
;
ºº 
GoodG2B2
»» 
(
»» 
req
»» 
,
»» 
resp
»» 
)
»» 
;
»» 
GoodB2G1
¼¼ 
(
¼¼ 
req
¼¼ 
,
¼¼ 
resp
¼¼ 
)
¼¼ 
;
¼¼ 
GoodB2G2
½½ 
(
½½ 
req
½½ 
,
½½ 
resp
½½ 
)
½½ 
;
½½ 
}
¾¾ 
}ÀÀ 
}ÁÁ öK
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_08.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_08 G
:H I
AbstractTestCaseWebJ ]
{ 
private   
static   
bool   
PrivateReturnsTrue   *
(  * +
)  + ,
{!! 
return"" 
true"" 
;"" 
}## 
private%% 
static%% 
bool%% 
PrivateReturnsFalse%% +
(%%+ ,
)%%, -
{&& 
return'' 
false'' 
;'' 
}(( 
public** 

override** 
void** 
Bad** 
(** 
HttpRequest** (
req**) ,
,**, -
HttpResponse**. :
resp**; ?
)**? @
{++ 
string,, 
data,, 
;,, 
if-- 

(-- 
PrivateReturnsTrue-- 
(-- 
)--  
)--  !
{.. 	
data00 
=00 
req00 
.00 
Params00 
.00 
Get00 !
(00! "
$str00" (
)00( )
;00) *
}11 	
else22 
{33 	
data66 
=66 
null66 
;66 
}77 	
if88 

(88 
PrivateReturnsTrue88 
(88 
)88  
)88  !
{99 	
try:: 
{;; 
int<< 
value<< 
=<< 
int<< 
.<<  
Parse<<  %
(<<% &
data<<& *
)<<* +
;<<+ ,
}== 
catch>> 
(>> 
FormatException>> "
exceptNumberFormat>># 5
)>>5 6
{?? 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA 
(AA 
NLogAA "
.AA" #
LogLevelAA# +
.AA+ ,
WarnAA, 0
,AA0 1
exceptNumberFormatAA2 D
,AAD E
$strAAF `
+AAa b
dataAAc g
)AAg h
;AAh i
}BB 
}CC 	
}DD 
privateHH 
voidHH 
GoodG2B1HH 
(HH 
HttpRequestHH %
reqHH& )
,HH) *
HttpResponseHH+ 7
respHH8 <
)HH< =
{II 
stringJJ 
dataJJ 
;JJ 
ifKK 

(KK 
PrivateReturnsFalseKK 
(KK  
)KK  !
)KK! "
{LL 	
dataOO 
=OO 
nullOO 
;OO 
}PP 	
elseQQ 
{RR 	
dataTT 
=TT 
$strTT 
;TT 
}UU 	
ifVV 

(VV 
PrivateReturnsTrueVV 
(VV 
)VV  
)VV  !
{WW 	
tryXX 
{YY 
intZZ 
valueZZ 
=ZZ 
intZZ 
.ZZ  
ParseZZ  %
(ZZ% &
dataZZ& *
)ZZ* +
;ZZ+ ,
}[[ 
catch\\ 
(\\ 
FormatException\\ "
exceptNumberFormat\\# 5
)\\5 6
{]] 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
exceptNumberFormat__2 D
,__D E
$str__F `
+__a b
data__c g
)__g h
;__h i
}`` 
}aa 	
}bb 
privateee 
voidee 
GoodG2B2ee 
(ee 
HttpRequestee %
reqee& )
,ee) *
HttpResponseee+ 7
respee8 <
)ee< =
{ff 
stringgg 
datagg 
;gg 
ifhh 

(hh 
PrivateReturnsTruehh 
(hh 
)hh  
)hh  !
{ii 	
datakk 
=kk 
$strkk 
;kk 
}ll 	
elsemm 
{nn 	
dataqq 
=qq 
nullqq 
;qq 
}rr 	
ifss 

(ss 
PrivateReturnsTruess 
(ss 
)ss  
)ss  !
{tt 	
tryuu 
{vv 
intww 
valueww 
=ww 
intww 
.ww  
Parseww  %
(ww% &
dataww& *
)ww* +
;ww+ ,
}xx 
catchyy 
(yy 
FormatExceptionyy "
exceptNumberFormatyy# 5
)yy5 6
{zz 
IO|| 
.|| 
Logger|| 
.|| 
Log|| 
(|| 
NLog|| "
.||" #
LogLevel||# +
.||+ ,
Warn||, 0
,||0 1
exceptNumberFormat||2 D
,||D E
$str||F `
+||a b
data||c g
)||g h
;||h i
}}} 
}~~ 	
} 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
data
 
=
 
req
 
.
 
Params
 
.
 
Get
 !
(
! "
$str
" (
)
( )
;
) *
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 !
PrivateReturnsFalse
 
(
  
)
  !
)
! "
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
   	
}
¡¡ 
private
¤¤ 
void
¤¤ 
GoodB2G2
¤¤ 
(
¤¤ 
HttpRequest
¤¤ %
req
¤¤& )
,
¤¤) *
HttpResponse
¤¤+ 7
resp
¤¤8 <
)
¤¤< =
{
¥¥ 
string
¦¦ 
data
¦¦ 
;
¦¦ 
if
§§ 

(
§§  
PrivateReturnsTrue
§§ 
(
§§ 
)
§§  
)
§§  !
{
¨¨ 	
data
ªª 
=
ªª 
req
ªª 
.
ªª 
Params
ªª 
.
ªª 
Get
ªª !
(
ªª! "
$str
ªª" (
)
ªª( )
;
ªª) *
}
«« 	
else
¬¬ 
{
­­ 	
data
°° 
=
°° 
null
°° 
;
°° 
}
±± 	
if
²² 

(
²²  
PrivateReturnsTrue
²² 
(
²² 
)
²²  
)
²²  !
{
³³ 	
try
´´ 
{
µµ 
int
¶¶ 
value
¶¶ 
=
¶¶ 
int
¶¶ 
.
¶¶  
Parse
¶¶  %
(
¶¶% &
data
¶¶& *
)
¶¶* +
;
¶¶+ ,
}
·· 
catch
¸¸ 
(
¸¸ 
FormatException
¸¸ " 
exceptNumberFormat
¸¸# 5
)
¸¸5 6
{
¹¹ 
IO
»» 
.
»» 
Logger
»» 
.
»» 
Log
»» 
(
»» 
NLog
»» "
.
»»" #
LogLevel
»»# +
.
»»+ ,
Warn
»», 0
,
»»0 1 
exceptNumberFormat
»»2 D
,
»»D E
$str
»»F j
+
»»k l 
exceptNumberFormat
»»m 
)»» 
;»» 
}
¼¼ 
}
½½ 	
}
¾¾ 
public
ÀÀ 

override
ÀÀ 
void
ÀÀ 
Good
ÀÀ 
(
ÀÀ 
HttpRequest
ÀÀ )
req
ÀÀ* -
,
ÀÀ- .
HttpResponse
ÀÀ/ ;
resp
ÀÀ< @
)
ÀÀ@ A
{
ÁÁ 
GoodG2B1
ÂÂ 
(
ÂÂ 
req
ÂÂ 
,
ÂÂ 
resp
ÂÂ 
)
ÂÂ 
;
ÂÂ 
GoodG2B2
ÃÃ 
(
ÃÃ 
req
ÃÃ 
,
ÃÃ 
resp
ÃÃ 
)
ÃÃ 
;
ÃÃ 
GoodB2G1
ÄÄ 
(
ÄÄ 
req
ÄÄ 
,
ÄÄ 
resp
ÄÄ 
)
ÄÄ 
;
ÄÄ 
GoodB2G2
ÅÅ 
(
ÅÅ 
req
ÅÅ 
,
ÅÅ 
resp
ÅÅ 
)
ÅÅ 
;
ÅÅ 
}
ÆÆ 
}ÈÈ 
}ÉÉ ´H
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_09.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_09 G
:H I
AbstractTestCaseWebJ ]
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_TRUE   #
)  # $
{!! 	
data## 
=## 
req## 
.## 
Params## 
.## 
Get## !
(##! "
$str##" (
)##( )
;##) *
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++ 
IO++ 
.++  
STATIC_READONLY_TRUE++ #
)++# $
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
HttpRequest;; %
req;;& )
,;;) *
HttpResponse;;+ 7
resp;;8 <
);;< =
{<< 
string== 
data== 
;== 
if>> 

(>> 
IO>> 
.>> !
STATIC_READONLY_FALSE>> $
)>>$ %
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
IOII 
.II  
STATIC_READONLY_TRUEII #
)II# $
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
HttpRequestXX %
reqXX& )
,XX) *
HttpResponseXX+ 7
respXX8 <
)XX< =
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
IO[[ 
.[[  
STATIC_READONLY_TRUE[[ #
)[[# $
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
IOff 
.ff  
STATIC_READONLY_TRUEff #
)ff# $
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
IOxx 
.xx  
STATIC_READONLY_TRUExx #
)xx# $
{yy 	
data{{ 
={{ 
req{{ 
.{{ 
Params{{ 
.{{ 
Get{{ !
({{! "
$str{{" (
){{( )
;{{) *
}|| 	
else}} 
{~~ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 #
STATIC_READONLY_FALSE
 $
)
$ %
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
data
 
=
 
req
 
.
 
Params
 
.
 
Get
 !
(
! "
$str
" (
)
( )
;
) *
}
 	
else
 
{
   	
data
££ 
=
££ 
null
££ 
;
££ 
}
¤¤ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ "
STATIC_READONLY_TRUE
¥¥ #
)
¥¥# $
{
¦¦ 	
try
§§ 
{
¨¨ 
int
©© 
value
©© 
=
©© 
int
©© 
.
©©  
Parse
©©  %
(
©©% &
data
©©& *
)
©©* +
;
©©+ ,
}
ªª 
catch
«« 
(
«« 
FormatException
«« " 
exceptNumberFormat
««# 5
)
««5 6
{
¬¬ 
IO
®® 
.
®® 
Logger
®® 
.
®® 
Log
®® 
(
®® 
NLog
®® "
.
®®" #
LogLevel
®®# +
.
®®+ ,
Warn
®®, 0
,
®®0 1 
exceptNumberFormat
®®2 D
,
®®D E
$str
®®F j
+
®®k l 
exceptNumberFormat
®®m 
)®® 
;®® 
}
¯¯ 
}
°° 	
}
±± 
public
³³ 

override
³³ 
void
³³ 
Good
³³ 
(
³³ 
HttpRequest
³³ )
req
³³* -
,
³³- .
HttpResponse
³³/ ;
resp
³³< @
)
³³@ A
{
´´ 
GoodG2B1
µµ 
(
µµ 
req
µµ 
,
µµ 
resp
µµ 
)
µµ 
;
µµ 
GoodG2B2
¶¶ 
(
¶¶ 
req
¶¶ 
,
¶¶ 
resp
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G1
·· 
(
·· 
req
·· 
,
·· 
resp
·· 
)
·· 
;
·· 
GoodB2G2
¸¸ 
(
¸¸ 
req
¸¸ 
,
¸¸ 
resp
¸¸ 
)
¸¸ 
;
¸¸ 
}
¹¹ 
}»» 
}¼¼ ÐG
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_10.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_10 G
:H I
AbstractTestCaseWebJ ]
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.   

staticTrue   
)   
{!! 	
data## 
=## 
req## 
.## 
Params## 
.## 
Get## !
(##! "
$str##" (
)##( )
;##) *
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++ 
IO++ 
.++ 

staticTrue++ 
)++ 
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
HttpRequest;; %
req;;& )
,;;) *
HttpResponse;;+ 7
resp;;8 <
);;< =
{<< 
string== 
data== 
;== 
if>> 

(>> 
IO>> 
.>> 
staticFalse>> 
)>> 
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
IOII 
.II 

staticTrueII 
)II 
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
HttpRequestXX %
reqXX& )
,XX) *
HttpResponseXX+ 7
respXX8 <
)XX< =
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
IO[[ 
.[[ 

staticTrue[[ 
)[[ 
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
IOff 
.ff 

staticTrueff 
)ff 
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
IOxx 
.xx 

staticTruexx 
)xx 
{yy 	
data{{ 
={{ 
req{{ 
.{{ 
Params{{ 
.{{ 
Get{{ !
({{! "
$str{{" (
){{( )
;{{) *
}|| 	
else}} 
{~~ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 
staticFalse
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
data
 
=
 
req
 
.
 
Params
 
.
 
Get
 !
(
! "
$str
" (
)
( )
;
) *
}
 	
else
 
{
   	
data
££ 
=
££ 
null
££ 
;
££ 
}
¤¤ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ 

staticTrue
¥¥ 
)
¥¥ 
{
¦¦ 	
try
§§ 
{
¨¨ 
int
©© 
value
©© 
=
©© 
int
©© 
.
©©  
Parse
©©  %
(
©©% &
data
©©& *
)
©©* +
;
©©+ ,
}
ªª 
catch
«« 
(
«« 
FormatException
«« " 
exceptNumberFormat
««# 5
)
««5 6
{
¬¬ 
IO
®® 
.
®® 
Logger
®® 
.
®® 
Log
®® 
(
®® 
NLog
®® "
.
®®" #
LogLevel
®®# +
.
®®+ ,
Warn
®®, 0
,
®®0 1 
exceptNumberFormat
®®2 D
,
®®D E
$str
®®F j
+
®®k l 
exceptNumberFormat
®®m 
)®® 
;®® 
}
¯¯ 
}
°° 	
}
±± 
public
³³ 

override
³³ 
void
³³ 
Good
³³ 
(
³³ 
HttpRequest
³³ )
req
³³* -
,
³³- .
HttpResponse
³³/ ;
resp
³³< @
)
³³@ A
{
´´ 
GoodG2B1
µµ 
(
µµ 
req
µµ 
,
µµ 
resp
µµ 
)
µµ 
;
µµ 
GoodG2B2
¶¶ 
(
¶¶ 
req
¶¶ 
,
¶¶ 
resp
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G1
·· 
(
·· 
req
·· 
,
·· 
resp
·· 
)
·· 
;
·· 
GoodB2G2
¸¸ 
(
¸¸ 
req
¸¸ 
,
¸¸ 
resp
¸¸ 
)
¸¸ 
;
¸¸ 
}
¹¹ 
}»» 
}¼¼ ÎJ
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_11.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_11 G
:H I
AbstractTestCaseWebJ ]
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.   
StaticReturnsTrue    
(    !
)  ! "
)  " #
{!! 	
data## 
=## 
req## 
.## 
Params## 
.## 
Get## !
(##! "
$str##" (
)##( )
;##) *
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++
 
IO++ 
.++ 
StaticReturnsTrue++ 
(++  
)++  !
)++! "
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
HttpRequest;; %
req;;& )
,;;) *
HttpResponse;;+ 7
resp;;8 <
);;< =
{<< 
string== 
data== 
;== 
if>> 

(>> 
IO>> 
.>> 
StaticReturnsFalse>> !
(>>! "
)>>" #
)>># $
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
IOII 
.II 
StaticReturnsTrueII  
(II  !
)II! "
)II" #
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
HttpRequestXX %
reqXX& )
,XX) *
HttpResponseXX+ 7
respXX8 <
)XX< =
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
IO[[ 
.[[ 
StaticReturnsTrue[[  
([[  !
)[[! "
)[[" #
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
IOff 
.ff 
StaticReturnsTrueff  
(ff  !
)ff! "
)ff" #
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
IOxx 
.xx 
StaticReturnsTruexx  
(xx  !
)xx! "
)xx" #
{yy 	
data{{ 
={{ 
req{{ 
.{{ 
Params{{ 
.{{ 
Get{{ !
({{! "
$str{{" (
){{( )
;{{) *
}|| 	
else}} 
{~~ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
  
StaticReturnsFalse
 !
(
! "
)
" #
)
# $
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
data
 
=
 
req
 
.
 
Params
 
.
 
Get
 !
(
! "
$str
" (
)
( )
;
) *
}
 	
else
 
{
   	
data
££ 
=
££ 
null
££ 
;
££ 
}
¤¤ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ 
StaticReturnsTrue
¥¥  
(
¥¥  !
)
¥¥! "
)
¥¥" #
{
¦¦ 	
try
§§ 
{
¨¨ 
int
©© 
value
©© 
=
©© 
int
©© 
.
©©  
Parse
©©  %
(
©©% &
data
©©& *
)
©©* +
;
©©+ ,
}
ªª 
catch
«« 
(
«« 
FormatException
«« " 
exceptNumberFormat
««# 5
)
««5 6
{
¬¬ 
IO
®® 
.
®® 
Logger
®® 
.
®® 
Log
®® 
(
®® 
NLog
®® "
.
®®" #
LogLevel
®®# +
.
®®+ ,
Warn
®®, 0
,
®®0 1 
exceptNumberFormat
®®2 D
,
®®D E
$str
®®F j
+
®®k l 
exceptNumberFormat
®®m 
)®® 
;®® 
}
¯¯ 
}
°° 	
}
±± 
public
³³ 

override
³³ 
void
³³ 
Good
³³ 
(
³³ 
HttpRequest
³³ )
req
³³* -
,
³³- .
HttpResponse
³³/ ;
resp
³³< @
)
³³@ A
{
´´ 
GoodG2B1
µµ 
(
µµ 
req
µµ 
,
µµ 
resp
µµ 
)
µµ 
;
µµ 
GoodG2B2
¶¶ 
(
¶¶ 
req
¶¶ 
,
¶¶ 
resp
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G1
·· 
(
·· 
req
·· 
,
·· 
resp
·· 
)
·· 
;
·· 
GoodB2G2
¸¸ 
(
¸¸ 
req
¸¸ 
,
¸¸ 
resp
¸¸ 
)
¸¸ 
;
¸¸ 
}
¹¹ 
}»» 
}¼¼ Í@
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_12.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_12 G
:H I
AbstractTestCaseWebJ ]
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(  
 
IO   
.   $
StaticReturnsTrueOrFalse   &
(  & '
)  ' (
)  ( )
{!! 	
data## 
=## 
req## 
.## 
Params## 
.## 
Get## !
(##! "
$str##" (
)##( )
;##) *
}$$ 	
else%% 
{&& 	
data(( 
=(( 
$str(( 
;(( 
})) 	
if** 

(**
 
IO** 
.** $
StaticReturnsTrueOrFalse** &
(**& '
)**' (
)**( )
{++ 	
try,, 
{-- 
int.. 
value.. 
=.. 
int.. 
...  
Parse..  %
(..% &
data..& *
)..* +
;..+ ,
}// 
catch00 
(00 
FormatException00 "
exceptNumberFormat00# 5
)005 6
{11 
IO33 
.33 
Logger33 
.33 
Log33 
(33 
NLog33 "
.33" #
LogLevel33# +
.33+ ,
Warn33, 0
,330 1
exceptNumberFormat332 D
,33D E
$str33F `
+33a b
data33c g
)33g h
;33h i
}44 
}55 	
else66 
{77 	
try88 
{99 
int:: 
value:: 
=:: 
int:: 
.::  
Parse::  %
(::% &
data::& *
)::* +
;::+ ,
};; 
catch<< 
(<< 
FormatException<< "
exceptNumberFormat<<# 5
)<<5 6
{== 
IO?? 
.?? 
Logger?? 
.?? 
Log?? 
(?? 
NLog?? "
.??" #
LogLevel??# +
.??+ ,
Warn??, 0
,??0 1
exceptNumberFormat??2 D
,??D E
$str??F j
+??k l
exceptNumberFormat??m 
)	?? 
;
?? 
}@@ 
}AA 	
}BB 
privateGG 
voidGG 
GoodG2BGG 
(GG 
HttpRequestGG $
reqGG% (
,GG( )
HttpResponseGG* 6
respGG7 ;
)GG; <
{HH 
stringII 
dataII 
;II 
ifJJ 

(JJ
 
IOJJ 
.JJ $
StaticReturnsTrueOrFalseJJ &
(JJ& '
)JJ' (
)JJ( )
{KK 	
dataMM 
=MM 
$strMM 
;MM 
}NN 	
elseOO 
{PP 	
dataRR 
=RR 
$strRR 
;RR 
}SS 	
ifTT 

(TT
 
IOTT 
.TT $
StaticReturnsTrueOrFalseTT &
(TT& '
)TT' (
)TT( )
{UU 	
tryVV 
{WW 
intXX 
valueXX 
=XX 
intXX 
.XX  
ParseXX  %
(XX% &
dataXX& *
)XX* +
;XX+ ,
}YY 
catchZZ 
(ZZ 
FormatExceptionZZ "
exceptNumberFormatZZ# 5
)ZZ5 6
{[[ 
IO]] 
.]] 
Logger]] 
.]] 
Log]] 
(]] 
NLog]] "
.]]" #
LogLevel]]# +
.]]+ ,
Warn]], 0
,]]0 1
exceptNumberFormat]]2 D
,]]D E
$str]]F `
+]]a b
data]]c g
)]]g h
;]]h i
}^^ 
}__ 	
else`` 
{aa 	
trybb 
{cc 
intdd 
valuedd 
=dd 
intdd 
.dd  
Parsedd  %
(dd% &
datadd& *
)dd* +
;dd+ ,
}ee 
catchff 
(ff 
FormatExceptionff "
exceptNumberFormatff# 5
)ff5 6
{gg 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptNumberFormatii2 D
,iiD E
$striiF `
+iia b
dataiic g
)iig h
;iih i
}jj 
}kk 	
}ll 
privatepp 
voidpp 
GoodB2Gpp 
(pp 
HttpRequestpp $
reqpp% (
,pp( )
HttpResponsepp* 6
resppp7 ;
)pp; <
{qq 
stringrr 
datarr 
;rr 
ifss 

(ss
 
IOss 
.ss $
StaticReturnsTrueOrFalsess &
(ss& '
)ss' (
)ss( )
{tt 	
datavv 
=vv 
reqvv 
.vv 
Paramsvv 
.vv 
Getvv !
(vv! "
$strvv" (
)vv( )
;vv) *
}ww 	
elsexx 
{yy 	
data{{ 
={{ 
req{{ 
.{{ 
Params{{ 
.{{ 
Get{{ !
({{! "
$str{{" (
){{( )
;{{) *
}|| 	
if}} 

(}}
 
IO}} 
.}} $
StaticReturnsTrueOrFalse}} &
(}}& '
)}}' (
)}}( )
{~~ 	
try 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
HttpRequest
 )
req
* -
,
- .
HttpResponse
/ ;
resp
< @
)
@ A
{
 
GoodG2B
 
(
 
req
 
,
 
resp
 
)
 
;
 
GoodB2G
 
(
 
req
 
,
 
resp
 
)
 
;
 
}
 
} 
} K
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_13.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_13 G
:H I
AbstractTestCaseWebJ ]
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_FIVE   #
==  # %
$num  % &
)  & '
{!! 	
data## 
=## 
req## 
.## 
Params## 
.## 
Get## !
(##! "
$str##" (
)##( )
;##) *
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++ 
IO++ 
.++  
STATIC_READONLY_FIVE++ #
==++# %
$num++% &
)++& '
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
HttpRequest;; %
req;;& )
,;;) *
HttpResponse;;+ 7
resp;;8 <
);;< =
{<< 
string== 
data== 
;== 
if>> 

(>> 
IO>> 
.>>  
STATIC_READONLY_FIVE>> #
!=>># %
$num>>% &
)>>& '
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
IOII 
.II  
STATIC_READONLY_FIVEII #
==II# %
$numII% &
)II& '
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
HttpRequestXX %
reqXX& )
,XX) *
HttpResponseXX+ 7
respXX8 <
)XX< =
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
IO[[ 
.[[  
STATIC_READONLY_FIVE[[ #
==[[# %
$num[[% &
)[[& '
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
IOff 
.ff  
STATIC_READONLY_FIVEff #
==ff# %
$numff% &
)ff& '
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
IOxx 
.xx  
STATIC_READONLY_FIVExx #
==xx# %
$numxx% &
)xx& '
{yy 	
data{{ 
={{ 
req{{ 
.{{ 
Params{{ 
.{{ 
Get{{ !
({{! "
$str{{" (
){{( )
;{{) *
}|| 	
else}} 
{~~ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
!=
# %
$num
% &
)
& '
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
# %
$num
% &
)
& '
{
 	
data
 
=
 
req
 
.
 
Params
 
.
 
Get
 !
(
! "
$str
" (
)
( )
;
) *
}
 	
else
 
{
   	
data
££ 
=
££ 
null
££ 
;
££ 
}
¤¤ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ "
STATIC_READONLY_FIVE
¥¥ #
==
¥¥# %
$num
¥¥% &
)
¥¥& '
{
¦¦ 	
try
§§ 
{
¨¨ 
int
©© 
value
©© 
=
©© 
int
©© 
.
©©  
Parse
©©  %
(
©©% &
data
©©& *
)
©©* +
;
©©+ ,
}
ªª 
catch
«« 
(
«« 
FormatException
«« " 
exceptNumberFormat
««# 5
)
««5 6
{
¬¬ 
IO
®® 
.
®® 
Logger
®® 
.
®® 
Log
®® 
(
®® 
NLog
®® "
.
®®" #
LogLevel
®®# +
.
®®+ ,
Warn
®®, 0
,
®®0 1 
exceptNumberFormat
®®2 D
,
®®D E
$str
®®F j
+
®®k l 
exceptNumberFormat
®®m 
)®® 
;®® 
}
¯¯ 
}
°° 	
}
±± 
public
³³ 

override
³³ 
void
³³ 
Good
³³ 
(
³³ 
HttpRequest
³³ )
req
³³* -
,
³³- .
HttpResponse
³³/ ;
resp
³³< @
)
³³@ A
{
´´ 
GoodG2B1
µµ 
(
µµ 
req
µµ 
,
µµ 
resp
µµ 
)
µµ 
;
µµ 
GoodG2B2
¶¶ 
(
¶¶ 
req
¶¶ 
,
¶¶ 
resp
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G1
·· 
(
·· 
req
·· 
,
·· 
resp
·· 
)
·· 
;
·· 
GoodB2G2
¸¸ 
(
¸¸ 
req
¸¸ 
,
¸¸ 
resp
¸¸ 
)
¸¸ 
;
¸¸ 
}
¹¹ 
}»» 
}¼¼ ®J
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_14.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_14 G
:H I
AbstractTestCaseWebJ ]
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.   

staticFive   
==   
$num   
)   
{!! 	
data## 
=## 
req## 
.## 
Params## 
.## 
Get## !
(##! "
$str##" (
)##( )
;##) *
}$$ 	
else%% 
{&& 	
data)) 
=)) 
null)) 
;)) 
}** 	
if++ 

(++ 
IO++ 
.++ 

staticFive++ 
==++ 
$num++ 
)++ 
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private;; 
void;; 
GoodG2B1;; 
(;; 
HttpRequest;; %
req;;& )
,;;) *
HttpResponse;;+ 7
resp;;8 <
);;< =
{<< 
string== 
data== 
;== 
if>> 

(>> 
IO>> 
.>> 

staticFive>> 
!=>> 
$num>> 
)>> 
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
elseDD 
{EE 	
dataGG 
=GG 
$strGG 
;GG 
}HH 	
ifII 

(II 
IOII 
.II 

staticFiveII 
==II 
$numII 
)II 
{JJ 	
tryKK 
{LL 
intMM 
valueMM 
=MM 
intMM 
.MM  
ParseMM  %
(MM% &
dataMM& *
)MM* +
;MM+ ,
}NN 
catchOO 
(OO 
FormatExceptionOO "
exceptNumberFormatOO# 5
)OO5 6
{PP 
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR "
.RR" #
LogLevelRR# +
.RR+ ,
WarnRR, 0
,RR0 1
exceptNumberFormatRR2 D
,RRD E
$strRRF `
+RRa b
dataRRc g
)RRg h
;RRh i
}SS 
}TT 	
}UU 
privateXX 
voidXX 
GoodG2B2XX 
(XX 
HttpRequestXX %
reqXX& )
,XX) *
HttpResponseXX+ 7
respXX8 <
)XX< =
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
IO[[ 
.[[ 

staticFive[[ 
==[[ 
$num[[ 
)[[ 
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
else`` 
{aa 	
datadd 
=dd 
nulldd 
;dd 
}ee 	
ifff 

(ff 
IOff 
.ff 

staticFiveff 
==ff 
$numff 
)ff 
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privateuu 
voiduu 
GoodB2G1uu 
(uu 
HttpRequestuu %
requu& )
,uu) *
HttpResponseuu+ 7
respuu8 <
)uu< =
{vv 
stringww 
dataww 
;ww 
ifxx 

(xx 
IOxx 
.xx 

staticFivexx 
==xx 
$numxx 
)xx 
{yy 	
data{{ 
={{ 
req{{ 
.{{ 
Params{{ 
.{{ 
Get{{ !
({{! "
$str{{" (
){{( )
;{{) *
}|| 	
else}} 
{~~ 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 

staticFive
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodB2G2
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
req
 
.
 
Params
 
.
 
Get
 !
(
! "
$str
" (
)
( )
;
) *
}
 	
else
 
{
   	
data
££ 
=
££ 
null
££ 
;
££ 
}
¤¤ 	
if
¥¥ 

(
¥¥ 
IO
¥¥ 
.
¥¥ 

staticFive
¥¥ 
==
¥¥ 
$num
¥¥ 
)
¥¥ 
{
¦¦ 	
try
§§ 
{
¨¨ 
int
©© 
value
©© 
=
©© 
int
©© 
.
©©  
Parse
©©  %
(
©©% &
data
©©& *
)
©©* +
;
©©+ ,
}
ªª 
catch
«« 
(
«« 
FormatException
«« " 
exceptNumberFormat
««# 5
)
««5 6
{
¬¬ 
IO
®® 
.
®® 
Logger
®® 
.
®® 
Log
®® 
(
®® 
NLog
®® "
.
®®" #
LogLevel
®®# +
.
®®+ ,
Warn
®®, 0
,
®®0 1 
exceptNumberFormat
®®2 D
,
®®D E
$str
®®F j
+
®®k l 
exceptNumberFormat
®®m 
)®® 
;®® 
}
¯¯ 
}
°° 	
}
±± 
public
³³ 

override
³³ 
void
³³ 
Good
³³ 
(
³³ 
HttpRequest
³³ )
req
³³* -
,
³³- .
HttpResponse
³³/ ;
resp
³³< @
)
³³@ A
{
´´ 
GoodG2B1
µµ 
(
µµ 
req
µµ 
,
µµ 
resp
µµ 
)
µµ 
;
µµ 
GoodG2B2
¶¶ 
(
¶¶ 
req
¶¶ 
,
¶¶ 
resp
¶¶ 
)
¶¶ 
;
¶¶ 
GoodB2G1
·· 
(
·· 
req
·· 
,
·· 
resp
·· 
)
·· 
;
·· 
GoodB2G2
¸¸ 
(
¸¸ 
req
¸¸ 
,
¸¸ 
resp
¸¸ 
)
¸¸ 
;
¸¸ 
}
¹¹ 
}»» 
}¼¼ àS
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_15.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_15 G
:H I
AbstractTestCaseWebJ ]
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
switch   
(   
$num   
)   
{!! 	
case"" 
$num"" 
:"" 
data$$ 
=$$ 
req$$ 
.$$ 
Params$$ 
.$$ 
Get$$ !
($$! "
$str$$" (
)$$( )
;$$) *
break%% 
;%% 
default&& 
:&& 
data)) 
=)) 
null)) 
;)) 
break** 
;** 
}++ 	
switch,, 
(,, 
$num,, 
),, 
{-- 	
case.. 
$num.. 
:.. 
try// 
{00 
int11 
value11 
=11 
int11 
.11  
Parse11  %
(11% &
data11& *
)11* +
;11+ ,
}22 
catch33 
(33 
FormatException33 "
exceptNumberFormat33# 5
)335 6
{44 
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 "
.66" #
LogLevel66# +
.66+ ,
Warn66, 0
,660 1
exceptNumberFormat662 D
,66D E
$str66F `
+66a b
data66c g
)66g h
;66h i
}77 
break88 
;88 
default99 
:99 
IO;; 
.;; 
	WriteLine;; 
(;; 
$str;; /
);;/ 0
;;;0 1
break<< 
;<< 
}== 	
}>> 
privateBB 
voidBB 
GoodG2B1BB 
(BB 
HttpRequestBB %
reqBB& )
,BB) *
HttpResponseBB+ 7
respBB8 <
)BB< =
{CC 
stringDD 
dataDD 
;DD 
switchEE 
(EE 
$numEE 
)EE 
{FF 	
caseGG 
$numGG 
:GG 
dataJJ 
=JJ 
nullJJ 
;JJ 
breakKK 
;KK 
defaultLL 
:LL 
dataNN 
=NN 
$strNN 
;NN 
breakOO 
;OO 
}PP 	
switchQQ 
(QQ 
$numQQ 
)QQ 
{RR 	
caseSS 
$numSS 
:SS 
tryTT 
{UU 
intVV 
valueVV 
=VV 
intVV 
.VV  
ParseVV  %
(VV% &
dataVV& *
)VV* +
;VV+ ,
}WW 
catchXX 
(XX 
FormatExceptionXX "
exceptNumberFormatXX# 5
)XX5 6
{YY 
IO[[ 
.[[ 
Logger[[ 
.[[ 
Log[[ 
([[ 
NLog[[ "
.[[" #
LogLevel[[# +
.[[+ ,
Warn[[, 0
,[[0 1
exceptNumberFormat[[2 D
,[[D E
$str[[F `
+[[a b
data[[c g
)[[g h
;[[h i
}\\ 
break]] 
;]] 
default^^ 
:^^ 
IO`` 
.`` 
	WriteLine`` 
(`` 
$str`` /
)``/ 0
;``0 1
breakaa 
;aa 
}bb 	
}cc 
privateff 
voidff 
GoodG2B2ff 
(ff 
HttpRequestff %
reqff& )
,ff) *
HttpResponseff+ 7
respff8 <
)ff< =
{gg 
stringhh 
datahh 
;hh 
switchii 
(ii 
$numii 
)ii 
{jj 	
casekk 
$numkk 
:kk 
datamm 
=mm 
$strmm 
;mm 
breaknn 
;nn 
defaultoo 
:oo 
datarr 
=rr 
nullrr 
;rr 
breakss 
;ss 
}tt 	
switchuu 
(uu 
$numuu 
)uu 
{vv 	
caseww 
$numww 
:ww 
tryxx 
{yy 
intzz 
valuezz 
=zz 
intzz 
.zz  
Parsezz  %
(zz% &
datazz& *
)zz* +
;zz+ ,
}{{ 
catch|| 
(|| 
FormatException|| "
exceptNumberFormat||# 5
)||5 6
{}} 
IO 
. 
Logger 
. 
Log 
( 
NLog "
." #
LogLevel# +
.+ ,
Warn, 0
,0 1
exceptNumberFormat2 D
,D E
$strF `
+a b
datac g
)g h
;h i
}
 
break
 
;
 
default
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
data
 
=
 
req
 
.
 
Params
 
.
 
Get
 !
(
! "
$str
" (
)
( )
;
) *
break
 
;
 
default
 
:
 
data
 
=
 
null
 
;
 
break
 
;
 
}
 	
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
default
 
:
 
try
   
{
¡¡ 
int
¢¢ 
value
¢¢ 
=
¢¢ 
int
¢¢ 
.
¢¢  
Parse
¢¢  %
(
¢¢% &
data
¢¢& *
)
¢¢* +
;
¢¢+ ,
}
££ 
catch
¤¤ 
(
¤¤ 
FormatException
¤¤ " 
exceptNumberFormat
¤¤# 5
)
¤¤5 6
{
¥¥ 
IO
§§ 
.
§§ 
Logger
§§ 
.
§§ 
Log
§§ 
(
§§ 
NLog
§§ "
.
§§" #
LogLevel
§§# +
.
§§+ ,
Warn
§§, 0
,
§§0 1 
exceptNumberFormat
§§2 D
,
§§D E
$str
§§F j
+
§§k l 
exceptNumberFormat
§§m 
)§§ 
;§§ 
}
¨¨ 
break
©© 
;
©© 
}
ªª 	
}
«« 
private
®® 
void
®® 
GoodB2G2
®® 
(
®® 
HttpRequest
®® %
req
®®& )
,
®®) *
HttpResponse
®®+ 7
resp
®®8 <
)
®®< =
{
¯¯ 
string
°° 
data
°° 
;
°° 
switch
±± 
(
±± 
$num
±± 
)
±± 
{
²² 	
case
³³ 
$num
³³ 
:
³³ 
data
µµ 
=
µµ 
req
µµ 
.
µµ 
Params
µµ 
.
µµ 
Get
µµ !
(
µµ! "
$str
µµ" (
)
µµ( )
;
µµ) *
break
¶¶ 
;
¶¶ 
default
·· 
:
·· 
data
ºº 
=
ºº 
null
ºº 
;
ºº 
break
»» 
;
»» 
}
¼¼ 	
switch
½½ 
(
½½ 
$num
½½ 
)
½½ 
{
¾¾ 	
case
¿¿ 
$num
¿¿ 
:
¿¿ 
try
ÀÀ 
{
ÁÁ 
int
ÂÂ 
value
ÂÂ 
=
ÂÂ 
int
ÂÂ 
.
ÂÂ  
Parse
ÂÂ  %
(
ÂÂ% &
data
ÂÂ& *
)
ÂÂ* +
;
ÂÂ+ ,
}
ÃÃ 
catch
ÄÄ 
(
ÄÄ 
FormatException
ÄÄ " 
exceptNumberFormat
ÄÄ# 5
)
ÄÄ5 6
{
ÅÅ 
IO
ÇÇ 
.
ÇÇ 
Logger
ÇÇ 
.
ÇÇ 
Log
ÇÇ 
(
ÇÇ 
NLog
ÇÇ "
.
ÇÇ" #
LogLevel
ÇÇ# +
.
ÇÇ+ ,
Warn
ÇÇ, 0
,
ÇÇ0 1 
exceptNumberFormat
ÇÇ2 D
,
ÇÇD E
$str
ÇÇF j
+
ÇÇk l 
exceptNumberFormat
ÇÇm 
)ÇÇ 
;ÇÇ 
}
ÈÈ 
break
ÉÉ 
;
ÉÉ 
default
ÊÊ 
:
ÊÊ 
IO
ÌÌ 
.
ÌÌ 
	WriteLine
ÌÌ 
(
ÌÌ 
$str
ÌÌ /
)
ÌÌ/ 0
;
ÌÌ0 1
break
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
}
ÏÏ 
public
ÑÑ 

override
ÑÑ 
void
ÑÑ 
Good
ÑÑ 
(
ÑÑ 
HttpRequest
ÑÑ )
req
ÑÑ* -
,
ÑÑ- .
HttpResponse
ÑÑ/ ;
resp
ÑÑ< @
)
ÑÑ@ A
{
ÒÒ 
GoodG2B1
ÓÓ 
(
ÓÓ 
req
ÓÓ 
,
ÓÓ 
resp
ÓÓ 
)
ÓÓ 
;
ÓÓ 
GoodG2B2
ÔÔ 
(
ÔÔ 
req
ÔÔ 
,
ÔÔ 
resp
ÔÔ 
)
ÔÔ 
;
ÔÔ 
GoodB2G1
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G2
ÖÖ 
(
ÖÖ 
req
ÖÖ 
,
ÖÖ 
resp
ÖÖ 
)
ÖÖ 
;
ÖÖ 
}
×× 
}ÙÙ 
}ÚÚ ò'
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_16.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_16 G
:H I
AbstractTestCaseWebJ ]
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
while   
(   
true   
)   
{!! 	
data## 
=## 
req## 
.## 
Params## 
.## 
Get## !
(##! "
$str##" (
)##( )
;##) *
break$$ 
;$$ 
}%% 	
while&& 
(&& 
true&& 
)&& 
{'' 	
try(( 
{)) 
int** 
value** 
=** 
int** 
.**  
Parse**  %
(**% &
data**& *
)*** +
;**+ ,
}++ 
catch,, 
(,, 
FormatException,, "
exceptNumberFormat,,# 5
),,5 6
{-- 
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// "
.//" #
LogLevel//# +
.//+ ,
Warn//, 0
,//0 1
exceptNumberFormat//2 D
,//D E
$str//F `
+//a b
data//c g
)//g h
;//h i
}00 
break11 
;11 
}22 	
}33 
private77 
void77 
GoodG2B77 
(77 
HttpRequest77 $
req77% (
,77( )
HttpResponse77* 6
resp777 ;
)77; <
{88 
string99 
data99 
;99 
while:: 
(:: 
true:: 
):: 
{;; 	
data== 
=== 
$str== 
;== 
break>> 
;>> 
}?? 	
while@@ 
(@@ 
true@@ 
)@@ 
{AA 	
tryBB 
{CC 
intDD 
valueDD 
=DD 
intDD 
.DD  
ParseDD  %
(DD% &
dataDD& *
)DD* +
;DD+ ,
}EE 
catchFF 
(FF 
FormatExceptionFF "
exceptNumberFormatFF# 5
)FF5 6
{GG 
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII "
.II" #
LogLevelII# +
.II+ ,
WarnII, 0
,II0 1
exceptNumberFormatII2 D
,IID E
$strIIF `
+IIa b
dataIIc g
)IIg h
;IIh i
}JJ 
breakKK 
;KK 
}LL 	
}MM 
privatePP 
voidPP 
GoodB2GPP 
(PP 
HttpRequestPP $
reqPP% (
,PP( )
HttpResponsePP* 6
respPP7 ;
)PP; <
{QQ 
stringRR 
dataRR 
;RR 
whileSS 
(SS 
trueSS 
)SS 
{TT 	
dataVV 
=VV 
reqVV 
.VV 
ParamsVV 
.VV 
GetVV !
(VV! "
$strVV" (
)VV( )
;VV) *
breakWW 
;WW 
}XX 	
whileYY 
(YY 
trueYY 
)YY 
{ZZ 	
try[[ 
{\\ 
int]] 
value]] 
=]] 
int]] 
.]]  
Parse]]  %
(]]% &
data]]& *
)]]* +
;]]+ ,
}^^ 
catch__ 
(__ 
FormatException__ "
exceptNumberFormat__# 5
)__5 6
{`` 
IObb 
.bb 
Loggerbb 
.bb 
Logbb 
(bb 
NLogbb "
.bb" #
LogLevelbb# +
.bb+ ,
Warnbb, 0
,bb0 1
exceptNumberFormatbb2 D
,bbD E
$strbbF j
+bbk l
exceptNumberFormatbbm 
)	bb 
;
bb 
}cc 
breakdd 
;dd 
}ee 	
}ff 
publichh 

overridehh 
voidhh 
Goodhh 
(hh 
HttpRequesthh )
reqhh* -
,hh- .
HttpResponsehh/ ;
resphh< @
)hh@ A
{ii 
GoodG2Bjj 
(jj 
reqjj 
,jj 
respjj 
)jj 
;jj 
GoodB2Gkk 
(kk 
reqkk 
,kk 
respkk 
)kk 
;kk 
}ll 
}nn 
}oo Ñ'
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_17.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_17 G
:H I
AbstractTestCaseWebJ ]
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data%% 
=%% 
req%% 
.%% 
Params%% 
.%% 
Get%% 
(%% 
$str%% $
)%%$ %
;%%% &
for&& 
(&& 
int&& 
j&& 
=&& 
$num&& 
;&& 
j&& 
<&& 
$num&& 
;&& 
j&&  
++&&  "
)&&" #
{'' 	
try(( 
{)) 
int** 
value** 
=** 
int** 
.**  
Parse**  %
(**% &
data**& *
)*** +
;**+ ,
}++ 
catch,, 
(,, 
FormatException,, "
exceptNumberFormat,,# 5
),,5 6
{-- 
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// "
.//" #
LogLevel//# +
.//+ ,
Warn//, 0
,//0 1
exceptNumberFormat//2 D
,//D E
$str//F `
+//a b
data//c g
)//g h
;//h i
}00 
}11 	
}22 
private66 
void66 
GoodG2B66 
(66 
HttpRequest66 $
req66% (
,66( )
HttpResponse66* 6
resp667 ;
)66; <
{77 
string88 
data88 
;88 
data:: 
=:: 
$str:: 
;:: 
for;; 
(;; 
int;; 
j;; 
=;; 
$num;; 
;;; 
j;; 
<;; 
$num;; 
;;; 
j;;  
++;;  "
);;" #
{<< 	
try== 
{>> 
int?? 
value?? 
=?? 
int?? 
.??  
Parse??  %
(??% &
data??& *
)??* +
;??+ ,
}@@ 
catchAA 
(AA 
FormatExceptionAA "
exceptNumberFormatAA# 5
)AA5 6
{BB 
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD "
.DD" #
LogLevelDD# +
.DD+ ,
WarnDD, 0
,DD0 1
exceptNumberFormatDD2 D
,DDD E
$strDDF `
+DDa b
dataDDc g
)DDg h
;DDh i
}EE 
}FF 	
}GG 
privateJJ 
voidJJ 
GoodB2GJJ 
(JJ 
HttpRequestJJ $
reqJJ% (
,JJ( )
HttpResponseJJ* 6
respJJ7 ;
)JJ; <
{KK 
stringLL 
dataLL 
;LL 
dataNN 
=NN 
reqNN 
.NN 
ParamsNN 
.NN 
GetNN 
(NN 
$strNN $
)NN$ %
;NN% &
forOO 
(OO 
intOO 
kOO 
=OO 
$numOO 
;OO 
kOO 
<OO 
$numOO 
;OO 
kOO  
++OO  "
)OO" #
{PP 	
tryQQ 
{RR 
intSS 
valueSS 
=SS 
intSS 
.SS  
ParseSS  %
(SS% &
dataSS& *
)SS* +
;SS+ ,
}TT 
catchUU 
(UU 
FormatExceptionUU "
exceptNumberFormatUU# 5
)UU5 6
{VV 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$strXXF j
+XXk l
exceptNumberFormatXXm 
)	XX 
;
XX 
}YY 
}ZZ 	
}[[ 
public]] 

override]] 
void]] 
Good]] 
(]] 
HttpRequest]] )
req]]* -
,]]- .
HttpResponse]]/ ;
resp]]< @
)]]@ A
{^^ 
GoodG2B__ 
(__ 
req__ 
,__ 
resp__ 
)__ 
;__ 
GoodB2G`` 
(`` 
req`` 
,`` 
resp`` 
)`` 
;`` 
}aa 
}cc 
}dd øD
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_21.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_21 G
:H I
AbstractTestCaseWebJ ]
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public   

override   
void   
Bad   
(   
HttpRequest   (
req  ) ,
,  , -
HttpResponse  . :
resp  ; ?
)  ? @
{!! 
string"" 
data"" 
;"" 
data$$ 
=$$ 
req$$ 
.$$ 
Params$$ 
.$$ 
Get$$ 
($$ 
$str$$ $
)$$$ %
;$$% &

badPrivate%% 
=%% 
true%% 
;%% 
BadSink&& 
(&& 
data&& 
,&& 
req&& 
,&& 
resp&&  
)&&  !
;&&! "
}'' 
private)) 
void)) 
BadSink)) 
()) 
string)) 
data))  $
,))% &
HttpRequest))' 2
req))3 6
,))6 7
HttpResponse))8 D
resp))E I
)))I J
{** 
if++ 

(++ 

badPrivate++ 
)++ 
{,, 	
try-- 
{.. 
int// 
value// 
=// 
int// 
.//  
Parse//  %
(//% &
data//& *
)//* +
;//+ ,
}00 
catch11 
(11 
FormatException11 "
exceptNumberFormat11# 5
)115 6
{22 
IO44 
.44 
Logger44 
.44 
Log44 
(44 
NLog44 "
.44" #
LogLevel44# +
.44+ ,
Warn44, 0
,440 1
exceptNumberFormat442 D
,44D E
$str44F `
+44a b
data44c g
)44g h
;44h i
}55 
}66 	
}77 
private:: 
bool:: 
goodB2G1Private::  
=::! "
false::# (
;::( )
private;; 
bool;; 
goodB2G2Private;;  
=;;! "
false;;# (
;;;( )
private<< 
bool<< 
goodG2BPrivate<< 
=<<  !
false<<" '
;<<' (
public>> 

override>> 
void>> 
Good>> 
(>> 
HttpRequest>> )
req>>* -
,>>- .
HttpResponse>>/ ;
resp>>< @
)>>@ A
{?? 
GoodB2G1@@ 
(@@ 
req@@ 
,@@ 
resp@@ 
)@@ 
;@@ 
GoodB2G2AA 
(AA 
reqAA 
,AA 
respAA 
)AA 
;AA 
GoodG2BBB 
(BB 
reqBB 
,BB 
respBB 
)BB 
;BB 
}CC 
privateFF 
voidFF 
GoodB2G1FF 
(FF 
HttpRequestFF %
reqFF& )
,FF) *
HttpResponseFF+ 7
respFF8 <
)FF< =
{GG 
stringHH 
dataHH 
;HH 
dataJJ 
=JJ 
reqJJ 
.JJ 
ParamsJJ 
.JJ 
GetJJ 
(JJ 
$strJJ $
)JJ$ %
;JJ% &
goodB2G1PrivateKK 
=KK 
falseKK 
;KK  
GoodB2G1SinkLL 
(LL 
dataLL 
,LL 
reqLL 
,LL  
respLL! %
)LL% &
;LL& '
}MM 
privateOO 
voidOO 
GoodB2G1SinkOO 
(OO 
stringOO $
dataOO% )
,OO* +
HttpRequestOO, 7
reqOO8 ;
,OO; <
HttpResponseOO= I
respOOJ N
)OON O
{PP 
ifQQ 

(QQ 
goodB2G1PrivateQQ 
)QQ 
{RR 	
IOTT 
.TT 
	WriteLineTT 
(TT 
$strTT /
)TT/ 0
;TT0 1
}UU 	
elseVV 
{WW 	
tryXX 
{YY 
intZZ 
valueZZ 
=ZZ 
intZZ 
.ZZ  
ParseZZ  %
(ZZ% &
dataZZ& *
)ZZ* +
;ZZ+ ,
}[[ 
catch\\ 
(\\ 
FormatException\\ "
exceptNumberFormat\\# 5
)\\5 6
{]] 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
exceptNumberFormat__2 D
,__D E
$str__F j
+__k l
exceptNumberFormat__m 
)	__ 
;
__ 
}`` 
}aa 	
}bb 
privateee 
voidee 
GoodB2G2ee 
(ee 
HttpRequestee %
reqee& )
,ee) *
HttpResponseee+ 7
respee8 <
)ee< =
{ff 
stringgg 
datagg 
;gg 
dataii 
=ii 
reqii 
.ii 
Paramsii 
.ii 
Getii 
(ii 
$strii $
)ii$ %
;ii% &
goodB2G2Privatejj 
=jj 
truejj 
;jj 
GoodB2G2Sinkkk 
(kk 
datakk 
,kk 
reqkk 
,kk  
respkk! %
)kk% &
;kk& '
}ll 
privatenn 
voidnn 
GoodB2G2Sinknn 
(nn 
stringnn $
datann% )
,nn* +
HttpRequestnn, 7
reqnn8 ;
,nn; <
HttpResponsenn= I
respnnJ N
)nnN O
{oo 
ifpp 

(pp 
goodB2G2Privatepp 
)pp 
{qq 	
tryrr 
{ss 
inttt 
valuett 
=tt 
inttt 
.tt  
Parsett  %
(tt% &
datatt& *
)tt* +
;tt+ ,
}uu 
catchvv 
(vv 
FormatExceptionvv "
exceptNumberFormatvv# 5
)vv5 6
{ww 
IOyy 
.yy 
Loggeryy 
.yy 
Logyy 
(yy 
NLogyy "
.yy" #
LogLevelyy# +
.yy+ ,
Warnyy, 0
,yy0 1
exceptNumberFormatyy2 D
,yyD E
$stryyF j
+yyk l
exceptNumberFormatyym 
)	yy 
;
yy 
}zz 
}{{ 	
}|| 
private 
void 
GoodG2B 
( 
HttpRequest $
req% (
,( )
HttpResponse* 6
resp7 ;
); <
{
 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
goodG2BPrivate
 
=
 
true
 
;
 
GoodG2BSink
 
(
 
data
 
,
 
req
 
,
 
resp
  $
)
$ %
;
% &
}
 
private
 
void
 
GoodG2BSink
 
(
 
string
 #
data
$ (
,
) *
HttpRequest
+ 6
req
7 :
,
: ;
HttpResponse
< H
resp
I M
)
M N
{
 
if
 

(
 
goodG2BPrivate
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
} 
} ç%
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_22a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_22a H
:I J
AbstractTestCaseWebK ^
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public   

override   
void   
Bad   
(   
HttpRequest   (
req  ) ,
,  , -
HttpResponse  . :
resp  ; ?
)  ? @
{!! 
string"" 
data"" 
="" 
null"" 
;"" 
data$$ 
=$$ 
req$$ 
.$$ 
Params$$ 
.$$ 
Get$$ 
($$ 
$str$$ $
)$$$ %
;$$% &
badPublicStatic%% 
=%% 
true%% 
;%% N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_22b&& J
.&&J K
BadSink&&K R
(&&R S
data&&S W
,&&X Y
req&&Z ]
,&&] ^
resp&&_ c
)&&c d
;&&d e
}'' 
public** 

static** 
bool**  
goodB2G1PublicStatic** +
=**, -
false**. 3
;**3 4
public++ 

static++ 
bool++  
goodB2G2PublicStatic++ +
=++, -
false++. 3
;++3 4
public,, 

static,, 
bool,, 
goodG2BPublicStatic,, *
=,,+ ,
false,,- 2
;,,2 3
public.. 

override.. 
void.. 
Good.. 
(.. 
HttpRequest.. )
req..* -
,..- .
HttpResponse../ ;
resp..< @
)..@ A
{// 
GoodB2G100 
(00 
req00 
,00 
resp00 
)00 
;00 
GoodB2G211 
(11 
req11 
,11 
resp11 
)11 
;11 
GoodG2B22 
(22 
req22 
,22 
resp22 
)22 
;22 
}33 
private66 
void66 
GoodB2G166 
(66 
HttpRequest66 %
req66& )
,66) *
HttpResponse66+ 7
resp668 <
)66< =
{77 
string88 
data88 
=88 
null88 
;88 
data:: 
=:: 
req:: 
.:: 
Params:: 
.:: 
Get:: 
(:: 
$str:: $
)::$ %
;::% & 
goodB2G1PublicStatic;; 
=;; 
false;; $
;;;$ %N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_22b<< J
.<<J K
GoodB2G1Sink<<K W
(<<W X
data<<X \
,<<] ^
req<<_ b
,<<b c
resp<<d h
)<<h i
;<<i j
}== 
private@@ 
void@@ 
GoodB2G2@@ 
(@@ 
HttpRequest@@ %
req@@& )
,@@) *
HttpResponse@@+ 7
resp@@8 <
)@@< =
{AA 
stringBB 
dataBB 
=BB 
nullBB 
;BB 
dataDD 
=DD 
reqDD 
.DD 
ParamsDD 
.DD 
GetDD 
(DD 
$strDD $
)DD$ %
;DD% & 
goodB2G2PublicStaticEE 
=EE 
trueEE #
;EE# $N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_22bFF J
.FFJ K
GoodB2G2SinkFFK W
(FFW X
dataFFX \
,FF] ^
reqFF_ b
,FFb c
respFFd h
)FFh i
;FFi j
}GG 
privateJJ 
voidJJ 
GoodG2BJJ 
(JJ 
HttpRequestJJ $
reqJJ% (
,JJ( )
HttpResponseJJ* 6
respJJ7 ;
)JJ; <
{KK 
stringLL 
dataLL 
=LL 
nullLL 
;LL 
dataNN 
=NN 
$strNN 
;NN 
goodG2BPublicStaticOO 
=OO 
trueOO "
;OO" #N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_22bPP J
.PPJ K
GoodG2BSinkPPK V
(PPV W
dataPPW [
,PP\ ]
reqPP^ a
,PPa b
respPPc g
)PPg h
;PPh i
}QQ 
}SS 
}TT ¼,
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_22b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_22b H
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
if 

( N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_22a N
.N O
badPublicStaticO ^
)^ _
{ 	
try   
{!! 
int"" 
value"" 
="" 
int"" 
.""  
Parse""  %
(""% &
data""& *
)""* +
;""+ ,
}## 
catch$$ 
($$ 
FormatException$$ "
exceptNumberFormat$$# 5
)$$5 6
{%% 
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' "
.''" #
LogLevel''# +
.''+ ,
Warn'', 0
,''0 1
exceptNumberFormat''2 D
,''D E
$str''F `
+''a b
data''c g
)''g h
;''h i
}(( 
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
}00 
public55 

static55 
void55 
GoodB2G1Sink55 #
(55# $
string55$ *
data55+ /
,550 1
HttpRequest552 =
req55> A
,55A B
HttpResponse55C O
resp55P T
)55T U
{66 
if77 

(77 N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_22a77 N
.77N O 
goodB2G1PublicStatic77O c
)77c d
{88 	
data;; 
=;; 
null;; 
;;; 
}<< 	
else== 
{>> 	
try?? 
{@@ 
intAA 
valueAA 
=AA 
intAA 
.AA  
ParseAA  %
(AA% &
dataAA& *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
FormatExceptionCC "
exceptNumberFormatCC# 5
)CC5 6
{DD 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
exceptNumberFormatFF2 D
,FFD E
$strFFF j
+FFk l
exceptNumberFormatFFm 
)	FF 
;
FF 
}GG 
}HH 	
}II 
publicLL 

staticLL 
voidLL 
GoodB2G2SinkLL #
(LL# $
stringLL$ *
dataLL+ /
,LL0 1
HttpRequestLL2 =
reqLL> A
,LLA B
HttpResponseLLC O
respLLP T
)LLT U
{MM 
ifNN 

(NN N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_22aNN N
.NNN O 
goodB2G2PublicStaticNNO c
)NNc d
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF j
+WWk l
exceptNumberFormatWWm 
)	WW 
;
WW 
}XX 
}YY 	
elseZZ 
{[[ 	
data^^ 
=^^ 
null^^ 
;^^ 
}__ 	
}`` 
publiccc 

staticcc 
voidcc 
GoodG2BSinkcc "
(cc" #
stringcc# )
datacc* .
,cc/ 0
HttpRequestcc1 <
reqcc= @
,cc@ A
HttpResponseccB N
respccO S
)ccS T
{dd 
ifee 

(ee N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_22aee N
.eeN O
goodG2BPublicStaticeeO b
)eeb c
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF `
+nna b
datannc g
)nng h
;nnh i
}oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
}ww 
}yy 
}zz (
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_31.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_31 G
:H I
AbstractTestCaseWebJ ]
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
dataCopy 
; 
{   	
string!! 
data!! 
;!! 
data## 
=## 
req## 
.## 
Params## 
.## 
Get## !
(##! "
$str##" (
)##( )
;##) *
dataCopy$$ 
=$$ 
data$$ 
;$$ 
}%% 	
{&& 	
string'' 
data'' 
='' 
dataCopy'' "
;''" #
try(( 
{)) 
int** 
value** 
=** 
int** 
.**  
Parse**  %
(**% &
data**& *
)*** +
;**+ ,
}++ 
catch,, 
(,, 
FormatException,, "
exceptNumberFormat,,# 5
),,5 6
{-- 
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// "
.//" #
LogLevel//# +
.//+ ,
Warn//, 0
,//0 1
exceptNumberFormat//2 D
,//D E
$str//F `
+//a b
data//c g
)//g h
;//h i
}00 
}11 	
}22 
public55 

override55 
void55 
Good55 
(55 
HttpRequest55 )
req55* -
,55- .
HttpResponse55/ ;
resp55< @
)55@ A
{66 
GoodG2B77 
(77 
req77 
,77 
resp77 
)77 
;77 
GoodB2G88 
(88 
req88 
,88 
resp88 
)88 
;88 
}99 
private<< 
void<< 
GoodG2B<< 
(<< 
HttpRequest<< $
req<<% (
,<<( )
HttpResponse<<* 6
resp<<7 ;
)<<; <
{== 
string>> 
dataCopy>> 
;>> 
{?? 	
string@@ 
data@@ 
;@@ 
dataBB 
=BB 
$strBB 
;BB 
dataCopyCC 
=CC 
dataCC 
;CC 
}DD 	
{EE 	
stringFF 
dataFF 
=FF 
dataCopyFF "
;FF" #
tryGG 
{HH 
intII 
valueII 
=II 
intII 
.II  
ParseII  %
(II% &
dataII& *
)II* +
;II+ ,
}JJ 
catchKK 
(KK 
FormatExceptionKK "
exceptNumberFormatKK# 5
)KK5 6
{LL 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptNumberFormatNN2 D
,NND E
$strNNF `
+NNa b
dataNNc g
)NNg h
;NNh i
}OO 
}PP 	
}QQ 
privateTT 
voidTT 
GoodB2GTT 
(TT 
HttpRequestTT $
reqTT% (
,TT( )
HttpResponseTT* 6
respTT7 ;
)TT; <
{UU 
stringVV 
dataCopyVV 
;VV 
{WW 	
stringXX 
dataXX 
;XX 
dataZZ 
=ZZ 
reqZZ 
.ZZ 
ParamsZZ 
.ZZ 
GetZZ !
(ZZ! "
$strZZ" (
)ZZ( )
;ZZ) *
dataCopy[[ 
=[[ 
data[[ 
;[[ 
}\\ 	
{]] 	
string^^ 
data^^ 
=^^ 
dataCopy^^ "
;^^" #
try__ 
{`` 
intaa 
valueaa 
=aa 
intaa 
.aa  
Parseaa  %
(aa% &
dataaa& *
)aa* +
;aa+ ,
}bb 
catchcc 
(cc 
FormatExceptioncc "
exceptNumberFormatcc# 5
)cc5 6
{dd 
IOff 
.ff 
Loggerff 
.ff 
Logff 
(ff 
NLogff "
.ff" #
LogLevelff# +
.ff+ ,
Warnff, 0
,ff0 1
exceptNumberFormatff2 D
,ffD E
$strffF j
+ffk l
exceptNumberFormatffm 
)	ff 
;
ff 
}gg 
}hh 	
}ii 
}kk 
}ll Æ,
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_41.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_41 G
:H I
AbstractTestCaseWebJ ]
{ 
private 
static 
void 
BadSink 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public** 

override** 
void** 
Bad** 
(** 
HttpRequest** (
req**) ,
,**, -
HttpResponse**. :
resp**; ?
)**? @
{++ 
string,, 
data,, 
;,, 
data.. 
=.. 
req.. 
... 
Params.. 
... 
Get.. 
(.. 
$str.. $
)..$ %
;..% &
BadSink// 
(// 
data// 
,// 
req// 
,// 
resp//  
)//! "
;//" #
}00 
public33 

override33 
void33 
Good33 
(33 
HttpRequest33 )
req33* -
,33- .
HttpResponse33/ ;
resp33< @
)33@ A
{44 
GoodG2B55 
(55 
req55 
,55 
resp55 
)55 
;55 
GoodB2G66 
(66 
req66 
,66 
resp66 
)66 
;66 
}77 
private99 
static99 
void99 
GoodG2BSink99 #
(99# $
string99$ *
data99+ /
,990 1
HttpRequest992 =
req99> A
,99A B
HttpResponse99C O
resp99P T
)99T U
{:: 
try;; 
{<< 	
int== 
value== 
=== 
int== 
.== 
Parse== !
(==! "
data==" &
)==& '
;==' (
}>> 	
catch?? 
(?? 
FormatException?? 
exceptNumberFormat?? 1
)??1 2
{@@ 	
IOBB 
.BB 
LoggerBB 
.BB 
LogBB 
(BB 
NLogBB 
.BB 
LogLevelBB '
.BB' (
WarnBB( ,
,BB, -
exceptNumberFormatBB. @
,BB@ A
$strBBB \
+BB] ^
dataBB_ c
)BBc d
;BBd e
}CC 	
}DD 
privateGG 
staticGG 
voidGG 
GoodG2BGG 
(GG  
HttpRequestGG  +
reqGG, /
,GG/ 0
HttpResponseGG1 =
respGG> B
)GGB C
{HH 
stringII 
dataII 
;II 
dataKK 
=KK 
$strKK 
;KK 
GoodG2BSinkLL 
(LL 
dataLL 
,LL 
reqLL 
,LL 
respLL  $
)LL% &
;LL& '
}MM 
privateOO 
staticOO 
voidOO 
GoodB2GSinkOO #
(OO# $
stringOO$ *
dataOO+ /
,OO0 1
HttpRequestOO2 =
reqOO> A
,OOA B
HttpResponseOOC O
respOOP T
)OOT U
{PP 
tryQQ 
{RR 	
intSS 
valueSS 
=SS 
intSS 
.SS 
ParseSS !
(SS! "
dataSS" &
)SS& '
;SS' (
}TT 	
catchUU 
(UU 
FormatExceptionUU 
exceptNumberFormatUU 1
)UU1 2
{VV 	
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX 
.XX 
LogLevelXX '
.XX' (
WarnXX( ,
,XX, -
exceptNumberFormatXX. @
,XX@ A
$strXXB f
+XXg h
exceptNumberFormatXXi {
)XX{ |
;XX| }
}YY 	
}ZZ 
private]] 
static]] 
void]] 
GoodB2G]] 
(]]  
HttpRequest]]  +
req]], /
,]]/ 0
HttpResponse]]1 =
resp]]> B
)]]B C
{^^ 
string__ 
data__ 
;__ 
dataaa 
=aa 
reqaa 
.aa 
Paramsaa 
.aa 
Getaa 
(aa 
$straa $
)aa$ %
;aa% &
GoodB2GSinkbb 
(bb 
databb 
,bb 
reqbb 
,bb 
respbb  $
)bb% &
;bb& '
}cc 
}ee 
}ff -
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_42.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_42 G
:H I
AbstractTestCaseWebJ ]
{ 
private 
static 
string 
	BadSource #
(# $
HttpRequest$ /
req0 3
,3 4
HttpResponse5 A
respB F
)F G
{ 
string 
data 
; 
data!! 
=!! 
req!! 
.!! 
Params!! 
.!! 
Get!! 
(!! 
$str!! $
)!!$ %
;!!% &
return"" 
data"" 
;"" 
}## 
public%% 

override%% 
void%% 
Bad%% 
(%% 
HttpRequest%% (
req%%) ,
,%%, -
HttpResponse%%. :
resp%%; ?
)%%? @
{&& 
string'' 
data'' 
='' 
	BadSource'' 
(''  
req''  #
,''# $
resp''% )
)'') *
;''* +
try(( 
{)) 	
int** 
value** 
=** 
int** 
.** 
Parse** !
(**! "
data**" &
)**& '
;**' (
}++ 	
catch,, 
(,, 
FormatException,, 
exceptNumberFormat,, 1
),,1 2
{-- 	
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// 
.// 
LogLevel// '
.//' (
Warn//( ,
,//, -
exceptNumberFormat//. @
,//@ A
$str//B \
+//] ^
data//_ c
)//c d
;//d e
}00 	
}11 
private55 
static55 
string55 
GoodG2BSource55 '
(55' (
HttpRequest55( 3
req554 7
,557 8
HttpResponse559 E
resp55F J
)55J K
{66 
string77 
data77 
;77 
data99 
=99 
$str99 
;99 
return:: 
data:: 
;:: 
};; 
private== 
static== 
void== 
GoodG2B== 
(==  
HttpRequest==  +
req==, /
,==/ 0
HttpResponse==1 =
resp==> B
)==B C
{>> 
string?? 
data?? 
=?? 
GoodG2BSource?? #
(??# $
req??$ '
,??' (
resp??) -
)??- .
;??. /
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB \
+GG] ^
dataGG_ c
)GGc d
;GGd e
}HH 	
}II 
privateLL 
staticLL 
stringLL 
GoodB2GSourceLL '
(LL' (
HttpRequestLL( 3
reqLL4 7
,LL7 8
HttpResponseLL9 E
respLLF J
)LLJ K
{MM 
stringNN 
dataNN 
;NN 
dataPP 
=PP 
reqPP 
.PP 
ParamsPP 
.PP 
GetPP 
(PP 
$strPP $
)PP$ %
;PP% &
returnQQ 
dataQQ 
;QQ 
}RR 
privateTT 
staticTT 
voidTT 
GoodB2GTT 
(TT  
HttpRequestTT  +
reqTT, /
,TT/ 0
HttpResponseTT1 =
respTT> B
)TTB C
{UU 
stringVV 
dataVV 
=VV 
GoodB2GSourceVV #
(VV# $
reqVV$ '
,VV' (
respVV) -
)VV- .
;VV. /
tryWW 
{XX 	
intYY 
valueYY 
=YY 
intYY 
.YY 
ParseYY !
(YY! "
dataYY" &
)YY& '
;YY' (
}ZZ 	
catch[[ 
([[ 
FormatException[[ 
exceptNumberFormat[[ 1
)[[1 2
{\\ 	
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ 
.^^ 
LogLevel^^ '
.^^' (
Warn^^( ,
,^^, -
exceptNumberFormat^^. @
,^^@ A
$str^^B f
+^^g h
exceptNumberFormat^^i {
)^^{ |
;^^| }
}__ 	
}`` 
publicbb 

overridebb 
voidbb 
Goodbb 
(bb 
HttpRequestbb )
reqbb* -
,bb- .
HttpResponsebb/ ;
respbb< @
)bb@ A
{cc 
GoodG2Bdd 
(dd 
reqdd 
,dd 
respdd 
)dd 
;dd 
GoodB2Gee 
(ee 
reqee 
,ee 
respee 
)ee 
;ee 
}ff 
}hh 
}ii ¹/
ÎC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_45.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class M
ACWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_45 G
:H I
AbstractTestCaseWebJ ]
{ 
private 
string 
dataBad 
; 
private 
string 
dataGoodG2B 
; 
private 
string 
dataGoodB2G 
; 
private!! 
void!! 
BadSink!! 
(!! 
HttpRequest!! $
req!!% (
,!!( )
HttpResponse!!* 6
resp!!7 ;
)!!; <
{"" 
string## 
data## 
=## 
dataBad## 
;## 
try$$ 
{%% 	
int&& 
value&& 
=&& 
int&& 
.&& 
Parse&& !
(&&! "
data&&" &
)&&& '
;&&' (
}'' 	
catch(( 
((( 
FormatException(( 
exceptNumberFormat(( 1
)((1 2
{)) 	
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ 
.++ 
LogLevel++ '
.++' (
Warn++( ,
,++, -
exceptNumberFormat++. @
,++@ A
$str++B \
+++] ^
data++_ c
)++c d
;++d e
},, 	
}-- 
public// 

override// 
void// 
Bad// 
(// 
HttpRequest// (
req//) ,
,//, -
HttpResponse//. :
resp//; ?
)//? @
{00 
string11 
data11 
;11 
data33 
=33 
req33 
.33 
Params33 
.33 
Get33 
(33 
$str33 $
)33$ %
;33% &
dataBad44 
=44 
data44 
;44 
BadSink55 
(55 
req55 
,55 
resp55 
)55 
;55 
}66 
public99 

override99 
void99 
Good99 
(99 
HttpRequest99 )
req99* -
,99- .
HttpResponse99/ ;
resp99< @
)99@ A
{:: 
GoodG2B;; 
(;; 
req;; 
,;; 
resp;; 
);; 
;;; 
GoodB2G<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
}== 
private?? 
void?? 
GoodG2BSink?? 
(?? 
HttpRequest?? (
req??) ,
,??, -
HttpResponse??. :
resp??; ?
)??? @
{@@ 
stringAA 
dataAA 
=AA 
dataGoodG2BAA !
;AA! "
tryBB 
{CC 	
intDD 
valueDD 
=DD 
intDD 
.DD 
ParseDD !
(DD! "
dataDD" &
)DD& '
;DD' (
}EE 	
catchFF 
(FF 
FormatExceptionFF 
exceptNumberFormatFF 1
)FF1 2
{GG 	
IOII 
.II 
LoggerII 
.II 
LogII 
(II 
NLogII 
.II 
LogLevelII '
.II' (
WarnII( ,
,II, -
exceptNumberFormatII. @
,II@ A
$strIIB \
+II] ^
dataII_ c
)IIc d
;IId e
}JJ 	
}KK 
privateNN 
voidNN 
GoodG2BNN 
(NN 
HttpRequestNN $
reqNN% (
,NN( )
HttpResponseNN* 6
respNN7 ;
)NN; <
{OO 
stringPP 
dataPP 
;PP 
dataRR 
=RR 
$strRR 
;RR 
dataGoodG2BSS 
=SS 
dataSS 
;SS 
GoodG2BSinkTT 
(TT 
reqTT 
,TT 
respTT 
)TT 
;TT 
}UU 
privateWW 
voidWW 
GoodB2GSinkWW 
(WW 
HttpRequestWW (
reqWW) ,
,WW, -
HttpResponseWW. :
respWW; ?
)WW? @
{XX 
stringYY 
dataYY 
=YY 
dataGoodB2GYY !
;YY! "
tryZZ 
{[[ 	
int\\ 
value\\ 
=\\ 
int\\ 
.\\ 
Parse\\ !
(\\! "
data\\" &
)\\& '
;\\' (
}]] 	
catch^^ 
(^^ 
FormatException^^ 
exceptNumberFormat^^ 1
)^^1 2
{__ 	
IOaa 
.aa 
Loggeraa 
.aa 
Logaa 
(aa 
NLogaa 
.aa 
LogLevelaa '
.aa' (
Warnaa( ,
,aa, -
exceptNumberFormataa. @
,aa@ A
$straaB f
+aag h
exceptNumberFormataai {
)aa{ |
;aa| }
}bb 	
}cc 
privateff 
voidff 
GoodB2Gff 
(ff 
HttpRequestff $
reqff% (
,ff( )
HttpResponseff* 6
respff7 ;
)ff; <
{gg 
stringhh 
datahh 
;hh 
datajj 
=jj 
reqjj 
.jj 
Paramsjj 
.jj 
Getjj 
(jj 
$strjj $
)jj$ %
;jj% &
dataGoodB2Gkk 
=kk 
datakk 
;kk 
GoodB2GSinkll 
(ll 
reqll 
,ll 
respll 
)ll 
;ll 
}mm 
}oo 
}pp º
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_51a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_51a H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data!! 
=!! 
req!! 
.!! 
Params!! 
.!! 
Get!! 
(!! 
$str!! $
)!!$ %
;!!% &N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_51b"" J
.""J K
BadSink""K R
(""R S
data""S W
,""X Y
req""Z ]
,""] ^
resp""_ c
)""d e
;""e f
}## 
public&& 

override&& 
void&& 
Good&& 
(&& 
HttpRequest&& )
req&&* -
,&&- .
HttpResponse&&/ ;
resp&&< @
)&&@ A
{'' 
GoodG2B(( 
((( 
req(( 
,(( 
resp(( 
)(( 
;(( 
GoodB2G)) 
()) 
req)) 
,)) 
resp)) 
))) 
;)) 
}** 
private-- 
void-- 
GoodG2B-- 
(-- 
HttpRequest-- $
req--% (
,--( )
HttpResponse--* 6
resp--7 ;
)--; <
{.. 
string// 
data// 
;// 
data11 
=11 
$str11 
;11 N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_51b22 J
.22J K
GoodG2BSink22K V
(22V W
data22W [
,22\ ]
req22^ a
,22a b
resp22c g
)22h i
;22i j
}33 
private66 
void66 
GoodB2G66 
(66 
HttpRequest66 $
req66% (
,66( )
HttpResponse66* 6
resp667 ;
)66; <
{77 
string88 
data88 
;88 
data:: 
=:: 
req:: 
.:: 
Params:: 
.:: 
Get:: 
(:: 
$str:: $
)::$ %
;::% &N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_51b;; J
.;;J K
GoodB2GSink;;K V
(;;V W
data;;W [
,;;\ ]
req;;^ a
,;;a b
resp;;c g
);;h i
;;;i j
}<< 
}>> 
}?? Þ
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_51b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_51b H
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
,,,/ 0
HttpRequest,,1 <
req,,= @
,,,@ A
HttpResponse,,B N
resp,,O S
),,S T
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
,::/ 0
HttpRequest::1 <
req::= @
,::@ A
HttpResponse::B N
resp::O S
)::S T
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH º
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_52a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_52a H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data!! 
=!! 
req!! 
.!! 
Params!! 
.!! 
Get!! 
(!! 
$str!! $
)!!$ %
;!!% &N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_52b"" J
.""J K
BadSink""K R
(""R S
data""S W
,""X Y
req""Z ]
,""] ^
resp""_ c
)""c d
;""d e
}## 
public&& 

override&& 
void&& 
Good&& 
(&& 
HttpRequest&& )
req&&* -
,&&- .
HttpResponse&&/ ;
resp&&< @
)&&@ A
{'' 
GoodG2B(( 
((( 
req(( 
,(( 
resp(( 
)(( 
;(( 
GoodB2G)) 
()) 
req)) 
,)) 
resp)) 
))) 
;)) 
}** 
private-- 
void-- 
GoodG2B-- 
(-- 
HttpRequest-- $
req--% (
,--( )
HttpResponse--* 6
resp--7 ;
)--; <
{.. 
string// 
data// 
;// 
data11 
=11 
$str11 
;11 N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_52b22 J
.22J K
GoodG2BSink22K V
(22V W
data22W [
,22\ ]
req22^ a
,22a b
resp22c g
)22g h
;22h i
}33 
private66 
void66 
GoodB2G66 
(66 
HttpRequest66 $
req66% (
,66( )
HttpResponse66* 6
resp667 ;
)66; <
{77 
string88 
data88 
;88 
data:: 
=:: 
req:: 
.:: 
Params:: 
.:: 
Get:: 
(:: 
$str:: $
)::$ %
;::% &N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_52b;; J
.;;J K
GoodB2GSink;;K V
(;;V W
data;;W [
,;;\ ]
req;;^ a
,;;a b
resp;;c g
);;g h
;;;h i
}<< 
}>> 
}?? ¹
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_52b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_52b H
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_52c J
.J K
BadSinkK R
(R S
dataS W
,X Y
reqZ ]
,] ^
resp_ c
)c d
;d e
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_52c&& J
.&&J K
GoodG2BSink&&K V
(&&V W
data&&W [
,&&\ ]
req&&^ a
,&&a b
resp&&c g
)&&g h
;&&h i
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_52c,, J
.,,J K
GoodB2GSink,,K V
(,,V W
data,,W [
,,,\ ]
req,,^ a
,,,a b
resp,,c g
),,g h
;,,h i
}-- 
}// 
}00 Þ
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_52c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_52c H
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
,,,/ 0
HttpRequest,,1 <
req,,= @
,,,@ A
HttpResponse,,B N
resp,,O S
),,S T
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
,::/ 0
HttpRequest::1 <
req::= @
,::@ A
HttpResponse::B N
resp::O S
)::S T
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH º
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53a H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data!! 
=!! 
req!! 
.!! 
Params!! 
.!! 
Get!! 
(!! 
$str!! $
)!!$ %
;!!% &N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53b"" J
.""J K
BadSink""K R
(""R S
data""S W
,""X Y
req""Z ]
,""] ^
resp""_ c
)""c d
;""d e
}## 
public&& 

override&& 
void&& 
Good&& 
(&& 
HttpRequest&& )
req&&* -
,&&- .
HttpResponse&&/ ;
resp&&< @
)&&@ A
{'' 
GoodG2B(( 
((( 
req(( 
,(( 
resp(( 
)(( 
;(( 
GoodB2G)) 
()) 
req)) 
,)) 
resp)) 
))) 
;)) 
}** 
private-- 
void-- 
GoodG2B-- 
(-- 
HttpRequest-- $
req--% (
,--( )
HttpResponse--* 6
resp--7 ;
)--; <
{.. 
string// 
data// 
;// 
data11 
=11 
$str11 
;11 N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53b22 J
.22J K
GoodG2BSink22K V
(22V W
data22W [
,22\ ]
req22^ a
,22a b
resp22c g
)22g h
;22h i
}33 
private66 
void66 
GoodB2G66 
(66 
HttpRequest66 $
req66% (
,66( )
HttpResponse66* 6
resp667 ;
)66; <
{77 
string88 
data88 
;88 
data:: 
=:: 
req:: 
.:: 
Params:: 
.:: 
Get:: 
(:: 
$str:: $
)::$ %
;::% &N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53b;; J
.;;J K
GoodB2GSink;;K V
(;;V W
data;;W [
,;;\ ]
req;;^ a
,;;a b
resp;;c g
);;g h
;;;h i
}<< 
}>> 
}?? ¹
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53b H
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53c J
.J K
BadSinkK R
(R S
dataS W
,X Y
reqZ ]
,] ^
resp_ c
)c d
;d e
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53c&& J
.&&J K
GoodG2BSink&&K V
(&&V W
data&&W [
,&&\ ]
req&&^ a
,&&a b
resp&&c g
)&&g h
;&&h i
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53c,, J
.,,J K
GoodB2GSink,,K V
(,,V W
data,,W [
,,,\ ]
req,,^ a
,,,a b
resp,,c g
),,g h
;,,h i
}-- 
}// 
}00 ¹
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53c H
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53d J
.J K
BadSinkK R
(R S
dataS W
,X Y
reqZ ]
,] ^
resp_ c
)c d
;d e
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53d&& J
.&&J K
GoodG2BSink&&K V
(&&V W
data&&W [
,&&\ ]
req&&^ a
,&&a b
resp&&c g
)&&g h
;&&h i
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53d,, J
.,,J K
GoodB2GSink,,K V
(,,V W
data,,W [
,,,\ ]
req,,^ a
,,,a b
resp,,c g
),,g h
;,,h i
}-- 
}// 
}00 Þ
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_53d H
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
,,,/ 0
HttpRequest,,1 <
req,,= @
,,,@ A
HttpResponse,,B N
resp,,O S
),,S T
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
,::/ 0
HttpRequest::1 <
req::= @
,::@ A
HttpResponse::B N
resp::O S
)::S T
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH º
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54a H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data!! 
=!! 
req!! 
.!! 
Params!! 
.!! 
Get!! 
(!! 
$str!! $
)!!$ %
;!!% &N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54b"" J
.""J K
BadSink""K R
(""R S
data""S W
,""X Y
req""Z ]
,""] ^
resp""_ c
)""c d
;""d e
}## 
public&& 

override&& 
void&& 
Good&& 
(&& 
HttpRequest&& )
req&&* -
,&&- .
HttpResponse&&/ ;
resp&&< @
)&&@ A
{'' 
GoodG2B(( 
((( 
req(( 
,(( 
resp(( 
)(( 
;(( 
GoodB2G)) 
()) 
req)) 
,)) 
resp)) 
))) 
;)) 
}** 
private-- 
void-- 
GoodG2B-- 
(-- 
HttpRequest-- $
req--% (
,--( )
HttpResponse--* 6
resp--7 ;
)--; <
{.. 
string// 
data// 
;// 
data11 
=11 
$str11 
;11 N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54b22 J
.22J K
GoodG2BSink22K V
(22V W
data22W [
,22\ ]
req22^ a
,22a b
resp22c g
)22g h
;22h i
}33 
private66 
void66 
GoodB2G66 
(66 
HttpRequest66 $
req66% (
,66( )
HttpResponse66* 6
resp667 ;
)66; <
{77 
string88 
data88 
;88 
data:: 
=:: 
req:: 
.:: 
Params:: 
.:: 
Get:: 
(:: 
$str:: $
)::$ %
;::% &N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54b;; J
.;;J K
GoodB2GSink;;K V
(;;V W
data;;W [
,;;\ ]
req;;^ a
,;;a b
resp;;c g
);;g h
;;;h i
}<< 
}>> 
}?? ¹
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54b H
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54c J
.J K
BadSinkK R
(R S
dataS W
,X Y
reqZ ]
,] ^
resp_ c
)c d
;d e
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54c&& J
.&&J K
GoodG2BSink&&K V
(&&V W
data&&W [
,&&\ ]
req&&^ a
,&&a b
resp&&c g
)&&g h
;&&h i
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54c,, J
.,,J K
GoodB2GSink,,K V
(,,V W
data,,W [
,,,\ ]
req,,^ a
,,,a b
resp,,c g
),,g h
;,,h i
}-- 
}// 
}00 ¹
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54c H
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54d J
.J K
BadSinkK R
(R S
dataS W
,X Y
reqZ ]
,] ^
resp_ c
)c d
;d e
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54d&& J
.&&J K
GoodG2BSink&&K V
(&&V W
data&&W [
,&&\ ]
req&&^ a
,&&a b
resp&&c g
)&&g h
;&&h i
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54d,, J
.,,J K
GoodB2GSink,,K V
(,,V W
data,,W [
,,,\ ]
req,,^ a
,,,a b
resp,,c g
),,g h
;,,h i
}-- 
}// 
}00 ¹
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54d H
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54e J
.J K
BadSinkK R
(R S
dataS W
,X Y
reqZ ]
,] ^
resp_ c
)c d
;d e
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54e&& J
.&&J K
GoodG2BSink&&K V
(&&V W
data&&W [
,&&\ ]
req&&^ a
,&&a b
resp&&c g
)&&g h
;&&h i
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54e,, J
.,,J K
GoodB2GSink,,K V
(,,V W
data,,W [
,,,\ ]
req,,^ a
,,,a b
resp,,c g
),,g h
;,,h i
}-- 
}// 
}00 Þ
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54e.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_54e H
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
,,,/ 0
HttpRequest,,1 <
req,,= @
,,,@ A
HttpResponse,,B N
resp,,O S
),,S T
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
,::/ 0
HttpRequest::1 <
req::= @
,::@ A
HttpResponse::B N
resp::O S
)::S T
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH ä#
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_61a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_61a H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
= N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_61b X
.X Y
	BadSourceY b
(b c
reqc f
,f g
resph l
)l m
;m n
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
HttpRequest++ )
req++* -
,++- .
HttpResponse++/ ;
resp++< @
)++@ A
{,, 
GoodG2B-- 
(-- 
req-- 
,-- 
resp-- 
)-- 
;-- 
GoodB2G.. 
(.. 
req.. 
,.. 
resp.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
HttpRequest22  +
req22, /
,22/ 0
HttpResponse221 =
resp22> B
)22B C
{33 
string44 
data44 
=44 N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_61b44 X
.44X Y
GoodG2BSource44Y f
(44f g
req44g j
,44j k
resp44l p
)44p q
;44q r
try55 
{66 	
int77 
value77 
=77 
int77 
.77 
Parse77 !
(77! "
data77" &
)77& '
;77' (
}88 	
catch99 
(99 
FormatException99 
exceptNumberFormat99 1
)991 2
{:: 	
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< 
.<< 
LogLevel<< '
.<<' (
Warn<<( ,
,<<, -
exceptNumberFormat<<. @
,<<@ A
$str<<B \
+<<] ^
data<<_ c
)<<c d
;<<d e
}== 	
}>> 
privateAA 
staticAA 
voidAA 
GoodB2GAA 
(AA  
HttpRequestAA  +
reqAA, /
,AA/ 0
HttpResponseAA1 =
respAA> B
)AAB C
{BB 
stringCC 
dataCC 
=CC N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_61bCC X
.CCX Y
GoodB2GSourceCCY f
(CCf g
reqCCg j
,CCj k
respCCl p
)CCp q
;CCq r
tryDD 
{EE 	
intFF 
valueFF 
=FF 
intFF 
.FF 
ParseFF !
(FF! "
dataFF" &
)FF& '
;FF' (
}GG 	
catchHH 
(HH 
FormatExceptionHH 
exceptNumberFormatHH 1
)HH1 2
{II 	
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK 
.KK 
LogLevelKK '
.KK' (
WarnKK( ,
,KK, -
exceptNumberFormatKK. @
,KK@ A
$strKKB f
+KKg h
exceptNumberFormatKKi {
)KK{ |
;KK| }
}LL 	
}MM 
}OO 
}PP ª
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_61b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_61b H
{ 
public 

static 
string 
	BadSource "
(" #
HttpRequest# .
req/ 2
,2 3
HttpResponse4 @
respA E
)E F
{ 
string 
data 
; 
data!! 
=!! 
req!! 
.!! 
Params!! 
.!! 
Get!! 
(!! 
$str!! $
)!!$ %
;!!% &
return"" 
data"" 
;"" 
}## 
public(( 

static(( 
string(( 
GoodG2BSource(( &
(((& '
HttpRequest((' 2
req((3 6
,((6 7
HttpResponse((8 D
resp((E I
)((I J
{)) 
string** 
data** 
;** 
data,, 
=,, 
$str,, 
;,, 
return-- 
data-- 
;-- 
}.. 
public11 

static11 
string11 
GoodB2GSource11 &
(11& '
HttpRequest11' 2
req113 6
,116 7
HttpResponse118 D
resp11E I
)11I J
{22 
string33 
data33 
;33 
data55 
=55 
req55 
.55 
Params55 
.55 
Get55 
(55 
$str55 $
)55$ %
;55% &
return66 
data66 
;66 
}77 
}99 
}:: 
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_66a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_66a H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data!! 
=!! 
req!! 
.!! 
Params!! 
.!! 
Get!! 
(!! 
$str!! $
)!!$ %
;!!% &
string"" 
["" 
]"" 
	dataArray"" 
="" 
new""  
string""! '
[""' (
$num""( )
]"") *
;""* +
	dataArray## 
[## 
$num## 
]## 
=## 
data## 
;## N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_66b$$ J
.$$J K
BadSink$$K R
($$R S
	dataArray$$S \
,$$] ^
req$$_ b
,$$b c
resp$$d h
)$$i j
;$$j k
}%% 
public(( 

override(( 
void(( 
Good(( 
((( 
HttpRequest(( )
req((* -
,((- .
HttpResponse((/ ;
resp((< @
)((@ A
{)) 
GoodG2B** 
(** 
req** 
,** 
resp** 
)** 
;** 
GoodB2G++ 
(++ 
req++ 
,++ 
resp++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
HttpRequest//  +
req//, /
,/// 0
HttpResponse//1 =
resp//> B
)//B C
{00 
string11 
data11 
;11 
data33 
=33 
$str33 
;33 
string44 
[44 
]44 
	dataArray44 
=44 
new44  
string44! '
[44' (
$num44( )
]44) *
;44* +
	dataArray55 
[55 
$num55 
]55 
=55 
data55 
;55 N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_66b66 J
.66J K
GoodG2BSink66K V
(66V W
	dataArray66W `
,66a b
req66c f
,66f g
resp66h l
)66m n
;66n o
}77 
private:: 
static:: 
void:: 
GoodB2G:: 
(::  
HttpRequest::  +
req::, /
,::/ 0
HttpResponse::1 =
resp::> B
)::B C
{;; 
string<< 
data<< 
;<< 
data>> 
=>> 
req>> 
.>> 
Params>> 
.>> 
Get>> 
(>> 
$str>> $
)>>$ %
;>>% &
string?? 
[?? 
]?? 
	dataArray?? 
=?? 
new??  
string??! '
[??' (
$num??( )
]??) *
;??* +
	dataArray@@ 
[@@ 
$num@@ 
]@@ 
=@@ 
data@@ 
;@@ N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_66bAA J
.AAJ K
GoodB2GSinkAAK V
(AAV W
	dataArrayAAW `
,AAa b
reqAAc f
,AAf g
respAAh l
)AAm n
;AAn o
}BB 
}DD 
}EE è
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_66b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_66b H
{ 
public 

static 
void 
BadSink 
( 
string %
[% &
]& '
	dataArray( 1
,2 3
HttpRequest4 ?
req@ C
,C D
HttpResponseE Q
respR V
)V W
{ 
string 
data 
= 
	dataArray 
[  
$num  !
]! "
;" #
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
string--# )
[--) *
]--* +
	dataArray--, 5
,--6 7
HttpRequest--8 C
req--D G
,--G H
HttpResponse--I U
resp--V Z
)--Z [
{.. 
string// 
data// 
=// 
	dataArray// 
[//  
$num//  !
]//! "
;//" #
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
string<<# )
[<<) *
]<<* +
	dataArray<<, 5
,<<6 7
HttpRequest<<8 C
req<<D G
,<<G H
HttpResponse<<I U
resp<<V Z
)<<Z [
{== 
string>> 
data>> 
=>> 
	dataArray>> 
[>>  
$num>>  !
]>>! "
;>>" #
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK È
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_67a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_67a H
:I J
AbstractTestCaseWebK ^
{ 
public 

class 
	Container 
{ 
public 
string 
containerOne "
;" #
}   
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
string$$ 
data$$ 
;$$ 
data&& 
=&& 
req&& 
.&& 
Params&& 
.&& 
Get&& 
(&& 
$str&& $
)&&$ %
;&&% &
	Container'' 
dataContainer'' 
=''  !
new''" %
	Container''& /
(''/ 0
)''0 1
;''1 2
dataContainer(( 
.(( 
containerOne(( "
=((# $
data((% )
;(() *N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_67b)) J
.))J K
BadSink))K R
())R S
dataContainer))S `
,))a b
req))c f
,))f g
resp))h l
)))m n
;))n o
}** 
public-- 

override-- 
void-- 
Good-- 
(-- 
HttpRequest-- )
req--* -
,--- .
HttpResponse--/ ;
resp--< @
)--@ A
{.. 
GoodG2B// 
(// 
req// 
,// 
resp// 
)// 
;// 
GoodB2G00 
(00 
req00 
,00 
resp00 
)00 
;00 
}11 
private44 
static44 
void44 
GoodG2B44 
(44  
HttpRequest44  +
req44, /
,44/ 0
HttpResponse441 =
resp44> B
)44B C
{55 
string66 
data66 
;66 
data88 
=88 
$str88 
;88 
	Container99 
dataContainer99 
=99  !
new99" %
	Container99& /
(99/ 0
)990 1
;991 2
dataContainer:: 
.:: 
containerOne:: "
=::# $
data::% )
;::) *N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_67b;; J
.;;J K
GoodG2BSink;;K V
(;;V W
dataContainer;;W d
,;;e f
req;;g j
,;;j k
resp;;l p
);;q r
;;;r s
}<< 
private?? 
static?? 
void?? 
GoodB2G?? 
(??  
HttpRequest??  +
req??, /
,??/ 0
HttpResponse??1 =
resp??> B
)??B C
{@@ 
stringAA 
dataAA 
;AA 
dataCC 
=CC 
reqCC 
.CC 
ParamsCC 
.CC 
GetCC 
(CC 
$strCC $
)CC$ %
;CC% &
	ContainerDD 
dataContainerDD 
=DD  !
newDD" %
	ContainerDD& /
(DD/ 0
)DD0 1
;DD1 2
dataContainerEE 
.EE 
containerOneEE "
=EE# $
dataEE% )
;EE) *N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_67bFF J
.FFJ K
GoodB2GSinkFFK V
(FFV W
dataContainerFFW d
,FFe f
reqFFg j
,FFj k
respFFl p
)FFq r
;FFr s
}GG 
}II 
}JJ Ú 
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_67b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_67b H
{ 
public 

static 
void 
BadSink 
( N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_67a a
.a b
	Containerb k
dataContainerl y
,z {
HttpRequest	| 
req
 
,
 
HttpResponse
 
resp
 
)
 
{ 
string 
data 
= 
dataContainer #
.# $
containerOne$ 0
;0 1
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_67a--# e
.--e f
	Container--f o
dataContainer--p }
,--~ 
HttpRequest
-- 
req
-- 
,
-- 
HttpResponse
-- 
resp
-- ¢
)
--¢ £
{.. 
string// 
data// 
=// 
dataContainer// #
.//# $
containerOne//$ 0
;//0 1
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_67a<<# e
.<<e f
	Container<<f o
dataContainer<<p }
,<<~ 
HttpRequest
<< 
req
<< 
,
<< 
HttpResponse
<< 
resp
<< ¢
)
<<¢ £
{== 
string>> 
data>> 
=>> 
dataContainer>> #
.>># $
containerOne>>$ 0
;>>0 1
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK ½
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_68a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_68a H
:I J
AbstractTestCaseWebK ^
{ 
public 

static 
string 
data 
; 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{   
data"" 
="" 
req"" 
."" 
Params"" 
."" 
Get"" 
("" 
$str"" $
)""$ %
;""% &N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_68b## J
.##J K
BadSink##K R
(##R S
req##S V
,##V W
resp##X \
)##\ ]
;##] ^
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
HttpRequest'' )
req''* -
,''- .
HttpResponse''/ ;
resp''< @
)''@ A
{(( 
GoodG2B)) 
()) 
req)) 
,)) 
resp)) 
))) 
;)) 
GoodB2G** 
(** 
req** 
,** 
resp** 
)** 
;** 
}++ 
private.. 
static.. 
void.. 
GoodG2B.. 
(..  
HttpRequest..  +
req.., /
,../ 0
HttpResponse..1 =
resp..> B
)..B C
{// 
data11 
=11 
$str11 
;11 N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_68b22 J
.22J K
GoodG2BSink22K V
(22V W
req22W Z
,22Z [
resp22\ `
)22` a
;22a b
}33 
private66 
static66 
void66 
GoodB2G66 
(66  
HttpRequest66  +
req66, /
,66/ 0
HttpResponse661 =
resp66> B
)66B C
{77 
data99 
=99 
req99 
.99 
Params99 
.99 
Get99 
(99 
$str99 $
)99$ %
;99% &N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_68b:: J
.::J K
GoodB2GSink::K V
(::V W
req::W Z
,::Z [
resp::\ `
)::` a
;::a b
};; 
}== 
}>> Þ
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_68b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_68b H
{ 
public 

static 
void 
BadSink 
( 
HttpRequest *
req+ .
,. /
HttpResponse0 <
resp= A
)A B
{ 
string 
data 
= N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_68a X
.X Y
dataY ]
;] ^
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
HttpRequest--# .
req--/ 2
,--2 3
HttpResponse--4 @
resp--A E
)--E F
{.. 
string// 
data// 
=// N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_68a// X
.//X Y
data//Y ]
;//] ^
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
HttpRequest<<# .
req<</ 2
,<<2 3
HttpResponse<<4 @
resp<<A E
)<<E F
{== 
string>> 
data>> 
=>> N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_68a>> X
.>>X Y
data>>Y ]
;>>] ^
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK ø
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_71a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_71a H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data!! 
=!! 
req!! 
.!! 
Params!! 
.!! 
Get!! 
(!! 
$str!! $
)!!$ %
;!!% &N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_71b"" J
.""J K
BadSink""K R
(""R S
(""S T
Object""T Z
)""Z [
data""[ _
,""` a
req""b e
,""e f
resp""g k
)""l m
;""m n
}## 
public&& 

override&& 
void&& 
Good&& 
(&& 
HttpRequest&& )
req&&* -
,&&- .
HttpResponse&&/ ;
resp&&< @
)&&@ A
{'' 
GoodG2B(( 
((( 
req(( 
,(( 
resp(( 
)(( 
;(( 
GoodB2G)) 
()) 
req)) 
,)) 
resp)) 
))) 
;)) 
}** 
private-- 
static-- 
void-- 
GoodG2B-- 
(--  
HttpRequest--  +
req--, /
,--/ 0
HttpResponse--1 =
resp--> B
)--B C
{.. 
string// 
data// 
;// 
data11 
=11 
$str11 
;11 N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_71b22 J
.22J K
GoodG2BSink22K V
(22V W
(22W X
Object22X ^
)22^ _
data22_ c
,22d e
req22f i
,22i j
resp22k o
)22p q
;22q r
}33 
private66 
static66 
void66 
GoodB2G66 
(66  
HttpRequest66  +
req66, /
,66/ 0
HttpResponse661 =
resp66> B
)66B C
{77 
string88 
data88 
;88 
data:: 
=:: 
req:: 
.:: 
Params:: 
.:: 
Get:: 
(:: 
$str:: $
)::$ %
;::% &N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_71b;; J
.;;J K
GoodB2GSink;;K V
(;;V W
(;;W X
Object;;X ^
);;^ _
data;;_ c
,;;d e
req;;f i
,;;i j
resp;;k o
);;p q
;;;q r
}<< 
}>> 
}?? 
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_71b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_71b H
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
,1 2
HttpRequest3 >
req? B
,B C
HttpResponseD P
respQ U
)U V
{ 
string 
data 
= 
( 
string 
) 

dataObject (
;( )
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
Object..# )

dataObject..* 4
,..5 6
HttpRequest..7 B
req..C F
,..F G
HttpResponse..H T
resp..U Y
)..Y Z
{// 
string00 
data00 
=00 
(00 
string00 
)00 

dataObject00 (
;00( )
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
Object==# )

dataObject==* 4
,==5 6
HttpRequest==7 B
req==C F
,==F G
HttpResponse==H T
resp==U Y
)==Y Z
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 

dataObject?? (
;??( )
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL è&
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_72a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_72a H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string   
data   
;   
data"" 
="" 
req"" 
."" 
Params"" 
."" 
Get"" 
("" 
$str"" $
)""$ %
;""% &
	Hashtable## 
dataHashtable## 
=##  !
new##" %
	Hashtable##& /
(##/ 0
$num##0 1
)##1 2
;##2 3
dataHashtable$$ 
.$$ 
Add$$ 
($$ 
$num$$ 
,$$ 
data$$ !
)$$! "
;$$" #
dataHashtable%% 
.%% 
Add%% 
(%% 
$num%% 
,%% 
data%% !
)%%! "
;%%" #
dataHashtable&& 
.&& 
Add&& 
(&& 
$num&& 
,&& 
data&& !
)&&! "
;&&" #N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_72b'' J
.''J K
BadSink''K R
(''R S
dataHashtable''S `
,''a b
req''c f
,''f g
resp''h l
)''m n
;''n o
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
HttpRequest++ )
req++* -
,++- .
HttpResponse++/ ;
resp++< @
)++@ A
{,, 
GoodG2B-- 
(-- 
req-- 
,-- 
resp-- 
)-- 
;-- 
GoodB2G.. 
(.. 
req.. 
,.. 
resp.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
HttpRequest22  +
req22, /
,22/ 0
HttpResponse221 =
resp22> B
)22B C
{33 
string44 
data44 
;44 
data66 
=66 
$str66 
;66 
	Hashtable77 
dataHashtable77 
=77  !
new77" %
	Hashtable77& /
(77/ 0
$num770 1
)771 2
;772 3
dataHashtable88 
.88 
Add88 
(88 
$num88 
,88 
data88 !
)88! "
;88" #
dataHashtable99 
.99 
Add99 
(99 
$num99 
,99 
data99 !
)99! "
;99" #
dataHashtable:: 
.:: 
Add:: 
(:: 
$num:: 
,:: 
data:: !
)::! "
;::" #N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_72b;; J
.;;J K
GoodG2BSink;;K V
(;;V W
dataHashtable;;W d
,;;e f
req;;g j
,;;j k
resp;;l p
);;q r
;;;r s
}<< 
private?? 
static?? 
void?? 
GoodB2G?? 
(??  
HttpRequest??  +
req??, /
,??/ 0
HttpResponse??1 =
resp??> B
)??B C
{@@ 
stringAA 
dataAA 
;AA 
dataCC 
=CC 
reqCC 
.CC 
ParamsCC 
.CC 
GetCC 
(CC 
$strCC $
)CC$ %
;CC% &
	HashtableDD 
dataHashtableDD 
=DD  !
newDD" %
	HashtableDD& /
(DD/ 0
$numDD0 1
)DD1 2
;DD2 3
dataHashtableEE 
.EE 
AddEE 
(EE 
$numEE 
,EE 
dataEE !
)EE! "
;EE" #
dataHashtableFF 
.FF 
AddFF 
(FF 
$numFF 
,FF 
dataFF !
)FF! "
;FF" #
dataHashtableGG 
.GG 
AddGG 
(GG 
$numGG 
,GG 
dataGG !
)GG! "
;GG" #N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_72bHH J
.HHJ K
GoodB2GSinkHHK V
(HHV W
dataHashtableHHW d
,HHe f
reqHHg j
,HHj k
respHHl p
)HHq r
;HHr s
}II 
}KK 
}LL Å
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_72b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_72b H
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
,7 8
HttpRequest9 D
reqE H
,H I
HttpResponseJ V
respW [
)[ \
{ 
string 
data 
= 
( 
string 
) 
dataHashtable ,
[, -
$num- .
]. /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
	Hashtable..# ,
dataHashtable..- :
,..; <
HttpRequest..= H
req..I L
,..L M
HttpResponse..N Z
resp..[ _
).._ `
{// 
string00 
data00 
=00 
(00 
string00 
)00 
dataHashtable00 ,
[00, -
$num00- .
]00. /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
	Hashtable==# ,
dataHashtable==- :
,==; <
HttpRequest=== H
req==I L
,==L M
HttpResponse==N Z
resp==[ _
)==_ `
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 
dataHashtable?? ,
[??, -
$num??- .
]??. /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL î&
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_73a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_73a H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string   
data   
;   
data"" 
="" 
req"" 
."" 
Params"" 
."" 
Get"" 
("" 
$str"" $
)""$ %
;""% &

LinkedList## 
<## 
string## 
>## 
dataLinkedList## )
=##* +
new##, /

LinkedList##0 :
<##: ;
string##; A
>##A B
(##B C
)##C D
;##D E
dataLinkedList$$ 
.$$ 
AddLast$$ 
($$ 
data$$ #
)$$# $
;$$$ %
dataLinkedList%% 
.%% 
AddLast%% 
(%% 
data%% #
)%%# $
;%%$ %
dataLinkedList&& 
.&& 
AddLast&& 
(&& 
data&& #
)&&# $
;&&$ %N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_73b'' J
.''J K
BadSink''K R
(''R S
dataLinkedList''S a
,''b c
req''d g
,''g h
resp''i m
)''n o
;''o p
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
HttpRequest++ )
req++* -
,++- .
HttpResponse++/ ;
resp++< @
)++@ A
{,, 
GoodG2B-- 
(-- 
req-- 
,-- 
resp-- 
)-- 
;-- 
GoodB2G.. 
(.. 
req.. 
,.. 
resp.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
HttpRequest22  +
req22, /
,22/ 0
HttpResponse221 =
resp22> B
)22B C
{33 
string44 
data44 
;44 
data66 
=66 
$str66 
;66 

LinkedList77 
<77 
string77 
>77 
dataLinkedList77 )
=77* +
new77, /

LinkedList770 :
<77: ;
string77; A
>77A B
(77B C
)77C D
;77D E
dataLinkedList88 
.88 
AddLast88 
(88 
data88 #
)88# $
;88$ %
dataLinkedList99 
.99 
AddLast99 
(99 
data99 #
)99# $
;99$ %
dataLinkedList:: 
.:: 
AddLast:: 
(:: 
data:: #
)::# $
;::$ %N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_73b;; J
.;;J K
GoodG2BSink;;K V
(;;V W
dataLinkedList;;W e
,;;f g
req;;h k
,;;k l
resp;;m q
);;r s
;;;s t
}<< 
private?? 
static?? 
void?? 
GoodB2G?? 
(??  
HttpRequest??  +
req??, /
,??/ 0
HttpResponse??1 =
resp??> B
)??B C
{@@ 
stringAA 
dataAA 
;AA 
dataCC 
=CC 
reqCC 
.CC 
ParamsCC 
.CC 
GetCC 
(CC 
$strCC $
)CC$ %
;CC% &

LinkedListDD 
<DD 
stringDD 
>DD 
dataLinkedListDD )
=DD* +
newDD, /

LinkedListDD0 :
<DD: ;
stringDD; A
>DDA B
(DDB C
)DDC D
;DDD E
dataLinkedListEE 
.EE 
AddLastEE 
(EE 
dataEE #
)EE# $
;EE$ %
dataLinkedListFF 
.FF 
AddLastFF 
(FF 
dataFF #
)FF# $
;FF$ %
dataLinkedListGG 
.GG 
AddLastGG 
(GG 
dataGG #
)GG# $
;GG$ %N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_73bHH J
.HHJ K
GoodB2GSinkHHK V
(HHV W
dataLinkedListHHW e
,HHf g
reqHHh k
,HHk l
respHHm q
)HHr s
;HHs t
}II 
}KK 
}LL  
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_73b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_73b H
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
string* 0
>0 1
dataLinkedList2 @
,A B
HttpRequestC N
reqO R
,R S
HttpResponseT `
respa e
)e f
{ 
string 
data 
= 
dataLinkedList $
.$ %
Last% )
.) *
Value* /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #

LinkedList..# -
<..- .
string... 4
>..4 5
dataLinkedList..6 D
,..E F
HttpRequest..G R
req..S V
,..V W
HttpResponse..X d
resp..e i
)..i j
{// 
string00 
data00 
=00 
dataLinkedList00 $
.00$ %
Last00% )
.00) *
Value00* /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

LinkedList==# -
<==- .
string==. 4
>==4 5
dataLinkedList==6 D
,==E F
HttpRequest==G R
req==S V
,==V W
HttpResponse==X d
resp==e i
)==i j
{>> 
string?? 
data?? 
=?? 
dataLinkedList?? $
.??$ %
Last??% )
.??) *
Value??* /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ³*
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_74a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_74a H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string   
data   
;   
data"" 
="" 
req"" 
."" 
Params"" 
."" 
Get"" 
("" 
$str"" $
)""$ %
;""% &

Dictionary## 
<## 
int## 
,## 
string## 
>## 
dataDictionary## -
=##. /
new##0 3

Dictionary##4 >
<##> ?
int##? B
,##B C
string##C I
>##I J
(##J K
)##K L
;##L M
dataDictionary$$ 
.$$ 
Add$$ 
($$ 
$num$$ 
,$$ 
data$$ "
)$$" #
;$$# $
dataDictionary%% 
.%% 
Add%% 
(%% 
$num%% 
,%% 
data%% "
)%%" #
;%%# $
dataDictionary&& 
.&& 
Add&& 
(&& 
$num&& 
,&& 
data&& "
)&&" #
;&&# $N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_74b'' J
.''J K
BadSink''K R
(''R S
dataDictionary''S a
,''b c
req''d g
,''g h
resp''i m
)''n o
;''o p
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
HttpRequest++ )
req++* -
,++- .
HttpResponse++/ ;
resp++< @
)++@ A
{,, 
GoodG2B-- 
(-- 
req-- 
,-- 
resp-- 
)-- 
;-- 
GoodB2G.. 
(.. 
req.. 
,.. 
resp.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
HttpRequest22  +
req22, /
,22/ 0
HttpResponse221 =
resp22> B
)22B C
{33 
string44 
data44 
;44 
data66 
=66 
$str66 
;66 

Dictionary77 
<77 
int77 
,77 
string77 
>77 
dataDictionary77 -
=77. /
new770 3

Dictionary774 >
<77> ?
int77? B
,77B C
string77C I
>77I J
(77J K
)77K L
;77L M
dataDictionary88 
.88 
Add88 
(88 
$num88 
,88 
data88 "
)88" #
;88# $
dataDictionary99 
.99 
Add99 
(99 
$num99 
,99 
data99 "
)99" #
;99# $
dataDictionary:: 
.:: 
Add:: 
(:: 
$num:: 
,:: 
data:: "
)::" #
;::# $N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_74b;; J
.;;J K
GoodG2BSink;;K V
(;;V W
dataDictionary;;W e
,;;f g
req;;h k
,;;k l
resp;;m q
);;r s
;;;s t
}<< 
private?? 
static?? 
void?? 
GoodB2G?? 
(??  
HttpRequest??  +
req??, /
,??/ 0
HttpResponse??1 =
resp??> B
)??B C
{@@ 
stringAA 
dataAA 
;AA 
dataCC 
=CC 
reqCC 
.CC 
ParamsCC 
.CC 
GetCC 
(CC 
$strCC $
)CC$ %
;CC% &

DictionaryDD 
<DD 
intDD 
,DD 
stringDD 
>DD 
dataDictionaryDD -
=DD. /
newDD0 3

DictionaryDD4 >
<DD> ?
intDD? B
,DDB C
stringDDC I
>DDI J
(DDJ K
)DDK L
;DDL M
dataDictionaryEE 
.EE 
AddEE 
(EE 
$numEE 
,EE 
dataEE "
)EE" #
;EE# $
dataDictionaryFF 
.FF 
AddFF 
(FF 
$numFF 
,FF 
dataFF "
)FF" #
;FF# $
dataDictionaryGG 
.GG 
AddGG 
(GG 
$numGG 
,GG 
dataGG "
)GG" #
;GG# $N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_74bHH J
.HHJ K
GoodB2GSinkHHK V
(HHV W
dataDictionaryHHW e
,HHf g
reqHHh k
,HHk l
respHHm q
)HHr s
;HHs t
}II 
}KK 
}LL ® 
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_74b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_74b H
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
string. 4
>4 5
dataDictionary6 D
,E F
HttpRequestG R
reqS V
,V W
HttpResponseX d
respe i
)i j
{ 
string 
data 
= 
dataDictionary $
[$ %
$num% &
]& '
;' (
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. #
(..# $

Dictionary..$ .
<... /
int../ 2
,..2 3
string..3 9
>..9 :
dataDictionary..; I
,..J K
HttpRequest..L W
req..X [
,..[ \
HttpResponse..] i
resp..j n
)..n o
{// 
string00 
data00 
=00 
dataDictionary00 $
[00$ %
$num00% &
]00& '
;00' (
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

Dictionary==# -
<==- .
int==. 1
,==1 2
string==2 8
>==8 9
dataDictionary==: H
,==I J
HttpRequest==K V
req==W Z
,==Z [
HttpResponse==\ h
resp==i m
)==m n
{>> 
string?? 
data?? 
=?? 
dataDictionary?? $
[??$ %
$num??% &
]??& '
;??' (
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL 6
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_75a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_75a H
:I J
AbstractTestCaseWebK ^
{ 
public   

override   
void   
Bad   
(   
HttpRequest   (
req  ) ,
,  , -
HttpResponse  . :
resp  ; ?
)  ? @
{!! 
string"" 
data"" 
;"" 
data$$ 
=$$ 
req$$ 
.$$ 
Params$$ 
.$$ 
Get$$ 
($$ 
$str$$ $
)$$$ %
;$$% &
byte&& 
[&& 
]&& 
dataSerialized&& 
=&& 
null&&  $
;&&$ %
try'' 
{(( 	
BinaryFormatter)) 
bf)) 
=))  
new))! $
BinaryFormatter))% 4
())4 5
)))5 6
;))6 7
using** 
(** 
var** 
ms** 
=** 
new** 
MemoryStream**  ,
(**, -
)**- .
)**. /
{++ 
bf,, 
.,, 
	Serialize,, 
(,, 
ms,, 
,,,  
data,,! %
),,% &
;,,& '
dataSerialized-- 
=--  
ms--! #
.--# $
ToArray--$ +
(--+ ,
)--, -
;--- .
}.. N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_75b// N
.//N O
BadSink//O V
(//V W
dataSerialized//W e
,//f g
req//h k
,//k l
resp//m q
)//r s
;//s t
}00 	
catch11 
(11 "
SerializationException11 %
exceptSerialize11& 5
)115 6
{22 	
IO33 
.33 
Logger33 
.33 
Log33 
(33 
NLog33 
.33 
LogLevel33 '
.33' (
Warn33( ,
,33, -
$str33. X
,33X Y
exceptSerialize33Z i
)33i j
;33j k
}44 	
}55 
public88 

override88 
void88 
Good88 
(88 
HttpRequest88 )
req88* -
,88- .
HttpResponse88/ ;
resp88< @
)88@ A
{99 
GoodG2B:: 
(:: 
req:: 
,:: 
resp:: 
):: 
;:: 
GoodB2G;; 
(;; 
req;; 
,;; 
resp;; 
);; 
;;; 
}<< 
private?? 
static?? 
void?? 
GoodG2B?? 
(??  
HttpRequest??  +
req??, /
,??/ 0
HttpResponse??1 =
resp??> B
)??B C
{@@ 
stringAA 
dataAA 
;AA 
dataCC 
=CC 
reqCC 
.CC 
ParamsCC 
.CC 
GetCC 
(CC 
$strCC $
)CC$ %
;CC% &
byteEE 
[EE 
]EE 
dataSerializedEE 
=EE 
nullEE  $
;EE$ %
tryFF 
{GG 	
BinaryFormatterHH 
bfHH 
=HH  
newHH! $
BinaryFormatterHH% 4
(HH4 5
)HH5 6
;HH6 7
usingII 
(II 
varII 
msII 
=II 
newII 
MemoryStreamII  ,
(II, -
)II- .
)II. /
{JJ 
bfKK 
.KK 
	SerializeKK 
(KK 
msKK 
,KK  
dataKK! %
)KK% &
;KK& '
dataSerializedLL 
=LL  
msLL! #
.LL# $
ToArrayLL$ +
(LL+ ,
)LL, -
;LL- .
}MM N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_75bNN N
.NNN O
GoodG2BSinkNNO Z
(NNZ [
dataSerializedNN[ i
,NNj k
reqNNl o
,NNo p
respNNq u
)NNv w
;NNw x
}OO 	
catchPP 
(PP "
SerializationExceptionPP %
exceptSerializePP& 5
)PP5 6
{QQ 	
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR 
.RR 
LogLevelRR '
.RR' (
WarnRR( ,
,RR, -
$strRR. X
,RRX Y
exceptSerializeRRZ i
)RRi j
;RRj k
}SS 	
}TT 
privateWW 
staticWW 
voidWW 
GoodB2GWW 
(WW  
HttpRequestWW  +
reqWW, /
,WW/ 0
HttpResponseWW1 =
respWW> B
)WWB C
{XX 
stringYY 
dataYY 
;YY 
data[[ 
=[[ 
req[[ 
.[[ 
Params[[ 
.[[ 
Get[[ 
([[ 
$str[[ $
)[[$ %
;[[% &
byte]] 
[]] 
]]] 
dataSerialized]] 
=]] 
null]]  $
;]]$ %
try^^ 
{__ 	
BinaryFormatter`` 
bf`` 
=``  
new``! $
BinaryFormatter``% 4
(``4 5
)``5 6
;``6 7
usingaa 
(aa 
varaa 
msaa 
=aa 
newaa 
MemoryStreamaa  ,
(aa, -
)aa- .
)aa. /
{bb 
bfcc 
.cc 
	Serializecc 
(cc 
mscc 
,cc  
datacc! %
)cc% &
;cc& '
dataSerializeddd 
=dd  
msdd! #
.dd# $
ToArraydd$ +
(dd+ ,
)dd, -
;dd- .
}ee N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_75bff N
.ffN O
GoodB2GSinkffO Z
(ffZ [
dataSerializedff[ i
,ffj k
reqffl o
,ffo p
respffq u
)ffv w
;ffw x
}gg 	
catchhh 
(hh "
SerializationExceptionhh %
exceptSerializehh& 5
)hh5 6
{ii 	
IOjj 
.jj 
Loggerjj 
.jj 
Logjj 
(jj 
NLogjj 
.jj 
LogLeveljj '
.jj' (
Warnjj( ,
,jj, -
$strjj. X
,jjX Y
exceptSerializejjZ i
)jji j
;jjj k
}kk 	
}ll 
}nn 
}oo Ê?
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_75b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_75b H
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
,5 6
HttpRequest7 B
reqC F
,F G
HttpResponseH T
respU Y
)Y Z
{   
try!! 
{"" 	
string## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
string)) 
))) 
binForm)) &
.))& '
Deserialize))' 2
())2 3
	memStream))3 <
)))< =
;))= >
}** 
try++ 
{,, 
int-- 
value-- 
=-- 
int-- 
.--  
Parse--  %
(--% &
data--& *
)--* +
;--+ ,
}.. 
catch// 
(// 
FormatException// "
exceptNumberFormat//# 5
)//5 6
{00 
IO22 
.22 
Logger22 
.22 
Log22 
(22 
NLog22 "
.22" #
LogLevel22# +
.22+ ,
Warn22, 0
,220 1
exceptNumberFormat222 D
,22D E
$str22F `
+22a b
data22c g
)22g h
;22h i
}33 
}44 	
catch55 
(55 "
SerializationException55 %
exceptSerialize55& 5
)555 6
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. Y
,77Y Z
exceptSerialize77[ j
)77j k
;77k l
}88 	
}99 
public>> 

static>> 
void>> 
GoodG2BSink>> "
(>>" #
byte>># '
[>>' (
]>>( )
dataSerialized>>* 8
,>>9 :
HttpRequest>>; F
req>>G J
,>>J K
HttpResponse>>L X
resp>>Y ]
)>>] ^
{?? 
try@@ 
{AA 	
stringBB 
dataBB 
;BB 
varCC 
binFormCC 
=CC 
newCC 
BinaryFormatterCC -
(CC- .
)CC. /
;CC/ 0
usingDD 
(DD 
varDD 
	memStreamDD  
=DD! "
newDD# &
MemoryStreamDD' 3
(DD3 4
)DD4 5
)DD5 6
{EE 
	memStreamFF 
.FF 
WriteFF 
(FF  
dataSerializedFF  .
,FF. /
$numFF0 1
,FF1 2
dataSerializedFF3 A
.FFA B
LengthFFB H
)FFH I
;FFI J
	memStreamGG 
.GG 
SeekGG 
(GG 
$numGG  
,GG  !

SeekOriginGG" ,
.GG, -
BeginGG- 2
)GG2 3
;GG3 4
dataHH 
=HH 
(HH 
stringHH 
)HH 
binFormHH &
.HH& '
DeserializeHH' 2
(HH2 3
	memStreamHH3 <
)HH< =
;HH= >
}II 
tryJJ 
{KK 
intLL 
valueLL 
=LL 
intLL 
.LL  
ParseLL  %
(LL% &
dataLL& *
)LL* +
;LL+ ,
}MM 
catchNN 
(NN 
FormatExceptionNN "
exceptNumberFormatNN# 5
)NN5 6
{OO 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptNumberFormatQQ2 D
,QQD E
$strQQF `
+QQa b
dataQQc g
)QQg h
;QQh i
}RR 
}SS 	
catchTT 
(TT "
SerializationExceptionTT %
exceptSerializeTT& 5
)TT5 6
{UU 	
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV 
.VV 
LogLevelVV '
.VV' (
WarnVV( ,
,VV, -
$strVV. Y
,VVY Z
exceptSerializeVV[ j
)VVj k
;VVk l
}WW 	
}XX 
public[[ 

static[[ 
void[[ 
GoodB2GSink[[ "
([[" #
byte[[# '
[[[' (
][[( )
dataSerialized[[* 8
,[[9 :
HttpRequest[[; F
req[[G J
,[[J K
HttpResponse[[L X
resp[[Y ]
)[[] ^
{\\ 
try]] 
{^^ 	
string__ 
data__ 
;__ 
var`` 
binForm`` 
=`` 
new`` 
BinaryFormatter`` -
(``- .
)``. /
;``/ 0
usingaa 
(aa 
varaa 
	memStreamaa  
=aa! "
newaa# &
MemoryStreamaa' 3
(aa3 4
)aa4 5
)aa5 6
{bb 
	memStreamcc 
.cc 
Writecc 
(cc  
dataSerializedcc  .
,cc. /
$numcc0 1
,cc1 2
dataSerializedcc3 A
.ccA B
LengthccB H
)ccH I
;ccI J
	memStreamdd 
.dd 
Seekdd 
(dd 
$numdd  
,dd  !

SeekOrigindd" ,
.dd, -
Begindd- 2
)dd2 3
;dd3 4
dataee 
=ee 
(ee 
stringee 
)ee 
binFormee &
.ee& '
Deserializeee' 2
(ee2 3
	memStreamee3 <
)ee< =
;ee= >
}ff 
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF j
+nnk l
exceptNumberFormatnnm 
)	nn 
;
nn 
}oo 
}pp 	
catchqq 
(qq "
SerializationExceptionqq %
exceptSerializeqq& 5
)qq5 6
{rr 	
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss 
.ss 
LogLevelss '
.ss' (
Warnss( ,
,ss, -
$strss. Y
,ssY Z
exceptSerializess[ j
)ssj k
;ssk l
}tt 	
}uu 
}ww 
}xx È
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81a H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data!! 
=!! 
req!! 
.!! 
Params!! 
.!! 
Get!! 
(!! 
$str!! $
)!!$ %
;!!% &R
FCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_base"" N

baseObject""O Y
=""Z [
new""\ _R
ECWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_bad	""` ¥
(
""¥ ¦
)
""¦ §
;
""§ ¨

baseObject## 
.## 
Action## 
(## 
data## 
,##  
req##! $
,##$ %
resp##& *
)##* +
;##+ ,
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
HttpRequest'' )
req''* -
,''- .
HttpResponse''/ ;
resp''< @
)''@ A
{(( 
GoodG2B)) 
()) 
req)) 
,)) 
resp)) 
))) 
;)) 
GoodB2G** 
(** 
req** 
,** 
resp** 
)** 
;** 
}++ 
private.. 
void.. 
GoodG2B.. 
(.. 
HttpRequest.. $
req..% (
,..( )
HttpResponse..* 6
resp..7 ;
)..; <
{// 
string00 
data00 
;00 
data22 
=22 
$str22 
;22 R
FCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_base33 N

baseObject33O Y
=33Z [
new33\ _V
ICWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_goodG2B	33` ©
(
33© ª
)
33ª «
;
33« ¬

baseObject44 
.44 
Action44 
(44 
data44 
,44  
req44! $
,44$ %
resp44& *
)44* +
;44+ ,
}55 
private88 
void88 
GoodB2G88 
(88 
HttpRequest88 $
req88% (
,88( )
HttpResponse88* 6
resp887 ;
)88; <
{99 
string:: 
data:: 
;:: 
data<< 
=<< 
req<< 
.<< 
Params<< 
.<< 
Get<< 
(<< 
$str<< $
)<<$ %
;<<% &R
FCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_base== N

baseObject==O Y
===Z [
new==\ _V
ICWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_goodB2G	==` ©
(
==© ª
)
==ª «
;
==« ¬

baseObject>> 
.>> 
Action>> 
(>> 
data>> 
,>>  
req>>! $
,>>$ %
resp>>& *
)>>* +
;>>+ ,
}?? 
}AA 
}BB 
ÒC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_bad.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class Q
ECWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_bad K
:L MS
FCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_base	N 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
}(( 
})) 
ÓC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_base.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
abstract 
class	 R
FCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_base U
{ 
public 

abstract 
void 
Action 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
;Q R
} 
} ­
ÖC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_goodB2G.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class U
ICWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_goodB2G O
:P QS
FCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_base	R 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B f
+&&g h
exceptNumberFormat&&i {
)&&{ |
;&&| }
}'' 	
}(( 
})) 
}** 
ÖC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_goodG2B.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class U
ICWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_goodG2B O
:P QS
FCWE117_Improper_Output_Neutralization_for_Logs__Params_Get_Web_81_base	R 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
})) 
}** &
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_01.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_01 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
data%% 
=%% 
req%% 
.%% 
QueryString%% &
[%%& '
$str%%' +
]%%+ ,
;%%, -
}&& 
}'' 	
try(( 
{)) 	
int** 
value** 
=** 
int** 
.** 
Parse** !
(**! "
data**" &
)**& '
;**' (
}++ 	
catch,, 
(,, 
FormatException,, 
exceptNumberFormat,, 1
),,1 2
{-- 	
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// 
.// 
LogLevel// '
.//' (
Warn//( ,
,//, -
exceptNumberFormat//. @
,//@ A
$str//B \
+//] ^
data//_ c
)//c d
;//d e
}00 	
}11 
public44 

override44 
void44 
Good44 
(44 
HttpRequest44 )
req44* -
,44- .
HttpResponse44/ ;
resp44< @
)44@ A
{55 
GoodG2B66 
(66 
req66 
,66 
resp66 
)66 
;66 
GoodB2G77 
(77 
req77 
,77 
resp77 
)77 
;77 
}88 
private;; 
void;; 
GoodG2B;; 
(;; 
HttpRequest;; $
req;;% (
,;;( )
HttpResponse;;* 6
resp;;7 ;
);;; <
{<< 
string== 
data== 
;== 
data?? 
=?? 
$str?? 
;?? 
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB \
+GG] ^
dataGG_ c
)GGc d
;GGd e
}HH 	
}II 
privateLL 
voidLL 
GoodB2GLL 
(LL 
HttpRequestLL $
reqLL% (
,LL( )
HttpResponseLL* 6
respLL7 ;
)LL; <
{MM 
stringNN 
dataNN 
;NN 
dataOO 
=OO 
$strOO 
;OO 
{QQ 	
ifRR 
(RR 
reqRR 
.RR 
QueryStringRR 
[RR  
$strRR  $
]RR$ %
!=RR& (
nullRR) -
)RR- .
{SS 
dataTT 
=TT 
reqTT 
.TT 
QueryStringTT &
[TT& '
$strTT' +
]TT+ ,
;TT, -
}UU 
}VV 	
tryWW 
{XX 	
intYY 
valueYY 
=YY 
intYY 
.YY 
ParseYY !
(YY! "
dataYY" &
)YY& '
;YY' (
}ZZ 	
catch[[ 
([[ 
FormatException[[ 
exceptNumberFormat[[ 1
)[[1 2
{\\ 	
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ 
.^^ 
LogLevel^^ '
.^^' (
Warn^^( ,
,^^, -
exceptNumberFormat^^. @
,^^@ A
$str^^B f
+^^g h
exceptNumberFormat^^i {
)^^{ |
;^^| }
}__ 	
}`` 
}bb 
}cc L
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_02.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_02 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
true   
)   
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
data'' 
='' 
req'' 
.'' 
QueryString'' *
[''* +
$str''+ /
]''/ 0
;''0 1
}(( 
})) 
}** 	
else++ 
{,, 	
data// 
=// 
null// 
;// 
}00 	
if11 

(11 
true11 
)11 
{22 	
try33 
{44 
int55 
value55 
=55 
int55 
.55  
Parse55  %
(55% &
data55& *
)55* +
;55+ ,
}66 
catch77 
(77 
FormatException77 "
exceptNumberFormat77# 5
)775 6
{88 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptNumberFormat::2 D
,::D E
$str::F `
+::a b
data::c g
)::g h
;::h i
};; 
}<< 	
}== 
privateAA 
voidAA 
GoodG2B1AA 
(AA 
HttpRequestAA %
reqAA& )
,AA) *
HttpResponseAA+ 7
respAA8 <
)AA< =
{BB 
stringCC 
dataCC 
;CC 
ifDD 

(DD 
falseDD 
)DD 
{EE 	
dataHH 
=HH 
nullHH 
;HH 
}II 	
elseJJ 
{KK 	
dataMM 
=MM 
$strMM 
;MM 
}NN 	
ifOO 

(OO 
trueOO 
)OO 
{PP 	
tryQQ 
{RR 
intSS 
valueSS 
=SS 
intSS 
.SS  
ParseSS  %
(SS% &
dataSS& *
)SS* +
;SS+ ,
}TT 
catchUU 
(UU 
FormatExceptionUU "
exceptNumberFormatUU# 5
)UU5 6
{VV 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$strXXF `
+XXa b
dataXXc g
)XXg h
;XXh i
}YY 
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
string`` 
data`` 
;`` 
ifaa 

(aa 
trueaa 
)aa 
{bb 	
datadd 
=dd 
$strdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
nulljj 
;jj 
}kk 	
ifll 

(ll 
truell 
)ll 
{mm 	
trynn 
{oo 
intpp 
valuepp 
=pp 
intpp 
.pp  
Parsepp  %
(pp% &
datapp& *
)pp* +
;pp+ ,
}qq 
catchrr 
(rr 
FormatExceptionrr "
exceptNumberFormatrr# 5
)rr5 6
{ss 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu "
.uu" #
LogLeveluu# +
.uu+ ,
Warnuu, 0
,uu0 1
exceptNumberFormatuu2 D
,uuD E
$struuF `
+uua b
datauuc g
)uug h
;uuh i
}vv 
}ww 	
}xx 
private{{ 
void{{ 
GoodB2G1{{ 
({{ 
HttpRequest{{ %
req{{& )
,{{) *
HttpResponse{{+ 7
resp{{8 <
){{< =
{|| 
string}} 
data}} 
;}} 
if~~ 

(~~ 
true~~ 
)~~ 
{ 	
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
false
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
   
private
££ 
void
££ 
GoodB2G2
££ 
(
££ 
HttpRequest
££ %
req
££& )
,
££) *
HttpResponse
££+ 7
resp
££8 <
)
££< =
{
¤¤ 
string
¥¥ 
data
¥¥ 
;
¥¥ 
if
¦¦ 

(
¦¦ 
true
¦¦ 
)
¦¦ 
{
§§ 	
data
¨¨ 
=
¨¨ 
$str
¨¨ 
;
¨¨ 
{
ªª 
if
«« 
(
«« 
req
«« 
.
«« 
QueryString
«« #
[
««# $
$str
««$ (
]
««( )
!=
««* ,
null
««- 1
)
««1 2
{
¬¬ 
data
­­ 
=
­­ 
req
­­ 
.
­­ 
QueryString
­­ *
[
­­* +
$str
­­+ /
]
­­/ 0
;
­­0 1
}
®® 
}
¯¯ 
}
°° 	
else
±± 
{
²² 	
data
µµ 
=
µµ 
null
µµ 
;
µµ 
}
¶¶ 	
if
·· 

(
·· 
true
·· 
)
·· 
{
¸¸ 	
try
¹¹ 
{
ºº 
int
»» 
value
»» 
=
»» 
int
»» 
.
»»  
Parse
»»  %
(
»»% &
data
»»& *
)
»»* +
;
»»+ ,
}
¼¼ 
catch
½½ 
(
½½ 
FormatException
½½ " 
exceptNumberFormat
½½# 5
)
½½5 6
{
¾¾ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ 
.
ÀÀ 
Log
ÀÀ 
(
ÀÀ 
NLog
ÀÀ "
.
ÀÀ" #
LogLevel
ÀÀ# +
.
ÀÀ+ ,
Warn
ÀÀ, 0
,
ÀÀ0 1 
exceptNumberFormat
ÀÀ2 D
,
ÀÀD E
$str
ÀÀF j
+
ÀÀk l 
exceptNumberFormat
ÀÀm 
)ÀÀ 
;ÀÀ 
}
ÁÁ 
}
ÂÂ 	
}
ÃÃ 
public
ÅÅ 

override
ÅÅ 
void
ÅÅ 
Good
ÅÅ 
(
ÅÅ 
HttpRequest
ÅÅ )
req
ÅÅ* -
,
ÅÅ- .
HttpResponse
ÅÅ/ ;
resp
ÅÅ< @
)
ÅÅ@ A
{
ÆÆ 
GoodG2B1
ÇÇ 
(
ÇÇ 
req
ÇÇ 
,
ÇÇ 
resp
ÇÇ 
)
ÇÇ 
;
ÇÇ 
GoodG2B2
ÈÈ 
(
ÈÈ 
req
ÈÈ 
,
ÈÈ 
resp
ÈÈ 
)
ÈÈ 
;
ÈÈ 
GoodB2G1
ÉÉ 
(
ÉÉ 
req
ÉÉ 
,
ÉÉ 
resp
ÉÉ 
)
ÉÉ 
;
ÉÉ 
GoodB2G2
ÊÊ 
(
ÊÊ 
req
ÊÊ 
,
ÊÊ 
resp
ÊÊ 
)
ÊÊ 
;
ÊÊ 
}
ËË 
}ÍÍ 
}ÎÎ æN
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_03.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_03 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
$num   
==   
$num   
)   
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
data'' 
='' 
req'' 
.'' 
QueryString'' *
[''* +
$str''+ /
]''/ 0
;''0 1
}(( 
})) 
}** 	
else++ 
{,, 	
data// 
=// 
null// 
;// 
}00 	
if11 

(11 
$num11 
==11 
$num11 
)11 
{22 	
try33 
{44 
int55 
value55 
=55 
int55 
.55  
Parse55  %
(55% &
data55& *
)55* +
;55+ ,
}66 
catch77 
(77 
FormatException77 "
exceptNumberFormat77# 5
)775 6
{88 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptNumberFormat::2 D
,::D E
$str::F `
+::a b
data::c g
)::g h
;::h i
};; 
}<< 	
}== 
privateAA 
voidAA 
GoodG2B1AA 
(AA 
HttpRequestAA %
reqAA& )
,AA) *
HttpResponseAA+ 7
respAA8 <
)AA< =
{BB 
stringCC 
dataCC 
;CC 
ifDD 

(DD 
$numDD 
!=DD 
$numDD 
)DD 
{EE 	
dataHH 
=HH 
nullHH 
;HH 
}II 	
elseJJ 
{KK 	
dataMM 
=MM 
$strMM 
;MM 
}NN 	
ifOO 

(OO 
$numOO 
==OO 
$numOO 
)OO 
{PP 	
tryQQ 
{RR 
intSS 
valueSS 
=SS 
intSS 
.SS  
ParseSS  %
(SS% &
dataSS& *
)SS* +
;SS+ ,
}TT 
catchUU 
(UU 
FormatExceptionUU "
exceptNumberFormatUU# 5
)UU5 6
{VV 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$strXXF `
+XXa b
dataXXc g
)XXg h
;XXh i
}YY 
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
string`` 
data`` 
;`` 
ifaa 

(aa 
$numaa 
==aa 
$numaa 
)aa 
{bb 	
datadd 
=dd 
$strdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
nulljj 
;jj 
}kk 	
ifll 

(ll 
$numll 
==ll 
$numll 
)ll 
{mm 	
trynn 
{oo 
intpp 
valuepp 
=pp 
intpp 
.pp  
Parsepp  %
(pp% &
datapp& *
)pp* +
;pp+ ,
}qq 
catchrr 
(rr 
FormatExceptionrr "
exceptNumberFormatrr# 5
)rr5 6
{ss 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu "
.uu" #
LogLeveluu# +
.uu+ ,
Warnuu, 0
,uu0 1
exceptNumberFormatuu2 D
,uuD E
$struuF `
+uua b
datauuc g
)uug h
;uuh i
}vv 
}ww 	
}xx 
private{{ 
void{{ 
GoodB2G1{{ 
({{ 
HttpRequest{{ %
req{{& )
,{{) *
HttpResponse{{+ 7
resp{{8 <
){{< =
{|| 
string}} 
data}} 
;}} 
if~~ 

(~~ 
$num~~ 
==~~ 
$num~~ 
)~~ 
{ 	
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
$num
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
   
private
££ 
void
££ 
GoodB2G2
££ 
(
££ 
HttpRequest
££ %
req
££& )
,
££) *
HttpResponse
££+ 7
resp
££8 <
)
££< =
{
¤¤ 
string
¥¥ 
data
¥¥ 
;
¥¥ 
if
¦¦ 

(
¦¦ 
$num
¦¦ 
==
¦¦ 
$num
¦¦ 
)
¦¦ 
{
§§ 	
data
¨¨ 
=
¨¨ 
$str
¨¨ 
;
¨¨ 
{
ªª 
if
«« 
(
«« 
req
«« 
.
«« 
QueryString
«« #
[
««# $
$str
««$ (
]
««( )
!=
««* ,
null
««- 1
)
««1 2
{
¬¬ 
data
­­ 
=
­­ 
req
­­ 
.
­­ 
QueryString
­­ *
[
­­* +
$str
­­+ /
]
­­/ 0
;
­­0 1
}
®® 
}
¯¯ 
}
°° 	
else
±± 
{
²² 	
data
µµ 
=
µµ 
null
µµ 
;
µµ 
}
¶¶ 	
if
·· 

(
·· 
$num
·· 
==
·· 
$num
·· 
)
·· 
{
¸¸ 	
try
¹¹ 
{
ºº 
int
»» 
value
»» 
=
»» 
int
»» 
.
»»  
Parse
»»  %
(
»»% &
data
»»& *
)
»»* +
;
»»+ ,
}
¼¼ 
catch
½½ 
(
½½ 
FormatException
½½ " 
exceptNumberFormat
½½# 5
)
½½5 6
{
¾¾ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ 
.
ÀÀ 
Log
ÀÀ 
(
ÀÀ 
NLog
ÀÀ "
.
ÀÀ" #
LogLevel
ÀÀ# +
.
ÀÀ+ ,
Warn
ÀÀ, 0
,
ÀÀ0 1 
exceptNumberFormat
ÀÀ2 D
,
ÀÀD E
$str
ÀÀF j
+
ÀÀk l 
exceptNumberFormat
ÀÀm 
)ÀÀ 
;ÀÀ 
}
ÁÁ 
}
ÂÂ 	
}
ÃÃ 
public
ÅÅ 

override
ÅÅ 
void
ÅÅ 
Good
ÅÅ 
(
ÅÅ 
HttpRequest
ÅÅ )
req
ÅÅ* -
,
ÅÅ- .
HttpResponse
ÅÅ/ ;
resp
ÅÅ< @
)
ÅÅ@ A
{
ÆÆ 
GoodG2B1
ÇÇ 
(
ÇÇ 
req
ÇÇ 
,
ÇÇ 
resp
ÇÇ 
)
ÇÇ 
;
ÇÇ 
GoodG2B2
ÈÈ 
(
ÈÈ 
req
ÈÈ 
,
ÈÈ 
resp
ÈÈ 
)
ÈÈ 
;
ÈÈ 
GoodB2G1
ÉÉ 
(
ÉÉ 
req
ÉÉ 
,
ÉÉ 
resp
ÉÉ 
)
ÉÉ 
;
ÉÉ 
GoodB2G2
ÊÊ 
(
ÊÊ 
req
ÊÊ 
,
ÊÊ 
resp
ÊÊ 
)
ÊÊ 
;
ÊÊ 
}
ËË 
}ÍÍ 
}ÎÎ ÐO
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_04.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_04 H
:I J
AbstractTestCaseWebK ^
{ 
private!! 
const!! 
bool!! 
PRIVATE_CONST_TRUE!! )
=!!* +
true!!, 0
;!!0 1
private"" 
const"" 
bool"" 
PRIVATE_CONST_FALSE"" *
=""+ ,
false""- 2
;""2 3
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
HttpRequest$$ (
req$$) ,
,$$, -
HttpResponse$$. :
resp$$; ?
)$$? @
{%% 
string&& 
data&& 
;&& 
if'' 

('' 
PRIVATE_CONST_TRUE'' 
)'' 
{(( 	
data)) 
=)) 
$str)) 
;)) 
{++ 
if,, 
(,, 
req,, 
.,, 
QueryString,, #
[,,# $
$str,,$ (
],,( )
!=,,* ,
null,,- 1
),,1 2
{-- 
data.. 
=.. 
req.. 
... 
QueryString.. *
[..* +
$str..+ /
]../ 0
;..0 1
}// 
}00 
}11 	
else22 
{33 	
data66 
=66 
null66 
;66 
}77 	
if88 

(88 
PRIVATE_CONST_TRUE88 
)88 
{99 	
try:: 
{;; 
int<< 
value<< 
=<< 
int<< 
.<<  
Parse<<  %
(<<% &
data<<& *
)<<* +
;<<+ ,
}== 
catch>> 
(>> 
FormatException>> "
exceptNumberFormat>># 5
)>>5 6
{?? 
IOAA 
.AA 
LoggerAA 
.AA 
LogAA 
(AA 
NLogAA "
.AA" #
LogLevelAA# +
.AA+ ,
WarnAA, 0
,AA0 1
exceptNumberFormatAA2 D
,AAD E
$strAAF `
+AAa b
dataAAc g
)AAg h
;AAh i
}BB 
}CC 	
}DD 
privateHH 
voidHH 
GoodG2B1HH 
(HH 
HttpRequestHH %
reqHH& )
,HH) *
HttpResponseHH+ 7
respHH8 <
)HH< =
{II 
stringJJ 
dataJJ 
;JJ 
ifKK 

(KK 
PRIVATE_CONST_FALSEKK 
)KK  
{LL 	
dataOO 
=OO 
nullOO 
;OO 
}PP 	
elseQQ 
{RR 	
dataTT 
=TT 
$strTT 
;TT 
}UU 	
ifVV 

(VV 
PRIVATE_CONST_TRUEVV 
)VV 
{WW 	
tryXX 
{YY 
intZZ 
valueZZ 
=ZZ 
intZZ 
.ZZ  
ParseZZ  %
(ZZ% &
dataZZ& *
)ZZ* +
;ZZ+ ,
}[[ 
catch\\ 
(\\ 
FormatException\\ "
exceptNumberFormat\\# 5
)\\5 6
{]] 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
exceptNumberFormat__2 D
,__D E
$str__F `
+__a b
data__c g
)__g h
;__h i
}`` 
}aa 	
}bb 
privateee 
voidee 
GoodG2B2ee 
(ee 
HttpRequestee %
reqee& )
,ee) *
HttpResponseee+ 7
respee8 <
)ee< =
{ff 
stringgg 
datagg 
;gg 
ifhh 

(hh 
PRIVATE_CONST_TRUEhh 
)hh 
{ii 	
datakk 
=kk 
$strkk 
;kk 
}ll 	
elsemm 
{nn 	
dataqq 
=qq 
nullqq 
;qq 
}rr 	
ifss 

(ss 
PRIVATE_CONST_TRUEss 
)ss 
{tt 	
tryuu 
{vv 
intww 
valueww 
=ww 
intww 
.ww  
Parseww  %
(ww% &
dataww& *
)ww* +
;ww+ ,
}xx 
catchyy 
(yy 
FormatExceptionyy "
exceptNumberFormatyy# 5
)yy5 6
{zz 
IO|| 
.|| 
Logger|| 
.|| 
Log|| 
(|| 
NLog|| "
.||" #
LogLevel||# +
.||+ ,
Warn||, 0
,||0 1
exceptNumberFormat||2 D
,||D E
$str||F `
+||a b
data||c g
)||g h
;||h i
}}} 
}~~ 	
} 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 !
PRIVATE_CONST_FALSE
 
)
  
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
   
catch
¡¡ 
(
¡¡ 
FormatException
¡¡ " 
exceptNumberFormat
¡¡# 5
)
¡¡5 6
{
¢¢ 
IO
¤¤ 
.
¤¤ 
Logger
¤¤ 
.
¤¤ 
Log
¤¤ 
(
¤¤ 
NLog
¤¤ "
.
¤¤" #
LogLevel
¤¤# +
.
¤¤+ ,
Warn
¤¤, 0
,
¤¤0 1 
exceptNumberFormat
¤¤2 D
,
¤¤D E
$str
¤¤F j
+
¤¤k l 
exceptNumberFormat
¤¤m 
)¤¤ 
;¤¤ 
}
¥¥ 
}
¦¦ 	
}
§§ 
private
ªª 
void
ªª 
GoodB2G2
ªª 
(
ªª 
HttpRequest
ªª %
req
ªª& )
,
ªª) *
HttpResponse
ªª+ 7
resp
ªª8 <
)
ªª< =
{
«« 
string
¬¬ 
data
¬¬ 
;
¬¬ 
if
­­ 

(
­­  
PRIVATE_CONST_TRUE
­­ 
)
­­ 
{
®® 	
data
¯¯ 
=
¯¯ 
$str
¯¯ 
;
¯¯ 
{
±± 
if
²² 
(
²² 
req
²² 
.
²² 
QueryString
²² #
[
²²# $
$str
²²$ (
]
²²( )
!=
²²* ,
null
²²- 1
)
²²1 2
{
³³ 
data
´´ 
=
´´ 
req
´´ 
.
´´ 
QueryString
´´ *
[
´´* +
$str
´´+ /
]
´´/ 0
;
´´0 1
}
µµ 
}
¶¶ 
}
·· 	
else
¸¸ 
{
¹¹ 	
data
¼¼ 
=
¼¼ 
null
¼¼ 
;
¼¼ 
}
½½ 	
if
¾¾ 

(
¾¾  
PRIVATE_CONST_TRUE
¾¾ 
)
¾¾ 
{
¿¿ 	
try
ÀÀ 
{
ÁÁ 
int
ÂÂ 
value
ÂÂ 
=
ÂÂ 
int
ÂÂ 
.
ÂÂ  
Parse
ÂÂ  %
(
ÂÂ% &
data
ÂÂ& *
)
ÂÂ* +
;
ÂÂ+ ,
}
ÃÃ 
catch
ÄÄ 
(
ÄÄ 
FormatException
ÄÄ " 
exceptNumberFormat
ÄÄ# 5
)
ÄÄ5 6
{
ÅÅ 
IO
ÇÇ 
.
ÇÇ 
Logger
ÇÇ 
.
ÇÇ 
Log
ÇÇ 
(
ÇÇ 
NLog
ÇÇ "
.
ÇÇ" #
LogLevel
ÇÇ# +
.
ÇÇ+ ,
Warn
ÇÇ, 0
,
ÇÇ0 1 
exceptNumberFormat
ÇÇ2 D
,
ÇÇD E
$str
ÇÇF j
+
ÇÇk l 
exceptNumberFormat
ÇÇm 
)ÇÇ 
;ÇÇ 
}
ÈÈ 
}
ÉÉ 	
}
ÊÊ 
public
ÌÌ 

override
ÌÌ 
void
ÌÌ 
Good
ÌÌ 
(
ÌÌ 
HttpRequest
ÌÌ )
req
ÌÌ* -
,
ÌÌ- .
HttpResponse
ÌÌ/ ;
resp
ÌÌ< @
)
ÌÌ@ A
{
ÍÍ 
GoodG2B1
ÎÎ 
(
ÎÎ 
req
ÎÎ 
,
ÎÎ 
resp
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodG2B2
ÏÏ 
(
ÏÏ 
req
ÏÏ 
,
ÏÏ 
resp
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodB2G1
ÐÐ 
(
ÐÐ 
req
ÐÐ 
,
ÐÐ 
resp
ÐÐ 
)
ÐÐ 
;
ÐÐ 
GoodB2G2
ÑÑ 
(
ÑÑ 
req
ÑÑ 
,
ÑÑ 
resp
ÑÑ 
)
ÑÑ 
;
ÑÑ 
}
ÒÒ 
}ÔÔ 
}ÕÕ ÖN
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_05.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_05 H
:I J
AbstractTestCaseWebK ^
{ 
private   
bool   
privateTrue   
=   
true   #
;  # $
private!! 
bool!! 
privateFalse!! 
=!! 
false!!  %
;!!% &
public## 

override## 
void## 
Bad## 
(## 
HttpRequest## (
req##) ,
,##, -
HttpResponse##. :
resp##; ?
)##? @
{$$ 
string%% 
data%% 
;%% 
if&& 

(&& 
privateTrue&& 
)&& 
{'' 	
data(( 
=(( 
$str(( 
;(( 
{** 
if++ 
(++ 
req++ 
.++ 
QueryString++ #
[++# $
$str++$ (
]++( )
!=++* ,
null++- 1
)++1 2
{,, 
data-- 
=-- 
req-- 
.-- 
QueryString-- *
[--* +
$str--+ /
]--/ 0
;--0 1
}.. 
}// 
}00 	
else11 
{22 	
data55 
=55 
null55 
;55 
}66 	
if77 

(77 
privateTrue77 
)77 
{88 	
try99 
{:: 
int;; 
value;; 
=;; 
int;; 
.;;  
Parse;;  %
(;;% &
data;;& *
);;* +
;;;+ ,
}<< 
catch== 
(== 
FormatException== "
exceptNumberFormat==# 5
)==5 6
{>> 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
exceptNumberFormat@@2 D
,@@D E
$str@@F `
+@@a b
data@@c g
)@@g h
;@@h i
}AA 
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
HttpRequestGG %
reqGG& )
,GG) *
HttpResponseGG+ 7
respGG8 <
)GG< =
{HH 
stringII 
dataII 
;II 
ifJJ 

(JJ 
privateFalseJJ 
)JJ 
{KK 	
dataNN 
=NN 
nullNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$strSS 
;SS 
}TT 	
ifUU 

(UU 
privateTrueUU 
)UU 
{VV 	
tryWW 
{XX 
intYY 
valueYY 
=YY 
intYY 
.YY  
ParseYY  %
(YY% &
dataYY& *
)YY* +
;YY+ ,
}ZZ 
catch[[ 
([[ 
FormatException[[ "
exceptNumberFormat[[# 5
)[[5 6
{\\ 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
exceptNumberFormat^^2 D
,^^D E
$str^^F `
+^^a b
data^^c g
)^^g h
;^^h i
}__ 
}`` 	
}aa 
privatedd 
voiddd 
GoodG2B2dd 
(dd 
HttpRequestdd %
reqdd& )
,dd) *
HttpResponsedd+ 7
respdd8 <
)dd< =
{ee 
stringff 
dataff 
;ff 
ifgg 

(gg 
privateTruegg 
)gg 
{hh 	
datajj 
=jj 
$strjj 
;jj 
}kk 	
elsell 
{mm 	
datapp 
=pp 
nullpp 
;pp 
}qq 	
ifrr 

(rr 
privateTruerr 
)rr 
{ss 	
trytt 
{uu 
intvv 
valuevv 
=vv 
intvv 
.vv  
Parsevv  %
(vv% &
datavv& *
)vv* +
;vv+ ,
}ww 
catchxx 
(xx 
FormatExceptionxx "
exceptNumberFormatxx# 5
)xx5 6
{yy 
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ "
.{{" #
LogLevel{{# +
.{{+ ,
Warn{{, 0
,{{0 1
exceptNumberFormat{{2 D
,{{D E
$str{{F `
+{{a b
data{{c g
){{g h
;{{h i
}|| 
}}} 	
}~~ 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
 
privateTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateFalse
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
   
(
   
FormatException
   " 
exceptNumberFormat
  # 5
)
  5 6
{
¡¡ 
IO
££ 
.
££ 
Logger
££ 
.
££ 
Log
££ 
(
££ 
NLog
££ "
.
££" #
LogLevel
££# +
.
££+ ,
Warn
££, 0
,
££0 1 
exceptNumberFormat
££2 D
,
££D E
$str
££F j
+
££k l 
exceptNumberFormat
££m 
)££ 
;££ 
}
¤¤ 
}
¥¥ 	
}
¦¦ 
private
©© 
void
©© 
GoodB2G2
©© 
(
©© 
HttpRequest
©© %
req
©©& )
,
©©) *
HttpResponse
©©+ 7
resp
©©8 <
)
©©< =
{
ªª 
string
«« 
data
«« 
;
«« 
if
¬¬ 

(
¬¬ 
privateTrue
¬¬ 
)
¬¬ 
{
­­ 	
data
®® 
=
®® 
$str
®® 
;
®® 
{
°° 
if
±± 
(
±± 
req
±± 
.
±± 
QueryString
±± #
[
±±# $
$str
±±$ (
]
±±( )
!=
±±* ,
null
±±- 1
)
±±1 2
{
²² 
data
³³ 
=
³³ 
req
³³ 
.
³³ 
QueryString
³³ *
[
³³* +
$str
³³+ /
]
³³/ 0
;
³³0 1
}
´´ 
}
µµ 
}
¶¶ 	
else
·· 
{
¸¸ 	
data
»» 
=
»» 
null
»» 
;
»» 
}
¼¼ 	
if
½½ 

(
½½ 
privateTrue
½½ 
)
½½ 
{
¾¾ 	
try
¿¿ 
{
ÀÀ 
int
ÁÁ 
value
ÁÁ 
=
ÁÁ 
int
ÁÁ 
.
ÁÁ  
Parse
ÁÁ  %
(
ÁÁ% &
data
ÁÁ& *
)
ÁÁ* +
;
ÁÁ+ ,
}
ÂÂ 
catch
ÃÃ 
(
ÃÃ 
FormatException
ÃÃ " 
exceptNumberFormat
ÃÃ# 5
)
ÃÃ5 6
{
ÄÄ 
IO
ÆÆ 
.
ÆÆ 
Logger
ÆÆ 
.
ÆÆ 
Log
ÆÆ 
(
ÆÆ 
NLog
ÆÆ "
.
ÆÆ" #
LogLevel
ÆÆ# +
.
ÆÆ+ ,
Warn
ÆÆ, 0
,
ÆÆ0 1 
exceptNumberFormat
ÆÆ2 D
,
ÆÆD E
$str
ÆÆF j
+
ÆÆk l 
exceptNumberFormat
ÆÆm 
)ÆÆ 
;ÆÆ 
}
ÇÇ 
}
ÈÈ 	
}
ÉÉ 
public
ËË 

override
ËË 
void
ËË 
Good
ËË 
(
ËË 
HttpRequest
ËË )
req
ËË* -
,
ËË- .
HttpResponse
ËË/ ;
resp
ËË< @
)
ËË@ A
{
ÌÌ 
GoodG2B1
ÍÍ 
(
ÍÍ 
req
ÍÍ 
,
ÍÍ 
resp
ÍÍ 
)
ÍÍ 
;
ÍÍ 
GoodG2B2
ÎÎ 
(
ÎÎ 
req
ÎÎ 
,
ÎÎ 
resp
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodB2G1
ÏÏ 
(
ÏÏ 
req
ÏÏ 
,
ÏÏ 
resp
ÏÏ 
)
ÏÏ 
;
ÏÏ 
GoodB2G2
ÐÐ 
(
ÐÐ 
req
ÐÐ 
,
ÐÐ 
resp
ÐÐ 
)
ÐÐ 
;
ÐÐ 
}
ÑÑ 
}ÓÓ 
}ÔÔ ¥Q
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_06.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_06 H
:I J
AbstractTestCaseWebK ^
{ 
private   
const   
int   
PRIVATE_CONST_FIVE   (
=  ) *
$num  + ,
;  , -
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
string$$ 
data$$ 
;$$ 
if%% 

(%% 
PRIVATE_CONST_FIVE%% 
==%%  
$num%%  !
)%%! "
{&& 	
data'' 
='' 
$str'' 
;'' 
{)) 
if** 
(** 
req** 
.** 
QueryString** #
[**# $
$str**$ (
]**( )
!=*** ,
null**- 1
)**1 2
{++ 
data,, 
=,, 
req,, 
.,, 
QueryString,, *
[,,* +
$str,,+ /
],,/ 0
;,,0 1
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
null44 
;44 
}55 	
if66 

(66 
PRIVATE_CONST_FIVE66 
==66  
$num66  !
)66! "
{77 	
try88 
{99 
int:: 
value:: 
=:: 
int:: 
.::  
Parse::  %
(::% &
data::& *
)::* +
;::+ ,
};; 
catch<< 
(<< 
FormatException<< "
exceptNumberFormat<<# 5
)<<5 6
{== 
IO?? 
.?? 
Logger?? 
.?? 
Log?? 
(?? 
NLog?? "
.??" #
LogLevel??# +
.??+ ,
Warn??, 0
,??0 1
exceptNumberFormat??2 D
,??D E
$str??F `
+??a b
data??c g
)??g h
;??h i
}@@ 
}AA 	
}BB 
privateFF 
voidFF 
GoodG2B1FF 
(FF 
HttpRequestFF %
reqFF& )
,FF) *
HttpResponseFF+ 7
respFF8 <
)FF< =
{GG 
stringHH 
dataHH 
;HH 
ifII 

(II 
PRIVATE_CONST_FIVEII 
!=II  
$numII  !
)II! "
{JJ 	
dataMM 
=MM 
nullMM 
;MM 
}NN 	
elseOO 
{PP 	
dataRR 
=RR 
$strRR 
;RR 
}SS 	
ifTT 

(TT 
PRIVATE_CONST_FIVETT 
==TT  
$numTT  !
)TT! "
{UU 	
tryVV 
{WW 
intXX 
valueXX 
=XX 
intXX 
.XX  
ParseXX  %
(XX% &
dataXX& *
)XX* +
;XX+ ,
}YY 
catchZZ 
(ZZ 
FormatExceptionZZ "
exceptNumberFormatZZ# 5
)ZZ5 6
{[[ 
IO]] 
.]] 
Logger]] 
.]] 
Log]] 
(]] 
NLog]] "
.]]" #
LogLevel]]# +
.]]+ ,
Warn]], 0
,]]0 1
exceptNumberFormat]]2 D
,]]D E
$str]]F `
+]]a b
data]]c g
)]]g h
;]]h i
}^^ 
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
HttpRequestcc %
reqcc& )
,cc) *
HttpResponsecc+ 7
respcc8 <
)cc< =
{dd 
stringee 
dataee 
;ee 
ifff 

(ff 
PRIVATE_CONST_FIVEff 
==ff  
$numff  !
)ff! "
{gg 	
dataii 
=ii 
$strii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
nulloo 
;oo 
}pp 	
ifqq 

(qq 
PRIVATE_CONST_FIVEqq 
==qq  
$numqq  !
)qq! "
{rr 	
tryss 
{tt 
intuu 
valueuu 
=uu 
intuu 
.uu  
Parseuu  %
(uu% &
datauu& *
)uu* +
;uu+ ,
}vv 
catchww 
(ww 
FormatExceptionww "
exceptNumberFormatww# 5
)ww5 6
{xx 
IOzz 
.zz 
Loggerzz 
.zz 
Logzz 
(zz 
NLogzz "
.zz" #
LogLevelzz# +
.zz+ ,
Warnzz, 0
,zz0 1
exceptNumberFormatzz2 D
,zzD E
$strzzF `
+zza b
datazzc g
)zzg h
;zzh i
}{{ 
}|| 	
}}} 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
 	
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PRIVATE_CONST_FIVE
 
!=
  
$num
  !
)
! "
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
   
IO
¢¢ 
.
¢¢ 
Logger
¢¢ 
.
¢¢ 
Log
¢¢ 
(
¢¢ 
NLog
¢¢ "
.
¢¢" #
LogLevel
¢¢# +
.
¢¢+ ,
Warn
¢¢, 0
,
¢¢0 1 
exceptNumberFormat
¢¢2 D
,
¢¢D E
$str
¢¢F j
+
¢¢k l 
exceptNumberFormat
¢¢m 
)¢¢ 
;¢¢ 
}
££ 
}
¤¤ 	
}
¥¥ 
private
¨¨ 
void
¨¨ 
GoodB2G2
¨¨ 
(
¨¨ 
HttpRequest
¨¨ %
req
¨¨& )
,
¨¨) *
HttpResponse
¨¨+ 7
resp
¨¨8 <
)
¨¨< =
{
©© 
string
ªª 
data
ªª 
;
ªª 
if
«« 

(
««  
PRIVATE_CONST_FIVE
«« 
==
««  
$num
««  !
)
««! "
{
¬¬ 	
data
­­ 
=
­­ 
$str
­­ 
;
­­ 
{
¯¯ 
if
°° 
(
°° 
req
°° 
.
°° 
QueryString
°° #
[
°°# $
$str
°°$ (
]
°°( )
!=
°°* ,
null
°°- 1
)
°°1 2
{
±± 
data
²² 
=
²² 
req
²² 
.
²² 
QueryString
²² *
[
²²* +
$str
²²+ /
]
²²/ 0
;
²²0 1
}
³³ 
}
´´ 
}
µµ 	
else
¶¶ 
{
·· 	
data
ºº 
=
ºº 
null
ºº 
;
ºº 
}
»» 	
if
¼¼ 

(
¼¼  
PRIVATE_CONST_FIVE
¼¼ 
==
¼¼  
$num
¼¼  !
)
¼¼! "
{
½½ 	
try
¾¾ 
{
¿¿ 
int
ÀÀ 
value
ÀÀ 
=
ÀÀ 
int
ÀÀ 
.
ÀÀ  
Parse
ÀÀ  %
(
ÀÀ% &
data
ÀÀ& *
)
ÀÀ* +
;
ÀÀ+ ,
}
ÁÁ 
catch
ÂÂ 
(
ÂÂ 
FormatException
ÂÂ " 
exceptNumberFormat
ÂÂ# 5
)
ÂÂ5 6
{
ÃÃ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ 
.
ÅÅ 
Log
ÅÅ 
(
ÅÅ 
NLog
ÅÅ "
.
ÅÅ" #
LogLevel
ÅÅ# +
.
ÅÅ+ ,
Warn
ÅÅ, 0
,
ÅÅ0 1 
exceptNumberFormat
ÅÅ2 D
,
ÅÅD E
$str
ÅÅF j
+
ÅÅk l 
exceptNumberFormat
ÅÅm 
)ÅÅ 
;ÅÅ 
}
ÆÆ 
}
ÇÇ 	
}
ÈÈ 
public
ÊÊ 

override
ÊÊ 
void
ÊÊ 
Good
ÊÊ 
(
ÊÊ 
HttpRequest
ÊÊ )
req
ÊÊ* -
,
ÊÊ- .
HttpResponse
ÊÊ/ ;
resp
ÊÊ< @
)
ÊÊ@ A
{
ËË 
GoodG2B1
ÌÌ 
(
ÌÌ 
req
ÌÌ 
,
ÌÌ 
resp
ÌÌ 
)
ÌÌ 
;
ÌÌ 
GoodG2B2
ÍÍ 
(
ÍÍ 
req
ÍÍ 
,
ÍÍ 
resp
ÍÍ 
)
ÍÍ 
;
ÍÍ 
GoodB2G1
ÎÎ 
(
ÎÎ 
req
ÎÎ 
,
ÎÎ 
resp
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodB2G2
ÏÏ 
(
ÏÏ 
req
ÏÏ 
,
ÏÏ 
resp
ÏÏ 
)
ÏÏ 
;
ÏÏ 
}
ÐÐ 
}ÒÒ 
}ÓÓ ÅP
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_07.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_07 H
:I J
AbstractTestCaseWebK ^
{ 
private   
int   
privateFive   
=   
$num   
;    
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
string$$ 
data$$ 
;$$ 
if%% 

(%% 
privateFive%% 
==%% 
$num%% 
)%% 
{&& 	
data'' 
='' 
$str'' 
;'' 
{)) 
if** 
(** 
req** 
.** 
QueryString** #
[**# $
$str**$ (
]**( )
!=*** ,
null**- 1
)**1 2
{++ 
data,, 
=,, 
req,, 
.,, 
QueryString,, *
[,,* +
$str,,+ /
],,/ 0
;,,0 1
}-- 
}.. 
}// 	
else00 
{11 	
data44 
=44 
null44 
;44 
}55 	
if66 

(66 
privateFive66 
==66 
$num66 
)66 
{77 	
try88 
{99 
int:: 
value:: 
=:: 
int:: 
.::  
Parse::  %
(::% &
data::& *
)::* +
;::+ ,
};; 
catch<< 
(<< 
FormatException<< "
exceptNumberFormat<<# 5
)<<5 6
{== 
IO?? 
.?? 
Logger?? 
.?? 
Log?? 
(?? 
NLog?? "
.??" #
LogLevel??# +
.??+ ,
Warn??, 0
,??0 1
exceptNumberFormat??2 D
,??D E
$str??F `
+??a b
data??c g
)??g h
;??h i
}@@ 
}AA 	
}BB 
privateFF 
voidFF 
GoodG2B1FF 
(FF 
HttpRequestFF %
reqFF& )
,FF) *
HttpResponseFF+ 7
respFF8 <
)FF< =
{GG 
stringHH 
dataHH 
;HH 
ifII 

(II 
privateFiveII 
!=II 
$numII 
)II 
{JJ 	
dataMM 
=MM 
nullMM 
;MM 
}NN 	
elseOO 
{PP 	
dataRR 
=RR 
$strRR 
;RR 
}SS 	
ifTT 

(TT 
privateFiveTT 
==TT 
$numTT 
)TT 
{UU 	
tryVV 
{WW 
intXX 
valueXX 
=XX 
intXX 
.XX  
ParseXX  %
(XX% &
dataXX& *
)XX* +
;XX+ ,
}YY 
catchZZ 
(ZZ 
FormatExceptionZZ "
exceptNumberFormatZZ# 5
)ZZ5 6
{[[ 
IO]] 
.]] 
Logger]] 
.]] 
Log]] 
(]] 
NLog]] "
.]]" #
LogLevel]]# +
.]]+ ,
Warn]], 0
,]]0 1
exceptNumberFormat]]2 D
,]]D E
$str]]F `
+]]a b
data]]c g
)]]g h
;]]h i
}^^ 
}__ 	
}`` 
privatecc 
voidcc 
GoodG2B2cc 
(cc 
HttpRequestcc %
reqcc& )
,cc) *
HttpResponsecc+ 7
respcc8 <
)cc< =
{dd 
stringee 
dataee 
;ee 
ifff 

(ff 
privateFiveff 
==ff 
$numff 
)ff 
{gg 	
dataii 
=ii 
$strii 
;ii 
}jj 	
elsekk 
{ll 	
dataoo 
=oo 
nulloo 
;oo 
}pp 	
ifqq 

(qq 
privateFiveqq 
==qq 
$numqq 
)qq 
{rr 	
tryss 
{tt 
intuu 
valueuu 
=uu 
intuu 
.uu  
Parseuu  %
(uu% &
datauu& *
)uu* +
;uu+ ,
}vv 
catchww 
(ww 
FormatExceptionww "
exceptNumberFormatww# 5
)ww5 6
{xx 
IOzz 
.zz 
Loggerzz 
.zz 
Logzz 
(zz 
NLogzz "
.zz" #
LogLevelzz# +
.zz+ ,
Warnzz, 0
,zz0 1
exceptNumberFormatzz2 D
,zzD E
$strzzF `
+zza b
datazzc g
)zzg h
;zzh i
}{{ 
}|| 	
}}} 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateFive
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
   
IO
¢¢ 
.
¢¢ 
Logger
¢¢ 
.
¢¢ 
Log
¢¢ 
(
¢¢ 
NLog
¢¢ "
.
¢¢" #
LogLevel
¢¢# +
.
¢¢+ ,
Warn
¢¢, 0
,
¢¢0 1 
exceptNumberFormat
¢¢2 D
,
¢¢D E
$str
¢¢F j
+
¢¢k l 
exceptNumberFormat
¢¢m 
)¢¢ 
;¢¢ 
}
££ 
}
¤¤ 	
}
¥¥ 
private
¨¨ 
void
¨¨ 
GoodB2G2
¨¨ 
(
¨¨ 
HttpRequest
¨¨ %
req
¨¨& )
,
¨¨) *
HttpResponse
¨¨+ 7
resp
¨¨8 <
)
¨¨< =
{
©© 
string
ªª 
data
ªª 
;
ªª 
if
«« 

(
«« 
privateFive
«« 
==
«« 
$num
«« 
)
«« 
{
¬¬ 	
data
­­ 
=
­­ 
$str
­­ 
;
­­ 
{
¯¯ 
if
°° 
(
°° 
req
°° 
.
°° 
QueryString
°° #
[
°°# $
$str
°°$ (
]
°°( )
!=
°°* ,
null
°°- 1
)
°°1 2
{
±± 
data
²² 
=
²² 
req
²² 
.
²² 
QueryString
²² *
[
²²* +
$str
²²+ /
]
²²/ 0
;
²²0 1
}
³³ 
}
´´ 
}
µµ 	
else
¶¶ 
{
·· 	
data
ºº 
=
ºº 
null
ºº 
;
ºº 
}
»» 	
if
¼¼ 

(
¼¼ 
privateFive
¼¼ 
==
¼¼ 
$num
¼¼ 
)
¼¼ 
{
½½ 	
try
¾¾ 
{
¿¿ 
int
ÀÀ 
value
ÀÀ 
=
ÀÀ 
int
ÀÀ 
.
ÀÀ  
Parse
ÀÀ  %
(
ÀÀ% &
data
ÀÀ& *
)
ÀÀ* +
;
ÀÀ+ ,
}
ÁÁ 
catch
ÂÂ 
(
ÂÂ 
FormatException
ÂÂ " 
exceptNumberFormat
ÂÂ# 5
)
ÂÂ5 6
{
ÃÃ 
IO
ÅÅ 
.
ÅÅ 
Logger
ÅÅ 
.
ÅÅ 
Log
ÅÅ 
(
ÅÅ 
NLog
ÅÅ "
.
ÅÅ" #
LogLevel
ÅÅ# +
.
ÅÅ+ ,
Warn
ÅÅ, 0
,
ÅÅ0 1 
exceptNumberFormat
ÅÅ2 D
,
ÅÅD E
$str
ÅÅF j
+
ÅÅk l 
exceptNumberFormat
ÅÅm 
)ÅÅ 
;ÅÅ 
}
ÆÆ 
}
ÇÇ 	
}
ÈÈ 
public
ÊÊ 

override
ÊÊ 
void
ÊÊ 
Good
ÊÊ 
(
ÊÊ 
HttpRequest
ÊÊ )
req
ÊÊ* -
,
ÊÊ- .
HttpResponse
ÊÊ/ ;
resp
ÊÊ< @
)
ÊÊ@ A
{
ËË 
GoodG2B1
ÌÌ 
(
ÌÌ 
req
ÌÌ 
,
ÌÌ 
resp
ÌÌ 
)
ÌÌ 
;
ÌÌ 
GoodG2B2
ÍÍ 
(
ÍÍ 
req
ÍÍ 
,
ÍÍ 
resp
ÍÍ 
)
ÍÍ 
;
ÍÍ 
GoodB2G1
ÎÎ 
(
ÎÎ 
req
ÎÎ 
,
ÎÎ 
resp
ÎÎ 
)
ÎÎ 
;
ÎÎ 
GoodB2G2
ÏÏ 
(
ÏÏ 
req
ÏÏ 
,
ÏÏ 
resp
ÏÏ 
)
ÏÏ 
;
ÏÏ 
}
ÐÐ 
}ÒÒ 
}ÓÓ ¾S
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_08.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_08 H
:I J
AbstractTestCaseWebK ^
{ 
private   
static   
bool   
PrivateReturnsTrue   *
(  * +
)  + ,
{!! 
return"" 
true"" 
;"" 
}## 
private%% 
static%% 
bool%% 
PrivateReturnsFalse%% +
(%%+ ,
)%%, -
{&& 
return'' 
false'' 
;'' 
}(( 
public** 

override** 
void** 
Bad** 
(** 
HttpRequest** (
req**) ,
,**, -
HttpResponse**. :
resp**; ?
)**? @
{++ 
string,, 
data,, 
;,, 
if-- 

(-- 
PrivateReturnsTrue-- 
(-- 
)--  
)--  !
{.. 	
data// 
=// 
$str// 
;// 
{11 
if22 
(22 
req22 
.22 
QueryString22 #
[22# $
$str22$ (
]22( )
!=22* ,
null22- 1
)221 2
{33 
data44 
=44 
req44 
.44 
QueryString44 *
[44* +
$str44+ /
]44/ 0
;440 1
}55 
}66 
}77 	
else88 
{99 	
data<< 
=<< 
null<< 
;<< 
}== 	
if>> 

(>> 
PrivateReturnsTrue>> 
(>> 
)>>  
)>>  !
{?? 	
try@@ 
{AA 
intBB 
valueBB 
=BB 
intBB 
.BB  
ParseBB  %
(BB% &
dataBB& *
)BB* +
;BB+ ,
}CC 
catchDD 
(DD 
FormatExceptionDD "
exceptNumberFormatDD# 5
)DD5 6
{EE 
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG "
.GG" #
LogLevelGG# +
.GG+ ,
WarnGG, 0
,GG0 1
exceptNumberFormatGG2 D
,GGD E
$strGGF `
+GGa b
dataGGc g
)GGg h
;GGh i
}HH 
}II 	
}JJ 
privateNN 
voidNN 
GoodG2B1NN 
(NN 
HttpRequestNN %
reqNN& )
,NN) *
HttpResponseNN+ 7
respNN8 <
)NN< =
{OO 
stringPP 
dataPP 
;PP 
ifQQ 

(QQ 
PrivateReturnsFalseQQ 
(QQ  
)QQ  !
)QQ! "
{RR 	
dataUU 
=UU 
nullUU 
;UU 
}VV 	
elseWW 
{XX 	
dataZZ 
=ZZ 
$strZZ 
;ZZ 
}[[ 	
if\\ 

(\\ 
PrivateReturnsTrue\\ 
(\\ 
)\\  
)\\  !
{]] 	
try^^ 
{__ 
int`` 
value`` 
=`` 
int`` 
.``  
Parse``  %
(``% &
data``& *
)``* +
;``+ ,
}aa 
catchbb 
(bb 
FormatExceptionbb "
exceptNumberFormatbb# 5
)bb5 6
{cc 
IOee 
.ee 
Loggeree 
.ee 
Logee 
(ee 
NLogee "
.ee" #
LogLevelee# +
.ee+ ,
Warnee, 0
,ee0 1
exceptNumberFormatee2 D
,eeD E
$streeF `
+eea b
dataeec g
)eeg h
;eeh i
}ff 
}gg 	
}hh 
privatekk 
voidkk 
GoodG2B2kk 
(kk 
HttpRequestkk %
reqkk& )
,kk) *
HttpResponsekk+ 7
respkk8 <
)kk< =
{ll 
stringmm 
datamm 
;mm 
ifnn 

(nn 
PrivateReturnsTruenn 
(nn 
)nn  
)nn  !
{oo 	
dataqq 
=qq 
$strqq 
;qq 
}rr 	
elsess 
{tt 	
dataww 
=ww 
nullww 
;ww 
}xx 	
ifyy 

(yy 
PrivateReturnsTrueyy 
(yy 
)yy  
)yy  !
{zz 	
try{{ 
{|| 
int}} 
value}} 
=}} 
int}} 
.}}  
Parse}}  %
(}}% &
data}}& *
)}}* +
;}}+ ,
}~~ 
catch 
( 
FormatException "
exceptNumberFormat# 5
)5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 !
PrivateReturnsFalse
 
(
  
)
  !
)
! "
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
   	
else
¡¡ 
{
¢¢ 	
try
££ 
{
¤¤ 
int
¥¥ 
value
¥¥ 
=
¥¥ 
int
¥¥ 
.
¥¥  
Parse
¥¥  %
(
¥¥% &
data
¥¥& *
)
¥¥* +
;
¥¥+ ,
}
¦¦ 
catch
§§ 
(
§§ 
FormatException
§§ " 
exceptNumberFormat
§§# 5
)
§§5 6
{
¨¨ 
IO
ªª 
.
ªª 
Logger
ªª 
.
ªª 
Log
ªª 
(
ªª 
NLog
ªª "
.
ªª" #
LogLevel
ªª# +
.
ªª+ ,
Warn
ªª, 0
,
ªª0 1 
exceptNumberFormat
ªª2 D
,
ªªD E
$str
ªªF j
+
ªªk l 
exceptNumberFormat
ªªm 
)ªª 
;ªª 
}
«« 
}
¬¬ 	
}
­­ 
private
°° 
void
°° 
GoodB2G2
°° 
(
°° 
HttpRequest
°° %
req
°°& )
,
°°) *
HttpResponse
°°+ 7
resp
°°8 <
)
°°< =
{
±± 
string
²² 
data
²² 
;
²² 
if
³³ 

(
³³  
PrivateReturnsTrue
³³ 
(
³³ 
)
³³  
)
³³  !
{
´´ 	
data
µµ 
=
µµ 
$str
µµ 
;
µµ 
{
·· 
if
¸¸ 
(
¸¸ 
req
¸¸ 
.
¸¸ 
QueryString
¸¸ #
[
¸¸# $
$str
¸¸$ (
]
¸¸( )
!=
¸¸* ,
null
¸¸- 1
)
¸¸1 2
{
¹¹ 
data
ºº 
=
ºº 
req
ºº 
.
ºº 
QueryString
ºº *
[
ºº* +
$str
ºº+ /
]
ºº/ 0
;
ºº0 1
}
»» 
}
¼¼ 
}
½½ 	
else
¾¾ 
{
¿¿ 	
data
ÂÂ 
=
ÂÂ 
null
ÂÂ 
;
ÂÂ 
}
ÃÃ 	
if
ÄÄ 

(
ÄÄ  
PrivateReturnsTrue
ÄÄ 
(
ÄÄ 
)
ÄÄ  
)
ÄÄ  !
{
ÅÅ 	
try
ÆÆ 
{
ÇÇ 
int
ÈÈ 
value
ÈÈ 
=
ÈÈ 
int
ÈÈ 
.
ÈÈ  
Parse
ÈÈ  %
(
ÈÈ% &
data
ÈÈ& *
)
ÈÈ* +
;
ÈÈ+ ,
}
ÉÉ 
catch
ÊÊ 
(
ÊÊ 
FormatException
ÊÊ " 
exceptNumberFormat
ÊÊ# 5
)
ÊÊ5 6
{
ËË 
IO
ÍÍ 
.
ÍÍ 
Logger
ÍÍ 
.
ÍÍ 
Log
ÍÍ 
(
ÍÍ 
NLog
ÍÍ "
.
ÍÍ" #
LogLevel
ÍÍ# +
.
ÍÍ+ ,
Warn
ÍÍ, 0
,
ÍÍ0 1 
exceptNumberFormat
ÍÍ2 D
,
ÍÍD E
$str
ÍÍF j
+
ÍÍk l 
exceptNumberFormat
ÍÍm 
)ÍÍ 
;ÍÍ 
}
ÎÎ 
}
ÏÏ 	
}
ÐÐ 
public
ÒÒ 

override
ÒÒ 
void
ÒÒ 
Good
ÒÒ 
(
ÒÒ 
HttpRequest
ÒÒ )
req
ÒÒ* -
,
ÒÒ- .
HttpResponse
ÒÒ/ ;
resp
ÒÒ< @
)
ÒÒ@ A
{
ÓÓ 
GoodG2B1
ÔÔ 
(
ÔÔ 
req
ÔÔ 
,
ÔÔ 
resp
ÔÔ 
)
ÔÔ 
;
ÔÔ 
GoodG2B2
ÕÕ 
(
ÕÕ 
req
ÕÕ 
,
ÕÕ 
resp
ÕÕ 
)
ÕÕ 
;
ÕÕ 
GoodB2G1
ÖÖ 
(
ÖÖ 
req
ÖÖ 
,
ÖÖ 
resp
ÖÖ 
)
ÖÖ 
;
ÖÖ 
GoodB2G2
×× 
(
×× 
req
×× 
,
×× 
resp
×× 
)
×× 
;
×× 
}
ØØ 
}ÚÚ 
}ÛÛ êO
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_09.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_09 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_TRUE   #
)  # $
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
data'' 
='' 
req'' 
.'' 
QueryString'' *
[''* +
$str''+ /
]''/ 0
;''0 1
}(( 
})) 
}** 	
else++ 
{,, 	
data// 
=// 
null// 
;// 
}00 	
if11 

(11 
IO11 
.11  
STATIC_READONLY_TRUE11 #
)11# $
{22 	
try33 
{44 
int55 
value55 
=55 
int55 
.55  
Parse55  %
(55% &
data55& *
)55* +
;55+ ,
}66 
catch77 
(77 
FormatException77 "
exceptNumberFormat77# 5
)775 6
{88 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptNumberFormat::2 D
,::D E
$str::F `
+::a b
data::c g
)::g h
;::h i
};; 
}<< 	
}== 
privateAA 
voidAA 
GoodG2B1AA 
(AA 
HttpRequestAA %
reqAA& )
,AA) *
HttpResponseAA+ 7
respAA8 <
)AA< =
{BB 
stringCC 
dataCC 
;CC 
ifDD 

(DD 
IODD 
.DD !
STATIC_READONLY_FALSEDD $
)DD$ %
{EE 	
dataHH 
=HH 
nullHH 
;HH 
}II 	
elseJJ 
{KK 	
dataMM 
=MM 
$strMM 
;MM 
}NN 	
ifOO 

(OO 
IOOO 
.OO  
STATIC_READONLY_TRUEOO #
)OO# $
{PP 	
tryQQ 
{RR 
intSS 
valueSS 
=SS 
intSS 
.SS  
ParseSS  %
(SS% &
dataSS& *
)SS* +
;SS+ ,
}TT 
catchUU 
(UU 
FormatExceptionUU "
exceptNumberFormatUU# 5
)UU5 6
{VV 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$strXXF `
+XXa b
dataXXc g
)XXg h
;XXh i
}YY 
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
string`` 
data`` 
;`` 
ifaa 

(aa 
IOaa 
.aa  
STATIC_READONLY_TRUEaa #
)aa# $
{bb 	
datadd 
=dd 
$strdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
nulljj 
;jj 
}kk 	
ifll 

(ll 
IOll 
.ll  
STATIC_READONLY_TRUEll #
)ll# $
{mm 	
trynn 
{oo 
intpp 
valuepp 
=pp 
intpp 
.pp  
Parsepp  %
(pp% &
datapp& *
)pp* +
;pp+ ,
}qq 
catchrr 
(rr 
FormatExceptionrr "
exceptNumberFormatrr# 5
)rr5 6
{ss 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu "
.uu" #
LogLeveluu# +
.uu+ ,
Warnuu, 0
,uu0 1
exceptNumberFormatuu2 D
,uuD E
$struuF `
+uua b
datauuc g
)uug h
;uuh i
}vv 
}ww 	
}xx 
private{{ 
void{{ 
GoodB2G1{{ 
({{ 
HttpRequest{{ %
req{{& )
,{{) *
HttpResponse{{+ 7
resp{{8 <
){{< =
{|| 
string}} 
data}} 
;}} 
if~~ 

(~~ 
IO~~ 
.~~  
STATIC_READONLY_TRUE~~ #
)~~# $
{ 	
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 #
STATIC_READONLY_FALSE
 $
)
$ %
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
   
private
££ 
void
££ 
GoodB2G2
££ 
(
££ 
HttpRequest
££ %
req
££& )
,
££) *
HttpResponse
££+ 7
resp
££8 <
)
££< =
{
¤¤ 
string
¥¥ 
data
¥¥ 
;
¥¥ 
if
¦¦ 

(
¦¦ 
IO
¦¦ 
.
¦¦ "
STATIC_READONLY_TRUE
¦¦ #
)
¦¦# $
{
§§ 	
data
¨¨ 
=
¨¨ 
$str
¨¨ 
;
¨¨ 
{
ªª 
if
«« 
(
«« 
req
«« 
.
«« 
QueryString
«« #
[
««# $
$str
««$ (
]
««( )
!=
««* ,
null
««- 1
)
««1 2
{
¬¬ 
data
­­ 
=
­­ 
req
­­ 
.
­­ 
QueryString
­­ *
[
­­* +
$str
­­+ /
]
­­/ 0
;
­­0 1
}
®® 
}
¯¯ 
}
°° 	
else
±± 
{
²² 	
data
µµ 
=
µµ 
null
µµ 
;
µµ 
}
¶¶ 	
if
·· 

(
·· 
IO
·· 
.
·· "
STATIC_READONLY_TRUE
·· #
)
··# $
{
¸¸ 	
try
¹¹ 
{
ºº 
int
»» 
value
»» 
=
»» 
int
»» 
.
»»  
Parse
»»  %
(
»»% &
data
»»& *
)
»»* +
;
»»+ ,
}
¼¼ 
catch
½½ 
(
½½ 
FormatException
½½ " 
exceptNumberFormat
½½# 5
)
½½5 6
{
¾¾ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ 
.
ÀÀ 
Log
ÀÀ 
(
ÀÀ 
NLog
ÀÀ "
.
ÀÀ" #
LogLevel
ÀÀ# +
.
ÀÀ+ ,
Warn
ÀÀ, 0
,
ÀÀ0 1 
exceptNumberFormat
ÀÀ2 D
,
ÀÀD E
$str
ÀÀF j
+
ÀÀk l 
exceptNumberFormat
ÀÀm 
)ÀÀ 
;ÀÀ 
}
ÁÁ 
}
ÂÂ 	
}
ÃÃ 
public
ÅÅ 

override
ÅÅ 
void
ÅÅ 
Good
ÅÅ 
(
ÅÅ 
HttpRequest
ÅÅ )
req
ÅÅ* -
,
ÅÅ- .
HttpResponse
ÅÅ/ ;
resp
ÅÅ< @
)
ÅÅ@ A
{
ÆÆ 
GoodG2B1
ÇÇ 
(
ÇÇ 
req
ÇÇ 
,
ÇÇ 
resp
ÇÇ 
)
ÇÇ 
;
ÇÇ 
GoodG2B2
ÈÈ 
(
ÈÈ 
req
ÈÈ 
,
ÈÈ 
resp
ÈÈ 
)
ÈÈ 
;
ÈÈ 
GoodB2G1
ÉÉ 
(
ÉÉ 
req
ÉÉ 
,
ÉÉ 
resp
ÉÉ 
)
ÉÉ 
;
ÉÉ 
GoodB2G2
ÊÊ 
(
ÊÊ 
req
ÊÊ 
,
ÊÊ 
resp
ÊÊ 
)
ÊÊ 
;
ÊÊ 
}
ËË 
}ÍÍ 
}ÎÎ O
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_10.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_10 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.   

staticTrue   
)   
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
data'' 
='' 
req'' 
.'' 
QueryString'' *
[''* +
$str''+ /
]''/ 0
;''0 1
}(( 
})) 
}** 	
else++ 
{,, 	
data// 
=// 
null// 
;// 
}00 	
if11 

(11 
IO11 
.11 

staticTrue11 
)11 
{22 	
try33 
{44 
int55 
value55 
=55 
int55 
.55  
Parse55  %
(55% &
data55& *
)55* +
;55+ ,
}66 
catch77 
(77 
FormatException77 "
exceptNumberFormat77# 5
)775 6
{88 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptNumberFormat::2 D
,::D E
$str::F `
+::a b
data::c g
)::g h
;::h i
};; 
}<< 	
}== 
privateAA 
voidAA 
GoodG2B1AA 
(AA 
HttpRequestAA %
reqAA& )
,AA) *
HttpResponseAA+ 7
respAA8 <
)AA< =
{BB 
stringCC 
dataCC 
;CC 
ifDD 

(DD 
IODD 
.DD 
staticFalseDD 
)DD 
{EE 	
dataHH 
=HH 
nullHH 
;HH 
}II 	
elseJJ 
{KK 	
dataMM 
=MM 
$strMM 
;MM 
}NN 	
ifOO 

(OO 
IOOO 
.OO 

staticTrueOO 
)OO 
{PP 	
tryQQ 
{RR 
intSS 
valueSS 
=SS 
intSS 
.SS  
ParseSS  %
(SS% &
dataSS& *
)SS* +
;SS+ ,
}TT 
catchUU 
(UU 
FormatExceptionUU "
exceptNumberFormatUU# 5
)UU5 6
{VV 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$strXXF `
+XXa b
dataXXc g
)XXg h
;XXh i
}YY 
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
string`` 
data`` 
;`` 
ifaa 

(aa 
IOaa 
.aa 

staticTrueaa 
)aa 
{bb 	
datadd 
=dd 
$strdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
nulljj 
;jj 
}kk 	
ifll 

(ll 
IOll 
.ll 

staticTruell 
)ll 
{mm 	
trynn 
{oo 
intpp 
valuepp 
=pp 
intpp 
.pp  
Parsepp  %
(pp% &
datapp& *
)pp* +
;pp+ ,
}qq 
catchrr 
(rr 
FormatExceptionrr "
exceptNumberFormatrr# 5
)rr5 6
{ss 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu "
.uu" #
LogLeveluu# +
.uu+ ,
Warnuu, 0
,uu0 1
exceptNumberFormatuu2 D
,uuD E
$struuF `
+uua b
datauuc g
)uug h
;uuh i
}vv 
}ww 	
}xx 
private{{ 
void{{ 
GoodB2G1{{ 
({{ 
HttpRequest{{ %
req{{& )
,{{) *
HttpResponse{{+ 7
resp{{8 <
){{< =
{|| 
string}} 
data}} 
;}} 
if~~ 

(~~ 
IO~~ 
.~~ 

staticTrue~~ 
)~~ 
{ 	
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 
staticFalse
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
   
private
££ 
void
££ 
GoodB2G2
££ 
(
££ 
HttpRequest
££ %
req
££& )
,
££) *
HttpResponse
££+ 7
resp
££8 <
)
££< =
{
¤¤ 
string
¥¥ 
data
¥¥ 
;
¥¥ 
if
¦¦ 

(
¦¦ 
IO
¦¦ 
.
¦¦ 

staticTrue
¦¦ 
)
¦¦ 
{
§§ 	
data
¨¨ 
=
¨¨ 
$str
¨¨ 
;
¨¨ 
{
ªª 
if
«« 
(
«« 
req
«« 
.
«« 
QueryString
«« #
[
««# $
$str
««$ (
]
««( )
!=
««* ,
null
««- 1
)
««1 2
{
¬¬ 
data
­­ 
=
­­ 
req
­­ 
.
­­ 
QueryString
­­ *
[
­­* +
$str
­­+ /
]
­­/ 0
;
­­0 1
}
®® 
}
¯¯ 
}
°° 	
else
±± 
{
²² 	
data
µµ 
=
µµ 
null
µµ 
;
µµ 
}
¶¶ 	
if
·· 

(
·· 
IO
·· 
.
·· 

staticTrue
·· 
)
·· 
{
¸¸ 	
try
¹¹ 
{
ºº 
int
»» 
value
»» 
=
»» 
int
»» 
.
»»  
Parse
»»  %
(
»»% &
data
»»& *
)
»»* +
;
»»+ ,
}
¼¼ 
catch
½½ 
(
½½ 
FormatException
½½ " 
exceptNumberFormat
½½# 5
)
½½5 6
{
¾¾ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ 
.
ÀÀ 
Log
ÀÀ 
(
ÀÀ 
NLog
ÀÀ "
.
ÀÀ" #
LogLevel
ÀÀ# +
.
ÀÀ+ ,
Warn
ÀÀ, 0
,
ÀÀ0 1 
exceptNumberFormat
ÀÀ2 D
,
ÀÀD E
$str
ÀÀF j
+
ÀÀk l 
exceptNumberFormat
ÀÀm 
)ÀÀ 
;ÀÀ 
}
ÁÁ 
}
ÂÂ 	
}
ÃÃ 
public
ÅÅ 

override
ÅÅ 
void
ÅÅ 
Good
ÅÅ 
(
ÅÅ 
HttpRequest
ÅÅ )
req
ÅÅ* -
,
ÅÅ- .
HttpResponse
ÅÅ/ ;
resp
ÅÅ< @
)
ÅÅ@ A
{
ÆÆ 
GoodG2B1
ÇÇ 
(
ÇÇ 
req
ÇÇ 
,
ÇÇ 
resp
ÇÇ 
)
ÇÇ 
;
ÇÇ 
GoodG2B2
ÈÈ 
(
ÈÈ 
req
ÈÈ 
,
ÈÈ 
resp
ÈÈ 
)
ÈÈ 
;
ÈÈ 
GoodB2G1
ÉÉ 
(
ÉÉ 
req
ÉÉ 
,
ÉÉ 
resp
ÉÉ 
)
ÉÉ 
;
ÉÉ 
GoodB2G2
ÊÊ 
(
ÊÊ 
req
ÊÊ 
,
ÊÊ 
resp
ÊÊ 
)
ÊÊ 
;
ÊÊ 
}
ËË 
}ÍÍ 
}ÎÎ R
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_11.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_11 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.   
StaticReturnsTrue    
(    !
)  ! "
)  " #
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
data'' 
='' 
req'' 
.'' 
QueryString'' *
[''* +
$str''+ /
]''/ 0
;''0 1
}(( 
})) 
}** 	
else++ 
{,, 	
data// 
=// 
null// 
;// 
}00 	
if11 

(11
 
IO11 
.11 
StaticReturnsTrue11 
(11  
)11  !
)11! "
{22 	
try33 
{44 
int55 
value55 
=55 
int55 
.55  
Parse55  %
(55% &
data55& *
)55* +
;55+ ,
}66 
catch77 
(77 
FormatException77 "
exceptNumberFormat77# 5
)775 6
{88 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptNumberFormat::2 D
,::D E
$str::F `
+::a b
data::c g
)::g h
;::h i
};; 
}<< 	
}== 
privateAA 
voidAA 
GoodG2B1AA 
(AA 
HttpRequestAA %
reqAA& )
,AA) *
HttpResponseAA+ 7
respAA8 <
)AA< =
{BB 
stringCC 
dataCC 
;CC 
ifDD 

(DD 
IODD 
.DD 
StaticReturnsFalseDD !
(DD! "
)DD" #
)DD# $
{EE 	
dataHH 
=HH 
nullHH 
;HH 
}II 	
elseJJ 
{KK 	
dataMM 
=MM 
$strMM 
;MM 
}NN 	
ifOO 

(OO 
IOOO 
.OO 
StaticReturnsTrueOO  
(OO  !
)OO! "
)OO" #
{PP 	
tryQQ 
{RR 
intSS 
valueSS 
=SS 
intSS 
.SS  
ParseSS  %
(SS% &
dataSS& *
)SS* +
;SS+ ,
}TT 
catchUU 
(UU 
FormatExceptionUU "
exceptNumberFormatUU# 5
)UU5 6
{VV 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$strXXF `
+XXa b
dataXXc g
)XXg h
;XXh i
}YY 
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
string`` 
data`` 
;`` 
ifaa 

(aa 
IOaa 
.aa 
StaticReturnsTrueaa  
(aa  !
)aa! "
)aa" #
{bb 	
datadd 
=dd 
$strdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
nulljj 
;jj 
}kk 	
ifll 

(ll 
IOll 
.ll 
StaticReturnsTruell  
(ll  !
)ll! "
)ll" #
{mm 	
trynn 
{oo 
intpp 
valuepp 
=pp 
intpp 
.pp  
Parsepp  %
(pp% &
datapp& *
)pp* +
;pp+ ,
}qq 
catchrr 
(rr 
FormatExceptionrr "
exceptNumberFormatrr# 5
)rr5 6
{ss 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu "
.uu" #
LogLeveluu# +
.uu+ ,
Warnuu, 0
,uu0 1
exceptNumberFormatuu2 D
,uuD E
$struuF `
+uua b
datauuc g
)uug h
;uuh i
}vv 
}ww 	
}xx 
private{{ 
void{{ 
GoodB2G1{{ 
({{ 
HttpRequest{{ %
req{{& )
,{{) *
HttpResponse{{+ 7
resp{{8 <
){{< =
{|| 
string}} 
data}} 
;}} 
if~~ 

(~~ 
IO~~ 
.~~ 
StaticReturnsTrue~~  
(~~  !
)~~! "
)~~" #
{ 	
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
  
StaticReturnsFalse
 !
(
! "
)
" #
)
# $
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
   
private
££ 
void
££ 
GoodB2G2
££ 
(
££ 
HttpRequest
££ %
req
££& )
,
££) *
HttpResponse
££+ 7
resp
££8 <
)
££< =
{
¤¤ 
string
¥¥ 
data
¥¥ 
;
¥¥ 
if
¦¦ 

(
¦¦ 
IO
¦¦ 
.
¦¦ 
StaticReturnsTrue
¦¦  
(
¦¦  !
)
¦¦! "
)
¦¦" #
{
§§ 	
data
¨¨ 
=
¨¨ 
$str
¨¨ 
;
¨¨ 
{
ªª 
if
«« 
(
«« 
req
«« 
.
«« 
QueryString
«« #
[
««# $
$str
««$ (
]
««( )
!=
««* ,
null
««- 1
)
««1 2
{
¬¬ 
data
­­ 
=
­­ 
req
­­ 
.
­­ 
QueryString
­­ *
[
­­* +
$str
­­+ /
]
­­/ 0
;
­­0 1
}
®® 
}
¯¯ 
}
°° 	
else
±± 
{
²² 	
data
µµ 
=
µµ 
null
µµ 
;
µµ 
}
¶¶ 	
if
·· 

(
·· 
IO
·· 
.
·· 
StaticReturnsTrue
··  
(
··  !
)
··! "
)
··" #
{
¸¸ 	
try
¹¹ 
{
ºº 
int
»» 
value
»» 
=
»» 
int
»» 
.
»»  
Parse
»»  %
(
»»% &
data
»»& *
)
»»* +
;
»»+ ,
}
¼¼ 
catch
½½ 
(
½½ 
FormatException
½½ " 
exceptNumberFormat
½½# 5
)
½½5 6
{
¾¾ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ 
.
ÀÀ 
Log
ÀÀ 
(
ÀÀ 
NLog
ÀÀ "
.
ÀÀ" #
LogLevel
ÀÀ# +
.
ÀÀ+ ,
Warn
ÀÀ, 0
,
ÀÀ0 1 
exceptNumberFormat
ÀÀ2 D
,
ÀÀD E
$str
ÀÀF j
+
ÀÀk l 
exceptNumberFormat
ÀÀm 
)ÀÀ 
;ÀÀ 
}
ÁÁ 
}
ÂÂ 	
}
ÃÃ 
public
ÅÅ 

override
ÅÅ 
void
ÅÅ 
Good
ÅÅ 
(
ÅÅ 
HttpRequest
ÅÅ )
req
ÅÅ* -
,
ÅÅ- .
HttpResponse
ÅÅ/ ;
resp
ÅÅ< @
)
ÅÅ@ A
{
ÆÆ 
GoodG2B1
ÇÇ 
(
ÇÇ 
req
ÇÇ 
,
ÇÇ 
resp
ÇÇ 
)
ÇÇ 
;
ÇÇ 
GoodG2B2
ÈÈ 
(
ÈÈ 
req
ÈÈ 
,
ÈÈ 
resp
ÈÈ 
)
ÈÈ 
;
ÈÈ 
GoodB2G1
ÉÉ 
(
ÉÉ 
req
ÉÉ 
,
ÉÉ 
resp
ÉÉ 
)
ÉÉ 
;
ÉÉ 
GoodB2G2
ÊÊ 
(
ÊÊ 
req
ÊÊ 
,
ÊÊ 
resp
ÊÊ 
)
ÊÊ 
;
ÊÊ 
}
ËË 
}ÍÍ 
}ÎÎ H
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_12.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_12 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(  
 
IO   
.   $
StaticReturnsTrueOrFalse   &
(  & '
)  ' (
)  ( )
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
data'' 
='' 
req'' 
.'' 
QueryString'' *
[''* +
$str''+ /
]''/ 0
;''0 1
}(( 
})) 
}** 	
else++ 
{,, 	
data.. 
=.. 
$str.. 
;.. 
}// 	
if00 

(00
 
IO00 
.00 $
StaticReturnsTrueOrFalse00 &
(00& '
)00' (
)00( )
{11 	
try22 
{33 
int44 
value44 
=44 
int44 
.44  
Parse44  %
(44% &
data44& *
)44* +
;44+ ,
}55 
catch66 
(66 
FormatException66 "
exceptNumberFormat66# 5
)665 6
{77 
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 "
.99" #
LogLevel99# +
.99+ ,
Warn99, 0
,990 1
exceptNumberFormat992 D
,99D E
$str99F `
+99a b
data99c g
)99g h
;99h i
}:: 
};; 	
else<< 
{== 	
try>> 
{?? 
int@@ 
value@@ 
=@@ 
int@@ 
.@@  
Parse@@  %
(@@% &
data@@& *
)@@* +
;@@+ ,
}AA 
catchBB 
(BB 
FormatExceptionBB "
exceptNumberFormatBB# 5
)BB5 6
{CC 
IOEE 
.EE 
LoggerEE 
.EE 
LogEE 
(EE 
NLogEE "
.EE" #
LogLevelEE# +
.EE+ ,
WarnEE, 0
,EE0 1
exceptNumberFormatEE2 D
,EED E
$strEEF j
+EEk l
exceptNumberFormatEEm 
)	EE 
;
EE 
}FF 
}GG 	
}HH 
privateMM 
voidMM 
GoodG2BMM 
(MM 
HttpRequestMM $
reqMM% (
,MM( )
HttpResponseMM* 6
respMM7 ;
)MM; <
{NN 
stringOO 
dataOO 
;OO 
ifPP 

(PP
 
IOPP 
.PP $
StaticReturnsTrueOrFalsePP &
(PP& '
)PP' (
)PP( )
{QQ 	
dataSS 
=SS 
$strSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$strXX 
;XX 
}YY 	
ifZZ 

(ZZ
 
IOZZ 
.ZZ $
StaticReturnsTrueOrFalseZZ &
(ZZ& '
)ZZ' (
)ZZ( )
{[[ 	
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
}ee 	
elseff 
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF `
+ooa b
dataooc g
)oog h
;ooh i
}pp 
}qq 	
}rr 
privatevv 
voidvv 
GoodB2Gvv 
(vv 
HttpRequestvv $
reqvv% (
,vv( )
HttpResponsevv* 6
respvv7 ;
)vv; <
{ww 
stringxx 
dataxx 
;xx 
ifyy 

(yy
 
IOyy 
.yy $
StaticReturnsTrueOrFalseyy &
(yy& '
)yy' (
)yy( )
{zz 	
data{{ 
={{ 
$str{{ 
;{{ 
{}} 
if~~ 
(~~ 
req~~ 
.~~ 
QueryString~~ #
[~~# $
$str~~$ (
]~~( )
!=~~* ,
null~~- 1
)~~1 2
{ 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
if
 

(

 
IO
 
.
 &
StaticReturnsTrueOrFalse
 &
(
& '
)
' (
)
( )
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
   
catch
¡¡ 
(
¡¡ 
FormatException
¡¡ " 
exceptNumberFormat
¡¡# 5
)
¡¡5 6
{
¢¢ 
IO
¤¤ 
.
¤¤ 
Logger
¤¤ 
.
¤¤ 
Log
¤¤ 
(
¤¤ 
NLog
¤¤ "
.
¤¤" #
LogLevel
¤¤# +
.
¤¤+ ,
Warn
¤¤, 0
,
¤¤0 1 
exceptNumberFormat
¤¤2 D
,
¤¤D E
$str
¤¤F j
+
¤¤k l 
exceptNumberFormat
¤¤m 
)¤¤ 
;¤¤ 
}
¥¥ 
}
¦¦ 	
}
§§ 
public
©© 

override
©© 
void
©© 
Good
©© 
(
©© 
HttpRequest
©© )
req
©©* -
,
©©- .
HttpResponse
©©/ ;
resp
©©< @
)
©©@ A
{
«« 
GoodG2B
¬¬ 
(
¬¬ 
req
¬¬ 
,
¬¬ 
resp
¬¬ 
)
¬¬ 
;
¬¬ 
GoodB2G
­­ 
(
­­ 
req
­­ 
,
­­ 
resp
­­ 
)
­­ 
;
­­ 
}
®® 
}°° 
}±± ÈR
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_13.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_13 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.    
STATIC_READONLY_FIVE   #
==  # %
$num  % &
)  & '
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
data'' 
='' 
req'' 
.'' 
QueryString'' *
[''* +
$str''+ /
]''/ 0
;''0 1
}(( 
})) 
}** 	
else++ 
{,, 	
data// 
=// 
null// 
;// 
}00 	
if11 

(11 
IO11 
.11  
STATIC_READONLY_FIVE11 #
==11# %
$num11% &
)11& '
{22 	
try33 
{44 
int55 
value55 
=55 
int55 
.55  
Parse55  %
(55% &
data55& *
)55* +
;55+ ,
}66 
catch77 
(77 
FormatException77 "
exceptNumberFormat77# 5
)775 6
{88 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptNumberFormat::2 D
,::D E
$str::F `
+::a b
data::c g
)::g h
;::h i
};; 
}<< 	
}== 
privateAA 
voidAA 
GoodG2B1AA 
(AA 
HttpRequestAA %
reqAA& )
,AA) *
HttpResponseAA+ 7
respAA8 <
)AA< =
{BB 
stringCC 
dataCC 
;CC 
ifDD 

(DD 
IODD 
.DD  
STATIC_READONLY_FIVEDD #
!=DD# %
$numDD% &
)DD& '
{EE 	
dataHH 
=HH 
nullHH 
;HH 
}II 	
elseJJ 
{KK 	
dataMM 
=MM 
$strMM 
;MM 
}NN 	
ifOO 

(OO 
IOOO 
.OO  
STATIC_READONLY_FIVEOO #
==OO# %
$numOO% &
)OO& '
{PP 	
tryQQ 
{RR 
intSS 
valueSS 
=SS 
intSS 
.SS  
ParseSS  %
(SS% &
dataSS& *
)SS* +
;SS+ ,
}TT 
catchUU 
(UU 
FormatExceptionUU "
exceptNumberFormatUU# 5
)UU5 6
{VV 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$strXXF `
+XXa b
dataXXc g
)XXg h
;XXh i
}YY 
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
string`` 
data`` 
;`` 
ifaa 

(aa 
IOaa 
.aa  
STATIC_READONLY_FIVEaa #
==aa# %
$numaa% &
)aa& '
{bb 	
datadd 
=dd 
$strdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
nulljj 
;jj 
}kk 	
ifll 

(ll 
IOll 
.ll  
STATIC_READONLY_FIVEll #
==ll# %
$numll% &
)ll& '
{mm 	
trynn 
{oo 
intpp 
valuepp 
=pp 
intpp 
.pp  
Parsepp  %
(pp% &
datapp& *
)pp* +
;pp+ ,
}qq 
catchrr 
(rr 
FormatExceptionrr "
exceptNumberFormatrr# 5
)rr5 6
{ss 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu "
.uu" #
LogLeveluu# +
.uu+ ,
Warnuu, 0
,uu0 1
exceptNumberFormatuu2 D
,uuD E
$struuF `
+uua b
datauuc g
)uug h
;uuh i
}vv 
}ww 	
}xx 
private{{ 
void{{ 
GoodB2G1{{ 
({{ 
HttpRequest{{ %
req{{& )
,{{) *
HttpResponse{{+ 7
resp{{8 <
){{< =
{|| 
string}} 
data}} 
;}} 
if~~ 

(~~ 
IO~~ 
.~~  
STATIC_READONLY_FIVE~~ #
==~~# %
$num~~% &
)~~& '
{ 	
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
!=
# %
$num
% &
)
& '
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
   
private
££ 
void
££ 
GoodB2G2
££ 
(
££ 
HttpRequest
££ %
req
££& )
,
££) *
HttpResponse
££+ 7
resp
££8 <
)
££< =
{
¤¤ 
string
¥¥ 
data
¥¥ 
;
¥¥ 
if
¦¦ 

(
¦¦ 
IO
¦¦ 
.
¦¦ "
STATIC_READONLY_FIVE
¦¦ #
==
¦¦# %
$num
¦¦% &
)
¦¦& '
{
§§ 	
data
¨¨ 
=
¨¨ 
$str
¨¨ 
;
¨¨ 
{
ªª 
if
«« 
(
«« 
req
«« 
.
«« 
QueryString
«« #
[
««# $
$str
««$ (
]
««( )
!=
««* ,
null
««- 1
)
««1 2
{
¬¬ 
data
­­ 
=
­­ 
req
­­ 
.
­­ 
QueryString
­­ *
[
­­* +
$str
­­+ /
]
­­/ 0
;
­­0 1
}
®® 
}
¯¯ 
}
°° 	
else
±± 
{
²² 	
data
µµ 
=
µµ 
null
µµ 
;
µµ 
}
¶¶ 	
if
·· 

(
·· 
IO
·· 
.
·· "
STATIC_READONLY_FIVE
·· #
==
··# %
$num
··% &
)
··& '
{
¸¸ 	
try
¹¹ 
{
ºº 
int
»» 
value
»» 
=
»» 
int
»» 
.
»»  
Parse
»»  %
(
»»% &
data
»»& *
)
»»* +
;
»»+ ,
}
¼¼ 
catch
½½ 
(
½½ 
FormatException
½½ " 
exceptNumberFormat
½½# 5
)
½½5 6
{
¾¾ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ 
.
ÀÀ 
Log
ÀÀ 
(
ÀÀ 
NLog
ÀÀ "
.
ÀÀ" #
LogLevel
ÀÀ# +
.
ÀÀ+ ,
Warn
ÀÀ, 0
,
ÀÀ0 1 
exceptNumberFormat
ÀÀ2 D
,
ÀÀD E
$str
ÀÀF j
+
ÀÀk l 
exceptNumberFormat
ÀÀm 
)ÀÀ 
;ÀÀ 
}
ÁÁ 
}
ÂÂ 	
}
ÃÃ 
public
ÅÅ 

override
ÅÅ 
void
ÅÅ 
Good
ÅÅ 
(
ÅÅ 
HttpRequest
ÅÅ )
req
ÅÅ* -
,
ÅÅ- .
HttpResponse
ÅÅ/ ;
resp
ÅÅ< @
)
ÅÅ@ A
{
ÆÆ 
GoodG2B1
ÇÇ 
(
ÇÇ 
req
ÇÇ 
,
ÇÇ 
resp
ÇÇ 
)
ÇÇ 
;
ÇÇ 
GoodG2B2
ÈÈ 
(
ÈÈ 
req
ÈÈ 
,
ÈÈ 
resp
ÈÈ 
)
ÈÈ 
;
ÈÈ 
GoodB2G1
ÉÉ 
(
ÉÉ 
req
ÉÉ 
,
ÉÉ 
resp
ÉÉ 
)
ÉÉ 
;
ÉÉ 
GoodB2G2
ÊÊ 
(
ÊÊ 
req
ÊÊ 
,
ÊÊ 
resp
ÊÊ 
)
ÊÊ 
;
ÊÊ 
}
ËË 
}ÍÍ 
}ÎÎ äQ
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_14.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_14 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
if   

(   
IO   
.   

staticFive   
==   
$num   
)   
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
data'' 
='' 
req'' 
.'' 
QueryString'' *
[''* +
$str''+ /
]''/ 0
;''0 1
}(( 
})) 
}** 	
else++ 
{,, 	
data// 
=// 
null// 
;// 
}00 	
if11 

(11 
IO11 
.11 

staticFive11 
==11 
$num11 
)11 
{22 	
try33 
{44 
int55 
value55 
=55 
int55 
.55  
Parse55  %
(55% &
data55& *
)55* +
;55+ ,
}66 
catch77 
(77 
FormatException77 "
exceptNumberFormat77# 5
)775 6
{88 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptNumberFormat::2 D
,::D E
$str::F `
+::a b
data::c g
)::g h
;::h i
};; 
}<< 	
}== 
privateAA 
voidAA 
GoodG2B1AA 
(AA 
HttpRequestAA %
reqAA& )
,AA) *
HttpResponseAA+ 7
respAA8 <
)AA< =
{BB 
stringCC 
dataCC 
;CC 
ifDD 

(DD 
IODD 
.DD 

staticFiveDD 
!=DD 
$numDD 
)DD 
{EE 	
dataHH 
=HH 
nullHH 
;HH 
}II 	
elseJJ 
{KK 	
dataMM 
=MM 
$strMM 
;MM 
}NN 	
ifOO 

(OO 
IOOO 
.OO 

staticFiveOO 
==OO 
$numOO 
)OO 
{PP 	
tryQQ 
{RR 
intSS 
valueSS 
=SS 
intSS 
.SS  
ParseSS  %
(SS% &
dataSS& *
)SS* +
;SS+ ,
}TT 
catchUU 
(UU 
FormatExceptionUU "
exceptNumberFormatUU# 5
)UU5 6
{VV 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptNumberFormatXX2 D
,XXD E
$strXXF `
+XXa b
dataXXc g
)XXg h
;XXh i
}YY 
}ZZ 	
}[[ 
private^^ 
void^^ 
GoodG2B2^^ 
(^^ 
HttpRequest^^ %
req^^& )
,^^) *
HttpResponse^^+ 7
resp^^8 <
)^^< =
{__ 
string`` 
data`` 
;`` 
ifaa 

(aa 
IOaa 
.aa 

staticFiveaa 
==aa 
$numaa 
)aa 
{bb 	
datadd 
=dd 
$strdd 
;dd 
}ee 	
elseff 
{gg 	
datajj 
=jj 
nulljj 
;jj 
}kk 	
ifll 

(ll 
IOll 
.ll 

staticFivell 
==ll 
$numll 
)ll 
{mm 	
trynn 
{oo 
intpp 
valuepp 
=pp 
intpp 
.pp  
Parsepp  %
(pp% &
datapp& *
)pp* +
;pp+ ,
}qq 
catchrr 
(rr 
FormatExceptionrr "
exceptNumberFormatrr# 5
)rr5 6
{ss 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu "
.uu" #
LogLeveluu# +
.uu+ ,
Warnuu, 0
,uu0 1
exceptNumberFormatuu2 D
,uuD E
$struuF `
+uua b
datauuc g
)uug h
;uuh i
}vv 
}ww 	
}xx 
private{{ 
void{{ 
GoodB2G1{{ 
({{ 
HttpRequest{{ %
req{{& )
,{{) *
HttpResponse{{+ 7
resp{{8 <
){{< =
{|| 
string}} 
data}} 
;}} 
if~~ 

(~~ 
IO~~ 
.~~ 

staticFive~~ 
==~~ 
$num~~ 
)~~ 
{ 	
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 

staticFive
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
   
private
££ 
void
££ 
GoodB2G2
££ 
(
££ 
HttpRequest
££ %
req
££& )
,
££) *
HttpResponse
££+ 7
resp
££8 <
)
££< =
{
¤¤ 
string
¥¥ 
data
¥¥ 
;
¥¥ 
if
¦¦ 

(
¦¦ 
IO
¦¦ 
.
¦¦ 

staticFive
¦¦ 
==
¦¦ 
$num
¦¦ 
)
¦¦ 
{
§§ 	
data
¨¨ 
=
¨¨ 
$str
¨¨ 
;
¨¨ 
{
ªª 
if
«« 
(
«« 
req
«« 
.
«« 
QueryString
«« #
[
««# $
$str
««$ (
]
««( )
!=
««* ,
null
««- 1
)
««1 2
{
¬¬ 
data
­­ 
=
­­ 
req
­­ 
.
­­ 
QueryString
­­ *
[
­­* +
$str
­­+ /
]
­­/ 0
;
­­0 1
}
®® 
}
¯¯ 
}
°° 	
else
±± 
{
²² 	
data
µµ 
=
µµ 
null
µµ 
;
µµ 
}
¶¶ 	
if
·· 

(
·· 
IO
·· 
.
·· 

staticFive
·· 
==
·· 
$num
·· 
)
·· 
{
¸¸ 	
try
¹¹ 
{
ºº 
int
»» 
value
»» 
=
»» 
int
»» 
.
»»  
Parse
»»  %
(
»»% &
data
»»& *
)
»»* +
;
»»+ ,
}
¼¼ 
catch
½½ 
(
½½ 
FormatException
½½ " 
exceptNumberFormat
½½# 5
)
½½5 6
{
¾¾ 
IO
ÀÀ 
.
ÀÀ 
Logger
ÀÀ 
.
ÀÀ 
Log
ÀÀ 
(
ÀÀ 
NLog
ÀÀ "
.
ÀÀ" #
LogLevel
ÀÀ# +
.
ÀÀ+ ,
Warn
ÀÀ, 0
,
ÀÀ0 1 
exceptNumberFormat
ÀÀ2 D
,
ÀÀD E
$str
ÀÀF j
+
ÀÀk l 
exceptNumberFormat
ÀÀm 
)ÀÀ 
;ÀÀ 
}
ÁÁ 
}
ÂÂ 	
}
ÃÃ 
public
ÅÅ 

override
ÅÅ 
void
ÅÅ 
Good
ÅÅ 
(
ÅÅ 
HttpRequest
ÅÅ )
req
ÅÅ* -
,
ÅÅ- .
HttpResponse
ÅÅ/ ;
resp
ÅÅ< @
)
ÅÅ@ A
{
ÆÆ 
GoodG2B1
ÇÇ 
(
ÇÇ 
req
ÇÇ 
,
ÇÇ 
resp
ÇÇ 
)
ÇÇ 
;
ÇÇ 
GoodG2B2
ÈÈ 
(
ÈÈ 
req
ÈÈ 
,
ÈÈ 
resp
ÈÈ 
)
ÈÈ 
;
ÈÈ 
GoodB2G1
ÉÉ 
(
ÉÉ 
req
ÉÉ 
,
ÉÉ 
resp
ÉÉ 
)
ÉÉ 
;
ÉÉ 
GoodB2G2
ÊÊ 
(
ÊÊ 
req
ÊÊ 
,
ÊÊ 
resp
ÊÊ 
)
ÊÊ 
;
ÊÊ 
}
ËË 
}ÍÍ 
}ÎÎ Â[
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_15.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_15 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
switch   
(   
$num   
)   
{!! 	
case"" 
$num"" 
:"" 
data## 
=## 
$str## 
;## 
{%% 
if&& 
(&& 
req&& 
.&& 
QueryString&& #
[&&# $
$str&&$ (
]&&( )
!=&&* ,
null&&- 1
)&&1 2
{'' 
data(( 
=(( 
req(( 
.(( 
QueryString(( *
[((* +
$str((+ /
]((/ 0
;((0 1
})) 
}** 
break++ 
;++ 
default,, 
:,, 
data// 
=// 
null// 
;// 
break00 
;00 
}11 	
switch22 
(22 
$num22 
)22 
{33 	
case44 
$num44 
:44 
try55 
{66 
int77 
value77 
=77 
int77 
.77  
Parse77  %
(77% &
data77& *
)77* +
;77+ ,
}88 
catch99 
(99 
FormatException99 "
exceptNumberFormat99# 5
)995 6
{:: 
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< "
.<<" #
LogLevel<<# +
.<<+ ,
Warn<<, 0
,<<0 1
exceptNumberFormat<<2 D
,<<D E
$str<<F `
+<<a b
data<<c g
)<<g h
;<<h i
}== 
break>> 
;>> 
default?? 
:?? 
IOAA 
.AA 
	WriteLineAA 
(AA 
$strAA /
)AA/ 0
;AA0 1
breakBB 
;BB 
}CC 	
}DD 
privateHH 
voidHH 
GoodG2B1HH 
(HH 
HttpRequestHH %
reqHH& )
,HH) *
HttpResponseHH+ 7
respHH8 <
)HH< =
{II 
stringJJ 
dataJJ 
;JJ 
switchKK 
(KK 
$numKK 
)KK 
{LL 	
caseMM 
$numMM 
:MM 
dataPP 
=PP 
nullPP 
;PP 
breakQQ 
;QQ 
defaultRR 
:RR 
dataTT 
=TT 
$strTT 
;TT 
breakUU 
;UU 
}VV 	
switchWW 
(WW 
$numWW 
)WW 
{XX 	
caseYY 
$numYY 
:YY 
tryZZ 
{[[ 
int\\ 
value\\ 
=\\ 
int\\ 
.\\  
Parse\\  %
(\\% &
data\\& *
)\\* +
;\\+ ,
}]] 
catch^^ 
(^^ 
FormatException^^ "
exceptNumberFormat^^# 5
)^^5 6
{__ 
IOaa 
.aa 
Loggeraa 
.aa 
Logaa 
(aa 
NLogaa "
.aa" #
LogLevelaa# +
.aa+ ,
Warnaa, 0
,aa0 1
exceptNumberFormataa2 D
,aaD E
$straaF `
+aaa b
dataaac g
)aag h
;aah i
}bb 
breakcc 
;cc 
defaultdd 
:dd 
IOff 
.ff 
	WriteLineff 
(ff 
$strff /
)ff/ 0
;ff0 1
breakgg 
;gg 
}hh 	
}ii 
privatell 
voidll 
GoodG2B2ll 
(ll 
HttpRequestll %
reqll& )
,ll) *
HttpResponsell+ 7
respll8 <
)ll< =
{mm 
stringnn 
datann 
;nn 
switchoo 
(oo 
$numoo 
)oo 
{pp 	
caseqq 
$numqq 
:qq 
datass 
=ss 
$strss 
;ss 
breaktt 
;tt 
defaultuu 
:uu 
dataxx 
=xx 
nullxx 
;xx 
breakyy 
;yy 
}zz 	
switch{{ 
({{ 
$num{{ 
){{ 
{|| 	
case}} 
$num}} 
:}} 
try~~ 
{ 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
break
 
;
 
default
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
HttpRequest
 %
req
& )
,
) *
HttpResponse
+ 7
resp
8 <
)
< =
{
 
string
 
data
 
;
 
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
data
 
=
 
$str
 
;
 
{
 
if
 
(
 
req
 
.
 
QueryString
 #
[
# $
$str
$ (
]
( )
!=
* ,
null
- 1
)
1 2
{
 
data
 
=
 
req
 
.
 
QueryString
 *
[
* +
$str
+ /
]
/ 0
;
0 1
}
 
}
 
break
 
;
 
default
 
:
 
data
¢¢ 
=
¢¢ 
null
¢¢ 
;
¢¢ 
break
££ 
;
££ 
}
¤¤ 	
switch
¥¥ 
(
¥¥ 
$num
¥¥ 
)
¥¥ 
{
¦¦ 	
case
§§ 
$num
§§ 
:
§§ 
IO
©© 
.
©© 
	WriteLine
©© 
(
©© 
$str
©© /
)
©©/ 0
;
©©0 1
break
ªª 
;
ªª 
default
«« 
:
«« 
try
¬¬ 
{
­­ 
int
®® 
value
®® 
=
®® 
int
®® 
.
®®  
Parse
®®  %
(
®®% &
data
®®& *
)
®®* +
;
®®+ ,
}
¯¯ 
catch
°° 
(
°° 
FormatException
°° " 
exceptNumberFormat
°°# 5
)
°°5 6
{
±± 
IO
³³ 
.
³³ 
Logger
³³ 
.
³³ 
Log
³³ 
(
³³ 
NLog
³³ "
.
³³" #
LogLevel
³³# +
.
³³+ ,
Warn
³³, 0
,
³³0 1 
exceptNumberFormat
³³2 D
,
³³D E
$str
³³F j
+
³³k l 
exceptNumberFormat
³³m 
)³³ 
;³³ 
}
´´ 
break
µµ 
;
µµ 
}
¶¶ 	
}
·· 
private
ºº 
void
ºº 
GoodB2G2
ºº 
(
ºº 
HttpRequest
ºº %
req
ºº& )
,
ºº) *
HttpResponse
ºº+ 7
resp
ºº8 <
)
ºº< =
{
»» 
string
¼¼ 
data
¼¼ 
;
¼¼ 
switch
½½ 
(
½½ 
$num
½½ 
)
½½ 
{
¾¾ 	
case
¿¿ 
$num
¿¿ 
:
¿¿ 
data
ÀÀ 
=
ÀÀ 
$str
ÀÀ 
;
ÀÀ 
{
ÂÂ 
if
ÃÃ 
(
ÃÃ 
req
ÃÃ 
.
ÃÃ 
QueryString
ÃÃ #
[
ÃÃ# $
$str
ÃÃ$ (
]
ÃÃ( )
!=
ÃÃ* ,
null
ÃÃ- 1
)
ÃÃ1 2
{
ÄÄ 
data
ÅÅ 
=
ÅÅ 
req
ÅÅ 
.
ÅÅ 
QueryString
ÅÅ *
[
ÅÅ* +
$str
ÅÅ+ /
]
ÅÅ/ 0
;
ÅÅ0 1
}
ÆÆ 
}
ÇÇ 
break
ÈÈ 
;
ÈÈ 
default
ÉÉ 
:
ÉÉ 
data
ÌÌ 
=
ÌÌ 
null
ÌÌ 
;
ÌÌ 
break
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
switch
ÏÏ 
(
ÏÏ 
$num
ÏÏ 
)
ÏÏ 
{
ÐÐ 	
case
ÑÑ 
$num
ÑÑ 
:
ÑÑ 
try
ÒÒ 
{
ÓÓ 
int
ÔÔ 
value
ÔÔ 
=
ÔÔ 
int
ÔÔ 
.
ÔÔ  
Parse
ÔÔ  %
(
ÔÔ% &
data
ÔÔ& *
)
ÔÔ* +
;
ÔÔ+ ,
}
ÕÕ 
catch
ÖÖ 
(
ÖÖ 
FormatException
ÖÖ " 
exceptNumberFormat
ÖÖ# 5
)
ÖÖ5 6
{
×× 
IO
ÙÙ 
.
ÙÙ 
Logger
ÙÙ 
.
ÙÙ 
Log
ÙÙ 
(
ÙÙ 
NLog
ÙÙ "
.
ÙÙ" #
LogLevel
ÙÙ# +
.
ÙÙ+ ,
Warn
ÙÙ, 0
,
ÙÙ0 1 
exceptNumberFormat
ÙÙ2 D
,
ÙÙD E
$str
ÙÙF j
+
ÙÙk l 
exceptNumberFormat
ÙÙm 
)ÙÙ 
;ÙÙ 
}
ÚÚ 
break
ÛÛ 
;
ÛÛ 
default
ÜÜ 
:
ÜÜ 
IO
ÞÞ 
.
ÞÞ 
	WriteLine
ÞÞ 
(
ÞÞ 
$str
ÞÞ /
)
ÞÞ/ 0
;
ÞÞ0 1
break
ßß 
;
ßß 
}
àà 	
}
áá 
public
ãã 

override
ãã 
void
ãã 
Good
ãã 
(
ãã 
HttpRequest
ãã )
req
ãã* -
,
ãã- .
HttpResponse
ãã/ ;
resp
ãã< @
)
ãã@ A
{
ää 
GoodG2B1
åå 
(
åå 
req
åå 
,
åå 
resp
åå 
)
åå 
;
åå 
GoodG2B2
ææ 
(
ææ 
req
ææ 
,
ææ 
resp
ææ 
)
ææ 
;
ææ 
GoodB2G1
çç 
(
çç 
req
çç 
,
çç 
resp
çç 
)
çç 
;
çç 
GoodB2G2
èè 
(
èè 
req
èè 
,
èè 
resp
èè 
)
èè 
;
èè 
}
éé 
}ëë 
}ìì ¬,
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_16.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_16 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
while   
(   
true   
)   
{!! 	
data"" 
="" 
$str"" 
;"" 
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
data'' 
='' 
req'' 
.'' 
QueryString'' *
[''* +
$str''+ /
]''/ 0
;''0 1
}(( 
})) 
break** 
;** 
}++ 	
while,, 
(,, 
true,, 
),, 
{-- 	
try.. 
{// 
int00 
value00 
=00 
int00 
.00  
Parse00  %
(00% &
data00& *
)00* +
;00+ ,
}11 
catch22 
(22 
FormatException22 "
exceptNumberFormat22# 5
)225 6
{33 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptNumberFormat552 D
,55D E
$str55F `
+55a b
data55c g
)55g h
;55h i
}66 
break77 
;77 
}88 	
}99 
private== 
void== 
GoodG2B== 
(== 
HttpRequest== $
req==% (
,==( )
HttpResponse==* 6
resp==7 ;
)==; <
{>> 
string?? 
data?? 
;?? 
while@@ 
(@@ 
true@@ 
)@@ 
{AA 	
dataCC 
=CC 
$strCC 
;CC 
breakDD 
;DD 
}EE 	
whileFF 
(FF 
trueFF 
)FF 
{GG 	
tryHH 
{II 
intJJ 
valueJJ 
=JJ 
intJJ 
.JJ  
ParseJJ  %
(JJ% &
dataJJ& *
)JJ* +
;JJ+ ,
}KK 
catchLL 
(LL 
FormatExceptionLL "
exceptNumberFormatLL# 5
)LL5 6
{MM 
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO "
.OO" #
LogLevelOO# +
.OO+ ,
WarnOO, 0
,OO0 1
exceptNumberFormatOO2 D
,OOD E
$strOOF `
+OOa b
dataOOc g
)OOg h
;OOh i
}PP 
breakQQ 
;QQ 
}RR 	
}SS 
privateVV 
voidVV 
GoodB2GVV 
(VV 
HttpRequestVV $
reqVV% (
,VV( )
HttpResponseVV* 6
respVV7 ;
)VV; <
{WW 
stringXX 
dataXX 
;XX 
whileYY 
(YY 
trueYY 
)YY 
{ZZ 	
data[[ 
=[[ 
$str[[ 
;[[ 
{]] 
if^^ 
(^^ 
req^^ 
.^^ 
QueryString^^ #
[^^# $
$str^^$ (
]^^( )
!=^^* ,
null^^- 1
)^^1 2
{__ 
data`` 
=`` 
req`` 
.`` 
QueryString`` *
[``* +
$str``+ /
]``/ 0
;``0 1
}aa 
}bb 
breakcc 
;cc 
}dd 	
whileee 
(ee 
trueee 
)ee 
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF j
+nnk l
exceptNumberFormatnnm 
)	nn 
;
nn 
}oo 
breakpp 
;pp 
}qq 	
}rr 
publictt 

overridett 
voidtt 
Goodtt 
(tt 
HttpRequesttt )
reqtt* -
,tt- .
HttpResponsett/ ;
resptt< @
)tt@ A
{uu 
GoodG2Bvv 
(vv 
reqvv 
,vv 
respvv 
)vv 
;vv 
GoodB2Gww 
(ww 
reqww 
,ww 
respww 
)ww 
;ww 
}xx 
}zz 
}{{ ,
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_17.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_17 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data$$ 
=$$ 
$str$$ 
;$$ 
{&& 	
if'' 
('' 
req'' 
.'' 
QueryString'' 
[''  
$str''  $
]''$ %
!=''& (
null'') -
)''- .
{(( 
data)) 
=)) 
req)) 
.)) 
QueryString)) &
[))& '
$str))' +
]))+ ,
;)), -
}** 
}++ 	
for,, 
(,, 
int,, 
j,, 
=,, 
$num,, 
;,, 
j,, 
<,, 
$num,, 
;,, 
j,,  
++,,  "
),," #
{-- 	
try.. 
{// 
int00 
value00 
=00 
int00 
.00  
Parse00  %
(00% &
data00& *
)00* +
;00+ ,
}11 
catch22 
(22 
FormatException22 "
exceptNumberFormat22# 5
)225 6
{33 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptNumberFormat552 D
,55D E
$str55F `
+55a b
data55c g
)55g h
;55h i
}66 
}77 	
}88 
private<< 
void<< 
GoodG2B<< 
(<< 
HttpRequest<< $
req<<% (
,<<( )
HttpResponse<<* 6
resp<<7 ;
)<<; <
{== 
string>> 
data>> 
;>> 
data@@ 
=@@ 
$str@@ 
;@@ 
forAA 
(AA 
intAA 
jAA 
=AA 
$numAA 
;AA 
jAA 
<AA 
$numAA 
;AA 
jAA  
++AA  "
)AA" #
{BB 	
tryCC 
{DD 
intEE 
valueEE 
=EE 
intEE 
.EE  
ParseEE  %
(EE% &
dataEE& *
)EE* +
;EE+ ,
}FF 
catchGG 
(GG 
FormatExceptionGG "
exceptNumberFormatGG# 5
)GG5 6
{HH 
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ "
.JJ" #
LogLevelJJ# +
.JJ+ ,
WarnJJ, 0
,JJ0 1
exceptNumberFormatJJ2 D
,JJD E
$strJJF `
+JJa b
dataJJc g
)JJg h
;JJh i
}KK 
}LL 	
}MM 
privatePP 
voidPP 
GoodB2GPP 
(PP 
HttpRequestPP $
reqPP% (
,PP( )
HttpResponsePP* 6
respPP7 ;
)PP; <
{QQ 
stringRR 
dataRR 
;RR 
dataSS 
=SS 
$strSS 
;SS 
{UU 	
ifVV 
(VV 
reqVV 
.VV 
QueryStringVV 
[VV  
$strVV  $
]VV$ %
!=VV& (
nullVV) -
)VV- .
{WW 
dataXX 
=XX 
reqXX 
.XX 
QueryStringXX &
[XX& '
$strXX' +
]XX+ ,
;XX, -
}YY 
}ZZ 	
for[[ 
([[ 
int[[ 
k[[ 
=[[ 
$num[[ 
;[[ 
k[[ 
<[[ 
$num[[ 
;[[ 
k[[  
++[[  "
)[[" #
{\\ 	
try]] 
{^^ 
int__ 
value__ 
=__ 
int__ 
.__  
Parse__  %
(__% &
data__& *
)__* +
;__+ ,
}`` 
catchaa 
(aa 
FormatExceptionaa "
exceptNumberFormataa# 5
)aa5 6
{bb 
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd "
.dd" #
LogLeveldd# +
.dd+ ,
Warndd, 0
,dd0 1
exceptNumberFormatdd2 D
,ddD E
$strddF j
+ddk l
exceptNumberFormatddm 
)	dd 
;
dd 
}ee 
}ff 	
}gg 
publicii 

overrideii 
voidii 
Goodii 
(ii 
HttpRequestii )
reqii* -
,ii- .
HttpResponseii/ ;
respii< @
)ii@ A
{jj 
GoodG2Bkk 
(kk 
reqkk 
,kk 
respkk 
)kk 
;kk 
GoodB2Gll 
(ll 
reqll 
,ll 
respll 
)ll 
;ll 
}mm 
}oo 
}pp ÚL
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_21.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_21 H
:I J
AbstractTestCaseWebK ^
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public   

override   
void   
Bad   
(   
HttpRequest   (
req  ) ,
,  , -
HttpResponse  . :
resp  ; ?
)  ? @
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
if&& 
(&& 
req&& 
.&& 
QueryString&& 
[&&  
$str&&  $
]&&$ %
!=&&& (
null&&) -
)&&- .
{'' 
data(( 
=(( 
req(( 
.(( 
QueryString(( &
[((& '
$str((' +
]((+ ,
;((, -
})) 
}** 	

badPrivate++ 
=++ 
true++ 
;++ 
BadSink,, 
(,, 
data,, 
,,, 
req,, 
,,, 
resp,,  
),,  !
;,,! "
}-- 
private// 
void// 
BadSink// 
(// 
string// 
data//  $
,//% &
HttpRequest//' 2
req//3 6
,//6 7
HttpResponse//8 D
resp//E I
)//I J
{00 
if11 

(11 

badPrivate11 
)11 
{22 	
try33 
{44 
int55 
value55 
=55 
int55 
.55  
Parse55  %
(55% &
data55& *
)55* +
;55+ ,
}66 
catch77 
(77 
FormatException77 "
exceptNumberFormat77# 5
)775 6
{88 
IO:: 
.:: 
Logger:: 
.:: 
Log:: 
(:: 
NLog:: "
.::" #
LogLevel::# +
.::+ ,
Warn::, 0
,::0 1
exceptNumberFormat::2 D
,::D E
$str::F `
+::a b
data::c g
)::g h
;::h i
};; 
}<< 	
}== 
private@@ 
bool@@ 
goodB2G1Private@@  
=@@! "
false@@# (
;@@( )
privateAA 
boolAA 
goodB2G2PrivateAA  
=AA! "
falseAA# (
;AA( )
privateBB 
boolBB 
goodG2BPrivateBB 
=BB  !
falseBB" '
;BB' (
publicDD 

overrideDD 
voidDD 
GoodDD 
(DD 
HttpRequestDD )
reqDD* -
,DD- .
HttpResponseDD/ ;
respDD< @
)DD@ A
{EE 
GoodB2G1FF 
(FF 
reqFF 
,FF 
respFF 
)FF 
;FF 
GoodB2G2GG 
(GG 
reqGG 
,GG 
respGG 
)GG 
;GG 
GoodG2BHH 
(HH 
reqHH 
,HH 
respHH 
)HH 
;HH 
}II 
privateLL 
voidLL 
GoodB2G1LL 
(LL 
HttpRequestLL %
reqLL& )
,LL) *
HttpResponseLL+ 7
respLL8 <
)LL< =
{MM 
stringNN 
dataNN 
;NN 
dataOO 
=OO 
$strOO 
;OO 
{QQ 	
ifRR 
(RR 
reqRR 
.RR 
QueryStringRR 
[RR  
$strRR  $
]RR$ %
!=RR& (
nullRR) -
)RR- .
{SS 
dataTT 
=TT 
reqTT 
.TT 
QueryStringTT &
[TT& '
$strTT' +
]TT+ ,
;TT, -
}UU 
}VV 	
goodB2G1PrivateWW 
=WW 
falseWW 
;WW  
GoodB2G1SinkXX 
(XX 
dataXX 
,XX 
reqXX 
,XX  
respXX! %
)XX% &
;XX& '
}YY 
private[[ 
void[[ 
GoodB2G1Sink[[ 
([[ 
string[[ $
data[[% )
,[[* +
HttpRequest[[, 7
req[[8 ;
,[[; <
HttpResponse[[= I
resp[[J N
)[[N O
{\\ 
if]] 

(]] 
goodB2G1Private]] 
)]] 
{^^ 	
IO`` 
.`` 
	WriteLine`` 
(`` 
$str`` /
)``/ 0
;``0 1
}aa 	
elsebb 
{cc 	
trydd 
{ee 
intff 
valueff 
=ff 
intff 
.ff  
Parseff  %
(ff% &
dataff& *
)ff* +
;ff+ ,
}gg 
catchhh 
(hh 
FormatExceptionhh "
exceptNumberFormathh# 5
)hh5 6
{ii 
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk "
.kk" #
LogLevelkk# +
.kk+ ,
Warnkk, 0
,kk0 1
exceptNumberFormatkk2 D
,kkD E
$strkkF j
+kkk l
exceptNumberFormatkkm 
)	kk 
;
kk 
}ll 
}mm 	
}nn 
privateqq 
voidqq 
GoodB2G2qq 
(qq 
HttpRequestqq %
reqqq& )
,qq) *
HttpResponseqq+ 7
respqq8 <
)qq< =
{rr 
stringss 
datass 
;ss 
datatt 
=tt 
$strtt 
;tt 
{vv 	
ifww 
(ww 
reqww 
.ww 
QueryStringww 
[ww  
$strww  $
]ww$ %
!=ww& (
nullww) -
)ww- .
{xx 
datayy 
=yy 
reqyy 
.yy 
QueryStringyy &
[yy& '
$stryy' +
]yy+ ,
;yy, -
}zz 
}{{ 	
goodB2G2Private|| 
=|| 
true|| 
;|| 
GoodB2G2Sink}} 
(}} 
data}} 
,}} 
req}} 
,}}  
resp}}! %
)}}% &
;}}& '
}~~ 
private
 
void
 
GoodB2G2Sink
 
(
 
string
 $
data
% )
,
* +
HttpRequest
, 7
req
8 ;
,
; <
HttpResponse
= I
resp
J N
)
N O
{
 
if
 

(
 
goodB2G2Private
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
 
void
 
GoodG2B
 
(
 
HttpRequest
 $
req
% (
,
( )
HttpResponse
* 6
resp
7 ;
)
; <
{
 
string
 
data
 
;
 
data
 
=
 
$str
 
;
 
goodG2BPrivate
 
=
 
true
 
;
 
GoodG2BSink
 
(
 
data
 
,
 
req
 
,
 
resp
  $
)
$ %
;
% &
}
 
private
 
void
 
GoodG2BSink
 
(
 
string
 #
data
$ (
,
) *
HttpRequest
+ 6
req
7 :
,
: ;
HttpResponse
< H
resp
I M
)
M N
{
 
if
 

(
 
goodG2BPrivate
 
)
 
{
 	
try
 
{
 
int
   
value
   
=
   
int
   
.
    
Parse
    %
(
  % &
data
  & *
)
  * +
;
  + ,
}
¡¡ 
catch
¢¢ 
(
¢¢ 
FormatException
¢¢ " 
exceptNumberFormat
¢¢# 5
)
¢¢5 6
{
££ 
IO
¥¥ 
.
¥¥ 
Logger
¥¥ 
.
¥¥ 
Log
¥¥ 
(
¥¥ 
NLog
¥¥ "
.
¥¥" #
LogLevel
¥¥# +
.
¥¥+ ,
Warn
¥¥, 0
,
¥¥0 1 
exceptNumberFormat
¥¥2 D
,
¥¥D E
$str
¥¥F `
+
¥¥a b
data
¥¥c g
)
¥¥g h
;
¥¥h i
}
¦¦ 
}
§§ 	
}
¨¨ 
}ªª 
}«« Á,
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_22a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_22a I
:J K
AbstractTestCaseWebL _
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public   

override   
void   
Bad   
(   
HttpRequest   (
req  ) ,
,  , -
HttpResponse  . :
resp  ; ?
)  ? @
{!! 
string"" 
data"" 
="" 
null"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
if&& 
(&& 
req&& 
.&& 
QueryString&& 
[&&  
$str&&  $
]&&$ %
!=&&& (
null&&) -
)&&- .
{'' 
data(( 
=(( 
req(( 
.(( 
QueryString(( &
[((& '
$str((' +
]((+ ,
;((, -
})) 
}** 	
badPublicStatic++ 
=++ 
true++ 
;++ O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_22b,, K
.,,K L
BadSink,,L S
(,,S T
data,,T X
,,,Y Z
req,,[ ^
,,,^ _
resp,,` d
),,d e
;,,e f
}-- 
public00 

static00 
bool00  
goodB2G1PublicStatic00 +
=00, -
false00. 3
;003 4
public11 

static11 
bool11  
goodB2G2PublicStatic11 +
=11, -
false11. 3
;113 4
public22 

static22 
bool22 
goodG2BPublicStatic22 *
=22+ ,
false22- 2
;222 3
public44 

override44 
void44 
Good44 
(44 
HttpRequest44 )
req44* -
,44- .
HttpResponse44/ ;
resp44< @
)44@ A
{55 
GoodB2G166 
(66 
req66 
,66 
resp66 
)66 
;66 
GoodB2G277 
(77 
req77 
,77 
resp77 
)77 
;77 
GoodG2B88 
(88 
req88 
,88 
resp88 
)88 
;88 
}99 
private<< 
void<< 
GoodB2G1<< 
(<< 
HttpRequest<< %
req<<& )
,<<) *
HttpResponse<<+ 7
resp<<8 <
)<<< =
{== 
string>> 
data>> 
=>> 
null>> 
;>> 
data?? 
=?? 
$str?? 
;?? 
{AA 	
ifBB 
(BB 
reqBB 
.BB 
QueryStringBB 
[BB  
$strBB  $
]BB$ %
!=BB& (
nullBB) -
)BB- .
{CC 
dataDD 
=DD 
reqDD 
.DD 
QueryStringDD &
[DD& '
$strDD' +
]DD+ ,
;DD, -
}EE 
}FF 	 
goodB2G1PublicStaticGG 
=GG 
falseGG $
;GG$ %O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_22bHH K
.HHK L
GoodB2G1SinkHHL X
(HHX Y
dataHHY ]
,HH^ _
reqHH` c
,HHc d
respHHe i
)HHi j
;HHj k
}II 
privateLL 
voidLL 
GoodB2G2LL 
(LL 
HttpRequestLL %
reqLL& )
,LL) *
HttpResponseLL+ 7
respLL8 <
)LL< =
{MM 
stringNN 
dataNN 
=NN 
nullNN 
;NN 
dataOO 
=OO 
$strOO 
;OO 
{QQ 	
ifRR 
(RR 
reqRR 
.RR 
QueryStringRR 
[RR  
$strRR  $
]RR$ %
!=RR& (
nullRR) -
)RR- .
{SS 
dataTT 
=TT 
reqTT 
.TT 
QueryStringTT &
[TT& '
$strTT' +
]TT+ ,
;TT, -
}UU 
}VV 	 
goodB2G2PublicStaticWW 
=WW 
trueWW #
;WW# $O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_22bXX K
.XXK L
GoodB2G2SinkXXL X
(XXX Y
dataXXY ]
,XX^ _
reqXX` c
,XXc d
respXXe i
)XXi j
;XXj k
}YY 
private\\ 
void\\ 
GoodG2B\\ 
(\\ 
HttpRequest\\ $
req\\% (
,\\( )
HttpResponse\\* 6
resp\\7 ;
)\\; <
{]] 
string^^ 
data^^ 
=^^ 
null^^ 
;^^ 
data`` 
=`` 
$str`` 
;`` 
goodG2BPublicStaticaa 
=aa 
trueaa "
;aa" #O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_22bbb K
.bbK L
GoodG2BSinkbbL W
(bbW X
databbX \
,bb] ^
reqbb_ b
,bbb c
respbbd h
)bbh i
;bbi j
}cc 
}ee 
}ff Â,
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_22b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_22b I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
if 

( O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_22a O
.O P
badPublicStaticP _
)_ `
{ 	
try   
{!! 
int"" 
value"" 
="" 
int"" 
.""  
Parse""  %
(""% &
data""& *
)""* +
;""+ ,
}## 
catch$$ 
($$ 
FormatException$$ "
exceptNumberFormat$$# 5
)$$5 6
{%% 
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' "
.''" #
LogLevel''# +
.''+ ,
Warn'', 0
,''0 1
exceptNumberFormat''2 D
,''D E
$str''F `
+''a b
data''c g
)''g h
;''h i
}(( 
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
}00 
public55 

static55 
void55 
GoodB2G1Sink55 #
(55# $
string55$ *
data55+ /
,550 1
HttpRequest552 =
req55> A
,55A B
HttpResponse55C O
resp55P T
)55T U
{66 
if77 

(77 O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_22a77 O
.77O P 
goodB2G1PublicStatic77P d
)77d e
{88 	
data;; 
=;; 
null;; 
;;; 
}<< 	
else== 
{>> 	
try?? 
{@@ 
intAA 
valueAA 
=AA 
intAA 
.AA  
ParseAA  %
(AA% &
dataAA& *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
FormatExceptionCC "
exceptNumberFormatCC# 5
)CC5 6
{DD 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
exceptNumberFormatFF2 D
,FFD E
$strFFF j
+FFk l
exceptNumberFormatFFm 
)	FF 
;
FF 
}GG 
}HH 	
}II 
publicLL 

staticLL 
voidLL 
GoodB2G2SinkLL #
(LL# $
stringLL$ *
dataLL+ /
,LL0 1
HttpRequestLL2 =
reqLL> A
,LLA B
HttpResponseLLC O
respLLP T
)LLT U
{MM 
ifNN 

(NN O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_22aNN O
.NNO P 
goodB2G2PublicStaticNNP d
)NNd e
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF j
+WWk l
exceptNumberFormatWWm 
)	WW 
;
WW 
}XX 
}YY 	
elseZZ 
{[[ 	
data^^ 
=^^ 
null^^ 
;^^ 
}__ 	
}`` 
publiccc 

staticcc 
voidcc 
GoodG2BSinkcc "
(cc" #
stringcc# )
datacc* .
,cc/ 0
HttpRequestcc1 <
reqcc= @
,cc@ A
HttpResponseccB N
respccO S
)ccS T
{dd 
ifee 

(ee O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_22aee O
.eeO P
goodG2BPublicStaticeeP c
)eec d
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF `
+nna b
datannc g
)nng h
;nnh i
}oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
}ww 
}yy 
}zz Ù,
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_31.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_31 H
:I J
AbstractTestCaseWebK ^
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
dataCopy 
; 
{   	
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{$$ 
if%% 
(%% 
req%% 
.%% 
QueryString%% #
[%%# $
$str%%$ (
]%%( )
!=%%* ,
null%%- 1
)%%1 2
{&& 
data'' 
='' 
req'' 
.'' 
QueryString'' *
[''* +
$str''+ /
]''/ 0
;''0 1
}(( 
})) 
dataCopy** 
=** 
data** 
;** 
}++ 	
{,, 	
string-- 
data-- 
=-- 
dataCopy-- "
;--" #
try.. 
{// 
int00 
value00 
=00 
int00 
.00  
Parse00  %
(00% &
data00& *
)00* +
;00+ ,
}11 
catch22 
(22 
FormatException22 "
exceptNumberFormat22# 5
)225 6
{33 
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 "
.55" #
LogLevel55# +
.55+ ,
Warn55, 0
,550 1
exceptNumberFormat552 D
,55D E
$str55F `
+55a b
data55c g
)55g h
;55h i
}66 
}77 	
}88 
public;; 

override;; 
void;; 
Good;; 
(;; 
HttpRequest;; )
req;;* -
,;;- .
HttpResponse;;/ ;
resp;;< @
);;@ A
{<< 
GoodG2B== 
(== 
req== 
,== 
resp== 
)== 
;== 
GoodB2G>> 
(>> 
req>> 
,>> 
resp>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodG2BBB 
(BB 
HttpRequestBB $
reqBB% (
,BB( )
HttpResponseBB* 6
respBB7 ;
)BB; <
{CC 
stringDD 
dataCopyDD 
;DD 
{EE 	
stringFF 
dataFF 
;FF 
dataHH 
=HH 
$strHH 
;HH 
dataCopyII 
=II 
dataII 
;II 
}JJ 	
{KK 	
stringLL 
dataLL 
=LL 
dataCopyLL "
;LL" #
tryMM 
{NN 
intOO 
valueOO 
=OO 
intOO 
.OO  
ParseOO  %
(OO% &
dataOO& *
)OO* +
;OO+ ,
}PP 
catchQQ 
(QQ 
FormatExceptionQQ "
exceptNumberFormatQQ# 5
)QQ5 6
{RR 
IOTT 
.TT 
LoggerTT 
.TT 
LogTT 
(TT 
NLogTT "
.TT" #
LogLevelTT# +
.TT+ ,
WarnTT, 0
,TT0 1
exceptNumberFormatTT2 D
,TTD E
$strTTF `
+TTa b
dataTTc g
)TTg h
;TTh i
}UU 
}VV 	
}WW 
privateZZ 
voidZZ 
GoodB2GZZ 
(ZZ 
HttpRequestZZ $
reqZZ% (
,ZZ( )
HttpResponseZZ* 6
respZZ7 ;
)ZZ; <
{[[ 
string\\ 
dataCopy\\ 
;\\ 
{]] 	
string^^ 
data^^ 
;^^ 
data__ 
=__ 
$str__ 
;__ 
{aa 
ifbb 
(bb 
reqbb 
.bb 
QueryStringbb #
[bb# $
$strbb$ (
]bb( )
!=bb* ,
nullbb- 1
)bb1 2
{cc 
datadd 
=dd 
reqdd 
.dd 
QueryStringdd *
[dd* +
$strdd+ /
]dd/ 0
;dd0 1
}ee 
}ff 
dataCopygg 
=gg 
datagg 
;gg 
}hh 	
{ii 	
stringjj 
datajj 
=jj 
dataCopyjj "
;jj" #
trykk 
{ll 
intmm 
valuemm 
=mm 
intmm 
.mm  
Parsemm  %
(mm% &
datamm& *
)mm* +
;mm+ ,
}nn 
catchoo 
(oo 
FormatExceptionoo "
exceptNumberFormatoo# 5
)oo5 6
{pp 
IOrr 
.rr 
Loggerrr 
.rr 
Logrr 
(rr 
NLogrr "
.rr" #
LogLevelrr# +
.rr+ ,
Warnrr, 0
,rr0 1
exceptNumberFormatrr2 D
,rrD E
$strrrF j
+rrk l
exceptNumberFormatrrm 
)	rr 
;
rr 
}ss 
}tt 	
}uu 
}ww 
}xx 1
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_41.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_41 H
:I J
AbstractTestCaseWebK ^
{ 
private 
static 
void 
BadSink 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public** 

override** 
void** 
Bad** 
(** 
HttpRequest** (
req**) ,
,**, -
HttpResponse**. :
resp**; ?
)**? @
{++ 
string,, 
data,, 
;,, 
data-- 
=-- 
$str-- 
;-- 
{// 	
if00 
(00 
req00 
.00 
QueryString00 
[00  
$str00  $
]00$ %
!=00& (
null00) -
)00- .
{11 
data22 
=22 
req22 
.22 
QueryString22 &
[22& '
$str22' +
]22+ ,
;22, -
}33 
}44 	
BadSink55 
(55 
data55 
,55 
req55 
,55 
resp55  
)55! "
;55" #
}66 
public99 

override99 
void99 
Good99 
(99 
HttpRequest99 )
req99* -
,99- .
HttpResponse99/ ;
resp99< @
)99@ A
{:: 
GoodG2B;; 
(;; 
req;; 
,;; 
resp;; 
);; 
;;; 
GoodB2G<< 
(<< 
req<< 
,<< 
resp<< 
)<< 
;<< 
}== 
private?? 
static?? 
void?? 
GoodG2BSink?? #
(??# $
string??$ *
data??+ /
,??0 1
HttpRequest??2 =
req??> A
,??A B
HttpResponse??C O
resp??P T
)??T U
{@@ 
tryAA 
{BB 	
intCC 
valueCC 
=CC 
intCC 
.CC 
ParseCC !
(CC! "
dataCC" &
)CC& '
;CC' (
}DD 	
catchEE 
(EE 
FormatExceptionEE 
exceptNumberFormatEE 1
)EE1 2
{FF 	
IOHH 
.HH 
LoggerHH 
.HH 
LogHH 
(HH 
NLogHH 
.HH 
LogLevelHH '
.HH' (
WarnHH( ,
,HH, -
exceptNumberFormatHH. @
,HH@ A
$strHHB \
+HH] ^
dataHH_ c
)HHc d
;HHd e
}II 	
}JJ 
privateMM 
staticMM 
voidMM 
GoodG2BMM 
(MM  
HttpRequestMM  +
reqMM, /
,MM/ 0
HttpResponseMM1 =
respMM> B
)MMB C
{NN 
stringOO 
dataOO 
;OO 
dataQQ 
=QQ 
$strQQ 
;QQ 
GoodG2BSinkRR 
(RR 
dataRR 
,RR 
reqRR 
,RR 
respRR  $
)RR% &
;RR& '
}SS 
privateUU 
staticUU 
voidUU 
GoodB2GSinkUU #
(UU# $
stringUU$ *
dataUU+ /
,UU0 1
HttpRequestUU2 =
reqUU> A
,UUA B
HttpResponseUUC O
respUUP T
)UUT U
{VV 
tryWW 
{XX 	
intYY 
valueYY 
=YY 
intYY 
.YY 
ParseYY !
(YY! "
dataYY" &
)YY& '
;YY' (
}ZZ 	
catch[[ 
([[ 
FormatException[[ 
exceptNumberFormat[[ 1
)[[1 2
{\\ 	
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ 
.^^ 
LogLevel^^ '
.^^' (
Warn^^( ,
,^^, -
exceptNumberFormat^^. @
,^^@ A
$str^^B f
+^^g h
exceptNumberFormat^^i {
)^^{ |
;^^| }
}__ 	
}`` 
privatecc 
staticcc 
voidcc 
GoodB2Gcc 
(cc  
HttpRequestcc  +
reqcc, /
,cc/ 0
HttpResponsecc1 =
respcc> B
)ccB C
{dd 
stringee 
dataee 
;ee 
dataff 
=ff 
$strff 
;ff 
{hh 	
ifii 
(ii 
reqii 
.ii 
QueryStringii 
[ii  
$strii  $
]ii$ %
!=ii& (
nullii) -
)ii- .
{jj 
datakk 
=kk 
reqkk 
.kk 
QueryStringkk &
[kk& '
$strkk' +
]kk+ ,
;kk, -
}ll 
}mm 	
GoodB2GSinknn 
(nn 
datann 
,nn 
reqnn 
,nn 
respnn  $
)nn% &
;nn& '
}oo 
}qq 
}rr Î1
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_42.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_42 H
:I J
AbstractTestCaseWebK ^
{ 
private 
static 
string 
	BadSource #
(# $
HttpRequest$ /
req0 3
,3 4
HttpResponse5 A
respB F
)F G
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
data%% 
=%% 
req%% 
.%% 
QueryString%% &
[%%& '
$str%%' +
]%%+ ,
;%%, -
}&& 
}'' 	
return(( 
data(( 
;(( 
})) 
public++ 

override++ 
void++ 
Bad++ 
(++ 
HttpRequest++ (
req++) ,
,++, -
HttpResponse++. :
resp++; ?
)++? @
{,, 
string-- 
data-- 
=-- 
	BadSource-- 
(--  
req--  #
,--# $
resp--% )
)--) *
;--* +
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
private;; 
static;; 
string;; 
GoodG2BSource;; '
(;;' (
HttpRequest;;( 3
req;;4 7
,;;7 8
HttpResponse;;9 E
resp;;F J
);;J K
{<< 
string== 
data== 
;== 
data?? 
=?? 
$str?? 
;?? 
return@@ 
data@@ 
;@@ 
}AA 
privateCC 
staticCC 
voidCC 
GoodG2BCC 
(CC  
HttpRequestCC  +
reqCC, /
,CC/ 0
HttpResponseCC1 =
respCC> B
)CCB C
{DD 
stringEE 
dataEE 
=EE 
GoodG2BSourceEE #
(EE# $
reqEE$ '
,EE' (
respEE) -
)EE- .
;EE. /
tryFF 
{GG 	
intHH 
valueHH 
=HH 
intHH 
.HH 
ParseHH !
(HH! "
dataHH" &
)HH& '
;HH' (
}II 	
catchJJ 
(JJ 
FormatExceptionJJ 
exceptNumberFormatJJ 1
)JJ1 2
{KK 	
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM 
.MM 
LogLevelMM '
.MM' (
WarnMM( ,
,MM, -
exceptNumberFormatMM. @
,MM@ A
$strMMB \
+MM] ^
dataMM_ c
)MMc d
;MMd e
}NN 	
}OO 
privateRR 
staticRR 
stringRR 
GoodB2GSourceRR '
(RR' (
HttpRequestRR( 3
reqRR4 7
,RR7 8
HttpResponseRR9 E
respRRF J
)RRJ K
{SS 
stringTT 
dataTT 
;TT 
dataUU 
=UU 
$strUU 
;UU 
{WW 	
ifXX 
(XX 
reqXX 
.XX 
QueryStringXX 
[XX  
$strXX  $
]XX$ %
!=XX& (
nullXX) -
)XX- .
{YY 
dataZZ 
=ZZ 
reqZZ 
.ZZ 
QueryStringZZ &
[ZZ& '
$strZZ' +
]ZZ+ ,
;ZZ, -
}[[ 
}\\ 	
return]] 
data]] 
;]] 
}^^ 
private`` 
static`` 
void`` 
GoodB2G`` 
(``  
HttpRequest``  +
req``, /
,``/ 0
HttpResponse``1 =
resp``> B
)``B C
{aa 
stringbb 
databb 
=bb 
GoodB2GSourcebb #
(bb# $
reqbb$ '
,bb' (
respbb) -
)bb- .
;bb. /
trycc 
{dd 	
intee 
valueee 
=ee 
intee 
.ee 
Parseee !
(ee! "
dataee" &
)ee& '
;ee' (
}ff 	
catchgg 
(gg 
FormatExceptiongg 
exceptNumberFormatgg 1
)gg1 2
{hh 	
IOjj 
.jj 
Loggerjj 
.jj 
Logjj 
(jj 
NLogjj 
.jj 
LogLeveljj '
.jj' (
Warnjj( ,
,jj, -
exceptNumberFormatjj. @
,jj@ A
$strjjB f
+jjg h
exceptNumberFormatjji {
)jj{ |
;jj| }
}kk 	
}ll 
publicnn 

overridenn 
voidnn 
Goodnn 
(nn 
HttpRequestnn )
reqnn* -
,nn- .
HttpResponsenn/ ;
respnn< @
)nn@ A
{oo 
GoodG2Bpp 
(pp 
reqpp 
,pp 
resppp 
)pp 
;pp 
GoodB2Gqq 
(qq 
reqqq 
,qq 
respqq 
)qq 
;qq 
}rr 
}tt 
}uu ó3
ÏC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_45.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class N
BCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_45 H
:I J
AbstractTestCaseWebK ^
{ 
private 
string 
dataBad 
; 
private 
string 
dataGoodG2B 
; 
private 
string 
dataGoodB2G 
; 
private!! 
void!! 
BadSink!! 
(!! 
HttpRequest!! $
req!!% (
,!!( )
HttpResponse!!* 6
resp!!7 ;
)!!; <
{"" 
string## 
data## 
=## 
dataBad## 
;## 
try$$ 
{%% 	
int&& 
value&& 
=&& 
int&& 
.&& 
Parse&& !
(&&! "
data&&" &
)&&& '
;&&' (
}'' 	
catch(( 
((( 
FormatException(( 
exceptNumberFormat(( 1
)((1 2
{)) 	
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ 
.++ 
LogLevel++ '
.++' (
Warn++( ,
,++, -
exceptNumberFormat++. @
,++@ A
$str++B \
+++] ^
data++_ c
)++c d
;++d e
},, 	
}-- 
public// 

override// 
void// 
Bad// 
(// 
HttpRequest// (
req//) ,
,//, -
HttpResponse//. :
resp//; ?
)//? @
{00 
string11 
data11 
;11 
data22 
=22 
$str22 
;22 
{44 	
if55 
(55 
req55 
.55 
QueryString55 
[55  
$str55  $
]55$ %
!=55& (
null55) -
)55- .
{66 
data77 
=77 
req77 
.77 
QueryString77 &
[77& '
$str77' +
]77+ ,
;77, -
}88 
}99 	
dataBad:: 
=:: 
data:: 
;:: 
BadSink;; 
(;; 
req;; 
,;; 
resp;; 
);; 
;;; 
}<< 
public?? 

override?? 
void?? 
Good?? 
(?? 
HttpRequest?? )
req??* -
,??- .
HttpResponse??/ ;
resp??< @
)??@ A
{@@ 
GoodG2BAA 
(AA 
reqAA 
,AA 
respAA 
)AA 
;AA 
GoodB2GBB 
(BB 
reqBB 
,BB 
respBB 
)BB 
;BB 
}CC 
privateEE 
voidEE 
GoodG2BSinkEE 
(EE 
HttpRequestEE (
reqEE) ,
,EE, -
HttpResponseEE. :
respEE; ?
)EE? @
{FF 
stringGG 
dataGG 
=GG 
dataGoodG2BGG !
;GG! "
tryHH 
{II 	
intJJ 
valueJJ 
=JJ 
intJJ 
.JJ 
ParseJJ !
(JJ! "
dataJJ" &
)JJ& '
;JJ' (
}KK 	
catchLL 
(LL 
FormatExceptionLL 
exceptNumberFormatLL 1
)LL1 2
{MM 	
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO 
.OO 
LogLevelOO '
.OO' (
WarnOO( ,
,OO, -
exceptNumberFormatOO. @
,OO@ A
$strOOB \
+OO] ^
dataOO_ c
)OOc d
;OOd e
}PP 	
}QQ 
privateTT 
voidTT 
GoodG2BTT 
(TT 
HttpRequestTT $
reqTT% (
,TT( )
HttpResponseTT* 6
respTT7 ;
)TT; <
{UU 
stringVV 
dataVV 
;VV 
dataXX 
=XX 
$strXX 
;XX 
dataGoodG2BYY 
=YY 
dataYY 
;YY 
GoodG2BSinkZZ 
(ZZ 
reqZZ 
,ZZ 
respZZ 
)ZZ 
;ZZ 
}[[ 
private]] 
void]] 
GoodB2GSink]] 
(]] 
HttpRequest]] (
req]]) ,
,]], -
HttpResponse]]. :
resp]]; ?
)]]? @
{^^ 
string__ 
data__ 
=__ 
dataGoodB2G__ !
;__! "
try`` 
{aa 	
intbb 
valuebb 
=bb 
intbb 
.bb 
Parsebb !
(bb! "
databb" &
)bb& '
;bb' (
}cc 	
catchdd 
(dd 
FormatExceptiondd 
exceptNumberFormatdd 1
)dd1 2
{ee 	
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg 
.gg 
LogLevelgg '
.gg' (
Warngg( ,
,gg, -
exceptNumberFormatgg. @
,gg@ A
$strggB f
+ggg h
exceptNumberFormatggi {
)gg{ |
;gg| }
}hh 	
}ii 
privatell 
voidll 
GoodB2Gll 
(ll 
HttpRequestll $
reqll% (
,ll( )
HttpResponsell* 6
respll7 ;
)ll; <
{mm 
stringnn 
datann 
;nn 
dataoo 
=oo 
$stroo 
;oo 
{qq 	
ifrr 
(rr 
reqrr 
.rr 
QueryStringrr 
[rr  
$strrr  $
]rr$ %
!=rr& (
nullrr) -
)rr- .
{ss 
datatt 
=tt 
reqtt 
.tt 
QueryStringtt &
[tt& '
$strtt' +
]tt+ ,
;tt, -
}uu 
}vv 	
dataGoodB2Gww 
=ww 
dataww 
;ww 
GoodB2GSinkxx 
(xx 
reqxx 
,xx 
respxx 
)xx 
;xx 
}yy 
}{{ 
}|| ÷
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_51a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_51a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
data%% 
=%% 
req%% 
.%% 
QueryString%% &
[%%& '
$str%%' +
]%%+ ,
;%%, -
}&& 
}'' 	O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_51b(( K
.((K L
BadSink((L S
(((S T
data((T X
,((Y Z
req(([ ^
,((^ _
resp((` d
)((e f
;((f g
})) 
public,, 

override,, 
void,, 
Good,, 
(,, 
HttpRequest,, )
req,,* -
,,,- .
HttpResponse,,/ ;
resp,,< @
),,@ A
{-- 
GoodG2B.. 
(.. 
req.. 
,.. 
resp.. 
).. 
;.. 
GoodB2G// 
(// 
req// 
,// 
resp// 
)// 
;// 
}00 
private33 
void33 
GoodG2B33 
(33 
HttpRequest33 $
req33% (
,33( )
HttpResponse33* 6
resp337 ;
)33; <
{44 
string55 
data55 
;55 
data77 
=77 
$str77 
;77 O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_51b88 K
.88K L
GoodG2BSink88L W
(88W X
data88X \
,88] ^
req88_ b
,88b c
resp88d h
)88i j
;88j k
}99 
private<< 
void<< 
GoodB2G<< 
(<< 
HttpRequest<< $
req<<% (
,<<( )
HttpResponse<<* 6
resp<<7 ;
)<<; <
{== 
string>> 
data>> 
;>> 
data?? 
=?? 
$str?? 
;?? 
{AA 	
ifBB 
(BB 
reqBB 
.BB 
QueryStringBB 
[BB  
$strBB  $
]BB$ %
!=BB& (
nullBB) -
)BB- .
{CC 
dataDD 
=DD 
reqDD 
.DD 
QueryStringDD &
[DD& '
$strDD' +
]DD+ ,
;DD, -
}EE 
}FF 	O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_51bGG K
.GGK L
GoodB2GSinkGGL W
(GGW X
dataGGX \
,GG] ^
reqGG_ b
,GGb c
respGGd h
)GGi j
;GGj k
}HH 
}JJ 
}KK à
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_51b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_51b I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
,,,/ 0
HttpRequest,,1 <
req,,= @
,,,@ A
HttpResponse,,B N
resp,,O S
),,S T
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
,::/ 0
HttpRequest::1 <
req::= @
,::@ A
HttpResponse::B N
resp::O S
)::S T
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH ÷
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_52a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_52a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
data%% 
=%% 
req%% 
.%% 
QueryString%% &
[%%& '
$str%%' +
]%%+ ,
;%%, -
}&& 
}'' 	O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_52b(( K
.((K L
BadSink((L S
(((S T
data((T X
,((Y Z
req(([ ^
,((^ _
resp((` d
)((d e
;((e f
})) 
public,, 

override,, 
void,, 
Good,, 
(,, 
HttpRequest,, )
req,,* -
,,,- .
HttpResponse,,/ ;
resp,,< @
),,@ A
{-- 
GoodG2B.. 
(.. 
req.. 
,.. 
resp.. 
).. 
;.. 
GoodB2G// 
(// 
req// 
,// 
resp// 
)// 
;// 
}00 
private33 
void33 
GoodG2B33 
(33 
HttpRequest33 $
req33% (
,33( )
HttpResponse33* 6
resp337 ;
)33; <
{44 
string55 
data55 
;55 
data77 
=77 
$str77 
;77 O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_52b88 K
.88K L
GoodG2BSink88L W
(88W X
data88X \
,88] ^
req88_ b
,88b c
resp88d h
)88h i
;88i j
}99 
private<< 
void<< 
GoodB2G<< 
(<< 
HttpRequest<< $
req<<% (
,<<( )
HttpResponse<<* 6
resp<<7 ;
)<<; <
{== 
string>> 
data>> 
;>> 
data?? 
=?? 
$str?? 
;?? 
{AA 	
ifBB 
(BB 
reqBB 
.BB 
QueryStringBB 
[BB  
$strBB  $
]BB$ %
!=BB& (
nullBB) -
)BB- .
{CC 
dataDD 
=DD 
reqDD 
.DD 
QueryStringDD &
[DD& '
$strDD' +
]DD+ ,
;DD, -
}EE 
}FF 	O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_52bGG K
.GGK L
GoodB2GSinkGGL W
(GGW X
dataGGX \
,GG] ^
reqGG_ b
,GGb c
respGGd h
)GGh i
;GGi j
}HH 
}JJ 
}KK ¾
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_52b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_52b I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_52c K
.K L
BadSinkL S
(S T
dataT X
,Y Z
req[ ^
,^ _
resp` d
)d e
;e f
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_52c&& K
.&&K L
GoodG2BSink&&L W
(&&W X
data&&X \
,&&] ^
req&&_ b
,&&b c
resp&&d h
)&&h i
;&&i j
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_52c,, K
.,,K L
GoodB2GSink,,L W
(,,W X
data,,X \
,,,] ^
req,,_ b
,,,b c
resp,,d h
),,h i
;,,i j
}-- 
}// 
}00 à
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_52c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_52c I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
,,,/ 0
HttpRequest,,1 <
req,,= @
,,,@ A
HttpResponse,,B N
resp,,O S
),,S T
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
,::/ 0
HttpRequest::1 <
req::= @
,::@ A
HttpResponse::B N
resp::O S
)::S T
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH ÷
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
data%% 
=%% 
req%% 
.%% 
QueryString%% &
[%%& '
$str%%' +
]%%+ ,
;%%, -
}&& 
}'' 	O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53b(( K
.((K L
BadSink((L S
(((S T
data((T X
,((Y Z
req(([ ^
,((^ _
resp((` d
)((d e
;((e f
})) 
public,, 

override,, 
void,, 
Good,, 
(,, 
HttpRequest,, )
req,,* -
,,,- .
HttpResponse,,/ ;
resp,,< @
),,@ A
{-- 
GoodG2B.. 
(.. 
req.. 
,.. 
resp.. 
).. 
;.. 
GoodB2G// 
(// 
req// 
,// 
resp// 
)// 
;// 
}00 
private33 
void33 
GoodG2B33 
(33 
HttpRequest33 $
req33% (
,33( )
HttpResponse33* 6
resp337 ;
)33; <
{44 
string55 
data55 
;55 
data77 
=77 
$str77 
;77 O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53b88 K
.88K L
GoodG2BSink88L W
(88W X
data88X \
,88] ^
req88_ b
,88b c
resp88d h
)88h i
;88i j
}99 
private<< 
void<< 
GoodB2G<< 
(<< 
HttpRequest<< $
req<<% (
,<<( )
HttpResponse<<* 6
resp<<7 ;
)<<; <
{== 
string>> 
data>> 
;>> 
data?? 
=?? 
$str?? 
;?? 
{AA 	
ifBB 
(BB 
reqBB 
.BB 
QueryStringBB 
[BB  
$strBB  $
]BB$ %
!=BB& (
nullBB) -
)BB- .
{CC 
dataDD 
=DD 
reqDD 
.DD 
QueryStringDD &
[DD& '
$strDD' +
]DD+ ,
;DD, -
}EE 
}FF 	O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53bGG K
.GGK L
GoodB2GSinkGGL W
(GGW X
dataGGX \
,GG] ^
reqGG_ b
,GGb c
respGGd h
)GGh i
;GGi j
}HH 
}JJ 
}KK ¾
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53b I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53c K
.K L
BadSinkL S
(S T
dataT X
,Y Z
req[ ^
,^ _
resp` d
)d e
;e f
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53c&& K
.&&K L
GoodG2BSink&&L W
(&&W X
data&&X \
,&&] ^
req&&_ b
,&&b c
resp&&d h
)&&h i
;&&i j
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53c,, K
.,,K L
GoodB2GSink,,L W
(,,W X
data,,X \
,,,] ^
req,,_ b
,,,b c
resp,,d h
),,h i
;,,i j
}-- 
}// 
}00 ¾
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53c I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53d K
.K L
BadSinkL S
(S T
dataT X
,Y Z
req[ ^
,^ _
resp` d
)d e
;e f
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53d&& K
.&&K L
GoodG2BSink&&L W
(&&W X
data&&X \
,&&] ^
req&&_ b
,&&b c
resp&&d h
)&&h i
;&&i j
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53d,, K
.,,K L
GoodB2GSink,,L W
(,,W X
data,,X \
,,,] ^
req,,_ b
,,,b c
resp,,d h
),,h i
;,,i j
}-- 
}// 
}00 à
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_53d I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
,,,/ 0
HttpRequest,,1 <
req,,= @
,,,@ A
HttpResponse,,B N
resp,,O S
),,S T
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
,::/ 0
HttpRequest::1 <
req::= @
,::@ A
HttpResponse::B N
resp::O S
)::S T
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH ÷
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
data%% 
=%% 
req%% 
.%% 
QueryString%% &
[%%& '
$str%%' +
]%%+ ,
;%%, -
}&& 
}'' 	O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54b(( K
.((K L
BadSink((L S
(((S T
data((T X
,((Y Z
req(([ ^
,((^ _
resp((` d
)((d e
;((e f
})) 
public,, 

override,, 
void,, 
Good,, 
(,, 
HttpRequest,, )
req,,* -
,,,- .
HttpResponse,,/ ;
resp,,< @
),,@ A
{-- 
GoodG2B.. 
(.. 
req.. 
,.. 
resp.. 
).. 
;.. 
GoodB2G// 
(// 
req// 
,// 
resp// 
)// 
;// 
}00 
private33 
void33 
GoodG2B33 
(33 
HttpRequest33 $
req33% (
,33( )
HttpResponse33* 6
resp337 ;
)33; <
{44 
string55 
data55 
;55 
data77 
=77 
$str77 
;77 O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54b88 K
.88K L
GoodG2BSink88L W
(88W X
data88X \
,88] ^
req88_ b
,88b c
resp88d h
)88h i
;88i j
}99 
private<< 
void<< 
GoodB2G<< 
(<< 
HttpRequest<< $
req<<% (
,<<( )
HttpResponse<<* 6
resp<<7 ;
)<<; <
{== 
string>> 
data>> 
;>> 
data?? 
=?? 
$str?? 
;?? 
{AA 	
ifBB 
(BB 
reqBB 
.BB 
QueryStringBB 
[BB  
$strBB  $
]BB$ %
!=BB& (
nullBB) -
)BB- .
{CC 
dataDD 
=DD 
reqDD 
.DD 
QueryStringDD &
[DD& '
$strDD' +
]DD+ ,
;DD, -
}EE 
}FF 	O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54bGG K
.GGK L
GoodB2GSinkGGL W
(GGW X
dataGGX \
,GG] ^
reqGG_ b
,GGb c
respGGd h
)GGh i
;GGi j
}HH 
}JJ 
}KK ¾
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54b I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54c K
.K L
BadSinkL S
(S T
dataT X
,Y Z
req[ ^
,^ _
resp` d
)d e
;e f
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54c&& K
.&&K L
GoodG2BSink&&L W
(&&W X
data&&X \
,&&] ^
req&&_ b
,&&b c
resp&&d h
)&&h i
;&&i j
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54c,, K
.,,K L
GoodB2GSink,,L W
(,,W X
data,,X \
,,,] ^
req,,_ b
,,,b c
resp,,d h
),,h i
;,,i j
}-- 
}// 
}00 ¾
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54c I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54d K
.K L
BadSinkL S
(S T
dataT X
,Y Z
req[ ^
,^ _
resp` d
)d e
;e f
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54d&& K
.&&K L
GoodG2BSink&&L W
(&&W X
data&&X \
,&&] ^
req&&_ b
,&&b c
resp&&d h
)&&h i
;&&i j
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54d,, K
.,,K L
GoodB2GSink,,L W
(,,W X
data,,X \
,,,] ^
req,,_ b
,,,b c
resp,,d h
),,h i
;,,i j
}-- 
}// 
}00 ¾
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54d I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54e K
.K L
BadSinkL S
(S T
dataT X
,Y Z
req[ ^
,^ _
resp` d
)d e
;e f
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
,$$/ 0
HttpRequest$$1 <
req$$= @
,$$@ A
HttpResponse$$B N
resp$$O S
)$$S T
{%% O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54e&& K
.&&K L
GoodG2BSink&&L W
(&&W X
data&&X \
,&&] ^
req&&_ b
,&&b c
resp&&d h
)&&h i
;&&i j
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
,**/ 0
HttpRequest**1 <
req**= @
,**@ A
HttpResponse**B N
resp**O S
)**S T
{++ O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54e,, K
.,,K L
GoodB2GSink,,L W
(,,W X
data,,X \
,,,] ^
req,,_ b
,,,b c
resp,,d h
),,h i
;,,i j
}-- 
}// 
}00 à
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54e.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_54e I
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
,+ ,
HttpRequest- 8
req9 <
,< =
HttpResponse> J
respK O
)O P
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
,,,/ 0
HttpRequest,,1 <
req,,= @
,,,@ A
HttpResponse,,B N
resp,,O S
),,S T
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
,::/ 0
HttpRequest::1 <
req::= @
,::@ A
HttpResponse::B N
resp::O S
)::S T
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH é#
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_61a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_61a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
= O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_61b Y
.Y Z
	BadSourceZ c
(c d
reqd g
,g h
respi m
)m n
;n o
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
HttpRequest++ )
req++* -
,++- .
HttpResponse++/ ;
resp++< @
)++@ A
{,, 
GoodG2B-- 
(-- 
req-- 
,-- 
resp-- 
)-- 
;-- 
GoodB2G.. 
(.. 
req.. 
,.. 
resp.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
HttpRequest22  +
req22, /
,22/ 0
HttpResponse221 =
resp22> B
)22B C
{33 
string44 
data44 
=44 O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_61b44 Y
.44Y Z
GoodG2BSource44Z g
(44g h
req44h k
,44k l
resp44m q
)44q r
;44r s
try55 
{66 	
int77 
value77 
=77 
int77 
.77 
Parse77 !
(77! "
data77" &
)77& '
;77' (
}88 	
catch99 
(99 
FormatException99 
exceptNumberFormat99 1
)991 2
{:: 	
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< 
.<< 
LogLevel<< '
.<<' (
Warn<<( ,
,<<, -
exceptNumberFormat<<. @
,<<@ A
$str<<B \
+<<] ^
data<<_ c
)<<c d
;<<d e
}== 	
}>> 
privateAA 
staticAA 
voidAA 
GoodB2GAA 
(AA  
HttpRequestAA  +
reqAA, /
,AA/ 0
HttpResponseAA1 =
respAA> B
)AAB C
{BB 
stringCC 
dataCC 
=CC O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_61bCC Y
.CCY Z
GoodB2GSourceCCZ g
(CCg h
reqCCh k
,CCk l
respCCm q
)CCq r
;CCr s
tryDD 
{EE 	
intFF 
valueFF 
=FF 
intFF 
.FF 
ParseFF !
(FF! "
dataFF" &
)FF& '
;FF' (
}GG 	
catchHH 
(HH 
FormatExceptionHH 
exceptNumberFormatHH 1
)HH1 2
{II 	
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK 
.KK 
LogLevelKK '
.KK' (
WarnKK( ,
,KK, -
exceptNumberFormatKK. @
,KK@ A
$strKKB f
+KKg h
exceptNumberFormatKKi {
)KK{ |
;KK| }
}LL 	
}MM 
}OO 
}PP ä
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_61b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_61b I
{ 
public 

static 
string 
	BadSource "
(" #
HttpRequest# .
req/ 2
,2 3
HttpResponse4 @
respA E
)E F
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
data%% 
=%% 
req%% 
.%% 
QueryString%% &
[%%& '
$str%%' +
]%%+ ,
;%%, -
}&& 
}'' 	
return(( 
data(( 
;(( 
})) 
public.. 

static.. 
string.. 
GoodG2BSource.. &
(..& '
HttpRequest..' 2
req..3 6
,..6 7
HttpResponse..8 D
resp..E I
)..I J
{// 
string00 
data00 
;00 
data22 
=22 
$str22 
;22 
return33 
data33 
;33 
}44 
public77 

static77 
string77 
GoodB2GSource77 &
(77& '
HttpRequest77' 2
req773 6
,776 7
HttpResponse778 D
resp77E I
)77I J
{88 
string99 
data99 
;99 
data:: 
=:: 
$str:: 
;:: 
{<< 	
if== 
(== 
req== 
.== 
QueryString== 
[==  
$str==  $
]==$ %
!===& (
null==) -
)==- .
{>> 
data?? 
=?? 
req?? 
.?? 
QueryString?? &
[??& '
$str??' +
]??+ ,
;??, -
}@@ 
}AA 	
returnBB 
dataBB 
;BB 
}CC 
}EE 
}FF Ç#
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_66a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_66a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
data%% 
=%% 
req%% 
.%% 
QueryString%% &
[%%& '
$str%%' +
]%%+ ,
;%%, -
}&& 
}'' 	
string(( 
[(( 
](( 
	dataArray(( 
=(( 
new((  
string((! '
[((' (
$num((( )
](() *
;((* +
	dataArray)) 
[)) 
$num)) 
])) 
=)) 
data)) 
;)) O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_66b** K
.**K L
BadSink**L S
(**S T
	dataArray**T ]
,**^ _
req**` c
,**c d
resp**e i
)**j k
;**k l
}++ 
public.. 

override.. 
void.. 
Good.. 
(.. 
HttpRequest.. )
req..* -
,..- .
HttpResponse../ ;
resp..< @
)..@ A
{// 
GoodG2B00 
(00 
req00 
,00 
resp00 
)00 
;00 
GoodB2G11 
(11 
req11 
,11 
resp11 
)11 
;11 
}22 
private55 
static55 
void55 
GoodG2B55 
(55  
HttpRequest55  +
req55, /
,55/ 0
HttpResponse551 =
resp55> B
)55B C
{66 
string77 
data77 
;77 
data99 
=99 
$str99 
;99 
string:: 
[:: 
]:: 
	dataArray:: 
=:: 
new::  
string::! '
[::' (
$num::( )
]::) *
;::* +
	dataArray;; 
[;; 
$num;; 
];; 
=;; 
data;; 
;;; O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_66b<< K
.<<K L
GoodG2BSink<<L W
(<<W X
	dataArray<<X a
,<<b c
req<<d g
,<<g h
resp<<i m
)<<n o
;<<o p
}== 
private@@ 
static@@ 
void@@ 
GoodB2G@@ 
(@@  
HttpRequest@@  +
req@@, /
,@@/ 0
HttpResponse@@1 =
resp@@> B
)@@B C
{AA 
stringBB 
dataBB 
;BB 
dataCC 
=CC 
$strCC 
;CC 
{EE 	
ifFF 
(FF 
reqFF 
.FF 
QueryStringFF 
[FF  
$strFF  $
]FF$ %
!=FF& (
nullFF) -
)FF- .
{GG 
dataHH 
=HH 
reqHH 
.HH 
QueryStringHH &
[HH& '
$strHH' +
]HH+ ,
;HH, -
}II 
}JJ 	
stringKK 
[KK 
]KK 
	dataArrayKK 
=KK 
newKK  
stringKK! '
[KK' (
$numKK( )
]KK) *
;KK* +
	dataArrayLL 
[LL 
$numLL 
]LL 
=LL 
dataLL 
;LL O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_66bMM K
.MMK L
GoodB2GSinkMML W
(MMW X
	dataArrayMMX a
,MMb c
reqMMd g
,MMg h
respMMi m
)MMn o
;MMo p
}NN 
}PP 
}QQ ê
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_66b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_66b I
{ 
public 

static 
void 
BadSink 
( 
string %
[% &
]& '
	dataArray( 1
,2 3
HttpRequest4 ?
req@ C
,C D
HttpResponseE Q
respR V
)V W
{ 
string 
data 
= 
	dataArray 
[  
$num  !
]! "
;" #
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
string--# )
[--) *
]--* +
	dataArray--, 5
,--6 7
HttpRequest--8 C
req--D G
,--G H
HttpResponse--I U
resp--V Z
)--Z [
{.. 
string// 
data// 
=// 
	dataArray// 
[//  
$num//  !
]//! "
;//" #
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
string<<# )
[<<) *
]<<* +
	dataArray<<, 5
,<<6 7
HttpRequest<<8 C
req<<D G
,<<G H
HttpResponse<<I U
resp<<V Z
)<<Z [
{== 
string>> 
data>> 
=>> 
	dataArray>> 
[>>  
$num>>  !
]>>! "
;>>" #
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK $
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_67a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_67a I
:J K
AbstractTestCaseWebL _
{ 
public 

class 
	Container 
{ 
public 
string 
containerOne "
;" #
}   
public"" 

override"" 
void"" 
Bad"" 
("" 
HttpRequest"" (
req"") ,
,"", -
HttpResponse"". :
resp""; ?
)""? @
{## 
string$$ 
data$$ 
;$$ 
data%% 
=%% 
$str%% 
;%% 
{'' 	
if(( 
((( 
req(( 
.(( 
QueryString(( 
[((  
$str((  $
](($ %
!=((& (
null(() -
)((- .
{)) 
data** 
=** 
req** 
.** 
QueryString** &
[**& '
$str**' +
]**+ ,
;**, -
}++ 
},, 	
	Container-- 
dataContainer-- 
=--  !
new--" %
	Container--& /
(--/ 0
)--0 1
;--1 2
dataContainer.. 
... 
containerOne.. "
=..# $
data..% )
;..) *O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_67b// K
.//K L
BadSink//L S
(//S T
dataContainer//T a
,//b c
req//d g
,//g h
resp//i m
)//n o
;//o p
}00 
public33 

override33 
void33 
Good33 
(33 
HttpRequest33 )
req33* -
,33- .
HttpResponse33/ ;
resp33< @
)33@ A
{44 
GoodG2B55 
(55 
req55 
,55 
resp55 
)55 
;55 
GoodB2G66 
(66 
req66 
,66 
resp66 
)66 
;66 
}77 
private:: 
static:: 
void:: 
GoodG2B:: 
(::  
HttpRequest::  +
req::, /
,::/ 0
HttpResponse::1 =
resp::> B
)::B C
{;; 
string<< 
data<< 
;<< 
data>> 
=>> 
$str>> 
;>> 
	Container?? 
dataContainer?? 
=??  !
new??" %
	Container??& /
(??/ 0
)??0 1
;??1 2
dataContainer@@ 
.@@ 
containerOne@@ "
=@@# $
data@@% )
;@@) *O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_67bAA K
.AAK L
GoodG2BSinkAAL W
(AAW X
dataContainerAAX e
,AAf g
reqAAh k
,AAk l
respAAm q
)AAr s
;AAs t
}BB 
privateEE 
staticEE 
voidEE 
GoodB2GEE 
(EE  
HttpRequestEE  +
reqEE, /
,EE/ 0
HttpResponseEE1 =
respEE> B
)EEB C
{FF 
stringGG 
dataGG 
;GG 
dataHH 
=HH 
$strHH 
;HH 
{JJ 	
ifKK 
(KK 
reqKK 
.KK 
QueryStringKK 
[KK  
$strKK  $
]KK$ %
!=KK& (
nullKK) -
)KK- .
{LL 
dataMM 
=MM 
reqMM 
.MM 
QueryStringMM &
[MM& '
$strMM' +
]MM+ ,
;MM, -
}NN 
}OO 	
	ContainerPP 
dataContainerPP 
=PP  !
newPP" %
	ContainerPP& /
(PP/ 0
)PP0 1
;PP1 2
dataContainerQQ 
.QQ 
containerOneQQ "
=QQ# $
dataQQ% )
;QQ) *O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_67bRR K
.RRK L
GoodB2GSinkRRL W
(RRW X
dataContainerRRX e
,RRf g
reqRRh k
,RRk l
respRRm q
)RRr s
;RRs t
}SS 
}UU 
}VV á 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_67b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_67b I
{ 
public 

static 
void 
BadSink 
( O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_67a b
.b c
	Containerc l
dataContainerm z
,{ |
HttpRequest	} 
req
 
,
 
HttpResponse
 
resp
 
)
  
{ 
string 
data 
= 
dataContainer #
.# $
containerOne$ 0
;0 1
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_67a--# f
.--f g
	Container--g p
dataContainer--q ~
,	-- 
HttpRequest
-- 
req
-- 
,
-- 
HttpResponse
-- 
resp
-- £
)
--£ ¤
{.. 
string// 
data// 
=// 
dataContainer// #
.//# $
containerOne//$ 0
;//0 1
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_67a<<# f
.<<f g
	Container<<g p
dataContainer<<q ~
,	<< 
HttpRequest
<< 
req
<< 
,
<< 
HttpResponse
<< 
resp
<< £
)
<<£ ¤
{== 
string>> 
data>> 
=>> 
dataContainer>> #
.>># $
containerOne>>$ 0
;>>0 1
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK ú
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_68a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_68a I
:J K
AbstractTestCaseWebL _
{ 
public 

static 
string 
data 
; 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{   
data!! 
=!! 
$str!! 
;!! 
{## 	
if$$ 
($$ 
req$$ 
.$$ 
QueryString$$ 
[$$  
$str$$  $
]$$$ %
!=$$& (
null$$) -
)$$- .
{%% 
data&& 
=&& 
req&& 
.&& 
QueryString&& &
[&&& '
$str&&' +
]&&+ ,
;&&, -
}'' 
}(( 	O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_68b)) K
.))K L
BadSink))L S
())S T
req))T W
,))W X
resp))Y ]
)))] ^
;))^ _
}** 
public-- 

override-- 
void-- 
Good-- 
(-- 
HttpRequest-- )
req--* -
,--- .
HttpResponse--/ ;
resp--< @
)--@ A
{.. 
GoodG2B// 
(// 
req// 
,// 
resp// 
)// 
;// 
GoodB2G00 
(00 
req00 
,00 
resp00 
)00 
;00 
}11 
private44 
static44 
void44 
GoodG2B44 
(44  
HttpRequest44  +
req44, /
,44/ 0
HttpResponse441 =
resp44> B
)44B C
{55 
data77 
=77 
$str77 
;77 O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_68b88 K
.88K L
GoodG2BSink88L W
(88W X
req88X [
,88[ \
resp88] a
)88a b
;88b c
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
HttpRequest<<  +
req<<, /
,<</ 0
HttpResponse<<1 =
resp<<> B
)<<B C
{== 
data>> 
=>> 
$str>> 
;>> 
{@@ 	
ifAA 
(AA 
reqAA 
.AA 
QueryStringAA 
[AA  
$strAA  $
]AA$ %
!=AA& (
nullAA) -
)AA- .
{BB 
dataCC 
=CC 
reqCC 
.CC 
QueryStringCC &
[CC& '
$strCC' +
]CC+ ,
;CC, -
}DD 
}EE 	O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_68bFF K
.FFK L
GoodB2GSinkFFL W
(FFW X
reqFFX [
,FF[ \
respFF] a
)FFa b
;FFb c
}GG 
}II 
}JJ ã
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_68b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_68b I
{ 
public 

static 
void 
BadSink 
( 
HttpRequest *
req+ .
,. /
HttpResponse0 <
resp= A
)A B
{ 
string 
data 
= O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_68a Y
.Y Z
dataZ ^
;^ _
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
HttpRequest--# .
req--/ 2
,--2 3
HttpResponse--4 @
resp--A E
)--E F
{.. 
string// 
data// 
=// O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_68a// Y
.//Y Z
data//Z ^
;//^ _
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
HttpRequest<<# .
req<</ 2
,<<2 3
HttpResponse<<4 @
resp<<A E
)<<E F
{== 
string>> 
data>> 
=>> O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_68a>> Y
.>>Y Z
data>>Z ^
;>>^ _
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK µ
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_71a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_71a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
data%% 
=%% 
req%% 
.%% 
QueryString%% &
[%%& '
$str%%' +
]%%+ ,
;%%, -
}&& 
}'' 	O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_71b(( K
.((K L
BadSink((L S
(((S T
(((T U
Object((U [
)(([ \
data((\ `
,((a b
req((c f
,((f g
resp((h l
)((m n
;((n o
})) 
public,, 

override,, 
void,, 
Good,, 
(,, 
HttpRequest,, )
req,,* -
,,,- .
HttpResponse,,/ ;
resp,,< @
),,@ A
{-- 
GoodG2B.. 
(.. 
req.. 
,.. 
resp.. 
).. 
;.. 
GoodB2G// 
(// 
req// 
,// 
resp// 
)// 
;// 
}00 
private33 
static33 
void33 
GoodG2B33 
(33  
HttpRequest33  +
req33, /
,33/ 0
HttpResponse331 =
resp33> B
)33B C
{44 
string55 
data55 
;55 
data77 
=77 
$str77 
;77 O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_71b88 K
.88K L
GoodG2BSink88L W
(88W X
(88X Y
Object88Y _
)88_ `
data88` d
,88e f
req88g j
,88j k
resp88l p
)88q r
;88r s
}99 
private<< 
static<< 
void<< 
GoodB2G<< 
(<<  
HttpRequest<<  +
req<<, /
,<</ 0
HttpResponse<<1 =
resp<<> B
)<<B C
{== 
string>> 
data>> 
;>> 
data?? 
=?? 
$str?? 
;?? 
{AA 	
ifBB 
(BB 
reqBB 
.BB 
QueryStringBB 
[BB  
$strBB  $
]BB$ %
!=BB& (
nullBB) -
)BB- .
{CC 
dataDD 
=DD 
reqDD 
.DD 
QueryStringDD &
[DD& '
$strDD' +
]DD+ ,
;DD, -
}EE 
}FF 	O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_71bGG K
.GGK L
GoodB2GSinkGGL W
(GGW X
(GGX Y
ObjectGGY _
)GG_ `
dataGG` d
,GGe f
reqGGg j
,GGj k
respGGl p
)GGq r
;GGr s
}HH 
}JJ 
}KK 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_71b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_71b I
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
,1 2
HttpRequest3 >
req? B
,B C
HttpResponseD P
respQ U
)U V
{ 
string 
data 
= 
( 
string 
) 

dataObject (
;( )
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
Object..# )

dataObject..* 4
,..5 6
HttpRequest..7 B
req..C F
,..F G
HttpResponse..H T
resp..U Y
)..Y Z
{// 
string00 
data00 
=00 
(00 
string00 
)00 

dataObject00 (
;00( )
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
Object==# )

dataObject==* 4
,==5 6
HttpRequest==7 B
req==C F
,==F G
HttpResponse==H T
resp==U Y
)==Y Z
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 

dataObject?? (
;??( )
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ¥+
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_72a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_72a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	
if$$ 
($$ 
req$$ 
.$$ 
QueryString$$ 
[$$  
$str$$  $
]$$$ %
!=$$& (
null$$) -
)$$- .
{%% 
data&& 
=&& 
req&& 
.&& 
QueryString&& &
[&&& '
$str&&' +
]&&+ ,
;&&, -
}'' 
}(( 	
	Hashtable)) 
dataHashtable)) 
=))  !
new))" %
	Hashtable))& /
())/ 0
$num))0 1
)))1 2
;))2 3
dataHashtable** 
.** 
Add** 
(** 
$num** 
,** 
data** !
)**! "
;**" #
dataHashtable++ 
.++ 
Add++ 
(++ 
$num++ 
,++ 
data++ !
)++! "
;++" #
dataHashtable,, 
.,, 
Add,, 
(,, 
$num,, 
,,, 
data,, !
),,! "
;,," #O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_72b-- K
.--K L
BadSink--L S
(--S T
dataHashtable--T a
,--b c
req--d g
,--g h
resp--i m
)--n o
;--o p
}.. 
public11 

override11 
void11 
Good11 
(11 
HttpRequest11 )
req11* -
,11- .
HttpResponse11/ ;
resp11< @
)11@ A
{22 
GoodG2B33 
(33 
req33 
,33 
resp33 
)33 
;33 
GoodB2G44 
(44 
req44 
,44 
resp44 
)44 
;44 
}55 
private88 
static88 
void88 
GoodG2B88 
(88  
HttpRequest88  +
req88, /
,88/ 0
HttpResponse881 =
resp88> B
)88B C
{99 
string:: 
data:: 
;:: 
data<< 
=<< 
$str<< 
;<< 
	Hashtable== 
dataHashtable== 
===  !
new==" %
	Hashtable==& /
(==/ 0
$num==0 1
)==1 2
;==2 3
dataHashtable>> 
.>> 
Add>> 
(>> 
$num>> 
,>> 
data>> !
)>>! "
;>>" #
dataHashtable?? 
.?? 
Add?? 
(?? 
$num?? 
,?? 
data?? !
)??! "
;??" #
dataHashtable@@ 
.@@ 
Add@@ 
(@@ 
$num@@ 
,@@ 
data@@ !
)@@! "
;@@" #O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_72bAA K
.AAK L
GoodG2BSinkAAL W
(AAW X
dataHashtableAAX e
,AAf g
reqAAh k
,AAk l
respAAm q
)AAr s
;AAs t
}BB 
privateEE 
staticEE 
voidEE 
GoodB2GEE 
(EE  
HttpRequestEE  +
reqEE, /
,EE/ 0
HttpResponseEE1 =
respEE> B
)EEB C
{FF 
stringGG 
dataGG 
;GG 
dataHH 
=HH 
$strHH 
;HH 
{JJ 	
ifKK 
(KK 
reqKK 
.KK 
QueryStringKK 
[KK  
$strKK  $
]KK$ %
!=KK& (
nullKK) -
)KK- .
{LL 
dataMM 
=MM 
reqMM 
.MM 
QueryStringMM &
[MM& '
$strMM' +
]MM+ ,
;MM, -
}NN 
}OO 	
	HashtablePP 
dataHashtablePP 
=PP  !
newPP" %
	HashtablePP& /
(PP/ 0
$numPP0 1
)PP1 2
;PP2 3
dataHashtableQQ 
.QQ 
AddQQ 
(QQ 
$numQQ 
,QQ 
dataQQ !
)QQ! "
;QQ" #
dataHashtableRR 
.RR 
AddRR 
(RR 
$numRR 
,RR 
dataRR !
)RR! "
;RR" #
dataHashtableSS 
.SS 
AddSS 
(SS 
$numSS 
,SS 
dataSS !
)SS! "
;SS" #O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_72bTT K
.TTK L
GoodB2GSinkTTL W
(TTW X
dataHashtableTTX e
,TTf g
reqTTh k
,TTk l
respTTm q
)TTr s
;TTs t
}UU 
}WW 
}XX Ç
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_72b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_72b I
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
,7 8
HttpRequest9 D
reqE H
,H I
HttpResponseJ V
respW [
)[ \
{ 
string 
data 
= 
( 
string 
) 
dataHashtable ,
[, -
$num- .
]. /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
	Hashtable..# ,
dataHashtable..- :
,..; <
HttpRequest..= H
req..I L
,..L M
HttpResponse..N Z
resp..[ _
).._ `
{// 
string00 
data00 
=00 
(00 
string00 
)00 
dataHashtable00 ,
[00, -
$num00- .
]00. /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
	Hashtable==# ,
dataHashtable==- :
,==; <
HttpRequest=== H
req==I L
,==L M
HttpResponse==N Z
resp==[ _
)==_ `
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 
dataHashtable?? ,
[??, -
$num??- .
]??. /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL «+
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_73a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_73a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	
if$$ 
($$ 
req$$ 
.$$ 
QueryString$$ 
[$$  
$str$$  $
]$$$ %
!=$$& (
null$$) -
)$$- .
{%% 
data&& 
=&& 
req&& 
.&& 
QueryString&& &
[&&& '
$str&&' +
]&&+ ,
;&&, -
}'' 
}(( 	

LinkedList)) 
<)) 
string)) 
>)) 
dataLinkedList)) )
=))* +
new)), /

LinkedList))0 :
<)): ;
string)); A
>))A B
())B C
)))C D
;))D E
dataLinkedList** 
.** 
AddLast** 
(** 
data** #
)**# $
;**$ %
dataLinkedList++ 
.++ 
AddLast++ 
(++ 
data++ #
)++# $
;++$ %
dataLinkedList,, 
.,, 
AddLast,, 
(,, 
data,, #
),,# $
;,,$ %O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_73b-- K
.--K L
BadSink--L S
(--S T
dataLinkedList--T b
,--c d
req--e h
,--h i
resp--j n
)--o p
;--p q
}.. 
public11 

override11 
void11 
Good11 
(11 
HttpRequest11 )
req11* -
,11- .
HttpResponse11/ ;
resp11< @
)11@ A
{22 
GoodG2B33 
(33 
req33 
,33 
resp33 
)33 
;33 
GoodB2G44 
(44 
req44 
,44 
resp44 
)44 
;44 
}55 
private88 
static88 
void88 
GoodG2B88 
(88  
HttpRequest88  +
req88, /
,88/ 0
HttpResponse881 =
resp88> B
)88B C
{99 
string:: 
data:: 
;:: 
data<< 
=<< 
$str<< 
;<< 

LinkedList== 
<== 
string== 
>== 
dataLinkedList== )
===* +
new==, /

LinkedList==0 :
<==: ;
string==; A
>==A B
(==B C
)==C D
;==D E
dataLinkedList>> 
.>> 
AddLast>> 
(>> 
data>> #
)>># $
;>>$ %
dataLinkedList?? 
.?? 
AddLast?? 
(?? 
data?? #
)??# $
;??$ %
dataLinkedList@@ 
.@@ 
AddLast@@ 
(@@ 
data@@ #
)@@# $
;@@$ %O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_73bAA K
.AAK L
GoodG2BSinkAAL W
(AAW X
dataLinkedListAAX f
,AAg h
reqAAi l
,AAl m
respAAn r
)AAs t
;AAt u
}BB 
privateEE 
staticEE 
voidEE 
GoodB2GEE 
(EE  
HttpRequestEE  +
reqEE, /
,EE/ 0
HttpResponseEE1 =
respEE> B
)EEB C
{FF 
stringGG 
dataGG 
;GG 
dataHH 
=HH 
$strHH 
;HH 
{JJ 	
ifKK 
(KK 
reqKK 
.KK 
QueryStringKK 
[KK  
$strKK  $
]KK$ %
!=KK& (
nullKK) -
)KK- .
{LL 
dataMM 
=MM 
reqMM 
.MM 
QueryStringMM &
[MM& '
$strMM' +
]MM+ ,
;MM, -
}NN 
}OO 	

LinkedListPP 
<PP 
stringPP 
>PP 
dataLinkedListPP )
=PP* +
newPP, /

LinkedListPP0 :
<PP: ;
stringPP; A
>PPA B
(PPB C
)PPC D
;PPD E
dataLinkedListQQ 
.QQ 
AddLastQQ 
(QQ 
dataQQ #
)QQ# $
;QQ$ %
dataLinkedListRR 
.RR 
AddLastRR 
(RR 
dataRR #
)RR# $
;RR$ %
dataLinkedListSS 
.SS 
AddLastSS 
(SS 
dataSS #
)SS# $
;SS$ %O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_73bTT K
.TTK L
GoodB2GSinkTTL W
(TTW X
dataLinkedListTTX f
,TTg h
reqTTi l
,TTl m
respTTn r
)TTs t
;TTt u
}UU 
}WW 
}XX  
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_73b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_73b I
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
string* 0
>0 1
dataLinkedList2 @
,A B
HttpRequestC N
reqO R
,R S
HttpResponseT `
respa e
)e f
{ 
string 
data 
= 
dataLinkedList $
.$ %
Last% )
.) *
Value* /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #

LinkedList..# -
<..- .
string... 4
>..4 5
dataLinkedList..6 D
,..E F
HttpRequest..G R
req..S V
,..V W
HttpResponse..X d
resp..e i
)..i j
{// 
string00 
data00 
=00 
dataLinkedList00 $
.00$ %
Last00% )
.00) *
Value00* /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

LinkedList==# -
<==- .
string==. 4
>==4 5
dataLinkedList==6 D
,==E F
HttpRequest==G R
req==S V
,==V W
HttpResponse==X d
resp==e i
)==i j
{>> 
string?? 
data?? 
=?? 
dataLinkedList?? $
.??$ %
Last??% )
.??) *
Value??* /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ð.
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_74a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_74a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{## 	
if$$ 
($$ 
req$$ 
.$$ 
QueryString$$ 
[$$  
$str$$  $
]$$$ %
!=$$& (
null$$) -
)$$- .
{%% 
data&& 
=&& 
req&& 
.&& 
QueryString&& &
[&&& '
$str&&' +
]&&+ ,
;&&, -
}'' 
}(( 	

Dictionary)) 
<)) 
int)) 
,)) 
string)) 
>)) 
dataDictionary)) -
=)). /
new))0 3

Dictionary))4 >
<))> ?
int))? B
,))B C
string))C I
>))I J
())J K
)))K L
;))L M
dataDictionary** 
.** 
Add** 
(** 
$num** 
,** 
data** "
)**" #
;**# $
dataDictionary++ 
.++ 
Add++ 
(++ 
$num++ 
,++ 
data++ "
)++" #
;++# $
dataDictionary,, 
.,, 
Add,, 
(,, 
$num,, 
,,, 
data,, "
),," #
;,,# $O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_74b-- K
.--K L
BadSink--L S
(--S T
dataDictionary--T b
,--c d
req--e h
,--h i
resp--j n
)--o p
;--p q
}.. 
public11 

override11 
void11 
Good11 
(11 
HttpRequest11 )
req11* -
,11- .
HttpResponse11/ ;
resp11< @
)11@ A
{22 
GoodG2B33 
(33 
req33 
,33 
resp33 
)33 
;33 
GoodB2G44 
(44 
req44 
,44 
resp44 
)44 
;44 
}55 
private88 
static88 
void88 
GoodG2B88 
(88  
HttpRequest88  +
req88, /
,88/ 0
HttpResponse881 =
resp88> B
)88B C
{99 
string:: 
data:: 
;:: 
data<< 
=<< 
$str<< 
;<< 

Dictionary== 
<== 
int== 
,== 
string== 
>== 
dataDictionary== -
===. /
new==0 3

Dictionary==4 >
<==> ?
int==? B
,==B C
string==C I
>==I J
(==J K
)==K L
;==L M
dataDictionary>> 
.>> 
Add>> 
(>> 
$num>> 
,>> 
data>> "
)>>" #
;>># $
dataDictionary?? 
.?? 
Add?? 
(?? 
$num?? 
,?? 
data?? "
)??" #
;??# $
dataDictionary@@ 
.@@ 
Add@@ 
(@@ 
$num@@ 
,@@ 
data@@ "
)@@" #
;@@# $O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_74bAA K
.AAK L
GoodG2BSinkAAL W
(AAW X
dataDictionaryAAX f
,AAg h
reqAAi l
,AAl m
respAAn r
)AAs t
;AAt u
}BB 
privateEE 
staticEE 
voidEE 
GoodB2GEE 
(EE  
HttpRequestEE  +
reqEE, /
,EE/ 0
HttpResponseEE1 =
respEE> B
)EEB C
{FF 
stringGG 
dataGG 
;GG 
dataHH 
=HH 
$strHH 
;HH 
{JJ 	
ifKK 
(KK 
reqKK 
.KK 
QueryStringKK 
[KK  
$strKK  $
]KK$ %
!=KK& (
nullKK) -
)KK- .
{LL 
dataMM 
=MM 
reqMM 
.MM 
QueryStringMM &
[MM& '
$strMM' +
]MM+ ,
;MM, -
}NN 
}OO 	

DictionaryPP 
<PP 
intPP 
,PP 
stringPP 
>PP 
dataDictionaryPP -
=PP. /
newPP0 3

DictionaryPP4 >
<PP> ?
intPP? B
,PPB C
stringPPC I
>PPI J
(PPJ K
)PPK L
;PPL M
dataDictionaryQQ 
.QQ 
AddQQ 
(QQ 
$numQQ 
,QQ 
dataQQ "
)QQ" #
;QQ# $
dataDictionaryRR 
.RR 
AddRR 
(RR 
$numRR 
,RR 
dataRR "
)RR" #
;RR# $
dataDictionarySS 
.SS 
AddSS 
(SS 
$numSS 
,SS 
dataSS "
)SS" #
;SS# $O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_74bTT K
.TTK L
GoodB2GSinkTTL W
(TTW X
dataDictionaryTTX f
,TTg h
reqTTi l
,TTl m
respTTn r
)TTs t
;TTt u
}UU 
}WW 
}XX ° 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_74b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_74b I
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
string. 4
>4 5
dataDictionary6 D
,E F
HttpRequestG R
reqS V
,V W
HttpResponseX d
respe i
)i j
{ 
string 
data 
= 
dataDictionary $
[$ %
$num% &
]& '
;' (
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. #
(..# $

Dictionary..$ .
<... /
int../ 2
,..2 3
string..3 9
>..9 :
dataDictionary..; I
,..J K
HttpRequest..L W
req..X [
,..[ \
HttpResponse..] i
resp..j n
)..n o
{// 
string00 
data00 
=00 
dataDictionary00 $
[00$ %
$num00% &
]00& '
;00' (
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

Dictionary==# -
<==- .
int==. 1
,==1 2
string==2 8
>==8 9
dataDictionary==: H
,==I J
HttpRequest==K V
req==W Z
,==Z [
HttpResponse==\ h
resp==i m
)==m n
{>> 
string?? 
data?? 
=?? 
dataDictionary?? $
[??$ %
$num??% &
]??& '
;??' (
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL ì<
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_75a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_75a I
:J K
AbstractTestCaseWebL _
{ 
public   

override   
void   
Bad   
(   
HttpRequest   (
req  ) ,
,  , -
HttpResponse  . :
resp  ; ?
)  ? @
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{%% 	
if&& 
(&& 
req&& 
.&& 
QueryString&& 
[&&  
$str&&  $
]&&$ %
!=&&& (
null&&) -
)&&- .
{'' 
data(( 
=(( 
req(( 
.(( 
QueryString(( &
[((& '
$str((' +
]((+ ,
;((, -
})) 
}** 	
byte,, 
[,, 
],, 
dataSerialized,, 
=,, 
null,,  $
;,,$ %
try-- 
{.. 	
BinaryFormatter// 
bf// 
=//  
new//! $
BinaryFormatter//% 4
(//4 5
)//5 6
;//6 7
using00 
(00 
var00 
ms00 
=00 
new00 
MemoryStream00  ,
(00, -
)00- .
)00. /
{11 
bf22 
.22 
	Serialize22 
(22 
ms22 
,22  
data22! %
)22% &
;22& '
dataSerialized33 
=33  
ms33! #
.33# $
ToArray33$ +
(33+ ,
)33, -
;33- .
}44 O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_75b55 O
.55O P
BadSink55P W
(55W X
dataSerialized55X f
,55g h
req55i l
,55l m
resp55n r
)55s t
;55t u
}66 	
catch77 
(77 "
SerializationException77 %
exceptSerialize77& 5
)775 6
{88 	
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 
.99 
LogLevel99 '
.99' (
Warn99( ,
,99, -
$str99. X
,99X Y
exceptSerialize99Z i
)99i j
;99j k
}:: 	
};; 
public>> 

override>> 
void>> 
Good>> 
(>> 
HttpRequest>> )
req>>* -
,>>- .
HttpResponse>>/ ;
resp>>< @
)>>@ A
{?? 
GoodG2B@@ 
(@@ 
req@@ 
,@@ 
resp@@ 
)@@ 
;@@ 
GoodB2GAA 
(AA 
reqAA 
,AA 
respAA 
)AA 
;AA 
}BB 
privateEE 
staticEE 
voidEE 
GoodG2BEE 
(EE  
HttpRequestEE  +
reqEE, /
,EE/ 0
HttpResponseEE1 =
respEE> B
)EEB C
{FF 
stringGG 
dataGG 
;GG 
dataHH 
=HH 
$strHH 
;HH 
{JJ 	
ifKK 
(KK 
reqKK 
.KK 
QueryStringKK 
[KK  
$strKK  $
]KK$ %
!=KK& (
nullKK) -
)KK- .
{LL 
dataMM 
=MM 
reqMM 
.MM 
QueryStringMM &
[MM& '
$strMM' +
]MM+ ,
;MM, -
}NN 
}OO 	
byteQQ 
[QQ 
]QQ 
dataSerializedQQ 
=QQ 
nullQQ  $
;QQ$ %
tryRR 
{SS 	
BinaryFormatterTT 
bfTT 
=TT  
newTT! $
BinaryFormatterTT% 4
(TT4 5
)TT5 6
;TT6 7
usingUU 
(UU 
varUU 
msUU 
=UU 
newUU 
MemoryStreamUU  ,
(UU, -
)UU- .
)UU. /
{VV 
bfWW 
.WW 
	SerializeWW 
(WW 
msWW 
,WW  
dataWW! %
)WW% &
;WW& '
dataSerializedXX 
=XX  
msXX! #
.XX# $
ToArrayXX$ +
(XX+ ,
)XX, -
;XX- .
}YY O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_75bZZ O
.ZZO P
GoodG2BSinkZZP [
(ZZ[ \
dataSerializedZZ\ j
,ZZk l
reqZZm p
,ZZp q
respZZr v
)ZZw x
;ZZx y
}[[ 	
catch\\ 
(\\ "
SerializationException\\ %
exceptSerialize\\& 5
)\\5 6
{]] 	
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ 
.^^ 
LogLevel^^ '
.^^' (
Warn^^( ,
,^^, -
$str^^. X
,^^X Y
exceptSerialize^^Z i
)^^i j
;^^j k
}__ 	
}`` 
privatecc 
staticcc 
voidcc 
GoodB2Gcc 
(cc  
HttpRequestcc  +
reqcc, /
,cc/ 0
HttpResponsecc1 =
respcc> B
)ccB C
{dd 
stringee 
dataee 
;ee 
dataff 
=ff 
$strff 
;ff 
{hh 	
ifii 
(ii 
reqii 
.ii 
QueryStringii 
[ii  
$strii  $
]ii$ %
!=ii& (
nullii) -
)ii- .
{jj 
datakk 
=kk 
reqkk 
.kk 
QueryStringkk &
[kk& '
$strkk' +
]kk+ ,
;kk, -
}ll 
}mm 	
byteoo 
[oo 
]oo 
dataSerializedoo 
=oo 
nulloo  $
;oo$ %
trypp 
{qq 	
BinaryFormatterrr 
bfrr 
=rr  
newrr! $
BinaryFormatterrr% 4
(rr4 5
)rr5 6
;rr6 7
usingss 
(ss 
varss 
msss 
=ss 
newss 
MemoryStreamss  ,
(ss, -
)ss- .
)ss. /
{tt 
bfuu 
.uu 
	Serializeuu 
(uu 
msuu 
,uu  
datauu! %
)uu% &
;uu& '
dataSerializedvv 
=vv  
msvv! #
.vv# $
ToArrayvv$ +
(vv+ ,
)vv, -
;vv- .
}ww O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_75bxx O
.xxO P
GoodB2GSinkxxP [
(xx[ \
dataSerializedxx\ j
,xxk l
reqxxm p
,xxp q
respxxr v
)xxw x
;xxx y
}yy 	
catchzz 
(zz "
SerializationExceptionzz %
exceptSerializezz& 5
)zz5 6
{{{ 	
IO|| 
.|| 
Logger|| 
.|| 
Log|| 
(|| 
NLog|| 
.|| 
LogLevel|| '
.||' (
Warn||( ,
,||, -
$str||. X
,||X Y
exceptSerialize||Z i
)||i j
;||j k
}}} 	
}~~ 
} 
} Ì?
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_75b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_75b I
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
,5 6
HttpRequest7 B
reqC F
,F G
HttpResponseH T
respU Y
)Y Z
{   
try!! 
{"" 	
string## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
string)) 
))) 
binForm)) &
.))& '
Deserialize))' 2
())2 3
	memStream))3 <
)))< =
;))= >
}** 
try++ 
{,, 
int-- 
value-- 
=-- 
int-- 
.--  
Parse--  %
(--% &
data--& *
)--* +
;--+ ,
}.. 
catch// 
(// 
FormatException// "
exceptNumberFormat//# 5
)//5 6
{00 
IO22 
.22 
Logger22 
.22 
Log22 
(22 
NLog22 "
.22" #
LogLevel22# +
.22+ ,
Warn22, 0
,220 1
exceptNumberFormat222 D
,22D E
$str22F `
+22a b
data22c g
)22g h
;22h i
}33 
}44 	
catch55 
(55 "
SerializationException55 %
exceptSerialize55& 5
)555 6
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. Y
,77Y Z
exceptSerialize77[ j
)77j k
;77k l
}88 	
}99 
public>> 

static>> 
void>> 
GoodG2BSink>> "
(>>" #
byte>># '
[>>' (
]>>( )
dataSerialized>>* 8
,>>9 :
HttpRequest>>; F
req>>G J
,>>J K
HttpResponse>>L X
resp>>Y ]
)>>] ^
{?? 
try@@ 
{AA 	
stringBB 
dataBB 
;BB 
varCC 
binFormCC 
=CC 
newCC 
BinaryFormatterCC -
(CC- .
)CC. /
;CC/ 0
usingDD 
(DD 
varDD 
	memStreamDD  
=DD! "
newDD# &
MemoryStreamDD' 3
(DD3 4
)DD4 5
)DD5 6
{EE 
	memStreamFF 
.FF 
WriteFF 
(FF  
dataSerializedFF  .
,FF. /
$numFF0 1
,FF1 2
dataSerializedFF3 A
.FFA B
LengthFFB H
)FFH I
;FFI J
	memStreamGG 
.GG 
SeekGG 
(GG 
$numGG  
,GG  !

SeekOriginGG" ,
.GG, -
BeginGG- 2
)GG2 3
;GG3 4
dataHH 
=HH 
(HH 
stringHH 
)HH 
binFormHH &
.HH& '
DeserializeHH' 2
(HH2 3
	memStreamHH3 <
)HH< =
;HH= >
}II 
tryJJ 
{KK 
intLL 
valueLL 
=LL 
intLL 
.LL  
ParseLL  %
(LL% &
dataLL& *
)LL* +
;LL+ ,
}MM 
catchNN 
(NN 
FormatExceptionNN "
exceptNumberFormatNN# 5
)NN5 6
{OO 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptNumberFormatQQ2 D
,QQD E
$strQQF `
+QQa b
dataQQc g
)QQg h
;QQh i
}RR 
}SS 	
catchTT 
(TT "
SerializationExceptionTT %
exceptSerializeTT& 5
)TT5 6
{UU 	
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV 
.VV 
LogLevelVV '
.VV' (
WarnVV( ,
,VV, -
$strVV. Y
,VVY Z
exceptSerializeVV[ j
)VVj k
;VVk l
}WW 	
}XX 
public[[ 

static[[ 
void[[ 
GoodB2GSink[[ "
([[" #
byte[[# '
[[[' (
][[( )
dataSerialized[[* 8
,[[9 :
HttpRequest[[; F
req[[G J
,[[J K
HttpResponse[[L X
resp[[Y ]
)[[] ^
{\\ 
try]] 
{^^ 	
string__ 
data__ 
;__ 
var`` 
binForm`` 
=`` 
new`` 
BinaryFormatter`` -
(``- .
)``. /
;``/ 0
usingaa 
(aa 
varaa 
	memStreamaa  
=aa! "
newaa# &
MemoryStreamaa' 3
(aa3 4
)aa4 5
)aa5 6
{bb 
	memStreamcc 
.cc 
Writecc 
(cc  
dataSerializedcc  .
,cc. /
$numcc0 1
,cc1 2
dataSerializedcc3 A
.ccA B
LengthccB H
)ccH I
;ccI J
	memStreamdd 
.dd 
Seekdd 
(dd 
$numdd  
,dd  !

SeekOrigindd" ,
.dd, -
Begindd- 2
)dd2 3
;dd3 4
dataee 
=ee 
(ee 
stringee 
)ee 
binFormee &
.ee& '
Deserializeee' 2
(ee2 3
	memStreamee3 <
)ee< =
;ee= >
}ff 
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF j
+nnk l
exceptNumberFormatnnm 
)	nn 
;
nn 
}oo 
}pp 	
catchqq 
(qq "
SerializationExceptionqq %
exceptSerializeqq& 5
)qq5 6
{rr 	
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss 
.ss 
LogLevelss '
.ss' (
Warnss( ,
,ss, -
$strss. Y
,ssY Z
exceptSerializess[ j
)ssj k
;ssk l
}tt 	
}uu 
}ww 
}xx !
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81a I
:J K
AbstractTestCaseWebL _
{ 
public 

override 
void 
Bad 
( 
HttpRequest (
req) ,
,, -
HttpResponse. :
resp; ?
)? @
{ 
string 
data 
; 
data   
=   
$str   
;   
{"" 	
if## 
(## 
req## 
.## 
QueryString## 
[##  
$str##  $
]##$ %
!=##& (
null##) -
)##- .
{$$ 
data%% 
=%% 
req%% 
.%% 
QueryString%% &
[%%& '
$str%%' +
]%%+ ,
;%%, -
}&& 
}'' 	S
GCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_base(( O

baseObject((P Z
=(([ \
new((] `S
FCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_bad	((a §
(
((§ ¨
)
((¨ ©
;
((© ª

baseObject)) 
.)) 
Action)) 
()) 
data)) 
,))  
req))! $
,))$ %
resp))& *
)))* +
;))+ ,
}** 
public-- 

override-- 
void-- 
Good-- 
(-- 
HttpRequest-- )
req--* -
,--- .
HttpResponse--/ ;
resp--< @
)--@ A
{.. 
GoodG2B// 
(// 
req// 
,// 
resp// 
)// 
;// 
GoodB2G00 
(00 
req00 
,00 
resp00 
)00 
;00 
}11 
private44 
void44 
GoodG2B44 
(44 
HttpRequest44 $
req44% (
,44( )
HttpResponse44* 6
resp447 ;
)44; <
{55 
string66 
data66 
;66 
data88 
=88 
$str88 
;88 S
GCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_base99 O

baseObject99P Z
=99[ \
new99] `W
JCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_goodG2B	99a «
(
99« ¬
)
99¬ ­
;
99­ ®

baseObject:: 
.:: 
Action:: 
(:: 
data:: 
,::  
req::! $
,::$ %
resp::& *
)::* +
;::+ ,
};; 
private>> 
void>> 
GoodB2G>> 
(>> 
HttpRequest>> $
req>>% (
,>>( )
HttpResponse>>* 6
resp>>7 ;
)>>; <
{?? 
string@@ 
data@@ 
;@@ 
dataAA 
=AA 
$strAA 
;AA 
{CC 	
ifDD 
(DD 
reqDD 
.DD 
QueryStringDD 
[DD  
$strDD  $
]DD$ %
!=DD& (
nullDD) -
)DD- .
{EE 
dataFF 
=FF 
reqFF 
.FF 
QueryStringFF &
[FF& '
$strFF' +
]FF+ ,
;FF, -
}GG 
}HH 	S
GCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_baseII O

baseObjectIIP Z
=II[ \
newII] `W
JCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_goodB2G	IIa «
(
II« ¬
)
II¬ ­
;
II­ ®

baseObjectJJ 
.JJ 
ActionJJ 
(JJ 
dataJJ 
,JJ  
reqJJ! $
,JJ$ %
respJJ& *
)JJ* +
;JJ+ ,
}KK 
}MM 
}NN 
ÓC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_bad.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class R
FCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_bad L
:M NT
GCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_base	O 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
}(( 
})) 
ÔC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_base.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
abstract 
class	 S
GCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_base V
{ 
public 

abstract 
void 
Action 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
;Q R
} 
} °
×C:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_goodB2G.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class V
JCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_goodB2G P
:Q RT
GCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_base	S 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B f
+&&g h
exceptNumberFormat&&i {
)&&{ |
;&&| }
}'' 	
}(( 
})) 
}** ¢
×C:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_goodG2B.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class V
JCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_goodG2B P
:Q RT
GCWE117_Improper_Output_Neutralization_for_Logs__QueryString_Web_81_base	S 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
,, -
HttpRequest. 9
req: =
,= >
HttpResponse? K
respL P
)P Q
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
})) 
}** Ô%
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_01.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_01 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try$$ 
{%% 
data'' 
='' 
Console'' 
.'' 
ReadLine'' '
(''' (
)''( )
;'') *
}(( 
catch)) 
()) 
IOException)) 
exceptIO)) '
)))' (
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
exceptIO++2 :
,++: ;
$str++< W
)++W X
;++X Y
},, 
}-- 	
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

override:: 
void:: 
Good:: 
(:: 
):: 
{;; 
GoodG2B<< 
(<< 
)<< 
;<< 
GoodB2G== 
(== 
)== 
;== 
}>> 
privateAA 
voidAA 
GoodG2BAA 
(AA 
)AA 
{BB 
stringCC 
dataCC 
;CC 
dataEE 
=EE 
$strEE 
;EE 
tryFF 
{GG 	
intHH 
valueHH 
=HH 
intHH 
.HH 
ParseHH !
(HH! "
dataHH" &
)HH& '
;HH' (
}II 	
catchJJ 
(JJ 
FormatExceptionJJ 
exceptNumberFormatJJ 1
)JJ1 2
{KK 	
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM 
.MM 
LogLevelMM '
.MM' (
WarnMM( ,
,MM, -
exceptNumberFormatMM. @
,MM@ A
$strMMB \
+MM] ^
dataMM_ c
)MMc d
;MMd e
}NN 	
}OO 
privateRR 
voidRR 
GoodB2GRR 
(RR 
)RR 
{SS 
stringTT 
dataTT 
;TT 
dataUU 
=UU 
$strUU 
;UU 
{VV 	
tryXX 
{YY 
data[[ 
=[[ 
Console[[ 
.[[ 
ReadLine[[ '
([[' (
)[[( )
;[[) *
}\\ 
catch]] 
(]] 
IOException]] 
exceptIO]] '
)]]' (
{^^ 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
exceptIO__2 :
,__: ;
$str__< W
)__W X
;__X Y
}`` 
}aa 	
trybb 
{cc 	
intdd 
valuedd 
=dd 
intdd 
.dd 
Parsedd !
(dd! "
datadd" &
)dd& '
;dd' (
}ee 	
catchff 
(ff 
FormatExceptionff 
exceptNumberFormatff 1
)ff1 2
{gg 	
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii 
.ii 
LogLevelii '
.ii' (
Warnii( ,
,ii, -
exceptNumberFormatii. @
,ii@ A
$striiB f
+iig h
exceptNumberFormatiii {
)ii{ |
;ii| }
}jj 	
}kk 
}mm 
}nn K
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_02.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_02 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
true!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try&& 
{'' 
data)) 
=)) 
Console)) "
.))" #
ReadLine))# +
())+ ,
))), -
;))- .
}** 
catch++ 
(++ 
IOException++ "
exceptIO++# +
)+++ ,
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptIO--6 >
,--> ?
$str--@ [
)--[ \
;--\ ]
}.. 
}// 
}00 	
else11 
{22 	
data55 
=55 
null55 
;55 
}66 	
if77 

(77 
true77 
)77 
{88 	
try99 
{:: 
int;; 
value;; 
=;; 
int;; 
.;;  
Parse;;  %
(;;% &
data;;& *
);;* +
;;;+ ,
}<< 
catch== 
(== 
FormatException== "
exceptNumberFormat==# 5
)==5 6
{>> 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
exceptNumberFormat@@2 D
,@@D E
$str@@F `
+@@a b
data@@c g
)@@g h
;@@h i
}AA 
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
ifJJ 

(JJ 
falseJJ 
)JJ 
{KK 	
dataNN 
=NN 
nullNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$strSS 
;SS 
}TT 	
ifUU 

(UU 
trueUU 
)UU 
{VV 	
tryWW 
{XX 
intYY 
valueYY 
=YY 
intYY 
.YY  
ParseYY  %
(YY% &
dataYY& *
)YY* +
;YY+ ,
}ZZ 
catch[[ 
([[ 
FormatException[[ "
exceptNumberFormat[[# 5
)[[5 6
{\\ 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
exceptNumberFormat^^2 D
,^^D E
$str^^F `
+^^a b
data^^c g
)^^g h
;^^h i
}__ 
}`` 	
}aa 
privatedd 
voiddd 
GoodG2B2dd 
(dd 
)dd 
{ee 
stringff 
dataff 
;ff 
ifgg 

(gg 
truegg 
)gg 
{hh 	
datajj 
=jj 
$strjj 
;jj 
}kk 	
elsell 
{mm 	
datapp 
=pp 
nullpp 
;pp 
}qq 	
ifrr 

(rr 
truerr 
)rr 
{ss 	
trytt 
{uu 
intvv 
valuevv 
=vv 
intvv 
.vv  
Parsevv  %
(vv% &
datavv& *
)vv* +
;vv+ ,
}ww 
catchxx 
(xx 
FormatExceptionxx "
exceptNumberFormatxx# 5
)xx5 6
{yy 
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ "
.{{" #
LogLevel{{# +
.{{+ ,
Warn{{, 0
,{{0 1
exceptNumberFormat{{2 D
,{{D E
$str{{F `
+{{a b
data{{c g
){{g h
;{{h i
}|| 
}}} 	
}~~ 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
true
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
false
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
   	
try
¡¡ 
{
¢¢ 
int
££ 
value
££ 
=
££ 
int
££ 
.
££  
Parse
££  %
(
££% &
data
££& *
)
££* +
;
££+ ,
}
¤¤ 
catch
¥¥ 
(
¥¥ 
FormatException
¥¥ " 
exceptNumberFormat
¥¥# 5
)
¥¥5 6
{
¦¦ 
IO
¨¨ 
.
¨¨ 
Logger
¨¨ 
.
¨¨ 
Log
¨¨ 
(
¨¨ 
NLog
¨¨ "
.
¨¨" #
LogLevel
¨¨# +
.
¨¨+ ,
Warn
¨¨, 0
,
¨¨0 1 
exceptNumberFormat
¨¨2 D
,
¨¨D E
$str
¨¨F j
+
¨¨k l 
exceptNumberFormat
¨¨m 
)¨¨ 
;¨¨ 
}
©© 
}
ªª 	
}
«« 
private
®® 
void
®® 
GoodB2G2
®® 
(
®® 
)
®® 
{
¯¯ 
string
°° 
data
°° 
;
°° 
if
±± 

(
±± 
true
±± 
)
±± 
{
²² 	
data
³³ 
=
³³ 
$str
³³ 
;
³³ 
{
´´ 
try
¶¶ 
{
·· 
data
¹¹ 
=
¹¹ 
Console
¹¹ "
.
¹¹" #
ReadLine
¹¹# +
(
¹¹+ ,
)
¹¹, -
;
¹¹- .
}
ºº 
catch
»» 
(
»» 
IOException
»» "
exceptIO
»»# +
)
»»+ ,
{
¼¼ 
IO
½½ 
.
½½ 
Logger
½½ 
.
½½ 
Log
½½ !
(
½½! "
NLog
½½" &
.
½½& '
LogLevel
½½' /
.
½½/ 0
Warn
½½0 4
,
½½4 5
exceptIO
½½6 >
,
½½> ?
$str
½½@ [
)
½½[ \
;
½½\ ]
}
¾¾ 
}
¿¿ 
}
ÀÀ 	
else
ÁÁ 
{
ÂÂ 	
data
ÅÅ 
=
ÅÅ 
null
ÅÅ 
;
ÅÅ 
}
ÆÆ 	
if
ÇÇ 

(
ÇÇ 
true
ÇÇ 
)
ÇÇ 
{
ÈÈ 	
try
ÉÉ 
{
ÊÊ 
int
ËË 
value
ËË 
=
ËË 
int
ËË 
.
ËË  
Parse
ËË  %
(
ËË% &
data
ËË& *
)
ËË* +
;
ËË+ ,
}
ÌÌ 
catch
ÍÍ 
(
ÍÍ 
FormatException
ÍÍ " 
exceptNumberFormat
ÍÍ# 5
)
ÍÍ5 6
{
ÎÎ 
IO
ÐÐ 
.
ÐÐ 
Logger
ÐÐ 
.
ÐÐ 
Log
ÐÐ 
(
ÐÐ 
NLog
ÐÐ "
.
ÐÐ" #
LogLevel
ÐÐ# +
.
ÐÐ+ ,
Warn
ÐÐ, 0
,
ÐÐ0 1 
exceptNumberFormat
ÐÐ2 D
,
ÐÐD E
$str
ÐÐF j
+
ÐÐk l 
exceptNumberFormat
ÐÐm 
)ÐÐ 
;ÐÐ 
}
ÑÑ 
}
ÒÒ 	
}
ÓÓ 
public
ÕÕ 

override
ÕÕ 
void
ÕÕ 
Good
ÕÕ 
(
ÕÕ 
)
ÕÕ 
{
ÖÖ 
GoodG2B1
×× 
(
×× 
)
×× 
;
×× 
GoodG2B2
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
GoodB2G1
ÙÙ 
(
ÙÙ 
)
ÙÙ 
;
ÙÙ 
GoodB2G2
ÚÚ 
(
ÚÚ 
)
ÚÚ 
;
ÚÚ 
}
ÛÛ 
}ÝÝ 
}ÞÞ N
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_03.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_03 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
$num!! 
==!! 
$num!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try&& 
{'' 
data)) 
=)) 
Console)) "
.))" #
ReadLine))# +
())+ ,
))), -
;))- .
}** 
catch++ 
(++ 
IOException++ "
exceptIO++# +
)+++ ,
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptIO--6 >
,--> ?
$str--@ [
)--[ \
;--\ ]
}.. 
}// 
}00 	
else11 
{22 	
data55 
=55 
null55 
;55 
}66 	
if77 

(77 
$num77 
==77 
$num77 
)77 
{88 	
try99 
{:: 
int;; 
value;; 
=;; 
int;; 
.;;  
Parse;;  %
(;;% &
data;;& *
);;* +
;;;+ ,
}<< 
catch== 
(== 
FormatException== "
exceptNumberFormat==# 5
)==5 6
{>> 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
exceptNumberFormat@@2 D
,@@D E
$str@@F `
+@@a b
data@@c g
)@@g h
;@@h i
}AA 
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
ifJJ 

(JJ 
$numJJ 
!=JJ 
$numJJ 
)JJ 
{KK 	
dataNN 
=NN 
nullNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$strSS 
;SS 
}TT 	
ifUU 

(UU 
$numUU 
==UU 
$numUU 
)UU 
{VV 	
tryWW 
{XX 
intYY 
valueYY 
=YY 
intYY 
.YY  
ParseYY  %
(YY% &
dataYY& *
)YY* +
;YY+ ,
}ZZ 
catch[[ 
([[ 
FormatException[[ "
exceptNumberFormat[[# 5
)[[5 6
{\\ 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
exceptNumberFormat^^2 D
,^^D E
$str^^F `
+^^a b
data^^c g
)^^g h
;^^h i
}__ 
}`` 	
}aa 
privatedd 
voiddd 
GoodG2B2dd 
(dd 
)dd 
{ee 
stringff 
dataff 
;ff 
ifgg 

(gg 
$numgg 
==gg 
$numgg 
)gg 
{hh 	
datajj 
=jj 
$strjj 
;jj 
}kk 	
elsell 
{mm 	
datapp 
=pp 
nullpp 
;pp 
}qq 	
ifrr 

(rr 
$numrr 
==rr 
$numrr 
)rr 
{ss 	
trytt 
{uu 
intvv 
valuevv 
=vv 
intvv 
.vv  
Parsevv  %
(vv% &
datavv& *
)vv* +
;vv+ ,
}ww 
catchxx 
(xx 
FormatExceptionxx "
exceptNumberFormatxx# 5
)xx5 6
{yy 
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ "
.{{" #
LogLevel{{# +
.{{+ ,
Warn{{, 0
,{{0 1
exceptNumberFormat{{2 D
,{{D E
$str{{F `
+{{a b
data{{c g
){{g h
;{{h i
}|| 
}}} 	
}~~ 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
$num
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
   	
try
¡¡ 
{
¢¢ 
int
££ 
value
££ 
=
££ 
int
££ 
.
££  
Parse
££  %
(
££% &
data
££& *
)
££* +
;
££+ ,
}
¤¤ 
catch
¥¥ 
(
¥¥ 
FormatException
¥¥ " 
exceptNumberFormat
¥¥# 5
)
¥¥5 6
{
¦¦ 
IO
¨¨ 
.
¨¨ 
Logger
¨¨ 
.
¨¨ 
Log
¨¨ 
(
¨¨ 
NLog
¨¨ "
.
¨¨" #
LogLevel
¨¨# +
.
¨¨+ ,
Warn
¨¨, 0
,
¨¨0 1 
exceptNumberFormat
¨¨2 D
,
¨¨D E
$str
¨¨F j
+
¨¨k l 
exceptNumberFormat
¨¨m 
)¨¨ 
;¨¨ 
}
©© 
}
ªª 	
}
«« 
private
®® 
void
®® 
GoodB2G2
®® 
(
®® 
)
®® 
{
¯¯ 
string
°° 
data
°° 
;
°° 
if
±± 

(
±± 
$num
±± 
==
±± 
$num
±± 
)
±± 
{
²² 	
data
³³ 
=
³³ 
$str
³³ 
;
³³ 
{
´´ 
try
¶¶ 
{
·· 
data
¹¹ 
=
¹¹ 
Console
¹¹ "
.
¹¹" #
ReadLine
¹¹# +
(
¹¹+ ,
)
¹¹, -
;
¹¹- .
}
ºº 
catch
»» 
(
»» 
IOException
»» "
exceptIO
»»# +
)
»»+ ,
{
¼¼ 
IO
½½ 
.
½½ 
Logger
½½ 
.
½½ 
Log
½½ !
(
½½! "
NLog
½½" &
.
½½& '
LogLevel
½½' /
.
½½/ 0
Warn
½½0 4
,
½½4 5
exceptIO
½½6 >
,
½½> ?
$str
½½@ [
)
½½[ \
;
½½\ ]
}
¾¾ 
}
¿¿ 
}
ÀÀ 	
else
ÁÁ 
{
ÂÂ 	
data
ÅÅ 
=
ÅÅ 
null
ÅÅ 
;
ÅÅ 
}
ÆÆ 	
if
ÇÇ 

(
ÇÇ 
$num
ÇÇ 
==
ÇÇ 
$num
ÇÇ 
)
ÇÇ 
{
ÈÈ 	
try
ÉÉ 
{
ÊÊ 
int
ËË 
value
ËË 
=
ËË 
int
ËË 
.
ËË  
Parse
ËË  %
(
ËË% &
data
ËË& *
)
ËË* +
;
ËË+ ,
}
ÌÌ 
catch
ÍÍ 
(
ÍÍ 
FormatException
ÍÍ " 
exceptNumberFormat
ÍÍ# 5
)
ÍÍ5 6
{
ÎÎ 
IO
ÐÐ 
.
ÐÐ 
Logger
ÐÐ 
.
ÐÐ 
Log
ÐÐ 
(
ÐÐ 
NLog
ÐÐ "
.
ÐÐ" #
LogLevel
ÐÐ# +
.
ÐÐ+ ,
Warn
ÐÐ, 0
,
ÐÐ0 1 
exceptNumberFormat
ÐÐ2 D
,
ÐÐD E
$str
ÐÐF j
+
ÐÐk l 
exceptNumberFormat
ÐÐm 
)ÐÐ 
;ÐÐ 
}
ÑÑ 
}
ÒÒ 	
}
ÓÓ 
public
ÕÕ 

override
ÕÕ 
void
ÕÕ 
Good
ÕÕ 
(
ÕÕ 
)
ÕÕ 
{
ÖÖ 
GoodG2B1
×× 
(
×× 
)
×× 
;
×× 
GoodG2B2
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
GoodB2G1
ÙÙ 
(
ÙÙ 
)
ÙÙ 
;
ÙÙ 
GoodB2G2
ÚÚ 
(
ÚÚ 
)
ÚÚ 
;
ÚÚ 
}
ÛÛ 
}ÝÝ 
}ÞÞ îN
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_04.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_04 A
:B C
AbstractTestCaseD T
{ 
private"" 
const"" 
bool"" 
PRIVATE_CONST_TRUE"" )
=""* +
true"", 0
;""0 1
private## 
const## 
bool## 
PRIVATE_CONST_FALSE## *
=##+ ,
false##- 2
;##2 3
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
string'' 
data'' 
;'' 
if(( 

((( 
PRIVATE_CONST_TRUE(( 
)(( 
{)) 	
data** 
=** 
$str** 
;** 
{++ 
try-- 
{.. 
data00 
=00 
Console00 "
.00" #
ReadLine00# +
(00+ ,
)00, -
;00- .
}11 
catch22 
(22 
IOException22 "
exceptIO22# +
)22+ ,
{33 
IO44 
.44 
Logger44 
.44 
Log44 !
(44! "
NLog44" &
.44& '
LogLevel44' /
.44/ 0
Warn440 4
,444 5
exceptIO446 >
,44> ?
$str44@ [
)44[ \
;44\ ]
}55 
}66 
}77 	
else88 
{99 	
data<< 
=<< 
null<< 
;<< 
}== 	
if>> 

(>> 
PRIVATE_CONST_TRUE>> 
)>> 
{?? 	
try@@ 
{AA 
intBB 
valueBB 
=BB 
intBB 
.BB  
ParseBB  %
(BB% &
dataBB& *
)BB* +
;BB+ ,
}CC 
catchDD 
(DD 
FormatExceptionDD "
exceptNumberFormatDD# 5
)DD5 6
{EE 
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG "
.GG" #
LogLevelGG# +
.GG+ ,
WarnGG, 0
,GG0 1
exceptNumberFormatGG2 D
,GGD E
$strGGF `
+GGa b
dataGGc g
)GGg h
;GGh i
}HH 
}II 	
}JJ 
privateNN 
voidNN 
GoodG2B1NN 
(NN 
)NN 
{OO 
stringPP 
dataPP 
;PP 
ifQQ 

(QQ 
PRIVATE_CONST_FALSEQQ 
)QQ  
{RR 	
dataUU 
=UU 
nullUU 
;UU 
}VV 	
elseWW 
{XX 	
dataZZ 
=ZZ 
$strZZ 
;ZZ 
}[[ 	
if\\ 

(\\ 
PRIVATE_CONST_TRUE\\ 
)\\ 
{]] 	
try^^ 
{__ 
int`` 
value`` 
=`` 
int`` 
.``  
Parse``  %
(``% &
data``& *
)``* +
;``+ ,
}aa 
catchbb 
(bb 
FormatExceptionbb "
exceptNumberFormatbb# 5
)bb5 6
{cc 
IOee 
.ee 
Loggeree 
.ee 
Logee 
(ee 
NLogee "
.ee" #
LogLevelee# +
.ee+ ,
Warnee, 0
,ee0 1
exceptNumberFormatee2 D
,eeD E
$streeF `
+eea b
dataeec g
)eeg h
;eeh i
}ff 
}gg 	
}hh 
privatekk 
voidkk 
GoodG2B2kk 
(kk 
)kk 
{ll 
stringmm 
datamm 
;mm 
ifnn 

(nn 
PRIVATE_CONST_TRUEnn 
)nn 
{oo 	
dataqq 
=qq 
$strqq 
;qq 
}rr 	
elsess 
{tt 	
dataww 
=ww 
nullww 
;ww 
}xx 	
ifyy 

(yy 
PRIVATE_CONST_TRUEyy 
)yy 
{zz 	
try{{ 
{|| 
int}} 
value}} 
=}} 
int}} 
.}}  
Parse}}  %
(}}% &
data}}& *
)}}* +
;}}+ ,
}~~ 
catch 
( 
FormatException "
exceptNumberFormat# 5
)5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
   	
if
¡¡ 

(
¡¡ !
PRIVATE_CONST_FALSE
¡¡ 
)
¡¡  
{
¢¢ 	
IO
¤¤ 
.
¤¤ 
	WriteLine
¤¤ 
(
¤¤ 
$str
¤¤ /
)
¤¤/ 0
;
¤¤0 1
}
¥¥ 	
else
¦¦ 
{
§§ 	
try
¨¨ 
{
©© 
int
ªª 
value
ªª 
=
ªª 
int
ªª 
.
ªª  
Parse
ªª  %
(
ªª% &
data
ªª& *
)
ªª* +
;
ªª+ ,
}
«« 
catch
¬¬ 
(
¬¬ 
FormatException
¬¬ " 
exceptNumberFormat
¬¬# 5
)
¬¬5 6
{
­­ 
IO
¯¯ 
.
¯¯ 
Logger
¯¯ 
.
¯¯ 
Log
¯¯ 
(
¯¯ 
NLog
¯¯ "
.
¯¯" #
LogLevel
¯¯# +
.
¯¯+ ,
Warn
¯¯, 0
,
¯¯0 1 
exceptNumberFormat
¯¯2 D
,
¯¯D E
$str
¯¯F j
+
¯¯k l 
exceptNumberFormat
¯¯m 
)¯¯ 
;¯¯ 
}
°° 
}
±± 	
}
²² 
private
µµ 
void
µµ 
GoodB2G2
µµ 
(
µµ 
)
µµ 
{
¶¶ 
string
·· 
data
·· 
;
·· 
if
¸¸ 

(
¸¸  
PRIVATE_CONST_TRUE
¸¸ 
)
¸¸ 
{
¹¹ 	
data
ºº 
=
ºº 
$str
ºº 
;
ºº 
{
»» 
try
½½ 
{
¾¾ 
data
ÀÀ 
=
ÀÀ 
Console
ÀÀ "
.
ÀÀ" #
ReadLine
ÀÀ# +
(
ÀÀ+ ,
)
ÀÀ, -
;
ÀÀ- .
}
ÁÁ 
catch
ÂÂ 
(
ÂÂ 
IOException
ÂÂ "
exceptIO
ÂÂ# +
)
ÂÂ+ ,
{
ÃÃ 
IO
ÄÄ 
.
ÄÄ 
Logger
ÄÄ 
.
ÄÄ 
Log
ÄÄ !
(
ÄÄ! "
NLog
ÄÄ" &
.
ÄÄ& '
LogLevel
ÄÄ' /
.
ÄÄ/ 0
Warn
ÄÄ0 4
,
ÄÄ4 5
exceptIO
ÄÄ6 >
,
ÄÄ> ?
$str
ÄÄ@ [
)
ÄÄ[ \
;
ÄÄ\ ]
}
ÅÅ 
}
ÆÆ 
}
ÇÇ 	
else
ÈÈ 
{
ÉÉ 	
data
ÌÌ 
=
ÌÌ 
null
ÌÌ 
;
ÌÌ 
}
ÍÍ 	
if
ÎÎ 

(
ÎÎ  
PRIVATE_CONST_TRUE
ÎÎ 
)
ÎÎ 
{
ÏÏ 	
try
ÐÐ 
{
ÑÑ 
int
ÒÒ 
value
ÒÒ 
=
ÒÒ 
int
ÒÒ 
.
ÒÒ  
Parse
ÒÒ  %
(
ÒÒ% &
data
ÒÒ& *
)
ÒÒ* +
;
ÒÒ+ ,
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
FormatException
ÔÔ " 
exceptNumberFormat
ÔÔ# 5
)
ÔÔ5 6
{
ÕÕ 
IO
×× 
.
×× 
Logger
×× 
.
×× 
Log
×× 
(
×× 
NLog
×× "
.
××" #
LogLevel
××# +
.
××+ ,
Warn
××, 0
,
××0 1 
exceptNumberFormat
××2 D
,
××D E
$str
××F j
+
××k l 
exceptNumberFormat
××m 
)×× 
;×× 
}
ØØ 
}
ÙÙ 	
}
ÚÚ 
public
ÜÜ 

override
ÜÜ 
void
ÜÜ 
Good
ÜÜ 
(
ÜÜ 
)
ÜÜ 
{
ÝÝ 
GoodG2B1
ÞÞ 
(
ÞÞ 
)
ÞÞ 
;
ÞÞ 
GoodG2B2
ßß 
(
ßß 
)
ßß 
;
ßß 
GoodB2G1
àà 
(
àà 
)
àà 
;
àà 
GoodB2G2
áá 
(
áá 
)
áá 
;
áá 
}
ââ 
}ää 
}åå òM
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_05.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_05 A
:B C
AbstractTestCaseD T
{ 
private!! 
bool!! 
privateTrue!! 
=!! 
true!! #
;!!# $
private"" 
bool"" 
privateFalse"" 
="" 
false""  %
;""% &
public$$ 

override$$ 
void$$ 
Bad$$ 
($$ 
)$$ 
{%% 
string&& 
data&& 
;&& 
if'' 

('' 
privateTrue'' 
)'' 
{(( 	
data)) 
=)) 
$str)) 
;)) 
{** 
try,, 
{-- 
data// 
=// 
Console// "
.//" #
ReadLine//# +
(//+ ,
)//, -
;//- .
}00 
catch11 
(11 
IOException11 "
exceptIO11# +
)11+ ,
{22 
IO33 
.33 
Logger33 
.33 
Log33 !
(33! "
NLog33" &
.33& '
LogLevel33' /
.33/ 0
Warn330 4
,334 5
exceptIO336 >
,33> ?
$str33@ [
)33[ \
;33\ ]
}44 
}55 
}66 	
else77 
{88 	
data;; 
=;; 
null;; 
;;; 
}<< 	
if== 

(== 
privateTrue== 
)== 
{>> 	
try?? 
{@@ 
intAA 
valueAA 
=AA 
intAA 
.AA  
ParseAA  %
(AA% &
dataAA& *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
FormatExceptionCC "
exceptNumberFormatCC# 5
)CC5 6
{DD 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
exceptNumberFormatFF2 D
,FFD E
$strFFF `
+FFa b
dataFFc g
)FFg h
;FFh i
}GG 
}HH 	
}II 
privateMM 
voidMM 
GoodG2B1MM 
(MM 
)MM 
{NN 
stringOO 
dataOO 
;OO 
ifPP 

(PP 
privateFalsePP 
)PP 
{QQ 	
dataTT 
=TT 
nullTT 
;TT 
}UU 	
elseVV 
{WW 	
dataYY 
=YY 
$strYY 
;YY 
}ZZ 	
if[[ 

([[ 
privateTrue[[ 
)[[ 
{\\ 	
try]] 
{^^ 
int__ 
value__ 
=__ 
int__ 
.__  
Parse__  %
(__% &
data__& *
)__* +
;__+ ,
}`` 
catchaa 
(aa 
FormatExceptionaa "
exceptNumberFormataa# 5
)aa5 6
{bb 
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd "
.dd" #
LogLeveldd# +
.dd+ ,
Warndd, 0
,dd0 1
exceptNumberFormatdd2 D
,ddD E
$strddF `
+dda b
dataddc g
)ddg h
;ddh i
}ee 
}ff 	
}gg 
privatejj 
voidjj 
GoodG2B2jj 
(jj 
)jj 
{kk 
stringll 
datall 
;ll 
ifmm 

(mm 
privateTruemm 
)mm 
{nn 	
datapp 
=pp 
$strpp 
;pp 
}qq 	
elserr 
{ss 	
datavv 
=vv 
nullvv 
;vv 
}ww 	
ifxx 

(xx 
privateTruexx 
)xx 
{yy 	
tryzz 
{{{ 
int|| 
value|| 
=|| 
int|| 
.||  
Parse||  %
(||% &
data||& *
)||* +
;||+ ,
}}} 
catch~~ 
(~~ 
FormatException~~ "
exceptNumberFormat~~# 5
)~~5 6
{ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
   

(
   
privateFalse
   
)
   
{
¡¡ 	
IO
££ 
.
££ 
	WriteLine
££ 
(
££ 
$str
££ /
)
££/ 0
;
££0 1
}
¤¤ 	
else
¥¥ 
{
¦¦ 	
try
§§ 
{
¨¨ 
int
©© 
value
©© 
=
©© 
int
©© 
.
©©  
Parse
©©  %
(
©©% &
data
©©& *
)
©©* +
;
©©+ ,
}
ªª 
catch
«« 
(
«« 
FormatException
«« " 
exceptNumberFormat
««# 5
)
««5 6
{
¬¬ 
IO
®® 
.
®® 
Logger
®® 
.
®® 
Log
®® 
(
®® 
NLog
®® "
.
®®" #
LogLevel
®®# +
.
®®+ ,
Warn
®®, 0
,
®®0 1 
exceptNumberFormat
®®2 D
,
®®D E
$str
®®F j
+
®®k l 
exceptNumberFormat
®®m 
)®® 
;®® 
}
¯¯ 
}
°° 	
}
±± 
private
´´ 
void
´´ 
GoodB2G2
´´ 
(
´´ 
)
´´ 
{
µµ 
string
¶¶ 
data
¶¶ 
;
¶¶ 
if
·· 

(
·· 
privateTrue
·· 
)
·· 
{
¸¸ 	
data
¹¹ 
=
¹¹ 
$str
¹¹ 
;
¹¹ 
{
ºº 
try
¼¼ 
{
½½ 
data
¿¿ 
=
¿¿ 
Console
¿¿ "
.
¿¿" #
ReadLine
¿¿# +
(
¿¿+ ,
)
¿¿, -
;
¿¿- .
}
ÀÀ 
catch
ÁÁ 
(
ÁÁ 
IOException
ÁÁ "
exceptIO
ÁÁ# +
)
ÁÁ+ ,
{
ÂÂ 
IO
ÃÃ 
.
ÃÃ 
Logger
ÃÃ 
.
ÃÃ 
Log
ÃÃ !
(
ÃÃ! "
NLog
ÃÃ" &
.
ÃÃ& '
LogLevel
ÃÃ' /
.
ÃÃ/ 0
Warn
ÃÃ0 4
,
ÃÃ4 5
exceptIO
ÃÃ6 >
,
ÃÃ> ?
$str
ÃÃ@ [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÄÄ 
}
ÅÅ 
}
ÆÆ 	
else
ÇÇ 
{
ÈÈ 	
data
ËË 
=
ËË 
null
ËË 
;
ËË 
}
ÌÌ 	
if
ÍÍ 

(
ÍÍ 
privateTrue
ÍÍ 
)
ÍÍ 
{
ÎÎ 	
try
ÏÏ 
{
ÐÐ 
int
ÑÑ 
value
ÑÑ 
=
ÑÑ 
int
ÑÑ 
.
ÑÑ  
Parse
ÑÑ  %
(
ÑÑ% &
data
ÑÑ& *
)
ÑÑ* +
;
ÑÑ+ ,
}
ÒÒ 
catch
ÓÓ 
(
ÓÓ 
FormatException
ÓÓ " 
exceptNumberFormat
ÓÓ# 5
)
ÓÓ5 6
{
ÔÔ 
IO
ÖÖ 
.
ÖÖ 
Logger
ÖÖ 
.
ÖÖ 
Log
ÖÖ 
(
ÖÖ 
NLog
ÖÖ "
.
ÖÖ" #
LogLevel
ÖÖ# +
.
ÖÖ+ ,
Warn
ÖÖ, 0
,
ÖÖ0 1 
exceptNumberFormat
ÖÖ2 D
,
ÖÖD E
$str
ÖÖF j
+
ÖÖk l 
exceptNumberFormat
ÖÖm 
)ÖÖ 
;ÖÖ 
}
×× 
}
ØØ 	
}
ÙÙ 
public
ÛÛ 

override
ÛÛ 
void
ÛÛ 
Good
ÛÛ 
(
ÛÛ 
)
ÛÛ 
{
ÜÜ 
GoodG2B1
ÝÝ 
(
ÝÝ 
)
ÝÝ 
;
ÝÝ 
GoodG2B2
ÞÞ 
(
ÞÞ 
)
ÞÞ 
;
ÞÞ 
GoodB2G1
ßß 
(
ßß 
)
ßß 
;
ßß 
GoodB2G2
àà 
(
àà 
)
àà 
;
àà 
}
áá 
}ãã 
}ää ÁP
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_06.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_06 A
:B C
AbstractTestCaseD T
{ 
private!! 
const!! 
int!! 
PRIVATE_CONST_FIVE!! (
=!!) *
$num!!+ ,
;!!, -
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
string%% 
data%% 
;%% 
if&& 

(&& 
PRIVATE_CONST_FIVE&& 
==&&  
$num&&  !
)&&! "
{'' 	
data(( 
=(( 
$str(( 
;(( 
{)) 
try++ 
{,, 
data.. 
=.. 
Console.. "
..." #
ReadLine..# +
(..+ ,
).., -
;..- .
}// 
catch00 
(00 
IOException00 "
exceptIO00# +
)00+ ,
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptIO226 >
,22> ?
$str22@ [
)22[ \
;22\ ]
}33 
}44 
}55 	
else66 
{77 	
data:: 
=:: 
null:: 
;:: 
};; 	
if<< 

(<< 
PRIVATE_CONST_FIVE<< 
==<<  
$num<<  !
)<<! "
{== 	
try>> 
{?? 
int@@ 
value@@ 
=@@ 
int@@ 
.@@  
Parse@@  %
(@@% &
data@@& *
)@@* +
;@@+ ,
}AA 
catchBB 
(BB 
FormatExceptionBB "
exceptNumberFormatBB# 5
)BB5 6
{CC 
IOEE 
.EE 
LoggerEE 
.EE 
LogEE 
(EE 
NLogEE "
.EE" #
LogLevelEE# +
.EE+ ,
WarnEE, 0
,EE0 1
exceptNumberFormatEE2 D
,EED E
$strEEF `
+EEa b
dataEEc g
)EEg h
;EEh i
}FF 
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
stringNN 
dataNN 
;NN 
ifOO 

(OO 
PRIVATE_CONST_FIVEOO 
!=OO  
$numOO  !
)OO! "
{PP 	
dataSS 
=SS 
nullSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$strXX 
;XX 
}YY 	
ifZZ 

(ZZ 
PRIVATE_CONST_FIVEZZ 
==ZZ  
$numZZ  !
)ZZ! "
{[[ 	
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
}ee 	
}ff 
privateii 
voidii 
GoodG2B2ii 
(ii 
)ii 
{jj 
stringkk 
datakk 
;kk 
ifll 

(ll 
PRIVATE_CONST_FIVEll 
==ll  
$numll  !
)ll! "
{mm 	
dataoo 
=oo 
$stroo 
;oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
ifww 

(ww 
PRIVATE_CONST_FIVEww 
==ww  
$numww  !
)ww! "
{xx 	
tryyy 
{zz 
int{{ 
value{{ 
={{ 
int{{ 
.{{  
Parse{{  %
({{% &
data{{& *
){{* +
;{{+ ,
}|| 
catch}} 
(}} 
FormatException}} "
exceptNumberFormat}}# 5
)}}5 6
{~~ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_FIVE
 
==
  
$num
  !
)
! "
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
  
PRIVATE_CONST_FIVE
 
!=
  
$num
  !
)
! "
{
   	
IO
¢¢ 
.
¢¢ 
	WriteLine
¢¢ 
(
¢¢ 
$str
¢¢ /
)
¢¢/ 0
;
¢¢0 1
}
££ 	
else
¤¤ 
{
¥¥ 	
try
¦¦ 
{
§§ 
int
¨¨ 
value
¨¨ 
=
¨¨ 
int
¨¨ 
.
¨¨  
Parse
¨¨  %
(
¨¨% &
data
¨¨& *
)
¨¨* +
;
¨¨+ ,
}
©© 
catch
ªª 
(
ªª 
FormatException
ªª " 
exceptNumberFormat
ªª# 5
)
ªª5 6
{
«« 
IO
­­ 
.
­­ 
Logger
­­ 
.
­­ 
Log
­­ 
(
­­ 
NLog
­­ "
.
­­" #
LogLevel
­­# +
.
­­+ ,
Warn
­­, 0
,
­­0 1 
exceptNumberFormat
­­2 D
,
­­D E
$str
­­F j
+
­­k l 
exceptNumberFormat
­­m 
)­­ 
;­­ 
}
®® 
}
¯¯ 	
}
°° 
private
³³ 
void
³³ 
GoodB2G2
³³ 
(
³³ 
)
³³ 
{
´´ 
string
µµ 
data
µµ 
;
µµ 
if
¶¶ 

(
¶¶  
PRIVATE_CONST_FIVE
¶¶ 
==
¶¶  
$num
¶¶  !
)
¶¶! "
{
·· 	
data
¸¸ 
=
¸¸ 
$str
¸¸ 
;
¸¸ 
{
¹¹ 
try
»» 
{
¼¼ 
data
¾¾ 
=
¾¾ 
Console
¾¾ "
.
¾¾" #
ReadLine
¾¾# +
(
¾¾+ ,
)
¾¾, -
;
¾¾- .
}
¿¿ 
catch
ÀÀ 
(
ÀÀ 
IOException
ÀÀ "
exceptIO
ÀÀ# +
)
ÀÀ+ ,
{
ÁÁ 
IO
ÂÂ 
.
ÂÂ 
Logger
ÂÂ 
.
ÂÂ 
Log
ÂÂ !
(
ÂÂ! "
NLog
ÂÂ" &
.
ÂÂ& '
LogLevel
ÂÂ' /
.
ÂÂ/ 0
Warn
ÂÂ0 4
,
ÂÂ4 5
exceptIO
ÂÂ6 >
,
ÂÂ> ?
$str
ÂÂ@ [
)
ÂÂ[ \
;
ÂÂ\ ]
}
ÃÃ 
}
ÄÄ 
}
ÅÅ 	
else
ÆÆ 
{
ÇÇ 	
data
ÊÊ 
=
ÊÊ 
null
ÊÊ 
;
ÊÊ 
}
ËË 	
if
ÌÌ 

(
ÌÌ  
PRIVATE_CONST_FIVE
ÌÌ 
==
ÌÌ  
$num
ÌÌ  !
)
ÌÌ! "
{
ÍÍ 	
try
ÎÎ 
{
ÏÏ 
int
ÐÐ 
value
ÐÐ 
=
ÐÐ 
int
ÐÐ 
.
ÐÐ  
Parse
ÐÐ  %
(
ÐÐ% &
data
ÐÐ& *
)
ÐÐ* +
;
ÐÐ+ ,
}
ÑÑ 
catch
ÒÒ 
(
ÒÒ 
FormatException
ÒÒ " 
exceptNumberFormat
ÒÒ# 5
)
ÒÒ5 6
{
ÓÓ 
IO
ÕÕ 
.
ÕÕ 
Logger
ÕÕ 
.
ÕÕ 
Log
ÕÕ 
(
ÕÕ 
NLog
ÕÕ "
.
ÕÕ" #
LogLevel
ÕÕ# +
.
ÕÕ+ ,
Warn
ÕÕ, 0
,
ÕÕ0 1 
exceptNumberFormat
ÕÕ2 D
,
ÕÕD E
$str
ÕÕF j
+
ÕÕk l 
exceptNumberFormat
ÕÕm 
)ÕÕ 
;ÕÕ 
}
ÖÖ 
}
×× 	
}
ØØ 
public
ÚÚ 

override
ÚÚ 
void
ÚÚ 
Good
ÚÚ 
(
ÚÚ 
)
ÚÚ 
{
ÛÛ 
GoodG2B1
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
GoodG2B2
ÝÝ 
(
ÝÝ 
)
ÝÝ 
;
ÝÝ 
GoodB2G1
ÞÞ 
(
ÞÞ 
)
ÞÞ 
;
ÞÞ 
GoodB2G2
ßß 
(
ßß 
)
ßß 
;
ßß 
}
àà 
}ââ 
}ãã áO
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_07.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_07 A
:B C
AbstractTestCaseD T
{ 
private!! 
int!! 
privateFive!! 
=!! 
$num!! 
;!!  
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
string%% 
data%% 
;%% 
if&& 

(&& 
privateFive&& 
==&& 
$num&& 
)&& 
{'' 	
data(( 
=(( 
$str(( 
;(( 
{)) 
try++ 
{,, 
data.. 
=.. 
Console.. "
..." #
ReadLine..# +
(..+ ,
).., -
;..- .
}// 
catch00 
(00 
IOException00 "
exceptIO00# +
)00+ ,
{11 
IO22 
.22 
Logger22 
.22 
Log22 !
(22! "
NLog22" &
.22& '
LogLevel22' /
.22/ 0
Warn220 4
,224 5
exceptIO226 >
,22> ?
$str22@ [
)22[ \
;22\ ]
}33 
}44 
}55 	
else66 
{77 	
data:: 
=:: 
null:: 
;:: 
};; 	
if<< 

(<< 
privateFive<< 
==<< 
$num<< 
)<< 
{== 	
try>> 
{?? 
int@@ 
value@@ 
=@@ 
int@@ 
.@@  
Parse@@  %
(@@% &
data@@& *
)@@* +
;@@+ ,
}AA 
catchBB 
(BB 
FormatExceptionBB "
exceptNumberFormatBB# 5
)BB5 6
{CC 
IOEE 
.EE 
LoggerEE 
.EE 
LogEE 
(EE 
NLogEE "
.EE" #
LogLevelEE# +
.EE+ ,
WarnEE, 0
,EE0 1
exceptNumberFormatEE2 D
,EED E
$strEEF `
+EEa b
dataEEc g
)EEg h
;EEh i
}FF 
}GG 	
}HH 
privateLL 
voidLL 
GoodG2B1LL 
(LL 
)LL 
{MM 
stringNN 
dataNN 
;NN 
ifOO 

(OO 
privateFiveOO 
!=OO 
$numOO 
)OO 
{PP 	
dataSS 
=SS 
nullSS 
;SS 
}TT 	
elseUU 
{VV 	
dataXX 
=XX 
$strXX 
;XX 
}YY 	
ifZZ 

(ZZ 
privateFiveZZ 
==ZZ 
$numZZ 
)ZZ 
{[[ 	
try\\ 
{]] 
int^^ 
value^^ 
=^^ 
int^^ 
.^^  
Parse^^  %
(^^% &
data^^& *
)^^* +
;^^+ ,
}__ 
catch`` 
(`` 
FormatException`` "
exceptNumberFormat``# 5
)``5 6
{aa 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptNumberFormatcc2 D
,ccD E
$strccF `
+cca b
dataccc g
)ccg h
;cch i
}dd 
}ee 	
}ff 
privateii 
voidii 
GoodG2B2ii 
(ii 
)ii 
{jj 
stringkk 
datakk 
;kk 
ifll 

(ll 
privateFivell 
==ll 
$numll 
)ll 
{mm 	
dataoo 
=oo 
$stroo 
;oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
ifww 

(ww 
privateFiveww 
==ww 
$numww 
)ww 
{xx 	
tryyy 
{zz 
int{{ 
value{{ 
={{ 
int{{ 
.{{  
Parse{{  %
({{% &
data{{& *
){{* +
;{{+ ,
}|| 
catch}} 
(}} 
FormatException}} "
exceptNumberFormat}}# 5
)}}5 6
{~~ 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
privateFive
 
!=
 
$num
 
)
 
{
   	
IO
¢¢ 
.
¢¢ 
	WriteLine
¢¢ 
(
¢¢ 
$str
¢¢ /
)
¢¢/ 0
;
¢¢0 1
}
££ 	
else
¤¤ 
{
¥¥ 	
try
¦¦ 
{
§§ 
int
¨¨ 
value
¨¨ 
=
¨¨ 
int
¨¨ 
.
¨¨  
Parse
¨¨  %
(
¨¨% &
data
¨¨& *
)
¨¨* +
;
¨¨+ ,
}
©© 
catch
ªª 
(
ªª 
FormatException
ªª " 
exceptNumberFormat
ªª# 5
)
ªª5 6
{
«« 
IO
­­ 
.
­­ 
Logger
­­ 
.
­­ 
Log
­­ 
(
­­ 
NLog
­­ "
.
­­" #
LogLevel
­­# +
.
­­+ ,
Warn
­­, 0
,
­­0 1 
exceptNumberFormat
­­2 D
,
­­D E
$str
­­F j
+
­­k l 
exceptNumberFormat
­­m 
)­­ 
;­­ 
}
®® 
}
¯¯ 	
}
°° 
private
³³ 
void
³³ 
GoodB2G2
³³ 
(
³³ 
)
³³ 
{
´´ 
string
µµ 
data
µµ 
;
µµ 
if
¶¶ 

(
¶¶ 
privateFive
¶¶ 
==
¶¶ 
$num
¶¶ 
)
¶¶ 
{
·· 	
data
¸¸ 
=
¸¸ 
$str
¸¸ 
;
¸¸ 
{
¹¹ 
try
»» 
{
¼¼ 
data
¾¾ 
=
¾¾ 
Console
¾¾ "
.
¾¾" #
ReadLine
¾¾# +
(
¾¾+ ,
)
¾¾, -
;
¾¾- .
}
¿¿ 
catch
ÀÀ 
(
ÀÀ 
IOException
ÀÀ "
exceptIO
ÀÀ# +
)
ÀÀ+ ,
{
ÁÁ 
IO
ÂÂ 
.
ÂÂ 
Logger
ÂÂ 
.
ÂÂ 
Log
ÂÂ !
(
ÂÂ! "
NLog
ÂÂ" &
.
ÂÂ& '
LogLevel
ÂÂ' /
.
ÂÂ/ 0
Warn
ÂÂ0 4
,
ÂÂ4 5
exceptIO
ÂÂ6 >
,
ÂÂ> ?
$str
ÂÂ@ [
)
ÂÂ[ \
;
ÂÂ\ ]
}
ÃÃ 
}
ÄÄ 
}
ÅÅ 	
else
ÆÆ 
{
ÇÇ 	
data
ÊÊ 
=
ÊÊ 
null
ÊÊ 
;
ÊÊ 
}
ËË 	
if
ÌÌ 

(
ÌÌ 
privateFive
ÌÌ 
==
ÌÌ 
$num
ÌÌ 
)
ÌÌ 
{
ÍÍ 	
try
ÎÎ 
{
ÏÏ 
int
ÐÐ 
value
ÐÐ 
=
ÐÐ 
int
ÐÐ 
.
ÐÐ  
Parse
ÐÐ  %
(
ÐÐ% &
data
ÐÐ& *
)
ÐÐ* +
;
ÐÐ+ ,
}
ÑÑ 
catch
ÒÒ 
(
ÒÒ 
FormatException
ÒÒ " 
exceptNumberFormat
ÒÒ# 5
)
ÒÒ5 6
{
ÓÓ 
IO
ÕÕ 
.
ÕÕ 
Logger
ÕÕ 
.
ÕÕ 
Log
ÕÕ 
(
ÕÕ 
NLog
ÕÕ "
.
ÕÕ" #
LogLevel
ÕÕ# +
.
ÕÕ+ ,
Warn
ÕÕ, 0
,
ÕÕ0 1 
exceptNumberFormat
ÕÕ2 D
,
ÕÕD E
$str
ÕÕF j
+
ÕÕk l 
exceptNumberFormat
ÕÕm 
)ÕÕ 
;ÕÕ 
}
ÖÖ 
}
×× 	
}
ØØ 
public
ÚÚ 

override
ÚÚ 
void
ÚÚ 
Good
ÚÚ 
(
ÚÚ 
)
ÚÚ 
{
ÛÛ 
GoodG2B1
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
GoodG2B2
ÝÝ 
(
ÝÝ 
)
ÝÝ 
;
ÝÝ 
GoodB2G1
ÞÞ 
(
ÞÞ 
)
ÞÞ 
;
ÞÞ 
GoodB2G2
ßß 
(
ßß 
)
ßß 
;
ßß 
}
àà 
}ââ 
}ãã ÔR
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_08.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_08 A
:B C
AbstractTestCaseD T
{ 
private!! 
static!! 
bool!! 
PrivateReturnsTrue!! *
(!!* +
)!!+ ,
{"" 
return## 
true## 
;## 
}$$ 
private&& 
static&& 
bool&& 
PrivateReturnsFalse&& +
(&&+ ,
)&&, -
{'' 
return(( 
false(( 
;(( 
})) 
public++ 

override++ 
void++ 
Bad++ 
(++ 
)++ 
{,, 
string-- 
data-- 
;-- 
if.. 

(.. 
PrivateReturnsTrue.. 
(.. 
)..  
)..  !
{// 	
data00 
=00 
$str00 
;00 
{11 
try33 
{44 
data66 
=66 
Console66 "
.66" #
ReadLine66# +
(66+ ,
)66, -
;66- .
}77 
catch88 
(88 
IOException88 "
exceptIO88# +
)88+ ,
{99 
IO:: 
.:: 
Logger:: 
.:: 
Log:: !
(::! "
NLog::" &
.::& '
LogLevel::' /
.::/ 0
Warn::0 4
,::4 5
exceptIO::6 >
,::> ?
$str::@ [
)::[ \
;::\ ]
};; 
}<< 
}== 	
else>> 
{?? 	
dataBB 
=BB 
nullBB 
;BB 
}CC 	
ifDD 

(DD 
PrivateReturnsTrueDD 
(DD 
)DD  
)DD  !
{EE 	
tryFF 
{GG 
intHH 
valueHH 
=HH 
intHH 
.HH  
ParseHH  %
(HH% &
dataHH& *
)HH* +
;HH+ ,
}II 
catchJJ 
(JJ 
FormatExceptionJJ "
exceptNumberFormatJJ# 5
)JJ5 6
{KK 
IOMM 
.MM 
LoggerMM 
.MM 
LogMM 
(MM 
NLogMM "
.MM" #
LogLevelMM# +
.MM+ ,
WarnMM, 0
,MM0 1
exceptNumberFormatMM2 D
,MMD E
$strMMF `
+MMa b
dataMMc g
)MMg h
;MMh i
}NN 
}OO 	
}PP 
privateTT 
voidTT 
GoodG2B1TT 
(TT 
)TT 
{UU 
stringVV 
dataVV 
;VV 
ifWW 

(WW 
PrivateReturnsFalseWW 
(WW  
)WW  !
)WW! "
{XX 	
data[[ 
=[[ 
null[[ 
;[[ 
}\\ 	
else]] 
{^^ 	
data`` 
=`` 
$str`` 
;`` 
}aa 	
ifbb 

(bb 
PrivateReturnsTruebb 
(bb 
)bb  
)bb  !
{cc 	
trydd 
{ee 
intff 
valueff 
=ff 
intff 
.ff  
Parseff  %
(ff% &
dataff& *
)ff* +
;ff+ ,
}gg 
catchhh 
(hh 
FormatExceptionhh "
exceptNumberFormathh# 5
)hh5 6
{ii 
IOkk 
.kk 
Loggerkk 
.kk 
Logkk 
(kk 
NLogkk "
.kk" #
LogLevelkk# +
.kk+ ,
Warnkk, 0
,kk0 1
exceptNumberFormatkk2 D
,kkD E
$strkkF `
+kka b
datakkc g
)kkg h
;kkh i
}ll 
}mm 	
}nn 
privateqq 
voidqq 
GoodG2B2qq 
(qq 
)qq 
{rr 
stringss 
datass 
;ss 
iftt 

(tt 
PrivateReturnsTruett 
(tt 
)tt  
)tt  !
{uu 	
dataww 
=ww 
$strww 
;ww 
}xx 	
elseyy 
{zz 	
data}} 
=}} 
null}} 
;}} 
}~~ 	
if 

( 
PrivateReturnsTrue 
( 
)  
)  !
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
   	
else
¡¡ 
{
¢¢ 	
data
¥¥ 
=
¥¥ 
null
¥¥ 
;
¥¥ 
}
¦¦ 	
if
§§ 

(
§§ !
PrivateReturnsFalse
§§ 
(
§§  
)
§§  !
)
§§! "
{
¨¨ 	
IO
ªª 
.
ªª 
	WriteLine
ªª 
(
ªª 
$str
ªª /
)
ªª/ 0
;
ªª0 1
}
«« 	
else
¬¬ 
{
­­ 	
try
®® 
{
¯¯ 
int
°° 
value
°° 
=
°° 
int
°° 
.
°°  
Parse
°°  %
(
°°% &
data
°°& *
)
°°* +
;
°°+ ,
}
±± 
catch
²² 
(
²² 
FormatException
²² " 
exceptNumberFormat
²²# 5
)
²²5 6
{
³³ 
IO
µµ 
.
µµ 
Logger
µµ 
.
µµ 
Log
µµ 
(
µµ 
NLog
µµ "
.
µµ" #
LogLevel
µµ# +
.
µµ+ ,
Warn
µµ, 0
,
µµ0 1 
exceptNumberFormat
µµ2 D
,
µµD E
$str
µµF j
+
µµk l 
exceptNumberFormat
µµm 
)µµ 
;µµ 
}
¶¶ 
}
·· 	
}
¸¸ 
private
»» 
void
»» 
GoodB2G2
»» 
(
»» 
)
»» 
{
¼¼ 
string
½½ 
data
½½ 
;
½½ 
if
¾¾ 

(
¾¾  
PrivateReturnsTrue
¾¾ 
(
¾¾ 
)
¾¾  
)
¾¾  !
{
¿¿ 	
data
ÀÀ 
=
ÀÀ 
$str
ÀÀ 
;
ÀÀ 
{
ÁÁ 
try
ÃÃ 
{
ÄÄ 
data
ÆÆ 
=
ÆÆ 
Console
ÆÆ "
.
ÆÆ" #
ReadLine
ÆÆ# +
(
ÆÆ+ ,
)
ÆÆ, -
;
ÆÆ- .
}
ÇÇ 
catch
ÈÈ 
(
ÈÈ 
IOException
ÈÈ "
exceptIO
ÈÈ# +
)
ÈÈ+ ,
{
ÉÉ 
IO
ÊÊ 
.
ÊÊ 
Logger
ÊÊ 
.
ÊÊ 
Log
ÊÊ !
(
ÊÊ! "
NLog
ÊÊ" &
.
ÊÊ& '
LogLevel
ÊÊ' /
.
ÊÊ/ 0
Warn
ÊÊ0 4
,
ÊÊ4 5
exceptIO
ÊÊ6 >
,
ÊÊ> ?
$str
ÊÊ@ [
)
ÊÊ[ \
;
ÊÊ\ ]
}
ËË 
}
ÌÌ 
}
ÍÍ 	
else
ÎÎ 
{
ÏÏ 	
data
ÒÒ 
=
ÒÒ 
null
ÒÒ 
;
ÒÒ 
}
ÓÓ 	
if
ÔÔ 

(
ÔÔ  
PrivateReturnsTrue
ÔÔ 
(
ÔÔ 
)
ÔÔ  
)
ÔÔ  !
{
ÕÕ 	
try
ÖÖ 
{
×× 
int
ØØ 
value
ØØ 
=
ØØ 
int
ØØ 
.
ØØ  
Parse
ØØ  %
(
ØØ% &
data
ØØ& *
)
ØØ* +
;
ØØ+ ,
}
ÙÙ 
catch
ÚÚ 
(
ÚÚ 
FormatException
ÚÚ " 
exceptNumberFormat
ÚÚ# 5
)
ÚÚ5 6
{
ÛÛ 
IO
ÝÝ 
.
ÝÝ 
Logger
ÝÝ 
.
ÝÝ 
Log
ÝÝ 
(
ÝÝ 
NLog
ÝÝ "
.
ÝÝ" #
LogLevel
ÝÝ# +
.
ÝÝ+ ,
Warn
ÝÝ, 0
,
ÝÝ0 1 
exceptNumberFormat
ÝÝ2 D
,
ÝÝD E
$str
ÝÝF j
+
ÝÝk l 
exceptNumberFormat
ÝÝm 
)ÝÝ 
;ÝÝ 
}
ÞÞ 
}
ßß 	
}
àà 
public
ââ 

override
ââ 
void
ââ 
Good
ââ 
(
ââ 
)
ââ 
{
ãã 
GoodG2B1
ää 
(
ää 
)
ää 
;
ää 
GoodG2B2
åå 
(
åå 
)
åå 
;
åå 
GoodB2G1
ææ 
(
ææ 
)
ææ 
;
ææ 
GoodB2G2
çç 
(
çç 
)
çç 
;
çç 
}
èè 
}êê 
}ëë O
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_09.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_09 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!!  
STATIC_READONLY_TRUE!! #
)!!# $
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try&& 
{'' 
data)) 
=)) 
Console)) "
.))" #
ReadLine))# +
())+ ,
))), -
;))- .
}** 
catch++ 
(++ 
IOException++ "
exceptIO++# +
)+++ ,
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptIO--6 >
,--> ?
$str--@ [
)--[ \
;--\ ]
}.. 
}// 
}00 	
else11 
{22 	
data55 
=55 
null55 
;55 
}66 	
if77 

(77 
IO77 
.77  
STATIC_READONLY_TRUE77 #
)77# $
{88 	
try99 
{:: 
int;; 
value;; 
=;; 
int;; 
.;;  
Parse;;  %
(;;% &
data;;& *
);;* +
;;;+ ,
}<< 
catch== 
(== 
FormatException== "
exceptNumberFormat==# 5
)==5 6
{>> 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
exceptNumberFormat@@2 D
,@@D E
$str@@F `
+@@a b
data@@c g
)@@g h
;@@h i
}AA 
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
ifJJ 

(JJ 
IOJJ 
.JJ !
STATIC_READONLY_FALSEJJ $
)JJ$ %
{KK 	
dataNN 
=NN 
nullNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$strSS 
;SS 
}TT 	
ifUU 

(UU 
IOUU 
.UU  
STATIC_READONLY_TRUEUU #
)UU# $
{VV 	
tryWW 
{XX 
intYY 
valueYY 
=YY 
intYY 
.YY  
ParseYY  %
(YY% &
dataYY& *
)YY* +
;YY+ ,
}ZZ 
catch[[ 
([[ 
FormatException[[ "
exceptNumberFormat[[# 5
)[[5 6
{\\ 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
exceptNumberFormat^^2 D
,^^D E
$str^^F `
+^^a b
data^^c g
)^^g h
;^^h i
}__ 
}`` 	
}aa 
privatedd 
voiddd 
GoodG2B2dd 
(dd 
)dd 
{ee 
stringff 
dataff 
;ff 
ifgg 

(gg 
IOgg 
.gg  
STATIC_READONLY_TRUEgg #
)gg# $
{hh 	
datajj 
=jj 
$strjj 
;jj 
}kk 	
elsell 
{mm 	
datapp 
=pp 
nullpp 
;pp 
}qq 	
ifrr 

(rr 
IOrr 
.rr  
STATIC_READONLY_TRUErr #
)rr# $
{ss 	
trytt 
{uu 
intvv 
valuevv 
=vv 
intvv 
.vv  
Parsevv  %
(vv% &
datavv& *
)vv* +
;vv+ ,
}ww 
catchxx 
(xx 
FormatExceptionxx "
exceptNumberFormatxx# 5
)xx5 6
{yy 
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ "
.{{" #
LogLevel{{# +
.{{+ ,
Warn{{, 0
,{{0 1
exceptNumberFormat{{2 D
,{{D E
$str{{F `
+{{a b
data{{c g
){{g h
;{{h i
}|| 
}}} 	
}~~ 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 #
STATIC_READONLY_FALSE
 $
)
$ %
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
   	
try
¡¡ 
{
¢¢ 
int
££ 
value
££ 
=
££ 
int
££ 
.
££  
Parse
££  %
(
££% &
data
££& *
)
££* +
;
££+ ,
}
¤¤ 
catch
¥¥ 
(
¥¥ 
FormatException
¥¥ " 
exceptNumberFormat
¥¥# 5
)
¥¥5 6
{
¦¦ 
IO
¨¨ 
.
¨¨ 
Logger
¨¨ 
.
¨¨ 
Log
¨¨ 
(
¨¨ 
NLog
¨¨ "
.
¨¨" #
LogLevel
¨¨# +
.
¨¨+ ,
Warn
¨¨, 0
,
¨¨0 1 
exceptNumberFormat
¨¨2 D
,
¨¨D E
$str
¨¨F j
+
¨¨k l 
exceptNumberFormat
¨¨m 
)¨¨ 
;¨¨ 
}
©© 
}
ªª 	
}
«« 
private
®® 
void
®® 
GoodB2G2
®® 
(
®® 
)
®® 
{
¯¯ 
string
°° 
data
°° 
;
°° 
if
±± 

(
±± 
IO
±± 
.
±± "
STATIC_READONLY_TRUE
±± #
)
±±# $
{
²² 	
data
³³ 
=
³³ 
$str
³³ 
;
³³ 
{
´´ 
try
¶¶ 
{
·· 
data
¹¹ 
=
¹¹ 
Console
¹¹ "
.
¹¹" #
ReadLine
¹¹# +
(
¹¹+ ,
)
¹¹, -
;
¹¹- .
}
ºº 
catch
»» 
(
»» 
IOException
»» "
exceptIO
»»# +
)
»»+ ,
{
¼¼ 
IO
½½ 
.
½½ 
Logger
½½ 
.
½½ 
Log
½½ !
(
½½! "
NLog
½½" &
.
½½& '
LogLevel
½½' /
.
½½/ 0
Warn
½½0 4
,
½½4 5
exceptIO
½½6 >
,
½½> ?
$str
½½@ [
)
½½[ \
;
½½\ ]
}
¾¾ 
}
¿¿ 
}
ÀÀ 	
else
ÁÁ 
{
ÂÂ 	
data
ÅÅ 
=
ÅÅ 
null
ÅÅ 
;
ÅÅ 
}
ÆÆ 	
if
ÇÇ 

(
ÇÇ 
IO
ÇÇ 
.
ÇÇ "
STATIC_READONLY_TRUE
ÇÇ #
)
ÇÇ# $
{
ÈÈ 	
try
ÉÉ 
{
ÊÊ 
int
ËË 
value
ËË 
=
ËË 
int
ËË 
.
ËË  
Parse
ËË  %
(
ËË% &
data
ËË& *
)
ËË* +
;
ËË+ ,
}
ÌÌ 
catch
ÍÍ 
(
ÍÍ 
FormatException
ÍÍ " 
exceptNumberFormat
ÍÍ# 5
)
ÍÍ5 6
{
ÎÎ 
IO
ÐÐ 
.
ÐÐ 
Logger
ÐÐ 
.
ÐÐ 
Log
ÐÐ 
(
ÐÐ 
NLog
ÐÐ "
.
ÐÐ" #
LogLevel
ÐÐ# +
.
ÐÐ+ ,
Warn
ÐÐ, 0
,
ÐÐ0 1 
exceptNumberFormat
ÐÐ2 D
,
ÐÐD E
$str
ÐÐF j
+
ÐÐk l 
exceptNumberFormat
ÐÐm 
)ÐÐ 
;ÐÐ 
}
ÑÑ 
}
ÒÒ 	
}
ÓÓ 
public
ÕÕ 

override
ÕÕ 
void
ÕÕ 
Good
ÕÕ 
(
ÕÕ 
)
ÕÕ 
{
ÖÖ 
GoodG2B1
×× 
(
×× 
)
×× 
;
×× 
GoodG2B2
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
GoodB2G1
ÙÙ 
(
ÙÙ 
)
ÙÙ 
;
ÙÙ 
GoodB2G2
ÚÚ 
(
ÚÚ 
)
ÚÚ 
;
ÚÚ 
}
ÛÛ 
}ÝÝ 
}ÞÞ  N
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_10.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_10 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!! 

staticTrue!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try&& 
{'' 
data)) 
=)) 
Console)) "
.))" #
ReadLine))# +
())+ ,
))), -
;))- .
}** 
catch++ 
(++ 
IOException++ "
exceptIO++# +
)+++ ,
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptIO--6 >
,--> ?
$str--@ [
)--[ \
;--\ ]
}.. 
}// 
}00 	
else11 
{22 	
data55 
=55 
null55 
;55 
}66 	
if77 

(77 
IO77 
.77 

staticTrue77 
)77 
{88 	
try99 
{:: 
int;; 
value;; 
=;; 
int;; 
.;;  
Parse;;  %
(;;% &
data;;& *
);;* +
;;;+ ,
}<< 
catch== 
(== 
FormatException== "
exceptNumberFormat==# 5
)==5 6
{>> 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
exceptNumberFormat@@2 D
,@@D E
$str@@F `
+@@a b
data@@c g
)@@g h
;@@h i
}AA 
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
ifJJ 

(JJ 
IOJJ 
.JJ 
staticFalseJJ 
)JJ 
{KK 	
dataNN 
=NN 
nullNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$strSS 
;SS 
}TT 	
ifUU 

(UU 
IOUU 
.UU 

staticTrueUU 
)UU 
{VV 	
tryWW 
{XX 
intYY 
valueYY 
=YY 
intYY 
.YY  
ParseYY  %
(YY% &
dataYY& *
)YY* +
;YY+ ,
}ZZ 
catch[[ 
([[ 
FormatException[[ "
exceptNumberFormat[[# 5
)[[5 6
{\\ 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
exceptNumberFormat^^2 D
,^^D E
$str^^F `
+^^a b
data^^c g
)^^g h
;^^h i
}__ 
}`` 	
}aa 
privatedd 
voiddd 
GoodG2B2dd 
(dd 
)dd 
{ee 
stringff 
dataff 
;ff 
ifgg 

(gg 
IOgg 
.gg 

staticTruegg 
)gg 
{hh 	
datajj 
=jj 
$strjj 
;jj 
}kk 	
elsell 
{mm 	
datapp 
=pp 
nullpp 
;pp 
}qq 	
ifrr 

(rr 
IOrr 
.rr 

staticTruerr 
)rr 
{ss 	
trytt 
{uu 
intvv 
valuevv 
=vv 
intvv 
.vv  
Parsevv  %
(vv% &
datavv& *
)vv* +
;vv+ ,
}ww 
catchxx 
(xx 
FormatExceptionxx "
exceptNumberFormatxx# 5
)xx5 6
{yy 
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ "
.{{" #
LogLevel{{# +
.{{+ ,
Warn{{, 0
,{{0 1
exceptNumberFormat{{2 D
,{{D E
$str{{F `
+{{a b
data{{c g
){{g h
;{{h i
}|| 
}}} 	
}~~ 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 
staticFalse
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
   	
try
¡¡ 
{
¢¢ 
int
££ 
value
££ 
=
££ 
int
££ 
.
££  
Parse
££  %
(
££% &
data
££& *
)
££* +
;
££+ ,
}
¤¤ 
catch
¥¥ 
(
¥¥ 
FormatException
¥¥ " 
exceptNumberFormat
¥¥# 5
)
¥¥5 6
{
¦¦ 
IO
¨¨ 
.
¨¨ 
Logger
¨¨ 
.
¨¨ 
Log
¨¨ 
(
¨¨ 
NLog
¨¨ "
.
¨¨" #
LogLevel
¨¨# +
.
¨¨+ ,
Warn
¨¨, 0
,
¨¨0 1 
exceptNumberFormat
¨¨2 D
,
¨¨D E
$str
¨¨F j
+
¨¨k l 
exceptNumberFormat
¨¨m 
)¨¨ 
;¨¨ 
}
©© 
}
ªª 	
}
«« 
private
®® 
void
®® 
GoodB2G2
®® 
(
®® 
)
®® 
{
¯¯ 
string
°° 
data
°° 
;
°° 
if
±± 

(
±± 
IO
±± 
.
±± 

staticTrue
±± 
)
±± 
{
²² 	
data
³³ 
=
³³ 
$str
³³ 
;
³³ 
{
´´ 
try
¶¶ 
{
·· 
data
¹¹ 
=
¹¹ 
Console
¹¹ "
.
¹¹" #
ReadLine
¹¹# +
(
¹¹+ ,
)
¹¹, -
;
¹¹- .
}
ºº 
catch
»» 
(
»» 
IOException
»» "
exceptIO
»»# +
)
»»+ ,
{
¼¼ 
IO
½½ 
.
½½ 
Logger
½½ 
.
½½ 
Log
½½ !
(
½½! "
NLog
½½" &
.
½½& '
LogLevel
½½' /
.
½½/ 0
Warn
½½0 4
,
½½4 5
exceptIO
½½6 >
,
½½> ?
$str
½½@ [
)
½½[ \
;
½½\ ]
}
¾¾ 
}
¿¿ 
}
ÀÀ 	
else
ÁÁ 
{
ÂÂ 	
data
ÅÅ 
=
ÅÅ 
null
ÅÅ 
;
ÅÅ 
}
ÆÆ 	
if
ÇÇ 

(
ÇÇ 
IO
ÇÇ 
.
ÇÇ 

staticTrue
ÇÇ 
)
ÇÇ 
{
ÈÈ 	
try
ÉÉ 
{
ÊÊ 
int
ËË 
value
ËË 
=
ËË 
int
ËË 
.
ËË  
Parse
ËË  %
(
ËË% &
data
ËË& *
)
ËË* +
;
ËË+ ,
}
ÌÌ 
catch
ÍÍ 
(
ÍÍ 
FormatException
ÍÍ " 
exceptNumberFormat
ÍÍ# 5
)
ÍÍ5 6
{
ÎÎ 
IO
ÐÐ 
.
ÐÐ 
Logger
ÐÐ 
.
ÐÐ 
Log
ÐÐ 
(
ÐÐ 
NLog
ÐÐ "
.
ÐÐ" #
LogLevel
ÐÐ# +
.
ÐÐ+ ,
Warn
ÐÐ, 0
,
ÐÐ0 1 
exceptNumberFormat
ÐÐ2 D
,
ÐÐD E
$str
ÐÐF j
+
ÐÐk l 
exceptNumberFormat
ÐÐm 
)ÐÐ 
;ÐÐ 
}
ÑÑ 
}
ÒÒ 	
}
ÓÓ 
public
ÕÕ 

override
ÕÕ 
void
ÕÕ 
Good
ÕÕ 
(
ÕÕ 
)
ÕÕ 
{
ÖÖ 
GoodG2B1
×× 
(
×× 
)
×× 
;
×× 
GoodG2B2
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
GoodB2G1
ÙÙ 
(
ÙÙ 
)
ÙÙ 
;
ÙÙ 
GoodB2G2
ÚÚ 
(
ÚÚ 
)
ÚÚ 
;
ÚÚ 
}
ÛÛ 
}ÝÝ 
}ÞÞ ¢Q
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_11.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_11 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!! 
StaticReturnsTrue!!  
(!!  !
)!!! "
)!!" #
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try&& 
{'' 
data)) 
=)) 
Console)) "
.))" #
ReadLine))# +
())+ ,
))), -
;))- .
}** 
catch++ 
(++ 
IOException++ "
exceptIO++# +
)+++ ,
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptIO--6 >
,--> ?
$str--@ [
)--[ \
;--\ ]
}.. 
}// 
}00 	
else11 
{22 	
data55 
=55 
null55 
;55 
}66 	
if77 

(77
 
IO77 
.77 
StaticReturnsTrue77 
(77  
)77  !
)77! "
{88 	
try99 
{:: 
int;; 
value;; 
=;; 
int;; 
.;;  
Parse;;  %
(;;% &
data;;& *
);;* +
;;;+ ,
}<< 
catch== 
(== 
FormatException== "
exceptNumberFormat==# 5
)==5 6
{>> 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
exceptNumberFormat@@2 D
,@@D E
$str@@F `
+@@a b
data@@c g
)@@g h
;@@h i
}AA 
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
ifJJ 

(JJ 
IOJJ 
.JJ 
StaticReturnsFalseJJ !
(JJ! "
)JJ" #
)JJ# $
{KK 	
dataNN 
=NN 
nullNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$strSS 
;SS 
}TT 	
ifUU 

(UU 
IOUU 
.UU 
StaticReturnsTrueUU  
(UU  !
)UU! "
)UU" #
{VV 	
tryWW 
{XX 
intYY 
valueYY 
=YY 
intYY 
.YY  
ParseYY  %
(YY% &
dataYY& *
)YY* +
;YY+ ,
}ZZ 
catch[[ 
([[ 
FormatException[[ "
exceptNumberFormat[[# 5
)[[5 6
{\\ 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
exceptNumberFormat^^2 D
,^^D E
$str^^F `
+^^a b
data^^c g
)^^g h
;^^h i
}__ 
}`` 	
}aa 
privatedd 
voiddd 
GoodG2B2dd 
(dd 
)dd 
{ee 
stringff 
dataff 
;ff 
ifgg 

(gg 
IOgg 
.gg 
StaticReturnsTruegg  
(gg  !
)gg! "
)gg" #
{hh 	
datajj 
=jj 
$strjj 
;jj 
}kk 	
elsell 
{mm 	
datapp 
=pp 
nullpp 
;pp 
}qq 	
ifrr 

(rr 
IOrr 
.rr 
StaticReturnsTruerr  
(rr  !
)rr! "
)rr" #
{ss 	
trytt 
{uu 
intvv 
valuevv 
=vv 
intvv 
.vv  
Parsevv  %
(vv% &
datavv& *
)vv* +
;vv+ ,
}ww 
catchxx 
(xx 
FormatExceptionxx "
exceptNumberFormatxx# 5
)xx5 6
{yy 
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ "
.{{" #
LogLevel{{# +
.{{+ ,
Warn{{, 0
,{{0 1
exceptNumberFormat{{2 D
,{{D E
$str{{F `
+{{a b
data{{c g
){{g h
;{{h i
}|| 
}}} 	
}~~ 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
  
StaticReturnsFalse
 !
(
! "
)
" #
)
# $
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
   	
try
¡¡ 
{
¢¢ 
int
££ 
value
££ 
=
££ 
int
££ 
.
££  
Parse
££  %
(
££% &
data
££& *
)
££* +
;
££+ ,
}
¤¤ 
catch
¥¥ 
(
¥¥ 
FormatException
¥¥ " 
exceptNumberFormat
¥¥# 5
)
¥¥5 6
{
¦¦ 
IO
¨¨ 
.
¨¨ 
Logger
¨¨ 
.
¨¨ 
Log
¨¨ 
(
¨¨ 
NLog
¨¨ "
.
¨¨" #
LogLevel
¨¨# +
.
¨¨+ ,
Warn
¨¨, 0
,
¨¨0 1 
exceptNumberFormat
¨¨2 D
,
¨¨D E
$str
¨¨F j
+
¨¨k l 
exceptNumberFormat
¨¨m 
)¨¨ 
;¨¨ 
}
©© 
}
ªª 	
}
«« 
private
®® 
void
®® 
GoodB2G2
®® 
(
®® 
)
®® 
{
¯¯ 
string
°° 
data
°° 
;
°° 
if
±± 

(
±± 
IO
±± 
.
±± 
StaticReturnsTrue
±±  
(
±±  !
)
±±! "
)
±±" #
{
²² 	
data
³³ 
=
³³ 
$str
³³ 
;
³³ 
{
´´ 
try
¶¶ 
{
·· 
data
¹¹ 
=
¹¹ 
Console
¹¹ "
.
¹¹" #
ReadLine
¹¹# +
(
¹¹+ ,
)
¹¹, -
;
¹¹- .
}
ºº 
catch
»» 
(
»» 
IOException
»» "
exceptIO
»»# +
)
»»+ ,
{
¼¼ 
IO
½½ 
.
½½ 
Logger
½½ 
.
½½ 
Log
½½ !
(
½½! "
NLog
½½" &
.
½½& '
LogLevel
½½' /
.
½½/ 0
Warn
½½0 4
,
½½4 5
exceptIO
½½6 >
,
½½> ?
$str
½½@ [
)
½½[ \
;
½½\ ]
}
¾¾ 
}
¿¿ 
}
ÀÀ 	
else
ÁÁ 
{
ÂÂ 	
data
ÅÅ 
=
ÅÅ 
null
ÅÅ 
;
ÅÅ 
}
ÆÆ 	
if
ÇÇ 

(
ÇÇ 
IO
ÇÇ 
.
ÇÇ 
StaticReturnsTrue
ÇÇ  
(
ÇÇ  !
)
ÇÇ! "
)
ÇÇ" #
{
ÈÈ 	
try
ÉÉ 
{
ÊÊ 
int
ËË 
value
ËË 
=
ËË 
int
ËË 
.
ËË  
Parse
ËË  %
(
ËË% &
data
ËË& *
)
ËË* +
;
ËË+ ,
}
ÌÌ 
catch
ÍÍ 
(
ÍÍ 
FormatException
ÍÍ " 
exceptNumberFormat
ÍÍ# 5
)
ÍÍ5 6
{
ÎÎ 
IO
ÐÐ 
.
ÐÐ 
Logger
ÐÐ 
.
ÐÐ 
Log
ÐÐ 
(
ÐÐ 
NLog
ÐÐ "
.
ÐÐ" #
LogLevel
ÐÐ# +
.
ÐÐ+ ,
Warn
ÐÐ, 0
,
ÐÐ0 1 
exceptNumberFormat
ÐÐ2 D
,
ÐÐD E
$str
ÐÐF j
+
ÐÐk l 
exceptNumberFormat
ÐÐm 
)ÐÐ 
;ÐÐ 
}
ÑÑ 
}
ÒÒ 	
}
ÓÓ 
public
ÕÕ 

override
ÕÕ 
void
ÕÕ 
Good
ÕÕ 
(
ÕÕ 
)
ÕÕ 
{
ÖÖ 
GoodG2B1
×× 
(
×× 
)
×× 
;
×× 
GoodG2B2
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
GoodB2G1
ÙÙ 
(
ÙÙ 
)
ÙÙ 
;
ÙÙ 
GoodB2G2
ÚÚ 
(
ÚÚ 
)
ÚÚ 
;
ÚÚ 
}
ÛÛ 
}ÝÝ 
}ÞÞ ïI
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_12.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_12 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!!
 
IO!! 
.!! $
StaticReturnsTrueOrFalse!! &
(!!& '
)!!' (
)!!( )
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try&& 
{'' 
data)) 
=)) 
Console)) "
.))" #
ReadLine))# +
())+ ,
))), -
;))- .
}** 
catch++ 
(++ 
IOException++ "
exceptIO++# +
)+++ ,
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptIO--6 >
,--> ?
$str--@ [
)--[ \
;--\ ]
}.. 
}// 
}00 	
else11 
{22 	
data44 
=44 
$str44 
;44 
}55 	
if66 

(66
 
IO66 
.66 $
StaticReturnsTrueOrFalse66 &
(66& '
)66' (
)66( )
{77 	
try88 
{99 
int:: 
value:: 
=:: 
int:: 
.::  
Parse::  %
(::% &
data::& *
)::* +
;::+ ,
};; 
catch<< 
(<< 
FormatException<< "
exceptNumberFormat<<# 5
)<<5 6
{== 
IO?? 
.?? 
Logger?? 
.?? 
Log?? 
(?? 
NLog?? "
.??" #
LogLevel??# +
.??+ ,
Warn??, 0
,??0 1
exceptNumberFormat??2 D
,??D E
$str??F `
+??a b
data??c g
)??g h
;??h i
}@@ 
}AA 	
elseBB 
{CC 	
tryDD 
{EE 
intFF 
valueFF 
=FF 
intFF 
.FF  
ParseFF  %
(FF% &
dataFF& *
)FF* +
;FF+ ,
}GG 
catchHH 
(HH 
FormatExceptionHH "
exceptNumberFormatHH# 5
)HH5 6
{II 
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK "
.KK" #
LogLevelKK# +
.KK+ ,
WarnKK, 0
,KK0 1
exceptNumberFormatKK2 D
,KKD E
$strKKF j
+KKk l
exceptNumberFormatKKm 
)	KK 
;
KK 
}LL 
}MM 	
}NN 
privateSS 
voidSS 
GoodG2BSS 
(SS 
)SS 
{TT 
stringUU 
dataUU 
;UU 
ifVV 

(VV
 
IOVV 
.VV $
StaticReturnsTrueOrFalseVV &
(VV& '
)VV' (
)VV( )
{WW 	
dataYY 
=YY 
$strYY 
;YY 
}ZZ 	
else[[ 
{\\ 	
data^^ 
=^^ 
$str^^ 
;^^ 
}__ 	
if`` 

(``
 
IO`` 
.`` $
StaticReturnsTrueOrFalse`` &
(``& '
)``' (
)``( )
{aa 	
trybb 
{cc 
intdd 
valuedd 
=dd 
intdd 
.dd  
Parsedd  %
(dd% &
datadd& *
)dd* +
;dd+ ,
}ee 
catchff 
(ff 
FormatExceptionff "
exceptNumberFormatff# 5
)ff5 6
{gg 
IOii 
.ii 
Loggerii 
.ii 
Logii 
(ii 
NLogii "
.ii" #
LogLevelii# +
.ii+ ,
Warnii, 0
,ii0 1
exceptNumberFormatii2 D
,iiD E
$striiF `
+iia b
dataiic g
)iig h
;iih i
}jj 
}kk 	
elsell 
{mm 	
trynn 
{oo 
intpp 
valuepp 
=pp 
intpp 
.pp  
Parsepp  %
(pp% &
datapp& *
)pp* +
;pp+ ,
}qq 
catchrr 
(rr 
FormatExceptionrr "
exceptNumberFormatrr# 5
)rr5 6
{ss 
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu "
.uu" #
LogLeveluu# +
.uu+ ,
Warnuu, 0
,uu0 1
exceptNumberFormatuu2 D
,uuD E
$struuF `
+uua b
datauuc g
)uug h
;uuh i
}vv 
}ww 	
}xx 
private|| 
void|| 
GoodB2G|| 
(|| 
)|| 
{}} 
string~~ 
data~~ 
;~~ 
if 

(
 
IO 
. $
StaticReturnsTrueOrFalse &
(& '
)' (
)( )
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
if
 

(

 
IO
 
.
 &
StaticReturnsTrueOrFalse
 &
(
& '
)
' (
)
( )
{
   	
try
¡¡ 
{
¢¢ 
int
££ 
value
££ 
=
££ 
int
££ 
.
££  
Parse
££  %
(
££% &
data
££& *
)
££* +
;
££+ ,
}
¤¤ 
catch
¥¥ 
(
¥¥ 
FormatException
¥¥ " 
exceptNumberFormat
¥¥# 5
)
¥¥5 6
{
¦¦ 
IO
¨¨ 
.
¨¨ 
Logger
¨¨ 
.
¨¨ 
Log
¨¨ 
(
¨¨ 
NLog
¨¨ "
.
¨¨" #
LogLevel
¨¨# +
.
¨¨+ ,
Warn
¨¨, 0
,
¨¨0 1 
exceptNumberFormat
¨¨2 D
,
¨¨D E
$str
¨¨F j
+
¨¨k l 
exceptNumberFormat
¨¨m 
)¨¨ 
;¨¨ 
}
©© 
}
ªª 	
else
«« 
{
¬¬ 	
try
­­ 
{
®® 
int
¯¯ 
value
¯¯ 
=
¯¯ 
int
¯¯ 
.
¯¯  
Parse
¯¯  %
(
¯¯% &
data
¯¯& *
)
¯¯* +
;
¯¯+ ,
}
°° 
catch
±± 
(
±± 
FormatException
±± " 
exceptNumberFormat
±±# 5
)
±±5 6
{
²² 
IO
´´ 
.
´´ 
Logger
´´ 
.
´´ 
Log
´´ 
(
´´ 
NLog
´´ "
.
´´" #
LogLevel
´´# +
.
´´+ ,
Warn
´´, 0
,
´´0 1 
exceptNumberFormat
´´2 D
,
´´D E
$str
´´F j
+
´´k l 
exceptNumberFormat
´´m 
)´´ 
;´´ 
}
µµ 
}
¶¶ 	
}
·· 
public
¹¹ 

override
¹¹ 
void
¹¹ 
Good
¹¹ 
(
¹¹ 
)
¹¹ 
{
»» 
GoodG2B
¼¼ 
(
¼¼ 
)
¼¼ 
;
¼¼ 
GoodB2G
½½ 
(
½½ 
)
½½ 
;
½½ 
}
¾¾ 
}ÀÀ 
}ÁÁ æQ
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_13.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_13 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!!  
STATIC_READONLY_FIVE!! #
==!!# %
$num!!% &
)!!& '
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try&& 
{'' 
data)) 
=)) 
Console)) "
.))" #
ReadLine))# +
())+ ,
))), -
;))- .
}** 
catch++ 
(++ 
IOException++ "
exceptIO++# +
)+++ ,
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptIO--6 >
,--> ?
$str--@ [
)--[ \
;--\ ]
}.. 
}// 
}00 	
else11 
{22 	
data55 
=55 
null55 
;55 
}66 	
if77 

(77 
IO77 
.77  
STATIC_READONLY_FIVE77 #
==77# %
$num77% &
)77& '
{88 	
try99 
{:: 
int;; 
value;; 
=;; 
int;; 
.;;  
Parse;;  %
(;;% &
data;;& *
);;* +
;;;+ ,
}<< 
catch== 
(== 
FormatException== "
exceptNumberFormat==# 5
)==5 6
{>> 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
exceptNumberFormat@@2 D
,@@D E
$str@@F `
+@@a b
data@@c g
)@@g h
;@@h i
}AA 
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
ifJJ 

(JJ 
IOJJ 
.JJ  
STATIC_READONLY_FIVEJJ #
!=JJ# %
$numJJ% &
)JJ& '
{KK 	
dataNN 
=NN 
nullNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$strSS 
;SS 
}TT 	
ifUU 

(UU 
IOUU 
.UU  
STATIC_READONLY_FIVEUU #
==UU# %
$numUU% &
)UU& '
{VV 	
tryWW 
{XX 
intYY 
valueYY 
=YY 
intYY 
.YY  
ParseYY  %
(YY% &
dataYY& *
)YY* +
;YY+ ,
}ZZ 
catch[[ 
([[ 
FormatException[[ "
exceptNumberFormat[[# 5
)[[5 6
{\\ 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
exceptNumberFormat^^2 D
,^^D E
$str^^F `
+^^a b
data^^c g
)^^g h
;^^h i
}__ 
}`` 	
}aa 
privatedd 
voiddd 
GoodG2B2dd 
(dd 
)dd 
{ee 
stringff 
dataff 
;ff 
ifgg 

(gg 
IOgg 
.gg  
STATIC_READONLY_FIVEgg #
==gg# %
$numgg% &
)gg& '
{hh 	
datajj 
=jj 
$strjj 
;jj 
}kk 	
elsell 
{mm 	
datapp 
=pp 
nullpp 
;pp 
}qq 	
ifrr 

(rr 
IOrr 
.rr  
STATIC_READONLY_FIVErr #
==rr# %
$numrr% &
)rr& '
{ss 	
trytt 
{uu 
intvv 
valuevv 
=vv 
intvv 
.vv  
Parsevv  %
(vv% &
datavv& *
)vv* +
;vv+ ,
}ww 
catchxx 
(xx 
FormatExceptionxx "
exceptNumberFormatxx# 5
)xx5 6
{yy 
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ "
.{{" #
LogLevel{{# +
.{{+ ,
Warn{{, 0
,{{0 1
exceptNumberFormat{{2 D
,{{D E
$str{{F `
+{{a b
data{{c g
){{g h
;{{h i
}|| 
}}} 	
}~~ 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
# %
$num
% &
)
& '
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
!=
# %
$num
% &
)
& '
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
   	
try
¡¡ 
{
¢¢ 
int
££ 
value
££ 
=
££ 
int
££ 
.
££  
Parse
££  %
(
££% &
data
££& *
)
££* +
;
££+ ,
}
¤¤ 
catch
¥¥ 
(
¥¥ 
FormatException
¥¥ " 
exceptNumberFormat
¥¥# 5
)
¥¥5 6
{
¦¦ 
IO
¨¨ 
.
¨¨ 
Logger
¨¨ 
.
¨¨ 
Log
¨¨ 
(
¨¨ 
NLog
¨¨ "
.
¨¨" #
LogLevel
¨¨# +
.
¨¨+ ,
Warn
¨¨, 0
,
¨¨0 1 
exceptNumberFormat
¨¨2 D
,
¨¨D E
$str
¨¨F j
+
¨¨k l 
exceptNumberFormat
¨¨m 
)¨¨ 
;¨¨ 
}
©© 
}
ªª 	
}
«« 
private
®® 
void
®® 
GoodB2G2
®® 
(
®® 
)
®® 
{
¯¯ 
string
°° 
data
°° 
;
°° 
if
±± 

(
±± 
IO
±± 
.
±± "
STATIC_READONLY_FIVE
±± #
==
±±# %
$num
±±% &
)
±±& '
{
²² 	
data
³³ 
=
³³ 
$str
³³ 
;
³³ 
{
´´ 
try
¶¶ 
{
·· 
data
¹¹ 
=
¹¹ 
Console
¹¹ "
.
¹¹" #
ReadLine
¹¹# +
(
¹¹+ ,
)
¹¹, -
;
¹¹- .
}
ºº 
catch
»» 
(
»» 
IOException
»» "
exceptIO
»»# +
)
»»+ ,
{
¼¼ 
IO
½½ 
.
½½ 
Logger
½½ 
.
½½ 
Log
½½ !
(
½½! "
NLog
½½" &
.
½½& '
LogLevel
½½' /
.
½½/ 0
Warn
½½0 4
,
½½4 5
exceptIO
½½6 >
,
½½> ?
$str
½½@ [
)
½½[ \
;
½½\ ]
}
¾¾ 
}
¿¿ 
}
ÀÀ 	
else
ÁÁ 
{
ÂÂ 	
data
ÅÅ 
=
ÅÅ 
null
ÅÅ 
;
ÅÅ 
}
ÆÆ 	
if
ÇÇ 

(
ÇÇ 
IO
ÇÇ 
.
ÇÇ "
STATIC_READONLY_FIVE
ÇÇ #
==
ÇÇ# %
$num
ÇÇ% &
)
ÇÇ& '
{
ÈÈ 	
try
ÉÉ 
{
ÊÊ 
int
ËË 
value
ËË 
=
ËË 
int
ËË 
.
ËË  
Parse
ËË  %
(
ËË% &
data
ËË& *
)
ËË* +
;
ËË+ ,
}
ÌÌ 
catch
ÍÍ 
(
ÍÍ 
FormatException
ÍÍ " 
exceptNumberFormat
ÍÍ# 5
)
ÍÍ5 6
{
ÎÎ 
IO
ÐÐ 
.
ÐÐ 
Logger
ÐÐ 
.
ÐÐ 
Log
ÐÐ 
(
ÐÐ 
NLog
ÐÐ "
.
ÐÐ" #
LogLevel
ÐÐ# +
.
ÐÐ+ ,
Warn
ÐÐ, 0
,
ÐÐ0 1 
exceptNumberFormat
ÐÐ2 D
,
ÐÐD E
$str
ÐÐF j
+
ÐÐk l 
exceptNumberFormat
ÐÐm 
)ÐÐ 
;ÐÐ 
}
ÑÑ 
}
ÒÒ 	
}
ÓÓ 
public
ÕÕ 

override
ÕÕ 
void
ÕÕ 
Good
ÕÕ 
(
ÕÕ 
)
ÕÕ 
{
ÖÖ 
GoodG2B1
×× 
(
×× 
)
×× 
;
×× 
GoodG2B2
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
GoodB2G1
ÙÙ 
(
ÙÙ 
)
ÙÙ 
;
ÙÙ 
GoodB2G2
ÚÚ 
(
ÚÚ 
)
ÚÚ 
;
ÚÚ 
}
ÛÛ 
}ÝÝ 
}ÞÞ Q
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_14.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_14 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
if!! 

(!! 
IO!! 
.!! 

staticFive!! 
==!! 
$num!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try&& 
{'' 
data)) 
=)) 
Console)) "
.))" #
ReadLine))# +
())+ ,
))), -
;))- .
}** 
catch++ 
(++ 
IOException++ "
exceptIO++# +
)+++ ,
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptIO--6 >
,--> ?
$str--@ [
)--[ \
;--\ ]
}.. 
}// 
}00 	
else11 
{22 	
data55 
=55 
null55 
;55 
}66 	
if77 

(77 
IO77 
.77 

staticFive77 
==77 
$num77 
)77 
{88 	
try99 
{:: 
int;; 
value;; 
=;; 
int;; 
.;;  
Parse;;  %
(;;% &
data;;& *
);;* +
;;;+ ,
}<< 
catch== 
(== 
FormatException== "
exceptNumberFormat==# 5
)==5 6
{>> 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
exceptNumberFormat@@2 D
,@@D E
$str@@F `
+@@a b
data@@c g
)@@g h
;@@h i
}AA 
}BB 	
}CC 
privateGG 
voidGG 
GoodG2B1GG 
(GG 
)GG 
{HH 
stringII 
dataII 
;II 
ifJJ 

(JJ 
IOJJ 
.JJ 

staticFiveJJ 
!=JJ 
$numJJ 
)JJ 
{KK 	
dataNN 
=NN 
nullNN 
;NN 
}OO 	
elsePP 
{QQ 	
dataSS 
=SS 
$strSS 
;SS 
}TT 	
ifUU 

(UU 
IOUU 
.UU 

staticFiveUU 
==UU 
$numUU 
)UU 
{VV 	
tryWW 
{XX 
intYY 
valueYY 
=YY 
intYY 
.YY  
ParseYY  %
(YY% &
dataYY& *
)YY* +
;YY+ ,
}ZZ 
catch[[ 
([[ 
FormatException[[ "
exceptNumberFormat[[# 5
)[[5 6
{\\ 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
exceptNumberFormat^^2 D
,^^D E
$str^^F `
+^^a b
data^^c g
)^^g h
;^^h i
}__ 
}`` 	
}aa 
privatedd 
voiddd 
GoodG2B2dd 
(dd 
)dd 
{ee 
stringff 
dataff 
;ff 
ifgg 

(gg 
IOgg 
.gg 

staticFivegg 
==gg 
$numgg 
)gg 
{hh 	
datajj 
=jj 
$strjj 
;jj 
}kk 	
elsell 
{mm 	
datapp 
=pp 
nullpp 
;pp 
}qq 	
ifrr 

(rr 
IOrr 
.rr 

staticFiverr 
==rr 
$numrr 
)rr 
{ss 	
trytt 
{uu 
intvv 
valuevv 
=vv 
intvv 
.vv  
Parsevv  %
(vv% &
datavv& *
)vv* +
;vv+ ,
}ww 
catchxx 
(xx 
FormatExceptionxx "
exceptNumberFormatxx# 5
)xx5 6
{yy 
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ "
.{{" #
LogLevel{{# +
.{{+ ,
Warn{{, 0
,{{0 1
exceptNumberFormat{{2 D
,{{D E
$str{{F `
+{{a b
data{{c g
){{g h
;{{h i
}|| 
}}} 	
}~~ 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
{
 
try
 
{
 
data
 
=
 
Console
 "
.
" #
ReadLine
# +
(
+ ,
)
, -
;
- .
}
 
catch
 
(
 
IOException
 "
exceptIO
# +
)
+ ,
{
 
IO
 
.
 
Logger
 
.
 
Log
 !
(
! "
NLog
" &
.
& '
LogLevel
' /
.
/ 0
Warn
0 4
,
4 5
exceptIO
6 >
,
> ?
$str
@ [
)
[ \
;
\ ]
}
 
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
IO
 
.
 

staticFive
 
!=
 
$num
 
)
 
{
 	
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
}
 	
else
 
{
   	
try
¡¡ 
{
¢¢ 
int
££ 
value
££ 
=
££ 
int
££ 
.
££  
Parse
££  %
(
££% &
data
££& *
)
££* +
;
££+ ,
}
¤¤ 
catch
¥¥ 
(
¥¥ 
FormatException
¥¥ " 
exceptNumberFormat
¥¥# 5
)
¥¥5 6
{
¦¦ 
IO
¨¨ 
.
¨¨ 
Logger
¨¨ 
.
¨¨ 
Log
¨¨ 
(
¨¨ 
NLog
¨¨ "
.
¨¨" #
LogLevel
¨¨# +
.
¨¨+ ,
Warn
¨¨, 0
,
¨¨0 1 
exceptNumberFormat
¨¨2 D
,
¨¨D E
$str
¨¨F j
+
¨¨k l 
exceptNumberFormat
¨¨m 
)¨¨ 
;¨¨ 
}
©© 
}
ªª 	
}
«« 
private
®® 
void
®® 
GoodB2G2
®® 
(
®® 
)
®® 
{
¯¯ 
string
°° 
data
°° 
;
°° 
if
±± 

(
±± 
IO
±± 
.
±± 

staticFive
±± 
==
±± 
$num
±± 
)
±± 
{
²² 	
data
³³ 
=
³³ 
$str
³³ 
;
³³ 
{
´´ 
try
¶¶ 
{
·· 
data
¹¹ 
=
¹¹ 
Console
¹¹ "
.
¹¹" #
ReadLine
¹¹# +
(
¹¹+ ,
)
¹¹, -
;
¹¹- .
}
ºº 
catch
»» 
(
»» 
IOException
»» "
exceptIO
»»# +
)
»»+ ,
{
¼¼ 
IO
½½ 
.
½½ 
Logger
½½ 
.
½½ 
Log
½½ !
(
½½! "
NLog
½½" &
.
½½& '
LogLevel
½½' /
.
½½/ 0
Warn
½½0 4
,
½½4 5
exceptIO
½½6 >
,
½½> ?
$str
½½@ [
)
½½[ \
;
½½\ ]
}
¾¾ 
}
¿¿ 
}
ÀÀ 	
else
ÁÁ 
{
ÂÂ 	
data
ÅÅ 
=
ÅÅ 
null
ÅÅ 
;
ÅÅ 
}
ÆÆ 	
if
ÇÇ 

(
ÇÇ 
IO
ÇÇ 
.
ÇÇ 

staticFive
ÇÇ 
==
ÇÇ 
$num
ÇÇ 
)
ÇÇ 
{
ÈÈ 	
try
ÉÉ 
{
ÊÊ 
int
ËË 
value
ËË 
=
ËË 
int
ËË 
.
ËË  
Parse
ËË  %
(
ËË% &
data
ËË& *
)
ËË* +
;
ËË+ ,
}
ÌÌ 
catch
ÍÍ 
(
ÍÍ 
FormatException
ÍÍ " 
exceptNumberFormat
ÍÍ# 5
)
ÍÍ5 6
{
ÎÎ 
IO
ÐÐ 
.
ÐÐ 
Logger
ÐÐ 
.
ÐÐ 
Log
ÐÐ 
(
ÐÐ 
NLog
ÐÐ "
.
ÐÐ" #
LogLevel
ÐÐ# +
.
ÐÐ+ ,
Warn
ÐÐ, 0
,
ÐÐ0 1 
exceptNumberFormat
ÐÐ2 D
,
ÐÐD E
$str
ÐÐF j
+
ÐÐk l 
exceptNumberFormat
ÐÐm 
)ÐÐ 
;ÐÐ 
}
ÑÑ 
}
ÒÒ 	
}
ÓÓ 
public
ÕÕ 

override
ÕÕ 
void
ÕÕ 
Good
ÕÕ 
(
ÕÕ 
)
ÕÕ 
{
ÖÖ 
GoodG2B1
×× 
(
×× 
)
×× 
;
×× 
GoodG2B2
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
GoodB2G1
ÙÙ 
(
ÙÙ 
)
ÙÙ 
;
ÙÙ 
GoodB2G2
ÚÚ 
(
ÚÚ 
)
ÚÚ 
;
ÚÚ 
}
ÛÛ 
}ÝÝ 
}ÞÞ ÈZ
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_15.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_15 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
switch!! 
(!! 
$num!! 
)!! 
{"" 	
case## 
$num## 
:## 
data$$ 
=$$ 
$str$$ 
;$$ 
{%% 
try'' 
{(( 
data** 
=** 
Console** "
.**" #
ReadLine**# +
(**+ ,
)**, -
;**- .
}++ 
catch,, 
(,, 
IOException,, "
exceptIO,,# +
),,+ ,
{-- 
IO.. 
... 
Logger.. 
... 
Log.. !
(..! "
NLog.." &
...& '
LogLevel..' /
.../ 0
Warn..0 4
,..4 5
exceptIO..6 >
,..> ?
$str..@ [
)..[ \
;..\ ]
}// 
}00 
break11 
;11 
default22 
:22 
data55 
=55 
null55 
;55 
break66 
;66 
}77 	
switch88 
(88 
$num88 
)88 
{99 	
case:: 
$num:: 
::: 
try;; 
{<< 
int== 
value== 
=== 
int== 
.==  
Parse==  %
(==% &
data==& *
)==* +
;==+ ,
}>> 
catch?? 
(?? 
FormatException?? "
exceptNumberFormat??# 5
)??5 6
{@@ 
IOBB 
.BB 
LoggerBB 
.BB 
LogBB 
(BB 
NLogBB "
.BB" #
LogLevelBB# +
.BB+ ,
WarnBB, 0
,BB0 1
exceptNumberFormatBB2 D
,BBD E
$strBBF `
+BBa b
dataBBc g
)BBg h
;BBh i
}CC 
breakDD 
;DD 
defaultEE 
:EE 
IOGG 
.GG 
	WriteLineGG 
(GG 
$strGG /
)GG/ 0
;GG0 1
breakHH 
;HH 
}II 	
}JJ 
privateNN 
voidNN 
GoodG2B1NN 
(NN 
)NN 
{OO 
stringPP 
dataPP 
;PP 
switchQQ 
(QQ 
$numQQ 
)QQ 
{RR 	
caseSS 
$numSS 
:SS 
dataVV 
=VV 
nullVV 
;VV 
breakWW 
;WW 
defaultXX 
:XX 
dataZZ 
=ZZ 
$strZZ 
;ZZ 
break[[ 
;[[ 
}\\ 	
switch]] 
(]] 
$num]] 
)]] 
{^^ 	
case__ 
$num__ 
:__ 
try`` 
{aa 
intbb 
valuebb 
=bb 
intbb 
.bb  
Parsebb  %
(bb% &
databb& *
)bb* +
;bb+ ,
}cc 
catchdd 
(dd 
FormatExceptiondd "
exceptNumberFormatdd# 5
)dd5 6
{ee 
IOgg 
.gg 
Loggergg 
.gg 
Loggg 
(gg 
NLoggg "
.gg" #
LogLevelgg# +
.gg+ ,
Warngg, 0
,gg0 1
exceptNumberFormatgg2 D
,ggD E
$strggF `
+gga b
dataggc g
)ggg h
;ggh i
}hh 
breakii 
;ii 
defaultjj 
:jj 
IOll 
.ll 
	WriteLinell 
(ll 
$strll /
)ll/ 0
;ll0 1
breakmm 
;mm 
}nn 	
}oo 
privaterr 
voidrr 
GoodG2B2rr 
(rr 
)rr 
{ss 
stringtt 
datatt 
;tt 
switchuu 
(uu 
$numuu 
)uu 
{vv 	
caseww 
$numww 
:ww 
datayy 
=yy 
$stryy 
;yy 
breakzz 
;zz 
default{{ 
:{{ 
data~~ 
=~~ 
null~~ 
;~~ 
break 
; 
}
 	
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F `
+
a b
data
c g
)
g h
;
h i
}
 
break
 
;
 
default
 
:
 
IO
 
.
 
	WriteLine
 
(
 
$str
 /
)
/ 0
;
0 1
break
 
;
 
}
 	
}
 
private
 
void
 
GoodB2G1
 
(
 
)
 
{
 
string
 
data
 
;
 
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
data
 
=
 
$str
 
;
 
{
 
try
 
{
   
data
¢¢ 
=
¢¢ 
Console
¢¢ "
.
¢¢" #
ReadLine
¢¢# +
(
¢¢+ ,
)
¢¢, -
;
¢¢- .
}
££ 
catch
¤¤ 
(
¤¤ 
IOException
¤¤ "
exceptIO
¤¤# +
)
¤¤+ ,
{
¥¥ 
IO
¦¦ 
.
¦¦ 
Logger
¦¦ 
.
¦¦ 
Log
¦¦ !
(
¦¦! "
NLog
¦¦" &
.
¦¦& '
LogLevel
¦¦' /
.
¦¦/ 0
Warn
¦¦0 4
,
¦¦4 5
exceptIO
¦¦6 >
,
¦¦> ?
$str
¦¦@ [
)
¦¦[ \
;
¦¦\ ]
}
§§ 
}
¨¨ 
break
©© 
;
©© 
default
ªª 
:
ªª 
data
­­ 
=
­­ 
null
­­ 
;
­­ 
break
®® 
;
®® 
}
¯¯ 	
switch
°° 
(
°° 
$num
°° 
)
°° 
{
±± 	
case
²² 
$num
²² 
:
²² 
IO
´´ 
.
´´ 
	WriteLine
´´ 
(
´´ 
$str
´´ /
)
´´/ 0
;
´´0 1
break
µµ 
;
µµ 
default
¶¶ 
:
¶¶ 
try
·· 
{
¸¸ 
int
¹¹ 
value
¹¹ 
=
¹¹ 
int
¹¹ 
.
¹¹  
Parse
¹¹  %
(
¹¹% &
data
¹¹& *
)
¹¹* +
;
¹¹+ ,
}
ºº 
catch
»» 
(
»» 
FormatException
»» " 
exceptNumberFormat
»»# 5
)
»»5 6
{
¼¼ 
IO
¾¾ 
.
¾¾ 
Logger
¾¾ 
.
¾¾ 
Log
¾¾ 
(
¾¾ 
NLog
¾¾ "
.
¾¾" #
LogLevel
¾¾# +
.
¾¾+ ,
Warn
¾¾, 0
,
¾¾0 1 
exceptNumberFormat
¾¾2 D
,
¾¾D E
$str
¾¾F j
+
¾¾k l 
exceptNumberFormat
¾¾m 
)¾¾ 
;¾¾ 
}
¿¿ 
break
ÀÀ 
;
ÀÀ 
}
ÁÁ 	
}
ÂÂ 
private
ÅÅ 
void
ÅÅ 
GoodB2G2
ÅÅ 
(
ÅÅ 
)
ÅÅ 
{
ÆÆ 
string
ÇÇ 
data
ÇÇ 
;
ÇÇ 
switch
ÈÈ 
(
ÈÈ 
$num
ÈÈ 
)
ÈÈ 
{
ÉÉ 	
case
ÊÊ 
$num
ÊÊ 
:
ÊÊ 
data
ËË 
=
ËË 
$str
ËË 
;
ËË 
{
ÌÌ 
try
ÎÎ 
{
ÏÏ 
data
ÑÑ 
=
ÑÑ 
Console
ÑÑ "
.
ÑÑ" #
ReadLine
ÑÑ# +
(
ÑÑ+ ,
)
ÑÑ, -
;
ÑÑ- .
}
ÒÒ 
catch
ÓÓ 
(
ÓÓ 
IOException
ÓÓ "
exceptIO
ÓÓ# +
)
ÓÓ+ ,
{
ÔÔ 
IO
ÕÕ 
.
ÕÕ 
Logger
ÕÕ 
.
ÕÕ 
Log
ÕÕ !
(
ÕÕ! "
NLog
ÕÕ" &
.
ÕÕ& '
LogLevel
ÕÕ' /
.
ÕÕ/ 0
Warn
ÕÕ0 4
,
ÕÕ4 5
exceptIO
ÕÕ6 >
,
ÕÕ> ?
$str
ÕÕ@ [
)
ÕÕ[ \
;
ÕÕ\ ]
}
ÖÖ 
}
×× 
break
ØØ 
;
ØØ 
default
ÙÙ 
:
ÙÙ 
data
ÜÜ 
=
ÜÜ 
null
ÜÜ 
;
ÜÜ 
break
ÝÝ 
;
ÝÝ 
}
ÞÞ 	
switch
ßß 
(
ßß 
$num
ßß 
)
ßß 
{
àà 	
case
áá 
$num
áá 
:
áá 
try
ââ 
{
ãã 
int
ää 
value
ää 
=
ää 
int
ää 
.
ää  
Parse
ää  %
(
ää% &
data
ää& *
)
ää* +
;
ää+ ,
}
åå 
catch
ææ 
(
ææ 
FormatException
ææ " 
exceptNumberFormat
ææ# 5
)
ææ5 6
{
çç 
IO
éé 
.
éé 
Logger
éé 
.
éé 
Log
éé 
(
éé 
NLog
éé "
.
éé" #
LogLevel
éé# +
.
éé+ ,
Warn
éé, 0
,
éé0 1 
exceptNumberFormat
éé2 D
,
ééD E
$str
ééF j
+
éék l 
exceptNumberFormat
éém 
)éé 
;éé 
}
êê 
break
ëë 
;
ëë 
default
ìì 
:
ìì 
IO
îî 
.
îî 
	WriteLine
îî 
(
îî 
$str
îî /
)
îî/ 0
;
îî0 1
break
ïï 
;
ïï 
}
ðð 	
}
ññ 
public
óó 

override
óó 
void
óó 
Good
óó 
(
óó 
)
óó 
{
ôô 
GoodG2B1
õõ 
(
õõ 
)
õõ 
;
õõ 
GoodG2B2
öö 
(
öö 
)
öö 
;
öö 
GoodB2G1
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷ 
GoodB2G2
øø 
(
øø 
)
øø 
;
øø 
}
ùù 
}ûû 
}üü ,
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_16.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_16 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
while!! 
(!! 
true!! 
)!! 
{"" 	
data## 
=## 
$str## 
;## 
{$$ 
try&& 
{'' 
data)) 
=)) 
Console)) "
.))" #
ReadLine))# +
())+ ,
))), -
;))- .
}** 
catch++ 
(++ 
IOException++ "
exceptIO++# +
)+++ ,
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptIO--6 >
,--> ?
$str--@ [
)--[ \
;--\ ]
}.. 
}// 
break00 
;00 
}11 	
while22 
(22 
true22 
)22 
{33 	
try44 
{55 
int66 
value66 
=66 
int66 
.66  
Parse66  %
(66% &
data66& *
)66* +
;66+ ,
}77 
catch88 
(88 
FormatException88 "
exceptNumberFormat88# 5
)885 6
{99 
IO;; 
.;; 
Logger;; 
.;; 
Log;; 
(;; 
NLog;; "
.;;" #
LogLevel;;# +
.;;+ ,
Warn;;, 0
,;;0 1
exceptNumberFormat;;2 D
,;;D E
$str;;F `
+;;a b
data;;c g
);;g h
;;;h i
}<< 
break== 
;== 
}>> 	
}?? 
privateCC 
voidCC 
GoodG2BCC 
(CC 
)CC 
{DD 
stringEE 
dataEE 
;EE 
whileFF 
(FF 
trueFF 
)FF 
{GG 	
dataII 
=II 
$strII 
;II 
breakJJ 
;JJ 
}KK 	
whileLL 
(LL 
trueLL 
)LL 
{MM 	
tryNN 
{OO 
intPP 
valuePP 
=PP 
intPP 
.PP  
ParsePP  %
(PP% &
dataPP& *
)PP* +
;PP+ ,
}QQ 
catchRR 
(RR 
FormatExceptionRR "
exceptNumberFormatRR# 5
)RR5 6
{SS 
IOUU 
.UU 
LoggerUU 
.UU 
LogUU 
(UU 
NLogUU "
.UU" #
LogLevelUU# +
.UU+ ,
WarnUU, 0
,UU0 1
exceptNumberFormatUU2 D
,UUD E
$strUUF `
+UUa b
dataUUc g
)UUg h
;UUh i
}VV 
breakWW 
;WW 
}XX 	
}YY 
private\\ 
void\\ 
GoodB2G\\ 
(\\ 
)\\ 
{]] 
string^^ 
data^^ 
;^^ 
while__ 
(__ 
true__ 
)__ 
{`` 	
dataaa 
=aa 
$straa 
;aa 
{bb 
trydd 
{ee 
datagg 
=gg 
Consolegg "
.gg" #
ReadLinegg# +
(gg+ ,
)gg, -
;gg- .
}hh 
catchii 
(ii 
IOExceptionii "
exceptIOii# +
)ii+ ,
{jj 
IOkk 
.kk 
Loggerkk 
.kk 
Logkk !
(kk! "
NLogkk" &
.kk& '
LogLevelkk' /
.kk/ 0
Warnkk0 4
,kk4 5
exceptIOkk6 >
,kk> ?
$strkk@ [
)kk[ \
;kk\ ]
}ll 
}mm 
breaknn 
;nn 
}oo 	
whilepp 
(pp 
truepp 
)pp 
{qq 	
tryrr 
{ss 
inttt 
valuett 
=tt 
inttt 
.tt  
Parsett  %
(tt% &
datatt& *
)tt* +
;tt+ ,
}uu 
catchvv 
(vv 
FormatExceptionvv "
exceptNumberFormatvv# 5
)vv5 6
{ww 
IOyy 
.yy 
Loggeryy 
.yy 
Logyy 
(yy 
NLogyy "
.yy" #
LogLevelyy# +
.yy+ ,
Warnyy, 0
,yy0 1
exceptNumberFormatyy2 D
,yyD E
$stryyF j
+yyk l
exceptNumberFormatyym 
)	yy 
;
yy 
}zz 
break{{ 
;{{ 
}|| 	
}}} 
public 

override 
void 
Good 
( 
) 
{
 
GoodG2B
 
(
 
)
 
;
 
GoodB2G
 
(
 
)
 
;
 
}
 
} 
} È+
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_17.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_17 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data%% 
=%% 
$str%% 
;%% 
{&& 	
try(( 
{)) 
data++ 
=++ 
Console++ 
.++ 
ReadLine++ '
(++' (
)++( )
;++) *
},, 
catch-- 
(-- 
IOException-- 
exceptIO-- '
)--' (
{.. 
IO// 
.// 
Logger// 
.// 
Log// 
(// 
NLog// "
.//" #
LogLevel//# +
.//+ ,
Warn//, 0
,//0 1
exceptIO//2 :
,//: ;
$str//< W
)//W X
;//X Y
}00 
}11 	
for22 
(22 
int22 
j22 
=22 
$num22 
;22 
j22 
<22 
$num22 
;22 
j22  
++22  "
)22" #
{33 	
try44 
{55 
int66 
value66 
=66 
int66 
.66  
Parse66  %
(66% &
data66& *
)66* +
;66+ ,
}77 
catch88 
(88 
FormatException88 "
exceptNumberFormat88# 5
)885 6
{99 
IO;; 
.;; 
Logger;; 
.;; 
Log;; 
(;; 
NLog;; "
.;;" #
LogLevel;;# +
.;;+ ,
Warn;;, 0
,;;0 1
exceptNumberFormat;;2 D
,;;D E
$str;;F `
+;;a b
data;;c g
);;g h
;;;h i
}<< 
}== 	
}>> 
privateBB 
voidBB 
GoodG2BBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
dataFF 
=FF 
$strFF 
;FF 
forGG 
(GG 
intGG 
jGG 
=GG 
$numGG 
;GG 
jGG 
<GG 
$numGG 
;GG 
jGG  
++GG  "
)GG" #
{HH 	
tryII 
{JJ 
intKK 
valueKK 
=KK 
intKK 
.KK  
ParseKK  %
(KK% &
dataKK& *
)KK* +
;KK+ ,
}LL 
catchMM 
(MM 
FormatExceptionMM "
exceptNumberFormatMM# 5
)MM5 6
{NN 
IOPP 
.PP 
LoggerPP 
.PP 
LogPP 
(PP 
NLogPP "
.PP" #
LogLevelPP# +
.PP+ ,
WarnPP, 0
,PP0 1
exceptNumberFormatPP2 D
,PPD E
$strPPF `
+PPa b
dataPPc g
)PPg h
;PPh i
}QQ 
}RR 	
}SS 
privateVV 
voidVV 
GoodB2GVV 
(VV 
)VV 
{WW 
stringXX 
dataXX 
;XX 
dataYY 
=YY 
$strYY 
;YY 
{ZZ 	
try\\ 
{]] 
data__ 
=__ 
Console__ 
.__ 
ReadLine__ '
(__' (
)__( )
;__) *
}`` 
catchaa 
(aa 
IOExceptionaa 
exceptIOaa '
)aa' (
{bb 
IOcc 
.cc 
Loggercc 
.cc 
Logcc 
(cc 
NLogcc "
.cc" #
LogLevelcc# +
.cc+ ,
Warncc, 0
,cc0 1
exceptIOcc2 :
,cc: ;
$strcc< W
)ccW X
;ccX Y
}dd 
}ee 	
forff 
(ff 
intff 
kff 
=ff 
$numff 
;ff 
kff 
<ff 
$numff 
;ff 
kff  
++ff  "
)ff" #
{gg 	
tryhh 
{ii 
intjj 
valuejj 
=jj 
intjj 
.jj  
Parsejj  %
(jj% &
datajj& *
)jj* +
;jj+ ,
}kk 
catchll 
(ll 
FormatExceptionll "
exceptNumberFormatll# 5
)ll5 6
{mm 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
exceptNumberFormatoo2 D
,ooD E
$strooF j
+ook l
exceptNumberFormatoom 
)	oo 
;
oo 
}pp 
}qq 	
}rr 
publictt 

overridett 
voidtt 
Goodtt 
(tt 
)tt 
{uu 
GoodG2Bvv 
(vv 
)vv 
;vv 
GoodB2Gww 
(ww 
)ww 
;ww 
}xx 
}zz 
}{{ ÃG
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_21.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_21 A
:B C
AbstractTestCaseD T
{ 
private 
bool 

badPrivate 
= 
false #
;# $
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{%% 	
try'' 
{(( 
data** 
=** 
Console** 
.** 
ReadLine** '
(**' (
)**( )
;**) *
}++ 
catch,, 
(,, 
IOException,, 
exceptIO,, '
),,' (
{-- 
IO.. 
... 
Logger.. 
... 
Log.. 
(.. 
NLog.. "
..." #
LogLevel..# +
...+ ,
Warn.., 0
,..0 1
exceptIO..2 :
,..: ;
$str..< W
)..W X
;..X Y
}// 
}00 	

badPrivate11 
=11 
true11 
;11 
BadSink22 
(22 
data22 
)22 
;22 
}33 
private55 
void55 
BadSink55 
(55 
string55 
data55  $
)55% &
{66 
if77 

(77 

badPrivate77 
)77 
{88 	
try99 
{:: 
int;; 
value;; 
=;; 
int;; 
.;;  
Parse;;  %
(;;% &
data;;& *
);;* +
;;;+ ,
}<< 
catch== 
(== 
FormatException== "
exceptNumberFormat==# 5
)==5 6
{>> 
IO@@ 
.@@ 
Logger@@ 
.@@ 
Log@@ 
(@@ 
NLog@@ "
.@@" #
LogLevel@@# +
.@@+ ,
Warn@@, 0
,@@0 1
exceptNumberFormat@@2 D
,@@D E
$str@@F `
+@@a b
data@@c g
)@@g h
;@@h i
}AA 
}BB 	
}CC 
privateFF 
boolFF 
goodB2G1PrivateFF  
=FF! "
falseFF# (
;FF( )
privateGG 
boolGG 
goodB2G2PrivateGG  
=GG! "
falseGG# (
;GG( )
privateHH 
boolHH 
goodG2BPrivateHH 
=HH  !
falseHH" '
;HH' (
publicJJ 

overrideJJ 
voidJJ 
GoodJJ 
(JJ 
)JJ 
{KK 
GoodB2G1LL 
(LL 
)LL 
;LL 
GoodB2G2MM 
(MM 
)MM 
;MM 
GoodG2BNN 
(NN 
)NN 
;NN 
}OO 
privateRR 
voidRR 
GoodB2G1RR 
(RR 
)RR 
{SS 
stringTT 
dataTT 
;TT 
dataUU 
=UU 
$strUU 
;UU 
{VV 	
tryXX 
{YY 
data[[ 
=[[ 
Console[[ 
.[[ 
ReadLine[[ '
([[' (
)[[( )
;[[) *
}\\ 
catch]] 
(]] 
IOException]] 
exceptIO]] '
)]]' (
{^^ 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
exceptIO__2 :
,__: ;
$str__< W
)__W X
;__X Y
}`` 
}aa 	
goodB2G1Privatebb 
=bb 
falsebb 
;bb  
GoodB2G1Sinkcc 
(cc 
datacc 
)cc 
;cc 
}dd 
privateff 
voidff 
GoodB2G1Sinkff 
(ff 
stringff $
dataff% )
)ff* +
{gg 
ifhh 

(hh 
goodB2G1Privatehh 
)hh 
{ii 	
IOkk 
.kk 
	WriteLinekk 
(kk 
$strkk /
)kk/ 0
;kk0 1
}ll 	
elsemm 
{nn 	
tryoo 
{pp 
intqq 
valueqq 
=qq 
intqq 
.qq  
Parseqq  %
(qq% &
dataqq& *
)qq* +
;qq+ ,
}rr 
catchss 
(ss 
FormatExceptionss "
exceptNumberFormatss# 5
)ss5 6
{tt 
IOvv 
.vv 
Loggervv 
.vv 
Logvv 
(vv 
NLogvv "
.vv" #
LogLevelvv# +
.vv+ ,
Warnvv, 0
,vv0 1
exceptNumberFormatvv2 D
,vvD E
$strvvF j
+vvk l
exceptNumberFormatvvm 
)	vv 
;
vv 
}ww 
}xx 	
}yy 
private|| 
void|| 
GoodB2G2|| 
(|| 
)|| 
{}} 
string~~ 
data~~ 
;~~ 
data 
= 
$str 
; 
{
 	
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
exceptIO
2 :
,
: ;
$str
< W
)
W X
;
X Y
}
 
}
 	
goodB2G2Private
 
=
 
true
 
;
 
GoodB2G2Sink
 
(
 
data
 
)
 
;
 
}
 
private
 
void
 
GoodB2G2Sink
 
(
 
string
 $
data
% )
)
* +
{
 
if
 

(
 
goodB2G2Private
 
)
 
{
 	
try
 
{
 
int
 
value
 
=
 
int
 
.
  
Parse
  %
(
% &
data
& *
)
* +
;
+ ,
}
 
catch
 
(
 
FormatException
 " 
exceptNumberFormat
# 5
)
5 6
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1 
exceptNumberFormat
2 D
,
D E
$str
F j
+
k l 
exceptNumberFormat
m 
) 
; 
}
 
}
 	
}
 
private
¡¡ 
void
¡¡ 
GoodG2B
¡¡ 
(
¡¡ 
)
¡¡ 
{
¢¢ 
string
££ 
data
££ 
;
££ 
data
¥¥ 
=
¥¥ 
$str
¥¥ 
;
¥¥ 
goodG2BPrivate
¦¦ 
=
¦¦ 
true
¦¦ 
;
¦¦ 
GoodG2BSink
§§ 
(
§§ 
data
§§ 
)
§§ 
;
§§ 
}
¨¨ 
private
ªª 
void
ªª 
GoodG2BSink
ªª 
(
ªª 
string
ªª #
data
ªª$ (
)
ªª) *
{
«« 
if
¬¬ 

(
¬¬ 
goodG2BPrivate
¬¬ 
)
¬¬ 
{
­­ 	
try
®® 
{
¯¯ 
int
°° 
value
°° 
=
°° 
int
°° 
.
°°  
Parse
°°  %
(
°°% &
data
°°& *
)
°°* +
;
°°+ ,
}
±± 
catch
²² 
(
²² 
FormatException
²² " 
exceptNumberFormat
²²# 5
)
²²5 6
{
³³ 
IO
µµ 
.
µµ 
Logger
µµ 
.
µµ 
Log
µµ 
(
µµ 
NLog
µµ "
.
µµ" #
LogLevel
µµ# +
.
µµ+ ,
Warn
µµ, 0
,
µµ0 1 
exceptNumberFormat
µµ2 D
,
µµD E
$str
µµF `
+
µµa b
data
µµc g
)
µµg h
;
µµh i
}
¶¶ 
}
·· 	
}
¸¸ 
}ºº 
}»» ª*
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_22a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_22a B
:C D
AbstractTestCaseE U
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
=## 
null## 
;## 
data$$ 
=$$ 
$str$$ 
;$$ 
{%% 	
try'' 
{(( 
data** 
=** 
Console** 
.** 
ReadLine** '
(**' (
)**( )
;**) *
}++ 
catch,, 
(,, 
IOException,, 
exceptIO,, '
),,' (
{-- 
IO.. 
... 
Logger.. 
... 
Log.. 
(.. 
NLog.. "
..." #
LogLevel..# +
...+ ,
Warn.., 0
,..0 1
exceptIO..2 :
,..: ;
$str..< W
)..W X
;..X Y
}// 
}00 	
badPublicStatic11 
=11 
true11 
;11 H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_22b22 D
.22D E
BadSink22E L
(22L M
data22M Q
)22R S
;22S T
}33 
public66 

static66 
bool66  
goodB2G1PublicStatic66 +
=66, -
false66. 3
;663 4
public77 

static77 
bool77  
goodB2G2PublicStatic77 +
=77, -
false77. 3
;773 4
public88 

static88 
bool88 
goodG2BPublicStatic88 *
=88+ ,
false88- 2
;882 3
public:: 

override:: 
void:: 
Good:: 
(:: 
):: 
{;; 
GoodB2G1<< 
(<< 
)<< 
;<< 
GoodB2G2== 
(== 
)== 
;== 
GoodG2B>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
voidBB 
GoodB2G1BB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
=DD 
nullDD 
;DD 
dataEE 
=EE 
$strEE 
;EE 
{FF 	
tryHH 
{II 
dataKK 
=KK 
ConsoleKK 
.KK 
ReadLineKK '
(KK' (
)KK( )
;KK) *
}LL 
catchMM 
(MM 
IOExceptionMM 
exceptIOMM '
)MM' (
{NN 
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO "
.OO" #
LogLevelOO# +
.OO+ ,
WarnOO, 0
,OO0 1
exceptIOOO2 :
,OO: ;
$strOO< W
)OOW X
;OOX Y
}PP 
}QQ 	 
goodB2G1PublicStaticRR 
=RR 
falseRR $
;RR$ %H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_22bSS D
.SSD E
GoodB2G1SinkSSE Q
(SSQ R
dataSSR V
)SSW X
;SSX Y
}TT 
privateWW 
voidWW 
GoodB2G2WW 
(WW 
)WW 
{XX 
stringYY 
dataYY 
=YY 
nullYY 
;YY 
dataZZ 
=ZZ 
$strZZ 
;ZZ 
{[[ 	
try]] 
{^^ 
data`` 
=`` 
Console`` 
.`` 
ReadLine`` '
(``' (
)``( )
;``) *
}aa 
catchbb 
(bb 
IOExceptionbb 
exceptIObb '
)bb' (
{cc 
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd "
.dd" #
LogLeveldd# +
.dd+ ,
Warndd, 0
,dd0 1
exceptIOdd2 :
,dd: ;
$strdd< W
)ddW X
;ddX Y
}ee 
}ff 	 
goodB2G2PublicStaticgg 
=gg 
truegg #
;gg# $H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_22bhh D
.hhD E
GoodB2G2SinkhhE Q
(hhQ R
datahhR V
)hhW X
;hhX Y
}ii 
privatell 
voidll 
GoodG2Bll 
(ll 
)ll 
{mm 
stringnn 
datann 
=nn 
nullnn 
;nn 
datapp 
=pp 
$strpp 
;pp 
goodG2BPublicStaticqq 
=qq 
trueqq "
;qq" #H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_22brr D
.rrD E
GoodG2BSinkrrE P
(rrP Q
datarrQ U
)rrV W
;rrW X
}ss 
}uu 
}vv È(
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_22b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_22b B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
if 

( H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_22a H
.H I
badPublicStaticI X
)X Y
{ 	
try   
{!! 
int"" 
value"" 
="" 
int"" 
.""  
Parse""  %
(""% &
data""& *
)""* +
;""+ ,
}## 
catch$$ 
($$ 
FormatException$$ "
exceptNumberFormat$$# 5
)$$5 6
{%% 
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' "
.''" #
LogLevel''# +
.''+ ,
Warn'', 0
,''0 1
exceptNumberFormat''2 D
,''D E
$str''F `
+''a b
data''c g
)''g h
;''h i
}(( 
})) 	
else** 
{++ 	
data.. 
=.. 
null.. 
;.. 
}// 	
}00 
public55 

static55 
void55 
GoodB2G1Sink55 #
(55# $
string55$ *
data55+ /
)550 1
{66 
if77 

(77 H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_22a77 H
.77H I 
goodB2G1PublicStatic77I ]
)77] ^
{88 	
data;; 
=;; 
null;; 
;;; 
}<< 	
else== 
{>> 	
try?? 
{@@ 
intAA 
valueAA 
=AA 
intAA 
.AA  
ParseAA  %
(AA% &
dataAA& *
)AA* +
;AA+ ,
}BB 
catchCC 
(CC 
FormatExceptionCC "
exceptNumberFormatCC# 5
)CC5 6
{DD 
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF "
.FF" #
LogLevelFF# +
.FF+ ,
WarnFF, 0
,FF0 1
exceptNumberFormatFF2 D
,FFD E
$strFFF j
+FFk l
exceptNumberFormatFFm 
)	FF 
;
FF 
}GG 
}HH 	
}II 
publicLL 

staticLL 
voidLL 
GoodB2G2SinkLL #
(LL# $
stringLL$ *
dataLL+ /
)LL0 1
{MM 
ifNN 

(NN H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_22aNN H
.NNH I 
goodB2G2PublicStaticNNI ]
)NN] ^
{OO 	
tryPP 
{QQ 
intRR 
valueRR 
=RR 
intRR 
.RR  
ParseRR  %
(RR% &
dataRR& *
)RR* +
;RR+ ,
}SS 
catchTT 
(TT 
FormatExceptionTT "
exceptNumberFormatTT# 5
)TT5 6
{UU 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptNumberFormatWW2 D
,WWD E
$strWWF j
+WWk l
exceptNumberFormatWWm 
)	WW 
;
WW 
}XX 
}YY 	
elseZZ 
{[[ 	
data^^ 
=^^ 
null^^ 
;^^ 
}__ 	
}`` 
publiccc 

staticcc 
voidcc 
GoodG2BSinkcc "
(cc" #
stringcc# )
datacc* .
)cc/ 0
{dd 
ifee 

(ee H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_22aee H
.eeH I
goodG2BPublicStaticeeI \
)ee\ ]
{ff 	
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF `
+nna b
datannc g
)nng h
;nnh i
}oo 
}pp 	
elseqq 
{rr 	
datauu 
=uu 
nulluu 
;uu 
}vv 	
}ww 
}yy 
}zz ,
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_31.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_31 A
:B C
AbstractTestCaseD T
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
dataCopy   
;   
{!! 	
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{$$ 
try&& 
{'' 
data)) 
=)) 
Console)) "
.))" #
ReadLine))# +
())+ ,
))), -
;))- .
}** 
catch++ 
(++ 
IOException++ "
exceptIO++# +
)+++ ,
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- !
(--! "
NLog--" &
.--& '
LogLevel--' /
.--/ 0
Warn--0 4
,--4 5
exceptIO--6 >
,--> ?
$str--@ [
)--[ \
;--\ ]
}.. 
}// 
dataCopy00 
=00 
data00 
;00 
}11 	
{22 	
string33 
data33 
=33 
dataCopy33 "
;33" #
try44 
{55 
int66 
value66 
=66 
int66 
.66  
Parse66  %
(66% &
data66& *
)66* +
;66+ ,
}77 
catch88 
(88 
FormatException88 "
exceptNumberFormat88# 5
)885 6
{99 
IO;; 
.;; 
Logger;; 
.;; 
Log;; 
(;; 
NLog;; "
.;;" #
LogLevel;;# +
.;;+ ,
Warn;;, 0
,;;0 1
exceptNumberFormat;;2 D
,;;D E
$str;;F `
+;;a b
data;;c g
);;g h
;;;h i
}<< 
}== 	
}>> 
publicAA 

overrideAA 
voidAA 
GoodAA 
(AA 
)AA 
{BB 
GoodG2BCC 
(CC 
)CC 
;CC 
GoodB2GDD 
(DD 
)DD 
;DD 
}EE 
privateHH 
voidHH 
GoodG2BHH 
(HH 
)HH 
{II 
stringJJ 
dataCopyJJ 
;JJ 
{KK 	
stringLL 
dataLL 
;LL 
dataNN 
=NN 
$strNN 
;NN 
dataCopyOO 
=OO 
dataOO 
;OO 
}PP 	
{QQ 	
stringRR 
dataRR 
=RR 
dataCopyRR "
;RR" #
trySS 
{TT 
intUU 
valueUU 
=UU 
intUU 
.UU  
ParseUU  %
(UU% &
dataUU& *
)UU* +
;UU+ ,
}VV 
catchWW 
(WW 
FormatExceptionWW "
exceptNumberFormatWW# 5
)WW5 6
{XX 
IOZZ 
.ZZ 
LoggerZZ 
.ZZ 
LogZZ 
(ZZ 
NLogZZ "
.ZZ" #
LogLevelZZ# +
.ZZ+ ,
WarnZZ, 0
,ZZ0 1
exceptNumberFormatZZ2 D
,ZZD E
$strZZF `
+ZZa b
dataZZc g
)ZZg h
;ZZh i
}[[ 
}\\ 	
}]] 
private`` 
void`` 
GoodB2G`` 
(`` 
)`` 
{aa 
stringbb 
dataCopybb 
;bb 
{cc 	
stringdd 
datadd 
;dd 
dataee 
=ee 
$stree 
;ee 
{ff 
tryhh 
{ii 
datakk 
=kk 
Consolekk "
.kk" #
ReadLinekk# +
(kk+ ,
)kk, -
;kk- .
}ll 
catchmm 
(mm 
IOExceptionmm "
exceptIOmm# +
)mm+ ,
{nn 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo !
(oo! "
NLogoo" &
.oo& '
LogLeveloo' /
.oo/ 0
Warnoo0 4
,oo4 5
exceptIOoo6 >
,oo> ?
$stroo@ [
)oo[ \
;oo\ ]
}pp 
}qq 
dataCopyrr 
=rr 
datarr 
;rr 
}ss 	
{tt 	
stringuu 
datauu 
=uu 
dataCopyuu "
;uu" #
tryvv 
{ww 
intxx 
valuexx 
=xx 
intxx 
.xx  
Parsexx  %
(xx% &
dataxx& *
)xx* +
;xx+ ,
}yy 
catchzz 
(zz 
FormatExceptionzz "
exceptNumberFormatzz# 5
)zz5 6
{{{ 
IO}} 
.}} 
Logger}} 
.}} 
Log}} 
(}} 
NLog}} "
.}}" #
LogLevel}}# +
.}}+ ,
Warn}}, 0
,}}0 1
exceptNumberFormat}}2 D
,}}D E
$str}}F j
+}}k l
exceptNumberFormat}}m 
)	}} 
;
}} 
}~~ 
} 	
}
 
} 
} ,
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_41.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_41 A
:B C
AbstractTestCaseD T
{ 
private 
static 
void 
BadSink 
(  
string  &
data' +
), -
{ 
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public++ 

override++ 
void++ 
Bad++ 
(++ 
)++ 
{,, 
string-- 
data-- 
;-- 
data.. 
=.. 
$str.. 
;.. 
{// 	
try11 
{22 
data44 
=44 
Console44 
.44 
ReadLine44 '
(44' (
)44( )
;44) *
}55 
catch66 
(66 
IOException66 
exceptIO66 '
)66' (
{77 
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 "
.88" #
LogLevel88# +
.88+ ,
Warn88, 0
,880 1
exceptIO882 :
,88: ;
$str88< W
)88W X
;88X Y
}99 
}:: 	
BadSink;; 
(;; 
data;; 
);; 
;;; 
}<< 
public?? 

override?? 
void?? 
Good?? 
(?? 
)?? 
{@@ 
GoodG2BAA 
(AA 
)AA 
;AA 
GoodB2GBB 
(BB 
)BB 
;BB 
}CC 
privateEE 
staticEE 
voidEE 
GoodG2BSinkEE #
(EE# $
stringEE$ *
dataEE+ /
)EE0 1
{FF 
tryGG 
{HH 	
intII 
valueII 
=II 
intII 
.II 
ParseII !
(II! "
dataII" &
)II& '
;II' (
}JJ 	
catchKK 
(KK 
FormatExceptionKK 
exceptNumberFormatKK 1
)KK1 2
{LL 	
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN 
.NN 
LogLevelNN '
.NN' (
WarnNN( ,
,NN, -
exceptNumberFormatNN. @
,NN@ A
$strNNB \
+NN] ^
dataNN_ c
)NNc d
;NNd e
}OO 	
}PP 
privateSS 
staticSS 
voidSS 
GoodG2BSS 
(SS  
)SS  !
{TT 
stringUU 
dataUU 
;UU 
dataWW 
=WW 
$strWW 
;WW 
GoodG2BSinkXX 
(XX 
dataXX 
)XX 
;XX 
}YY 
private[[ 
static[[ 
void[[ 
GoodB2GSink[[ #
([[# $
string[[$ *
data[[+ /
)[[0 1
{\\ 
try]] 
{^^ 	
int__ 
value__ 
=__ 
int__ 
.__ 
Parse__ !
(__! "
data__" &
)__& '
;__' (
}`` 	
catchaa 
(aa 
FormatExceptionaa 
exceptNumberFormataa 1
)aa1 2
{bb 	
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd 
.dd 
LogLeveldd '
.dd' (
Warndd( ,
,dd, -
exceptNumberFormatdd. @
,dd@ A
$strddB f
+ddg h
exceptNumberFormatddi {
)dd{ |
;dd| }
}ee 	
}ff 
privateii 
staticii 
voidii 
GoodB2Gii 
(ii  
)ii  !
{jj 
stringkk 
datakk 
;kk 
datall 
=ll 
$strll 
;ll 
{mm 	
tryoo 
{pp 
datarr 
=rr 
Consolerr 
.rr 
ReadLinerr '
(rr' (
)rr( )
;rr) *
}ss 
catchtt 
(tt 
IOExceptiontt 
exceptIOtt '
)tt' (
{uu 
IOvv 
.vv 
Loggervv 
.vv 
Logvv 
(vv 
NLogvv "
.vv" #
LogLevelvv# +
.vv+ ,
Warnvv, 0
,vv0 1
exceptIOvv2 :
,vv: ;
$strvv< W
)vvW X
;vvX Y
}ww 
}xx 	
GoodB2GSinkyy 
(yy 
datayy 
)yy 
;yy 
}zz 
}|| 
}}} È-
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_42.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_42 A
:B C
AbstractTestCaseD T
{ 
private 
static 
string 
	BadSource #
(# $
)$ %
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try$$ 
{%% 
data'' 
='' 
Console'' 
.'' 
ReadLine'' '
(''' (
)''( )
;'') *
}(( 
catch)) 
()) 
IOException)) 
exceptIO)) '
)))' (
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
exceptIO++2 :
,++: ;
$str++< W
)++W X
;++X Y
},, 
}-- 	
return.. 
data.. 
;.. 
}// 
public11 

override11 
void11 
Bad11 
(11 
)11 
{22 
string33 
data33 
=33 
	BadSource33 
(33  
)33  !
;33! "
try44 
{55 	
int66 
value66 
=66 
int66 
.66 
Parse66 !
(66! "
data66" &
)66& '
;66' (
}77 	
catch88 
(88 
FormatException88 
exceptNumberFormat88 1
)881 2
{99 	
IO;; 
.;; 
Logger;; 
.;; 
Log;; 
(;; 
NLog;; 
.;; 
LogLevel;; '
.;;' (
Warn;;( ,
,;;, -
exceptNumberFormat;;. @
,;;@ A
$str;;B \
+;;] ^
data;;_ c
);;c d
;;;d e
}<< 	
}== 
privateAA 
staticAA 
stringAA 
GoodG2BSourceAA '
(AA' (
)AA( )
{BB 
stringCC 
dataCC 
;CC 
dataEE 
=EE 
$strEE 
;EE 
returnFF 
dataFF 
;FF 
}GG 
privateII 
staticII 
voidII 
GoodG2BII 
(II  
)II  !
{JJ 
stringKK 
dataKK 
=KK 
GoodG2BSourceKK #
(KK# $
)KK$ %
;KK% &
tryLL 
{MM 	
intNN 
valueNN 
=NN 
intNN 
.NN 
ParseNN !
(NN! "
dataNN" &
)NN& '
;NN' (
}OO 	
catchPP 
(PP 
FormatExceptionPP 
exceptNumberFormatPP 1
)PP1 2
{QQ 	
IOSS 
.SS 
LoggerSS 
.SS 
LogSS 
(SS 
NLogSS 
.SS 
LogLevelSS '
.SS' (
WarnSS( ,
,SS, -
exceptNumberFormatSS. @
,SS@ A
$strSSB \
+SS] ^
dataSS_ c
)SSc d
;SSd e
}TT 	
}UU 
privateXX 
staticXX 
stringXX 
GoodB2GSourceXX '
(XX' (
)XX( )
{YY 
stringZZ 
dataZZ 
;ZZ 
data[[ 
=[[ 
$str[[ 
;[[ 
{\\ 	
try^^ 
{__ 
dataaa 
=aa 
Consoleaa 
.aa 
ReadLineaa '
(aa' (
)aa( )
;aa) *
}bb 
catchcc 
(cc 
IOExceptioncc 
exceptIOcc '
)cc' (
{dd 
IOee 
.ee 
Loggeree 
.ee 
Logee 
(ee 
NLogee "
.ee" #
LogLevelee# +
.ee+ ,
Warnee, 0
,ee0 1
exceptIOee2 :
,ee: ;
$stree< W
)eeW X
;eeX Y
}ff 
}gg 	
returnhh 
datahh 
;hh 
}ii 
privatekk 
statickk 
voidkk 
GoodB2Gkk 
(kk  
)kk  !
{ll 
stringmm 
datamm 
=mm 
GoodB2GSourcemm #
(mm# $
)mm$ %
;mm% &
trynn 
{oo 	
intpp 
valuepp 
=pp 
intpp 
.pp 
Parsepp !
(pp! "
datapp" &
)pp& '
;pp' (
}qq 	
catchrr 
(rr 
FormatExceptionrr 
exceptNumberFormatrr 1
)rr1 2
{ss 	
IOuu 
.uu 
Loggeruu 
.uu 
Loguu 
(uu 
NLoguu 
.uu 
LogLeveluu '
.uu' (
Warnuu( ,
,uu, -
exceptNumberFormatuu. @
,uu@ A
$struuB f
+uug h
exceptNumberFormatuui {
)uu{ |
;uu| }
}vv 	
}ww 
publicyy 

overrideyy 
voidyy 
Goodyy 
(yy 
)yy 
{zz 
GoodG2B{{ 
({{ 
){{ 
;{{ 
GoodB2G|| 
(|| 
)|| 
;|| 
}}} 
} 
} 0
ÈC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_45.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class G
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_45 A
:B C
AbstractTestCaseD T
{ 
private 
string 
dataBad 
; 
private 
string 
dataGoodG2B 
; 
private   
string   
dataGoodB2G   
;   
private"" 
void"" 
BadSink"" 
("" 
)"" 
{## 
string$$ 
data$$ 
=$$ 
dataBad$$ 
;$$ 
try%% 
{&& 	
int'' 
value'' 
='' 
int'' 
.'' 
Parse'' !
(''! "
data''" &
)''& '
;''' (
}(( 	
catch)) 
()) 
FormatException)) 
exceptNumberFormat)) 1
)))1 2
{** 	
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, 
.,, 
LogLevel,, '
.,,' (
Warn,,( ,
,,,, -
exceptNumberFormat,,. @
,,,@ A
$str,,B \
+,,] ^
data,,_ c
),,c d
;,,d e
}-- 	
}.. 
public00 

override00 
void00 
Bad00 
(00 
)00 
{11 
string22 
data22 
;22 
data33 
=33 
$str33 
;33 
{44 	
try66 
{77 
data99 
=99 
Console99 
.99 
ReadLine99 '
(99' (
)99( )
;99) *
}:: 
catch;; 
(;; 
IOException;; 
exceptIO;; '
);;' (
{<< 
IO== 
.== 
Logger== 
.== 
Log== 
(== 
NLog== "
.==" #
LogLevel==# +
.==+ ,
Warn==, 0
,==0 1
exceptIO==2 :
,==: ;
$str==< W
)==W X
;==X Y
}>> 
}?? 	
dataBad@@ 
=@@ 
data@@ 
;@@ 
BadSinkAA 
(AA 
)AA 
;AA 
}BB 
publicEE 

overrideEE 
voidEE 
GoodEE 
(EE 
)EE 
{FF 
GoodG2BGG 
(GG 
)GG 
;GG 
GoodB2GHH 
(HH 
)HH 
;HH 
}II 
privateKK 
voidKK 
GoodG2BSinkKK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
=MM 
dataGoodG2BMM !
;MM! "
tryNN 
{OO 	
intPP 
valuePP 
=PP 
intPP 
.PP 
ParsePP !
(PP! "
dataPP" &
)PP& '
;PP' (
}QQ 	
catchRR 
(RR 
FormatExceptionRR 
exceptNumberFormatRR 1
)RR1 2
{SS 	
IOUU 
.UU 
LoggerUU 
.UU 
LogUU 
(UU 
NLogUU 
.UU 
LogLevelUU '
.UU' (
WarnUU( ,
,UU, -
exceptNumberFormatUU. @
,UU@ A
$strUUB \
+UU] ^
dataUU_ c
)UUc d
;UUd e
}VV 	
}WW 
privateZZ 
voidZZ 
GoodG2BZZ 
(ZZ 
)ZZ 
{[[ 
string\\ 
data\\ 
;\\ 
data^^ 
=^^ 
$str^^ 
;^^ 
dataGoodG2B__ 
=__ 
data__ 
;__ 
GoodG2BSink`` 
(`` 
)`` 
;`` 
}aa 
privatecc 
voidcc 
GoodB2GSinkcc 
(cc 
)cc 
{dd 
stringee 
dataee 
=ee 
dataGoodB2Gee !
;ee! "
tryff 
{gg 	
inthh 
valuehh 
=hh 
inthh 
.hh 
Parsehh !
(hh! "
datahh" &
)hh& '
;hh' (
}ii 	
catchjj 
(jj 
FormatExceptionjj 
exceptNumberFormatjj 1
)jj1 2
{kk 	
IOmm 
.mm 
Loggermm 
.mm 
Logmm 
(mm 
NLogmm 
.mm 
LogLevelmm '
.mm' (
Warnmm( ,
,mm, -
exceptNumberFormatmm. @
,mm@ A
$strmmB f
+mmg h
exceptNumberFormatmmi {
)mm{ |
;mm| }
}nn 	
}oo 
privaterr 
voidrr 
GoodB2Grr 
(rr 
)rr 
{ss 
stringtt 
datatt 
;tt 
datauu 
=uu 
$struu 
;uu 
{vv 	
tryxx 
{yy 
data{{ 
={{ 
Console{{ 
.{{ 
ReadLine{{ '
({{' (
){{( )
;{{) *
}|| 
catch}} 
(}} 
IOException}} 
exceptIO}} '
)}}' (
{~~ 
IO 
. 
Logger 
. 
Log 
( 
NLog "
." #
LogLevel# +
.+ ,
Warn, 0
,0 1
exceptIO2 :
,: ;
$str< W
)W X
;X Y
}
 
}
 	
dataGoodB2G
 
=
 
data
 
;
 
GoodB2GSink
 
(
 
)
 
;
 
}
 
} 
} Ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_51a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_51a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try$$ 
{%% 
data'' 
='' 
Console'' 
.'' 
ReadLine'' '
(''' (
)''( )
;'') *
}(( 
catch)) 
()) 
IOException)) 
exceptIO)) '
)))' (
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
exceptIO++2 :
,++: ;
$str++< W
)++W X
;++X Y
},, 
}-- 	H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_51b.. D
...D E
BadSink..E L
(..L M
data..M Q
)..S T
;..T U
}// 
public22 

override22 
void22 
Good22 
(22 
)22 
{33 
GoodG2B44 
(44 
)44 
;44 
GoodB2G55 
(55 
)55 
;55 
}66 
private99 
void99 
GoodG2B99 
(99 
)99 
{:: 
string;; 
data;; 
;;; 
data== 
=== 
$str== 
;== H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_51b>> D
.>>D E
GoodG2BSink>>E P
(>>P Q
data>>Q U
)>>W X
;>>X Y
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
dataEE 
=EE 
$strEE 
;EE 
{FF 	
tryHH 
{II 
dataKK 
=KK 
ConsoleKK 
.KK 
ReadLineKK '
(KK' (
)KK( )
;KK) *
}LL 
catchMM 
(MM 
IOExceptionMM 
exceptIOMM '
)MM' (
{NN 
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO "
.OO" #
LogLevelOO# +
.OO+ ,
WarnOO, 0
,OO0 1
exceptIOOO2 :
,OO: ;
$strOO< W
)OOW X
;OOX Y
}PP 
}QQ 	H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_51bRR D
.RRD E
GoodB2GSinkRRE P
(RRP Q
dataRRQ U
)RRW X
;RRX Y
}SS 
}UU 
}VV ö
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_51b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_51b B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH Ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_52a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_52a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try$$ 
{%% 
data'' 
='' 
Console'' 
.'' 
ReadLine'' '
(''' (
)''( )
;'') *
}(( 
catch)) 
()) 
IOException)) 
exceptIO)) '
)))' (
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
exceptIO++2 :
,++: ;
$str++< W
)++W X
;++X Y
},, 
}-- 	H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_52b.. D
...D E
BadSink..E L
(..L M
data..M Q
)..R S
;..S T
}// 
public22 

override22 
void22 
Good22 
(22 
)22 
{33 
GoodG2B44 
(44 
)44 
;44 
GoodB2G55 
(55 
)55 
;55 
}66 
private99 
void99 
GoodG2B99 
(99 
)99 
{:: 
string;; 
data;; 
;;; 
data== 
=== 
$str== 
;== H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_52b>> D
.>>D E
GoodG2BSink>>E P
(>>P Q
data>>Q U
)>>V W
;>>W X
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
dataEE 
=EE 
$strEE 
;EE 
{FF 	
tryHH 
{II 
dataKK 
=KK 
ConsoleKK 
.KK 
ReadLineKK '
(KK' (
)KK( )
;KK) *
}LL 
catchMM 
(MM 
IOExceptionMM 
exceptIOMM '
)MM' (
{NN 
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO "
.OO" #
LogLevelOO# +
.OO+ ,
WarnOO, 0
,OO0 1
exceptIOOO2 :
,OO: ;
$strOO< W
)OOW X
;OOX Y
}PP 
}QQ 	H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_52bRR D
.RRD E
GoodB2GSinkRRE P
(RRP Q
dataRRQ U
)RRV W
;RRW X
}SS 
}UU 
}VV ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_52b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_52b B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_52c D
.D E
BadSinkE L
(L M
dataM Q
)R S
;S T
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_52c&& D
.&&D E
GoodG2BSink&&E P
(&&P Q
data&&Q U
)&&V W
;&&W X
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_52c,, D
.,,D E
GoodB2GSink,,E P
(,,P Q
data,,Q U
),,V W
;,,W X
}-- 
}// 
}00 ö
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_52c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_52c B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH Ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try$$ 
{%% 
data'' 
='' 
Console'' 
.'' 
ReadLine'' '
(''' (
)''( )
;'') *
}(( 
catch)) 
()) 
IOException)) 
exceptIO)) '
)))' (
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
exceptIO++2 :
,++: ;
$str++< W
)++W X
;++X Y
},, 
}-- 	H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53b.. D
...D E
BadSink..E L
(..L M
data..M Q
)..R S
;..S T
}// 
public22 

override22 
void22 
Good22 
(22 
)22 
{33 
GoodG2B44 
(44 
)44 
;44 
GoodB2G55 
(55 
)55 
;55 
}66 
private99 
void99 
GoodG2B99 
(99 
)99 
{:: 
string;; 
data;; 
;;; 
data== 
=== 
$str== 
;== H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53b>> D
.>>D E
GoodG2BSink>>E P
(>>P Q
data>>Q U
)>>V W
;>>W X
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
dataEE 
=EE 
$strEE 
;EE 
{FF 	
tryHH 
{II 
dataKK 
=KK 
ConsoleKK 
.KK 
ReadLineKK '
(KK' (
)KK( )
;KK) *
}LL 
catchMM 
(MM 
IOExceptionMM 
exceptIOMM '
)MM' (
{NN 
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO "
.OO" #
LogLevelOO# +
.OO+ ,
WarnOO, 0
,OO0 1
exceptIOOO2 :
,OO: ;
$strOO< W
)OOW X
;OOX Y
}PP 
}QQ 	H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53bRR D
.RRD E
GoodB2GSinkRRE P
(RRP Q
dataRRQ U
)RRV W
;RRW X
}SS 
}UU 
}VV ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53b B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53c D
.D E
BadSinkE L
(L M
dataM Q
)R S
;S T
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53c&& D
.&&D E
GoodG2BSink&&E P
(&&P Q
data&&Q U
)&&V W
;&&W X
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53c,, D
.,,D E
GoodB2GSink,,E P
(,,P Q
data,,Q U
),,V W
;,,W X
}-- 
}// 
}00 ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53c B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53d D
.D E
BadSinkE L
(L M
dataM Q
)R S
;S T
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53d&& D
.&&D E
GoodG2BSink&&E P
(&&P Q
data&&Q U
)&&V W
;&&W X
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53d,, D
.,,D E
GoodB2GSink,,E P
(,,P Q
data,,Q U
),,V W
;,,W X
}-- 
}// 
}00 ö
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53d B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH Ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try$$ 
{%% 
data'' 
='' 
Console'' 
.'' 
ReadLine'' '
(''' (
)''( )
;'') *
}(( 
catch)) 
()) 
IOException)) 
exceptIO)) '
)))' (
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
exceptIO++2 :
,++: ;
$str++< W
)++W X
;++X Y
},, 
}-- 	H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54b.. D
...D E
BadSink..E L
(..L M
data..M Q
)..R S
;..S T
}// 
public22 

override22 
void22 
Good22 
(22 
)22 
{33 
GoodG2B44 
(44 
)44 
;44 
GoodB2G55 
(55 
)55 
;55 
}66 
private99 
void99 
GoodG2B99 
(99 
)99 
{:: 
string;; 
data;; 
;;; 
data== 
=== 
$str== 
;== H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54b>> D
.>>D E
GoodG2BSink>>E P
(>>P Q
data>>Q U
)>>V W
;>>W X
}?? 
privateBB 
voidBB 
GoodB2GBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
dataEE 
=EE 
$strEE 
;EE 
{FF 	
tryHH 
{II 
dataKK 
=KK 
ConsoleKK 
.KK 
ReadLineKK '
(KK' (
)KK( )
;KK) *
}LL 
catchMM 
(MM 
IOExceptionMM 
exceptIOMM '
)MM' (
{NN 
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO "
.OO" #
LogLevelOO# +
.OO+ ,
WarnOO, 0
,OO0 1
exceptIOOO2 :
,OO: ;
$strOO< W
)OOW X
;OOX Y
}PP 
}QQ 	H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54bRR D
.RRD E
GoodB2GSinkRRE P
(RRP Q
dataRRQ U
)RRV W
;RRW X
}SS 
}UU 
}VV ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54b B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54c D
.D E
BadSinkE L
(L M
dataM Q
)R S
;S T
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54c&& D
.&&D E
GoodG2BSink&&E P
(&&P Q
data&&Q U
)&&V W
;&&W X
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54c,, D
.,,D E
GoodB2GSink,,E P
(,,P Q
data,,Q U
),,V W
;,,W X
}-- 
}// 
}00 ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54c.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54c B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54d D
.D E
BadSinkE L
(L M
dataM Q
)R S
;S T
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54d&& D
.&&D E
GoodG2BSink&&E P
(&&P Q
data&&Q U
)&&V W
;&&W X
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54d,, D
.,,D E
GoodB2GSink,,E P
(,,P Q
data,,Q U
),,V W
;,,W X
}-- 
}// 
}00 ü
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54d.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54d B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54e D
.D E
BadSinkE L
(L M
dataM Q
)R S
;S T
} 
public$$ 

static$$ 
void$$ 
GoodG2BSink$$ "
($$" #
string$$# )
data$$* .
)$$/ 0
{%% H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54e&& D
.&&D E
GoodG2BSink&&E P
(&&P Q
data&&Q U
)&&V W
;&&W X
}'' 
public** 

static** 
void** 
GoodB2GSink** "
(**" #
string**# )
data*** .
)**/ 0
{++ H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54e,, D
.,,D E
GoodB2GSink,,E P
(,,P Q
data,,Q U
),,V W
;,,W X
}-- 
}// 
}00 ö
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54e.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54e B
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
public,, 

static,, 
void,, 
GoodG2BSink,, "
(,," #
string,,# )
data,,* .
),,/ 0
{-- 
try.. 
{// 	
int00 
value00 
=00 
int00 
.00 
Parse00 !
(00! "
data00" &
)00& '
;00' (
}11 	
catch22 
(22 
FormatException22 
exceptNumberFormat22 1
)221 2
{33 	
IO55 
.55 
Logger55 
.55 
Log55 
(55 
NLog55 
.55 
LogLevel55 '
.55' (
Warn55( ,
,55, -
exceptNumberFormat55. @
,55@ A
$str55B \
+55] ^
data55_ c
)55c d
;55d e
}66 	
}77 
public:: 

static:: 
void:: 
GoodB2GSink:: "
(::" #
string::# )
data::* .
)::/ 0
{;; 
try<< 
{== 	
int>> 
value>> 
=>> 
int>> 
.>> 
Parse>> !
(>>! "
data>>" &
)>>& '
;>>' (
}?? 	
catch@@ 
(@@ 
FormatException@@ 
exceptNumberFormat@@ 1
)@@1 2
{AA 	
IOCC 
.CC 
LoggerCC 
.CC 
LogCC 
(CC 
NLogCC 
.CC 
LogLevelCC '
.CC' (
WarnCC( ,
,CC, -
exceptNumberFormatCC. @
,CC@ A
$strCCB f
+CCg h
exceptNumberFormatCCi {
)CC{ |
;CC| }
}DD 	
}EE 
}GG 
}HH µ
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_61a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_61a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
= H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_61b R
.R S
	BadSourceS \
(\ ]
)] ^
;^ _
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public++ 

override++ 
void++ 
Good++ 
(++ 
)++ 
{,, 
GoodG2B-- 
(-- 
)-- 
;-- 
GoodB2G.. 
(.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
)22  !
{33 
string44 
data44 
=44 H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_61b44 R
.44R S
GoodG2BSource44S `
(44` a
)44a b
;44b c
try55 
{66 	
int77 
value77 
=77 
int77 
.77 
Parse77 !
(77! "
data77" &
)77& '
;77' (
}88 	
catch99 
(99 
FormatException99 
exceptNumberFormat99 1
)991 2
{:: 	
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< 
.<< 
LogLevel<< '
.<<' (
Warn<<( ,
,<<, -
exceptNumberFormat<<. @
,<<@ A
$str<<B \
+<<] ^
data<<_ c
)<<c d
;<<d e
}== 	
}>> 
privateAA 
staticAA 
voidAA 
GoodB2GAA 
(AA  
)AA  !
{BB 
stringCC 
dataCC 
=CC H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_61bCC R
.CCR S
GoodB2GSourceCCS `
(CC` a
)CCa b
;CCb c
tryDD 
{EE 	
intFF 
valueFF 
=FF 
intFF 
.FF 
ParseFF !
(FF! "
dataFF" &
)FF& '
;FF' (
}GG 	
catchHH 
(HH 
FormatExceptionHH 
exceptNumberFormatHH 1
)HH1 2
{II 	
IOKK 
.KK 
LoggerKK 
.KK 
LogKK 
(KK 
NLogKK 
.KK 
LogLevelKK '
.KK' (
WarnKK( ,
,KK, -
exceptNumberFormatKK. @
,KK@ A
$strKKB f
+KKg h
exceptNumberFormatKKi {
)KK{ |
;KK| }
}LL 	
}MM 
}OO 
}PP í
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_61b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_61b B
{ 
public 

static 
string 
	BadSource "
(" #
)# $
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try$$ 
{%% 
data'' 
='' 
Console'' 
.'' 
ReadLine'' '
(''' (
)''( )
;'') *
}(( 
catch)) 
()) 
IOException)) 
exceptIO)) '
)))' (
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
exceptIO++2 :
,++: ;
$str++< W
)++W X
;++X Y
},, 
}-- 	
return.. 
data.. 
;.. 
}// 
public44 

static44 
string44 
GoodG2BSource44 &
(44& '
)44' (
{55 
string66 
data66 
;66 
data88 
=88 
$str88 
;88 
return99 
data99 
;99 
}:: 
public== 

static== 
string== 
GoodB2GSource== &
(==& '
)==' (
{>> 
string?? 
data?? 
;?? 
data@@ 
=@@ 
$str@@ 
;@@ 
{AA 	
tryCC 
{DD 
dataFF 
=FF 
ConsoleFF 
.FF 
ReadLineFF '
(FF' (
)FF( )
;FF) *
}GG 
catchHH 
(HH 
IOExceptionHH 
exceptIOHH '
)HH' (
{II 
IOJJ 
.JJ 
LoggerJJ 
.JJ 
LogJJ 
(JJ 
NLogJJ "
.JJ" #
LogLevelJJ# +
.JJ+ ,
WarnJJ, 0
,JJ0 1
exceptIOJJ2 :
,JJ: ;
$strJJ< W
)JJW X
;JJX Y
}KK 
}LL 	
returnMM 
dataMM 
;MM 
}NN 
}PP 
}QQ ¬!
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_66a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_66a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try$$ 
{%% 
data'' 
='' 
Console'' 
.'' 
ReadLine'' '
(''' (
)''( )
;'') *
}(( 
catch)) 
()) 
IOException)) 
exceptIO)) '
)))' (
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
exceptIO++2 :
,++: ;
$str++< W
)++W X
;++X Y
},, 
}-- 	
string.. 
[.. 
].. 
	dataArray.. 
=.. 
new..  
string..! '
[..' (
$num..( )
]..) *
;..* +
	dataArray// 
[// 
$num// 
]// 
=// 
data// 
;// H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_66b00 D
.00D E
BadSink00E L
(00L M
	dataArray00M V
)00X Y
;00Y Z
}11 
public44 

override44 
void44 
Good44 
(44 
)44 
{55 
GoodG2B66 
(66 
)66 
;66 
GoodB2G77 
(77 
)77 
;77 
}88 
private;; 
static;; 
void;; 
GoodG2B;; 
(;;  
);;  !
{<< 
string== 
data== 
;== 
data?? 
=?? 
$str?? 
;?? 
string@@ 
[@@ 
]@@ 
	dataArray@@ 
=@@ 
new@@  
string@@! '
[@@' (
$num@@( )
]@@) *
;@@* +
	dataArrayAA 
[AA 
$numAA 
]AA 
=AA 
dataAA 
;AA H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_66bBB D
.BBD E
GoodG2BSinkBBE P
(BBP Q
	dataArrayBBQ Z
)BB\ ]
;BB] ^
}CC 
privateFF 
staticFF 
voidFF 
GoodB2GFF 
(FF  
)FF  !
{GG 
stringHH 
dataHH 
;HH 
dataII 
=II 
$strII 
;II 
{JJ 	
tryLL 
{MM 
dataOO 
=OO 
ConsoleOO 
.OO 
ReadLineOO '
(OO' (
)OO( )
;OO) *
}PP 
catchQQ 
(QQ 
IOExceptionQQ 
exceptIOQQ '
)QQ' (
{RR 
IOSS 
.SS 
LoggerSS 
.SS 
LogSS 
(SS 
NLogSS "
.SS" #
LogLevelSS# +
.SS+ ,
WarnSS, 0
,SS0 1
exceptIOSS2 :
,SS: ;
$strSS< W
)SSW X
;SSX Y
}TT 
}UU 	
stringVV 
[VV 
]VV 
	dataArrayVV 
=VV 
newVV  
stringVV! '
[VV' (
$numVV( )
]VV) *
;VV* +
	dataArrayWW 
[WW 
$numWW 
]WW 
=WW 
dataWW 
;WW H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_66bXX D
.XXD E
GoodB2GSinkXXE P
(XXP Q
	dataArrayXXQ Z
)XX\ ]
;XX] ^
}YY 
}[[ 
}\\ 
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_66b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_66b B
{ 
public 

static 
void 
BadSink 
( 
string %
[% &
]& '
	dataArray( 1
)2 3
{ 
string 
data 
= 
	dataArray 
[  
$num  !
]! "
;" #
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
string--# )
[--) *
]--* +
	dataArray--, 5
)--6 7
{.. 
string// 
data// 
=// 
	dataArray// 
[//  
$num//  !
]//! "
;//" #
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
string<<# )
[<<) *
]<<* +
	dataArray<<, 5
)<<6 7
{== 
string>> 
data>> 
=>> 
	dataArray>> 
[>>  
$num>>  !
]>>! "
;>>" #
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK ê!
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_67a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_67a B
:C D
AbstractTestCaseE U
{ 
public 

class 
	Container 
{ 
public   
string   
containerOne   "
;  " #
}!! 
public## 

override## 
void## 
Bad## 
(## 
)## 
{$$ 
string%% 
data%% 
;%% 
data&& 
=&& 
$str&& 
;&& 
{'' 	
try)) 
{** 
data,, 
=,, 
Console,, 
.,, 
ReadLine,, '
(,,' (
),,( )
;,,) *
}-- 
catch.. 
(.. 
IOException.. 
exceptIO.. '
)..' (
{// 
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 "
.00" #
LogLevel00# +
.00+ ,
Warn00, 0
,000 1
exceptIO002 :
,00: ;
$str00< W
)00W X
;00X Y
}11 
}22 	
	Container33 
dataContainer33 
=33  !
new33" %
	Container33& /
(33/ 0
)330 1
;331 2
dataContainer44 
.44 
containerOne44 "
=44# $
data44% )
;44) *H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_67b55 D
.55D E
BadSink55E L
(55L M
dataContainer55M Z
)55\ ]
;55] ^
}66 
public99 

override99 
void99 
Good99 
(99 
)99 
{:: 
GoodG2B;; 
(;; 
);; 
;;; 
GoodB2G<< 
(<< 
)<< 
;<< 
}== 
private@@ 
static@@ 
void@@ 
GoodG2B@@ 
(@@  
)@@  !
{AA 
stringBB 
dataBB 
;BB 
dataDD 
=DD 
$strDD 
;DD 
	ContainerEE 
dataContainerEE 
=EE  !
newEE" %
	ContainerEE& /
(EE/ 0
)EE0 1
;EE1 2
dataContainerFF 
.FF 
containerOneFF "
=FF# $
dataFF% )
;FF) *H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_67bGG D
.GGD E
GoodG2BSinkGGE P
(GGP Q
dataContainerGGQ ^
)GG` a
;GGa b
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
)KK  !
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{OO 	
tryQQ 
{RR 
dataTT 
=TT 
ConsoleTT 
.TT 
ReadLineTT '
(TT' (
)TT( )
;TT) *
}UU 
catchVV 
(VV 
IOExceptionVV 
exceptIOVV '
)VV' (
{WW 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptIOXX2 :
,XX: ;
$strXX< W
)XXW X
;XXX Y
}YY 
}ZZ 	
	Container[[ 
dataContainer[[ 
=[[  !
new[[" %
	Container[[& /
([[/ 0
)[[0 1
;[[1 2
dataContainer\\ 
.\\ 
containerOne\\ "
=\\# $
data\\% )
;\\) *H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_67b]] D
.]]D E
GoodB2GSink]]E P
(]]P Q
dataContainer]]Q ^
)]]` a
;]]a b
}^^ 
}`` 
}aa ½
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_67b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_67b B
{ 
public 

static 
void 
BadSink 
( H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_67a [
.[ \
	Container\ e
dataContainerf s
)t u
{ 
string 
data 
= 
dataContainer #
.# $
containerOne$ 0
;0 1
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_67a--# _
.--_ `
	Container--` i
dataContainer--j w
)--x y
{.. 
string// 
data// 
=// 
dataContainer// #
.//# $
containerOne//$ 0
;//0 1
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_67a<<# _
.<<_ `
	Container<<` i
dataContainer<<j w
)<<x y
{== 
string>> 
data>> 
=>> 
dataContainer>> #
.>># $
containerOne>>$ 0
;>>0 1
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK 
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_68a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_68a B
:C D
AbstractTestCaseE U
{ 
public 

static 
string 
data 
; 
public   

override   
void   
Bad   
(   
)   
{!! 
data"" 
="" 
$str"" 
;"" 
{## 	
try%% 
{&& 
data(( 
=(( 
Console(( 
.(( 
ReadLine(( '
(((' (
)((( )
;(() *
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
exceptIO,,2 :
,,,: ;
$str,,< W
),,W X
;,,X Y
}-- 
}.. 	H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_68b// D
.//D E
BadSink//E L
(//L M
)//M N
;//N O
}00 
public33 

override33 
void33 
Good33 
(33 
)33 
{44 
GoodG2B55 
(55 
)55 
;55 
GoodB2G66 
(66 
)66 
;66 
}77 
private:: 
static:: 
void:: 
GoodG2B:: 
(::  
)::  !
{;; 
data== 
=== 
$str== 
;== H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_68b>> D
.>>D E
GoodG2BSink>>E P
(>>P Q
)>>Q R
;>>R S
}?? 
privateBB 
staticBB 
voidBB 
GoodB2GBB 
(BB  
)BB  !
{CC 
dataDD 
=DD 
$strDD 
;DD 
{EE 	
tryGG 
{HH 
dataJJ 
=JJ 
ConsoleJJ 
.JJ 
ReadLineJJ '
(JJ' (
)JJ( )
;JJ) *
}KK 
catchLL 
(LL 
IOExceptionLL 
exceptIOLL '
)LL' (
{MM 
IONN 
.NN 
LoggerNN 
.NN 
LogNN 
(NN 
NLogNN "
.NN" #
LogLevelNN# +
.NN+ ,
WarnNN, 0
,NN0 1
exceptIONN2 :
,NN: ;
$strNN< W
)NNW X
;NNX Y
}OO 
}PP 	H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_68bQQ D
.QQD E
GoodB2GSinkQQE P
(QQP Q
)QQQ R
;QQR S
}RR 
}TT 
}UU 
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_68b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_68b B
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
string 
data 
= H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_68a R
.R S
dataS W
;W X
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
public-- 

static-- 
void-- 
GoodG2BSink-- "
(--" #
)--# $
{.. 
string// 
data// 
=// H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_68a// R
.//R S
data//S W
;//W X
try00 
{11 	
int22 
value22 
=22 
int22 
.22 
Parse22 !
(22! "
data22" &
)22& '
;22' (
}33 	
catch44 
(44 
FormatException44 
exceptNumberFormat44 1
)441 2
{55 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
exceptNumberFormat77. @
,77@ A
$str77B \
+77] ^
data77_ c
)77c d
;77d e
}88 	
}99 
public<< 

static<< 
void<< 
GoodB2GSink<< "
(<<" #
)<<# $
{== 
string>> 
data>> 
=>> H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_68a>> R
.>>R S
data>>S W
;>>W X
try?? 
{@@ 	
intAA 
valueAA 
=AA 
intAA 
.AA 
ParseAA !
(AA! "
dataAA" &
)AA& '
;AA' (
}BB 	
catchCC 
(CC 
FormatExceptionCC 
exceptNumberFormatCC 1
)CC1 2
{DD 	
IOFF 
.FF 
LoggerFF 
.FF 
LogFF 
(FF 
NLogFF 
.FF 
LogLevelFF '
.FF' (
WarnFF( ,
,FF, -
exceptNumberFormatFF. @
,FF@ A
$strFFB f
+FFg h
exceptNumberFormatFFi {
)FF{ |
;FF| }
}GG 	
}HH 
}JJ 
}KK 
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_71a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_71a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try$$ 
{%% 
data'' 
='' 
Console'' 
.'' 
ReadLine'' '
(''' (
)''( )
;'') *
}(( 
catch)) 
()) 
IOException)) 
exceptIO)) '
)))' (
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
exceptIO++2 :
,++: ;
$str++< W
)++W X
;++X Y
},, 
}-- 	H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_71b.. D
...D E
BadSink..E L
(..L M
(..M N
Object..N T
)..T U
data..U Y
)..[ \
;..\ ]
}// 
public22 

override22 
void22 
Good22 
(22 
)22 
{33 
GoodG2B44 
(44 
)44 
;44 
GoodB2G55 
(55 
)55 
;55 
}66 
private99 
static99 
void99 
GoodG2B99 
(99  
)99  !
{:: 
string;; 
data;; 
;;; 
data== 
=== 
$str== 
;== H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_71b>> D
.>>D E
GoodG2BSink>>E P
(>>P Q
(>>Q R
Object>>R X
)>>X Y
data>>Y ]
)>>_ `
;>>` a
}?? 
privateBB 
staticBB 
voidBB 
GoodB2GBB 
(BB  
)BB  !
{CC 
stringDD 
dataDD 
;DD 
dataEE 
=EE 
$strEE 
;EE 
{FF 	
tryHH 
{II 
dataKK 
=KK 
ConsoleKK 
.KK 
ReadLineKK '
(KK' (
)KK( )
;KK) *
}LL 
catchMM 
(MM 
IOExceptionMM 
exceptIOMM '
)MM' (
{NN 
IOOO 
.OO 
LoggerOO 
.OO 
LogOO 
(OO 
NLogOO "
.OO" #
LogLevelOO# +
.OO+ ,
WarnOO, 0
,OO0 1
exceptIOOO2 :
,OO: ;
$strOO< W
)OOW X
;OOX Y
}PP 
}QQ 	H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_71bRR D
.RRD E
GoodB2GSinkRRE P
(RRP Q
(RRQ R
ObjectRRR X
)RRX Y
dataRRY ]
)RR_ `
;RR` a
}SS 
}UU 
}VV ²
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_71b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_71b B
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
string 
data 
= 
( 
string 
) 

dataObject (
;( )
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
Object..# )

dataObject..* 4
)..5 6
{// 
string00 
data00 
=00 
(00 
string00 
)00 

dataObject00 (
;00( )
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
Object==# )

dataObject==* 4
)==5 6
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 

dataObject?? (
;??( )
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL )
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_72a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_72a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{## 	
try%% 
{&& 
data(( 
=(( 
Console(( 
.(( 
ReadLine(( '
(((' (
)((( )
;(() *
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
exceptIO,,2 :
,,,: ;
$str,,< W
),,W X
;,,X Y
}-- 
}.. 	
	Hashtable// 
dataHashtable// 
=//  !
new//" %
	Hashtable//& /
(/// 0
$num//0 1
)//1 2
;//2 3
dataHashtable00 
.00 
Add00 
(00 
$num00 
,00 
data00 !
)00! "
;00" #
dataHashtable11 
.11 
Add11 
(11 
$num11 
,11 
data11 !
)11! "
;11" #
dataHashtable22 
.22 
Add22 
(22 
$num22 
,22 
data22 !
)22! "
;22" #H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_72b33 D
.33D E
BadSink33E L
(33L M
dataHashtable33M Z
)33\ ]
;33] ^
}44 
public77 

override77 
void77 
Good77 
(77 
)77 
{88 
GoodG2B99 
(99 
)99 
;99 
GoodB2G:: 
(:: 
):: 
;:: 
};; 
private>> 
static>> 
void>> 
GoodG2B>> 
(>>  
)>>  !
{?? 
string@@ 
data@@ 
;@@ 
dataBB 
=BB 
$strBB 
;BB 
	HashtableCC 
dataHashtableCC 
=CC  !
newCC" %
	HashtableCC& /
(CC/ 0
$numCC0 1
)CC1 2
;CC2 3
dataHashtableDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD !
)DD! "
;DD" #
dataHashtableEE 
.EE 
AddEE 
(EE 
$numEE 
,EE 
dataEE !
)EE! "
;EE" #
dataHashtableFF 
.FF 
AddFF 
(FF 
$numFF 
,FF 
dataFF !
)FF! "
;FF" #H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_72bGG D
.GGD E
GoodG2BSinkGGE P
(GGP Q
dataHashtableGGQ ^
)GG` a
;GGa b
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
)KK  !
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{OO 	
tryQQ 
{RR 
dataTT 
=TT 
ConsoleTT 
.TT 
ReadLineTT '
(TT' (
)TT( )
;TT) *
}UU 
catchVV 
(VV 
IOExceptionVV 
exceptIOVV '
)VV' (
{WW 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptIOXX2 :
,XX: ;
$strXX< W
)XXW X
;XXX Y
}YY 
}ZZ 	
	Hashtable[[ 
dataHashtable[[ 
=[[  !
new[[" %
	Hashtable[[& /
([[/ 0
$num[[0 1
)[[1 2
;[[2 3
dataHashtable\\ 
.\\ 
Add\\ 
(\\ 
$num\\ 
,\\ 
data\\ !
)\\! "
;\\" #
dataHashtable]] 
.]] 
Add]] 
(]] 
$num]] 
,]] 
data]] !
)]]! "
;]]" #
dataHashtable^^ 
.^^ 
Add^^ 
(^^ 
$num^^ 
,^^ 
data^^ !
)^^! "
;^^" #H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_72b__ D
.__D E
GoodB2GSink__E P
(__P Q
dataHashtable__Q ^
)__` a
;__a b
}`` 
}bb 
}cc Ý
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_72b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_72b B
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
string 
data 
= 
( 
string 
) 
dataHashtable ,
[, -
$num- .
]. /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #
	Hashtable..# ,
dataHashtable..- :
)..; <
{// 
string00 
data00 
=00 
(00 
string00 
)00 
dataHashtable00 ,
[00, -
$num00- .
]00. /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #
	Hashtable==# ,
dataHashtable==- :
)==; <
{>> 
string?? 
data?? 
=?? 
(?? 
string?? 
)?? 
dataHashtable?? ,
[??, -
$num??- .
]??. /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL )
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_73a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_73a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{## 	
try%% 
{&& 
data(( 
=(( 
Console(( 
.(( 
ReadLine(( '
(((' (
)((( )
;(() *
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
exceptIO,,2 :
,,,: ;
$str,,< W
),,W X
;,,X Y
}-- 
}.. 	

LinkedList// 
<// 
string// 
>// 
dataLinkedList// )
=//* +
new//, /

LinkedList//0 :
<//: ;
string//; A
>//A B
(//B C
)//C D
;//D E
dataLinkedList00 
.00 
AddLast00 
(00 
data00 #
)00# $
;00$ %
dataLinkedList11 
.11 
AddLast11 
(11 
data11 #
)11# $
;11$ %
dataLinkedList22 
.22 
AddLast22 
(22 
data22 #
)22# $
;22$ %H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_73b33 D
.33D E
BadSink33E L
(33L M
dataLinkedList33M [
)33] ^
;33^ _
}44 
public77 

override77 
void77 
Good77 
(77 
)77 
{88 
GoodG2B99 
(99 
)99 
;99 
GoodB2G:: 
(:: 
):: 
;:: 
};; 
private>> 
static>> 
void>> 
GoodG2B>> 
(>>  
)>>  !
{?? 
string@@ 
data@@ 
;@@ 
dataBB 
=BB 
$strBB 
;BB 

LinkedListCC 
<CC 
stringCC 
>CC 
dataLinkedListCC )
=CC* +
newCC, /

LinkedListCC0 :
<CC: ;
stringCC; A
>CCA B
(CCB C
)CCC D
;CCD E
dataLinkedListDD 
.DD 
AddLastDD 
(DD 
dataDD #
)DD# $
;DD$ %
dataLinkedListEE 
.EE 
AddLastEE 
(EE 
dataEE #
)EE# $
;EE$ %
dataLinkedListFF 
.FF 
AddLastFF 
(FF 
dataFF #
)FF# $
;FF$ %H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_73bGG D
.GGD E
GoodG2BSinkGGE P
(GGP Q
dataLinkedListGGQ _
)GGa b
;GGb c
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
)KK  !
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{OO 	
tryQQ 
{RR 
dataTT 
=TT 
ConsoleTT 
.TT 
ReadLineTT '
(TT' (
)TT( )
;TT) *
}UU 
catchVV 
(VV 
IOExceptionVV 
exceptIOVV '
)VV' (
{WW 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptIOXX2 :
,XX: ;
$strXX< W
)XXW X
;XXX Y
}YY 
}ZZ 	

LinkedList[[ 
<[[ 
string[[ 
>[[ 
dataLinkedList[[ )
=[[* +
new[[, /

LinkedList[[0 :
<[[: ;
string[[; A
>[[A B
([[B C
)[[C D
;[[D E
dataLinkedList\\ 
.\\ 
AddLast\\ 
(\\ 
data\\ #
)\\# $
;\\$ %
dataLinkedList]] 
.]] 
AddLast]] 
(]] 
data]] #
)]]# $
;]]$ %
dataLinkedList^^ 
.^^ 
AddLast^^ 
(^^ 
data^^ #
)^^# $
;^^$ %H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_73b__ D
.__D E
GoodB2GSink__E P
(__P Q
dataLinkedList__Q _
)__a b
;__b c
}`` 
}bb 
}cc 
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_73b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_73b B
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
string* 0
>0 1
dataLinkedList2 @
)A B
{ 
string 
data 
= 
dataLinkedList $
.$ %
Last% )
.) *
Value* /
;/ 0
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. "
(.." #

LinkedList..# -
<..- .
string... 4
>..4 5
dataLinkedList..6 D
)..E F
{// 
string00 
data00 
=00 
dataLinkedList00 $
.00$ %
Last00% )
.00) *
Value00* /
;00/ 0
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

LinkedList==# -
<==- .
string==. 4
>==4 5
dataLinkedList==6 D
)==E F
{>> 
string?? 
data?? 
=?? 
dataLinkedList?? $
.??$ %
Last??% )
.??) *
Value??* /
;??/ 0
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL Õ,
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_74a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_74a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data"" 
="" 
$str"" 
;"" 
{## 	
try%% 
{&& 
data(( 
=(( 
Console(( 
.(( 
ReadLine(( '
(((' (
)((( )
;(() *
})) 
catch** 
(** 
IOException** 
exceptIO** '
)**' (
{++ 
IO,, 
.,, 
Logger,, 
.,, 
Log,, 
(,, 
NLog,, "
.,," #
LogLevel,,# +
.,,+ ,
Warn,,, 0
,,,0 1
exceptIO,,2 :
,,,: ;
$str,,< W
),,W X
;,,X Y
}-- 
}.. 	

Dictionary// 
<// 
int// 
,// 
string// 
>// 
dataDictionary// -
=//. /
new//0 3

Dictionary//4 >
<//> ?
int//? B
,//B C
string//C I
>//I J
(//J K
)//K L
;//L M
dataDictionary00 
.00 
Add00 
(00 
$num00 
,00 
data00 "
)00" #
;00# $
dataDictionary11 
.11 
Add11 
(11 
$num11 
,11 
data11 "
)11" #
;11# $
dataDictionary22 
.22 
Add22 
(22 
$num22 
,22 
data22 "
)22" #
;22# $H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_74b33 D
.33D E
BadSink33E L
(33L M
dataDictionary33M [
)33] ^
;33^ _
}44 
public77 

override77 
void77 
Good77 
(77 
)77 
{88 
GoodG2B99 
(99 
)99 
;99 
GoodB2G:: 
(:: 
):: 
;:: 
};; 
private>> 
static>> 
void>> 
GoodG2B>> 
(>>  
)>>  !
{?? 
string@@ 
data@@ 
;@@ 
dataBB 
=BB 
$strBB 
;BB 

DictionaryCC 
<CC 
intCC 
,CC 
stringCC 
>CC 
dataDictionaryCC -
=CC. /
newCC0 3

DictionaryCC4 >
<CC> ?
intCC? B
,CCB C
stringCCC I
>CCI J
(CCJ K
)CCK L
;CCL M
dataDictionaryDD 
.DD 
AddDD 
(DD 
$numDD 
,DD 
dataDD "
)DD" #
;DD# $
dataDictionaryEE 
.EE 
AddEE 
(EE 
$numEE 
,EE 
dataEE "
)EE" #
;EE# $
dataDictionaryFF 
.FF 
AddFF 
(FF 
$numFF 
,FF 
dataFF "
)FF" #
;FF# $H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_74bGG D
.GGD E
GoodG2BSinkGGE P
(GGP Q
dataDictionaryGGQ _
)GGa b
;GGb c
}HH 
privateKK 
staticKK 
voidKK 
GoodB2GKK 
(KK  
)KK  !
{LL 
stringMM 
dataMM 
;MM 
dataNN 
=NN 
$strNN 
;NN 
{OO 	
tryQQ 
{RR 
dataTT 
=TT 
ConsoleTT 
.TT 
ReadLineTT '
(TT' (
)TT( )
;TT) *
}UU 
catchVV 
(VV 
IOExceptionVV 
exceptIOVV '
)VV' (
{WW 
IOXX 
.XX 
LoggerXX 
.XX 
LogXX 
(XX 
NLogXX "
.XX" #
LogLevelXX# +
.XX+ ,
WarnXX, 0
,XX0 1
exceptIOXX2 :
,XX: ;
$strXX< W
)XXW X
;XXX Y
}YY 
}ZZ 	

Dictionary[[ 
<[[ 
int[[ 
,[[ 
string[[ 
>[[ 
dataDictionary[[ -
=[[. /
new[[0 3

Dictionary[[4 >
<[[> ?
int[[? B
,[[B C
string[[C I
>[[I J
([[J K
)[[K L
;[[L M
dataDictionary\\ 
.\\ 
Add\\ 
(\\ 
$num\\ 
,\\ 
data\\ "
)\\" #
;\\# $
dataDictionary]] 
.]] 
Add]] 
(]] 
$num]] 
,]] 
data]] "
)]]" #
;]]# $
dataDictionary^^ 
.^^ 
Add^^ 
(^^ 
$num^^ 
,^^ 
data^^ "
)^^" #
;^^# $H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_74b__ D
.__D E
GoodB2GSink__E P
(__P Q
dataDictionary__Q _
)__a b
;__b c
}`` 
}bb 
}cc Æ
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_74b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_74b B
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
string. 4
>4 5
dataDictionary6 D
)E F
{ 
string 
data 
= 
dataDictionary $
[$ %
$num% &
]& '
;' (
try   
{!! 	
int"" 
value"" 
="" 
int"" 
."" 
Parse"" !
(""! "
data""" &
)""& '
;""' (
}## 	
catch$$ 
($$ 
FormatException$$ 
exceptNumberFormat$$ 1
)$$1 2
{%% 	
IO'' 
.'' 
Logger'' 
.'' 
Log'' 
('' 
NLog'' 
.'' 
LogLevel'' '
.''' (
Warn''( ,
,'', -
exceptNumberFormat''. @
,''@ A
$str''B \
+''] ^
data''_ c
)''c d
;''d e
}(( 	
})) 
public.. 

static.. 
void.. 
GoodG2BSink.. #
(..# $

Dictionary..$ .
<... /
int../ 2
,..2 3
string..3 9
>..9 :
dataDictionary..; I
)..J K
{// 
string00 
data00 
=00 
dataDictionary00 $
[00$ %
$num00% &
]00& '
;00' (
try11 
{22 	
int33 
value33 
=33 
int33 
.33 
Parse33 !
(33! "
data33" &
)33& '
;33' (
}44 	
catch55 
(55 
FormatException55 
exceptNumberFormat55 1
)551 2
{66 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
exceptNumberFormat88. @
,88@ A
$str88B \
+88] ^
data88_ c
)88c d
;88d e
}99 	
}:: 
public== 

static== 
void== 
GoodB2GSink== "
(==" #

Dictionary==# -
<==- .
int==. 1
,==1 2
string==2 8
>==8 9
dataDictionary==: H
)==I J
{>> 
string?? 
data?? 
=?? 
dataDictionary?? $
[??$ %
$num??% &
]??& '
;??' (
try@@ 
{AA 	
intBB 
valueBB 
=BB 
intBB 
.BB 
ParseBB !
(BB! "
dataBB" &
)BB& '
;BB' (
}CC 	
catchDD 
(DD 
FormatExceptionDD 
exceptNumberFormatDD 1
)DD1 2
{EE 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
exceptNumberFormatGG. @
,GG@ A
$strGGB f
+GGg h
exceptNumberFormatGGi {
)GG{ |
;GG| }
}HH 	
}II 
}KK 
}LL Â=
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_75a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_75a B
:C D
AbstractTestCaseE U
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
data"" 
;"" 
data## 
=## 
$str## 
;## 
{$$ 	
try&& 
{'' 
data)) 
=)) 
Console)) 
.)) 
ReadLine)) '
())' (
)))( )
;))) *
}** 
catch++ 
(++ 
IOException++ 
exceptIO++ '
)++' (
{,, 
IO-- 
.-- 
Logger-- 
.-- 
Log-- 
(-- 
NLog-- "
.--" #
LogLevel--# +
.--+ ,
Warn--, 0
,--0 1
exceptIO--2 :
,--: ;
$str--< W
)--W X
;--X Y
}.. 
}// 	
byte11 
[11 
]11 
dataSerialized11 
=11 
null11  $
;11$ %
try22 
{33 	
BinaryFormatter44 
bf44 
=44  
new44! $
BinaryFormatter44% 4
(444 5
)445 6
;446 7
using55 
(55 
var55 
ms55 
=55 
new55 
MemoryStream55  ,
(55, -
)55- .
)55. /
{66 
bf77 
.77 
	Serialize77 
(77 
ms77 
,77  
data77! %
)77% &
;77& '
dataSerialized88 
=88  
ms88! #
.88# $
ToArray88$ +
(88+ ,
)88, -
;88- .
}99 H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_75b:: H
.::H I
BadSink::I P
(::P Q
dataSerialized::Q _
)::a b
;::b c
};; 	
catch<< 
(<< "
SerializationException<< %
exceptSerialize<<& 5
)<<5 6
{== 	
IO>> 
.>> 
Logger>> 
.>> 
Log>> 
(>> 
NLog>> 
.>> 
LogLevel>> '
.>>' (
Warn>>( ,
,>>, -
$str>>. X
,>>X Y
exceptSerialize>>Z i
)>>i j
;>>j k
}?? 	
}@@ 
publicCC 

overrideCC 
voidCC 
GoodCC 
(CC 
)CC 
{DD 
GoodG2BEE 
(EE 
)EE 
;EE 
GoodB2GFF 
(FF 
)FF 
;FF 
}GG 
privateJJ 
staticJJ 
voidJJ 
GoodG2BJJ 
(JJ  
)JJ  !
{KK 
stringLL 
dataLL 
;LL 
dataMM 
=MM 
$strMM 
;MM 
{NN 	
tryPP 
{QQ 
dataSS 
=SS 
ConsoleSS 
.SS 
ReadLineSS '
(SS' (
)SS( )
;SS) *
}TT 
catchUU 
(UU 
IOExceptionUU 
exceptIOUU '
)UU' (
{VV 
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW "
.WW" #
LogLevelWW# +
.WW+ ,
WarnWW, 0
,WW0 1
exceptIOWW2 :
,WW: ;
$strWW< W
)WWW X
;WWX Y
}XX 
}YY 	
byte[[ 
[[[ 
][[ 
dataSerialized[[ 
=[[ 
null[[  $
;[[$ %
try\\ 
{]] 	
BinaryFormatter^^ 
bf^^ 
=^^  
new^^! $
BinaryFormatter^^% 4
(^^4 5
)^^5 6
;^^6 7
using__ 
(__ 
var__ 
ms__ 
=__ 
new__ 
MemoryStream__  ,
(__, -
)__- .
)__. /
{`` 
bfaa 
.aa 
	Serializeaa 
(aa 
msaa 
,aa  
dataaa! %
)aa% &
;aa& '
dataSerializedbb 
=bb  
msbb! #
.bb# $
ToArraybb$ +
(bb+ ,
)bb, -
;bb- .
}cc H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_75bdd H
.ddH I
GoodG2BSinkddI T
(ddT U
dataSerializedddU c
)dde f
;ddf g
}ee 	
catchff 
(ff "
SerializationExceptionff %
exceptSerializeff& 5
)ff5 6
{gg 	
IOhh 
.hh 
Loggerhh 
.hh 
Loghh 
(hh 
NLoghh 
.hh 
LogLevelhh '
.hh' (
Warnhh( ,
,hh, -
$strhh. X
,hhX Y
exceptSerializehhZ i
)hhi j
;hhj k
}ii 	
}jj 
privatemm 
staticmm 
voidmm 
GoodB2Gmm 
(mm  
)mm  !
{nn 
stringoo 
dataoo 
;oo 
datapp 
=pp 
$strpp 
;pp 
{qq 	
tryss 
{tt 
datavv 
=vv 
Consolevv 
.vv 
ReadLinevv '
(vv' (
)vv( )
;vv) *
}ww 
catchxx 
(xx 
IOExceptionxx 
exceptIOxx '
)xx' (
{yy 
IOzz 
.zz 
Loggerzz 
.zz 
Logzz 
(zz 
NLogzz "
.zz" #
LogLevelzz# +
.zz+ ,
Warnzz, 0
,zz0 1
exceptIOzz2 :
,zz: ;
$strzz< W
)zzW X
;zzX Y
}{{ 
}|| 	
byte~~ 
[~~ 
]~~ 
dataSerialized~~ 
=~~ 
null~~  $
;~~$ %
try 
{
 	
BinaryFormatter
 
bf
 
=
  
new
! $
BinaryFormatter
% 4
(
4 5
)
5 6
;
6 7
using
 
(
 
var
 
ms
 
=
 
new
 
MemoryStream
  ,
(
, -
)
- .
)
. /
{
 
bf
 
.
 
	Serialize
 
(
 
ms
 
,
  
data
! %
)
% &
;
& '
dataSerialized
 
=
  
ms
! #
.
# $
ToArray
$ +
(
+ ,
)
, -
;
- .
}
 J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_75b
 H
.
H I
GoodB2GSink
I T
(
T U
dataSerialized
U c
)
e f
;
f g
}
 	
catch
 
(
 $
SerializationException
 %
exceptSerialize
& 5
)
5 6
{
 	
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 
.
 
LogLevel
 '
.
' (
Warn
( ,
,
, -
$str
. X
,
X Y
exceptSerialize
Z i
)
i j
;
j k
}
 	
}
 
} 
} â<
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_75b.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_75b B
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
string## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
string)) 
))) 
binForm)) &
.))& '
Deserialize))' 2
())2 3
	memStream))3 <
)))< =
;))= >
}** 
try++ 
{,, 
int-- 
value-- 
=-- 
int-- 
.--  
Parse--  %
(--% &
data--& *
)--* +
;--+ ,
}.. 
catch// 
(// 
FormatException// "
exceptNumberFormat//# 5
)//5 6
{00 
IO22 
.22 
Logger22 
.22 
Log22 
(22 
NLog22 "
.22" #
LogLevel22# +
.22+ ,
Warn22, 0
,220 1
exceptNumberFormat222 D
,22D E
$str22F `
+22a b
data22c g
)22g h
;22h i
}33 
}44 	
catch55 
(55 "
SerializationException55 %
exceptSerialize55& 5
)555 6
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. Y
,77Y Z
exceptSerialize77[ j
)77j k
;77k l
}88 	
}99 
public>> 

static>> 
void>> 
GoodG2BSink>> "
(>>" #
byte>># '
[>>' (
]>>( )
dataSerialized>>* 8
)>>9 :
{?? 
try@@ 
{AA 	
stringBB 
dataBB 
;BB 
varCC 
binFormCC 
=CC 
newCC 
BinaryFormatterCC -
(CC- .
)CC. /
;CC/ 0
usingDD 
(DD 
varDD 
	memStreamDD  
=DD! "
newDD# &
MemoryStreamDD' 3
(DD3 4
)DD4 5
)DD5 6
{EE 
	memStreamFF 
.FF 
WriteFF 
(FF  
dataSerializedFF  .
,FF. /
$numFF0 1
,FF1 2
dataSerializedFF3 A
.FFA B
LengthFFB H
)FFH I
;FFI J
	memStreamGG 
.GG 
SeekGG 
(GG 
$numGG  
,GG  !

SeekOriginGG" ,
.GG, -
BeginGG- 2
)GG2 3
;GG3 4
dataHH 
=HH 
(HH 
stringHH 
)HH 
binFormHH &
.HH& '
DeserializeHH' 2
(HH2 3
	memStreamHH3 <
)HH< =
;HH= >
}II 
tryJJ 
{KK 
intLL 
valueLL 
=LL 
intLL 
.LL  
ParseLL  %
(LL% &
dataLL& *
)LL* +
;LL+ ,
}MM 
catchNN 
(NN 
FormatExceptionNN "
exceptNumberFormatNN# 5
)NN5 6
{OO 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptNumberFormatQQ2 D
,QQD E
$strQQF `
+QQa b
dataQQc g
)QQg h
;QQh i
}RR 
}SS 	
catchTT 
(TT "
SerializationExceptionTT %
exceptSerializeTT& 5
)TT5 6
{UU 	
IOVV 
.VV 
LoggerVV 
.VV 
LogVV 
(VV 
NLogVV 
.VV 
LogLevelVV '
.VV' (
WarnVV( ,
,VV, -
$strVV. Y
,VVY Z
exceptSerializeVV[ j
)VVj k
;VVk l
}WW 	
}XX 
public[[ 

static[[ 
void[[ 
GoodB2GSink[[ "
([[" #
byte[[# '
[[[' (
][[( )
dataSerialized[[* 8
)[[9 :
{\\ 
try]] 
{^^ 	
string__ 
data__ 
;__ 
var`` 
binForm`` 
=`` 
new`` 
BinaryFormatter`` -
(``- .
)``. /
;``/ 0
usingaa 
(aa 
varaa 
	memStreamaa  
=aa! "
newaa# &
MemoryStreamaa' 3
(aa3 4
)aa4 5
)aa5 6
{bb 
	memStreamcc 
.cc 
Writecc 
(cc  
dataSerializedcc  .
,cc. /
$numcc0 1
,cc1 2
dataSerializedcc3 A
.ccA B
LengthccB H
)ccH I
;ccI J
	memStreamdd 
.dd 
Seekdd 
(dd 
$numdd  
,dd  !

SeekOrigindd" ,
.dd, -
Begindd- 2
)dd2 3
;dd3 4
dataee 
=ee 
(ee 
stringee 
)ee 
binFormee &
.ee& '
Deserializeee' 2
(ee2 3
	memStreamee3 <
)ee< =
;ee= >
}ff 
trygg 
{hh 
intii 
valueii 
=ii 
intii 
.ii  
Parseii  %
(ii% &
dataii& *
)ii* +
;ii+ ,
}jj 
catchkk 
(kk 
FormatExceptionkk "
exceptNumberFormatkk# 5
)kk5 6
{ll 
IOnn 
.nn 
Loggernn 
.nn 
Lognn 
(nn 
NLognn "
.nn" #
LogLevelnn# +
.nn+ ,
Warnnn, 0
,nn0 1
exceptNumberFormatnn2 D
,nnD E
$strnnF j
+nnk l
exceptNumberFormatnnm 
)	nn 
;
nn 
}oo 
}pp 	
catchqq 
(qq "
SerializationExceptionqq %
exceptSerializeqq& 5
)qq5 6
{rr 	
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss 
.ss 
LogLevelss '
.ss' (
Warnss( ,
,ss, -
$strss. Y
,ssY Z
exceptSerializess[ j
)ssj k
;ssk l
}tt 	
}uu 
}ww 
}xx Ø
ÉC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81a.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class H
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81a B
:C D
AbstractTestCaseE U
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string   
data   
;   
data!! 
=!! 
$str!! 
;!! 
{"" 	
try$$ 
{%% 
data'' 
='' 
Console'' 
.'' 
ReadLine'' '
(''' (
)''( )
;'') *
}(( 
catch)) 
()) 
IOException)) 
exceptIO)) '
)))' (
{** 
IO++ 
.++ 
Logger++ 
.++ 
Log++ 
(++ 
NLog++ "
.++" #
LogLevel++# +
.+++ ,
Warn++, 0
,++0 1
exceptIO++2 :
,++: ;
$str++< W
)++W X
;++X Y
},, 
}-- 	L
@CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_base.. H

baseObject..I S
=..T U
new..V YL
?CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_bad	..Z 
(
.. 
)
.. 
;
.. 

baseObject// 
.// 
Action// 
(// 
data// 
)//  
;//  !
}00 
public33 

override33 
void33 
Good33 
(33 
)33 
{44 
GoodG2B55 
(55 
)55 
;55 
GoodB2G66 
(66 
)66 
;66 
}77 
private:: 
void:: 
GoodG2B:: 
(:: 
):: 
{;; 
string<< 
data<< 
;<< 
data>> 
=>> 
$str>> 
;>> L
@CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_base?? H

baseObject??I S
=??T U
new??V YP
CCWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_goodG2B	??Z 
(
?? 
)
?? 
;
??  

baseObject@@ 
.@@ 
Action@@ 
(@@ 
data@@ 
)@@  
;@@  !
}AA 
privateDD 
voidDD 
GoodB2GDD 
(DD 
)DD 
{EE 
stringFF 
dataFF 
;FF 
dataGG 
=GG 
$strGG 
;GG 
{HH 	
tryJJ 
{KK 
dataMM 
=MM 
ConsoleMM 
.MM 
ReadLineMM '
(MM' (
)MM( )
;MM) *
}NN 
catchOO 
(OO 
IOExceptionOO 
exceptIOOO '
)OO' (
{PP 
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ "
.QQ" #
LogLevelQQ# +
.QQ+ ,
WarnQQ, 0
,QQ0 1
exceptIOQQ2 :
,QQ: ;
$strQQ< W
)QQW X
;QQX Y
}RR 
}SS 	L
@CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_baseTT H

baseObjectTTI S
=TTT U
newTTV YP
CCWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_goodB2G	TTZ 
(
TT 
)
TT 
;
TT  

baseObjectUU 
.UU 
ActionUU 
(UU 
dataUU 
)UU  
;UU  !
}VV 
}XX 
}YY 
ÌC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_bad.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class K
?CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_bad E
:F GM
@CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_base	H 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{ 	
int   
value   
=   
int   
.   
Parse   !
(  ! "
data  " &
)  & '
;  ' (
}!! 	
catch"" 
("" 
FormatException"" 
exceptNumberFormat"" 1
)""1 2
{## 	
IO%% 
.%% 
Logger%% 
.%% 
Log%% 
(%% 
NLog%% 
.%% 
LogLevel%% '
.%%' (
Warn%%( ,
,%%, -
exceptNumberFormat%%. @
,%%@ A
$str%%B \
+%%] ^
data%%_ c
)%%c d
;%%d e
}&& 	
}'' 
}(( 
})) 
ÍC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_base.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
abstract 
class	 L
@CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_base O
{ 
public 

abstract 
void 
Action 
(  
string  &
data' +
), -
;- .
} 
} §
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_goodB2G.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_goodB2G I
:J KM
@CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_base	L 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B f
+&&g h
exceptNumberFormat&&i {
)&&{ |
;&&| }
}'' 	
}(( 
})) 
}** 
ÐC:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_goodG2B.cs
	namespace 	
	testcases
 
. :
.CWE117_Improper_Output_Neutralization_for_Logs B
{ 
class O
CCWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_goodG2B I
:J KM
@CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81_base	L 
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
try 
{   	
int!! 
value!! 
=!! 
int!! 
.!! 
Parse!! !
(!!! "
data!!" &
)!!& '
;!!' (
}"" 	
catch## 
(## 
FormatException## 
exceptNumberFormat## 1
)##1 2
{$$ 	
IO&& 
.&& 
Logger&& 
.&& 
Log&& 
(&& 
NLog&& 
.&& 
LogLevel&& '
.&&' (
Warn&&( ,
,&&, -
exceptNumberFormat&&. @
,&&@ A
$str&&B \
+&&] ^
data&&_ c
)&&c d
;&&d e
}'' 	
}(( 
})) 
}** Ö
C:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\Program.cs
	namespace		 	
	testcases		
 
.		 :
.CWE117_Improper_Output_Neutralization_for_Logs		 B
{

 
class 
Program 
{ 
static 
void	 
Main 
( 
string 
[ 
] 
args  
)  !
{" #
if 
( 
args 

.
 
Any 
( 
) 
) 
{ 
if 
( 
args 
[ 
$num 
] 
. 
Equals 
( 
$str 
, 
StringComparison ,
., -
OrdinalIgnoreCase- >
)> ?
||@ B
args 
[ 
$num 
] 
. 
Equals !
(! "
$str" *
,* +
StringComparison, <
.< =
OrdinalIgnoreCase= N
)N O
)O P
{Q R
Console 
. 
	WriteLine 
( 
$str R
+S T
$str b
)b c
;c d
System 
. 
Environment 
. 
Exit 
( 
$num 
) 
;  
} 
foreach"" 
("" 
string"" 
	className"" 
in""  
args""! %
)""% &
{""' (
try$$ 
{$$	 

Type** 

myClass** 
=** 
Type** 
.** 
GetType** !
(**! "
	className**" +
)**+ ,
;**, -
object++ 
myObject++ 
=++ 
	Activator++ !
.++! "
CreateInstance++" 0
(++0 1
myClass++1 8
)++8 9
;++9 :
myClass,, 
.,, 
InvokeMember,, 
(,, 
$str,, $
,,,$ %
BindingFlags-- 
.-- 
InvokeMethod--  
|--! "
BindingFlags--# /
.--/ 0
Instance--0 8
|--9 :
BindingFlags--; G
.--G H
Public--H N
,--N O
null.. 
,.. 
myObject// 
,// 
new00 

object00 
[00 
]00 
{00 
	className00 
}00  !
)00! "
;00" #
}22 
catch22 
(22 
	Exception22 
ex22 
)22 
{22 
Console44 
.44 
	WriteLine44 
(44 
$str44 7
+448 9
	className44: C
)44C D
;44D E
Console55 
.55 
	WriteLine55 
(55 
ex55 
.55 

StackTrace55 %
)55% &
;55& '
}77 
Console99 
.99 
	WriteLine99 
(99 
$str99 
)99 
;99 
};; 
}== 
else== 	
{==
 
RunTestCWE1CC 
(CC 
)CC 
;CC 
RunTestCWE2DD 
(DD 
)DD 
;DD 
RunTestCWE3EE 
(EE 
)EE 
;EE 
RunTestCWE4FF 
(FF 
)FF 
;FF 
RunTestCWE5GG 
(GG 
)GG 
;GG 
RunTestCWE6HH 
(HH 
)HH 
;HH 
RunTestCWE7II 
(II 
)II 
;II 
RunTestCWE8JJ 
(JJ 
)JJ 
;JJ 
RunTestCWE9KK 
(KK 
)KK 
;KK 
}LL 
}MM 
privateOO 
staticOO	 
voidOO 
RunTestCWE1OO  
(OO  !
)OO! "
{OO# $
(QQ 
newQQ J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_01QQ F
(QQF G
)QQG H
)QQH I
.QQI J
RunTestQQJ Q
(QQQ R
$str	QQR 
)
QQ 
;
QQ 
(RR 
newRR J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_02RR F
(RRF G
)RRG H
)RRH I
.RRI J
RunTestRRJ Q
(RRQ R
$str	RRR 
)
RR 
;
RR 
(SS 
newSS J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_03SS F
(SSF G
)SSG H
)SSH I
.SSI J
RunTestSSJ Q
(SSQ R
$str	SSR 
)
SS 
;
SS 
(TT 
newTT J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_04TT F
(TTF G
)TTG H
)TTH I
.TTI J
RunTestTTJ Q
(TTQ R
$str	TTR 
)
TT 
;
TT 
(UU 
newUU J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_05UU F
(UUF G
)UUG H
)UUH I
.UUI J
RunTestUUJ Q
(UUQ R
$str	UUR 
)
UU 
;
UU 
(VV 
newVV J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_06VV F
(VVF G
)VVG H
)VVH I
.VVI J
RunTestVVJ Q
(VVQ R
$str	VVR 
)
VV 
;
VV 
(WW 
newWW J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_07WW F
(WWF G
)WWG H
)WWH I
.WWI J
RunTestWWJ Q
(WWQ R
$str	WWR 
)
WW 
;
WW 
(XX 
newXX J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_08XX F
(XXF G
)XXG H
)XXH I
.XXI J
RunTestXXJ Q
(XXQ R
$str	XXR 
)
XX 
;
XX 
(YY 
newYY J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_09YY F
(YYF G
)YYG H
)YYH I
.YYI J
RunTestYYJ Q
(YYQ R
$str	YYR 
)
YY 
;
YY 
(ZZ 
newZZ J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_10ZZ F
(ZZF G
)ZZG H
)ZZH I
.ZZI J
RunTestZZJ Q
(ZZQ R
$str	ZZR 
)
ZZ 
;
ZZ 
([[ 
new[[ J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_11[[ F
([[F G
)[[G H
)[[H I
.[[I J
RunTest[[J Q
([[Q R
$str	[[R 
)
[[ 
;
[[ 
(\\ 
new\\ J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_12\\ F
(\\F G
)\\G H
)\\H I
.\\I J
RunTest\\J Q
(\\Q R
$str	\\R 
)
\\ 
;
\\ 
(]] 
new]] J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_13]] F
(]]F G
)]]G H
)]]H I
.]]I J
RunTest]]J Q
(]]Q R
$str	]]R 
)
]] 
;
]] 
(^^ 
new^^ J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_14^^ F
(^^F G
)^^G H
)^^H I
.^^I J
RunTest^^J Q
(^^Q R
$str	^^R 
)
^^ 
;
^^ 
(__ 
new__ J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_15__ F
(__F G
)__G H
)__H I
.__I J
RunTest__J Q
(__Q R
$str	__R 
)
__ 
;
__ 
(`` 
new`` J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_16`` F
(``F G
)``G H
)``H I
.``I J
RunTest``J Q
(``Q R
$str	``R 
)
`` 
;
`` 
(aa 
newaa J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_17aa F
(aaF G
)aaG H
)aaH I
.aaI J
RunTestaaJ Q
(aaQ R
$str	aaR 
)
aa 
;
aa 
(bb 
newbb J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_21bb F
(bbF G
)bbG H
)bbH I
.bbI J
RunTestbbJ Q
(bbQ R
$str	bbR 
)
bb 
;
bb 
(cc 
newcc K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_22acc G
(ccG H
)ccH I
)ccI J
.ccJ K
RunTestccK R
(ccR S
$str	ccS 
)
cc 
;
cc 
(dd 
newdd J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_31dd F
(ddF G
)ddG H
)ddH I
.ddI J
RunTestddJ Q
(ddQ R
$str	ddR 
)
dd 
;
dd 
(ee 
newee J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_41ee F
(eeF G
)eeG H
)eeH I
.eeI J
RunTesteeJ Q
(eeQ R
$str	eeR 
)
ee 
;
ee 
(ff 
newff J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_42ff F
(ffF G
)ffG H
)ffH I
.ffI J
RunTestffJ Q
(ffQ R
$str	ffR 
)
ff 
;
ff 
(gg 
newgg J
>CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_45gg F
(ggF G
)ggG H
)ggH I
.ggI J
RunTestggJ Q
(ggQ R
$str	ggR 
)
gg 
;
gg 
(hh 
newhh K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_51ahh G
(hhG H
)hhH I
)hhI J
.hhJ K
RunTesthhK R
(hhR S
$str	hhS 
)
hh 
;
hh 
(ii 
newii K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_52aii G
(iiG H
)iiH I
)iiI J
.iiJ K
RunTestiiK R
(iiR S
$str	iiS 
)
ii 
;
ii 
(jj 
newjj K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_53ajj G
(jjG H
)jjH I
)jjI J
.jjJ K
RunTestjjK R
(jjR S
$str	jjS 
)
jj 
;
jj 
(kk 
newkk K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_54akk G
(kkG H
)kkH I
)kkI J
.kkJ K
RunTestkkK R
(kkR S
$str	kkS 
)
kk 
;
kk 
(ll 
newll K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_61all G
(llG H
)llH I
)llI J
.llJ K
RunTestllK R
(llR S
$str	llS 
)
ll 
;
ll 
(mm 
newmm K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_66amm G
(mmG H
)mmH I
)mmI J
.mmJ K
RunTestmmK R
(mmR S
$str	mmS 
)
mm 
;
mm 
(nn 
newnn K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_67ann G
(nnG H
)nnH I
)nnI J
.nnJ K
RunTestnnK R
(nnR S
$str	nnS 
)
nn 
;
nn 
(oo 
newoo K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_68aoo G
(ooG H
)ooH I
)ooI J
.ooJ K
RunTestooK R
(ooR S
$str	ooS 
)
oo 
;
oo 
(pp 
newpp K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_71app G
(ppG H
)ppH I
)ppI J
.ppJ K
RunTestppK R
(ppR S
$str	ppS 
)
pp 
;
pp 
(qq 
newqq K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_72aqq G
(qqG H
)qqH I
)qqI J
.qqJ K
RunTestqqK R
(qqR S
$str	qqS 
)
qq 
;
qq 
(rr 
newrr K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_73arr G
(rrG H
)rrH I
)rrI J
.rrJ K
RunTestrrK R
(rrR S
$str	rrS 
)
rr 
;
rr 
(ss 
newss K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_74ass G
(ssG H
)ssH I
)ssI J
.ssJ K
RunTestssK R
(ssR S
$str	ssS 
)
ss 
;
ss 
(tt 
newtt K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_75att G
(ttG H
)ttH I
)ttI J
.ttJ K
RunTestttK R
(ttR S
$str	ttS 
)
tt 
;
tt 
(uu 
newuu K
?CWE117_Improper_Output_Neutralization_for_Logs__Connect_tcp_81auu G
(uuG H
)uuH I
)uuI J
.uuJ K
RunTestuuK R
(uuR S
$str	uuS 
)
uu 
;
uu 
(vv 
newvv G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_01vv C
(vvC D
)vvD E
)vvE F
.vvF G
RunTestvvG N
(vvN O
$str	vvO 
)
vv 
;
vv 
(ww 
newww G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_02ww C
(wwC D
)wwD E
)wwE F
.wwF G
RunTestwwG N
(wwN O
$str	wwO 
)
ww 
;
ww 
(xx 
newxx G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_03xx C
(xxC D
)xxD E
)xxE F
.xxF G
RunTestxxG N
(xxN O
$str	xxO 
)
xx 
;
xx 
(yy 
newyy G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_04yy C
(yyC D
)yyD E
)yyE F
.yyF G
RunTestyyG N
(yyN O
$str	yyO 
)
yy 
;
yy 
(zz 
newzz G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_05zz C
(zzC D
)zzD E
)zzE F
.zzF G
RunTestzzG N
(zzN O
$str	zzO 
)
zz 
;
zz 
({{ 
new{{ G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_06{{ C
({{C D
){{D E
){{E F
.{{F G
RunTest{{G N
({{N O
$str	{{O 
)
{{ 
;
{{ 
(|| 
new|| G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_07|| C
(||C D
)||D E
)||E F
.||F G
RunTest||G N
(||N O
$str	||O 
)
|| 
;
|| 
(}} 
new}} G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_08}} C
(}}C D
)}}D E
)}}E F
.}}F G
RunTest}}G N
(}}N O
$str	}}O 
)
}} 
;
}} 
(~~ 
new~~ G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_09~~ C
(~~C D
)~~D E
)~~E F
.~~F G
RunTest~~G N
(~~N O
$str	~~O 
)
~~ 
;
~~ 
( 
new G
;CWE117_Improper_Output_Neutralization_for_Logs__Database_10 C
(C D
)D E
)E F
.F G
RunTestG N
(N O
$str	O 
)
 
;
 
(
 
new
 I
;CWE117_Improper_Output_Neutralization_for_Logs__Database_11
 C
(
C D
)
D E
)
E F
.
F G
RunTest
G N
(
N O
$strO 
) 
; 
(
 
new
 I
;CWE117_Improper_Output_Neutralization_for_Logs__Database_12
 C
(
C D
)
D E
)
E F
.
F G
RunTest
G N
(
N O
$strO 
) 
; 
(
 
new
 I
;CWE117_Improper_Output_Neutralization_for_Logs__Database_13
 C
(
C D
)
D E
)
E F
.
F G
RunTest
G N
(
N O
$strO 
) 
; 
(
 
new
 I
;CWE117_Improper_Output_Neutralization_for_Logs__Database_14
 C
(
C D
)
D E
)
E F
.
F G
RunTest
G N
(
N O
$strO 
) 
; 
(
 
new
 I
;CWE117_Improper_Output_Neutralization_for_Logs__Database_15
 C
(
C D
)
D E
)
E F
.
F G
RunTest
G N
(
N O
$strO 
) 
; 
(
 
new
 I
;CWE117_Improper_Output_Neutralization_for_Logs__Database_16
 C
(
C D
)
D E
)
E F
.
F G
RunTest
G N
(
N O
$strO 
) 
; 
(
 
new
 I
;CWE117_Improper_Output_Neutralization_for_Logs__Database_17
 C
(
C D
)
D E
)
E F
.
F G
RunTest
G N
(
N O
$strO 
) 
; 
(
 
new
 I
;CWE117_Improper_Output_Neutralization_for_Logs__Database_21
 C
(
C D
)
D E
)
E F
.
F G
RunTest
G N
(
N O
$strO 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_22a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 I
;CWE117_Improper_Output_Neutralization_for_Logs__Database_31
 C
(
C D
)
D E
)
E F
.
F G
RunTest
G N
(
N O
$strO 
) 
; 
(
 
new
 I
;CWE117_Improper_Output_Neutralization_for_Logs__Database_41
 C
(
C D
)
D E
)
E F
.
F G
RunTest
G N
(
N O
$strO 
) 
; 
(
 
new
 I
;CWE117_Improper_Output_Neutralization_for_Logs__Database_42
 C
(
C D
)
D E
)
E F
.
F G
RunTest
G N
(
N O
$strO 
) 
; 
(
 
new
 I
;CWE117_Improper_Output_Neutralization_for_Logs__Database_45
 C
(
C D
)
D E
)
E F
.
F G
RunTest
G N
(
N O
$strO 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_51a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_52a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_53a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_54a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_61a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_66a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_67a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_68a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_71a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_72a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_73a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_74a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_75a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__Database_81a
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_01
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_02
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_03
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_04
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_05
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
   
new
   L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_06
   F
(
  F G
)
  G H
)
  H I
.
  I J
RunTest
  J Q
(
  Q R
$str  R 
)   
;   
(
¡¡ 
new
¡¡ L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_07
¡¡ F
(
¡¡F G
)
¡¡G H
)
¡¡H I
.
¡¡I J
RunTest
¡¡J Q
(
¡¡Q R
$str¡¡R 
)¡¡ 
;¡¡ 
(
¢¢ 
new
¢¢ L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_08
¢¢ F
(
¢¢F G
)
¢¢G H
)
¢¢H I
.
¢¢I J
RunTest
¢¢J Q
(
¢¢Q R
$str¢¢R 
)¢¢ 
;¢¢ 
(
££ 
new
££ L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_09
££ F
(
££F G
)
££G H
)
££H I
.
££I J
RunTest
££J Q
(
££Q R
$str££R 
)££ 
;££ 
(
¤¤ 
new
¤¤ L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_10
¤¤ F
(
¤¤F G
)
¤¤G H
)
¤¤H I
.
¤¤I J
RunTest
¤¤J Q
(
¤¤Q R
$str¤¤R 
)¤¤ 
;¤¤ 
(
¥¥ 
new
¥¥ L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_11
¥¥ F
(
¥¥F G
)
¥¥G H
)
¥¥H I
.
¥¥I J
RunTest
¥¥J Q
(
¥¥Q R
$str¥¥R 
)¥¥ 
;¥¥ 
(
¦¦ 
new
¦¦ L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_12
¦¦ F
(
¦¦F G
)
¦¦G H
)
¦¦H I
.
¦¦I J
RunTest
¦¦J Q
(
¦¦Q R
$str¦¦R 
)¦¦ 
;¦¦ 
(
§§ 
new
§§ L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_13
§§ F
(
§§F G
)
§§G H
)
§§H I
.
§§I J
RunTest
§§J Q
(
§§Q R
$str§§R 
)§§ 
;§§ 
(
¨¨ 
new
¨¨ L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_14
¨¨ F
(
¨¨F G
)
¨¨G H
)
¨¨H I
.
¨¨I J
RunTest
¨¨J Q
(
¨¨Q R
$str¨¨R 
)¨¨ 
;¨¨ 
(
©© 
new
©© L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_15
©© F
(
©©F G
)
©©G H
)
©©H I
.
©©I J
RunTest
©©J Q
(
©©Q R
$str©©R 
)©© 
;©© 
(
ªª 
new
ªª L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_16
ªª F
(
ªªF G
)
ªªG H
)
ªªH I
.
ªªI J
RunTest
ªªJ Q
(
ªªQ R
$strªªR 
)ªª 
;ªª 
(
«« 
new
«« L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_17
«« F
(
««F G
)
««G H
)
««H I
.
««I J
RunTest
««J Q
(
««Q R
$str««R 
)«« 
;«« 
(
¬¬ 
new
¬¬ L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_21
¬¬ F
(
¬¬F G
)
¬¬G H
)
¬¬H I
.
¬¬I J
RunTest
¬¬J Q
(
¬¬Q R
$str¬¬R 
)¬¬ 
;¬¬ 
(
­­ 
new
­­ M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_22a
­­ G
(
­­G H
)
­­H I
)
­­I J
.
­­J K
RunTest
­­K R
(
­­R S
$str­­S 
)­­ 
;­­ 
(
®® 
new
®® L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_31
®® F
(
®®F G
)
®®G H
)
®®H I
.
®®I J
RunTest
®®J Q
(
®®Q R
$str®®R 
)®® 
;®® 
(
¯¯ 
new
¯¯ L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_41
¯¯ F
(
¯¯F G
)
¯¯G H
)
¯¯H I
.
¯¯I J
RunTest
¯¯J Q
(
¯¯Q R
$str¯¯R 
)¯¯ 
;¯¯ 
(
°° 
new
°° L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_42
°° F
(
°°F G
)
°°G H
)
°°H I
.
°°I J
RunTest
°°J Q
(
°°Q R
$str°°R 
)°° 
;°° 
(
±± 
new
±± L
>CWE117_Improper_Output_Neutralization_for_Logs__Environment_45
±± F
(
±±F G
)
±±G H
)
±±H I
.
±±I J
RunTest
±±J Q
(
±±Q R
$str±±R 
)±± 
;±± 
(
²² 
new
²² M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_51a
²² G
(
²²G H
)
²²H I
)
²²I J
.
²²J K
RunTest
²²K R
(
²²R S
$str²²S 
)²² 
;²² 
(
³³ 
new
³³ M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_52a
³³ G
(
³³G H
)
³³H I
)
³³I J
.
³³J K
RunTest
³³K R
(
³³R S
$str³³S 
)³³ 
;³³ 
(
´´ 
new
´´ M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_53a
´´ G
(
´´G H
)
´´H I
)
´´I J
.
´´J K
RunTest
´´K R
(
´´R S
$str´´S 
)´´ 
;´´ 
(
µµ 
new
µµ M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_54a
µµ G
(
µµG H
)
µµH I
)
µµI J
.
µµJ K
RunTest
µµK R
(
µµR S
$strµµS 
)µµ 
;µµ 
(
¶¶ 
new
¶¶ M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_61a
¶¶ G
(
¶¶G H
)
¶¶H I
)
¶¶I J
.
¶¶J K
RunTest
¶¶K R
(
¶¶R S
$str¶¶S 
)¶¶ 
;¶¶ 
(
·· 
new
·· M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_66a
·· G
(
··G H
)
··H I
)
··I J
.
··J K
RunTest
··K R
(
··R S
$str··S 
)·· 
;·· 
(
¸¸ 
new
¸¸ M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_67a
¸¸ G
(
¸¸G H
)
¸¸H I
)
¸¸I J
.
¸¸J K
RunTest
¸¸K R
(
¸¸R S
$str¸¸S 
)¸¸ 
;¸¸ 
(
¹¹ 
new
¹¹ M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_68a
¹¹ G
(
¹¹G H
)
¹¹H I
)
¹¹I J
.
¹¹J K
RunTest
¹¹K R
(
¹¹R S
$str¹¹S 
)¹¹ 
;¹¹ 
(
ºº 
new
ºº M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_71a
ºº G
(
ººG H
)
ººH I
)
ººI J
.
ººJ K
RunTest
ººK R
(
ººR S
$strººS 
)ºº 
;ºº 
(
»» 
new
»» M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_72a
»» G
(
»»G H
)
»»H I
)
»»I J
.
»»J K
RunTest
»»K R
(
»»R S
$str»»S 
)»» 
;»» 
(
¼¼ 
new
¼¼ M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_73a
¼¼ G
(
¼¼G H
)
¼¼H I
)
¼¼I J
.
¼¼J K
RunTest
¼¼K R
(
¼¼R S
$str¼¼S 
)¼¼ 
;¼¼ 
(
½½ 
new
½½ M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_74a
½½ G
(
½½G H
)
½½H I
)
½½I J
.
½½J K
RunTest
½½K R
(
½½R S
$str½½S 
)½½ 
;½½ 
(
¾¾ 
new
¾¾ M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_75a
¾¾ G
(
¾¾G H
)
¾¾H I
)
¾¾I J
.
¾¾J K
RunTest
¾¾K R
(
¾¾R S
$str¾¾S 
)¾¾ 
;¾¾ 
(
¿¿ 
new
¿¿ M
?CWE117_Improper_Output_Neutralization_for_Logs__Environment_81a
¿¿ G
(
¿¿G H
)
¿¿H I
)
¿¿I J
.
¿¿J K
RunTest
¿¿K R
(
¿¿R S
$str¿¿S 
)¿¿ 
;¿¿ 
(
ÀÀ 
new
ÀÀ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_01
ÀÀ ?
(
ÀÀ? @
)
ÀÀ@ A
)
ÀÀA B
.
ÀÀB C
RunTest
ÀÀC J
(
ÀÀJ K
$strÀÀK 
)ÀÀ 
;ÀÀ 
(
ÁÁ 
new
ÁÁ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_02
ÁÁ ?
(
ÁÁ? @
)
ÁÁ@ A
)
ÁÁA B
.
ÁÁB C
RunTest
ÁÁC J
(
ÁÁJ K
$strÁÁK 
)ÁÁ 
;ÁÁ 
(
ÂÂ 
new
ÂÂ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_03
ÂÂ ?
(
ÂÂ? @
)
ÂÂ@ A
)
ÂÂA B
.
ÂÂB C
RunTest
ÂÂC J
(
ÂÂJ K
$strÂÂK 
)ÂÂ 
;ÂÂ 
(
ÃÃ 
new
ÃÃ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_04
ÃÃ ?
(
ÃÃ? @
)
ÃÃ@ A
)
ÃÃA B
.
ÃÃB C
RunTest
ÃÃC J
(
ÃÃJ K
$strÃÃK 
)ÃÃ 
;ÃÃ 
(
ÄÄ 
new
ÄÄ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_05
ÄÄ ?
(
ÄÄ? @
)
ÄÄ@ A
)
ÄÄA B
.
ÄÄB C
RunTest
ÄÄC J
(
ÄÄJ K
$strÄÄK 
)ÄÄ 
;ÄÄ 
(
ÅÅ 
new
ÅÅ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_06
ÅÅ ?
(
ÅÅ? @
)
ÅÅ@ A
)
ÅÅA B
.
ÅÅB C
RunTest
ÅÅC J
(
ÅÅJ K
$strÅÅK 
)ÅÅ 
;ÅÅ 
(
ÆÆ 
new
ÆÆ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_07
ÆÆ ?
(
ÆÆ? @
)
ÆÆ@ A
)
ÆÆA B
.
ÆÆB C
RunTest
ÆÆC J
(
ÆÆJ K
$strÆÆK 
)ÆÆ 
;ÆÆ 
(
ÇÇ 
new
ÇÇ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_08
ÇÇ ?
(
ÇÇ? @
)
ÇÇ@ A
)
ÇÇA B
.
ÇÇB C
RunTest
ÇÇC J
(
ÇÇJ K
$strÇÇK 
)ÇÇ 
;ÇÇ 
(
ÈÈ 
new
ÈÈ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_09
ÈÈ ?
(
ÈÈ? @
)
ÈÈ@ A
)
ÈÈA B
.
ÈÈB C
RunTest
ÈÈC J
(
ÈÈJ K
$strÈÈK 
)ÈÈ 
;ÈÈ 
(
ÉÉ 
new
ÉÉ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_10
ÉÉ ?
(
ÉÉ? @
)
ÉÉ@ A
)
ÉÉA B
.
ÉÉB C
RunTest
ÉÉC J
(
ÉÉJ K
$strÉÉK 
)ÉÉ 
;ÉÉ 
(
ÊÊ 
new
ÊÊ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_11
ÊÊ ?
(
ÊÊ? @
)
ÊÊ@ A
)
ÊÊA B
.
ÊÊB C
RunTest
ÊÊC J
(
ÊÊJ K
$strÊÊK 
)ÊÊ 
;ÊÊ 
(
ËË 
new
ËË E
7CWE117_Improper_Output_Neutralization_for_Logs__File_12
ËË ?
(
ËË? @
)
ËË@ A
)
ËËA B
.
ËËB C
RunTest
ËËC J
(
ËËJ K
$strËËK 
)ËË 
;ËË 
(
ÌÌ 
new
ÌÌ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_13
ÌÌ ?
(
ÌÌ? @
)
ÌÌ@ A
)
ÌÌA B
.
ÌÌB C
RunTest
ÌÌC J
(
ÌÌJ K
$strÌÌK 
)ÌÌ 
;ÌÌ 
(
ÍÍ 
new
ÍÍ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_14
ÍÍ ?
(
ÍÍ? @
)
ÍÍ@ A
)
ÍÍA B
.
ÍÍB C
RunTest
ÍÍC J
(
ÍÍJ K
$strÍÍK 
)ÍÍ 
;ÍÍ 
(
ÎÎ 
new
ÎÎ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_15
ÎÎ ?
(
ÎÎ? @
)
ÎÎ@ A
)
ÎÎA B
.
ÎÎB C
RunTest
ÎÎC J
(
ÎÎJ K
$strÎÎK 
)ÎÎ 
;ÎÎ 
(
ÏÏ 
new
ÏÏ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_16
ÏÏ ?
(
ÏÏ? @
)
ÏÏ@ A
)
ÏÏA B
.
ÏÏB C
RunTest
ÏÏC J
(
ÏÏJ K
$strÏÏK 
)ÏÏ 
;ÏÏ 
(
ÐÐ 
new
ÐÐ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_17
ÐÐ ?
(
ÐÐ? @
)
ÐÐ@ A
)
ÐÐA B
.
ÐÐB C
RunTest
ÐÐC J
(
ÐÐJ K
$strÐÐK 
)ÐÐ 
;ÐÐ 
(
ÑÑ 
new
ÑÑ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_21
ÑÑ ?
(
ÑÑ? @
)
ÑÑ@ A
)
ÑÑA B
.
ÑÑB C
RunTest
ÑÑC J
(
ÑÑJ K
$strÑÑK 
)ÑÑ 
;ÑÑ 
(
ÒÒ 
new
ÒÒ F
8CWE117_Improper_Output_Neutralization_for_Logs__File_22a
ÒÒ @
(
ÒÒ@ A
)
ÒÒA B
)
ÒÒB C
.
ÒÒC D
RunTest
ÒÒD K
(
ÒÒK L
$strÒÒL 
)ÒÒ 
;ÒÒ 
(
ÓÓ 
new
ÓÓ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_31
ÓÓ ?
(
ÓÓ? @
)
ÓÓ@ A
)
ÓÓA B
.
ÓÓB C
RunTest
ÓÓC J
(
ÓÓJ K
$strÓÓK 
)ÓÓ 
;ÓÓ 
(
ÔÔ 
new
ÔÔ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_41
ÔÔ ?
(
ÔÔ? @
)
ÔÔ@ A
)
ÔÔA B
.
ÔÔB C
RunTest
ÔÔC J
(
ÔÔJ K
$strÔÔK 
)ÔÔ 
;ÔÔ 
(
ÕÕ 
new
ÕÕ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_42
ÕÕ ?
(
ÕÕ? @
)
ÕÕ@ A
)
ÕÕA B
.
ÕÕB C
RunTest
ÕÕC J
(
ÕÕJ K
$strÕÕK 
)ÕÕ 
;ÕÕ 
(
ÖÖ 
new
ÖÖ E
7CWE117_Improper_Output_Neutralization_for_Logs__File_45
ÖÖ ?
(
ÖÖ? @
)
ÖÖ@ A
)
ÖÖA B
.
ÖÖB C
RunTest
ÖÖC J
(
ÖÖJ K
$strÖÖK 
)ÖÖ 
;ÖÖ 
(
×× 
new
×× F
8CWE117_Improper_Output_Neutralization_for_Logs__File_51a
×× @
(
××@ A
)
××A B
)
××B C
.
××C D
RunTest
××D K
(
××K L
$str××L 
)×× 
;×× 
(
ØØ 
new
ØØ F
8CWE117_Improper_Output_Neutralization_for_Logs__File_52a
ØØ @
(
ØØ@ A
)
ØØA B
)
ØØB C
.
ØØC D
RunTest
ØØD K
(
ØØK L
$strØØL 
)ØØ 
;ØØ 
(
ÙÙ 
new
ÙÙ F
8CWE117_Improper_Output_Neutralization_for_Logs__File_53a
ÙÙ @
(
ÙÙ@ A
)
ÙÙA B
)
ÙÙB C
.
ÙÙC D
RunTest
ÙÙD K
(
ÙÙK L
$strÙÙL 
)ÙÙ 
;ÙÙ 
(
ÚÚ 
new
ÚÚ F
8CWE117_Improper_Output_Neutralization_for_Logs__File_54a
ÚÚ @
(
ÚÚ@ A
)
ÚÚA B
)
ÚÚB C
.
ÚÚC D
RunTest
ÚÚD K
(
ÚÚK L
$strÚÚL 
)ÚÚ 
;ÚÚ 
(
ÛÛ 
new
ÛÛ F
8CWE117_Improper_Output_Neutralization_for_Logs__File_61a
ÛÛ @
(
ÛÛ@ A
)
ÛÛA B
)
ÛÛB C
.
ÛÛC D
RunTest
ÛÛD K
(
ÛÛK L
$strÛÛL 
)ÛÛ 
;ÛÛ 
(
ÜÜ 
new
ÜÜ F
8CWE117_Improper_Output_Neutralization_for_Logs__File_66a
ÜÜ @
(
ÜÜ@ A
)
ÜÜA B
)
ÜÜB C
.
ÜÜC D
RunTest
ÜÜD K
(
ÜÜK L
$strÜÜL 
)ÜÜ 
;ÜÜ 
(
ÝÝ 
new
ÝÝ F
8CWE117_Improper_Output_Neutralization_for_Logs__File_67a
ÝÝ @
(
ÝÝ@ A
)
ÝÝA B
)
ÝÝB C
.
ÝÝC D
RunTest
ÝÝD K
(
ÝÝK L
$strÝÝL 
)ÝÝ 
;ÝÝ 
(
ÞÞ 
new
ÞÞ F
8CWE117_Improper_Output_Neutralization_for_Logs__File_68a
ÞÞ @
(
ÞÞ@ A
)
ÞÞA B
)
ÞÞB C
.
ÞÞC D
RunTest
ÞÞD K
(
ÞÞK L
$strÞÞL 
)ÞÞ 
;ÞÞ 
(
ßß 
new
ßß F
8CWE117_Improper_Output_Neutralization_for_Logs__File_71a
ßß @
(
ßß@ A
)
ßßA B
)
ßßB C
.
ßßC D
RunTest
ßßD K
(
ßßK L
$strßßL 
)ßß 
;ßß 
(
àà 
new
àà F
8CWE117_Improper_Output_Neutralization_for_Logs__File_72a
àà @
(
àà@ A
)
ààA B
)
ààB C
.
ààC D
RunTest
ààD K
(
ààK L
$strààL 
)àà 
;àà 
(
áá 
new
áá F
8CWE117_Improper_Output_Neutralization_for_Logs__File_73a
áá @
(
áá@ A
)
ááA B
)
ááB C
.
ááC D
RunTest
ááD K
(
ááK L
$strááL 
)áá 
;áá 
(
ââ 
new
ââ F
8CWE117_Improper_Output_Neutralization_for_Logs__File_74a
ââ @
(
ââ@ A
)
ââA B
)
ââB C
.
ââC D
RunTest
ââD K
(
ââK L
$strââL 
)ââ 
;ââ 
(
ãã 
new
ãã F
8CWE117_Improper_Output_Neutralization_for_Logs__File_75a
ãã @
(
ãã@ A
)
ããA B
)
ããB C
.
ããC D
RunTest
ããD K
(
ããK L
$strããL 
)ãã 
;ãã 
(
ää 
new
ää F
8CWE117_Improper_Output_Neutralization_for_Logs__File_81a
ää @
(
ää@ A
)
ääA B
)
ääB C
.
ääC D
RunTest
ääD K
(
ääK L
$strääL 
)ää 
;ää 
(
åå 
new
åå K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_01
åå E
(
ååE F
)
ååF G
)
ååG H
.
ååH I
RunTest
ååI P
(
ååP Q
$strååQ 
)åå 
;åå 
(
ææ 
new
ææ K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_02
ææ E
(
ææE F
)
ææF G
)
ææG H
.
ææH I
RunTest
ææI P
(
ææP Q
$strææQ 
)ææ 
;ææ 
(
çç 
new
çç K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_03
çç E
(
ççE F
)
ççF G
)
ççG H
.
ççH I
RunTest
ççI P
(
ççP Q
$strççQ 
)çç 
;çç 
(
èè 
new
èè K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_04
èè E
(
èèE F
)
èèF G
)
èèG H
.
èèH I
RunTest
èèI P
(
èèP Q
$strèèQ 
)èè 
;èè 
(
éé 
new
éé K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_05
éé E
(
ééE F
)
ééF G
)
ééG H
.
ééH I
RunTest
ééI P
(
ééP Q
$strééQ 
)éé 
;éé 
(
êê 
new
êê K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_06
êê E
(
êêE F
)
êêF G
)
êêG H
.
êêH I
RunTest
êêI P
(
êêP Q
$strêêQ 
)êê 
;êê 
(
ëë 
new
ëë K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_07
ëë E
(
ëëE F
)
ëëF G
)
ëëG H
.
ëëH I
RunTest
ëëI P
(
ëëP Q
$strëëQ 
)ëë 
;ëë 
(
ìì 
new
ìì K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_08
ìì E
(
ììE F
)
ììF G
)
ììG H
.
ììH I
RunTest
ììI P
(
ììP Q
$strììQ 
)ìì 
;ìì 
(
íí 
new
íí K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_09
íí E
(
ííE F
)
ííF G
)
ííG H
.
ííH I
RunTest
ííI P
(
ííP Q
$strííQ 
)íí 
;íí 
(
îî 
new
îî K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_10
îî E
(
îîE F
)
îîF G
)
îîG H
.
îîH I
RunTest
îîI P
(
îîP Q
$strîîQ 
)îî 
;îî 
(
ïï 
new
ïï K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_11
ïï E
(
ïïE F
)
ïïF G
)
ïïG H
.
ïïH I
RunTest
ïïI P
(
ïïP Q
$strïïQ 
)ïï 
;ïï 
(
ðð 
new
ðð K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_12
ðð E
(
ððE F
)
ððF G
)
ððG H
.
ððH I
RunTest
ððI P
(
ððP Q
$strððQ 
)ðð 
;ðð 
(
ññ 
new
ññ K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_13
ññ E
(
ññE F
)
ññF G
)
ññG H
.
ññH I
RunTest
ññI P
(
ññP Q
$strññQ 
)ññ 
;ññ 
(
òò 
new
òò K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_14
òò E
(
òòE F
)
òòF G
)
òòG H
.
òòH I
RunTest
òòI P
(
òòP Q
$stròòQ 
)òò 
;òò 
(
óó 
new
óó K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_15
óó E
(
óóE F
)
óóF G
)
óóG H
.
óóH I
RunTest
óóI P
(
óóP Q
$stróóQ 
)óó 
;óó 
(
ôô 
new
ôô K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_16
ôô E
(
ôôE F
)
ôôF G
)
ôôG H
.
ôôH I
RunTest
ôôI P
(
ôôP Q
$strôôQ 
)ôô 
;ôô 
(
õõ 
new
õõ K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_17
õõ E
(
õõE F
)
õõF G
)
õõG H
.
õõH I
RunTest
õõI P
(
õõP Q
$strõõQ 
)õõ 
;õõ 
(
öö 
new
öö K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_21
öö E
(
ööE F
)
ööF G
)
ööG H
.
ööH I
RunTest
ööI P
(
ööP Q
$strööQ 
)öö 
;öö 
(
÷÷ 
new
÷÷ L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_22a
÷÷ F
(
÷÷F G
)
÷÷G H
)
÷÷H I
.
÷÷I J
RunTest
÷÷J Q
(
÷÷Q R
$str÷÷R 
)÷÷ 
;÷÷ 
(
øø 
new
øø K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_31
øø E
(
øøE F
)
øøF G
)
øøG H
.
øøH I
RunTest
øøI P
(
øøP Q
$strøøQ 
)øø 
;øø 
(
ùù 
new
ùù K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_41
ùù E
(
ùùE F
)
ùùF G
)
ùùG H
.
ùùH I
RunTest
ùùI P
(
ùùP Q
$strùùQ 
)ùù 
;ùù 
(
úú 
new
úú K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_42
úú E
(
úúE F
)
úúF G
)
úúG H
.
úúH I
RunTest
úúI P
(
úúP Q
$strúúQ 
)úú 
;úú 
(
ûû 
new
ûû K
=CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_45
ûû E
(
ûûE F
)
ûûF G
)
ûûG H
.
ûûH I
RunTest
ûûI P
(
ûûP Q
$strûûQ 
)ûû 
;ûû 
(
üü 
new
üü L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_51a
üü F
(
üüF G
)
üüG H
)
üüH I
.
üüI J
RunTest
üüJ Q
(
üüQ R
$strüüR 
)üü 
;üü 
(
ýý 
new
ýý L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_52a
ýý F
(
ýýF G
)
ýýG H
)
ýýH I
.
ýýI J
RunTest
ýýJ Q
(
ýýQ R
$strýýR 
)ýý 
;ýý 
(
þþ 
new
þþ L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_53a
þþ F
(
þþF G
)
þþG H
)
þþH I
.
þþI J
RunTest
þþJ Q
(
þþQ R
$strþþR 
)þþ 
;þþ 
(
ÿÿ 
new
ÿÿ L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_54a
ÿÿ F
(
ÿÿF G
)
ÿÿG H
)
ÿÿH I
.
ÿÿI J
RunTest
ÿÿJ Q
(
ÿÿQ R
$strÿÿR 
)ÿÿ 
;ÿÿ 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_61a
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_66a
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_67a
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_68a
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_71a
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_72a
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_73a
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_74a
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_75a
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 L
>CWE117_Improper_Output_Neutralization_for_Logs__Listen_tcp_81a
 F
(
F G
)
G H
)
H I
.
I J
RunTest
J Q
(
Q R
$strR 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_01
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_02
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_03
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_04
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_05
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_06
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_07
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_08
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_09
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_10
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_11
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_12
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_13
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_14
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_15
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_16
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_17
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_21
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_22a
 E
(
E F
)
F G
)
G H
.
H I
RunTest
I P
(
P Q
$strQ 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_31
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_41
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
 
new
 J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_42
 D
(
D E
)
E F
)
F G
.
G H
RunTest
H O
(
O P
$strP 
) 
; 
(
   
new
   J
<CWE117_Improper_Output_Neutralization_for_Logs__NetClient_45
   D
(
  D E
)
  E F
)
  F G
.
  G H
RunTest
  H O
(
  O P
$str  P 
)   
;   
(
¡¡ 
new
¡¡ K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_51a
¡¡ E
(
¡¡E F
)
¡¡F G
)
¡¡G H
.
¡¡H I
RunTest
¡¡I P
(
¡¡P Q
$str¡¡Q 
)¡¡ 
;¡¡ 
(
¢¢ 
new
¢¢ K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_52a
¢¢ E
(
¢¢E F
)
¢¢F G
)
¢¢G H
.
¢¢H I
RunTest
¢¢I P
(
¢¢P Q
$str¢¢Q 
)¢¢ 
;¢¢ 
(
££ 
new
££ K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_53a
££ E
(
££E F
)
££F G
)
££G H
.
££H I
RunTest
££I P
(
££P Q
$str££Q 
)££ 
;££ 
(
¤¤ 
new
¤¤ K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_54a
¤¤ E
(
¤¤E F
)
¤¤F G
)
¤¤G H
.
¤¤H I
RunTest
¤¤I P
(
¤¤P Q
$str¤¤Q 
)¤¤ 
;¤¤ 
(
¥¥ 
new
¥¥ K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_61a
¥¥ E
(
¥¥E F
)
¥¥F G
)
¥¥G H
.
¥¥H I
RunTest
¥¥I P
(
¥¥P Q
$str¥¥Q 
)¥¥ 
;¥¥ 
(
¦¦ 
new
¦¦ K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_66a
¦¦ E
(
¦¦E F
)
¦¦F G
)
¦¦G H
.
¦¦H I
RunTest
¦¦I P
(
¦¦P Q
$str¦¦Q 
)¦¦ 
;¦¦ 
(
§§ 
new
§§ K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_67a
§§ E
(
§§E F
)
§§F G
)
§§G H
.
§§H I
RunTest
§§I P
(
§§P Q
$str§§Q 
)§§ 
;§§ 
(
¨¨ 
new
¨¨ K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_68a
¨¨ E
(
¨¨E F
)
¨¨F G
)
¨¨G H
.
¨¨H I
RunTest
¨¨I P
(
¨¨P Q
$str¨¨Q 
)¨¨ 
;¨¨ 
(
©© 
new
©© K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_71a
©© E
(
©©E F
)
©©F G
)
©©G H
.
©©H I
RunTest
©©I P
(
©©P Q
$str©©Q 
)©© 
;©© 
(
ªª 
new
ªª K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_72a
ªª E
(
ªªE F
)
ªªF G
)
ªªG H
.
ªªH I
RunTest
ªªI P
(
ªªP Q
$strªªQ 
)ªª 
;ªª 
(
«« 
new
«« K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_73a
«« E
(
««E F
)
««F G
)
««G H
.
««H I
RunTest
««I P
(
««P Q
$str««Q 
)«« 
;«« 
(
¬¬ 
new
¬¬ K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_74a
¬¬ E
(
¬¬E F
)
¬¬F G
)
¬¬G H
.
¬¬H I
RunTest
¬¬I P
(
¬¬P Q
$str¬¬Q 
)¬¬ 
;¬¬ 
(
­­ 
new
­­ K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_75a
­­ E
(
­­E F
)
­­F G
)
­­G H
.
­­H I
RunTest
­­I P
(
­­P Q
$str­­Q 
)­­ 
;­­ 
(
®® 
new
®® K
=CWE117_Improper_Output_Neutralization_for_Logs__NetClient_81a
®® E
(
®®E F
)
®®F G
)
®®G H
.
®®H I
RunTest
®®I P
(
®®P Q
$str®®Q 
)®® 
;®® 
(
¯¯ 
new
¯¯ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_01
¯¯ C
(
¯¯C D
)
¯¯D E
)
¯¯E F
.
¯¯F G
RunTest
¯¯G N
(
¯¯N O
$str¯¯O 
)¯¯ 
;¯¯ 
(
°° 
new
°° I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_02
°° C
(
°°C D
)
°°D E
)
°°E F
.
°°F G
RunTest
°°G N
(
°°N O
$str°°O 
)°° 
;°° 
(
±± 
new
±± I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_03
±± C
(
±±C D
)
±±D E
)
±±E F
.
±±F G
RunTest
±±G N
(
±±N O
$str±±O 
)±± 
;±± 
(
²² 
new
²² I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_04
²² C
(
²²C D
)
²²D E
)
²²E F
.
²²F G
RunTest
²²G N
(
²²N O
$str²²O 
)²² 
;²² 
(
³³ 
new
³³ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_05
³³ C
(
³³C D
)
³³D E
)
³³E F
.
³³F G
RunTest
³³G N
(
³³N O
$str³³O 
)³³ 
;³³ 
(
´´ 
new
´´ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_06
´´ C
(
´´C D
)
´´D E
)
´´E F
.
´´F G
RunTest
´´G N
(
´´N O
$str´´O 
)´´ 
;´´ 
(
µµ 
new
µµ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_07
µµ C
(
µµC D
)
µµD E
)
µµE F
.
µµF G
RunTest
µµG N
(
µµN O
$strµµO 
)µµ 
;µµ 
(
¶¶ 
new
¶¶ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_08
¶¶ C
(
¶¶C D
)
¶¶D E
)
¶¶E F
.
¶¶F G
RunTest
¶¶G N
(
¶¶N O
$str¶¶O 
)¶¶ 
;¶¶ 
(
·· 
new
·· I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_09
·· C
(
··C D
)
··D E
)
··E F
.
··F G
RunTest
··G N
(
··N O
$str··O 
)·· 
;·· 
(
¸¸ 
new
¸¸ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_10
¸¸ C
(
¸¸C D
)
¸¸D E
)
¸¸E F
.
¸¸F G
RunTest
¸¸G N
(
¸¸N O
$str¸¸O 
)¸¸ 
;¸¸ 
(
¹¹ 
new
¹¹ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_11
¹¹ C
(
¹¹C D
)
¹¹D E
)
¹¹E F
.
¹¹F G
RunTest
¹¹G N
(
¹¹N O
$str¹¹O 
)¹¹ 
;¹¹ 
(
ºº 
new
ºº I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_12
ºº C
(
ººC D
)
ººD E
)
ººE F
.
ººF G
RunTest
ººG N
(
ººN O
$strººO 
)ºº 
;ºº 
(
»» 
new
»» I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_13
»» C
(
»»C D
)
»»D E
)
»»E F
.
»»F G
RunTest
»»G N
(
»»N O
$str»»O 
)»» 
;»» 
(
¼¼ 
new
¼¼ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_14
¼¼ C
(
¼¼C D
)
¼¼D E
)
¼¼E F
.
¼¼F G
RunTest
¼¼G N
(
¼¼N O
$str¼¼O 
)¼¼ 
;¼¼ 
(
½½ 
new
½½ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_15
½½ C
(
½½C D
)
½½D E
)
½½E F
.
½½F G
RunTest
½½G N
(
½½N O
$str½½O 
)½½ 
;½½ 
(
¾¾ 
new
¾¾ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_16
¾¾ C
(
¾¾C D
)
¾¾D E
)
¾¾E F
.
¾¾F G
RunTest
¾¾G N
(
¾¾N O
$str¾¾O 
)¾¾ 
;¾¾ 
(
¿¿ 
new
¿¿ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_17
¿¿ C
(
¿¿C D
)
¿¿D E
)
¿¿E F
.
¿¿F G
RunTest
¿¿G N
(
¿¿N O
$str¿¿O 
)¿¿ 
;¿¿ 
(
ÀÀ 
new
ÀÀ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_21
ÀÀ C
(
ÀÀC D
)
ÀÀD E
)
ÀÀE F
.
ÀÀF G
RunTest
ÀÀG N
(
ÀÀN O
$strÀÀO 
)ÀÀ 
;ÀÀ 
(
ÁÁ 
new
ÁÁ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_22a
ÁÁ D
(
ÁÁD E
)
ÁÁE F
)
ÁÁF G
.
ÁÁG H
RunTest
ÁÁH O
(
ÁÁO P
$strÁÁP 
)ÁÁ 
;ÁÁ 
(
ÂÂ 
new
ÂÂ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_31
ÂÂ C
(
ÂÂC D
)
ÂÂD E
)
ÂÂE F
.
ÂÂF G
RunTest
ÂÂG N
(
ÂÂN O
$strÂÂO 
)ÂÂ 
;ÂÂ 
(
ÃÃ 
new
ÃÃ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_41
ÃÃ C
(
ÃÃC D
)
ÃÃD E
)
ÃÃE F
.
ÃÃF G
RunTest
ÃÃG N
(
ÃÃN O
$strÃÃO 
)ÃÃ 
;ÃÃ 
(
ÄÄ 
new
ÄÄ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_42
ÄÄ C
(
ÄÄC D
)
ÄÄD E
)
ÄÄE F
.
ÄÄF G
RunTest
ÄÄG N
(
ÄÄN O
$strÄÄO 
)ÄÄ 
;ÄÄ 
(
ÅÅ 
new
ÅÅ I
;CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_45
ÅÅ C
(
ÅÅC D
)
ÅÅD E
)
ÅÅE F
.
ÅÅF G
RunTest
ÅÅG N
(
ÅÅN O
$strÅÅO 
)ÅÅ 
;ÅÅ 
(
ÆÆ 
new
ÆÆ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_51a
ÆÆ D
(
ÆÆD E
)
ÆÆE F
)
ÆÆF G
.
ÆÆG H
RunTest
ÆÆH O
(
ÆÆO P
$strÆÆP 
)ÆÆ 
;ÆÆ 
(
ÇÇ 
new
ÇÇ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_52a
ÇÇ D
(
ÇÇD E
)
ÇÇE F
)
ÇÇF G
.
ÇÇG H
RunTest
ÇÇH O
(
ÇÇO P
$strÇÇP 
)ÇÇ 
;ÇÇ 
(
ÈÈ 
new
ÈÈ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_53a
ÈÈ D
(
ÈÈD E
)
ÈÈE F
)
ÈÈF G
.
ÈÈG H
RunTest
ÈÈH O
(
ÈÈO P
$strÈÈP 
)ÈÈ 
;ÈÈ 
(
ÉÉ 
new
ÉÉ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_54a
ÉÉ D
(
ÉÉD E
)
ÉÉE F
)
ÉÉF G
.
ÉÉG H
RunTest
ÉÉH O
(
ÉÉO P
$strÉÉP 
)ÉÉ 
;ÉÉ 
(
ÊÊ 
new
ÊÊ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_61a
ÊÊ D
(
ÊÊD E
)
ÊÊE F
)
ÊÊF G
.
ÊÊG H
RunTest
ÊÊH O
(
ÊÊO P
$strÊÊP 
)ÊÊ 
;ÊÊ 
(
ËË 
new
ËË J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_66a
ËË D
(
ËËD E
)
ËËE F
)
ËËF G
.
ËËG H
RunTest
ËËH O
(
ËËO P
$strËËP 
)ËË 
;ËË 
(
ÌÌ 
new
ÌÌ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_67a
ÌÌ D
(
ÌÌD E
)
ÌÌE F
)
ÌÌF G
.
ÌÌG H
RunTest
ÌÌH O
(
ÌÌO P
$strÌÌP 
)ÌÌ 
;ÌÌ 
(
ÍÍ 
new
ÍÍ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_68a
ÍÍ D
(
ÍÍD E
)
ÍÍE F
)
ÍÍF G
.
ÍÍG H
RunTest
ÍÍH O
(
ÍÍO P
$strÍÍP 
)ÍÍ 
;ÍÍ 
(
ÎÎ 
new
ÎÎ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_71a
ÎÎ D
(
ÎÎD E
)
ÎÎE F
)
ÎÎF G
.
ÎÎG H
RunTest
ÎÎH O
(
ÎÎO P
$strÎÎP 
)ÎÎ 
;ÎÎ 
(
ÏÏ 
new
ÏÏ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_72a
ÏÏ D
(
ÏÏD E
)
ÏÏE F
)
ÏÏF G
.
ÏÏG H
RunTest
ÏÏH O
(
ÏÏO P
$strÏÏP 
)ÏÏ 
;ÏÏ 
(
ÐÐ 
new
ÐÐ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_73a
ÐÐ D
(
ÐÐD E
)
ÐÐE F
)
ÐÐF G
.
ÐÐG H
RunTest
ÐÐH O
(
ÐÐO P
$strÐÐP 
)ÐÐ 
;ÐÐ 
(
ÑÑ 
new
ÑÑ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_74a
ÑÑ D
(
ÑÑD E
)
ÑÑE F
)
ÑÑF G
.
ÑÑG H
RunTest
ÑÑH O
(
ÑÑO P
$strÑÑP 
)ÑÑ 
;ÑÑ 
(
ÒÒ 
new
ÒÒ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_75a
ÒÒ D
(
ÒÒD E
)
ÒÒE F
)
ÒÒF G
.
ÒÒG H
RunTest
ÒÒH O
(
ÒÒO P
$strÒÒP 
)ÒÒ 
;ÒÒ 
(
ÓÓ 
new
ÓÓ J
<CWE117_Improper_Output_Neutralization_for_Logs__ReadLine_81a
ÓÓ D
(
ÓÓD E
)
ÓÓE F
)
ÓÓF G
.
ÓÓG H
RunTest
ÓÓH O
(
ÓÓO P
$strÓÓP 
)ÓÓ 
;ÓÓ 
}
ÕÕ 
private
×× 
static
××	 
void
×× 
RunTestCWE2
××  
(
××  !
)
××! "
{
××# $
}
ÛÛ 
private
ÝÝ 
static
ÝÝ	 
void
ÝÝ 
RunTestCWE3
ÝÝ  
(
ÝÝ  !
)
ÝÝ! "
{
ÝÝ# $
}
áá 
private
ãã 
static
ãã	 
void
ãã 
RunTestCWE4
ãã  
(
ãã  !
)
ãã! "
{
ãã# $
}
çç 
private
éé 
static
éé	 
void
éé 
RunTestCWE5
éé  
(
éé  !
)
éé! "
{
éé# $
}
íí 
private
ïï 
static
ïï	 
void
ïï 
RunTestCWE6
ïï  
(
ïï  !
)
ïï! "
{
ïï# $
}
óó 
private
õõ 
static
õõ	 
void
õõ 
RunTestCWE7
õõ  
(
õõ  !
)
õõ! "
{
õõ# $
}
ùù 
private
ûû 
static
ûû	 
void
ûû 
RunTestCWE8
ûû  
(
ûû  !
)
ûû! "
{
ûû# $
}
ÿÿ 
private
 
static
	 
void
 
RunTestCWE9
  
(
  !
)
! "
{
# $
}
 
} 
} Ð
¤C:\Users\CyberDiver\Documents\SAST Benchmarking\juliet_test_suite_1.3-csharp\src\testcases\CWE117_Improper_Output_Neutralization_for_Logs\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str I
)I J
]J K
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str K
)K L
]L M
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *