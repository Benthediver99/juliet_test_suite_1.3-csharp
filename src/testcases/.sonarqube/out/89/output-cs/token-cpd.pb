ú0
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_01.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_01 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data## 
=## 
$str## !
;##! "
if$$ 

($$ 
data$$ 
!=$$ 
null$$ 
)$$ 
{%% 	
string&& 
stringToEncrypt&& "
=&&# $
$str&&% <
;&&< =
byte'' 
['' 
]'' 
byteCipherText'' !
=''" #
null''$ (
;''( )
using)) 
()) $
AesCryptoServiceProvider)) +
aes)), /
=))0 1
new))2 5$
AesCryptoServiceProvider))6 N
())N O
)))O P
)))P Q
{** 
ICryptoTransform,,  
	encryptor,,! *
=,,+ ,
aes,,- 0
.,,0 1
CreateEncryptor,,1 @
(,,@ A
Encoding,,A I
.,,I J
UTF8,,J N
.,,N O
GetBytes,,O W
(,,W X
data,,X \
),,\ ]
,,,] ^
aes,,_ b
.,,b c
IV,,c e
),,e f
;,,f g
using.. 
(.. 
MemoryStream.. #
	msEncrypt..$ -
=... /
new..0 3
MemoryStream..4 @
(..@ A
)..A B
)..B C
{// 
using00 
(00 
CryptoStream00 '
	csEncrypt00( 1
=002 3
new004 7
CryptoStream008 D
(00D E
	msEncrypt00E N
,00N O
	encryptor00P Y
,00Y Z
CryptoStreamMode00[ k
.00k l
Write00l q
)00q r
)00r s
{11 
using22 
(22 
StreamWriter22 +
	swEncrypt22, 5
=226 7
new228 ;
StreamWriter22< H
(22H I
	csEncrypt22I R
)22R S
)22S T
{33 
	swEncrypt55 %
.55% &
Write55& +
(55+ ,
stringToEncrypt55, ;
)55; <
;55< =
}66 
byteCipherText77 &
=77' (
	msEncrypt77) 2
.772 3
ToArray773 :
(77: ;
)77; <
;77< =
}88 
}99 
}:: 
IO;; 
.;; 
	WriteLine;; 
(;; 
IO;; 
.;; 
ToHex;; !
(;;! "
byteCipherText;;" 0
);;0 1
);;1 2
;;;2 3
}<< 	
}== 
public@@ 

override@@ 
void@@ 
Good@@ 
(@@ 
)@@ 
{AA 
GoodG2BBB 
(BB 
)BB 
;BB 
}CC 
privateFF 
voidFF 
GoodG2BFF 
(FF 
)FF 
{GG 
stringHH 
dataHH 
;HH 
dataII 
=II 
$strII 
;II 
tryKK 
{LL 	
dataNN 
=NN 
ConsoleNN 
.NN 
ReadLineNN #
(NN# $
)NN$ %
;NN% &
}OO 	
catchPP 
(PP 
IOExceptionPP 
exceptIOPP #
)PP# $
{QQ 	
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR 
.RR 
LogLevelRR '
.RR' (
WarnRR( ,
,RR, -
$strRR. I
,RRI J
exceptIORRK S
)RRS T
;RRT U
}SS 	
ifTT 

(TT 
dataTT 
!=TT 
nullTT 
)TT 
{UU 	
stringVV 
stringToEncryptVV "
=VV# $
$strVV% <
;VV< =
byteWW 
[WW 
]WW 
byteCipherTextWW !
=WW" #
nullWW$ (
;WW( )
usingYY 
(YY $
AesCryptoServiceProviderYY +
aesYY, /
=YY0 1
newYY2 5$
AesCryptoServiceProviderYY6 N
(YYN O
)YYO P
)YYP Q
{ZZ 
ICryptoTransform\\  
	encryptor\\! *
=\\+ ,
aes\\- 0
.\\0 1
CreateEncryptor\\1 @
(\\@ A
Encoding\\A I
.\\I J
UTF8\\J N
.\\N O
GetBytes\\O W
(\\W X
data\\X \
)\\\ ]
,\\] ^
aes\\_ b
.\\b c
IV\\c e
)\\e f
;\\f g
using^^ 
(^^ 
MemoryStream^^ #
	msEncrypt^^$ -
=^^. /
new^^0 3
MemoryStream^^4 @
(^^@ A
)^^A B
)^^B C
{__ 
using`` 
(`` 
CryptoStream`` '
	csEncrypt``( 1
=``2 3
new``4 7
CryptoStream``8 D
(``D E
	msEncrypt``E N
,``N O
	encryptor``P Y
,``Y Z
CryptoStreamMode``[ k
.``k l
Write``l q
)``q r
)``r s
{aa 
usingbb 
(bb 
StreamWriterbb +
	swEncryptbb, 5
=bb6 7
newbb8 ;
StreamWriterbb< H
(bbH I
	csEncryptbbI R
)bbR S
)bbS T
{cc 
	swEncryptee %
.ee% &
Writeee& +
(ee+ ,
stringToEncryptee, ;
)ee; <
;ee< =
}ff 
byteCipherTextgg &
=gg' (
	msEncryptgg) 2
.gg2 3
ToArraygg3 :
(gg: ;
)gg; <
;gg< =
}hh 
}ii 
}jj 
IOkk 
.kk 
	WriteLinekk 
(kk 
IOkk 
.kk 
ToHexkk !
(kk! "
byteCipherTextkk" 0
)kk0 1
)kk1 2
;kk2 3
}ll 	
}mm 
}oo 
}pp ÉQ
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_02.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_02 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
true"" 
)"" 
{## 	
data%% 
=%% 
$str%% %
;%%% &
}&& 	
else'' 
{(( 	
data++ 
=++ 
null++ 
;++ 
},, 	
if-- 

(-- 
data-- 
!=-- 
null-- 
)-- 
{.. 	
string// 
stringToEncrypt// "
=//# $
$str//% <
;//< =
byte00 
[00 
]00 
byteCipherText00 !
=00" #
null00$ (
;00( )
using22 
(22 $
AesCryptoServiceProvider22 +
aes22, /
=220 1
new222 5$
AesCryptoServiceProvider226 N
(22N O
)22O P
)22P Q
{33 
ICryptoTransform55  
	encryptor55! *
=55+ ,
aes55- 0
.550 1
CreateEncryptor551 @
(55@ A
Encoding55A I
.55I J
UTF855J N
.55N O
GetBytes55O W
(55W X
data55X \
)55\ ]
,55] ^
aes55_ b
.55b c
IV55c e
)55e f
;55f g
using77 
(77 
MemoryStream77 #
	msEncrypt77$ -
=77. /
new770 3
MemoryStream774 @
(77@ A
)77A B
)77B C
{88 
using99 
(99 
CryptoStream99 '
	csEncrypt99( 1
=992 3
new994 7
CryptoStream998 D
(99D E
	msEncrypt99E N
,99N O
	encryptor99P Y
,99Y Z
CryptoStreamMode99[ k
.99k l
Write99l q
)99q r
)99r s
{:: 
using;; 
(;; 
StreamWriter;; +
	swEncrypt;;, 5
=;;6 7
new;;8 ;
StreamWriter;;< H
(;;H I
	csEncrypt;;I R
);;R S
);;S T
{<< 
	swEncrypt>> %
.>>% &
Write>>& +
(>>+ ,
stringToEncrypt>>, ;
)>>; <
;>>< =
}?? 
byteCipherText@@ &
=@@' (
	msEncrypt@@) 2
.@@2 3
ToArray@@3 :
(@@: ;
)@@; <
;@@< =
}AA 
}BB 
}CC 
IODD 
.DD 
	WriteLineDD 
(DD 
IODD 
.DD 
ToHexDD !
(DD! "
byteCipherTextDD" 0
)DD0 1
)DD1 2
;DD2 3
}EE 	
}FF 
privateJJ 
voidJJ 
GoodG2B1JJ 
(JJ 
)JJ 
{KK 
stringLL 
dataLL 
;LL 
ifMM 

(MM 
falseMM 
)MM 
{NN 	
dataQQ 
=QQ 
nullQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataUU 
=UU 
$strUU 
;UU 
tryWW 
{XX 
dataZZ 
=ZZ 
ConsoleZZ 
.ZZ 
ReadLineZZ '
(ZZ' (
)ZZ( )
;ZZ) *
}[[ 
catch\\ 
(\\ 
IOException\\ 
exceptIO\\ '
)\\' (
{]] 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
$str^^2 M
,^^M N
exceptIO^^O W
)^^W X
;^^X Y
}__ 
}`` 	
ifaa 

(aa 
dataaa 
!=aa 
nullaa 
)aa 
{bb 	
stringcc 
stringToEncryptcc "
=cc# $
$strcc% <
;cc< =
bytedd 
[dd 
]dd 
byteCipherTextdd !
=dd" #
nulldd$ (
;dd( )
usingff 
(ff $
AesCryptoServiceProviderff +
aesff, /
=ff0 1
newff2 5$
AesCryptoServiceProviderff6 N
(ffN O
)ffO P
)ffP Q
{gg 
ICryptoTransformii  
	encryptorii! *
=ii+ ,
aesii- 0
.ii0 1
CreateEncryptorii1 @
(ii@ A
EncodingiiA I
.iiI J
UTF8iiJ N
.iiN O
GetBytesiiO W
(iiW X
dataiiX \
)ii\ ]
,ii] ^
aesii_ b
.iib c
IViic e
)iie f
;iif g
usingkk 
(kk 
MemoryStreamkk #
	msEncryptkk$ -
=kk. /
newkk0 3
MemoryStreamkk4 @
(kk@ A
)kkA B
)kkB C
{ll 
usingmm 
(mm 
CryptoStreammm '
	csEncryptmm( 1
=mm2 3
newmm4 7
CryptoStreammm8 D
(mmD E
	msEncryptmmE N
,mmN O
	encryptormmP Y
,mmY Z
CryptoStreamModemm[ k
.mmk l
Writemml q
)mmq r
)mmr s
{nn 
usingoo 
(oo 
StreamWriteroo +
	swEncryptoo, 5
=oo6 7
newoo8 ;
StreamWriteroo< H
(ooH I
	csEncryptooI R
)ooR S
)ooS T
{pp 
	swEncryptrr %
.rr% &
Writerr& +
(rr+ ,
stringToEncryptrr, ;
)rr; <
;rr< =
}ss 
byteCipherTexttt &
=tt' (
	msEncrypttt) 2
.tt2 3
ToArraytt3 :
(tt: ;
)tt; <
;tt< =
}uu 
}vv 
}ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
IOxx 
.xx 
ToHexxx !
(xx! "
byteCipherTextxx" 0
)xx0 1
)xx1 2
;xx2 3
}yy 	
}zz 
private}} 
void}} 
GoodG2B2}} 
(}} 
)}} 
{~~ 
string 
data 
; 
if
 

(
 
true
 
)
 
{
 	
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
data
 
!=
 
null
 
)
 
{
 	
string
 
stringToEncrypt
 "
=
# $
$str
% <
;
< =
byte
 
[
 
]
 
byteCipherText
 !
=
" #
null
$ (
;
( )
using
 
(
 &
AesCryptoServiceProvider
 +
aes
, /
=
0 1
new
2 5&
AesCryptoServiceProvider
6 N
(
N O
)
O P
)
P Q
{
 
ICryptoTransform
  
	encryptor
! *
=
+ ,
aes
- 0
.
0 1
CreateEncryptor
1 @
(
@ A
Encoding
A I
.
I J
UTF8
J N
.
N O
GetBytes
O W
(
W X
data
X \
)
\ ]
,
] ^
aes
_ b
.
b c
IV
c e
)
e f
;
f g
using
 
(
 
MemoryStream
 #
	msEncrypt
$ -
=
. /
new
0 3
MemoryStream
4 @
(
@ A
)
A B
)
B C
{
 
using
   
(
   
CryptoStream
   '
	csEncrypt
  ( 1
=
  2 3
new
  4 7
CryptoStream
  8 D
(
  D E
	msEncrypt
  E N
,
  N O
	encryptor
  P Y
,
  Y Z
CryptoStreamMode
  [ k
.
  k l
Write
  l q
)
  q r
)
  r s
{
¡¡ 
using
¢¢ 
(
¢¢ 
StreamWriter
¢¢ +
	swEncrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
StreamWriter
¢¢< H
(
¢¢H I
	csEncrypt
¢¢I R
)
¢¢R S
)
¢¢S T
{
££ 
	swEncrypt
¥¥ %
.
¥¥% &
Write
¥¥& +
(
¥¥+ ,
stringToEncrypt
¥¥, ;
)
¥¥; <
;
¥¥< =
}
¦¦ 
byteCipherText
§§ &
=
§§' (
	msEncrypt
§§) 2
.
§§2 3
ToArray
§§3 :
(
§§: ;
)
§§; <
;
§§< =
}
¨¨ 
}
©© 
}
ªª 
IO
«« 
.
«« 
	WriteLine
«« 
(
«« 
IO
«« 
.
«« 
ToHex
«« !
(
««! "
byteCipherText
««" 0
)
««0 1
)
««1 2
;
««2 3
}
¬¬ 	
}
­­ 
public
¯¯ 

override
¯¯ 
void
¯¯ 
Good
¯¯ 
(
¯¯ 
)
¯¯ 
{
°° 
GoodG2B1
±± 
(
±± 
)
±± 
;
±± 
GoodG2B2
²² 
(
²² 
)
²² 
;
²² 
}
³³ 
}µµ 
}¶¶ ²R
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_03.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_03 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
$num"" 
=="" 
$num"" 
)"" 
{## 	
data%% 
=%% 
$str%% %
;%%% &
}&& 	
else'' 
{(( 	
data++ 
=++ 
null++ 
;++ 
},, 	
if-- 

(-- 
data-- 
!=-- 
null-- 
)-- 
{.. 	
string// 
stringToEncrypt// "
=//# $
$str//% <
;//< =
byte00 
[00 
]00 
byteCipherText00 !
=00" #
null00$ (
;00( )
using22 
(22 $
AesCryptoServiceProvider22 +
aes22, /
=220 1
new222 5$
AesCryptoServiceProvider226 N
(22N O
)22O P
)22P Q
{33 
ICryptoTransform55  
	encryptor55! *
=55+ ,
aes55- 0
.550 1
CreateEncryptor551 @
(55@ A
Encoding55A I
.55I J
UTF855J N
.55N O
GetBytes55O W
(55W X
data55X \
)55\ ]
,55] ^
aes55_ b
.55b c
IV55c e
)55e f
;55f g
using77 
(77 
MemoryStream77 #
	msEncrypt77$ -
=77. /
new770 3
MemoryStream774 @
(77@ A
)77A B
)77B C
{88 
using99 
(99 
CryptoStream99 '
	csEncrypt99( 1
=992 3
new994 7
CryptoStream998 D
(99D E
	msEncrypt99E N
,99N O
	encryptor99P Y
,99Y Z
CryptoStreamMode99[ k
.99k l
Write99l q
)99q r
)99r s
{:: 
using;; 
(;; 
StreamWriter;; +
	swEncrypt;;, 5
=;;6 7
new;;8 ;
StreamWriter;;< H
(;;H I
	csEncrypt;;I R
);;R S
);;S T
{<< 
	swEncrypt>> %
.>>% &
Write>>& +
(>>+ ,
stringToEncrypt>>, ;
)>>; <
;>>< =
}?? 
byteCipherText@@ &
=@@' (
	msEncrypt@@) 2
.@@2 3
ToArray@@3 :
(@@: ;
)@@; <
;@@< =
}AA 
}BB 
}CC 
IODD 
.DD 
	WriteLineDD 
(DD 
IODD 
.DD 
ToHexDD !
(DD! "
byteCipherTextDD" 0
)DD0 1
)DD1 2
;DD2 3
}EE 	
}FF 
privateJJ 
voidJJ 
GoodG2B1JJ 
(JJ 
)JJ 
{KK 
stringLL 
dataLL 
;LL 
ifMM 

(MM 
$numMM 
!=MM 
$numMM 
)MM 
{NN 	
dataQQ 
=QQ 
nullQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataUU 
=UU 
$strUU 
;UU 
tryWW 
{XX 
dataZZ 
=ZZ 
ConsoleZZ 
.ZZ 
ReadLineZZ '
(ZZ' (
)ZZ( )
;ZZ) *
}[[ 
catch\\ 
(\\ 
IOException\\ 
exceptIO\\ '
)\\' (
{]] 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
$str^^2 M
,^^M N
exceptIO^^O W
)^^W X
;^^X Y
}__ 
}`` 	
ifaa 

(aa 
dataaa 
!=aa 
nullaa 
)aa 
{bb 	
stringcc 
stringToEncryptcc "
=cc# $
$strcc% <
;cc< =
bytedd 
[dd 
]dd 
byteCipherTextdd !
=dd" #
nulldd$ (
;dd( )
usingff 
(ff $
AesCryptoServiceProviderff +
aesff, /
=ff0 1
newff2 5$
AesCryptoServiceProviderff6 N
(ffN O
)ffO P
)ffP Q
{gg 
ICryptoTransformii  
	encryptorii! *
=ii+ ,
aesii- 0
.ii0 1
CreateEncryptorii1 @
(ii@ A
EncodingiiA I
.iiI J
UTF8iiJ N
.iiN O
GetBytesiiO W
(iiW X
dataiiX \
)ii\ ]
,ii] ^
aesii_ b
.iib c
IViic e
)iie f
;iif g
usingkk 
(kk 
MemoryStreamkk #
	msEncryptkk$ -
=kk. /
newkk0 3
MemoryStreamkk4 @
(kk@ A
)kkA B
)kkB C
{ll 
usingmm 
(mm 
CryptoStreammm '
	csEncryptmm( 1
=mm2 3
newmm4 7
CryptoStreammm8 D
(mmD E
	msEncryptmmE N
,mmN O
	encryptormmP Y
,mmY Z
CryptoStreamModemm[ k
.mmk l
Writemml q
)mmq r
)mmr s
{nn 
usingoo 
(oo 
StreamWriteroo +
	swEncryptoo, 5
=oo6 7
newoo8 ;
StreamWriteroo< H
(ooH I
	csEncryptooI R
)ooR S
)ooS T
{pp 
	swEncryptrr %
.rr% &
Writerr& +
(rr+ ,
stringToEncryptrr, ;
)rr; <
;rr< =
}ss 
byteCipherTexttt &
=tt' (
	msEncrypttt) 2
.tt2 3
ToArraytt3 :
(tt: ;
)tt; <
;tt< =
}uu 
}vv 
}ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
IOxx 
.xx 
ToHexxx !
(xx! "
byteCipherTextxx" 0
)xx0 1
)xx1 2
;xx2 3
}yy 	
}zz 
private}} 
void}} 
GoodG2B2}} 
(}} 
)}} 
{~~ 
string 
data 
; 
if
 

(
 
$num
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
data
 
!=
 
null
 
)
 
{
 	
string
 
stringToEncrypt
 "
=
# $
$str
% <
;
< =
byte
 
[
 
]
 
byteCipherText
 !
=
" #
null
$ (
;
( )
using
 
(
 &
AesCryptoServiceProvider
 +
aes
, /
=
0 1
new
2 5&
AesCryptoServiceProvider
6 N
(
N O
)
O P
)
P Q
{
 
ICryptoTransform
  
	encryptor
! *
=
+ ,
aes
- 0
.
0 1
CreateEncryptor
1 @
(
@ A
Encoding
A I
.
I J
UTF8
J N
.
N O
GetBytes
O W
(
W X
data
X \
)
\ ]
,
] ^
aes
_ b
.
b c
IV
c e
)
e f
;
f g
using
 
(
 
MemoryStream
 #
	msEncrypt
$ -
=
. /
new
0 3
MemoryStream
4 @
(
@ A
)
A B
)
B C
{
 
using
   
(
   
CryptoStream
   '
	csEncrypt
  ( 1
=
  2 3
new
  4 7
CryptoStream
  8 D
(
  D E
	msEncrypt
  E N
,
  N O
	encryptor
  P Y
,
  Y Z
CryptoStreamMode
  [ k
.
  k l
Write
  l q
)
  q r
)
  r s
{
¡¡ 
using
¢¢ 
(
¢¢ 
StreamWriter
¢¢ +
	swEncrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
StreamWriter
¢¢< H
(
¢¢H I
	csEncrypt
¢¢I R
)
¢¢R S
)
¢¢S T
{
££ 
	swEncrypt
¥¥ %
.
¥¥% &
Write
¥¥& +
(
¥¥+ ,
stringToEncrypt
¥¥, ;
)
¥¥; <
;
¥¥< =
}
¦¦ 
byteCipherText
§§ &
=
§§' (
	msEncrypt
§§) 2
.
§§2 3
ToArray
§§3 :
(
§§: ;
)
§§; <
;
§§< =
}
¨¨ 
}
©© 
}
ªª 
IO
«« 
.
«« 
	WriteLine
«« 
(
«« 
IO
«« 
.
«« 
ToHex
«« !
(
««! "
byteCipherText
««" 0
)
««0 1
)
««1 2
;
««2 3
}
¬¬ 	
}
­­ 
public
¯¯ 

override
¯¯ 
void
¯¯ 
Good
¯¯ 
(
¯¯ 
)
¯¯ 
{
°° 
GoodG2B1
±± 
(
±± 
)
±± 
;
±± 
GoodG2B2
²² 
(
²² 
)
²² 
;
²² 
}
³³ 
}µµ 
}¶¶ T
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_04.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_04 3
:4 5
AbstractTestCase6 F
{ 
private"" 
const"" 
bool"" 
PRIVATE_CONST_TRUE"" )
=""* +
true"", 0
;""0 1
private## 
const## 
bool## 
PRIVATE_CONST_FALSE## *
=##+ ,
false##- 2
;##2 3
public&& 

override&& 
void&& 
Bad&& 
(&& 
)&& 
{'' 
string(( 
data(( 
;(( 
if)) 

()) 
PRIVATE_CONST_TRUE)) 
))) 
{** 	
data,, 
=,, 
$str,, %
;,,% &
}-- 	
else.. 
{// 	
data22 
=22 
null22 
;22 
}33 	
if44 

(44 
data44 
!=44 
null44 
)44 
{55 	
string66 
stringToEncrypt66 "
=66# $
$str66% <
;66< =
byte77 
[77 
]77 
byteCipherText77 !
=77" #
null77$ (
;77( )
using99 
(99 $
AesCryptoServiceProvider99 +
aes99, /
=990 1
new992 5$
AesCryptoServiceProvider996 N
(99N O
)99O P
)99P Q
{:: 
ICryptoTransform<<  
	encryptor<<! *
=<<+ ,
aes<<- 0
.<<0 1
CreateEncryptor<<1 @
(<<@ A
Encoding<<A I
.<<I J
UTF8<<J N
.<<N O
GetBytes<<O W
(<<W X
data<<X \
)<<\ ]
,<<] ^
aes<<_ b
.<<b c
IV<<c e
)<<e f
;<<f g
using>> 
(>> 
MemoryStream>> #
	msEncrypt>>$ -
=>>. /
new>>0 3
MemoryStream>>4 @
(>>@ A
)>>A B
)>>B C
{?? 
using@@ 
(@@ 
CryptoStream@@ '
	csEncrypt@@( 1
=@@2 3
new@@4 7
CryptoStream@@8 D
(@@D E
	msEncrypt@@E N
,@@N O
	encryptor@@P Y
,@@Y Z
CryptoStreamMode@@[ k
.@@k l
Write@@l q
)@@q r
)@@r s
{AA 
usingBB 
(BB 
StreamWriterBB +
	swEncryptBB, 5
=BB6 7
newBB8 ;
StreamWriterBB< H
(BBH I
	csEncryptBBI R
)BBR S
)BBS T
{CC 
	swEncryptEE %
.EE% &
WriteEE& +
(EE+ ,
stringToEncryptEE, ;
)EE; <
;EE< =
}FF 
byteCipherTextGG &
=GG' (
	msEncryptGG) 2
.GG2 3
ToArrayGG3 :
(GG: ;
)GG; <
;GG< =
}HH 
}II 
}JJ 
IOKK 
.KK 
	WriteLineKK 
(KK 
IOKK 
.KK 
ToHexKK !
(KK! "
byteCipherTextKK" 0
)KK0 1
)KK1 2
;KK2 3
}LL 	
}MM 
privateQQ 
voidQQ 
GoodG2B1QQ 
(QQ 
)QQ 
{RR 
stringSS 
dataSS 
;SS 
ifTT 

(TT 
PRIVATE_CONST_FALSETT 
)TT  
{UU 	
dataXX 
=XX 
nullXX 
;XX 
}YY 	
elseZZ 
{[[ 	
data\\ 
=\\ 
$str\\ 
;\\ 
try^^ 
{__ 
dataaa 
=aa 
Consoleaa 
.aa 
ReadLineaa '
(aa' (
)aa( )
;aa) *
}bb 
catchcc 
(cc 
IOExceptioncc 
exceptIOcc '
)cc' (
{dd 
IOee 
.ee 
Loggeree 
.ee 
Logee 
(ee 
NLogee "
.ee" #
LogLevelee# +
.ee+ ,
Warnee, 0
,ee0 1
$stree2 M
,eeM N
exceptIOeeO W
)eeW X
;eeX Y
}ff 
}gg 	
ifhh 

(hh 
datahh 
!=hh 
nullhh 
)hh 
{ii 	
stringjj 
stringToEncryptjj "
=jj# $
$strjj% <
;jj< =
bytekk 
[kk 
]kk 
byteCipherTextkk !
=kk" #
nullkk$ (
;kk( )
usingmm 
(mm $
AesCryptoServiceProvidermm +
aesmm, /
=mm0 1
newmm2 5$
AesCryptoServiceProvidermm6 N
(mmN O
)mmO P
)mmP Q
{nn 
ICryptoTransformpp  
	encryptorpp! *
=pp+ ,
aespp- 0
.pp0 1
CreateEncryptorpp1 @
(pp@ A
EncodingppA I
.ppI J
UTF8ppJ N
.ppN O
GetBytesppO W
(ppW X
datappX \
)pp\ ]
,pp] ^
aespp_ b
.ppb c
IVppc e
)ppe f
;ppf g
usingrr 
(rr 
MemoryStreamrr #
	msEncryptrr$ -
=rr. /
newrr0 3
MemoryStreamrr4 @
(rr@ A
)rrA B
)rrB C
{ss 
usingtt 
(tt 
CryptoStreamtt '
	csEncrypttt( 1
=tt2 3
newtt4 7
CryptoStreamtt8 D
(ttD E
	msEncryptttE N
,ttN O
	encryptorttP Y
,ttY Z
CryptoStreamModett[ k
.ttk l
Writettl q
)ttq r
)ttr s
{uu 
usingvv 
(vv 
StreamWritervv +
	swEncryptvv, 5
=vv6 7
newvv8 ;
StreamWritervv< H
(vvH I
	csEncryptvvI R
)vvR S
)vvS T
{ww 
	swEncryptyy %
.yy% &
Writeyy& +
(yy+ ,
stringToEncryptyy, ;
)yy; <
;yy< =
}zz 
byteCipherText{{ &
={{' (
	msEncrypt{{) 2
.{{2 3
ToArray{{3 :
({{: ;
){{; <
;{{< =
}|| 
}}} 
}~~ 
IO 
. 
	WriteLine 
( 
IO 
. 
ToHex !
(! "
byteCipherText" 0
)0 1
)1 2
;2 3
}
 	
}
 
private
 
void
 
GoodG2B2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_TRUE
 
)
 
{
 	
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
data
 
!=
 
null
 
)
 
{
 	
string
 
stringToEncrypt
 "
=
# $
$str
% <
;
< =
byte
 
[
 
]
 
byteCipherText
 !
=
" #
null
$ (
;
( )
using
   
(
   &
AesCryptoServiceProvider
   +
aes
  , /
=
  0 1
new
  2 5&
AesCryptoServiceProvider
  6 N
(
  N O
)
  O P
)
  P Q
{
¡¡ 
ICryptoTransform
££  
	encryptor
££! *
=
££+ ,
aes
££- 0
.
££0 1
CreateEncryptor
££1 @
(
££@ A
Encoding
££A I
.
££I J
UTF8
££J N
.
££N O
GetBytes
££O W
(
££W X
data
££X \
)
££\ ]
,
££] ^
aes
££_ b
.
££b c
IV
££c e
)
££e f
;
££f g
using
¥¥ 
(
¥¥ 
MemoryStream
¥¥ #
	msEncrypt
¥¥$ -
=
¥¥. /
new
¥¥0 3
MemoryStream
¥¥4 @
(
¥¥@ A
)
¥¥A B
)
¥¥B C
{
¦¦ 
using
§§ 
(
§§ 
CryptoStream
§§ '
	csEncrypt
§§( 1
=
§§2 3
new
§§4 7
CryptoStream
§§8 D
(
§§D E
	msEncrypt
§§E N
,
§§N O
	encryptor
§§P Y
,
§§Y Z
CryptoStreamMode
§§[ k
.
§§k l
Write
§§l q
)
§§q r
)
§§r s
{
¨¨ 
using
©© 
(
©© 
StreamWriter
©© +
	swEncrypt
©©, 5
=
©©6 7
new
©©8 ;
StreamWriter
©©< H
(
©©H I
	csEncrypt
©©I R
)
©©R S
)
©©S T
{
ªª 
	swEncrypt
¬¬ %
.
¬¬% &
Write
¬¬& +
(
¬¬+ ,
stringToEncrypt
¬¬, ;
)
¬¬; <
;
¬¬< =
}
­­ 
byteCipherText
®® &
=
®®' (
	msEncrypt
®®) 2
.
®®2 3
ToArray
®®3 :
(
®®: ;
)
®®; <
;
®®< =
}
¯¯ 
}
°° 
}
±± 
IO
²² 
.
²² 
	WriteLine
²² 
(
²² 
IO
²² 
.
²² 
ToHex
²² !
(
²²! "
byteCipherText
²²" 0
)
²²0 1
)
²²1 2
;
²²2 3
}
³³ 	
}
´´ 
public
¶¶ 

override
¶¶ 
void
¶¶ 
Good
¶¶ 
(
¶¶ 
)
¶¶ 
{
·· 
GoodG2B1
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
GoodG2B2
¹¹ 
(
¹¹ 
)
¹¹ 
;
¹¹ 
}
ºº 
}¼¼ 
}½½ ÖS
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_05.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_05 3
:4 5
AbstractTestCase6 F
{ 
private"" 
bool"" 
privateTrue"" 
="" 
true"" #
;""# $
private## 
bool## 
privateFalse## 
=## 
false##  %
;##% &
public&& 

override&& 
void&& 
Bad&& 
(&& 
)&& 
{'' 
string(( 
data(( 
;(( 
if)) 

()) 
privateTrue)) 
))) 
{** 	
data,, 
=,, 
$str,, %
;,,% &
}-- 	
else.. 
{// 	
data22 
=22 
null22 
;22 
}33 	
if44 

(44 
data44 
!=44 
null44 
)44 
{55 	
string66 
stringToEncrypt66 "
=66# $
$str66% <
;66< =
byte77 
[77 
]77 
byteCipherText77 !
=77" #
null77$ (
;77( )
using99 
(99 $
AesCryptoServiceProvider99 +
aes99, /
=990 1
new992 5$
AesCryptoServiceProvider996 N
(99N O
)99O P
)99P Q
{:: 
ICryptoTransform<<  
	encryptor<<! *
=<<+ ,
aes<<- 0
.<<0 1
CreateEncryptor<<1 @
(<<@ A
Encoding<<A I
.<<I J
UTF8<<J N
.<<N O
GetBytes<<O W
(<<W X
data<<X \
)<<\ ]
,<<] ^
aes<<_ b
.<<b c
IV<<c e
)<<e f
;<<f g
using>> 
(>> 
MemoryStream>> #
	msEncrypt>>$ -
=>>. /
new>>0 3
MemoryStream>>4 @
(>>@ A
)>>A B
)>>B C
{?? 
using@@ 
(@@ 
CryptoStream@@ '
	csEncrypt@@( 1
=@@2 3
new@@4 7
CryptoStream@@8 D
(@@D E
	msEncrypt@@E N
,@@N O
	encryptor@@P Y
,@@Y Z
CryptoStreamMode@@[ k
.@@k l
Write@@l q
)@@q r
)@@r s
{AA 
usingBB 
(BB 
StreamWriterBB +
	swEncryptBB, 5
=BB6 7
newBB8 ;
StreamWriterBB< H
(BBH I
	csEncryptBBI R
)BBR S
)BBS T
{CC 
	swEncryptEE %
.EE% &
WriteEE& +
(EE+ ,
stringToEncryptEE, ;
)EE; <
;EE< =
}FF 
byteCipherTextGG &
=GG' (
	msEncryptGG) 2
.GG2 3
ToArrayGG3 :
(GG: ;
)GG; <
;GG< =
}HH 
}II 
}JJ 
IOKK 
.KK 
	WriteLineKK 
(KK 
IOKK 
.KK 
ToHexKK !
(KK! "
byteCipherTextKK" 0
)KK0 1
)KK1 2
;KK2 3
}LL 	
}MM 
privateQQ 
voidQQ 
GoodG2B1QQ 
(QQ 
)QQ 
{RR 
stringSS 
dataSS 
;SS 
ifTT 

(TT 
privateFalseTT 
)TT 
{UU 	
dataXX 
=XX 
nullXX 
;XX 
}YY 	
elseZZ 
{[[ 	
data\\ 
=\\ 
$str\\ 
;\\ 
try^^ 
{__ 
dataaa 
=aa 
Consoleaa 
.aa 
ReadLineaa '
(aa' (
)aa( )
;aa) *
}bb 
catchcc 
(cc 
IOExceptioncc 
exceptIOcc '
)cc' (
{dd 
IOee 
.ee 
Loggeree 
.ee 
Logee 
(ee 
NLogee "
.ee" #
LogLevelee# +
.ee+ ,
Warnee, 0
,ee0 1
$stree2 M
,eeM N
exceptIOeeO W
)eeW X
;eeX Y
}ff 
}gg 	
ifhh 

(hh 
datahh 
!=hh 
nullhh 
)hh 
{ii 	
stringjj 
stringToEncryptjj "
=jj# $
$strjj% <
;jj< =
bytekk 
[kk 
]kk 
byteCipherTextkk !
=kk" #
nullkk$ (
;kk( )
usingmm 
(mm $
AesCryptoServiceProvidermm +
aesmm, /
=mm0 1
newmm2 5$
AesCryptoServiceProvidermm6 N
(mmN O
)mmO P
)mmP Q
{nn 
ICryptoTransformpp  
	encryptorpp! *
=pp+ ,
aespp- 0
.pp0 1
CreateEncryptorpp1 @
(pp@ A
EncodingppA I
.ppI J
UTF8ppJ N
.ppN O
GetBytesppO W
(ppW X
datappX \
)pp\ ]
,pp] ^
aespp_ b
.ppb c
IVppc e
)ppe f
;ppf g
usingrr 
(rr 
MemoryStreamrr #
	msEncryptrr$ -
=rr. /
newrr0 3
MemoryStreamrr4 @
(rr@ A
)rrA B
)rrB C
{ss 
usingtt 
(tt 
CryptoStreamtt '
	csEncrypttt( 1
=tt2 3
newtt4 7
CryptoStreamtt8 D
(ttD E
	msEncryptttE N
,ttN O
	encryptorttP Y
,ttY Z
CryptoStreamModett[ k
.ttk l
Writettl q
)ttq r
)ttr s
{uu 
usingvv 
(vv 
StreamWritervv +
	swEncryptvv, 5
=vv6 7
newvv8 ;
StreamWritervv< H
(vvH I
	csEncryptvvI R
)vvR S
)vvS T
{ww 
	swEncryptyy %
.yy% &
Writeyy& +
(yy+ ,
stringToEncryptyy, ;
)yy; <
;yy< =
}zz 
byteCipherText{{ &
={{' (
	msEncrypt{{) 2
.{{2 3
ToArray{{3 :
({{: ;
){{; <
;{{< =
}|| 
}}} 
}~~ 
IO 
. 
	WriteLine 
( 
IO 
. 
ToHex !
(! "
byteCipherText" 0
)0 1
)1 2
;2 3
}
 	
}
 
private
 
void
 
GoodG2B2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
data
 
!=
 
null
 
)
 
{
 	
string
 
stringToEncrypt
 "
=
# $
$str
% <
;
< =
byte
 
[
 
]
 
byteCipherText
 !
=
" #
null
$ (
;
( )
using
   
(
   &
AesCryptoServiceProvider
   +
aes
  , /
=
  0 1
new
  2 5&
AesCryptoServiceProvider
  6 N
(
  N O
)
  O P
)
  P Q
{
¡¡ 
ICryptoTransform
££  
	encryptor
££! *
=
££+ ,
aes
££- 0
.
££0 1
CreateEncryptor
££1 @
(
££@ A
Encoding
££A I
.
££I J
UTF8
££J N
.
££N O
GetBytes
££O W
(
££W X
data
££X \
)
££\ ]
,
££] ^
aes
££_ b
.
££b c
IV
££c e
)
££e f
;
££f g
using
¥¥ 
(
¥¥ 
MemoryStream
¥¥ #
	msEncrypt
¥¥$ -
=
¥¥. /
new
¥¥0 3
MemoryStream
¥¥4 @
(
¥¥@ A
)
¥¥A B
)
¥¥B C
{
¦¦ 
using
§§ 
(
§§ 
CryptoStream
§§ '
	csEncrypt
§§( 1
=
§§2 3
new
§§4 7
CryptoStream
§§8 D
(
§§D E
	msEncrypt
§§E N
,
§§N O
	encryptor
§§P Y
,
§§Y Z
CryptoStreamMode
§§[ k
.
§§k l
Write
§§l q
)
§§q r
)
§§r s
{
¨¨ 
using
©© 
(
©© 
StreamWriter
©© +
	swEncrypt
©©, 5
=
©©6 7
new
©©8 ;
StreamWriter
©©< H
(
©©H I
	csEncrypt
©©I R
)
©©R S
)
©©S T
{
ªª 
	swEncrypt
¬¬ %
.
¬¬% &
Write
¬¬& +
(
¬¬+ ,
stringToEncrypt
¬¬, ;
)
¬¬; <
;
¬¬< =
}
­­ 
byteCipherText
®® &
=
®®' (
	msEncrypt
®®) 2
.
®®2 3
ToArray
®®3 :
(
®®: ;
)
®®; <
;
®®< =
}
¯¯ 
}
°° 
}
±± 
IO
²² 
.
²² 
	WriteLine
²² 
(
²² 
IO
²² 
.
²² 
ToHex
²² !
(
²²! "
byteCipherText
²²" 0
)
²²0 1
)
²²1 2
;
²²2 3
}
³³ 	
}
´´ 
public
¶¶ 

override
¶¶ 
void
¶¶ 
Good
¶¶ 
(
¶¶ 
)
¶¶ 
{
·· 
GoodG2B1
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
GoodG2B2
¹¹ 
(
¹¹ 
)
¹¹ 
;
¹¹ 
}
ºº 
}¼¼ 
}½½ ùS
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_06.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_06 3
:4 5
AbstractTestCase6 F
{ 
private"" 
const"" 
int"" 
PRIVATE_CONST_FIVE"" (
="") *
$num""+ ,
;"", -
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
string'' 
data'' 
;'' 
if(( 

((( 
PRIVATE_CONST_FIVE(( 
==(( !
$num((" #
)((# $
{)) 	
data++ 
=++ 
$str++ %
;++% &
},, 	
else-- 
{.. 	
data11 
=11 
null11 
;11 
}22 	
if33 

(33 
data33 
!=33 
null33 
)33 
{44 	
string55 
stringToEncrypt55 "
=55# $
$str55% <
;55< =
byte66 
[66 
]66 
byteCipherText66 !
=66" #
null66$ (
;66( )
using88 
(88 $
AesCryptoServiceProvider88 +
aes88, /
=880 1
new882 5$
AesCryptoServiceProvider886 N
(88N O
)88O P
)88P Q
{99 
ICryptoTransform;;  
	encryptor;;! *
=;;+ ,
aes;;- 0
.;;0 1
CreateEncryptor;;1 @
(;;@ A
Encoding;;A I
.;;I J
UTF8;;J N
.;;N O
GetBytes;;O W
(;;W X
data;;X \
);;\ ]
,;;] ^
aes;;_ b
.;;b c
IV;;c e
);;e f
;;;f g
using== 
(== 
MemoryStream== #
	msEncrypt==$ -
===. /
new==0 3
MemoryStream==4 @
(==@ A
)==A B
)==B C
{>> 
using?? 
(?? 
CryptoStream?? '
	csEncrypt??( 1
=??2 3
new??4 7
CryptoStream??8 D
(??D E
	msEncrypt??E N
,??N O
	encryptor??P Y
,??Y Z
CryptoStreamMode??[ k
.??k l
Write??l q
)??q r
)??r s
{@@ 
usingAA 
(AA 
StreamWriterAA +
	swEncryptAA, 5
=AA6 7
newAA8 ;
StreamWriterAA< H
(AAH I
	csEncryptAAI R
)AAR S
)AAS T
{BB 
	swEncryptDD %
.DD% &
WriteDD& +
(DD+ ,
stringToEncryptDD, ;
)DD; <
;DD< =
}EE 
byteCipherTextFF &
=FF' (
	msEncryptFF) 2
.FF2 3
ToArrayFF3 :
(FF: ;
)FF; <
;FF< =
}GG 
}HH 
}II 
IOJJ 
.JJ 
	WriteLineJJ 
(JJ 
IOJJ 
.JJ 
ToHexJJ !
(JJ! "
byteCipherTextJJ" 0
)JJ0 1
)JJ1 2
;JJ2 3
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
PRIVATE_CONST_FIVESS 
!=SS !
$numSS" #
)SS# $
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data[[ 
=[[ 
$str[[ 
;[[ 
try]] 
{^^ 
data`` 
=`` 
Console`` 
.`` 
ReadLine`` '
(``' (
)``( )
;``) *
}aa 
catchbb 
(bb 
IOExceptionbb 
exceptIObb '
)bb' (
{cc 
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd "
.dd" #
LogLeveldd# +
.dd+ ,
Warndd, 0
,dd0 1
$strdd2 M
,ddM N
exceptIOddO W
)ddW X
;ddX Y
}ee 
}ff 	
ifgg 

(gg 
datagg 
!=gg 
nullgg 
)gg 
{hh 	
stringii 
stringToEncryptii "
=ii# $
$strii% <
;ii< =
bytejj 
[jj 
]jj 
byteCipherTextjj !
=jj" #
nulljj$ (
;jj( )
usingll 
(ll $
AesCryptoServiceProviderll +
aesll, /
=ll0 1
newll2 5$
AesCryptoServiceProviderll6 N
(llN O
)llO P
)llP Q
{mm 
ICryptoTransformoo  
	encryptoroo! *
=oo+ ,
aesoo- 0
.oo0 1
CreateEncryptoroo1 @
(oo@ A
EncodingooA I
.ooI J
UTF8ooJ N
.ooN O
GetBytesooO W
(ooW X
dataooX \
)oo\ ]
,oo] ^
aesoo_ b
.oob c
IVooc e
)ooe f
;oof g
usingqq 
(qq 
MemoryStreamqq #
	msEncryptqq$ -
=qq. /
newqq0 3
MemoryStreamqq4 @
(qq@ A
)qqA B
)qqB C
{rr 
usingss 
(ss 
CryptoStreamss '
	csEncryptss( 1
=ss2 3
newss4 7
CryptoStreamss8 D
(ssD E
	msEncryptssE N
,ssN O
	encryptorssP Y
,ssY Z
CryptoStreamModess[ k
.ssk l
Writessl q
)ssq r
)ssr s
{tt 
usinguu 
(uu 
StreamWriteruu +
	swEncryptuu, 5
=uu6 7
newuu8 ;
StreamWriteruu< H
(uuH I
	csEncryptuuI R
)uuR S
)uuS T
{vv 
	swEncryptxx %
.xx% &
Writexx& +
(xx+ ,
stringToEncryptxx, ;
)xx; <
;xx< =
}yy 
byteCipherTextzz &
=zz' (
	msEncryptzz) 2
.zz2 3
ToArrayzz3 :
(zz: ;
)zz; <
;zz< =
}{{ 
}|| 
}}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
IO~~ 
.~~ 
ToHex~~ !
(~~! "
byteCipherText~~" 0
)~~0 1
)~~1 2
;~~2 3
} 	
}
 
private
 
void
 
GoodG2B2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PRIVATE_CONST_FIVE
 
==
 !
$num
" #
)
# $
{
 	
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
data
 
!=
 
null
 
)
 
{
 	
string
 
stringToEncrypt
 "
=
# $
$str
% <
;
< =
byte
 
[
 
]
 
byteCipherText
 !
=
" #
null
$ (
;
( )
using
 
(
 &
AesCryptoServiceProvider
 +
aes
, /
=
0 1
new
2 5&
AesCryptoServiceProvider
6 N
(
N O
)
O P
)
P Q
{
   
ICryptoTransform
¢¢  
	encryptor
¢¢! *
=
¢¢+ ,
aes
¢¢- 0
.
¢¢0 1
CreateEncryptor
¢¢1 @
(
¢¢@ A
Encoding
¢¢A I
.
¢¢I J
UTF8
¢¢J N
.
¢¢N O
GetBytes
¢¢O W
(
¢¢W X
data
¢¢X \
)
¢¢\ ]
,
¢¢] ^
aes
¢¢_ b
.
¢¢b c
IV
¢¢c e
)
¢¢e f
;
¢¢f g
using
¤¤ 
(
¤¤ 
MemoryStream
¤¤ #
	msEncrypt
¤¤$ -
=
¤¤. /
new
¤¤0 3
MemoryStream
¤¤4 @
(
¤¤@ A
)
¤¤A B
)
¤¤B C
{
¥¥ 
using
¦¦ 
(
¦¦ 
CryptoStream
¦¦ '
	csEncrypt
¦¦( 1
=
¦¦2 3
new
¦¦4 7
CryptoStream
¦¦8 D
(
¦¦D E
	msEncrypt
¦¦E N
,
¦¦N O
	encryptor
¦¦P Y
,
¦¦Y Z
CryptoStreamMode
¦¦[ k
.
¦¦k l
Write
¦¦l q
)
¦¦q r
)
¦¦r s
{
§§ 
using
¨¨ 
(
¨¨ 
StreamWriter
¨¨ +
	swEncrypt
¨¨, 5
=
¨¨6 7
new
¨¨8 ;
StreamWriter
¨¨< H
(
¨¨H I
	csEncrypt
¨¨I R
)
¨¨R S
)
¨¨S T
{
©© 
	swEncrypt
«« %
.
««% &
Write
««& +
(
««+ ,
stringToEncrypt
««, ;
)
««; <
;
««< =
}
¬¬ 
byteCipherText
­­ &
=
­­' (
	msEncrypt
­­) 2
.
­­2 3
ToArray
­­3 :
(
­­: ;
)
­­; <
;
­­< =
}
®® 
}
¯¯ 
}
°° 
IO
±± 
.
±± 
	WriteLine
±± 
(
±± 
IO
±± 
.
±± 
ToHex
±± !
(
±±! "
byteCipherText
±±" 0
)
±±0 1
)
±±1 2
;
±±2 3
}
²² 	
}
³³ 
public
µµ 

override
µµ 
void
µµ 
Good
µµ 
(
µµ 
)
µµ 
{
¶¶ 
GoodG2B1
·· 
(
·· 
)
·· 
;
·· 
GoodG2B2
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
}
¹¹ 
}»» 
}¼¼ ÊS
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_07.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_07 3
:4 5
AbstractTestCase6 F
{ 
private"" 
int"" 
privateFive"" 
="" 
$num"" 
;""  
public%% 

override%% 
void%% 
Bad%% 
(%% 
)%% 
{&& 
string'' 
data'' 
;'' 
if(( 

((( 
privateFive(( 
==(( 
$num(( 
)(( 
{)) 	
data++ 
=++ 
$str++ %
;++% &
},, 	
else-- 
{.. 	
data11 
=11 
null11 
;11 
}22 	
if33 

(33 
data33 
!=33 
null33 
)33 
{44 	
string55 
stringToEncrypt55 "
=55# $
$str55% <
;55< =
byte66 
[66 
]66 
byteCipherText66 !
=66" #
null66$ (
;66( )
using88 
(88 $
AesCryptoServiceProvider88 +
aes88, /
=880 1
new882 5$
AesCryptoServiceProvider886 N
(88N O
)88O P
)88P Q
{99 
ICryptoTransform;;  
	encryptor;;! *
=;;+ ,
aes;;- 0
.;;0 1
CreateEncryptor;;1 @
(;;@ A
Encoding;;A I
.;;I J
UTF8;;J N
.;;N O
GetBytes;;O W
(;;W X
data;;X \
);;\ ]
,;;] ^
aes;;_ b
.;;b c
IV;;c e
);;e f
;;;f g
using== 
(== 
MemoryStream== #
	msEncrypt==$ -
===. /
new==0 3
MemoryStream==4 @
(==@ A
)==A B
)==B C
{>> 
using?? 
(?? 
CryptoStream?? '
	csEncrypt??( 1
=??2 3
new??4 7
CryptoStream??8 D
(??D E
	msEncrypt??E N
,??N O
	encryptor??P Y
,??Y Z
CryptoStreamMode??[ k
.??k l
Write??l q
)??q r
)??r s
{@@ 
usingAA 
(AA 
StreamWriterAA +
	swEncryptAA, 5
=AA6 7
newAA8 ;
StreamWriterAA< H
(AAH I
	csEncryptAAI R
)AAR S
)AAS T
{BB 
	swEncryptDD %
.DD% &
WriteDD& +
(DD+ ,
stringToEncryptDD, ;
)DD; <
;DD< =
}EE 
byteCipherTextFF &
=FF' (
	msEncryptFF) 2
.FF2 3
ToArrayFF3 :
(FF: ;
)FF; <
;FF< =
}GG 
}HH 
}II 
IOJJ 
.JJ 
	WriteLineJJ 
(JJ 
IOJJ 
.JJ 
ToHexJJ !
(JJ! "
byteCipherTextJJ" 0
)JJ0 1
)JJ1 2
;JJ2 3
}KK 	
}LL 
privatePP 
voidPP 
GoodG2B1PP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
;RR 
ifSS 

(SS 
privateFiveSS 
!=SS 
$numSS 
)SS 
{TT 	
dataWW 
=WW 
nullWW 
;WW 
}XX 	
elseYY 
{ZZ 	
data[[ 
=[[ 
$str[[ 
;[[ 
try]] 
{^^ 
data`` 
=`` 
Console`` 
.`` 
ReadLine`` '
(``' (
)``( )
;``) *
}aa 
catchbb 
(bb 
IOExceptionbb 
exceptIObb '
)bb' (
{cc 
IOdd 
.dd 
Loggerdd 
.dd 
Logdd 
(dd 
NLogdd "
.dd" #
LogLeveldd# +
.dd+ ,
Warndd, 0
,dd0 1
$strdd2 M
,ddM N
exceptIOddO W
)ddW X
;ddX Y
}ee 
}ff 	
ifgg 

(gg 
datagg 
!=gg 
nullgg 
)gg 
{hh 	
stringii 
stringToEncryptii "
=ii# $
$strii% <
;ii< =
bytejj 
[jj 
]jj 
byteCipherTextjj !
=jj" #
nulljj$ (
;jj( )
usingll 
(ll $
AesCryptoServiceProviderll +
aesll, /
=ll0 1
newll2 5$
AesCryptoServiceProviderll6 N
(llN O
)llO P
)llP Q
{mm 
ICryptoTransformoo  
	encryptoroo! *
=oo+ ,
aesoo- 0
.oo0 1
CreateEncryptoroo1 @
(oo@ A
EncodingooA I
.ooI J
UTF8ooJ N
.ooN O
GetBytesooO W
(ooW X
dataooX \
)oo\ ]
,oo] ^
aesoo_ b
.oob c
IVooc e
)ooe f
;oof g
usingqq 
(qq 
MemoryStreamqq #
	msEncryptqq$ -
=qq. /
newqq0 3
MemoryStreamqq4 @
(qq@ A
)qqA B
)qqB C
{rr 
usingss 
(ss 
CryptoStreamss '
	csEncryptss( 1
=ss2 3
newss4 7
CryptoStreamss8 D
(ssD E
	msEncryptssE N
,ssN O
	encryptorssP Y
,ssY Z
CryptoStreamModess[ k
.ssk l
Writessl q
)ssq r
)ssr s
{tt 
usinguu 
(uu 
StreamWriteruu +
	swEncryptuu, 5
=uu6 7
newuu8 ;
StreamWriteruu< H
(uuH I
	csEncryptuuI R
)uuR S
)uuS T
{vv 
	swEncryptxx %
.xx% &
Writexx& +
(xx+ ,
stringToEncryptxx, ;
)xx; <
;xx< =
}yy 
byteCipherTextzz &
=zz' (
	msEncryptzz) 2
.zz2 3
ToArrayzz3 :
(zz: ;
)zz; <
;zz< =
}{{ 
}|| 
}}} 
IO~~ 
.~~ 
	WriteLine~~ 
(~~ 
IO~~ 
.~~ 
ToHex~~ !
(~~! "
byteCipherText~~" 0
)~~0 1
)~~1 2
;~~2 3
} 	
}
 
private
 
void
 
GoodG2B2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
 
privateFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
data
 
!=
 
null
 
)
 
{
 	
string
 
stringToEncrypt
 "
=
# $
$str
% <
;
< =
byte
 
[
 
]
 
byteCipherText
 !
=
" #
null
$ (
;
( )
using
 
(
 &
AesCryptoServiceProvider
 +
aes
, /
=
0 1
new
2 5&
AesCryptoServiceProvider
6 N
(
N O
)
O P
)
P Q
{
   
ICryptoTransform
¢¢  
	encryptor
¢¢! *
=
¢¢+ ,
aes
¢¢- 0
.
¢¢0 1
CreateEncryptor
¢¢1 @
(
¢¢@ A
Encoding
¢¢A I
.
¢¢I J
UTF8
¢¢J N
.
¢¢N O
GetBytes
¢¢O W
(
¢¢W X
data
¢¢X \
)
¢¢\ ]
,
¢¢] ^
aes
¢¢_ b
.
¢¢b c
IV
¢¢c e
)
¢¢e f
;
¢¢f g
using
¤¤ 
(
¤¤ 
MemoryStream
¤¤ #
	msEncrypt
¤¤$ -
=
¤¤. /
new
¤¤0 3
MemoryStream
¤¤4 @
(
¤¤@ A
)
¤¤A B
)
¤¤B C
{
¥¥ 
using
¦¦ 
(
¦¦ 
CryptoStream
¦¦ '
	csEncrypt
¦¦( 1
=
¦¦2 3
new
¦¦4 7
CryptoStream
¦¦8 D
(
¦¦D E
	msEncrypt
¦¦E N
,
¦¦N O
	encryptor
¦¦P Y
,
¦¦Y Z
CryptoStreamMode
¦¦[ k
.
¦¦k l
Write
¦¦l q
)
¦¦q r
)
¦¦r s
{
§§ 
using
¨¨ 
(
¨¨ 
StreamWriter
¨¨ +
	swEncrypt
¨¨, 5
=
¨¨6 7
new
¨¨8 ;
StreamWriter
¨¨< H
(
¨¨H I
	csEncrypt
¨¨I R
)
¨¨R S
)
¨¨S T
{
©© 
	swEncrypt
«« %
.
««% &
Write
««& +
(
««+ ,
stringToEncrypt
««, ;
)
««; <
;
««< =
}
¬¬ 
byteCipherText
­­ &
=
­­' (
	msEncrypt
­­) 2
.
­­2 3
ToArray
­­3 :
(
­­: ;
)
­­; <
;
­­< =
}
®® 
}
¯¯ 
}
°° 
IO
±± 
.
±± 
	WriteLine
±± 
(
±± 
IO
±± 
.
±± 
ToHex
±± !
(
±±! "
byteCipherText
±±" 0
)
±±0 1
)
±±1 2
;
±±2 3
}
²² 	
}
³³ 
public
µµ 

override
µµ 
void
µµ 
Good
µµ 
(
µµ 
)
µµ 
{
¶¶ 
GoodG2B1
·· 
(
·· 
)
·· 
;
·· 
GoodG2B2
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
}
¹¹ 
}»» 
}¼¼ ¿V
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_08.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_08 3
:4 5
AbstractTestCase6 F
{ 
private"" 
static"" 
bool"" 
PrivateReturnsTrue"" *
(""* +
)""+ ,
{## 
return$$ 
true$$ 
;$$ 
}%% 
private'' 
static'' 
bool'' 
PrivateReturnsFalse'' +
(''+ ,
)'', -
{(( 
return)) 
false)) 
;)) 
}** 
public-- 

override-- 
void-- 
Bad-- 
(-- 
)-- 
{.. 
string// 
data// 
;// 
if00 

(00 
PrivateReturnsTrue00 
(00 
)00  
)00  !
{11 	
data33 
=33 
$str33 %
;33% &
}44 	
else55 
{66 	
data99 
=99 
null99 
;99 
}:: 	
if;; 

(;; 
data;; 
!=;; 
null;; 
);; 
{<< 	
string== 
stringToEncrypt== "
===# $
$str==% <
;==< =
byte>> 
[>> 
]>> 
byteCipherText>> !
=>>" #
null>>$ (
;>>( )
using@@ 
(@@ $
AesCryptoServiceProvider@@ +
aes@@, /
=@@0 1
new@@2 5$
AesCryptoServiceProvider@@6 N
(@@N O
)@@O P
)@@P Q
{AA 
ICryptoTransformCC  
	encryptorCC! *
=CC+ ,
aesCC- 0
.CC0 1
CreateEncryptorCC1 @
(CC@ A
EncodingCCA I
.CCI J
UTF8CCJ N
.CCN O
GetBytesCCO W
(CCW X
dataCCX \
)CC\ ]
,CC] ^
aesCC_ b
.CCb c
IVCCc e
)CCe f
;CCf g
usingEE 
(EE 
MemoryStreamEE #
	msEncryptEE$ -
=EE. /
newEE0 3
MemoryStreamEE4 @
(EE@ A
)EEA B
)EEB C
{FF 
usingGG 
(GG 
CryptoStreamGG '
	csEncryptGG( 1
=GG2 3
newGG4 7
CryptoStreamGG8 D
(GGD E
	msEncryptGGE N
,GGN O
	encryptorGGP Y
,GGY Z
CryptoStreamModeGG[ k
.GGk l
WriteGGl q
)GGq r
)GGr s
{HH 
usingII 
(II 
StreamWriterII +
	swEncryptII, 5
=II6 7
newII8 ;
StreamWriterII< H
(IIH I
	csEncryptIII R
)IIR S
)IIS T
{JJ 
	swEncryptLL %
.LL% &
WriteLL& +
(LL+ ,
stringToEncryptLL, ;
)LL; <
;LL< =
}MM 
byteCipherTextNN &
=NN' (
	msEncryptNN) 2
.NN2 3
ToArrayNN3 :
(NN: ;
)NN; <
;NN< =
}OO 
}PP 
}QQ 
IORR 
.RR 
	WriteLineRR 
(RR 
IORR 
.RR 
ToHexRR !
(RR! "
byteCipherTextRR" 0
)RR0 1
)RR1 2
;RR2 3
}SS 	
}TT 
privateXX 
voidXX 
GoodG2B1XX 
(XX 
)XX 
{YY 
stringZZ 
dataZZ 
;ZZ 
if[[ 

([[ 
PrivateReturnsFalse[[ 
([[  
)[[  !
)[[! "
{\\ 	
data__ 
=__ 
null__ 
;__ 
}`` 	
elseaa 
{bb 	
datacc 
=cc 
$strcc 
;cc 
tryee 
{ff 
datahh 
=hh 
Consolehh 
.hh 
ReadLinehh '
(hh' (
)hh( )
;hh) *
}ii 
catchjj 
(jj 
IOExceptionjj 
exceptIOjj '
)jj' (
{kk 
IOll 
.ll 
Loggerll 
.ll 
Logll 
(ll 
NLogll "
.ll" #
LogLevelll# +
.ll+ ,
Warnll, 0
,ll0 1
$strll2 M
,llM N
exceptIOllO W
)llW X
;llX Y
}mm 
}nn 	
ifoo 

(oo 
dataoo 
!=oo 
nulloo 
)oo 
{pp 	
stringqq 
stringToEncryptqq "
=qq# $
$strqq% <
;qq< =
byterr 
[rr 
]rr 
byteCipherTextrr !
=rr" #
nullrr$ (
;rr( )
usingtt 
(tt $
AesCryptoServiceProvidertt +
aestt, /
=tt0 1
newtt2 5$
AesCryptoServiceProvidertt6 N
(ttN O
)ttO P
)ttP Q
{uu 
ICryptoTransformww  
	encryptorww! *
=ww+ ,
aesww- 0
.ww0 1
CreateEncryptorww1 @
(ww@ A
EncodingwwA I
.wwI J
UTF8wwJ N
.wwN O
GetByteswwO W
(wwW X
datawwX \
)ww\ ]
,ww] ^
aesww_ b
.wwb c
IVwwc e
)wwe f
;wwf g
usingyy 
(yy 
MemoryStreamyy #
	msEncryptyy$ -
=yy. /
newyy0 3
MemoryStreamyy4 @
(yy@ A
)yyA B
)yyB C
{zz 
using{{ 
({{ 
CryptoStream{{ '
	csEncrypt{{( 1
={{2 3
new{{4 7
CryptoStream{{8 D
({{D E
	msEncrypt{{E N
,{{N O
	encryptor{{P Y
,{{Y Z
CryptoStreamMode{{[ k
.{{k l
Write{{l q
){{q r
){{r s
{|| 
using}} 
(}} 
StreamWriter}} +
	swEncrypt}}, 5
=}}6 7
new}}8 ;
StreamWriter}}< H
(}}H I
	csEncrypt}}I R
)}}R S
)}}S T
{~~ 
	swEncrypt
 %
.
% &
Write
& +
(
+ ,
stringToEncrypt
, ;
)
; <
;
< =
}
 
byteCipherText
 &
=
' (
	msEncrypt
) 2
.
2 3
ToArray
3 :
(
: ;
)
; <
;
< =
}
 
}
 
}
 
IO
 
.
 
	WriteLine
 
(
 
IO
 
.
 
ToHex
 !
(
! "
byteCipherText
" 0
)
0 1
)
1 2
;
2 3
}
 	
}
 
private
 
void
 
GoodG2B2
 
(
 
)
 
{
 
string
 
data
 
;
 
if
 

(
  
PrivateReturnsTrue
 
(
 
)
  
)
  !
{
 	
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
}
 	
else
 
{
 	
data
   
=
   
null
   
;
   
}
¡¡ 	
if
¢¢ 

(
¢¢ 
data
¢¢ 
!=
¢¢ 
null
¢¢ 
)
¢¢ 
{
££ 	
string
¤¤ 
stringToEncrypt
¤¤ "
=
¤¤# $
$str
¤¤% <
;
¤¤< =
byte
¥¥ 
[
¥¥ 
]
¥¥ 
byteCipherText
¥¥ !
=
¥¥" #
null
¥¥$ (
;
¥¥( )
using
§§ 
(
§§ &
AesCryptoServiceProvider
§§ +
aes
§§, /
=
§§0 1
new
§§2 5&
AesCryptoServiceProvider
§§6 N
(
§§N O
)
§§O P
)
§§P Q
{
¨¨ 
ICryptoTransform
ªª  
	encryptor
ªª! *
=
ªª+ ,
aes
ªª- 0
.
ªª0 1
CreateEncryptor
ªª1 @
(
ªª@ A
Encoding
ªªA I
.
ªªI J
UTF8
ªªJ N
.
ªªN O
GetBytes
ªªO W
(
ªªW X
data
ªªX \
)
ªª\ ]
,
ªª] ^
aes
ªª_ b
.
ªªb c
IV
ªªc e
)
ªªe f
;
ªªf g
using
¬¬ 
(
¬¬ 
MemoryStream
¬¬ #
	msEncrypt
¬¬$ -
=
¬¬. /
new
¬¬0 3
MemoryStream
¬¬4 @
(
¬¬@ A
)
¬¬A B
)
¬¬B C
{
­­ 
using
®® 
(
®® 
CryptoStream
®® '
	csEncrypt
®®( 1
=
®®2 3
new
®®4 7
CryptoStream
®®8 D
(
®®D E
	msEncrypt
®®E N
,
®®N O
	encryptor
®®P Y
,
®®Y Z
CryptoStreamMode
®®[ k
.
®®k l
Write
®®l q
)
®®q r
)
®®r s
{
¯¯ 
using
°° 
(
°° 
StreamWriter
°° +
	swEncrypt
°°, 5
=
°°6 7
new
°°8 ;
StreamWriter
°°< H
(
°°H I
	csEncrypt
°°I R
)
°°R S
)
°°S T
{
±± 
	swEncrypt
³³ %
.
³³% &
Write
³³& +
(
³³+ ,
stringToEncrypt
³³, ;
)
³³; <
;
³³< =
}
´´ 
byteCipherText
µµ &
=
µµ' (
	msEncrypt
µµ) 2
.
µµ2 3
ToArray
µµ3 :
(
µµ: ;
)
µµ; <
;
µµ< =
}
¶¶ 
}
·· 
}
¸¸ 
IO
¹¹ 
.
¹¹ 
	WriteLine
¹¹ 
(
¹¹ 
IO
¹¹ 
.
¹¹ 
ToHex
¹¹ !
(
¹¹! "
byteCipherText
¹¹" 0
)
¹¹0 1
)
¹¹1 2
;
¹¹2 3
}
ºº 	
}
»» 
public
½½ 

override
½½ 
void
½½ 
Good
½½ 
(
½½ 
)
½½ 
{
¾¾ 
GoodG2B1
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
GoodG2B2
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
}
ÁÁ 
}ÃÃ 
}ÄÄ ÚR
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_09.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_09 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
.""  
STATIC_READONLY_TRUE"" #
)""# $
{## 	
data%% 
=%% 
$str%% %
;%%% &
}&& 	
else'' 
{(( 	
data++ 
=++ 
null++ 
;++ 
},, 	
if-- 

(-- 
data-- 
!=-- 
null-- 
)-- 
{.. 	
string// 
stringToEncrypt// "
=//# $
$str//% <
;//< =
byte00 
[00 
]00 
byteCipherText00 !
=00" #
null00$ (
;00( )
using22 
(22 $
AesCryptoServiceProvider22 +
aes22, /
=220 1
new222 5$
AesCryptoServiceProvider226 N
(22N O
)22O P
)22P Q
{33 
ICryptoTransform55  
	encryptor55! *
=55+ ,
aes55- 0
.550 1
CreateEncryptor551 @
(55@ A
Encoding55A I
.55I J
UTF855J N
.55N O
GetBytes55O W
(55W X
data55X \
)55\ ]
,55] ^
aes55_ b
.55b c
IV55c e
)55e f
;55f g
using77 
(77 
MemoryStream77 #
	msEncrypt77$ -
=77. /
new770 3
MemoryStream774 @
(77@ A
)77A B
)77B C
{88 
using99 
(99 
CryptoStream99 '
	csEncrypt99( 1
=992 3
new994 7
CryptoStream998 D
(99D E
	msEncrypt99E N
,99N O
	encryptor99P Y
,99Y Z
CryptoStreamMode99[ k
.99k l
Write99l q
)99q r
)99r s
{:: 
using;; 
(;; 
StreamWriter;; +
	swEncrypt;;, 5
=;;6 7
new;;8 ;
StreamWriter;;< H
(;;H I
	csEncrypt;;I R
);;R S
);;S T
{<< 
	swEncrypt>> %
.>>% &
Write>>& +
(>>+ ,
stringToEncrypt>>, ;
)>>; <
;>>< =
}?? 
byteCipherText@@ &
=@@' (
	msEncrypt@@) 2
.@@2 3
ToArray@@3 :
(@@: ;
)@@; <
;@@< =
}AA 
}BB 
}CC 
IODD 
.DD 
	WriteLineDD 
(DD 
IODD 
.DD 
ToHexDD !
(DD! "
byteCipherTextDD" 0
)DD0 1
)DD1 2
;DD2 3
}EE 	
}FF 
privateJJ 
voidJJ 
GoodG2B1JJ 
(JJ 
)JJ 
{KK 
stringLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM !
STATIC_READONLY_FALSEMM $
)MM$ %
{NN 	
dataQQ 
=QQ 
nullQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataUU 
=UU 
$strUU 
;UU 
tryWW 
{XX 
dataZZ 
=ZZ 
ConsoleZZ 
.ZZ 
ReadLineZZ '
(ZZ' (
)ZZ( )
;ZZ) *
}[[ 
catch\\ 
(\\ 
IOException\\ 
exceptIO\\ '
)\\' (
{]] 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
$str^^2 M
,^^M N
exceptIO^^O W
)^^W X
;^^X Y
}__ 
}`` 	
ifaa 

(aa 
dataaa 
!=aa 
nullaa 
)aa 
{bb 	
stringcc 
stringToEncryptcc "
=cc# $
$strcc% <
;cc< =
bytedd 
[dd 
]dd 
byteCipherTextdd !
=dd" #
nulldd$ (
;dd( )
usingff 
(ff $
AesCryptoServiceProviderff +
aesff, /
=ff0 1
newff2 5$
AesCryptoServiceProviderff6 N
(ffN O
)ffO P
)ffP Q
{gg 
ICryptoTransformii  
	encryptorii! *
=ii+ ,
aesii- 0
.ii0 1
CreateEncryptorii1 @
(ii@ A
EncodingiiA I
.iiI J
UTF8iiJ N
.iiN O
GetBytesiiO W
(iiW X
dataiiX \
)ii\ ]
,ii] ^
aesii_ b
.iib c
IViic e
)iie f
;iif g
usingkk 
(kk 
MemoryStreamkk #
	msEncryptkk$ -
=kk. /
newkk0 3
MemoryStreamkk4 @
(kk@ A
)kkA B
)kkB C
{ll 
usingmm 
(mm 
CryptoStreammm '
	csEncryptmm( 1
=mm2 3
newmm4 7
CryptoStreammm8 D
(mmD E
	msEncryptmmE N
,mmN O
	encryptormmP Y
,mmY Z
CryptoStreamModemm[ k
.mmk l
Writemml q
)mmq r
)mmr s
{nn 
usingoo 
(oo 
StreamWriteroo +
	swEncryptoo, 5
=oo6 7
newoo8 ;
StreamWriteroo< H
(ooH I
	csEncryptooI R
)ooR S
)ooS T
{pp 
	swEncryptrr %
.rr% &
Writerr& +
(rr+ ,
stringToEncryptrr, ;
)rr; <
;rr< =
}ss 
byteCipherTexttt &
=tt' (
	msEncrypttt) 2
.tt2 3
ToArraytt3 :
(tt: ;
)tt; <
;tt< =
}uu 
}vv 
}ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
IOxx 
.xx 
ToHexxx !
(xx! "
byteCipherTextxx" 0
)xx0 1
)xx1 2
;xx2 3
}yy 	
}zz 
private}} 
void}} 
GoodG2B2}} 
(}} 
)}} 
{~~ 
string 
data 
; 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_TRUE
 #
)
# $
{
 	
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
data
 
!=
 
null
 
)
 
{
 	
string
 
stringToEncrypt
 "
=
# $
$str
% <
;
< =
byte
 
[
 
]
 
byteCipherText
 !
=
" #
null
$ (
;
( )
using
 
(
 &
AesCryptoServiceProvider
 +
aes
, /
=
0 1
new
2 5&
AesCryptoServiceProvider
6 N
(
N O
)
O P
)
P Q
{
 
ICryptoTransform
  
	encryptor
! *
=
+ ,
aes
- 0
.
0 1
CreateEncryptor
1 @
(
@ A
Encoding
A I
.
I J
UTF8
J N
.
N O
GetBytes
O W
(
W X
data
X \
)
\ ]
,
] ^
aes
_ b
.
b c
IV
c e
)
e f
;
f g
using
 
(
 
MemoryStream
 #
	msEncrypt
$ -
=
. /
new
0 3
MemoryStream
4 @
(
@ A
)
A B
)
B C
{
 
using
   
(
   
CryptoStream
   '
	csEncrypt
  ( 1
=
  2 3
new
  4 7
CryptoStream
  8 D
(
  D E
	msEncrypt
  E N
,
  N O
	encryptor
  P Y
,
  Y Z
CryptoStreamMode
  [ k
.
  k l
Write
  l q
)
  q r
)
  r s
{
¡¡ 
using
¢¢ 
(
¢¢ 
StreamWriter
¢¢ +
	swEncrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
StreamWriter
¢¢< H
(
¢¢H I
	csEncrypt
¢¢I R
)
¢¢R S
)
¢¢S T
{
££ 
	swEncrypt
¥¥ %
.
¥¥% &
Write
¥¥& +
(
¥¥+ ,
stringToEncrypt
¥¥, ;
)
¥¥; <
;
¥¥< =
}
¦¦ 
byteCipherText
§§ &
=
§§' (
	msEncrypt
§§) 2
.
§§2 3
ToArray
§§3 :
(
§§: ;
)
§§; <
;
§§< =
}
¨¨ 
}
©© 
}
ªª 
IO
«« 
.
«« 
	WriteLine
«« 
(
«« 
IO
«« 
.
«« 
ToHex
«« !
(
««! "
byteCipherText
««" 0
)
««0 1
)
««1 2
;
««2 3
}
¬¬ 	
}
­­ 
public
¯¯ 

override
¯¯ 
void
¯¯ 
Good
¯¯ 
(
¯¯ 
)
¯¯ 
{
°° 
GoodG2B1
±± 
(
±± 
)
±± 
;
±± 
GoodG2B2
²² 
(
²² 
)
²² 
;
²² 
}
³³ 
}µµ 
}¶¶ ¼R
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_10.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_10 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
."" 

staticTrue"" 
)"" 
{## 	
data%% 
=%% 
$str%% %
;%%% &
}&& 	
else'' 
{(( 	
data++ 
=++ 
null++ 
;++ 
},, 	
if-- 

(-- 
data-- 
!=-- 
null-- 
)-- 
{.. 	
string// 
stringToEncrypt// "
=//# $
$str//% <
;//< =
byte00 
[00 
]00 
byteCipherText00 !
=00" #
null00$ (
;00( )
using22 
(22 $
AesCryptoServiceProvider22 +
aes22, /
=220 1
new222 5$
AesCryptoServiceProvider226 N
(22N O
)22O P
)22P Q
{33 
ICryptoTransform55  
	encryptor55! *
=55+ ,
aes55- 0
.550 1
CreateEncryptor551 @
(55@ A
Encoding55A I
.55I J
UTF855J N
.55N O
GetBytes55O W
(55W X
data55X \
)55\ ]
,55] ^
aes55_ b
.55b c
IV55c e
)55e f
;55f g
using77 
(77 
MemoryStream77 #
	msEncrypt77$ -
=77. /
new770 3
MemoryStream774 @
(77@ A
)77A B
)77B C
{88 
using99 
(99 
CryptoStream99 '
	csEncrypt99( 1
=992 3
new994 7
CryptoStream998 D
(99D E
	msEncrypt99E N
,99N O
	encryptor99P Y
,99Y Z
CryptoStreamMode99[ k
.99k l
Write99l q
)99q r
)99r s
{:: 
using;; 
(;; 
StreamWriter;; +
	swEncrypt;;, 5
=;;6 7
new;;8 ;
StreamWriter;;< H
(;;H I
	csEncrypt;;I R
);;R S
);;S T
{<< 
	swEncrypt>> %
.>>% &
Write>>& +
(>>+ ,
stringToEncrypt>>, ;
)>>; <
;>>< =
}?? 
byteCipherText@@ &
=@@' (
	msEncrypt@@) 2
.@@2 3
ToArray@@3 :
(@@: ;
)@@; <
;@@< =
}AA 
}BB 
}CC 
IODD 
.DD 
	WriteLineDD 
(DD 
IODD 
.DD 
ToHexDD !
(DD! "
byteCipherTextDD" 0
)DD0 1
)DD1 2
;DD2 3
}EE 	
}FF 
privateJJ 
voidJJ 
GoodG2B1JJ 
(JJ 
)JJ 
{KK 
stringLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM 
staticFalseMM 
)MM 
{NN 	
dataQQ 
=QQ 
nullQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataUU 
=UU 
$strUU 
;UU 
tryWW 
{XX 
dataZZ 
=ZZ 
ConsoleZZ 
.ZZ 
ReadLineZZ '
(ZZ' (
)ZZ( )
;ZZ) *
}[[ 
catch\\ 
(\\ 
IOException\\ 
exceptIO\\ '
)\\' (
{]] 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
$str^^2 M
,^^M N
exceptIO^^O W
)^^W X
;^^X Y
}__ 
}`` 	
ifaa 

(aa 
dataaa 
!=aa 
nullaa 
)aa 
{bb 	
stringcc 
stringToEncryptcc "
=cc# $
$strcc% <
;cc< =
bytedd 
[dd 
]dd 
byteCipherTextdd !
=dd" #
nulldd$ (
;dd( )
usingff 
(ff $
AesCryptoServiceProviderff +
aesff, /
=ff0 1
newff2 5$
AesCryptoServiceProviderff6 N
(ffN O
)ffO P
)ffP Q
{gg 
ICryptoTransformii  
	encryptorii! *
=ii+ ,
aesii- 0
.ii0 1
CreateEncryptorii1 @
(ii@ A
EncodingiiA I
.iiI J
UTF8iiJ N
.iiN O
GetBytesiiO W
(iiW X
dataiiX \
)ii\ ]
,ii] ^
aesii_ b
.iib c
IViic e
)iie f
;iif g
usingkk 
(kk 
MemoryStreamkk #
	msEncryptkk$ -
=kk. /
newkk0 3
MemoryStreamkk4 @
(kk@ A
)kkA B
)kkB C
{ll 
usingmm 
(mm 
CryptoStreammm '
	csEncryptmm( 1
=mm2 3
newmm4 7
CryptoStreammm8 D
(mmD E
	msEncryptmmE N
,mmN O
	encryptormmP Y
,mmY Z
CryptoStreamModemm[ k
.mmk l
Writemml q
)mmq r
)mmr s
{nn 
usingoo 
(oo 
StreamWriteroo +
	swEncryptoo, 5
=oo6 7
newoo8 ;
StreamWriteroo< H
(ooH I
	csEncryptooI R
)ooR S
)ooS T
{pp 
	swEncryptrr %
.rr% &
Writerr& +
(rr+ ,
stringToEncryptrr, ;
)rr; <
;rr< =
}ss 
byteCipherTexttt &
=tt' (
	msEncrypttt) 2
.tt2 3
ToArraytt3 :
(tt: ;
)tt; <
;tt< =
}uu 
}vv 
}ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
IOxx 
.xx 
ToHexxx !
(xx! "
byteCipherTextxx" 0
)xx0 1
)xx1 2
;xx2 3
}yy 	
}zz 
private}} 
void}} 
GoodG2B2}} 
(}} 
)}} 
{~~ 
string 
data 
; 
if
 

(
 
IO
 
.
 

staticTrue
 
)
 
{
 	
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
data
 
!=
 
null
 
)
 
{
 	
string
 
stringToEncrypt
 "
=
# $
$str
% <
;
< =
byte
 
[
 
]
 
byteCipherText
 !
=
" #
null
$ (
;
( )
using
 
(
 &
AesCryptoServiceProvider
 +
aes
, /
=
0 1
new
2 5&
AesCryptoServiceProvider
6 N
(
N O
)
O P
)
P Q
{
 
ICryptoTransform
  
	encryptor
! *
=
+ ,
aes
- 0
.
0 1
CreateEncryptor
1 @
(
@ A
Encoding
A I
.
I J
UTF8
J N
.
N O
GetBytes
O W
(
W X
data
X \
)
\ ]
,
] ^
aes
_ b
.
b c
IV
c e
)
e f
;
f g
using
 
(
 
MemoryStream
 #
	msEncrypt
$ -
=
. /
new
0 3
MemoryStream
4 @
(
@ A
)
A B
)
B C
{
 
using
   
(
   
CryptoStream
   '
	csEncrypt
  ( 1
=
  2 3
new
  4 7
CryptoStream
  8 D
(
  D E
	msEncrypt
  E N
,
  N O
	encryptor
  P Y
,
  Y Z
CryptoStreamMode
  [ k
.
  k l
Write
  l q
)
  q r
)
  r s
{
¡¡ 
using
¢¢ 
(
¢¢ 
StreamWriter
¢¢ +
	swEncrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
StreamWriter
¢¢< H
(
¢¢H I
	csEncrypt
¢¢I R
)
¢¢R S
)
¢¢S T
{
££ 
	swEncrypt
¥¥ %
.
¥¥% &
Write
¥¥& +
(
¥¥+ ,
stringToEncrypt
¥¥, ;
)
¥¥; <
;
¥¥< =
}
¦¦ 
byteCipherText
§§ &
=
§§' (
	msEncrypt
§§) 2
.
§§2 3
ToArray
§§3 :
(
§§: ;
)
§§; <
;
§§< =
}
¨¨ 
}
©© 
}
ªª 
IO
«« 
.
«« 
	WriteLine
«« 
(
«« 
IO
«« 
.
«« 
ToHex
«« !
(
««! "
byteCipherText
««" 0
)
««0 1
)
««1 2
;
««2 3
}
¬¬ 	
}
­­ 
public
¯¯ 

override
¯¯ 
void
¯¯ 
Good
¯¯ 
(
¯¯ 
)
¯¯ 
{
°° 
GoodG2B1
±± 
(
±± 
)
±± 
;
±± 
GoodG2B2
²² 
(
²² 
)
²² 
;
²² 
}
³³ 
}µµ 
}¶¶ ¯S
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_11.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_11 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
."" 
StaticReturnsTrue""  
(""  !
)""! "
)""" #
{## 	
data%% 
=%% 
$str%% %
;%%% &
}&& 	
else'' 
{(( 	
data++ 
=++ 
null++ 
;++ 
},, 	
if-- 

(-- 
data-- 
!=-- 
null-- 
)-- 
{.. 	
string// 
stringToEncrypt// "
=//# $
$str//% <
;//< =
byte00 
[00 
]00 
byteCipherText00 !
=00" #
null00$ (
;00( )
using22 
(22 $
AesCryptoServiceProvider22 +
aes22, /
=220 1
new222 5$
AesCryptoServiceProvider226 N
(22N O
)22O P
)22P Q
{33 
ICryptoTransform55  
	encryptor55! *
=55+ ,
aes55- 0
.550 1
CreateEncryptor551 @
(55@ A
Encoding55A I
.55I J
UTF855J N
.55N O
GetBytes55O W
(55W X
data55X \
)55\ ]
,55] ^
aes55_ b
.55b c
IV55c e
)55e f
;55f g
using77 
(77 
MemoryStream77 #
	msEncrypt77$ -
=77. /
new770 3
MemoryStream774 @
(77@ A
)77A B
)77B C
{88 
using99 
(99 
CryptoStream99 '
	csEncrypt99( 1
=992 3
new994 7
CryptoStream998 D
(99D E
	msEncrypt99E N
,99N O
	encryptor99P Y
,99Y Z
CryptoStreamMode99[ k
.99k l
Write99l q
)99q r
)99r s
{:: 
using;; 
(;; 
StreamWriter;; +
	swEncrypt;;, 5
=;;6 7
new;;8 ;
StreamWriter;;< H
(;;H I
	csEncrypt;;I R
);;R S
);;S T
{<< 
	swEncrypt>> %
.>>% &
Write>>& +
(>>+ ,
stringToEncrypt>>, ;
)>>; <
;>>< =
}?? 
byteCipherText@@ &
=@@' (
	msEncrypt@@) 2
.@@2 3
ToArray@@3 :
(@@: ;
)@@; <
;@@< =
}AA 
}BB 
}CC 
IODD 
.DD 
	WriteLineDD 
(DD 
IODD 
.DD 
ToHexDD !
(DD! "
byteCipherTextDD" 0
)DD0 1
)DD1 2
;DD2 3
}EE 	
}FF 
privateJJ 
voidJJ 
GoodG2B1JJ 
(JJ 
)JJ 
{KK 
stringLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM 
StaticReturnsFalseMM !
(MM! "
)MM" #
)MM# $
{NN 	
dataQQ 
=QQ 
nullQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataUU 
=UU 
$strUU 
;UU 
tryWW 
{XX 
dataZZ 
=ZZ 
ConsoleZZ 
.ZZ 
ReadLineZZ '
(ZZ' (
)ZZ( )
;ZZ) *
}[[ 
catch\\ 
(\\ 
IOException\\ 
exceptIO\\ '
)\\' (
{]] 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
$str^^2 M
,^^M N
exceptIO^^O W
)^^W X
;^^X Y
}__ 
}`` 	
ifaa 

(aa 
dataaa 
!=aa 
nullaa 
)aa 
{bb 	
stringcc 
stringToEncryptcc "
=cc# $
$strcc% <
;cc< =
bytedd 
[dd 
]dd 
byteCipherTextdd !
=dd" #
nulldd$ (
;dd( )
usingff 
(ff $
AesCryptoServiceProviderff +
aesff, /
=ff0 1
newff2 5$
AesCryptoServiceProviderff6 N
(ffN O
)ffO P
)ffP Q
{gg 
ICryptoTransformii  
	encryptorii! *
=ii+ ,
aesii- 0
.ii0 1
CreateEncryptorii1 @
(ii@ A
EncodingiiA I
.iiI J
UTF8iiJ N
.iiN O
GetBytesiiO W
(iiW X
dataiiX \
)ii\ ]
,ii] ^
aesii_ b
.iib c
IViic e
)iie f
;iif g
usingkk 
(kk 
MemoryStreamkk #
	msEncryptkk$ -
=kk. /
newkk0 3
MemoryStreamkk4 @
(kk@ A
)kkA B
)kkB C
{ll 
usingmm 
(mm 
CryptoStreammm '
	csEncryptmm( 1
=mm2 3
newmm4 7
CryptoStreammm8 D
(mmD E
	msEncryptmmE N
,mmN O
	encryptormmP Y
,mmY Z
CryptoStreamModemm[ k
.mmk l
Writemml q
)mmq r
)mmr s
{nn 
usingoo 
(oo 
StreamWriteroo +
	swEncryptoo, 5
=oo6 7
newoo8 ;
StreamWriteroo< H
(ooH I
	csEncryptooI R
)ooR S
)ooS T
{pp 
	swEncryptrr %
.rr% &
Writerr& +
(rr+ ,
stringToEncryptrr, ;
)rr; <
;rr< =
}ss 
byteCipherTexttt &
=tt' (
	msEncrypttt) 2
.tt2 3
ToArraytt3 :
(tt: ;
)tt; <
;tt< =
}uu 
}vv 
}ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
IOxx 
.xx 
ToHexxx !
(xx! "
byteCipherTextxx" 0
)xx0 1
)xx1 2
;xx2 3
}yy 	
}zz 
private}} 
void}} 
GoodG2B2}} 
(}} 
)}} 
{~~ 
string 
data 
; 
if
 

(
 
IO
 
.
 
StaticReturnsTrue
  
(
  !
)
! "
)
" #
{
 	
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
data
 
!=
 
null
 
)
 
{
 	
string
 
stringToEncrypt
 "
=
# $
$str
% <
;
< =
byte
 
[
 
]
 
byteCipherText
 !
=
" #
null
$ (
;
( )
using
 
(
 &
AesCryptoServiceProvider
 +
aes
, /
=
0 1
new
2 5&
AesCryptoServiceProvider
6 N
(
N O
)
O P
)
P Q
{
 
ICryptoTransform
  
	encryptor
! *
=
+ ,
aes
- 0
.
0 1
CreateEncryptor
1 @
(
@ A
Encoding
A I
.
I J
UTF8
J N
.
N O
GetBytes
O W
(
W X
data
X \
)
\ ]
,
] ^
aes
_ b
.
b c
IV
c e
)
e f
;
f g
using
 
(
 
MemoryStream
 #
	msEncrypt
$ -
=
. /
new
0 3
MemoryStream
4 @
(
@ A
)
A B
)
B C
{
 
using
   
(
   
CryptoStream
   '
	csEncrypt
  ( 1
=
  2 3
new
  4 7
CryptoStream
  8 D
(
  D E
	msEncrypt
  E N
,
  N O
	encryptor
  P Y
,
  Y Z
CryptoStreamMode
  [ k
.
  k l
Write
  l q
)
  q r
)
  r s
{
¡¡ 
using
¢¢ 
(
¢¢ 
StreamWriter
¢¢ +
	swEncrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
StreamWriter
¢¢< H
(
¢¢H I
	csEncrypt
¢¢I R
)
¢¢R S
)
¢¢S T
{
££ 
	swEncrypt
¥¥ %
.
¥¥% &
Write
¥¥& +
(
¥¥+ ,
stringToEncrypt
¥¥, ;
)
¥¥; <
;
¥¥< =
}
¦¦ 
byteCipherText
§§ &
=
§§' (
	msEncrypt
§§) 2
.
§§2 3
ToArray
§§3 :
(
§§: ;
)
§§; <
;
§§< =
}
¨¨ 
}
©© 
}
ªª 
IO
«« 
.
«« 
	WriteLine
«« 
(
«« 
IO
«« 
.
«« 
ToHex
«« !
(
««! "
byteCipherText
««" 0
)
««0 1
)
««1 2
;
««2 3
}
¬¬ 	
}
­­ 
public
¯¯ 

override
¯¯ 
void
¯¯ 
Good
¯¯ 
(
¯¯ 
)
¯¯ 
{
°° 
GoodG2B1
±± 
(
±± 
)
±± 
;
±± 
GoodG2B2
²² 
(
²² 
)
²² 
;
²² 
}
³³ 
}µµ 
}¶¶ Ø?
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_12.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_12 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
."" $
StaticReturnsTrueOrFalse"" '
(""' (
)""( )
)"") *
{## 	
data%% 
=%% 
$str%% %
;%%% &
}&& 	
else'' 
{(( 	
data)) 
=)) 
$str)) 
;)) 
try++ 
{,, 
data.. 
=.. 
Console.. 
... 
ReadLine.. '
(..' (
)..( )
;..) *
}// 
catch00 
(00 
IOException00 
exceptIO00 '
)00' (
{11 
IO22 
.22 
Logger22 
.22 
Log22 
(22 
NLog22 "
.22" #
LogLevel22# +
.22+ ,
Warn22, 0
,220 1
$str222 M
,22M N
exceptIO22O W
)22W X
;22X Y
}33 
}44 	
if55 

(55 
data55 
!=55 
null55 
)55 
{66 	
string77 
stringToEncrypt77 "
=77# $
$str77% <
;77< =
byte88 
[88 
]88 
byteCipherText88 !
=88" #
null88$ (
;88( )
using:: 
(:: $
AesCryptoServiceProvider:: +
aes::, /
=::0 1
new::2 5$
AesCryptoServiceProvider::6 N
(::N O
)::O P
)::P Q
{;; 
ICryptoTransform==  
	encryptor==! *
===+ ,
aes==- 0
.==0 1
CreateEncryptor==1 @
(==@ A
Encoding==A I
.==I J
UTF8==J N
.==N O
GetBytes==O W
(==W X
data==X \
)==\ ]
,==] ^
aes==_ b
.==b c
IV==c e
)==e f
;==f g
using?? 
(?? 
MemoryStream?? #
	msEncrypt??$ -
=??. /
new??0 3
MemoryStream??4 @
(??@ A
)??A B
)??B C
{@@ 
usingAA 
(AA 
CryptoStreamAA '
	csEncryptAA( 1
=AA2 3
newAA4 7
CryptoStreamAA8 D
(AAD E
	msEncryptAAE N
,AAN O
	encryptorAAP Y
,AAY Z
CryptoStreamModeAA[ k
.AAk l
WriteAAl q
)AAq r
)AAr s
{BB 
usingCC 
(CC 
StreamWriterCC +
	swEncryptCC, 5
=CC6 7
newCC8 ;
StreamWriterCC< H
(CCH I
	csEncryptCCI R
)CCR S
)CCS T
{DD 
	swEncryptFF %
.FF% &
WriteFF& +
(FF+ ,
stringToEncryptFF, ;
)FF; <
;FF< =
}GG 
byteCipherTextHH &
=HH' (
	msEncryptHH) 2
.HH2 3
ToArrayHH3 :
(HH: ;
)HH; <
;HH< =
}II 
}JJ 
}KK 
IOLL 
.LL 
	WriteLineLL 
(LL 
IOLL 
.LL 
ToHexLL !
(LL! "
byteCipherTextLL" 0
)LL0 1
)LL1 2
;LL2 3
}MM 	
}NN 
privateSS 
voidSS 
GoodG2BSS 
(SS 
)SS 
{TT 
stringUU 
dataUU 
;UU 
ifVV 

(VV 
IOVV 
.VV $
StaticReturnsTrueOrFalseVV '
(VV' (
)VV( )
)VV) *
{WW 	
dataXX 
=XX 
$strXX 
;XX 
tryZZ 
{[[ 
data]] 
=]] 
Console]] 
.]] 
ReadLine]] '
(]]' (
)]]( )
;]]) *
}^^ 
catch__ 
(__ 
IOException__ 
exceptIO__ '
)__' (
{`` 
IOaa 
.aa 
Loggeraa 
.aa 
Logaa 
(aa 
NLogaa "
.aa" #
LogLevelaa# +
.aa+ ,
Warnaa, 0
,aa0 1
$straa2 M
,aaM N
exceptIOaaO W
)aaW X
;aaX Y
}bb 
}cc 	
elsedd 
{ee 	
dataff 
=ff 
$strff 
;ff 
tryhh 
{ii 
datakk 
=kk 
Consolekk 
.kk 
ReadLinekk '
(kk' (
)kk( )
;kk) *
}ll 
catchmm 
(mm 
IOExceptionmm 
exceptIOmm '
)mm' (
{nn 
IOoo 
.oo 
Loggeroo 
.oo 
Logoo 
(oo 
NLogoo "
.oo" #
LogLeveloo# +
.oo+ ,
Warnoo, 0
,oo0 1
$stroo2 M
,ooM N
exceptIOooO W
)ooW X
;ooX Y
}pp 
}qq 	
ifrr 

(rr 
datarr 
!=rr 
nullrr 
)rr 
{ss 	
stringtt 
stringToEncrypttt "
=tt# $
$strtt% <
;tt< =
byteuu 
[uu 
]uu 
byteCipherTextuu !
=uu" #
nulluu$ (
;uu( )
usingww 
(ww $
AesCryptoServiceProviderww +
aesww, /
=ww0 1
newww2 5$
AesCryptoServiceProviderww6 N
(wwN O
)wwO P
)wwP Q
{xx 
ICryptoTransformzz  
	encryptorzz! *
=zz+ ,
aeszz- 0
.zz0 1
CreateEncryptorzz1 @
(zz@ A
EncodingzzA I
.zzI J
UTF8zzJ N
.zzN O
GetByteszzO W
(zzW X
datazzX \
)zz\ ]
,zz] ^
aeszz_ b
.zzb c
IVzzc e
)zze f
;zzf g
using|| 
(|| 
MemoryStream|| #
	msEncrypt||$ -
=||. /
new||0 3
MemoryStream||4 @
(||@ A
)||A B
)||B C
{}} 
using~~ 
(~~ 
CryptoStream~~ '
	csEncrypt~~( 1
=~~2 3
new~~4 7
CryptoStream~~8 D
(~~D E
	msEncrypt~~E N
,~~N O
	encryptor~~P Y
,~~Y Z
CryptoStreamMode~~[ k
.~~k l
Write~~l q
)~~q r
)~~r s
{ 
using
 
(
 
StreamWriter
 +
	swEncrypt
, 5
=
6 7
new
8 ;
StreamWriter
< H
(
H I
	csEncrypt
I R
)
R S
)
S T
{
 
	swEncrypt
 %
.
% &
Write
& +
(
+ ,
stringToEncrypt
, ;
)
; <
;
< =
}
 
byteCipherText
 &
=
' (
	msEncrypt
) 2
.
2 3
ToArray
3 :
(
: ;
)
; <
;
< =
}
 
}
 
}
 
IO
 
.
 
	WriteLine
 
(
 
IO
 
.
 
ToHex
 !
(
! "
byteCipherText
" 0
)
0 1
)
1 2
;
2 3
}
 	
}
 
public
 

override
 
void
 
Good
 
(
 
)
 
{
 
GoodG2B
 
(
 
)
 
;
 
}
 
} 
} ÃS
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_13.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_13 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
.""  
STATIC_READONLY_FIVE"" #
==""$ &
$num""' (
)""( )
{## 	
data%% 
=%% 
$str%% %
;%%% &
}&& 	
else'' 
{(( 	
data++ 
=++ 
null++ 
;++ 
},, 	
if-- 

(-- 
data-- 
!=-- 
null-- 
)-- 
{.. 	
string// 
stringToEncrypt// "
=//# $
$str//% <
;//< =
byte00 
[00 
]00 
byteCipherText00 !
=00" #
null00$ (
;00( )
using22 
(22 $
AesCryptoServiceProvider22 +
aes22, /
=220 1
new222 5$
AesCryptoServiceProvider226 N
(22N O
)22O P
)22P Q
{33 
ICryptoTransform55  
	encryptor55! *
=55+ ,
aes55- 0
.550 1
CreateEncryptor551 @
(55@ A
Encoding55A I
.55I J
UTF855J N
.55N O
GetBytes55O W
(55W X
data55X \
)55\ ]
,55] ^
aes55_ b
.55b c
IV55c e
)55e f
;55f g
using77 
(77 
MemoryStream77 #
	msEncrypt77$ -
=77. /
new770 3
MemoryStream774 @
(77@ A
)77A B
)77B C
{88 
using99 
(99 
CryptoStream99 '
	csEncrypt99( 1
=992 3
new994 7
CryptoStream998 D
(99D E
	msEncrypt99E N
,99N O
	encryptor99P Y
,99Y Z
CryptoStreamMode99[ k
.99k l
Write99l q
)99q r
)99r s
{:: 
using;; 
(;; 
StreamWriter;; +
	swEncrypt;;, 5
=;;6 7
new;;8 ;
StreamWriter;;< H
(;;H I
	csEncrypt;;I R
);;R S
);;S T
{<< 
	swEncrypt>> %
.>>% &
Write>>& +
(>>+ ,
stringToEncrypt>>, ;
)>>; <
;>>< =
}?? 
byteCipherText@@ &
=@@' (
	msEncrypt@@) 2
.@@2 3
ToArray@@3 :
(@@: ;
)@@; <
;@@< =
}AA 
}BB 
}CC 
IODD 
.DD 
	WriteLineDD 
(DD 
IODD 
.DD 
ToHexDD !
(DD! "
byteCipherTextDD" 0
)DD0 1
)DD1 2
;DD2 3
}EE 	
}FF 
privateJJ 
voidJJ 
GoodG2B1JJ 
(JJ 
)JJ 
{KK 
stringLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM  
STATIC_READONLY_FIVEMM #
!=MM$ &
$numMM' (
)MM( )
{NN 	
dataQQ 
=QQ 
nullQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataUU 
=UU 
$strUU 
;UU 
tryWW 
{XX 
dataZZ 
=ZZ 
ConsoleZZ 
.ZZ 
ReadLineZZ '
(ZZ' (
)ZZ( )
;ZZ) *
}[[ 
catch\\ 
(\\ 
IOException\\ 
exceptIO\\ '
)\\' (
{]] 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
$str^^2 M
,^^M N
exceptIO^^O W
)^^W X
;^^X Y
}__ 
}`` 	
ifaa 

(aa 
dataaa 
!=aa 
nullaa 
)aa 
{bb 	
stringcc 
stringToEncryptcc "
=cc# $
$strcc% <
;cc< =
bytedd 
[dd 
]dd 
byteCipherTextdd !
=dd" #
nulldd$ (
;dd( )
usingff 
(ff $
AesCryptoServiceProviderff +
aesff, /
=ff0 1
newff2 5$
AesCryptoServiceProviderff6 N
(ffN O
)ffO P
)ffP Q
{gg 
ICryptoTransformii  
	encryptorii! *
=ii+ ,
aesii- 0
.ii0 1
CreateEncryptorii1 @
(ii@ A
EncodingiiA I
.iiI J
UTF8iiJ N
.iiN O
GetBytesiiO W
(iiW X
dataiiX \
)ii\ ]
,ii] ^
aesii_ b
.iib c
IViic e
)iie f
;iif g
usingkk 
(kk 
MemoryStreamkk #
	msEncryptkk$ -
=kk. /
newkk0 3
MemoryStreamkk4 @
(kk@ A
)kkA B
)kkB C
{ll 
usingmm 
(mm 
CryptoStreammm '
	csEncryptmm( 1
=mm2 3
newmm4 7
CryptoStreammm8 D
(mmD E
	msEncryptmmE N
,mmN O
	encryptormmP Y
,mmY Z
CryptoStreamModemm[ k
.mmk l
Writemml q
)mmq r
)mmr s
{nn 
usingoo 
(oo 
StreamWriteroo +
	swEncryptoo, 5
=oo6 7
newoo8 ;
StreamWriteroo< H
(ooH I
	csEncryptooI R
)ooR S
)ooS T
{pp 
	swEncryptrr %
.rr% &
Writerr& +
(rr+ ,
stringToEncryptrr, ;
)rr; <
;rr< =
}ss 
byteCipherTexttt &
=tt' (
	msEncrypttt) 2
.tt2 3
ToArraytt3 :
(tt: ;
)tt; <
;tt< =
}uu 
}vv 
}ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
IOxx 
.xx 
ToHexxx !
(xx! "
byteCipherTextxx" 0
)xx0 1
)xx1 2
;xx2 3
}yy 	
}zz 
private}} 
void}} 
GoodG2B2}} 
(}} 
)}} 
{~~ 
string 
data 
; 
if
 

(
 
IO
 
.
 "
STATIC_READONLY_FIVE
 #
==
$ &
$num
' (
)
( )
{
 	
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
data
 
!=
 
null
 
)
 
{
 	
string
 
stringToEncrypt
 "
=
# $
$str
% <
;
< =
byte
 
[
 
]
 
byteCipherText
 !
=
" #
null
$ (
;
( )
using
 
(
 &
AesCryptoServiceProvider
 +
aes
, /
=
0 1
new
2 5&
AesCryptoServiceProvider
6 N
(
N O
)
O P
)
P Q
{
 
ICryptoTransform
  
	encryptor
! *
=
+ ,
aes
- 0
.
0 1
CreateEncryptor
1 @
(
@ A
Encoding
A I
.
I J
UTF8
J N
.
N O
GetBytes
O W
(
W X
data
X \
)
\ ]
,
] ^
aes
_ b
.
b c
IV
c e
)
e f
;
f g
using
 
(
 
MemoryStream
 #
	msEncrypt
$ -
=
. /
new
0 3
MemoryStream
4 @
(
@ A
)
A B
)
B C
{
 
using
   
(
   
CryptoStream
   '
	csEncrypt
  ( 1
=
  2 3
new
  4 7
CryptoStream
  8 D
(
  D E
	msEncrypt
  E N
,
  N O
	encryptor
  P Y
,
  Y Z
CryptoStreamMode
  [ k
.
  k l
Write
  l q
)
  q r
)
  r s
{
¡¡ 
using
¢¢ 
(
¢¢ 
StreamWriter
¢¢ +
	swEncrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
StreamWriter
¢¢< H
(
¢¢H I
	csEncrypt
¢¢I R
)
¢¢R S
)
¢¢S T
{
££ 
	swEncrypt
¥¥ %
.
¥¥% &
Write
¥¥& +
(
¥¥+ ,
stringToEncrypt
¥¥, ;
)
¥¥; <
;
¥¥< =
}
¦¦ 
byteCipherText
§§ &
=
§§' (
	msEncrypt
§§) 2
.
§§2 3
ToArray
§§3 :
(
§§: ;
)
§§; <
;
§§< =
}
¨¨ 
}
©© 
}
ªª 
IO
«« 
.
«« 
	WriteLine
«« 
(
«« 
IO
«« 
.
«« 
ToHex
«« !
(
««! "
byteCipherText
««" 0
)
««0 1
)
««1 2
;
««2 3
}
¬¬ 	
}
­­ 
public
¯¯ 

override
¯¯ 
void
¯¯ 
Good
¯¯ 
(
¯¯ 
)
¯¯ 
{
°° 
GoodG2B1
±± 
(
±± 
)
±± 
;
±± 
GoodG2B2
²² 
(
²² 
)
²² 
;
²² 
}
³³ 
}µµ 
}¶¶ ¥S
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_14.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_14 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
if"" 

("" 
IO"" 
."" 

staticFive"" 
=="" 
$num"" 
)"" 
{## 	
data%% 
=%% 
$str%% %
;%%% &
}&& 	
else'' 
{(( 	
data++ 
=++ 
null++ 
;++ 
},, 	
if-- 

(-- 
data-- 
!=-- 
null-- 
)-- 
{.. 	
string// 
stringToEncrypt// "
=//# $
$str//% <
;//< =
byte00 
[00 
]00 
byteCipherText00 !
=00" #
null00$ (
;00( )
using22 
(22 $
AesCryptoServiceProvider22 +
aes22, /
=220 1
new222 5$
AesCryptoServiceProvider226 N
(22N O
)22O P
)22P Q
{33 
ICryptoTransform55  
	encryptor55! *
=55+ ,
aes55- 0
.550 1
CreateEncryptor551 @
(55@ A
Encoding55A I
.55I J
UTF855J N
.55N O
GetBytes55O W
(55W X
data55X \
)55\ ]
,55] ^
aes55_ b
.55b c
IV55c e
)55e f
;55f g
using77 
(77 
MemoryStream77 #
	msEncrypt77$ -
=77. /
new770 3
MemoryStream774 @
(77@ A
)77A B
)77B C
{88 
using99 
(99 
CryptoStream99 '
	csEncrypt99( 1
=992 3
new994 7
CryptoStream998 D
(99D E
	msEncrypt99E N
,99N O
	encryptor99P Y
,99Y Z
CryptoStreamMode99[ k
.99k l
Write99l q
)99q r
)99r s
{:: 
using;; 
(;; 
StreamWriter;; +
	swEncrypt;;, 5
=;;6 7
new;;8 ;
StreamWriter;;< H
(;;H I
	csEncrypt;;I R
);;R S
);;S T
{<< 
	swEncrypt>> %
.>>% &
Write>>& +
(>>+ ,
stringToEncrypt>>, ;
)>>; <
;>>< =
}?? 
byteCipherText@@ &
=@@' (
	msEncrypt@@) 2
.@@2 3
ToArray@@3 :
(@@: ;
)@@; <
;@@< =
}AA 
}BB 
}CC 
IODD 
.DD 
	WriteLineDD 
(DD 
IODD 
.DD 
ToHexDD !
(DD! "
byteCipherTextDD" 0
)DD0 1
)DD1 2
;DD2 3
}EE 	
}FF 
privateJJ 
voidJJ 
GoodG2B1JJ 
(JJ 
)JJ 
{KK 
stringLL 
dataLL 
;LL 
ifMM 

(MM 
IOMM 
.MM 

staticFiveMM 
!=MM 
$numMM 
)MM 
{NN 	
dataQQ 
=QQ 
nullQQ 
;QQ 
}RR 	
elseSS 
{TT 	
dataUU 
=UU 
$strUU 
;UU 
tryWW 
{XX 
dataZZ 
=ZZ 
ConsoleZZ 
.ZZ 
ReadLineZZ '
(ZZ' (
)ZZ( )
;ZZ) *
}[[ 
catch\\ 
(\\ 
IOException\\ 
exceptIO\\ '
)\\' (
{]] 
IO^^ 
.^^ 
Logger^^ 
.^^ 
Log^^ 
(^^ 
NLog^^ "
.^^" #
LogLevel^^# +
.^^+ ,
Warn^^, 0
,^^0 1
$str^^2 M
,^^M N
exceptIO^^O W
)^^W X
;^^X Y
}__ 
}`` 	
ifaa 

(aa 
dataaa 
!=aa 
nullaa 
)aa 
{bb 	
stringcc 
stringToEncryptcc "
=cc# $
$strcc% <
;cc< =
bytedd 
[dd 
]dd 
byteCipherTextdd !
=dd" #
nulldd$ (
;dd( )
usingff 
(ff $
AesCryptoServiceProviderff +
aesff, /
=ff0 1
newff2 5$
AesCryptoServiceProviderff6 N
(ffN O
)ffO P
)ffP Q
{gg 
ICryptoTransformii  
	encryptorii! *
=ii+ ,
aesii- 0
.ii0 1
CreateEncryptorii1 @
(ii@ A
EncodingiiA I
.iiI J
UTF8iiJ N
.iiN O
GetBytesiiO W
(iiW X
dataiiX \
)ii\ ]
,ii] ^
aesii_ b
.iib c
IViic e
)iie f
;iif g
usingkk 
(kk 
MemoryStreamkk #
	msEncryptkk$ -
=kk. /
newkk0 3
MemoryStreamkk4 @
(kk@ A
)kkA B
)kkB C
{ll 
usingmm 
(mm 
CryptoStreammm '
	csEncryptmm( 1
=mm2 3
newmm4 7
CryptoStreammm8 D
(mmD E
	msEncryptmmE N
,mmN O
	encryptormmP Y
,mmY Z
CryptoStreamModemm[ k
.mmk l
Writemml q
)mmq r
)mmr s
{nn 
usingoo 
(oo 
StreamWriteroo +
	swEncryptoo, 5
=oo6 7
newoo8 ;
StreamWriteroo< H
(ooH I
	csEncryptooI R
)ooR S
)ooS T
{pp 
	swEncryptrr %
.rr% &
Writerr& +
(rr+ ,
stringToEncryptrr, ;
)rr; <
;rr< =
}ss 
byteCipherTexttt &
=tt' (
	msEncrypttt) 2
.tt2 3
ToArraytt3 :
(tt: ;
)tt; <
;tt< =
}uu 
}vv 
}ww 
IOxx 
.xx 
	WriteLinexx 
(xx 
IOxx 
.xx 
ToHexxx !
(xx! "
byteCipherTextxx" 0
)xx0 1
)xx1 2
;xx2 3
}yy 	
}zz 
private}} 
void}} 
GoodG2B2}} 
(}} 
)}} 
{~~ 
string 
data 
; 
if
 

(
 
IO
 
.
 

staticFive
 
==
 
$num
 
)
 
{
 	
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
}
 	
else
 
{
 	
data
 
=
 
null
 
;
 
}
 	
if
 

(
 
data
 
!=
 
null
 
)
 
{
 	
string
 
stringToEncrypt
 "
=
# $
$str
% <
;
< =
byte
 
[
 
]
 
byteCipherText
 !
=
" #
null
$ (
;
( )
using
 
(
 &
AesCryptoServiceProvider
 +
aes
, /
=
0 1
new
2 5&
AesCryptoServiceProvider
6 N
(
N O
)
O P
)
P Q
{
 
ICryptoTransform
  
	encryptor
! *
=
+ ,
aes
- 0
.
0 1
CreateEncryptor
1 @
(
@ A
Encoding
A I
.
I J
UTF8
J N
.
N O
GetBytes
O W
(
W X
data
X \
)
\ ]
,
] ^
aes
_ b
.
b c
IV
c e
)
e f
;
f g
using
 
(
 
MemoryStream
 #
	msEncrypt
$ -
=
. /
new
0 3
MemoryStream
4 @
(
@ A
)
A B
)
B C
{
 
using
   
(
   
CryptoStream
   '
	csEncrypt
  ( 1
=
  2 3
new
  4 7
CryptoStream
  8 D
(
  D E
	msEncrypt
  E N
,
  N O
	encryptor
  P Y
,
  Y Z
CryptoStreamMode
  [ k
.
  k l
Write
  l q
)
  q r
)
  r s
{
¡¡ 
using
¢¢ 
(
¢¢ 
StreamWriter
¢¢ +
	swEncrypt
¢¢, 5
=
¢¢6 7
new
¢¢8 ;
StreamWriter
¢¢< H
(
¢¢H I
	csEncrypt
¢¢I R
)
¢¢R S
)
¢¢S T
{
££ 
	swEncrypt
¥¥ %
.
¥¥% &
Write
¥¥& +
(
¥¥+ ,
stringToEncrypt
¥¥, ;
)
¥¥; <
;
¥¥< =
}
¦¦ 
byteCipherText
§§ &
=
§§' (
	msEncrypt
§§) 2
.
§§2 3
ToArray
§§3 :
(
§§: ;
)
§§; <
;
§§< =
}
¨¨ 
}
©© 
}
ªª 
IO
«« 
.
«« 
	WriteLine
«« 
(
«« 
IO
«« 
.
«« 
ToHex
«« !
(
««! "
byteCipherText
««" 0
)
««0 1
)
««1 2
;
««2 3
}
¬¬ 	
}
­­ 
public
¯¯ 

override
¯¯ 
void
¯¯ 
Good
¯¯ 
(
¯¯ 
)
¯¯ 
{
°° 
GoodG2B1
±± 
(
±± 
)
±± 
;
±± 
GoodG2B2
²² 
(
²² 
)
²² 
;
²² 
}
³³ 
}µµ 
}¶¶ U
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_15.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_15 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
=!! 
null!! 
;!! 
switch"" 
("" 
$num"" 
)"" 
{## 	
case$$ 
$num$$ 
:$$ 
data&& 
=&& 
$str&& %
;&&% &
break'' 
;'' 
default(( 
:(( 
data++ 
=++ 
null++ 
;++ 
break,, 
;,, 
}-- 	
if.. 

(.. 
data.. 
!=.. 
null.. 
).. 
{// 	
string00 
stringToEncrypt00 "
=00# $
$str00% <
;00< =
byte11 
[11 
]11 
byteCipherText11 !
=11" #
null11$ (
;11( )
using33 
(33 $
AesCryptoServiceProvider33 +
aes33, /
=330 1
new332 5$
AesCryptoServiceProvider336 N
(33N O
)33O P
)33P Q
{44 
ICryptoTransform66  
	encryptor66! *
=66+ ,
aes66- 0
.660 1
CreateEncryptor661 @
(66@ A
Encoding66A I
.66I J
UTF866J N
.66N O
GetBytes66O W
(66W X
data66X \
)66\ ]
,66] ^
aes66_ b
.66b c
IV66c e
)66e f
;66f g
using88 
(88 
MemoryStream88 #
	msEncrypt88$ -
=88. /
new880 3
MemoryStream884 @
(88@ A
)88A B
)88B C
{99 
using:: 
(:: 
CryptoStream:: '
	csEncrypt::( 1
=::2 3
new::4 7
CryptoStream::8 D
(::D E
	msEncrypt::E N
,::N O
	encryptor::P Y
,::Y Z
CryptoStreamMode::[ k
.::k l
Write::l q
)::q r
)::r s
{;; 
using<< 
(<< 
StreamWriter<< +
	swEncrypt<<, 5
=<<6 7
new<<8 ;
StreamWriter<<< H
(<<H I
	csEncrypt<<I R
)<<R S
)<<S T
{== 
	swEncrypt?? %
.??% &
Write??& +
(??+ ,
stringToEncrypt??, ;
)??; <
;??< =
}@@ 
byteCipherTextAA &
=AA' (
	msEncryptAA) 2
.AA2 3
ToArrayAA3 :
(AA: ;
)AA; <
;AA< =
}BB 
}CC 
}DD 
IOEE 
.EE 
	WriteLineEE 
(EE 
IOEE 
.EE 
ToHexEE !
(EE! "
byteCipherTextEE" 0
)EE0 1
)EE1 2
;EE2 3
}FF 	
}GG 
privateKK 
voidKK 
GoodG2B1KK 
(KK 
)KK 
{LL 
stringMM 
dataMM 
=MM 
nullMM 
;MM 
switchNN 
(NN 
$numNN 
)NN 
{OO 	
casePP 
$numPP 
:PP 
dataSS 
=SS 
nullSS 
;SS 
breakTT 
;TT 
defaultUU 
:UU 
dataVV 
=VV 
$strVV 
;VV 
tryXX 
{YY 
data[[ 
=[[ 
Console[[ 
.[[ 
ReadLine[[ '
([[' (
)[[( )
;[[) *
}\\ 
catch]] 
(]] 
IOException]] 
exceptIO]] '
)]]' (
{^^ 
IO__ 
.__ 
Logger__ 
.__ 
Log__ 
(__ 
NLog__ "
.__" #
LogLevel__# +
.__+ ,
Warn__, 0
,__0 1
$str__2 M
,__M N
exceptIO__O W
)__W X
;__X Y
}`` 
breakaa 
;aa 
}bb 	
ifcc 

(cc 
datacc 
!=cc 
nullcc 
)cc 
{dd 	
stringee 
stringToEncryptee "
=ee# $
$stree% <
;ee< =
byteff 
[ff 
]ff 
byteCipherTextff !
=ff" #
nullff$ (
;ff( )
usinghh 
(hh $
AesCryptoServiceProviderhh +
aeshh, /
=hh0 1
newhh2 5$
AesCryptoServiceProviderhh6 N
(hhN O
)hhO P
)hhP Q
{ii 
ICryptoTransformkk  
	encryptorkk! *
=kk+ ,
aeskk- 0
.kk0 1
CreateEncryptorkk1 @
(kk@ A
EncodingkkA I
.kkI J
UTF8kkJ N
.kkN O
GetByteskkO W
(kkW X
datakkX \
)kk\ ]
,kk] ^
aeskk_ b
.kkb c
IVkkc e
)kke f
;kkf g
usingmm 
(mm 
MemoryStreammm #
	msEncryptmm$ -
=mm. /
newmm0 3
MemoryStreammm4 @
(mm@ A
)mmA B
)mmB C
{nn 
usingoo 
(oo 
CryptoStreamoo '
	csEncryptoo( 1
=oo2 3
newoo4 7
CryptoStreamoo8 D
(ooD E
	msEncryptooE N
,ooN O
	encryptorooP Y
,ooY Z
CryptoStreamModeoo[ k
.ook l
Writeool q
)ooq r
)oor s
{pp 
usingqq 
(qq 
StreamWriterqq +
	swEncryptqq, 5
=qq6 7
newqq8 ;
StreamWriterqq< H
(qqH I
	csEncryptqqI R
)qqR S
)qqS T
{rr 
	swEncrypttt %
.tt% &
Writett& +
(tt+ ,
stringToEncrypttt, ;
)tt; <
;tt< =
}uu 
byteCipherTextvv &
=vv' (
	msEncryptvv) 2
.vv2 3
ToArrayvv3 :
(vv: ;
)vv; <
;vv< =
}ww 
}xx 
}yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
IOzz 
.zz 
ToHexzz !
(zz! "
byteCipherTextzz" 0
)zz0 1
)zz1 2
;zz2 3
}{{ 	
}|| 
private 
void 
GoodG2B2 
( 
) 
{
 
string
 
data
 
=
 
null
 
;
 
switch
 
(
 
$num
 
)
 
{
 	
case
 
$num
 
:
 
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
break
 
;
 
default
 
:
 
data
 
=
 
null
 
;
 
break
 
;
 
}
 	
if
 

(
 
data
 
!=
 
null
 
)
 
{
 	
string
 
stringToEncrypt
 "
=
# $
$str
% <
;
< =
byte
 
[
 
]
 
byteCipherText
 !
=
" #
null
$ (
;
( )
using
 
(
 &
AesCryptoServiceProvider
 +
aes
, /
=
0 1
new
2 5&
AesCryptoServiceProvider
6 N
(
N O
)
O P
)
P Q
{
 
ICryptoTransform
  
	encryptor
! *
=
+ ,
aes
- 0
.
0 1
CreateEncryptor
1 @
(
@ A
Encoding
A I
.
I J
UTF8
J N
.
N O
GetBytes
O W
(
W X
data
X \
)
\ ]
,
] ^
aes
_ b
.
b c
IV
c e
)
e f
;
f g
using
¡¡ 
(
¡¡ 
MemoryStream
¡¡ #
	msEncrypt
¡¡$ -
=
¡¡. /
new
¡¡0 3
MemoryStream
¡¡4 @
(
¡¡@ A
)
¡¡A B
)
¡¡B C
{
¢¢ 
using
££ 
(
££ 
CryptoStream
££ '
	csEncrypt
££( 1
=
££2 3
new
££4 7
CryptoStream
££8 D
(
££D E
	msEncrypt
££E N
,
££N O
	encryptor
££P Y
,
££Y Z
CryptoStreamMode
££[ k
.
££k l
Write
££l q
)
££q r
)
££r s
{
¤¤ 
using
¥¥ 
(
¥¥ 
StreamWriter
¥¥ +
	swEncrypt
¥¥, 5
=
¥¥6 7
new
¥¥8 ;
StreamWriter
¥¥< H
(
¥¥H I
	csEncrypt
¥¥I R
)
¥¥R S
)
¥¥S T
{
¦¦ 
	swEncrypt
¨¨ %
.
¨¨% &
Write
¨¨& +
(
¨¨+ ,
stringToEncrypt
¨¨, ;
)
¨¨; <
;
¨¨< =
}
©© 
byteCipherText
ªª &
=
ªª' (
	msEncrypt
ªª) 2
.
ªª2 3
ToArray
ªª3 :
(
ªª: ;
)
ªª; <
;
ªª< =
}
«« 
}
¬¬ 
}
­­ 
IO
®® 
.
®® 
	WriteLine
®® 
(
®® 
IO
®® 
.
®® 
ToHex
®® !
(
®®! "
byteCipherText
®®" 0
)
®®0 1
)
®®1 2
;
®®2 3
}
¯¯ 	
}
°° 
public
²² 

override
²² 
void
²² 
Good
²² 
(
²² 
)
²² 
{
³³ 
GoodG2B1
´´ 
(
´´ 
)
´´ 
;
´´ 
GoodG2B2
µµ 
(
µµ 
)
µµ 
;
µµ 
}
¶¶ 
}¸¸ 
}¹¹ 3
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_16.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_16 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
while"" 
("" 
true"" 
)"" 
{## 	
data%% 
=%% 
$str%% %
;%%% &
break&& 
;&& 
}'' 	
if(( 

((( 
data(( 
!=(( 
null(( 
)(( 
{)) 	
string** 
stringToEncrypt** "
=**# $
$str**% <
;**< =
byte++ 
[++ 
]++ 
byteCipherText++ !
=++" #
null++$ (
;++( )
using-- 
(-- $
AesCryptoServiceProvider-- +
aes--, /
=--0 1
new--2 5$
AesCryptoServiceProvider--6 N
(--N O
)--O P
)--P Q
{.. 
ICryptoTransform00  
	encryptor00! *
=00+ ,
aes00- 0
.000 1
CreateEncryptor001 @
(00@ A
Encoding00A I
.00I J
UTF800J N
.00N O
GetBytes00O W
(00W X
data00X \
)00\ ]
,00] ^
aes00_ b
.00b c
IV00c e
)00e f
;00f g
using22 
(22 
MemoryStream22 #
	msEncrypt22$ -
=22. /
new220 3
MemoryStream224 @
(22@ A
)22A B
)22B C
{33 
using44 
(44 
CryptoStream44 '
	csEncrypt44( 1
=442 3
new444 7
CryptoStream448 D
(44D E
	msEncrypt44E N
,44N O
	encryptor44P Y
,44Y Z
CryptoStreamMode44[ k
.44k l
Write44l q
)44q r
)44r s
{55 
using66 
(66 
StreamWriter66 +
	swEncrypt66, 5
=666 7
new668 ;
StreamWriter66< H
(66H I
	csEncrypt66I R
)66R S
)66S T
{77 
	swEncrypt99 %
.99% &
Write99& +
(99+ ,
stringToEncrypt99, ;
)99; <
;99< =
}:: 
byteCipherText;; &
=;;' (
	msEncrypt;;) 2
.;;2 3
ToArray;;3 :
(;;: ;
);;; <
;;;< =
}<< 
}== 
}>> 
IO?? 
.?? 
	WriteLine?? 
(?? 
IO?? 
.?? 
ToHex?? !
(??! "
byteCipherText??" 0
)??0 1
)??1 2
;??2 3
}@@ 	
}AA 
privateEE 
voidEE 
GoodG2BEE 
(EE 
)EE 
{FF 
stringGG 
dataGG 
;GG 
whileHH 
(HH 
trueHH 
)HH 
{II 	
dataJJ 
=JJ 
$strJJ 
;JJ 
tryLL 
{MM 
dataOO 
=OO 
ConsoleOO 
.OO 
ReadLineOO '
(OO' (
)OO( )
;OO) *
}PP 
catchQQ 
(QQ 
IOExceptionQQ 
exceptIOQQ '
)QQ' (
{RR 
IOSS 
.SS 
LoggerSS 
.SS 
LogSS 
(SS 
NLogSS "
.SS" #
LogLevelSS# +
.SS+ ,
WarnSS, 0
,SS0 1
$strSS2 M
,SSM N
exceptIOSSO W
)SSW X
;SSX Y
}TT 
breakUU 
;UU 
}VV 	
ifWW 

(WW 
dataWW 
!=WW 
nullWW 
)WW 
{XX 	
stringYY 
stringToEncryptYY "
=YY# $
$strYY% <
;YY< =
byteZZ 
[ZZ 
]ZZ 
byteCipherTextZZ !
=ZZ" #
nullZZ$ (
;ZZ( )
using\\ 
(\\ $
AesCryptoServiceProvider\\ +
aes\\, /
=\\0 1
new\\2 5$
AesCryptoServiceProvider\\6 N
(\\N O
)\\O P
)\\P Q
{]] 
ICryptoTransform__  
	encryptor__! *
=__+ ,
aes__- 0
.__0 1
CreateEncryptor__1 @
(__@ A
Encoding__A I
.__I J
UTF8__J N
.__N O
GetBytes__O W
(__W X
data__X \
)__\ ]
,__] ^
aes___ b
.__b c
IV__c e
)__e f
;__f g
usingaa 
(aa 
MemoryStreamaa #
	msEncryptaa$ -
=aa. /
newaa0 3
MemoryStreamaa4 @
(aa@ A
)aaA B
)aaB C
{bb 
usingcc 
(cc 
CryptoStreamcc '
	csEncryptcc( 1
=cc2 3
newcc4 7
CryptoStreamcc8 D
(ccD E
	msEncryptccE N
,ccN O
	encryptorccP Y
,ccY Z
CryptoStreamModecc[ k
.cck l
Writeccl q
)ccq r
)ccr s
{dd 
usingee 
(ee 
StreamWriteree +
	swEncryptee, 5
=ee6 7
newee8 ;
StreamWriteree< H
(eeH I
	csEncrypteeI R
)eeR S
)eeS T
{ff 
	swEncrypthh %
.hh% &
Writehh& +
(hh+ ,
stringToEncrypthh, ;
)hh; <
;hh< =
}ii 
byteCipherTextjj &
=jj' (
	msEncryptjj) 2
.jj2 3
ToArrayjj3 :
(jj: ;
)jj; <
;jj< =
}kk 
}ll 
}mm 
IOnn 
.nn 
	WriteLinenn 
(nn 
IOnn 
.nn 
ToHexnn !
(nn! "
byteCipherTextnn" 0
)nn0 1
)nn1 2
;nn2 3
}oo 	
}pp 
publicrr 

overriderr 
voidrr 
Goodrr 
(rr 
)rr 
{ss 
GoodG2Btt 
(tt 
)tt 
;tt 
}uu 
}ww 
}xx ð4
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_17.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_17 3
:4 5
AbstractTestCase6 F
{ 
public 

override 
void 
Bad 
( 
) 
{   
string!! 
data!! 
;!! 
data## 
=## 
$str## !
;##! "
for$$ 
($$ 
int$$ 
i$$ 
=$$ 
$num$$ 
;$$ 
i$$ 
<$$ 
$num$$ 
;$$ 
i$$  
++$$  "
)$$" #
{%% 	
if&& 
(&& 
data&& 
!=&& 
null&& 
)&& 
{'' 
string(( 
stringToEncrypt(( &
=((' (
$str(() @
;((@ A
byte)) 
[)) 
])) 
byteCipherText)) %
=))& '
null))( ,
;)), -
using++ 
(++ $
AesCryptoServiceProvider++ /
aes++0 3
=++4 5
new++6 9$
AesCryptoServiceProvider++: R
(++R S
)++S T
)++T U
{,, 
ICryptoTransform.. $
	encryptor..% .
=../ 0
aes..1 4
...4 5
CreateEncryptor..5 D
(..D E
Encoding..E M
...M N
UTF8..N R
...R S
GetBytes..S [
(..[ \
data..\ `
)..` a
,..a b
aes..c f
...f g
IV..g i
)..i j
;..j k
using00 
(00 
MemoryStream00 '
	msEncrypt00( 1
=002 3
new004 7
MemoryStream008 D
(00D E
)00E F
)00F G
{11 
using22 
(22 
CryptoStream22 +
	csEncrypt22, 5
=226 7
new228 ;
CryptoStream22< H
(22H I
	msEncrypt22I R
,22R S
	encryptor22T ]
,22] ^
CryptoStreamMode22_ o
.22o p
Write22p u
)22u v
)22v w
{33 
using44 !
(44" #
StreamWriter44# /
	swEncrypt440 9
=44: ;
new44< ?
StreamWriter44@ L
(44L M
	csEncrypt44M V
)44V W
)44W X
{55 
	swEncrypt77  )
.77) *
Write77* /
(77/ 0
stringToEncrypt770 ?
)77? @
;77@ A
}88 
byteCipherText99 *
=99+ ,
	msEncrypt99- 6
.996 7
ToArray997 >
(99> ?
)99? @
;99@ A
}:: 
};; 
}<< 
IO== 
.== 
	WriteLine== 
(== 
IO== 
.==  
ToHex==  %
(==% &
byteCipherText==& 4
)==4 5
)==5 6
;==6 7
}>> 
}?? 	
}@@ 
privateEE 
voidEE 
GoodG2BEE 
(EE 
)EE 
{FF 
stringGG 
dataGG 
;GG 
dataHH 
=HH 
$strHH 
;HH 
tryJJ 
{KK 	
dataMM 
=MM 
ConsoleMM 
.MM 
ReadLineMM #
(MM# $
)MM$ %
;MM% &
}NN 	
catchOO 
(OO 
IOExceptionOO 
exceptIOOO #
)OO# $
{PP 	
IOQQ 
.QQ 
LoggerQQ 
.QQ 
LogQQ 
(QQ 
NLogQQ 
.QQ 
LogLevelQQ '
.QQ' (
WarnQQ( ,
,QQ, -
$strQQ. I
,QQI J
exceptIOQQK S
)QQS T
;QQT U
}RR 	
forSS 
(SS 
intSS 
iSS 
=SS 
$numSS 
;SS 
iSS 
<SS 
$numSS 
;SS 
iSS  
++SS  "
)SS" #
{TT 	
ifUU 
(UU 
dataUU 
!=UU 
nullUU 
)UU 
{VV 
stringWW 
stringToEncryptWW &
=WW' (
$strWW) @
;WW@ A
byteXX 
[XX 
]XX 
byteCipherTextXX %
=XX& '
nullXX( ,
;XX, -
usingZZ 
(ZZ $
AesCryptoServiceProviderZZ /
aesZZ0 3
=ZZ4 5
newZZ6 9$
AesCryptoServiceProviderZZ: R
(ZZR S
)ZZS T
)ZZT U
{[[ 
ICryptoTransform]] $
	encryptor]]% .
=]]/ 0
aes]]1 4
.]]4 5
CreateEncryptor]]5 D
(]]D E
Encoding]]E M
.]]M N
UTF8]]N R
.]]R S
GetBytes]]S [
(]][ \
data]]\ `
)]]` a
,]]a b
aes]]c f
.]]f g
IV]]g i
)]]i j
;]]j k
using__ 
(__ 
MemoryStream__ '
	msEncrypt__( 1
=__2 3
new__4 7
MemoryStream__8 D
(__D E
)__E F
)__F G
{`` 
usingaa 
(aa 
CryptoStreamaa +
	csEncryptaa, 5
=aa6 7
newaa8 ;
CryptoStreamaa< H
(aaH I
	msEncryptaaI R
,aaR S
	encryptoraaT ]
,aa] ^
CryptoStreamModeaa_ o
.aao p
Writeaap u
)aau v
)aav w
{bb 
usingcc !
(cc" #
StreamWritercc# /
	swEncryptcc0 9
=cc: ;
newcc< ?
StreamWritercc@ L
(ccL M
	csEncryptccM V
)ccV W
)ccW X
{dd 
	swEncryptff  )
.ff) *
Writeff* /
(ff/ 0
stringToEncryptff0 ?
)ff? @
;ff@ A
}gg 
byteCipherTexthh *
=hh+ ,
	msEncrypthh- 6
.hh6 7
ToArrayhh7 >
(hh> ?
)hh? @
;hh@ A
}ii 
}jj 
}kk 
IOll 
.ll 
	WriteLinell 
(ll 
IOll 
.ll  
ToHexll  %
(ll% &
byteCipherTextll& 4
)ll4 5
)ll5 6
;ll6 7
}mm 
}nn 	
}oo 
publicqq 

overrideqq 
voidqq 
Goodqq 
(qq 
)qq 
{rr 
GoodG2Bss 
(ss 
)ss 
;ss 
}tt 
}vv 
}ww `
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_21.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_21 3
:4 5
AbstractTestCase6 F
{ 
private   
bool   

badPrivate   
=   
false   #
;  # $
public"" 

override"" 
void"" 
Bad"" 
("" 
)"" 
{## 
string$$ 
data$$ 
;$$ 

badPrivate%% 
=%% 
true%% 
;%% 
data&& 
=&& 

Bad_source&& 
(&& 
)&& 
;&& 
if'' 

('' 
data'' 
!='' 
null'' 
)'' 
{(( 	
string)) 
stringToEncrypt)) "
=))# $
$str))% <
;))< =
byte** 
[** 
]** 
byteCipherText** !
=**" #
null**$ (
;**( )
using,, 
(,, $
AesCryptoServiceProvider,, +
aes,,, /
=,,0 1
new,,2 5$
AesCryptoServiceProvider,,6 N
(,,N O
),,O P
),,P Q
{-- 
ICryptoTransform//  
	encryptor//! *
=//+ ,
aes//- 0
.//0 1
CreateEncryptor//1 @
(//@ A
Encoding//A I
.//I J
UTF8//J N
.//N O
GetBytes//O W
(//W X
data//X \
)//\ ]
,//] ^
aes//_ b
.//b c
IV//c e
)//e f
;//f g
using11 
(11 
MemoryStream11 #
	msEncrypt11$ -
=11. /
new110 3
MemoryStream114 @
(11@ A
)11A B
)11B C
{22 
using33 
(33 
CryptoStream33 '
	csEncrypt33( 1
=332 3
new334 7
CryptoStream338 D
(33D E
	msEncrypt33E N
,33N O
	encryptor33P Y
,33Y Z
CryptoStreamMode33[ k
.33k l
Write33l q
)33q r
)33r s
{44 
using55 
(55 
StreamWriter55 +
	swEncrypt55, 5
=556 7
new558 ;
StreamWriter55< H
(55H I
	csEncrypt55I R
)55R S
)55S T
{66 
	swEncrypt88 %
.88% &
Write88& +
(88+ ,
stringToEncrypt88, ;
)88; <
;88< =
}99 
byteCipherText:: &
=::' (
	msEncrypt::) 2
.::2 3
ToArray::3 :
(::: ;
)::; <
;::< =
};; 
}<< 
}== 
IO>> 
.>> 
	WriteLine>> 
(>> 
IO>> 
.>> 
ToHex>> !
(>>! "
byteCipherText>>" 0
)>>0 1
)>>1 2
;>>2 3
}?? 	
}@@ 
privateBB 
stringBB 

Bad_sourceBB 
(BB 
)BB 
{CC 
stringDD 
dataDD 
;DD 
ifEE 

(EE 

badPrivateEE 
)EE 
{FF 	
dataHH 
=HH 
$strHH %
;HH% &
}II 	
elseJJ 
{KK 	
dataNN 
=NN 
nullNN 
;NN 
}OO 	
returnPP 
dataPP 
;PP 
}QQ 
privateTT 
boolTT 
goodG2B1_privateTT !
=TT" #
falseTT$ )
;TT) *
privateUU 
boolUU 
GoodG2B2_privateUU !
=UU" #
falseUU$ )
;UU) *
publicWW 

overrideWW 
voidWW 
GoodWW 
(WW 
)WW 
{XX 
GoodG2B1YY 
(YY 
)YY 
;YY 
GoodG2B2ZZ 
(ZZ 
)ZZ 
;ZZ 
}[[ 
private^^ 
void^^ 
GoodG2B1^^ 
(^^ 
)^^ 
{__ 
string`` 
data`` 
;`` 
goodG2B1_privateaa 
=aa 
falseaa  
;aa  !
databb 
=bb 
GoodG2B1_sourcebb 
(bb 
)bb  
;bb  !
ifcc 

(cc 
datacc 
!=cc 
nullcc 
)cc 
{dd 	
stringee 
stringToEncryptee "
=ee# $
$stree% <
;ee< =
byteff 
[ff 
]ff 
byteCipherTextff !
=ff" #
nullff$ (
;ff( )
usinghh 
(hh $
AesCryptoServiceProviderhh +
aeshh, /
=hh0 1
newhh2 5$
AesCryptoServiceProviderhh6 N
(hhN O
)hhO P
)hhP Q
{ii 
ICryptoTransformkk  
	encryptorkk! *
=kk+ ,
aeskk- 0
.kk0 1
CreateEncryptorkk1 @
(kk@ A
EncodingkkA I
.kkI J
UTF8kkJ N
.kkN O
GetByteskkO W
(kkW X
datakkX \
)kk\ ]
,kk] ^
aeskk_ b
.kkb c
IVkkc e
)kke f
;kkf g
usingmm 
(mm 
MemoryStreammm #
	msEncryptmm$ -
=mm. /
newmm0 3
MemoryStreammm4 @
(mm@ A
)mmA B
)mmB C
{nn 
usingoo 
(oo 
CryptoStreamoo '
	csEncryptoo( 1
=oo2 3
newoo4 7
CryptoStreamoo8 D
(ooD E
	msEncryptooE N
,ooN O
	encryptorooP Y
,ooY Z
CryptoStreamModeoo[ k
.ook l
Writeool q
)ooq r
)oor s
{pp 
usingqq 
(qq 
StreamWriterqq +
	swEncryptqq, 5
=qq6 7
newqq8 ;
StreamWriterqq< H
(qqH I
	csEncryptqqI R
)qqR S
)qqS T
{rr 
	swEncrypttt %
.tt% &
Writett& +
(tt+ ,
stringToEncrypttt, ;
)tt; <
;tt< =
}uu 
byteCipherTextvv &
=vv' (
	msEncryptvv) 2
.vv2 3
ToArrayvv3 :
(vv: ;
)vv; <
;vv< =
}ww 
}xx 
}yy 
IOzz 
.zz 
	WriteLinezz 
(zz 
IOzz 
.zz 
ToHexzz !
(zz! "
byteCipherTextzz" 0
)zz0 1
)zz1 2
;zz2 3
}{{ 	
}|| 
private~~ 
string~~ 
GoodG2B1_source~~ "
(~~" #
)~~# $
{ 
string
 
data
 
=
 
null
 
;
 
if
 

(
 
goodG2B1_private
 
)
 
{
 	
data
 
=
 
null
 
;
 
}
 	
else
 
{
 	
data
 
=
 
$str
 
;
 
try
 
{
 
data
 
=
 
Console
 
.
 
ReadLine
 '
(
' (
)
( )
;
) *
}
 
catch
 
(
 
IOException
 
exceptIO
 '
)
' (
{
 
IO
 
.
 
Logger
 
.
 
Log
 
(
 
NLog
 "
.
" #
LogLevel
# +
.
+ ,
Warn
, 0
,
0 1
$str
2 M
,
M N
exceptIO
O W
)
W X
;
X Y
}
 
}
 	
return
 
data
 
;
 
}
 
private
 
void
 
GoodG2B2
 
(
 
)
 
{
 
string
 
data
 
;
 
GoodG2B2_private
 
=
 
true
 
;
  
data
 
=
 
GoodG2B2_source
 
(
 
)
  
;
  !
if
 

(
 
data
 
!=
 
null
 
)
 
{
 	
string
   
stringToEncrypt
   "
=
  # $
$str
  % <
;
  < =
byte
¡¡ 
[
¡¡ 
]
¡¡ 
byteCipherText
¡¡ !
=
¡¡" #
null
¡¡$ (
;
¡¡( )
using
££ 
(
££ &
AesCryptoServiceProvider
££ +
aes
££, /
=
££0 1
new
££2 5&
AesCryptoServiceProvider
££6 N
(
££N O
)
££O P
)
££P Q
{
¤¤ 
ICryptoTransform
¦¦  
	encryptor
¦¦! *
=
¦¦+ ,
aes
¦¦- 0
.
¦¦0 1
CreateEncryptor
¦¦1 @
(
¦¦@ A
Encoding
¦¦A I
.
¦¦I J
UTF8
¦¦J N
.
¦¦N O
GetBytes
¦¦O W
(
¦¦W X
data
¦¦X \
)
¦¦\ ]
,
¦¦] ^
aes
¦¦_ b
.
¦¦b c
IV
¦¦c e
)
¦¦e f
;
¦¦f g
using
¨¨ 
(
¨¨ 
MemoryStream
¨¨ #
	msEncrypt
¨¨$ -
=
¨¨. /
new
¨¨0 3
MemoryStream
¨¨4 @
(
¨¨@ A
)
¨¨A B
)
¨¨B C
{
©© 
using
ªª 
(
ªª 
CryptoStream
ªª '
	csEncrypt
ªª( 1
=
ªª2 3
new
ªª4 7
CryptoStream
ªª8 D
(
ªªD E
	msEncrypt
ªªE N
,
ªªN O
	encryptor
ªªP Y
,
ªªY Z
CryptoStreamMode
ªª[ k
.
ªªk l
Write
ªªl q
)
ªªq r
)
ªªr s
{
«« 
using
¬¬ 
(
¬¬ 
StreamWriter
¬¬ +
	swEncrypt
¬¬, 5
=
¬¬6 7
new
¬¬8 ;
StreamWriter
¬¬< H
(
¬¬H I
	csEncrypt
¬¬I R
)
¬¬R S
)
¬¬S T
{
­­ 
	swEncrypt
¯¯ %
.
¯¯% &
Write
¯¯& +
(
¯¯+ ,
stringToEncrypt
¯¯, ;
)
¯¯; <
;
¯¯< =
}
°° 
byteCipherText
±± &
=
±±' (
	msEncrypt
±±) 2
.
±±2 3
ToArray
±±3 :
(
±±: ;
)
±±; <
;
±±< =
}
²² 
}
³³ 
}
´´ 
IO
µµ 
.
µµ 
	WriteLine
µµ 
(
µµ 
IO
µµ 
.
µµ 
ToHex
µµ !
(
µµ! "
byteCipherText
µµ" 0
)
µµ0 1
)
µµ1 2
;
µµ2 3
}
¶¶ 	
}
·· 
private
¹¹ 
string
¹¹ 
GoodG2B2_source
¹¹ "
(
¹¹" #
)
¹¹# $
{
ºº 
string
»» 
data
»» 
=
»» 
null
»» 
;
»» 
if
¼¼ 

(
¼¼ 
GoodG2B2_private
¼¼ 
)
¼¼ 
{
½½ 	
data
¾¾ 
=
¾¾ 
$str
¾¾ 
;
¾¾ 
try
ÀÀ 
{
ÁÁ 
data
ÃÃ 
=
ÃÃ 
Console
ÃÃ 
.
ÃÃ 
ReadLine
ÃÃ '
(
ÃÃ' (
)
ÃÃ( )
;
ÃÃ) *
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
IOException
ÅÅ 
exceptIO
ÅÅ '
)
ÅÅ' (
{
ÆÆ 
IO
ÇÇ 
.
ÇÇ 
Logger
ÇÇ 
.
ÇÇ 
Log
ÇÇ 
(
ÇÇ 
NLog
ÇÇ "
.
ÇÇ" #
LogLevel
ÇÇ# +
.
ÇÇ+ ,
Warn
ÇÇ, 0
,
ÇÇ0 1
$str
ÇÇ2 M
,
ÇÇM N
exceptIO
ÇÇO W
)
ÇÇW X
;
ÇÇX Y
}
ÈÈ 
}
ÉÉ 	
else
ÊÊ 
{
ËË 	
data
ÎÎ 
=
ÎÎ 
null
ÎÎ 
;
ÎÎ 
}
ÏÏ 	
return
ÐÐ 
data
ÐÐ 
;
ÐÐ 
}
ÑÑ 
}ÓÓ 
}ÔÔ öH
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_22a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_22a 4
:5 6
AbstractTestCase7 G
{ 
public 

static 
bool 
badPublicStatic &
=' (
false) .
;. /
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
badPublicStatic$$ 
=$$ 
true$$ 
;$$ 
data%% 
=%% :
.CWE321_Hard_Coded_Cryptographic_Key__basic_22b%% =
.%%= >
	BadSource%%> G
(%%G H
)%%H I
;%%I J
if&& 

(&& 
data&& 
!=&& 
null&& 
)&& 
{'' 	
string(( 
stringToEncrypt(( "
=((# $
$str((% <
;((< =
byte)) 
[)) 
])) 
byteCipherText)) !
=))" #
null))$ (
;))( )
using++ 
(++ $
AesCryptoServiceProvider++ +
aes++, /
=++0 1
new++2 5$
AesCryptoServiceProvider++6 N
(++N O
)++O P
)++P Q
{,, 
ICryptoTransform..  
	encryptor..! *
=..+ ,
aes..- 0
...0 1
CreateEncryptor..1 @
(..@ A
Encoding..A I
...I J
UTF8..J N
...N O
GetBytes..O W
(..W X
data..X \
)..\ ]
,..] ^
aes.._ b
...b c
IV..c e
)..e f
;..f g
using00 
(00 
MemoryStream00 #
	msEncrypt00$ -
=00. /
new000 3
MemoryStream004 @
(00@ A
)00A B
)00B C
{11 
using22 
(22 
CryptoStream22 '
	csEncrypt22( 1
=222 3
new224 7
CryptoStream228 D
(22D E
	msEncrypt22E N
,22N O
	encryptor22P Y
,22Y Z
CryptoStreamMode22[ k
.22k l
Write22l q
)22q r
)22r s
{33 
using44 
(44 
StreamWriter44 +
	swEncrypt44, 5
=446 7
new448 ;
StreamWriter44< H
(44H I
	csEncrypt44I R
)44R S
)44S T
{55 
	swEncrypt77 %
.77% &
Write77& +
(77+ ,
stringToEncrypt77, ;
)77; <
;77< =
}88 
byteCipherText99 &
=99' (
	msEncrypt99) 2
.992 3
ToArray993 :
(99: ;
)99; <
;99< =
}:: 
};; 
}<< 
IO== 
.== 
	WriteLine== 
(== 
IO== 
.== 
ToHex== !
(==! "
byteCipherText==" 0
)==0 1
)==1 2
;==2 3
}>> 	
}?? 
publicCC 

staticCC 
boolCC  
goodG2B1PublicStaticCC +
=CC, -
falseCC. 3
;CC3 4
publicDD 

staticDD 
boolDD  
GoodG2B2PublicStaticDD +
=DD, -
falseDD. 3
;DD3 4
publicFF 

overrideFF 
voidFF 
GoodFF 
(FF 
)FF 
{GG 
GoodG2B1HH 
(HH 
)HH 
;HH 
GoodG2B2II 
(II 
)II 
;II 
}JJ 
privateMM 
voidMM 
GoodG2B1MM 
(MM 
)MM 
{NN 
stringOO 
dataOO 
;OO  
goodG2B1PublicStaticPP 
=PP 
falsePP $
;PP$ %
dataQQ 
=QQ :
.CWE321_Hard_Coded_Cryptographic_Key__basic_22bQQ =
.QQ= >
GoodG2B1SourceQQ> L
(QQL M
)QQM N
;QQN O
ifRR 

(RR 
dataRR 
!=RR 
nullRR 
)RR 
{SS 	
stringTT 
stringToEncryptTT "
=TT# $
$strTT% <
;TT< =
byteUU 
[UU 
]UU 
byteCipherTextUU !
=UU" #
nullUU$ (
;UU( )
usingWW 
(WW $
AesCryptoServiceProviderWW +
aesWW, /
=WW0 1
newWW2 5$
AesCryptoServiceProviderWW6 N
(WWN O
)WWO P
)WWP Q
{XX 
ICryptoTransformZZ  
	encryptorZZ! *
=ZZ+ ,
aesZZ- 0
.ZZ0 1
CreateEncryptorZZ1 @
(ZZ@ A
EncodingZZA I
.ZZI J
UTF8ZZJ N
.ZZN O
GetBytesZZO W
(ZZW X
dataZZX \
)ZZ\ ]
,ZZ] ^
aesZZ_ b
.ZZb c
IVZZc e
)ZZe f
;ZZf g
using\\ 
(\\ 
MemoryStream\\ #
	msEncrypt\\$ -
=\\. /
new\\0 3
MemoryStream\\4 @
(\\@ A
)\\A B
)\\B C
{]] 
using^^ 
(^^ 
CryptoStream^^ '
	csEncrypt^^( 1
=^^2 3
new^^4 7
CryptoStream^^8 D
(^^D E
	msEncrypt^^E N
,^^N O
	encryptor^^P Y
,^^Y Z
CryptoStreamMode^^[ k
.^^k l
Write^^l q
)^^q r
)^^r s
{__ 
using`` 
(`` 
StreamWriter`` +
	swEncrypt``, 5
=``6 7
new``8 ;
StreamWriter``< H
(``H I
	csEncrypt``I R
)``R S
)``S T
{aa 
	swEncryptcc %
.cc% &
Writecc& +
(cc+ ,
stringToEncryptcc, ;
)cc; <
;cc< =
}dd 
byteCipherTextee &
=ee' (
	msEncryptee) 2
.ee2 3
ToArrayee3 :
(ee: ;
)ee; <
;ee< =
}ff 
}gg 
}hh 
IOii 
.ii 
	WriteLineii 
(ii 
IOii 
.ii 
ToHexii !
(ii! "
byteCipherTextii" 0
)ii0 1
)ii1 2
;ii2 3
}jj 	
}kk 
privatenn 
voidnn 
GoodG2B2nn 
(nn 
)nn 
{oo 
stringpp 
datapp 
;pp  
GoodG2B2PublicStaticqq 
=qq 
trueqq #
;qq# $
datarr 
=rr :
.CWE321_Hard_Coded_Cryptographic_Key__basic_22brr =
.rr= >
GoodG2B2Sourcerr> L
(rrL M
)rrM N
;rrN O
ifss 

(ss 
datass 
!=ss 
nullss 
)ss 
{tt 	
stringuu 
stringToEncryptuu "
=uu# $
$struu% <
;uu< =
bytevv 
[vv 
]vv 
byteCipherTextvv !
=vv" #
nullvv$ (
;vv( )
usingxx 
(xx $
AesCryptoServiceProviderxx +
aesxx, /
=xx0 1
newxx2 5$
AesCryptoServiceProviderxx6 N
(xxN O
)xxO P
)xxP Q
{yy 
ICryptoTransform{{  
	encryptor{{! *
={{+ ,
aes{{- 0
.{{0 1
CreateEncryptor{{1 @
({{@ A
Encoding{{A I
.{{I J
UTF8{{J N
.{{N O
GetBytes{{O W
({{W X
data{{X \
){{\ ]
,{{] ^
aes{{_ b
.{{b c
IV{{c e
){{e f
;{{f g
using}} 
(}} 
MemoryStream}} #
	msEncrypt}}$ -
=}}. /
new}}0 3
MemoryStream}}4 @
(}}@ A
)}}A B
)}}B C
{~~ 
using 
( 
CryptoStream '
	csEncrypt( 1
=2 3
new4 7
CryptoStream8 D
(D E
	msEncryptE N
,N O
	encryptorP Y
,Y Z
CryptoStreamMode[ k
.k l
Writel q
)q r
)r s
{
 
using
 
(
 
StreamWriter
 +
	swEncrypt
, 5
=
6 7
new
8 ;
StreamWriter
< H
(
H I
	csEncrypt
I R
)
R S
)
S T
{
 
	swEncrypt
 %
.
% &
Write
& +
(
+ ,
stringToEncrypt
, ;
)
; <
;
< =
}
 
byteCipherText
 &
=
' (
	msEncrypt
) 2
.
2 3
ToArray
3 :
(
: ;
)
; <
;
< =
}
 
}
 
}
 
IO
 
.
 
	WriteLine
 
(
 
IO
 
.
 
ToHex
 !
(
! "
byteCipherText
" 0
)
0 1
)
1 2
;
2 3
}
 	
}
 
} 
} þ
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_22b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_22b 4
{ 
public 

static 
string 
	BadSource "
(" #
)# $
{ 
string 
data 
; 
if 

( :
.CWE321_Hard_Coded_Cryptographic_Key__basic_22a :
.: ;
badPublicStatic; J
)J K
{   	
data"" 
="" 
$str"" %
;""% &
}## 	
else$$ 
{%% 	
data(( 
=(( 
null(( 
;(( 
})) 	
return** 
data** 
;** 
}++ 
public00 

static00 
string00 
GoodG2B1Source00 '
(00' (
)00( )
{11 
string22 
data22 
;22 
if33 

(33 :
.CWE321_Hard_Coded_Cryptographic_Key__basic_22a33 :
.33: ; 
goodG2B1PublicStatic33; O
)33O P
{44 	
data77 
=77 
null77 
;77 
}88 	
else99 
{:: 	
data;; 
=;; 
$str;; 
;;; 
try== 
{>> 
data@@ 
=@@ 
Console@@ 
.@@ 
ReadLine@@ '
(@@' (
)@@( )
;@@) *
}AA 
catchBB 
(BB 
IOExceptionBB 
exceptIOBB '
)BB' (
{CC 
IODD 
.DD 
LoggerDD 
.DD 
LogDD 
(DD 
NLogDD "
.DD" #
LogLevelDD# +
.DD+ ,
WarnDD, 0
,DD0 1
$strDD2 M
,DDM N
exceptIODDO W
)DDW X
;DDX Y
}EE 
}FF 	
returnGG 
dataGG 
;GG 
}HH 
publicKK 

staticKK 
stringKK 
GoodG2B2SourceKK '
(KK' (
)KK( )
{LL 
stringMM 
dataMM 
;MM 
ifNN 

(NN :
.CWE321_Hard_Coded_Cryptographic_Key__basic_22aNN :
.NN: ; 
GoodG2B2PublicStaticNN; O
)NNO P
{OO 	
dataPP 
=PP 
$strPP 
;PP 
tryRR 
{SS 
dataUU 
=UU 
ConsoleUU 
.UU 
ReadLineUU '
(UU' (
)UU( )
;UU) *
}VV 
catchWW 
(WW 
IOExceptionWW 
exceptIOWW '
)WW' (
{XX 
IOYY 
.YY 
LoggerYY 
.YY 
LogYY 
(YY 
NLogYY "
.YY" #
LogLevelYY# +
.YY+ ,
WarnYY, 0
,YY0 1
$strYY2 M
,YYM N
exceptIOYYO W
)YYW X
;YYX Y
}ZZ 
}[[ 	
else\\ 
{]] 	
data`` 
=`` 
null`` 
;`` 
}aa 	
returnbb 
databb 
;bb 
}cc 
}ee 
}ff ¤5
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_31.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_31 3
:4 5
AbstractTestCase6 F
{ 
public   

override   
void   
Bad   
(   
)   
{!! 
string"" 
dataCopy"" 
;"" 
{## 	
string$$ 
data$$ 
;$$ 
data&& 
=&& 
$str&& %
;&&% &
dataCopy'' 
='' 
data'' 
;'' 
}(( 	
{)) 	
string** 
data** 
=** 
dataCopy** "
;**" #
if++ 
(++ 
data++ 
!=++ 
null++ 
)++ 
{,, 
string-- 
stringToEncrypt-- &
=--' (
$str--) @
;--@ A
byte.. 
[.. 
].. 
byteCipherText.. %
=..& '
null..( ,
;.., -
using00 
(00 $
AesCryptoServiceProvider00 /
aes000 3
=004 5
new006 9$
AesCryptoServiceProvider00: R
(00R S
)00S T
)00T U
{11 
ICryptoTransform33 $
	encryptor33% .
=33/ 0
aes331 4
.334 5
CreateEncryptor335 D
(33D E
Encoding33E M
.33M N
UTF833N R
.33R S
GetBytes33S [
(33[ \
data33\ `
)33` a
,33a b
aes33c f
.33f g
IV33g i
)33i j
;33j k
using55 
(55 
MemoryStream55 '
	msEncrypt55( 1
=552 3
new554 7
MemoryStream558 D
(55D E
)55E F
)55F G
{66 
using77 
(77 
CryptoStream77 +
	csEncrypt77, 5
=776 7
new778 ;
CryptoStream77< H
(77H I
	msEncrypt77I R
,77R S
	encryptor77T ]
,77] ^
CryptoStreamMode77_ o
.77o p
Write77p u
)77u v
)77v w
{88 
using99 !
(99" #
StreamWriter99# /
	swEncrypt990 9
=99: ;
new99< ?
StreamWriter99@ L
(99L M
	csEncrypt99M V
)99V W
)99W X
{:: 
	swEncrypt<<  )
.<<) *
Write<<* /
(<</ 0
stringToEncrypt<<0 ?
)<<? @
;<<@ A
}== 
byteCipherText>> *
=>>+ ,
	msEncrypt>>- 6
.>>6 7
ToArray>>7 >
(>>> ?
)>>? @
;>>@ A
}?? 
}@@ 
}AA 
IOBB 
.BB 
	WriteLineBB 
(BB 
IOBB 
.BB  
ToHexBB  %
(BB% &
byteCipherTextBB& 4
)BB4 5
)BB5 6
;BB6 7
}CC 
}DD 	
}EE 
publicHH 

overrideHH 
voidHH 
GoodHH 
(HH 
)HH 
{II 
GoodG2BJJ 
(JJ 
)JJ 
;JJ 
}KK 
privateNN 
voidNN 
GoodG2BNN 
(NN 
)NN 
{OO 
stringPP 
dataCopyPP 
;PP 
{QQ 	
stringRR 
dataRR 
;RR 
dataSS 
=SS 
$strSS 
;SS 
tryUU 
{VV 
dataXX 
=XX 
ConsoleXX 
.XX 
ReadLineXX '
(XX' (
)XX( )
;XX) *
}YY 
catchZZ 
(ZZ 
IOExceptionZZ 
exceptIOZZ '
)ZZ' (
{[[ 
IO\\ 
.\\ 
Logger\\ 
.\\ 
Log\\ 
(\\ 
NLog\\ "
.\\" #
LogLevel\\# +
.\\+ ,
Warn\\, 0
,\\0 1
$str\\2 M
,\\M N
exceptIO\\O W
)\\W X
;\\X Y
}]] 
dataCopy^^ 
=^^ 
data^^ 
;^^ 
}__ 	
{`` 	
stringaa 
dataaa 
=aa 
dataCopyaa "
;aa" #
ifbb 
(bb 
databb 
!=bb 
nullbb 
)bb 
{cc 
stringdd 
stringToEncryptdd &
=dd' (
$strdd) @
;dd@ A
byteee 
[ee 
]ee 
byteCipherTextee %
=ee& '
nullee( ,
;ee, -
usinggg 
(gg $
AesCryptoServiceProvidergg /
aesgg0 3
=gg4 5
newgg6 9$
AesCryptoServiceProvidergg: R
(ggR S
)ggS T
)ggT U
{hh 
ICryptoTransformjj $
	encryptorjj% .
=jj/ 0
aesjj1 4
.jj4 5
CreateEncryptorjj5 D
(jjD E
EncodingjjE M
.jjM N
UTF8jjN R
.jjR S
GetBytesjjS [
(jj[ \
datajj\ `
)jj` a
,jja b
aesjjc f
.jjf g
IVjjg i
)jji j
;jjj k
usingll 
(ll 
MemoryStreamll '
	msEncryptll( 1
=ll2 3
newll4 7
MemoryStreamll8 D
(llD E
)llE F
)llF G
{mm 
usingnn 
(nn 
CryptoStreamnn +
	csEncryptnn, 5
=nn6 7
newnn8 ;
CryptoStreamnn< H
(nnH I
	msEncryptnnI R
,nnR S
	encryptornnT ]
,nn] ^
CryptoStreamModenn_ o
.nno p
Writennp u
)nnu v
)nnv w
{oo 
usingpp !
(pp" #
StreamWriterpp# /
	swEncryptpp0 9
=pp: ;
newpp< ?
StreamWriterpp@ L
(ppL M
	csEncryptppM V
)ppV W
)ppW X
{qq 
	swEncryptss  )
.ss) *
Writess* /
(ss/ 0
stringToEncryptss0 ?
)ss? @
;ss@ A
}tt 
byteCipherTextuu *
=uu+ ,
	msEncryptuu- 6
.uu6 7
ToArrayuu7 >
(uu> ?
)uu? @
;uu@ A
}vv 
}ww 
}xx 
IOyy 
.yy 
	WriteLineyy 
(yy 
IOyy 
.yy  
ToHexyy  %
(yy% &
byteCipherTextyy& 4
)yy4 5
)yy5 6
;yy6 7
}zz 
}{{ 	
}|| 
}~~ 
} ¢5
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_41.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_41 3
:4 5
AbstractTestCase6 F
{ 
private 
static 
void 
BadSink 
(  
string  &
data' +
), -
{ 
if   

(   
data   
!=   
null   
)   
{!! 	
string"" 
stringToEncrypt"" "
=""# $
$str""% <
;""< =
byte## 
[## 
]## 
byteCipherText## !
=##" #
null##$ (
;##( )
using%% 
(%% $
AesCryptoServiceProvider%% +
aes%%, /
=%%0 1
new%%2 5$
AesCryptoServiceProvider%%6 N
(%%N O
)%%O P
)%%P Q
{&& 
ICryptoTransform((  
	encryptor((! *
=((+ ,
aes((- 0
.((0 1
CreateEncryptor((1 @
(((@ A
Encoding((A I
.((I J
UTF8((J N
.((N O
GetBytes((O W
(((W X
data((X \
)((\ ]
,((] ^
aes((_ b
.((b c
IV((c e
)((e f
;((f g
using** 
(** 
MemoryStream** #
	msEncrypt**$ -
=**. /
new**0 3
MemoryStream**4 @
(**@ A
)**A B
)**B C
{++ 
using,, 
(,, 
CryptoStream,, '
	csEncrypt,,( 1
=,,2 3
new,,4 7
CryptoStream,,8 D
(,,D E
	msEncrypt,,E N
,,,N O
	encryptor,,P Y
,,,Y Z
CryptoStreamMode,,[ k
.,,k l
Write,,l q
),,q r
),,r s
{-- 
using.. 
(.. 
StreamWriter.. +
	swEncrypt.., 5
=..6 7
new..8 ;
StreamWriter..< H
(..H I
	csEncrypt..I R
)..R S
)..S T
{// 
	swEncrypt11 %
.11% &
Write11& +
(11+ ,
stringToEncrypt11, ;
)11; <
;11< =
}22 
byteCipherText33 &
=33' (
	msEncrypt33) 2
.332 3
ToArray333 :
(33: ;
)33; <
;33< =
}44 
}55 
}66 
IO77 
.77 
	WriteLine77 
(77 
IO77 
.77 
ToHex77 !
(77! "
byteCipherText77" 0
)770 1
)771 2
;772 3
}88 	
}99 
public;; 

override;; 
void;; 
Bad;; 
(;; 
);; 
{<< 
string== 
data== 
;== 
data?? 
=?? 
$str?? !
;??! "
BadSink@@ 
(@@ 
data@@ 
)@@ 
;@@ 
}AA 
publicDD 

overrideDD 
voidDD 
GoodDD 
(DD 
)DD 
{EE 
GoodG2BFF 
(FF 
)FF 
;FF 
}GG 
privateII 
staticII 
voidII 
GoodG2BSinkII #
(II# $
stringII$ *
dataII+ /
)II0 1
{JJ 
ifKK 

(KK 
dataKK 
!=KK 
nullKK 
)KK 
{LL 	
stringMM 
stringToEncryptMM "
=MM# $
$strMM% <
;MM< =
byteNN 
[NN 
]NN 
byteCipherTextNN !
=NN" #
nullNN$ (
;NN( )
usingPP 
(PP $
AesCryptoServiceProviderPP +
aesPP, /
=PP0 1
newPP2 5$
AesCryptoServiceProviderPP6 N
(PPN O
)PPO P
)PPP Q
{QQ 
ICryptoTransformSS  
	encryptorSS! *
=SS+ ,
aesSS- 0
.SS0 1
CreateEncryptorSS1 @
(SS@ A
EncodingSSA I
.SSI J
UTF8SSJ N
.SSN O
GetBytesSSO W
(SSW X
dataSSX \
)SS\ ]
,SS] ^
aesSS_ b
.SSb c
IVSSc e
)SSe f
;SSf g
usingUU 
(UU 
MemoryStreamUU #
	msEncryptUU$ -
=UU. /
newUU0 3
MemoryStreamUU4 @
(UU@ A
)UUA B
)UUB C
{VV 
usingWW 
(WW 
CryptoStreamWW '
	csEncryptWW( 1
=WW2 3
newWW4 7
CryptoStreamWW8 D
(WWD E
	msEncryptWWE N
,WWN O
	encryptorWWP Y
,WWY Z
CryptoStreamModeWW[ k
.WWk l
WriteWWl q
)WWq r
)WWr s
{XX 
usingYY 
(YY 
StreamWriterYY +
	swEncryptYY, 5
=YY6 7
newYY8 ;
StreamWriterYY< H
(YYH I
	csEncryptYYI R
)YYR S
)YYS T
{ZZ 
	swEncrypt\\ %
.\\% &
Write\\& +
(\\+ ,
stringToEncrypt\\, ;
)\\; <
;\\< =
}]] 
byteCipherText^^ &
=^^' (
	msEncrypt^^) 2
.^^2 3
ToArray^^3 :
(^^: ;
)^^; <
;^^< =
}__ 
}`` 
}aa 
IObb 
.bb 
	WriteLinebb 
(bb 
IObb 
.bb 
ToHexbb !
(bb! "
byteCipherTextbb" 0
)bb0 1
)bb1 2
;bb2 3
}cc 	
}dd 
privategg 
staticgg 
voidgg 
GoodG2Bgg 
(gg  
)gg  !
{hh 
stringii 
dataii 
;ii 
datajj 
=jj 
$strjj 
;jj 
tryll 
{mm 	
dataoo 
=oo 
Consoleoo 
.oo 
ReadLineoo #
(oo# $
)oo$ %
;oo% &
}pp 	
catchqq 
(qq 
IOExceptionqq 
exceptIOqq #
)qq# $
{rr 	
IOss 
.ss 
Loggerss 
.ss 
Logss 
(ss 
NLogss 
.ss 
LogLevelss '
.ss' (
Warnss( ,
,ss, -
$strss. I
,ssI J
exceptIOssK S
)ssS T
;ssT U
}tt 	
GoodG2BSinkuu 
(uu 
datauu 
)uu 
;uu 
}vv 
}xx 
}yy 6
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_42.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_42 3
:4 5
AbstractTestCase6 F
{ 
private 
static 
string 
	BadSource #
(# $
)$ %
{ 
string   
data   
;   
data"" 
="" 
$str"" !
;""! "
return## 
data## 
;## 
}$$ 
public'' 

override'' 
void'' 
Bad'' 
('' 
)'' 
{(( 
string)) 
data)) 
=)) 
	BadSource)) 
())  
)))  !
;))! "
if** 

(** 
data** 
!=** 
null** 
)** 
{++ 	
string,, 
stringToEncrypt,, "
=,,# $
$str,,% <
;,,< =
byte-- 
[-- 
]-- 
byteCipherText-- !
=--" #
null--$ (
;--( )
using// 
(// $
AesCryptoServiceProvider// +
aes//, /
=//0 1
new//2 5$
AesCryptoServiceProvider//6 N
(//N O
)//O P
)//P Q
{00 
ICryptoTransform22  
	encryptor22! *
=22+ ,
aes22- 0
.220 1
CreateEncryptor221 @
(22@ A
Encoding22A I
.22I J
UTF822J N
.22N O
GetBytes22O W
(22W X
data22X \
)22\ ]
,22] ^
aes22_ b
.22b c
IV22c e
)22e f
;22f g
using44 
(44 
MemoryStream44 #
	msEncrypt44$ -
=44. /
new440 3
MemoryStream444 @
(44@ A
)44A B
)44B C
{55 
using66 
(66 
CryptoStream66 '
	csEncrypt66( 1
=662 3
new664 7
CryptoStream668 D
(66D E
	msEncrypt66E N
,66N O
	encryptor66P Y
,66Y Z
CryptoStreamMode66[ k
.66k l
Write66l q
)66q r
)66r s
{77 
using88 
(88 
StreamWriter88 +
	swEncrypt88, 5
=886 7
new888 ;
StreamWriter88< H
(88H I
	csEncrypt88I R
)88R S
)88S T
{99 
	swEncrypt;; %
.;;% &
Write;;& +
(;;+ ,
stringToEncrypt;;, ;
);;; <
;;;< =
}<< 
byteCipherText== &
===' (
	msEncrypt==) 2
.==2 3
ToArray==3 :
(==: ;
)==; <
;==< =
}>> 
}?? 
}@@ 
IOAA 
.AA 
	WriteLineAA 
(AA 
IOAA 
.AA 
ToHexAA !
(AA! "
byteCipherTextAA" 0
)AA0 1
)AA1 2
;AA2 3
}BB 	
}CC 
privateFF 
staticFF 
stringFF 
GoodG2BSourceFF '
(FF' (
)FF( )
{GG 
stringHH 
dataHH 
;HH 
dataII 
=II 
$strII 
;II 
tryKK 
{LL 	
dataNN 
=NN 
ConsoleNN 
.NN 
ReadLineNN #
(NN# $
)NN$ %
;NN% &
}OO 	
catchPP 
(PP 
IOExceptionPP 
exceptIOPP #
)PP# $
{QQ 	
IORR 
.RR 
LoggerRR 
.RR 
LogRR 
(RR 
NLogRR 
.RR 
LogLevelRR '
.RR' (
WarnRR( ,
,RR, -
$strRR. I
,RRI J
exceptIORRK S
)RRS T
;RRT U
}SS 	
returnTT 
dataTT 
;TT 
}UU 
privateXX 
staticXX 
voidXX 
GoodG2BXX 
(XX  
)XX  !
{YY 
stringZZ 
dataZZ 
=ZZ 
GoodG2BSourceZZ #
(ZZ# $
)ZZ$ %
;ZZ% &
if[[ 

([[ 
data[[ 
!=[[ 
null[[ 
)[[ 
{\\ 	
string]] 
stringToEncrypt]] "
=]]# $
$str]]% <
;]]< =
byte^^ 
[^^ 
]^^ 
byteCipherText^^ !
=^^" #
null^^$ (
;^^( )
using`` 
(`` $
AesCryptoServiceProvider`` +
aes``, /
=``0 1
new``2 5$
AesCryptoServiceProvider``6 N
(``N O
)``O P
)``P Q
{aa 
ICryptoTransformcc  
	encryptorcc! *
=cc+ ,
aescc- 0
.cc0 1
CreateEncryptorcc1 @
(cc@ A
EncodingccA I
.ccI J
UTF8ccJ N
.ccN O
GetBytesccO W
(ccW X
dataccX \
)cc\ ]
,cc] ^
aescc_ b
.ccb c
IVccc e
)cce f
;ccf g
usingee 
(ee 
MemoryStreamee #
	msEncryptee$ -
=ee. /
newee0 3
MemoryStreamee4 @
(ee@ A
)eeA B
)eeB C
{ff 
usinggg 
(gg 
CryptoStreamgg '
	csEncryptgg( 1
=gg2 3
newgg4 7
CryptoStreamgg8 D
(ggD E
	msEncryptggE N
,ggN O
	encryptorggP Y
,ggY Z
CryptoStreamModegg[ k
.ggk l
Writeggl q
)ggq r
)ggr s
{hh 
usingii 
(ii 
StreamWriterii +
	swEncryptii, 5
=ii6 7
newii8 ;
StreamWriterii< H
(iiH I
	csEncryptiiI R
)iiR S
)iiS T
{jj 
	swEncryptll %
.ll% &
Writell& +
(ll+ ,
stringToEncryptll, ;
)ll; <
;ll< =
}mm 
byteCipherTextnn &
=nn' (
	msEncryptnn) 2
.nn2 3
ToArraynn3 :
(nn: ;
)nn; <
;nn< =
}oo 
}pp 
}qq 
IOrr 
.rr 
	WriteLinerr 
(rr 
IOrr 
.rr 
ToHexrr !
(rr! "
byteCipherTextrr" 0
)rr0 1
)rr1 2
;rr2 3
}ss 	
}tt 
publicvv 

overridevv 
voidvv 
Goodvv 
(vv 
)vv 
{ww 
GoodG2Bxx 
(xx 
)xx 
;xx 
}yy 
}{{ 
}|| Ü7
°C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_45.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_45 3
:4 5
AbstractTestCase6 F
{ 
private 
string 
dataBad 
; 
private   
string   
dataGoodG2B   
;   
private"" 
void"" 
BadSink"" 
("" 
)"" 
{## 
string$$ 
data$$ 
=$$ 
dataBad$$ 
;$$ 
if%% 

(%% 
data%% 
!=%% 
null%% 
)%% 
{&& 	
string'' 
stringToEncrypt'' "
=''# $
$str''% <
;''< =
byte(( 
[(( 
](( 
byteCipherText(( !
=((" #
null(($ (
;((( )
using** 
(** $
AesCryptoServiceProvider** +
aes**, /
=**0 1
new**2 5$
AesCryptoServiceProvider**6 N
(**N O
)**O P
)**P Q
{++ 
ICryptoTransform--  
	encryptor--! *
=--+ ,
aes--- 0
.--0 1
CreateEncryptor--1 @
(--@ A
Encoding--A I
.--I J
UTF8--J N
.--N O
GetBytes--O W
(--W X
data--X \
)--\ ]
,--] ^
aes--_ b
.--b c
IV--c e
)--e f
;--f g
using// 
(// 
MemoryStream// #
	msEncrypt//$ -
=//. /
new//0 3
MemoryStream//4 @
(//@ A
)//A B
)//B C
{00 
using11 
(11 
CryptoStream11 '
	csEncrypt11( 1
=112 3
new114 7
CryptoStream118 D
(11D E
	msEncrypt11E N
,11N O
	encryptor11P Y
,11Y Z
CryptoStreamMode11[ k
.11k l
Write11l q
)11q r
)11r s
{22 
using33 
(33 
StreamWriter33 +
	swEncrypt33, 5
=336 7
new338 ;
StreamWriter33< H
(33H I
	csEncrypt33I R
)33R S
)33S T
{44 
	swEncrypt66 %
.66% &
Write66& +
(66+ ,
stringToEncrypt66, ;
)66; <
;66< =
}77 
byteCipherText88 &
=88' (
	msEncrypt88) 2
.882 3
ToArray883 :
(88: ;
)88; <
;88< =
}99 
}:: 
};; 
IO<< 
.<< 
	WriteLine<< 
(<< 
IO<< 
.<< 
ToHex<< !
(<<! "
byteCipherText<<" 0
)<<0 1
)<<1 2
;<<2 3
}== 	
}>> 
publicAA 

overrideAA 
voidAA 
BadAA 
(AA 
)AA 
{BB 
stringCC 
dataCC 
;CC 
dataEE 
=EE 
$strEE !
;EE! "
dataBadFF 
=FF 
dataFF 
;FF 
BadSinkGG 
(GG 
)GG 
;GG 
}HH 
publicKK 

overrideKK 
voidKK 
GoodKK 
(KK 
)KK 
{LL 
GoodG2BMM 
(MM 
)MM 
;MM 
}NN 
privatePP 
voidPP 
GoodG2BSinkPP 
(PP 
)PP 
{QQ 
stringRR 
dataRR 
=RR 
dataGoodG2BRR !
;RR! "
ifSS 

(SS 
dataSS 
!=SS 
nullSS 
)SS 
{TT 	
stringUU 
stringToEncryptUU "
=UU# $
$strUU% <
;UU< =
byteVV 
[VV 
]VV 
byteCipherTextVV !
=VV" #
nullVV$ (
;VV( )
usingXX 
(XX $
AesCryptoServiceProviderXX +
aesXX, /
=XX0 1
newXX2 5$
AesCryptoServiceProviderXX6 N
(XXN O
)XXO P
)XXP Q
{YY 
ICryptoTransform[[  
	encryptor[[! *
=[[+ ,
aes[[- 0
.[[0 1
CreateEncryptor[[1 @
([[@ A
Encoding[[A I
.[[I J
UTF8[[J N
.[[N O
GetBytes[[O W
([[W X
data[[X \
)[[\ ]
,[[] ^
aes[[_ b
.[[b c
IV[[c e
)[[e f
;[[f g
using]] 
(]] 
MemoryStream]] #
	msEncrypt]]$ -
=]]. /
new]]0 3
MemoryStream]]4 @
(]]@ A
)]]A B
)]]B C
{^^ 
using__ 
(__ 
CryptoStream__ '
	csEncrypt__( 1
=__2 3
new__4 7
CryptoStream__8 D
(__D E
	msEncrypt__E N
,__N O
	encryptor__P Y
,__Y Z
CryptoStreamMode__[ k
.__k l
Write__l q
)__q r
)__r s
{`` 
usingaa 
(aa 
StreamWriteraa +
	swEncryptaa, 5
=aa6 7
newaa8 ;
StreamWriteraa< H
(aaH I
	csEncryptaaI R
)aaR S
)aaS T
{bb 
	swEncryptdd %
.dd% &
Writedd& +
(dd+ ,
stringToEncryptdd, ;
)dd; <
;dd< =
}ee 
byteCipherTextff &
=ff' (
	msEncryptff) 2
.ff2 3
ToArrayff3 :
(ff: ;
)ff; <
;ff< =
}gg 
}hh 
}ii 
IOjj 
.jj 
	WriteLinejj 
(jj 
IOjj 
.jj 
ToHexjj !
(jj! "
byteCipherTextjj" 0
)jj0 1
)jj1 2
;jj2 3
}kk 	
}ll 
privateoo 
voidoo 
GoodG2Boo 
(oo 
)oo 
{pp 
stringqq 
dataqq 
;qq 
datarr 
=rr 
$strrr 
;rr 
trytt 
{uu 	
dataww 
=ww 
Consoleww 
.ww 
ReadLineww #
(ww# $
)ww$ %
;ww% &
}xx 	
catchyy 
(yy 
IOExceptionyy 
exceptIOyy #
)yy# $
{zz 	
IO{{ 
.{{ 
Logger{{ 
.{{ 
Log{{ 
({{ 
NLog{{ 
.{{ 
LogLevel{{ '
.{{' (
Warn{{( ,
,{{, -
$str{{. I
,{{I J
exceptIO{{K S
){{S T
;{{T U
}|| 	
dataGoodG2B}} 
=}} 
data}} 
;}} 
GoodG2BSink~~ 
(~~ 
)~~ 
;~~ 
} 
} 
} 
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_51a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_51a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data 
= 
$str !
;! ":
.CWE321_Hard_Coded_Cryptographic_Key__basic_51b   6
.  6 7
BadSink  7 >
(  > ?
data  ? C
)  E F
;  F G
}!! 
public$$ 

override$$ 
void$$ 
Good$$ 
($$ 
)$$ 
{%% 
GoodG2B&& 
(&& 
)&& 
;&& 
}'' 
private** 
void** 
GoodG2B** 
(** 
)** 
{++ 
string,, 
data,, 
;,, 
data-- 
=-- 
$str-- 
;-- 
try// 
{00 	
data22 
=22 
Console22 
.22 
ReadLine22 #
(22# $
)22$ %
;22% &
}33 	
catch44 
(44 
IOException44 
exceptIO44 #
)44# $
{55 	
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 
.66 
LogLevel66 '
.66' (
Warn66( ,
,66, -
$str66. I
,66I J
exceptIO66K S
)66S T
;66T U
}77 	:
.CWE321_Hard_Coded_Cryptographic_Key__basic_51b88 6
.886 7
GoodG2BSink887 B
(88B C
data88C G
)88I J
;88J K
}99 
};; 
}<< §)
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_51b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_51b 4
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
if 

( 
data 
!= 
null 
) 
{ 	
string   
stringToEncrypt   "
=  # $
$str  % <
;  < =
byte!! 
[!! 
]!! 
byteCipherText!! !
=!!" #
null!!$ (
;!!( )
using## 
(## $
AesCryptoServiceProvider## +
aes##, /
=##0 1
new##2 5$
AesCryptoServiceProvider##6 N
(##N O
)##O P
)##P Q
{$$ 
ICryptoTransform&&  
	encryptor&&! *
=&&+ ,
aes&&- 0
.&&0 1
CreateEncryptor&&1 @
(&&@ A
Encoding&&A I
.&&I J
UTF8&&J N
.&&N O
GetBytes&&O W
(&&W X
data&&X \
)&&\ ]
,&&] ^
aes&&_ b
.&&b c
IV&&c e
)&&e f
;&&f g
using(( 
((( 
MemoryStream(( #
	msEncrypt(($ -
=((. /
new((0 3
MemoryStream((4 @
(((@ A
)((A B
)((B C
{)) 
using** 
(** 
CryptoStream** '
	csEncrypt**( 1
=**2 3
new**4 7
CryptoStream**8 D
(**D E
	msEncrypt**E N
,**N O
	encryptor**P Y
,**Y Z
CryptoStreamMode**[ k
.**k l
Write**l q
)**q r
)**r s
{++ 
using,, 
(,, 
StreamWriter,, +
	swEncrypt,,, 5
=,,6 7
new,,8 ;
StreamWriter,,< H
(,,H I
	csEncrypt,,I R
),,R S
),,S T
{-- 
	swEncrypt// %
.//% &
Write//& +
(//+ ,
stringToEncrypt//, ;
)//; <
;//< =
}00 
byteCipherText11 &
=11' (
	msEncrypt11) 2
.112 3
ToArray113 :
(11: ;
)11; <
;11< =
}22 
}33 
}44 
IO55 
.55 
	WriteLine55 
(55 
IO55 
.55 
ToHex55 !
(55! "
byteCipherText55" 0
)550 1
)551 2
;552 3
}66 	
}77 
public<< 

static<< 
void<< 
GoodG2BSink<< "
(<<" #
string<<# )
data<<* .
)<</ 0
{== 
if>> 

(>> 
data>> 
!=>> 
null>> 
)>> 
{?? 	
string@@ 
stringToEncrypt@@ "
=@@# $
$str@@% <
;@@< =
byteAA 
[AA 
]AA 
byteCipherTextAA !
=AA" #
nullAA$ (
;AA( )
usingCC 
(CC $
AesCryptoServiceProviderCC +
aesCC, /
=CC0 1
newCC2 5$
AesCryptoServiceProviderCC6 N
(CCN O
)CCO P
)CCP Q
{DD 
ICryptoTransformFF  
	encryptorFF! *
=FF+ ,
aesFF- 0
.FF0 1
CreateEncryptorFF1 @
(FF@ A
EncodingFFA I
.FFI J
UTF8FFJ N
.FFN O
GetBytesFFO W
(FFW X
dataFFX \
)FF\ ]
,FF] ^
aesFF_ b
.FFb c
IVFFc e
)FFe f
;FFf g
usingHH 
(HH 
MemoryStreamHH #
	msEncryptHH$ -
=HH. /
newHH0 3
MemoryStreamHH4 @
(HH@ A
)HHA B
)HHB C
{II 
usingJJ 
(JJ 
CryptoStreamJJ '
	csEncryptJJ( 1
=JJ2 3
newJJ4 7
CryptoStreamJJ8 D
(JJD E
	msEncryptJJE N
,JJN O
	encryptorJJP Y
,JJY Z
CryptoStreamModeJJ[ k
.JJk l
WriteJJl q
)JJq r
)JJr s
{KK 
usingLL 
(LL 
StreamWriterLL +
	swEncryptLL, 5
=LL6 7
newLL8 ;
StreamWriterLL< H
(LLH I
	csEncryptLLI R
)LLR S
)LLS T
{MM 
	swEncryptOO %
.OO% &
WriteOO& +
(OO+ ,
stringToEncryptOO, ;
)OO; <
;OO< =
}PP 
byteCipherTextQQ &
=QQ' (
	msEncryptQQ) 2
.QQ2 3
ToArrayQQ3 :
(QQ: ;
)QQ; <
;QQ< =
}RR 
}SS 
}TT 
IOUU 
.UU 
	WriteLineUU 
(UU 
IOUU 
.UU 
ToHexUU !
(UU! "
byteCipherTextUU" 0
)UU0 1
)UU1 2
;UU2 3
}VV 	
}WW 
}YY 
}ZZ 
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_52a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_52a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data   
=   
$str   !
;  ! ":
.CWE321_Hard_Coded_Cryptographic_Key__basic_52b!! 6
.!!6 7
BadSink!!7 >
(!!> ?
data!!? C
)!!D E
;!!E F
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
}(( 
private++ 
void++ 
GoodG2B++ 
(++ 
)++ 
{,, 
string-- 
data-- 
;-- 
data.. 
=.. 
$str.. 
;.. 
try00 
{11 	
data33 
=33 
Console33 
.33 
ReadLine33 #
(33# $
)33$ %
;33% &
}44 	
catch55 
(55 
IOException55 
exceptIO55 #
)55# $
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. I
,77I J
exceptIO77K S
)77S T
;77T U
}88 	:
.CWE321_Hard_Coded_Cryptographic_Key__basic_52b99 6
.996 7
GoodG2BSink997 B
(99B C
data99C G
)99H I
;99I J
}:: 
}<< 
}== É
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_52b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_52b 4
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ :
.CWE321_Hard_Coded_Cryptographic_Key__basic_52c 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public!! 

static!! 
void!! 
GoodG2BSink!! "
(!!" #
string!!# )
data!!* .
)!!/ 0
{"" :
.CWE321_Hard_Coded_Cryptographic_Key__basic_52c## 6
.##6 7
GoodG2BSink##7 B
(##B C
data##C G
)##H I
;##I J
}$$ 
}&& 
}'' §)
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_52c.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_52c 4
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
if 

( 
data 
!= 
null 
) 
{   	
string!! 
stringToEncrypt!! "
=!!# $
$str!!% <
;!!< =
byte"" 
["" 
]"" 
byteCipherText"" !
=""" #
null""$ (
;""( )
using$$ 
($$ $
AesCryptoServiceProvider$$ +
aes$$, /
=$$0 1
new$$2 5$
AesCryptoServiceProvider$$6 N
($$N O
)$$O P
)$$P Q
{%% 
ICryptoTransform''  
	encryptor''! *
=''+ ,
aes''- 0
.''0 1
CreateEncryptor''1 @
(''@ A
Encoding''A I
.''I J
UTF8''J N
.''N O
GetBytes''O W
(''W X
data''X \
)''\ ]
,''] ^
aes''_ b
.''b c
IV''c e
)''e f
;''f g
using)) 
()) 
MemoryStream)) #
	msEncrypt))$ -
=)). /
new))0 3
MemoryStream))4 @
())@ A
)))A B
)))B C
{** 
using++ 
(++ 
CryptoStream++ '
	csEncrypt++( 1
=++2 3
new++4 7
CryptoStream++8 D
(++D E
	msEncrypt++E N
,++N O
	encryptor++P Y
,++Y Z
CryptoStreamMode++[ k
.++k l
Write++l q
)++q r
)++r s
{,, 
using-- 
(-- 
StreamWriter-- +
	swEncrypt--, 5
=--6 7
new--8 ;
StreamWriter--< H
(--H I
	csEncrypt--I R
)--R S
)--S T
{.. 
	swEncrypt00 %
.00% &
Write00& +
(00+ ,
stringToEncrypt00, ;
)00; <
;00< =
}11 
byteCipherText22 &
=22' (
	msEncrypt22) 2
.222 3
ToArray223 :
(22: ;
)22; <
;22< =
}33 
}44 
}55 
IO66 
.66 
	WriteLine66 
(66 
IO66 
.66 
ToHex66 !
(66! "
byteCipherText66" 0
)660 1
)661 2
;662 3
}77 	
}88 
public== 

static== 
void== 
GoodG2BSink== "
(==" #
string==# )
data==* .
)==/ 0
{>> 
if?? 

(?? 
data?? 
!=?? 
null?? 
)?? 
{@@ 	
stringAA 
stringToEncryptAA "
=AA# $
$strAA% <
;AA< =
byteBB 
[BB 
]BB 
byteCipherTextBB !
=BB" #
nullBB$ (
;BB( )
usingDD 
(DD $
AesCryptoServiceProviderDD +
aesDD, /
=DD0 1
newDD2 5$
AesCryptoServiceProviderDD6 N
(DDN O
)DDO P
)DDP Q
{EE 
ICryptoTransformGG  
	encryptorGG! *
=GG+ ,
aesGG- 0
.GG0 1
CreateEncryptorGG1 @
(GG@ A
EncodingGGA I
.GGI J
UTF8GGJ N
.GGN O
GetBytesGGO W
(GGW X
dataGGX \
)GG\ ]
,GG] ^
aesGG_ b
.GGb c
IVGGc e
)GGe f
;GGf g
usingII 
(II 
MemoryStreamII #
	msEncryptII$ -
=II. /
newII0 3
MemoryStreamII4 @
(II@ A
)IIA B
)IIB C
{JJ 
usingKK 
(KK 
CryptoStreamKK '
	csEncryptKK( 1
=KK2 3
newKK4 7
CryptoStreamKK8 D
(KKD E
	msEncryptKKE N
,KKN O
	encryptorKKP Y
,KKY Z
CryptoStreamModeKK[ k
.KKk l
WriteKKl q
)KKq r
)KKr s
{LL 
usingMM 
(MM 
StreamWriterMM +
	swEncryptMM, 5
=MM6 7
newMM8 ;
StreamWriterMM< H
(MMH I
	csEncryptMMI R
)MMR S
)MMS T
{NN 
	swEncryptPP %
.PP% &
WritePP& +
(PP+ ,
stringToEncryptPP, ;
)PP; <
;PP< =
}QQ 
byteCipherTextRR &
=RR' (
	msEncryptRR) 2
.RR2 3
ToArrayRR3 :
(RR: ;
)RR; <
;RR< =
}SS 
}TT 
}UU 
IOVV 
.VV 
	WriteLineVV 
(VV 
IOVV 
.VV 
ToHexVV !
(VV! "
byteCipherTextVV" 0
)VV0 1
)VV1 2
;VV2 3
}WW 	
}XX 
}ZZ 
}[[ 
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_53a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_53a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data   
=   
$str   !
;  ! ":
.CWE321_Hard_Coded_Cryptographic_Key__basic_53b!! 6
.!!6 7
BadSink!!7 >
(!!> ?
data!!? C
)!!D E
;!!E F
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
}(( 
private++ 
void++ 
GoodG2B++ 
(++ 
)++ 
{,, 
string-- 
data-- 
;-- 
data.. 
=.. 
$str.. 
;.. 
try00 
{11 	
data33 
=33 
Console33 
.33 
ReadLine33 #
(33# $
)33$ %
;33% &
}44 	
catch55 
(55 
IOException55 
exceptIO55 #
)55# $
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. I
,77I J
exceptIO77K S
)77S T
;77T U
}88 	:
.CWE321_Hard_Coded_Cryptographic_Key__basic_53b99 6
.996 7
GoodG2BSink997 B
(99B C
data99C G
)99H I
;99I J
}:: 
}<< 
}== É
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_53b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_53b 4
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ :
.CWE321_Hard_Coded_Cryptographic_Key__basic_53c 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public!! 

static!! 
void!! 
GoodG2BSink!! "
(!!" #
string!!# )
data!!* .
)!!/ 0
{"" :
.CWE321_Hard_Coded_Cryptographic_Key__basic_53c## 6
.##6 7
GoodG2BSink##7 B
(##B C
data##C G
)##H I
;##I J
}$$ 
}&& 
}'' É
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_53c.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_53c 4
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ :
.CWE321_Hard_Coded_Cryptographic_Key__basic_53d 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public!! 

static!! 
void!! 
GoodG2BSink!! "
(!!" #
string!!# )
data!!* .
)!!/ 0
{"" :
.CWE321_Hard_Coded_Cryptographic_Key__basic_53d## 6
.##6 7
GoodG2BSink##7 B
(##B C
data##C G
)##H I
;##I J
}$$ 
}&& 
}'' §)
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_53d.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_53d 4
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
if 

( 
data 
!= 
null 
) 
{   	
string!! 
stringToEncrypt!! "
=!!# $
$str!!% <
;!!< =
byte"" 
["" 
]"" 
byteCipherText"" !
=""" #
null""$ (
;""( )
using$$ 
($$ $
AesCryptoServiceProvider$$ +
aes$$, /
=$$0 1
new$$2 5$
AesCryptoServiceProvider$$6 N
($$N O
)$$O P
)$$P Q
{%% 
ICryptoTransform''  
	encryptor''! *
=''+ ,
aes''- 0
.''0 1
CreateEncryptor''1 @
(''@ A
Encoding''A I
.''I J
UTF8''J N
.''N O
GetBytes''O W
(''W X
data''X \
)''\ ]
,''] ^
aes''_ b
.''b c
IV''c e
)''e f
;''f g
using)) 
()) 
MemoryStream)) #
	msEncrypt))$ -
=)). /
new))0 3
MemoryStream))4 @
())@ A
)))A B
)))B C
{** 
using++ 
(++ 
CryptoStream++ '
	csEncrypt++( 1
=++2 3
new++4 7
CryptoStream++8 D
(++D E
	msEncrypt++E N
,++N O
	encryptor++P Y
,++Y Z
CryptoStreamMode++[ k
.++k l
Write++l q
)++q r
)++r s
{,, 
using-- 
(-- 
StreamWriter-- +
	swEncrypt--, 5
=--6 7
new--8 ;
StreamWriter--< H
(--H I
	csEncrypt--I R
)--R S
)--S T
{.. 
	swEncrypt00 %
.00% &
Write00& +
(00+ ,
stringToEncrypt00, ;
)00; <
;00< =
}11 
byteCipherText22 &
=22' (
	msEncrypt22) 2
.222 3
ToArray223 :
(22: ;
)22; <
;22< =
}33 
}44 
}55 
IO66 
.66 
	WriteLine66 
(66 
IO66 
.66 
ToHex66 !
(66! "
byteCipherText66" 0
)660 1
)661 2
;662 3
}77 	
}88 
public== 

static== 
void== 
GoodG2BSink== "
(==" #
string==# )
data==* .
)==/ 0
{>> 
if?? 

(?? 
data?? 
!=?? 
null?? 
)?? 
{@@ 	
stringAA 
stringToEncryptAA "
=AA# $
$strAA% <
;AA< =
byteBB 
[BB 
]BB 
byteCipherTextBB !
=BB" #
nullBB$ (
;BB( )
usingDD 
(DD $
AesCryptoServiceProviderDD +
aesDD, /
=DD0 1
newDD2 5$
AesCryptoServiceProviderDD6 N
(DDN O
)DDO P
)DDP Q
{EE 
ICryptoTransformGG  
	encryptorGG! *
=GG+ ,
aesGG- 0
.GG0 1
CreateEncryptorGG1 @
(GG@ A
EncodingGGA I
.GGI J
UTF8GGJ N
.GGN O
GetBytesGGO W
(GGW X
dataGGX \
)GG\ ]
,GG] ^
aesGG_ b
.GGb c
IVGGc e
)GGe f
;GGf g
usingII 
(II 
MemoryStreamII #
	msEncryptII$ -
=II. /
newII0 3
MemoryStreamII4 @
(II@ A
)IIA B
)IIB C
{JJ 
usingKK 
(KK 
CryptoStreamKK '
	csEncryptKK( 1
=KK2 3
newKK4 7
CryptoStreamKK8 D
(KKD E
	msEncryptKKE N
,KKN O
	encryptorKKP Y
,KKY Z
CryptoStreamModeKK[ k
.KKk l
WriteKKl q
)KKq r
)KKr s
{LL 
usingMM 
(MM 
StreamWriterMM +
	swEncryptMM, 5
=MM6 7
newMM8 ;
StreamWriterMM< H
(MMH I
	csEncryptMMI R
)MMR S
)MMS T
{NN 
	swEncryptPP %
.PP% &
WritePP& +
(PP+ ,
stringToEncryptPP, ;
)PP; <
;PP< =
}QQ 
byteCipherTextRR &
=RR' (
	msEncryptRR) 2
.RR2 3
ToArrayRR3 :
(RR: ;
)RR; <
;RR< =
}SS 
}TT 
}UU 
IOVV 
.VV 
	WriteLineVV 
(VV 
IOVV 
.VV 
ToHexVV !
(VV! "
byteCipherTextVV" 0
)VV0 1
)VV1 2
;VV2 3
}WW 	
}XX 
}ZZ 
}[[ 
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_54a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_54a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data   
=   
$str   !
;  ! ":
.CWE321_Hard_Coded_Cryptographic_Key__basic_54b!! 6
.!!6 7
BadSink!!7 >
(!!> ?
data!!? C
)!!D E
;!!E F
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
}(( 
private++ 
void++ 
GoodG2B++ 
(++ 
)++ 
{,, 
string-- 
data-- 
;-- 
data.. 
=.. 
$str.. 
;.. 
try00 
{11 	
data33 
=33 
Console33 
.33 
ReadLine33 #
(33# $
)33$ %
;33% &
}44 	
catch55 
(55 
IOException55 
exceptIO55 #
)55# $
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. I
,77I J
exceptIO77K S
)77S T
;77T U
}88 	:
.CWE321_Hard_Coded_Cryptographic_Key__basic_54b99 6
.996 7
GoodG2BSink997 B
(99B C
data99C G
)99H I
;99I J
}:: 
}<< 
}== É
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_54b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_54b 4
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ :
.CWE321_Hard_Coded_Cryptographic_Key__basic_54c 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public!! 

static!! 
void!! 
GoodG2BSink!! "
(!!" #
string!!# )
data!!* .
)!!/ 0
{"" :
.CWE321_Hard_Coded_Cryptographic_Key__basic_54c## 6
.##6 7
GoodG2BSink##7 B
(##B C
data##C G
)##H I
;##I J
}$$ 
}&& 
}'' É
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_54c.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_54c 4
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ :
.CWE321_Hard_Coded_Cryptographic_Key__basic_54d 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public!! 

static!! 
void!! 
GoodG2BSink!! "
(!!" #
string!!# )
data!!* .
)!!/ 0
{"" :
.CWE321_Hard_Coded_Cryptographic_Key__basic_54d## 6
.##6 7
GoodG2BSink##7 B
(##B C
data##C G
)##H I
;##I J
}$$ 
}&& 
}'' É
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_54d.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_54d 4
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ :
.CWE321_Hard_Coded_Cryptographic_Key__basic_54e 6
.6 7
BadSink7 >
(> ?
data? C
)D E
;E F
} 
public!! 

static!! 
void!! 
GoodG2BSink!! "
(!!" #
string!!# )
data!!* .
)!!/ 0
{"" :
.CWE321_Hard_Coded_Cryptographic_Key__basic_54e## 6
.##6 7
GoodG2BSink##7 B
(##B C
data##C G
)##H I
;##I J
}$$ 
}&& 
}'' §)
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_54e.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_54e 4
{ 
public 

static 
void 
BadSink 
( 
string %
data& *
)+ ,
{ 
if 

( 
data 
!= 
null 
) 
{   	
string!! 
stringToEncrypt!! "
=!!# $
$str!!% <
;!!< =
byte"" 
["" 
]"" 
byteCipherText"" !
=""" #
null""$ (
;""( )
using$$ 
($$ $
AesCryptoServiceProvider$$ +
aes$$, /
=$$0 1
new$$2 5$
AesCryptoServiceProvider$$6 N
($$N O
)$$O P
)$$P Q
{%% 
ICryptoTransform''  
	encryptor''! *
=''+ ,
aes''- 0
.''0 1
CreateEncryptor''1 @
(''@ A
Encoding''A I
.''I J
UTF8''J N
.''N O
GetBytes''O W
(''W X
data''X \
)''\ ]
,''] ^
aes''_ b
.''b c
IV''c e
)''e f
;''f g
using)) 
()) 
MemoryStream)) #
	msEncrypt))$ -
=)). /
new))0 3
MemoryStream))4 @
())@ A
)))A B
)))B C
{** 
using++ 
(++ 
CryptoStream++ '
	csEncrypt++( 1
=++2 3
new++4 7
CryptoStream++8 D
(++D E
	msEncrypt++E N
,++N O
	encryptor++P Y
,++Y Z
CryptoStreamMode++[ k
.++k l
Write++l q
)++q r
)++r s
{,, 
using-- 
(-- 
StreamWriter-- +
	swEncrypt--, 5
=--6 7
new--8 ;
StreamWriter--< H
(--H I
	csEncrypt--I R
)--R S
)--S T
{.. 
	swEncrypt00 %
.00% &
Write00& +
(00+ ,
stringToEncrypt00, ;
)00; <
;00< =
}11 
byteCipherText22 &
=22' (
	msEncrypt22) 2
.222 3
ToArray223 :
(22: ;
)22; <
;22< =
}33 
}44 
}55 
IO66 
.66 
	WriteLine66 
(66 
IO66 
.66 
ToHex66 !
(66! "
byteCipherText66" 0
)660 1
)661 2
;662 3
}77 	
}88 
public== 

static== 
void== 
GoodG2BSink== "
(==" #
string==# )
data==* .
)==/ 0
{>> 
if?? 

(?? 
data?? 
!=?? 
null?? 
)?? 
{@@ 	
stringAA 
stringToEncryptAA "
=AA# $
$strAA% <
;AA< =
byteBB 
[BB 
]BB 
byteCipherTextBB !
=BB" #
nullBB$ (
;BB( )
usingDD 
(DD $
AesCryptoServiceProviderDD +
aesDD, /
=DD0 1
newDD2 5$
AesCryptoServiceProviderDD6 N
(DDN O
)DDO P
)DDP Q
{EE 
ICryptoTransformGG  
	encryptorGG! *
=GG+ ,
aesGG- 0
.GG0 1
CreateEncryptorGG1 @
(GG@ A
EncodingGGA I
.GGI J
UTF8GGJ N
.GGN O
GetBytesGGO W
(GGW X
dataGGX \
)GG\ ]
,GG] ^
aesGG_ b
.GGb c
IVGGc e
)GGe f
;GGf g
usingII 
(II 
MemoryStreamII #
	msEncryptII$ -
=II. /
newII0 3
MemoryStreamII4 @
(II@ A
)IIA B
)IIB C
{JJ 
usingKK 
(KK 
CryptoStreamKK '
	csEncryptKK( 1
=KK2 3
newKK4 7
CryptoStreamKK8 D
(KKD E
	msEncryptKKE N
,KKN O
	encryptorKKP Y
,KKY Z
CryptoStreamModeKK[ k
.KKk l
WriteKKl q
)KKq r
)KKr s
{LL 
usingMM 
(MM 
StreamWriterMM +
	swEncryptMM, 5
=MM6 7
newMM8 ;
StreamWriterMM< H
(MMH I
	csEncryptMMI R
)MMR S
)MMS T
{NN 
	swEncryptPP %
.PP% &
WritePP& +
(PP+ ,
stringToEncryptPP, ;
)PP; <
;PP< =
}QQ 
byteCipherTextRR &
=RR' (
	msEncryptRR) 2
.RR2 3
ToArrayRR3 :
(RR: ;
)RR; <
;RR< =
}SS 
}TT 
}UU 
IOVV 
.VV 
	WriteLineVV 
(VV 
IOVV 
.VV 
ToHexVV !
(VV! "
byteCipherTextVV" 0
)VV0 1
)VV1 2
;VV2 3
}WW 	
}XX 
}ZZ 
}[[ Û-
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_61a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_61a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
= :
.CWE321_Hard_Coded_Cryptographic_Key__basic_61b D
.D E
	BadSourceE N
(N O
)O P
;P Q
if   

(   
data   
!=   
null   
)   
{!! 	
string"" 
stringToEncrypt"" "
=""# $
$str""% <
;""< =
byte## 
[## 
]## 
byteCipherText## !
=##" #
null##$ (
;##( )
using%% 
(%% $
AesCryptoServiceProvider%% +
aes%%, /
=%%0 1
new%%2 5$
AesCryptoServiceProvider%%6 N
(%%N O
)%%O P
)%%P Q
{&& 
ICryptoTransform((  
	encryptor((! *
=((+ ,
aes((- 0
.((0 1
CreateEncryptor((1 @
(((@ A
Encoding((A I
.((I J
UTF8((J N
.((N O
GetBytes((O W
(((W X
data((X \
)((\ ]
,((] ^
aes((_ b
.((b c
IV((c e
)((e f
;((f g
using** 
(** 
MemoryStream** #
	msEncrypt**$ -
=**. /
new**0 3
MemoryStream**4 @
(**@ A
)**A B
)**B C
{++ 
using,, 
(,, 
CryptoStream,, '
	csEncrypt,,( 1
=,,2 3
new,,4 7
CryptoStream,,8 D
(,,D E
	msEncrypt,,E N
,,,N O
	encryptor,,P Y
,,,Y Z
CryptoStreamMode,,[ k
.,,k l
Write,,l q
),,q r
),,r s
{-- 
using.. 
(.. 
StreamWriter.. +
	swEncrypt.., 5
=..6 7
new..8 ;
StreamWriter..< H
(..H I
	csEncrypt..I R
)..R S
)..S T
{// 
	swEncrypt11 %
.11% &
Write11& +
(11+ ,
stringToEncrypt11, ;
)11; <
;11< =
}22 
byteCipherText33 &
=33' (
	msEncrypt33) 2
.332 3
ToArray333 :
(33: ;
)33; <
;33< =
}44 
}55 
}66 
IO77 
.77 
	WriteLine77 
(77 
IO77 
.77 
ToHex77 !
(77! "
byteCipherText77" 0
)770 1
)771 2
;772 3
}88 	
}99 
public<< 

override<< 
void<< 
Good<< 
(<< 
)<< 
{== 
GoodG2B>> 
(>> 
)>> 
;>> 
}?? 
privateBB 
staticBB 
voidBB 
GoodG2BBB 
(BB  
)BB  !
{CC 
stringDD 
dataDD 
=DD :
.CWE321_Hard_Coded_Cryptographic_Key__basic_61bDD D
.DDD E
GoodG2BSourceDDE R
(DDR S
)DDS T
;DDT U
ifEE 

(EE 
dataEE 
!=EE 
nullEE 
)EE 
{FF 	
stringGG 
stringToEncryptGG "
=GG# $
$strGG% <
;GG< =
byteHH 
[HH 
]HH 
byteCipherTextHH !
=HH" #
nullHH$ (
;HH( )
usingJJ 
(JJ $
AesCryptoServiceProviderJJ +
aesJJ, /
=JJ0 1
newJJ2 5$
AesCryptoServiceProviderJJ6 N
(JJN O
)JJO P
)JJP Q
{KK 
ICryptoTransformMM  
	encryptorMM! *
=MM+ ,
aesMM- 0
.MM0 1
CreateEncryptorMM1 @
(MM@ A
EncodingMMA I
.MMI J
UTF8MMJ N
.MMN O
GetBytesMMO W
(MMW X
dataMMX \
)MM\ ]
,MM] ^
aesMM_ b
.MMb c
IVMMc e
)MMe f
;MMf g
usingOO 
(OO 
MemoryStreamOO #
	msEncryptOO$ -
=OO. /
newOO0 3
MemoryStreamOO4 @
(OO@ A
)OOA B
)OOB C
{PP 
usingQQ 
(QQ 
CryptoStreamQQ '
	csEncryptQQ( 1
=QQ2 3
newQQ4 7
CryptoStreamQQ8 D
(QQD E
	msEncryptQQE N
,QQN O
	encryptorQQP Y
,QQY Z
CryptoStreamModeQQ[ k
.QQk l
WriteQQl q
)QQq r
)QQr s
{RR 
usingSS 
(SS 
StreamWriterSS +
	swEncryptSS, 5
=SS6 7
newSS8 ;
StreamWriterSS< H
(SSH I
	csEncryptSSI R
)SSR S
)SSS T
{TT 
	swEncryptVV %
.VV% &
WriteVV& +
(VV+ ,
stringToEncryptVV, ;
)VV; <
;VV< =
}WW 
byteCipherTextXX &
=XX' (
	msEncryptXX) 2
.XX2 3
ToArrayXX3 :
(XX: ;
)XX; <
;XX< =
}YY 
}ZZ 
}[[ 
IO\\ 
.\\ 
	WriteLine\\ 
(\\ 
IO\\ 
.\\ 
ToHex\\ !
(\\! "
byteCipherText\\" 0
)\\0 1
)\\1 2
;\\2 3
}]] 	
}^^ 
}`` 
}aa î
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_61b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_61b 4
{ 
public 

static 
string 
	BadSource "
(" #
)# $
{ 
string 
data 
; 
data   
=   
$str   !
;  ! "
return!! 
data!! 
;!! 
}"" 
public'' 

static'' 
string'' 
GoodG2BSource'' &
(''& '
)''' (
{(( 
string)) 
data)) 
;)) 
data** 
=** 
$str** 
;** 
try,, 
{-- 	
data// 
=// 
Console// 
.// 
ReadLine// #
(//# $
)//$ %
;//% &
}00 	
catch11 
(11 
IOException11 
exceptIO11 #
)11# $
{22 	
IO33 
.33 
Logger33 
.33 
Log33 
(33 
NLog33 
.33 
LogLevel33 '
.33' (
Warn33( ,
,33, -
$str33. I
,33I J
exceptIO33K S
)33S T
;33T U
}44 	
return55 
data55 
;55 
}66 
}88 
}99 ¢
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_66a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_66a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data   
=   
$str   !
;  ! "
string!! 
[!! 
]!! 
	dataArray!! 
=!! 
new!!  
string!!! '
[!!' (
$num!!( )
]!!) *
;!!* +
	dataArray"" 
["" 
$num"" 
]"" 
="" 
data"" 
;"" :
.CWE321_Hard_Coded_Cryptographic_Key__basic_66b## 6
.##6 7
BadSink##7 >
(##> ?
	dataArray##? H
)##J K
;##K L
}$$ 
public'' 

override'' 
void'' 
Good'' 
('' 
)'' 
{(( 
GoodG2B)) 
()) 
))) 
;)) 
}** 
private-- 
static-- 
void-- 
GoodG2B-- 
(--  
)--  !
{.. 
string// 
data// 
;// 
data00 
=00 
$str00 
;00 
try22 
{33 	
data55 
=55 
Console55 
.55 
ReadLine55 #
(55# $
)55$ %
;55% &
}66 	
catch77 
(77 
IOException77 
exceptIO77 #
)77# $
{88 	
IO99 
.99 
Logger99 
.99 
Log99 
(99 
NLog99 
.99 
LogLevel99 '
.99' (
Warn99( ,
,99, -
$str99. I
,99I J
exceptIO99K S
)99S T
;99T U
}:: 	
string;; 
[;; 
];; 
	dataArray;; 
=;; 
new;;  
string;;! '
[;;' (
$num;;( )
];;) *
;;;* +
	dataArray<< 
[<< 
$num<< 
]<< 
=<< 
data<< 
;<< :
.CWE321_Hard_Coded_Cryptographic_Key__basic_66b== 6
.==6 7
GoodG2BSink==7 B
(==B C
	dataArray==C L
)==N O
;==O P
}>> 
}@@ 
}AA ,
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_66b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_66b 4
{ 
public 

static 
void 
BadSink 
( 
string %
[% &
]& '
	dataArray( 1
)2 3
{ 
string 
data 
= 
	dataArray 
[  
$num  !
]! "
;" #
if   

(   
data   
!=   
null   
)   
{!! 	
string"" 
stringToEncrypt"" "
=""# $
$str""% <
;""< =
byte## 
[## 
]## 
byteCipherText## !
=##" #
null##$ (
;##( )
using%% 
(%% $
AesCryptoServiceProvider%% +
aes%%, /
=%%0 1
new%%2 5$
AesCryptoServiceProvider%%6 N
(%%N O
)%%O P
)%%P Q
{&& 
ICryptoTransform((  
	encryptor((! *
=((+ ,
aes((- 0
.((0 1
CreateEncryptor((1 @
(((@ A
Encoding((A I
.((I J
UTF8((J N
.((N O
GetBytes((O W
(((W X
data((X \
)((\ ]
,((] ^
aes((_ b
.((b c
IV((c e
)((e f
;((f g
using** 
(** 
MemoryStream** #
	msEncrypt**$ -
=**. /
new**0 3
MemoryStream**4 @
(**@ A
)**A B
)**B C
{++ 
using,, 
(,, 
CryptoStream,, '
	csEncrypt,,( 1
=,,2 3
new,,4 7
CryptoStream,,8 D
(,,D E
	msEncrypt,,E N
,,,N O
	encryptor,,P Y
,,,Y Z
CryptoStreamMode,,[ k
.,,k l
Write,,l q
),,q r
),,r s
{-- 
using.. 
(.. 
StreamWriter.. +
	swEncrypt.., 5
=..6 7
new..8 ;
StreamWriter..< H
(..H I
	csEncrypt..I R
)..R S
)..S T
{// 
	swEncrypt11 %
.11% &
Write11& +
(11+ ,
stringToEncrypt11, ;
)11; <
;11< =
}22 
byteCipherText33 &
=33' (
	msEncrypt33) 2
.332 3
ToArray333 :
(33: ;
)33; <
;33< =
}44 
}55 
}66 
IO77 
.77 
	WriteLine77 
(77 
IO77 
.77 
ToHex77 !
(77! "
byteCipherText77" 0
)770 1
)771 2
;772 3
}88 	
}99 
public>> 

static>> 
void>> 
GoodG2BSink>> "
(>>" #
string>># )
[>>) *
]>>* +
	dataArray>>, 5
)>>6 7
{?? 
string@@ 
data@@ 
=@@ 
	dataArray@@ 
[@@  
$num@@  !
]@@! "
;@@" #
ifAA 

(AA 
dataAA 
!=AA 
nullAA 
)AA 
{BB 	
stringCC 
stringToEncryptCC "
=CC# $
$strCC% <
;CC< =
byteDD 
[DD 
]DD 
byteCipherTextDD !
=DD" #
nullDD$ (
;DD( )
usingFF 
(FF $
AesCryptoServiceProviderFF +
aesFF, /
=FF0 1
newFF2 5$
AesCryptoServiceProviderFF6 N
(FFN O
)FFO P
)FFP Q
{GG 
ICryptoTransformII  
	encryptorII! *
=II+ ,
aesII- 0
.II0 1
CreateEncryptorII1 @
(II@ A
EncodingIIA I
.III J
UTF8IIJ N
.IIN O
GetBytesIIO W
(IIW X
dataIIX \
)II\ ]
,II] ^
aesII_ b
.IIb c
IVIIc e
)IIe f
;IIf g
usingKK 
(KK 
MemoryStreamKK #
	msEncryptKK$ -
=KK. /
newKK0 3
MemoryStreamKK4 @
(KK@ A
)KKA B
)KKB C
{LL 
usingMM 
(MM 
CryptoStreamMM '
	csEncryptMM( 1
=MM2 3
newMM4 7
CryptoStreamMM8 D
(MMD E
	msEncryptMME N
,MMN O
	encryptorMMP Y
,MMY Z
CryptoStreamModeMM[ k
.MMk l
WriteMMl q
)MMq r
)MMr s
{NN 
usingOO 
(OO 
StreamWriterOO +
	swEncryptOO, 5
=OO6 7
newOO8 ;
StreamWriterOO< H
(OOH I
	csEncryptOOI R
)OOR S
)OOS T
{PP 
	swEncryptRR %
.RR% &
WriteRR& +
(RR+ ,
stringToEncryptRR, ;
)RR; <
;RR< =
}SS 
byteCipherTextTT &
=TT' (
	msEncryptTT) 2
.TT2 3
ToArrayTT3 :
(TT: ;
)TT; <
;TT< =
}UU 
}VV 
}WW 
IOXX 
.XX 
	WriteLineXX 
(XX 
IOXX 
.XX 
ToHexXX !
(XX! "
byteCipherTextXX" 0
)XX0 1
)XX1 2
;XX2 3
}YY 	
}ZZ 
}\\ 
}]] 
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_67a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_67a 4
:5 6
AbstractTestCase7 G
{ 
public 

class 
	Container 
{ 
public 
string 
containerOne "
;" #
} 
public!! 

override!! 
void!! 
Bad!! 
(!! 
)!! 
{"" 
string## 
data## 
;## 
data%% 
=%% 
$str%% !
;%%! "
	Container&& 
dataContainer&& 
=&&  !
new&&" %
	Container&&& /
(&&/ 0
)&&0 1
;&&1 2
dataContainer'' 
.'' 
containerOne'' "
=''# $
data''% )
;'') *:
.CWE321_Hard_Coded_Cryptographic_Key__basic_67b(( 6
.((6 7
BadSink((7 >
(((> ?
dataContainer((? L
)((N O
;((O P
})) 
public,, 

override,, 
void,, 
Good,, 
(,, 
),, 
{-- 
GoodG2B.. 
(.. 
).. 
;.. 
}// 
private22 
static22 
void22 
GoodG2B22 
(22  
)22  !
{33 
string44 
data44 
;44 
data55 
=55 
$str55 
;55 
try77 
{88 	
data:: 
=:: 
Console:: 
.:: 
ReadLine:: #
(::# $
)::$ %
;::% &
};; 	
catch<< 
(<< 
IOException<< 
exceptIO<< #
)<<# $
{== 	
IO>> 
.>> 
Logger>> 
.>> 
Log>> 
(>> 
NLog>> 
.>> 
LogLevel>> '
.>>' (
Warn>>( ,
,>>, -
$str>>. I
,>>I J
exceptIO>>K S
)>>S T
;>>T U
}?? 	
	Container@@ 
dataContainer@@ 
=@@  !
new@@" %
	Container@@& /
(@@/ 0
)@@0 1
;@@1 2
dataContainerAA 
.AA 
containerOneAA "
=AA# $
dataAA% )
;AA) *:
.CWE321_Hard_Coded_Cryptographic_Key__basic_67bBB 6
.BB6 7
GoodG2BSinkBB7 B
(BBB C
dataContainerBBC P
)BBR S
;BBS T
}CC 
}EE 
}FF å,
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_67b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_67b 4
{ 
public 

static 
void 
BadSink 
( :
.CWE321_Hard_Coded_Cryptographic_Key__basic_67a M
.M N
	ContainerN W
dataContainerX e
)f g
{ 
string 
data 
= 
dataContainer #
.# $
containerOne$ 0
;0 1
if   

(   
data   
!=   
null   
)   
{!! 	
string"" 
stringToEncrypt"" "
=""# $
$str""% <
;""< =
byte## 
[## 
]## 
byteCipherText## !
=##" #
null##$ (
;##( )
using%% 
(%% $
AesCryptoServiceProvider%% +
aes%%, /
=%%0 1
new%%2 5$
AesCryptoServiceProvider%%6 N
(%%N O
)%%O P
)%%P Q
{&& 
ICryptoTransform((  
	encryptor((! *
=((+ ,
aes((- 0
.((0 1
CreateEncryptor((1 @
(((@ A
Encoding((A I
.((I J
UTF8((J N
.((N O
GetBytes((O W
(((W X
data((X \
)((\ ]
,((] ^
aes((_ b
.((b c
IV((c e
)((e f
;((f g
using** 
(** 
MemoryStream** #
	msEncrypt**$ -
=**. /
new**0 3
MemoryStream**4 @
(**@ A
)**A B
)**B C
{++ 
using,, 
(,, 
CryptoStream,, '
	csEncrypt,,( 1
=,,2 3
new,,4 7
CryptoStream,,8 D
(,,D E
	msEncrypt,,E N
,,,N O
	encryptor,,P Y
,,,Y Z
CryptoStreamMode,,[ k
.,,k l
Write,,l q
),,q r
),,r s
{-- 
using.. 
(.. 
StreamWriter.. +
	swEncrypt.., 5
=..6 7
new..8 ;
StreamWriter..< H
(..H I
	csEncrypt..I R
)..R S
)..S T
{// 
	swEncrypt11 %
.11% &
Write11& +
(11+ ,
stringToEncrypt11, ;
)11; <
;11< =
}22 
byteCipherText33 &
=33' (
	msEncrypt33) 2
.332 3
ToArray333 :
(33: ;
)33; <
;33< =
}44 
}55 
}66 
IO77 
.77 
	WriteLine77 
(77 
IO77 
.77 
ToHex77 !
(77! "
byteCipherText77" 0
)770 1
)771 2
;772 3
}88 	
}99 
public>> 

static>> 
void>> 
GoodG2BSink>> "
(>>" #:
.CWE321_Hard_Coded_Cryptographic_Key__basic_67a>># Q
.>>Q R
	Container>>R [
dataContainer>>\ i
)>>j k
{?? 
string@@ 
data@@ 
=@@ 
dataContainer@@ #
.@@# $
containerOne@@$ 0
;@@0 1
ifAA 

(AA 
dataAA 
!=AA 
nullAA 
)AA 
{BB 	
stringCC 
stringToEncryptCC "
=CC# $
$strCC% <
;CC< =
byteDD 
[DD 
]DD 
byteCipherTextDD !
=DD" #
nullDD$ (
;DD( )
usingFF 
(FF $
AesCryptoServiceProviderFF +
aesFF, /
=FF0 1
newFF2 5$
AesCryptoServiceProviderFF6 N
(FFN O
)FFO P
)FFP Q
{GG 
ICryptoTransformII  
	encryptorII! *
=II+ ,
aesII- 0
.II0 1
CreateEncryptorII1 @
(II@ A
EncodingIIA I
.III J
UTF8IIJ N
.IIN O
GetBytesIIO W
(IIW X
dataIIX \
)II\ ]
,II] ^
aesII_ b
.IIb c
IVIIc e
)IIe f
;IIf g
usingKK 
(KK 
MemoryStreamKK #
	msEncryptKK$ -
=KK. /
newKK0 3
MemoryStreamKK4 @
(KK@ A
)KKA B
)KKB C
{LL 
usingMM 
(MM 
CryptoStreamMM '
	csEncryptMM( 1
=MM2 3
newMM4 7
CryptoStreamMM8 D
(MMD E
	msEncryptMME N
,MMN O
	encryptorMMP Y
,MMY Z
CryptoStreamModeMM[ k
.MMk l
WriteMMl q
)MMq r
)MMr s
{NN 
usingOO 
(OO 
StreamWriterOO +
	swEncryptOO, 5
=OO6 7
newOO8 ;
StreamWriterOO< H
(OOH I
	csEncryptOOI R
)OOR S
)OOS T
{PP 
	swEncryptRR %
.RR% &
WriteRR& +
(RR+ ,
stringToEncryptRR, ;
)RR; <
;RR< =
}SS 
byteCipherTextTT &
=TT' (
	msEncryptTT) 2
.TT2 3
ToArrayTT3 :
(TT: ;
)TT; <
;TT< =
}UU 
}VV 
}WW 
IOXX 
.XX 
	WriteLineXX 
(XX 
IOXX 
.XX 
ToHexXX !
(XX! "
byteCipherTextXX" 0
)XX0 1
)XX1 2
;XX2 3
}YY 	
}ZZ 
}\\ 
}]] 
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_68a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_68a 4
:5 6
AbstractTestCase7 G
{ 
public 

static 
string 
data 
; 
public 

override 
void 
Bad 
( 
) 
{ 
data   
=   
$str   !
;  ! ":
.CWE321_Hard_Coded_Cryptographic_Key__basic_68b!! 6
.!!6 7
BadSink!!7 >
(!!> ?
)!!? @
;!!@ A
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
}(( 
private++ 
static++ 
void++ 
GoodG2B++ 
(++  
)++  !
{,, 
data-- 
=-- 
$str-- 
;-- 
try// 
{00 	
data22 
=22 
Console22 
.22 
ReadLine22 #
(22# $
)22$ %
;22% &
}33 	
catch44 
(44 
IOException44 
exceptIO44 #
)44# $
{55 	
IO66 
.66 
Logger66 
.66 
Log66 
(66 
NLog66 
.66 
LogLevel66 '
.66' (
Warn66( ,
,66, -
$str66. I
,66I J
exceptIO66K S
)66S T
;66T U
}77 	:
.CWE321_Hard_Coded_Cryptographic_Key__basic_68b88 6
.886 7
GoodG2BSink887 B
(88B C
)88C D
;88D E
}99 
};; 
}<< +
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_68b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_68b 4
{ 
public 

static 
void 
BadSink 
( 
)  
{ 
string 
data 
= :
.CWE321_Hard_Coded_Cryptographic_Key__basic_68a D
.D E
dataE I
;I J
if 

( 
data 
!= 
null 
) 
{   	
string!! 
stringToEncrypt!! "
=!!# $
$str!!% <
;!!< =
byte"" 
["" 
]"" 
byteCipherText"" !
=""" #
null""$ (
;""( )
using$$ 
($$ $
AesCryptoServiceProvider$$ +
aes$$, /
=$$0 1
new$$2 5$
AesCryptoServiceProvider$$6 N
($$N O
)$$O P
)$$P Q
{%% 
ICryptoTransform''  
	encryptor''! *
=''+ ,
aes''- 0
.''0 1
CreateEncryptor''1 @
(''@ A
Encoding''A I
.''I J
UTF8''J N
.''N O
GetBytes''O W
(''W X
data''X \
)''\ ]
,''] ^
aes''_ b
.''b c
IV''c e
)''e f
;''f g
using)) 
()) 
MemoryStream)) #
	msEncrypt))$ -
=)). /
new))0 3
MemoryStream))4 @
())@ A
)))A B
)))B C
{** 
using++ 
(++ 
CryptoStream++ '
	csEncrypt++( 1
=++2 3
new++4 7
CryptoStream++8 D
(++D E
	msEncrypt++E N
,++N O
	encryptor++P Y
,++Y Z
CryptoStreamMode++[ k
.++k l
Write++l q
)++q r
)++r s
{,, 
using-- 
(-- 
StreamWriter-- +
	swEncrypt--, 5
=--6 7
new--8 ;
StreamWriter--< H
(--H I
	csEncrypt--I R
)--R S
)--S T
{.. 
	swEncrypt00 %
.00% &
Write00& +
(00+ ,
stringToEncrypt00, ;
)00; <
;00< =
}11 
byteCipherText22 &
=22' (
	msEncrypt22) 2
.222 3
ToArray223 :
(22: ;
)22; <
;22< =
}33 
}44 
}55 
IO66 
.66 
	WriteLine66 
(66 
IO66 
.66 
ToHex66 !
(66! "
byteCipherText66" 0
)660 1
)661 2
;662 3
}77 	
}88 
public== 

static== 
void== 
GoodG2BSink== "
(==" #
)==# $
{>> 
string?? 
data?? 
=?? :
.CWE321_Hard_Coded_Cryptographic_Key__basic_68a?? D
.??D E
data??E I
;??I J
if@@ 

(@@ 
data@@ 
!=@@ 
null@@ 
)@@ 
{AA 	
stringBB 
stringToEncryptBB "
=BB# $
$strBB% <
;BB< =
byteCC 
[CC 
]CC 
byteCipherTextCC !
=CC" #
nullCC$ (
;CC( )
usingEE 
(EE $
AesCryptoServiceProviderEE +
aesEE, /
=EE0 1
newEE2 5$
AesCryptoServiceProviderEE6 N
(EEN O
)EEO P
)EEP Q
{FF 
ICryptoTransformHH  
	encryptorHH! *
=HH+ ,
aesHH- 0
.HH0 1
CreateEncryptorHH1 @
(HH@ A
EncodingHHA I
.HHI J
UTF8HHJ N
.HHN O
GetBytesHHO W
(HHW X
dataHHX \
)HH\ ]
,HH] ^
aesHH_ b
.HHb c
IVHHc e
)HHe f
;HHf g
usingJJ 
(JJ 
MemoryStreamJJ #
	msEncryptJJ$ -
=JJ. /
newJJ0 3
MemoryStreamJJ4 @
(JJ@ A
)JJA B
)JJB C
{KK 
usingLL 
(LL 
CryptoStreamLL '
	csEncryptLL( 1
=LL2 3
newLL4 7
CryptoStreamLL8 D
(LLD E
	msEncryptLLE N
,LLN O
	encryptorLLP Y
,LLY Z
CryptoStreamModeLL[ k
.LLk l
WriteLLl q
)LLq r
)LLr s
{MM 
usingNN 
(NN 
StreamWriterNN +
	swEncryptNN, 5
=NN6 7
newNN8 ;
StreamWriterNN< H
(NNH I
	csEncryptNNI R
)NNR S
)NNS T
{OO 
	swEncryptQQ %
.QQ% &
WriteQQ& +
(QQ+ ,
stringToEncryptQQ, ;
)QQ; <
;QQ< =
}RR 
byteCipherTextSS &
=SS' (
	msEncryptSS) 2
.SS2 3
ToArraySS3 :
(SS: ;
)SS; <
;SS< =
}TT 
}UU 
}VV 
IOWW 
.WW 
	WriteLineWW 
(WW 
IOWW 
.WW 
ToHexWW !
(WW! "
byteCipherTextWW" 0
)WW0 1
)WW1 2
;WW2 3
}XX 	
}YY 
}[[ 
}\\ 
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_71a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_71a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data   
=   
$str   !
;  ! ":
.CWE321_Hard_Coded_Cryptographic_Key__basic_71b!! 6
.!!6 7
BadSink!!7 >
(!!> ?
(!!? @
Object!!@ F
)!!F G
data!!G K
)!!M N
;!!N O
}"" 
public%% 

override%% 
void%% 
Good%% 
(%% 
)%% 
{&& 
GoodG2B'' 
('' 
)'' 
;'' 
}(( 
private++ 
static++ 
void++ 
GoodG2B++ 
(++  
)++  !
{,, 
string-- 
data-- 
;-- 
data.. 
=.. 
$str.. 
;.. 
try00 
{11 	
data33 
=33 
Console33 
.33 
ReadLine33 #
(33# $
)33$ %
;33% &
}44 	
catch55 
(55 
IOException55 
exceptIO55 #
)55# $
{66 	
IO77 
.77 
Logger77 
.77 
Log77 
(77 
NLog77 
.77 
LogLevel77 '
.77' (
Warn77( ,
,77, -
$str77. I
,77I J
exceptIO77K S
)77S T
;77T U
}88 	:
.CWE321_Hard_Coded_Cryptographic_Key__basic_71b99 6
.996 7
GoodG2BSink997 B
(99B C
(99C D
Object99D J
)99J K
data99K O
)99Q R
;99R S
}:: 
}<< 
}== Ï+
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_71b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_71b 4
{ 
public 

static 
void 
BadSink 
( 
Object %

dataObject& 0
)1 2
{ 
string   
data   
=   
(   
string   
)   

dataObject   (
;  ( )
if!! 

(!! 
data!! 
!=!! 
null!! 
)!! 
{"" 	
string## 
stringToEncrypt## "
=### $
$str##% <
;##< =
byte$$ 
[$$ 
]$$ 
byteCipherText$$ !
=$$" #
null$$$ (
;$$( )
using&& 
(&& $
AesCryptoServiceProvider&& +
aes&&, /
=&&0 1
new&&2 5$
AesCryptoServiceProvider&&6 N
(&&N O
)&&O P
)&&P Q
{'' 
ICryptoTransform))  
	encryptor))! *
=))+ ,
aes))- 0
.))0 1
CreateEncryptor))1 @
())@ A
Encoding))A I
.))I J
UTF8))J N
.))N O
GetBytes))O W
())W X
data))X \
)))\ ]
,))] ^
aes))_ b
.))b c
IV))c e
)))e f
;))f g
using++ 
(++ 
MemoryStream++ #
	msEncrypt++$ -
=++. /
new++0 3
MemoryStream++4 @
(++@ A
)++A B
)++B C
{,, 
using-- 
(-- 
CryptoStream-- '
	csEncrypt--( 1
=--2 3
new--4 7
CryptoStream--8 D
(--D E
	msEncrypt--E N
,--N O
	encryptor--P Y
,--Y Z
CryptoStreamMode--[ k
.--k l
Write--l q
)--q r
)--r s
{.. 
using// 
(// 
StreamWriter// +
	swEncrypt//, 5
=//6 7
new//8 ;
StreamWriter//< H
(//H I
	csEncrypt//I R
)//R S
)//S T
{00 
	swEncrypt22 %
.22% &
Write22& +
(22+ ,
stringToEncrypt22, ;
)22; <
;22< =
}33 
byteCipherText44 &
=44' (
	msEncrypt44) 2
.442 3
ToArray443 :
(44: ;
)44; <
;44< =
}55 
}66 
}77 
IO88 
.88 
	WriteLine88 
(88 
IO88 
.88 
ToHex88 !
(88! "
byteCipherText88" 0
)880 1
)881 2
;882 3
}99 	
}:: 
public?? 

static?? 
void?? 
GoodG2BSink?? "
(??" #
Object??# )

dataObject??* 4
)??5 6
{@@ 
stringAA 
dataAA 
=AA 
(AA 
stringAA 
)AA 

dataObjectAA (
;AA( )
ifBB 

(BB 
dataBB 
!=BB 
nullBB 
)BB 
{CC 	
stringDD 
stringToEncryptDD "
=DD# $
$strDD% <
;DD< =
byteEE 
[EE 
]EE 
byteCipherTextEE !
=EE" #
nullEE$ (
;EE( )
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesGG, /
=GG0 1
newGG2 5$
AesCryptoServiceProviderGG6 N
(GGN O
)GGO P
)GGP Q
{HH 
ICryptoTransformJJ  
	encryptorJJ! *
=JJ+ ,
aesJJ- 0
.JJ0 1
CreateEncryptorJJ1 @
(JJ@ A
EncodingJJA I
.JJI J
UTF8JJJ N
.JJN O
GetBytesJJO W
(JJW X
dataJJX \
)JJ\ ]
,JJ] ^
aesJJ_ b
.JJb c
IVJJc e
)JJe f
;JJf g
usingLL 
(LL 
MemoryStreamLL #
	msEncryptLL$ -
=LL. /
newLL0 3
MemoryStreamLL4 @
(LL@ A
)LLA B
)LLB C
{MM 
usingNN 
(NN 
CryptoStreamNN '
	csEncryptNN( 1
=NN2 3
newNN4 7
CryptoStreamNN8 D
(NND E
	msEncryptNNE N
,NNN O
	encryptorNNP Y
,NNY Z
CryptoStreamModeNN[ k
.NNk l
WriteNNl q
)NNq r
)NNr s
{OO 
usingPP 
(PP 
StreamWriterPP +
	swEncryptPP, 5
=PP6 7
newPP8 ;
StreamWriterPP< H
(PPH I
	csEncryptPPI R
)PPR S
)PPS T
{QQ 
	swEncryptSS %
.SS% &
WriteSS& +
(SS+ ,
stringToEncryptSS, ;
)SS; <
;SS< =
}TT 
byteCipherTextUU &
=UU' (
	msEncryptUU) 2
.UU2 3
ToArrayUU3 :
(UU: ;
)UU; <
;UU< =
}VV 
}WW 
}XX 
IOYY 
.YY 
	WriteLineYY 
(YY 
IOYY 
.YY 
ToHexYY !
(YY! "
byteCipherTextYY" 0
)YY0 1
)YY1 2
;YY2 3
}ZZ 	
}[[ 
}]] 
}^^ ¶
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_72a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_72a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data   
=   
$str   !
;  ! "
	Hashtable!! 
dataHashtable!! 
=!!  !
new!!" %
	Hashtable!!& /
(!!/ 0
$num!!0 1
)!!1 2
;!!2 3
dataHashtable"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" !
)""! "
;""" #
dataHashtable## 
.## 
Add## 
(## 
$num## 
,## 
data## !
)##! "
;##" #
dataHashtable$$ 
.$$ 
Add$$ 
($$ 
$num$$ 
,$$ 
data$$ !
)$$! "
;$$" #:
.CWE321_Hard_Coded_Cryptographic_Key__basic_72b%% 6
.%%6 7
BadSink%%7 >
(%%> ?
dataHashtable%%? L
)%%N O
;%%O P
}&& 
public)) 

override)) 
void)) 
Good)) 
()) 
))) 
{** 
GoodG2B++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
string11 
data11 
;11 
data22 
=22 
$str22 
;22 
try44 
{55 	
data77 
=77 
Console77 
.77 
ReadLine77 #
(77# $
)77$ %
;77% &
}88 	
catch99 
(99 
IOException99 
exceptIO99 #
)99# $
{:: 	
IO;; 
.;; 
Logger;; 
.;; 
Log;; 
(;; 
NLog;; 
.;; 
LogLevel;; '
.;;' (
Warn;;( ,
,;;, -
$str;;. I
,;;I J
exceptIO;;K S
);;S T
;;;T U
}<< 	
	Hashtable== 
dataHashtable== 
===  !
new==" %
	Hashtable==& /
(==/ 0
$num==0 1
)==1 2
;==2 3
dataHashtable>> 
.>> 
Add>> 
(>> 
$num>> 
,>> 
data>> !
)>>! "
;>>" #
dataHashtable?? 
.?? 
Add?? 
(?? 
$num?? 
,?? 
data?? !
)??! "
;??" #
dataHashtable@@ 
.@@ 
Add@@ 
(@@ 
$num@@ 
,@@ 
data@@ !
)@@! "
;@@" #:
.CWE321_Hard_Coded_Cryptographic_Key__basic_72bAA 6
.AA6 7
GoodG2BSinkAA7 B
(AAB C
dataHashtableAAC P
)AAR S
;AAS T
}BB 
}DD 
}EE Á,
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_72b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_72b 4
{ 
public 

static 
void 
BadSink 
( 
	Hashtable (
dataHashtable) 6
)7 8
{ 
string   
data   
=   
(   
string   
)   
dataHashtable   ,
[  , -
$num  - .
]  . /
;  / 0
if!! 

(!! 
data!! 
!=!! 
null!! 
)!! 
{"" 	
string## 
stringToEncrypt## "
=### $
$str##% <
;##< =
byte$$ 
[$$ 
]$$ 
byteCipherText$$ !
=$$" #
null$$$ (
;$$( )
using&& 
(&& $
AesCryptoServiceProvider&& +
aes&&, /
=&&0 1
new&&2 5$
AesCryptoServiceProvider&&6 N
(&&N O
)&&O P
)&&P Q
{'' 
ICryptoTransform))  
	encryptor))! *
=))+ ,
aes))- 0
.))0 1
CreateEncryptor))1 @
())@ A
Encoding))A I
.))I J
UTF8))J N
.))N O
GetBytes))O W
())W X
data))X \
)))\ ]
,))] ^
aes))_ b
.))b c
IV))c e
)))e f
;))f g
using++ 
(++ 
MemoryStream++ #
	msEncrypt++$ -
=++. /
new++0 3
MemoryStream++4 @
(++@ A
)++A B
)++B C
{,, 
using-- 
(-- 
CryptoStream-- '
	csEncrypt--( 1
=--2 3
new--4 7
CryptoStream--8 D
(--D E
	msEncrypt--E N
,--N O
	encryptor--P Y
,--Y Z
CryptoStreamMode--[ k
.--k l
Write--l q
)--q r
)--r s
{.. 
using// 
(// 
StreamWriter// +
	swEncrypt//, 5
=//6 7
new//8 ;
StreamWriter//< H
(//H I
	csEncrypt//I R
)//R S
)//S T
{00 
	swEncrypt22 %
.22% &
Write22& +
(22+ ,
stringToEncrypt22, ;
)22; <
;22< =
}33 
byteCipherText44 &
=44' (
	msEncrypt44) 2
.442 3
ToArray443 :
(44: ;
)44; <
;44< =
}55 
}66 
}77 
IO88 
.88 
	WriteLine88 
(88 
IO88 
.88 
ToHex88 !
(88! "
byteCipherText88" 0
)880 1
)881 2
;882 3
}99 	
}:: 
public?? 

static?? 
void?? 
GoodG2BSink?? "
(??" #
	Hashtable??# ,
dataHashtable??- :
)??; <
{@@ 
stringAA 
dataAA 
=AA 
(AA 
stringAA 
)AA 
dataHashtableAA ,
[AA, -
$numAA- .
]AA. /
;AA/ 0
ifBB 

(BB 
dataBB 
!=BB 
nullBB 
)BB 
{CC 	
stringDD 
stringToEncryptDD "
=DD# $
$strDD% <
;DD< =
byteEE 
[EE 
]EE 
byteCipherTextEE !
=EE" #
nullEE$ (
;EE( )
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesGG, /
=GG0 1
newGG2 5$
AesCryptoServiceProviderGG6 N
(GGN O
)GGO P
)GGP Q
{HH 
ICryptoTransformJJ  
	encryptorJJ! *
=JJ+ ,
aesJJ- 0
.JJ0 1
CreateEncryptorJJ1 @
(JJ@ A
EncodingJJA I
.JJI J
UTF8JJJ N
.JJN O
GetBytesJJO W
(JJW X
dataJJX \
)JJ\ ]
,JJ] ^
aesJJ_ b
.JJb c
IVJJc e
)JJe f
;JJf g
usingLL 
(LL 
MemoryStreamLL #
	msEncryptLL$ -
=LL. /
newLL0 3
MemoryStreamLL4 @
(LL@ A
)LLA B
)LLB C
{MM 
usingNN 
(NN 
CryptoStreamNN '
	csEncryptNN( 1
=NN2 3
newNN4 7
CryptoStreamNN8 D
(NND E
	msEncryptNNE N
,NNN O
	encryptorNNP Y
,NNY Z
CryptoStreamModeNN[ k
.NNk l
WriteNNl q
)NNq r
)NNr s
{OO 
usingPP 
(PP 
StreamWriterPP +
	swEncryptPP, 5
=PP6 7
newPP8 ;
StreamWriterPP< H
(PPH I
	csEncryptPPI R
)PPR S
)PPS T
{QQ 
	swEncryptSS %
.SS% &
WriteSS& +
(SS+ ,
stringToEncryptSS, ;
)SS; <
;SS< =
}TT 
byteCipherTextUU &
=UU' (
	msEncryptUU) 2
.UU2 3
ToArrayUU3 :
(UU: ;
)UU; <
;UU< =
}VV 
}WW 
}XX 
IOYY 
.YY 
	WriteLineYY 
(YY 
IOYY 
.YY 
ToHexYY !
(YY! "
byteCipherTextYY" 0
)YY0 1
)YY1 2
;YY2 3
}ZZ 	
}[[ 
}]] 
}^^ º
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_73a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_73a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data!! 
=!! 
$str!! !
;!!! "

LinkedList"" 
<"" 
string"" 
>"" 
dataLinkedList"" )
=""* +
new"", /

LinkedList""0 :
<"": ;
string""; A
>""A B
(""B C
)""C D
;""D E
dataLinkedList## 
.## 
AddLast## 
(## 
data## #
)### $
;##$ %
dataLinkedList$$ 
.$$ 
AddLast$$ 
($$ 
data$$ #
)$$# $
;$$$ %
dataLinkedList%% 
.%% 
AddLast%% 
(%% 
data%% #
)%%# $
;%%$ %:
.CWE321_Hard_Coded_Cryptographic_Key__basic_73b&& 6
.&&6 7
BadSink&&7 >
(&&> ?
dataLinkedList&&? M
)&&O P
;&&P Q
}'' 
public** 

override** 
void** 
Good** 
(** 
)** 
{++ 
GoodG2B,, 
(,, 
),, 
;,, 
}-- 
private00 
static00 
void00 
GoodG2B00 
(00  
)00  !
{11 
string22 
data22 
;22 
data33 
=33 
$str33 
;33 
try55 
{66 	
data88 
=88 
Console88 
.88 
ReadLine88 #
(88# $
)88$ %
;88% &
}99 	
catch:: 
(:: 
IOException:: 
exceptIO:: #
)::# $
{;; 	
IO<< 
.<< 
Logger<< 
.<< 
Log<< 
(<< 
NLog<< 
.<< 
LogLevel<< '
.<<' (
Warn<<( ,
,<<, -
$str<<. I
,<<I J
exceptIO<<K S
)<<S T
;<<T U
}== 	

LinkedList>> 
<>> 
string>> 
>>> 
dataLinkedList>> )
=>>* +
new>>, /

LinkedList>>0 :
<>>: ;
string>>; A
>>>A B
(>>B C
)>>C D
;>>D E
dataLinkedList?? 
.?? 
AddLast?? 
(?? 
data?? #
)??# $
;??$ %
dataLinkedList@@ 
.@@ 
AddLast@@ 
(@@ 
data@@ #
)@@# $
;@@$ %
dataLinkedListAA 
.AA 
AddLastAA 
(AA 
dataAA #
)AA# $
;AA$ %:
.CWE321_Hard_Coded_Cryptographic_Key__basic_73bBB 6
.BB6 7
GoodG2BSinkBB7 B
(BBB C
dataLinkedListBBC Q
)BBS T
;BBT U
}CC 
}EE 
}FF í,
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_73b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_73b 4
{ 
public 

static 
void 
BadSink 
( 

LinkedList )
<) *
string* 0
>0 1
dataLinkedList2 @
)A B
{ 
string   
data   
=   
dataLinkedList   $
.  $ %
Last  % )
.  ) *
Value  * /
;  / 0
if!! 

(!! 
data!! 
!=!! 
null!! 
)!! 
{"" 	
string## 
stringToEncrypt## "
=### $
$str##% <
;##< =
byte$$ 
[$$ 
]$$ 
byteCipherText$$ !
=$$" #
null$$$ (
;$$( )
using&& 
(&& $
AesCryptoServiceProvider&& +
aes&&, /
=&&0 1
new&&2 5$
AesCryptoServiceProvider&&6 N
(&&N O
)&&O P
)&&P Q
{'' 
ICryptoTransform))  
	encryptor))! *
=))+ ,
aes))- 0
.))0 1
CreateEncryptor))1 @
())@ A
Encoding))A I
.))I J
UTF8))J N
.))N O
GetBytes))O W
())W X
data))X \
)))\ ]
,))] ^
aes))_ b
.))b c
IV))c e
)))e f
;))f g
using++ 
(++ 
MemoryStream++ #
	msEncrypt++$ -
=++. /
new++0 3
MemoryStream++4 @
(++@ A
)++A B
)++B C
{,, 
using-- 
(-- 
CryptoStream-- '
	csEncrypt--( 1
=--2 3
new--4 7
CryptoStream--8 D
(--D E
	msEncrypt--E N
,--N O
	encryptor--P Y
,--Y Z
CryptoStreamMode--[ k
.--k l
Write--l q
)--q r
)--r s
{.. 
using// 
(// 
StreamWriter// +
	swEncrypt//, 5
=//6 7
new//8 ;
StreamWriter//< H
(//H I
	csEncrypt//I R
)//R S
)//S T
{00 
	swEncrypt22 %
.22% &
Write22& +
(22+ ,
stringToEncrypt22, ;
)22; <
;22< =
}33 
byteCipherText44 &
=44' (
	msEncrypt44) 2
.442 3
ToArray443 :
(44: ;
)44; <
;44< =
}55 
}66 
}77 
IO88 
.88 
	WriteLine88 
(88 
IO88 
.88 
ToHex88 !
(88! "
byteCipherText88" 0
)880 1
)881 2
;882 3
}99 	
}:: 
public?? 

static?? 
void?? 
GoodG2BSink?? "
(??" #

LinkedList??# -
<??- .
string??. 4
>??4 5
dataLinkedList??6 D
)??E F
{@@ 
stringAA 
dataAA 
=AA 
dataLinkedListAA $
.AA$ %
LastAA% )
.AA) *
ValueAA* /
;AA/ 0
ifBB 

(BB 
dataBB 
!=BB 
nullBB 
)BB 
{CC 	
stringDD 
stringToEncryptDD "
=DD# $
$strDD% <
;DD< =
byteEE 
[EE 
]EE 
byteCipherTextEE !
=EE" #
nullEE$ (
;EE( )
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesGG, /
=GG0 1
newGG2 5$
AesCryptoServiceProviderGG6 N
(GGN O
)GGO P
)GGP Q
{HH 
ICryptoTransformJJ  
	encryptorJJ! *
=JJ+ ,
aesJJ- 0
.JJ0 1
CreateEncryptorJJ1 @
(JJ@ A
EncodingJJA I
.JJI J
UTF8JJJ N
.JJN O
GetBytesJJO W
(JJW X
dataJJX \
)JJ\ ]
,JJ] ^
aesJJ_ b
.JJb c
IVJJc e
)JJe f
;JJf g
usingLL 
(LL 
MemoryStreamLL #
	msEncryptLL$ -
=LL. /
newLL0 3
MemoryStreamLL4 @
(LL@ A
)LLA B
)LLB C
{MM 
usingNN 
(NN 
CryptoStreamNN '
	csEncryptNN( 1
=NN2 3
newNN4 7
CryptoStreamNN8 D
(NND E
	msEncryptNNE N
,NNN O
	encryptorNNP Y
,NNY Z
CryptoStreamModeNN[ k
.NNk l
WriteNNl q
)NNq r
)NNr s
{OO 
usingPP 
(PP 
StreamWriterPP +
	swEncryptPP, 5
=PP6 7
newPP8 ;
StreamWriterPP< H
(PPH I
	csEncryptPPI R
)PPR S
)PPS T
{QQ 
	swEncryptSS %
.SS% &
WriteSS& +
(SS+ ,
stringToEncryptSS, ;
)SS; <
;SS< =
}TT 
byteCipherTextUU &
=UU' (
	msEncryptUU) 2
.UU2 3
ToArrayUU3 :
(UU: ;
)UU; <
;UU< =
}VV 
}WW 
}XX 
IOYY 
.YY 
	WriteLineYY 
(YY 
IOYY 
.YY 
ToHexYY !
(YY! "
byteCipherTextYY" 0
)YY0 1
)YY1 2
;YY2 3
}ZZ 	
}[[ 
}]] 
}^^ è
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_74a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_74a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data   
=   
$str   !
;  ! "

Dictionary!! 
<!! 
int!! 
,!! 
string!! 
>!! 
dataDictionary!! -
=!!. /
new!!0 3

Dictionary!!4 >
<!!> ?
int!!? B
,!!B C
string!!C I
>!!I J
(!!J K
)!!K L
;!!L M
dataDictionary"" 
."" 
Add"" 
("" 
$num"" 
,"" 
data"" "
)""" #
;""# $
dataDictionary## 
.## 
Add## 
(## 
$num## 
,## 
data## "
)##" #
;### $
dataDictionary$$ 
.$$ 
Add$$ 
($$ 
$num$$ 
,$$ 
data$$ "
)$$" #
;$$# $:
.CWE321_Hard_Coded_Cryptographic_Key__basic_74b%% 6
.%%6 7
BadSink%%7 >
(%%> ?
dataDictionary%%? M
)%%O P
;%%P Q
}&& 
public)) 

override)) 
void)) 
Good)) 
()) 
))) 
{** 
GoodG2B++ 
(++ 
)++ 
;++ 
},, 
private// 
static// 
void// 
GoodG2B// 
(//  
)//  !
{00 
string11 
data11 
;11 
data22 
=22 
$str22 
;22 
try44 
{55 	
data77 
=77 
Console77 
.77 
ReadLine77 #
(77# $
)77$ %
;77% &
}88 	
catch99 
(99 
IOException99 
exceptIO99 #
)99# $
{:: 	
IO;; 
.;; 
Logger;; 
.;; 
Log;; 
(;; 
NLog;; 
.;; 
LogLevel;; '
.;;' (
Warn;;( ,
,;;, -
$str;;. I
,;;I J
exceptIO;;K S
);;S T
;;;T U
}<< 	

Dictionary== 
<== 
int== 
,== 
string== 
>== 
dataDictionary== -
===. /
new==0 3

Dictionary==4 >
<==> ?
int==? B
,==B C
string==C I
>==I J
(==J K
)==K L
;==L M
dataDictionary>> 
.>> 
Add>> 
(>> 
$num>> 
,>> 
data>> "
)>>" #
;>># $
dataDictionary?? 
.?? 
Add?? 
(?? 
$num?? 
,?? 
data?? "
)??" #
;??# $
dataDictionary@@ 
.@@ 
Add@@ 
(@@ 
$num@@ 
,@@ 
data@@ "
)@@" #
;@@# $:
.CWE321_Hard_Coded_Cryptographic_Key__basic_74bAA 6
.AA6 7
GoodG2BSinkAA7 B
(AAB C
dataDictionaryAAC Q
)AAS T
;AAT U
}BB 
}DD 
}EE -
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_74b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_74b 4
{ 
public 

static 
void 
BadSink 
( 

Dictionary )
<) *
int* -
,- .
string. 4
>4 5
dataDictionary6 D
)E F
{ 
string   
data   
=   
dataDictionary   $
[  $ %
$num  % &
]  & '
;  ' (
if!! 

(!! 
data!! 
!=!! 
null!! 
)!! 
{"" 	
string## 
stringToEncrypt## "
=### $
$str##% <
;##< =
byte$$ 
[$$ 
]$$ 
byteCipherText$$ !
=$$" #
null$$$ (
;$$( )
using&& 
(&& $
AesCryptoServiceProvider&& +
aes&&, /
=&&0 1
new&&2 5$
AesCryptoServiceProvider&&6 N
(&&N O
)&&O P
)&&P Q
{'' 
ICryptoTransform))  
	encryptor))! *
=))+ ,
aes))- 0
.))0 1
CreateEncryptor))1 @
())@ A
Encoding))A I
.))I J
UTF8))J N
.))N O
GetBytes))O W
())W X
data))X \
)))\ ]
,))] ^
aes))_ b
.))b c
IV))c e
)))e f
;))f g
using++ 
(++ 
MemoryStream++ #
	msEncrypt++$ -
=++. /
new++0 3
MemoryStream++4 @
(++@ A
)++A B
)++B C
{,, 
using-- 
(-- 
CryptoStream-- '
	csEncrypt--( 1
=--2 3
new--4 7
CryptoStream--8 D
(--D E
	msEncrypt--E N
,--N O
	encryptor--P Y
,--Y Z
CryptoStreamMode--[ k
.--k l
Write--l q
)--q r
)--r s
{.. 
using// 
(// 
StreamWriter// +
	swEncrypt//, 5
=//6 7
new//8 ;
StreamWriter//< H
(//H I
	csEncrypt//I R
)//R S
)//S T
{00 
	swEncrypt22 %
.22% &
Write22& +
(22+ ,
stringToEncrypt22, ;
)22; <
;22< =
}33 
byteCipherText44 &
=44' (
	msEncrypt44) 2
.442 3
ToArray443 :
(44: ;
)44; <
;44< =
}55 
}66 
}77 
IO88 
.88 
	WriteLine88 
(88 
IO88 
.88 
ToHex88 !
(88! "
byteCipherText88" 0
)880 1
)881 2
;882 3
}99 	
}:: 
public?? 

static?? 
void?? 
GoodG2BSink?? "
(??" #

Dictionary??# -
<??- .
int??. 1
,??1 2
string??2 8
>??8 9
dataDictionary??: H
)??I J
{@@ 
stringAA 
dataAA 
=AA 
dataDictionaryAA $
[AA$ %
$numAA% &
]AA& '
;AA' (
ifBB 

(BB 
dataBB 
!=BB 
nullBB 
)BB 
{CC 	
stringDD 
stringToEncryptDD "
=DD# $
$strDD% <
;DD< =
byteEE 
[EE 
]EE 
byteCipherTextEE !
=EE" #
nullEE$ (
;EE( )
usingGG 
(GG $
AesCryptoServiceProviderGG +
aesGG, /
=GG0 1
newGG2 5$
AesCryptoServiceProviderGG6 N
(GGN O
)GGO P
)GGP Q
{HH 
ICryptoTransformJJ  
	encryptorJJ! *
=JJ+ ,
aesJJ- 0
.JJ0 1
CreateEncryptorJJ1 @
(JJ@ A
EncodingJJA I
.JJI J
UTF8JJJ N
.JJN O
GetBytesJJO W
(JJW X
dataJJX \
)JJ\ ]
,JJ] ^
aesJJ_ b
.JJb c
IVJJc e
)JJe f
;JJf g
usingLL 
(LL 
MemoryStreamLL #
	msEncryptLL$ -
=LL. /
newLL0 3
MemoryStreamLL4 @
(LL@ A
)LLA B
)LLB C
{MM 
usingNN 
(NN 
CryptoStreamNN '
	csEncryptNN( 1
=NN2 3
newNN4 7
CryptoStreamNN8 D
(NND E
	msEncryptNNE N
,NNN O
	encryptorNNP Y
,NNY Z
CryptoStreamModeNN[ k
.NNk l
WriteNNl q
)NNq r
)NNr s
{OO 
usingPP 
(PP 
StreamWriterPP +
	swEncryptPP, 5
=PP6 7
newPP8 ;
StreamWriterPP< H
(PPH I
	csEncryptPPI R
)PPR S
)PPS T
{QQ 
	swEncryptSS %
.SS% &
WriteSS& +
(SS+ ,
stringToEncryptSS, ;
)SS; <
;SS< =
}TT 
byteCipherTextUU &
=UU' (
	msEncryptUU) 2
.UU2 3
ToArrayUU3 :
(UU: ;
)UU; <
;UU< =
}VV 
}WW 
}XX 
IOYY 
.YY 
	WriteLineYY 
(YY 
IOYY 
.YY 
ToHexYY !
(YY! "
byteCipherTextYY" 0
)YY0 1
)YY1 2
;YY2 3
}ZZ 	
}[[ 
}]] 
}^^ $
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_75a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_75a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data!! 
=!! 
$str!! !
;!!! "
byte## 
[## 
]## 
dataSerialized## 
=## 
null##  $
;##$ %
try$$ 
{%% 	
BinaryFormatter&& 
bf&& 
=&&  
new&&! $
BinaryFormatter&&% 4
(&&4 5
)&&5 6
;&&6 7
using'' 
('' 
var'' 
ms'' 
='' 
new'' 
MemoryStream''  ,
('', -
)''- .
)''. /
{(( 
bf)) 
.)) 
	Serialize)) 
()) 
ms)) 
,))  
data))! %
)))% &
;))& '
dataSerialized** 
=**  
ms**! #
.**# $
ToArray**$ +
(**+ ,
)**, -
;**- .
}++ :
.CWE321_Hard_Coded_Cryptographic_Key__basic_75b,, :
.,,: ;
BadSink,,; B
(,,B C
dataSerialized,,C Q
),,S T
;,,T U
}-- 	
catch.. 
(.. "
SerializationException.. %
exceptSerialize..& 5
)..5 6
{// 	
IO00 
.00 
Logger00 
.00 
Log00 
(00 
NLog00 
.00 
LogLevel00 '
.00' (
Warn00( ,
,00, -
$str00. X
,00X Y
exceptSerialize00Z i
)00i j
;00j k
}11 	
}22 
public55 

override55 
void55 
Good55 
(55 
)55 
{66 
GoodG2B77 
(77 
)77 
;77 
}88 
private;; 
static;; 
void;; 
GoodG2B;; 
(;;  
);;  !
{<< 
string== 
data== 
;== 
data>> 
=>> 
$str>> 
;>> 
try@@ 
{AA 	
dataCC 
=CC 
ConsoleCC 
.CC 
ReadLineCC #
(CC# $
)CC$ %
;CC% &
}DD 	
catchEE 
(EE 
IOExceptionEE 
exceptIOEE #
)EE# $
{FF 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
$strGG. I
,GGI J
exceptIOGGK S
)GGS T
;GGT U
}HH 	
byteJJ 
[JJ 
]JJ 
dataSerializedJJ 
=JJ 
nullJJ  $
;JJ$ %
tryKK 
{LL 	
BinaryFormatterMM 
bfMM 
=MM  
newMM! $
BinaryFormatterMM% 4
(MM4 5
)MM5 6
;MM6 7
usingNN 
(NN 
varNN 
msNN 
=NN 
newNN 
MemoryStreamNN  ,
(NN, -
)NN- .
)NN. /
{OO 
bfPP 
.PP 
	SerializePP 
(PP 
msPP 
,PP  
dataPP! %
)PP% &
;PP& '
dataSerializedQQ 
=QQ  
msQQ! #
.QQ# $
ToArrayQQ$ +
(QQ+ ,
)QQ, -
;QQ- .
}RR :
.CWE321_Hard_Coded_Cryptographic_Key__basic_75bSS :
.SS: ;
GoodG2BSinkSS; F
(SSF G
dataSerializedSSG U
)SSW X
;SSX Y
}TT 	
catchUU 
(UU "
SerializationExceptionUU %
exceptSerializeUU& 5
)UU5 6
{VV 	
IOWW 
.WW 
LoggerWW 
.WW 
LogWW 
(WW 
NLogWW 
.WW 
LogLevelWW '
.WW' (
WarnWW( ,
,WW, -
$strWW. X
,WWX Y
exceptSerializeWWZ i
)WWi j
;WWj k
}XX 	
}YY 
}[[ 
}\\ íA
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_75b.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_75b 4
{ 
public 

static 
void 
BadSink 
( 
byte #
[# $
]$ %
dataSerialized& 4
)5 6
{   
try!! 
{"" 	
string## 
data## 
;## 
var$$ 
binForm$$ 
=$$ 
new$$ 
BinaryFormatter$$ -
($$- .
)$$. /
;$$/ 0
using%% 
(%% 
var%% 
	memStream%%  
=%%! "
new%%# &
MemoryStream%%' 3
(%%3 4
)%%4 5
)%%5 6
{&& 
	memStream'' 
.'' 
Write'' 
(''  
dataSerialized''  .
,''. /
$num''0 1
,''1 2
dataSerialized''3 A
.''A B
Length''B H
)''H I
;''I J
	memStream(( 
.(( 
Seek(( 
((( 
$num((  
,((  !

SeekOrigin((" ,
.((, -
Begin((- 2
)((2 3
;((3 4
data)) 
=)) 
()) 
string)) 
))) 
binForm)) &
.))& '
Deserialize))' 2
())2 3
	memStream))3 <
)))< =
;))= >
}** 
if++ 
(++ 
data++ 
!=++ 
null++ 
)++ 
{,, 
string-- 
stringToEncrypt-- &
=--' (
$str--) @
;--@ A
byte.. 
[.. 
].. 
byteCipherText.. %
=..& '
null..( ,
;.., -
using00 
(00 $
AesCryptoServiceProvider00 /
aes000 3
=004 5
new006 9$
AesCryptoServiceProvider00: R
(00R S
)00S T
)00T U
{11 
ICryptoTransform33 $
	encryptor33% .
=33/ 0
aes331 4
.334 5
CreateEncryptor335 D
(33D E
Encoding33E M
.33M N
UTF833N R
.33R S
GetBytes33S [
(33[ \
data33\ `
)33` a
,33a b
aes33c f
.33f g
IV33g i
)33i j
;33j k
using55 
(55 
MemoryStream55 '
	msEncrypt55( 1
=552 3
new554 7
MemoryStream558 D
(55D E
)55E F
)55F G
{66 
using77 
(77 
CryptoStream77 +
	csEncrypt77, 5
=776 7
new778 ;
CryptoStream77< H
(77H I
	msEncrypt77I R
,77R S
	encryptor77T ]
,77] ^
CryptoStreamMode77_ o
.77o p
Write77p u
)77u v
)77v w
{88 
using99 !
(99" #
StreamWriter99# /
	swEncrypt990 9
=99: ;
new99< ?
StreamWriter99@ L
(99L M
	csEncrypt99M V
)99V W
)99W X
{:: 
	swEncrypt<<  )
.<<) *
Write<<* /
(<</ 0
stringToEncrypt<<0 ?
)<<? @
;<<@ A
}== 
byteCipherText>> *
=>>+ ,
	msEncrypt>>- 6
.>>6 7
ToArray>>7 >
(>>> ?
)>>? @
;>>@ A
}?? 
}@@ 
}AA 
IOBB 
.BB 
	WriteLineBB 
(BB 
IOBB 
.BB  
ToHexBB  %
(BB% &
byteCipherTextBB& 4
)BB4 5
)BB5 6
;BB6 7
}CC 
}DD 	
catchEE 
(EE "
SerializationExceptionEE %
exceptSerializeEE& 5
)EE5 6
{FF 	
IOGG 
.GG 
LoggerGG 
.GG 
LogGG 
(GG 
NLogGG 
.GG 
LogLevelGG '
.GG' (
WarnGG( ,
,GG, -
$strGG. Y
,GGY Z
exceptSerializeGG[ j
)GGj k
;GGk l
}HH 	
}II 
publicNN 

staticNN 
voidNN 
GoodG2BSinkNN "
(NN" #
byteNN# '
[NN' (
]NN( )
dataSerializedNN* 8
)NN9 :
{OO 
tryPP 
{QQ 	
stringRR 
dataRR 
;RR 
varSS 
binFormSS 
=SS 
newSS 
BinaryFormatterSS -
(SS- .
)SS. /
;SS/ 0
usingTT 
(TT 
varTT 
	memStreamTT  
=TT! "
newTT# &
MemoryStreamTT' 3
(TT3 4
)TT4 5
)TT5 6
{UU 
	memStreamVV 
.VV 
WriteVV 
(VV  
dataSerializedVV  .
,VV. /
$numVV0 1
,VV1 2
dataSerializedVV3 A
.VVA B
LengthVVB H
)VVH I
;VVI J
	memStreamWW 
.WW 
SeekWW 
(WW 
$numWW  
,WW  !

SeekOriginWW" ,
.WW, -
BeginWW- 2
)WW2 3
;WW3 4
dataXX 
=XX 
(XX 
stringXX 
)XX 
binFormXX &
.XX& '
DeserializeXX' 2
(XX2 3
	memStreamXX3 <
)XX< =
;XX= >
}YY 
ifZZ 
(ZZ 
dataZZ 
!=ZZ 
nullZZ 
)ZZ 
{[[ 
string\\ 
stringToEncrypt\\ &
=\\' (
$str\\) @
;\\@ A
byte]] 
[]] 
]]] 
byteCipherText]] %
=]]& '
null]]( ,
;]], -
using__ 
(__ $
AesCryptoServiceProvider__ /
aes__0 3
=__4 5
new__6 9$
AesCryptoServiceProvider__: R
(__R S
)__S T
)__T U
{`` 
ICryptoTransformbb $
	encryptorbb% .
=bb/ 0
aesbb1 4
.bb4 5
CreateEncryptorbb5 D
(bbD E
EncodingbbE M
.bbM N
UTF8bbN R
.bbR S
GetBytesbbS [
(bb[ \
databb\ `
)bb` a
,bba b
aesbbc f
.bbf g
IVbbg i
)bbi j
;bbj k
usingdd 
(dd 
MemoryStreamdd '
	msEncryptdd( 1
=dd2 3
newdd4 7
MemoryStreamdd8 D
(ddD E
)ddE F
)ddF G
{ee 
usingff 
(ff 
CryptoStreamff +
	csEncryptff, 5
=ff6 7
newff8 ;
CryptoStreamff< H
(ffH I
	msEncryptffI R
,ffR S
	encryptorffT ]
,ff] ^
CryptoStreamModeff_ o
.ffo p
Writeffp u
)ffu v
)ffv w
{gg 
usinghh !
(hh" #
StreamWriterhh# /
	swEncrypthh0 9
=hh: ;
newhh< ?
StreamWriterhh@ L
(hhL M
	csEncrypthhM V
)hhV W
)hhW X
{ii 
	swEncryptkk  )
.kk) *
Writekk* /
(kk/ 0
stringToEncryptkk0 ?
)kk? @
;kk@ A
}ll 
byteCipherTextmm *
=mm+ ,
	msEncryptmm- 6
.mm6 7
ToArraymm7 >
(mm> ?
)mm? @
;mm@ A
}nn 
}oo 
}pp 
IOqq 
.qq 
	WriteLineqq 
(qq 
IOqq 
.qq  
ToHexqq  %
(qq% &
byteCipherTextqq& 4
)qq4 5
)qq5 6
;qq6 7
}rr 
}ss 	
catchtt 
(tt "
SerializationExceptiontt %
exceptSerializett& 5
)tt5 6
{uu 	
IOvv 
.vv 
Loggervv 
.vv 
Logvv 
(vv 
NLogvv 
.vv 
LogLevelvv '
.vv' (
Warnvv( ,
,vv, -
$strvv. Y
,vvY Z
exceptSerializevv[ j
)vvj k
;vvk l
}ww 	
}xx 
}zz 
}{{ ¤
±C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_81a.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class :
.CWE321_Hard_Coded_Cryptographic_Key__basic_81a 4
:5 6
AbstractTestCase7 G
{ 
public 

override 
void 
Bad 
( 
) 
{ 
string 
data 
; 
data   
=   
$str   !
;  ! ">
2CWE321_Hard_Coded_Cryptographic_Key__basic_81_base!! :

baseObject!!; E
=!!F G
new!!H K=
1CWE321_Hard_Coded_Cryptographic_Key__basic_81_bad!!L }
(!!} ~
)!!~ 
;	!! 

baseObject"" 
."" 
Action"" 
("" 
data"" 
)""  
;""  !
}## 
public&& 

override&& 
void&& 
Good&& 
(&& 
)&& 
{'' 
GoodG2B(( 
((( 
)(( 
;(( 
})) 
private,, 
void,, 
GoodG2B,, 
(,, 
),, 
{-- 
string.. 
data.. 
;.. 
data// 
=// 
$str// 
;// 
try11 
{22 	
data44 
=44 
Console44 
.44 
ReadLine44 #
(44# $
)44$ %
;44% &
}55 	
catch66 
(66 
IOException66 
exceptIO66 #
)66# $
{77 	
IO88 
.88 
Logger88 
.88 
Log88 
(88 
NLog88 
.88 
LogLevel88 '
.88' (
Warn88( ,
,88, -
$str88. I
,88I J
exceptIO88K S
)88S T
;88T U
}99 	>
2CWE321_Hard_Coded_Cryptographic_Key__basic_81_base:: :

baseObject::; E
=::F G
new::H KB
5CWE321_Hard_Coded_Cryptographic_Key__basic_81_goodG2B	::L 
(
:: 
)
:: 
;
:: 

baseObject;; 
.;; 
Action;; 
(;; 
data;; 
);;  
;;;  !
}<< 
}>> 
}?? ø
´C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_81_bad.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class =
1CWE321_Hard_Coded_Cryptographic_Key__basic_81_bad 7
:8 9>
2CWE321_Hard_Coded_Cryptographic_Key__basic_81_base: l
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
if   

(   
data   
!=   
null   
)   
{!! 	
string"" 
stringToEncrypt"" "
=""# $
$str""% <
;""< =
byte## 
[## 
]## 
byteCipherText## !
=##" #
null##$ (
;##( )
using%% 
(%% $
AesCryptoServiceProvider%% +
aes%%, /
=%%0 1
new%%2 5$
AesCryptoServiceProvider%%6 N
(%%N O
)%%O P
)%%P Q
{&& 
ICryptoTransform((  
	encryptor((! *
=((+ ,
aes((- 0
.((0 1
CreateEncryptor((1 @
(((@ A
Encoding((A I
.((I J
UTF8((J N
.((N O
GetBytes((O W
(((W X
data((X \
)((\ ]
,((] ^
aes((_ b
.((b c
IV((c e
)((e f
;((f g
using** 
(** 
MemoryStream** #
	msEncrypt**$ -
=**. /
new**0 3
MemoryStream**4 @
(**@ A
)**A B
)**B C
{++ 
using,, 
(,, 
CryptoStream,, '
	csEncrypt,,( 1
=,,2 3
new,,4 7
CryptoStream,,8 D
(,,D E
	msEncrypt,,E N
,,,N O
	encryptor,,P Y
,,,Y Z
CryptoStreamMode,,[ k
.,,k l
Write,,l q
),,q r
),,r s
{-- 
using.. 
(.. 
StreamWriter.. +
	swEncrypt.., 5
=..6 7
new..8 ;
StreamWriter..< H
(..H I
	csEncrypt..I R
)..R S
)..S T
{// 
	swEncrypt11 %
.11% &
Write11& +
(11+ ,
stringToEncrypt11, ;
)11; <
;11< =
}22 
byteCipherText33 &
=33' (
	msEncrypt33) 2
.332 3
ToArray333 :
(33: ;
)33; <
;33< =
}44 
}55 
}66 
IO77 
.77 
	WriteLine77 
(77 
IO77 
.77 
ToHex77 !
(77! "
byteCipherText77" 0
)770 1
)771 2
;772 3
}88 	
}99 
}:: 
};; â
µC:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_81_base.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
abstract 
class	 >
2CWE321_Hard_Coded_Cryptographic_Key__basic_81_base A
{ 
public 

abstract 
void 
Action 
(  
string  &
data' +
), -
;- .
} 
} 
¸C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\CWE321_Hard_Coded_Cryptographic_Key__basic_81_goodG2B.cs
	namespace 	
	testcases
 
. /
#CWE321_Hard_Coded_Cryptographic_Key 7
{ 
class A
5CWE321_Hard_Coded_Cryptographic_Key__basic_81_goodG2B ;
:< =>
2CWE321_Hard_Coded_Cryptographic_Key__basic_81_base> p
{ 
public 

override 
void 
Action 
(  
string  &
data' +
), -
{ 
if   

(   
data   
!=   
null   
)   
{!! 	
string"" 
stringToEncrypt"" "
=""# $
$str""% <
;""< =
byte## 
[## 
]## 
byteCipherText## !
=##" #
null##$ (
;##( )
using%% 
(%% $
AesCryptoServiceProvider%% +
aes%%, /
=%%0 1
new%%2 5$
AesCryptoServiceProvider%%6 N
(%%N O
)%%O P
)%%P Q
{&& 
ICryptoTransform((  
	encryptor((! *
=((+ ,
aes((- 0
.((0 1
CreateEncryptor((1 @
(((@ A
Encoding((A I
.((I J
UTF8((J N
.((N O
GetBytes((O W
(((W X
data((X \
)((\ ]
,((] ^
aes((_ b
.((b c
IV((c e
)((e f
;((f g
using** 
(** 
MemoryStream** #
	msEncrypt**$ -
=**. /
new**0 3
MemoryStream**4 @
(**@ A
)**A B
)**B C
{++ 
using,, 
(,, 
CryptoStream,, '
	csEncrypt,,( 1
=,,2 3
new,,4 7
CryptoStream,,8 D
(,,D E
	msEncrypt,,E N
,,,N O
	encryptor,,P Y
,,,Y Z
CryptoStreamMode,,[ k
.,,k l
Write,,l q
),,q r
),,r s
{-- 
using.. 
(.. 
StreamWriter.. +
	swEncrypt.., 5
=..6 7
new..8 ;
StreamWriter..< H
(..H I
	csEncrypt..I R
)..R S
)..S T
{// 
	swEncrypt11 %
.11% &
Write11& +
(11+ ,
stringToEncrypt11, ;
)11; <
;11< =
}22 
byteCipherText33 &
=33' (
	msEncrypt33) 2
.332 3
ToArray333 :
(33: ;
)33; <
;33< =
}44 
}55 
}66 
IO77 
.77 
	WriteLine77 
(77 
IO77 
.77 
ToHex77 !
(77! "
byteCipherText77" 0
)770 1
)771 2
;772 3
}88 	
}99 
}:: 
};; n
C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\Program.cs
	namespace		 	
	testcases		
 
.		 /
#CWE321_Hard_Coded_Cryptographic_Key		 7
{

 
class 
Program 
{ 
static 
void	 
Main 
( 
string 
[ 
] 
args  
)  !
{" #
if 
( 
args 

.
 
Any 
( 
) 
) 
{ 
if 
( 
args 
[ 
$num 
] 
. 
Equals 
( 
$str 
, 
StringComparison ,
., -
OrdinalIgnoreCase- >
)> ?
||@ B
args 
[ 
$num 
] 
. 
Equals !
(! "
$str" *
,* +
StringComparison, <
.< =
OrdinalIgnoreCase= N
)N O
)O P
{Q R
Console 
. 
	WriteLine 
( 
$str R
+S T
$str b
)b c
;c d
System 
. 
Environment 
. 
Exit 
( 
$num 
) 
;  
} 
foreach"" 
("" 
string"" 
	className"" 
in""  
args""! %
)""% &
{""' (
try$$ 
{$$	 

Type** 

myClass** 
=** 
Type** 
.** 
GetType** !
(**! "
	className**" +
)**+ ,
;**, -
object++ 
myObject++ 
=++ 
	Activator++ !
.++! "
CreateInstance++" 0
(++0 1
myClass++1 8
)++8 9
;++9 :
myClass,, 
.,, 
InvokeMember,, 
(,, 
$str,, $
,,,$ %
BindingFlags-- 
.-- 
InvokeMethod--  
|--! "
BindingFlags--# /
.--/ 0
Instance--0 8
|--9 :
BindingFlags--; G
.--G H
Public--H N
,--N O
null.. 
,.. 
myObject// 
,// 
new00 

object00 
[00 
]00 
{00 
	className00 
}00  !
)00! "
;00" #
}22 
catch22 
(22 
	Exception22 
ex22 
)22 
{22 
Console44 
.44 
	WriteLine44 
(44 
$str44 7
+448 9
	className44: C
)44C D
;44D E
Console55 
.55 
	WriteLine55 
(55 
ex55 
.55 

StackTrace55 %
)55% &
;55& '
}77 
Console99 
.99 
	WriteLine99 
(99 
$str99 
)99 
;99 
};; 
}== 
else== 	
{==
 
RunTestCWE1CC 
(CC 
)CC 
;CC 
RunTestCWE2DD 
(DD 
)DD 
;DD 
RunTestCWE3EE 
(EE 
)EE 
;EE 
RunTestCWE4FF 
(FF 
)FF 
;FF 
RunTestCWE5GG 
(GG 
)GG 
;GG 
RunTestCWE6HH 
(HH 
)HH 
;HH 
RunTestCWE7II 
(II 
)II 
;II 
RunTestCWE8JJ 
(JJ 
)JJ 
;JJ 
RunTestCWE9KK 
(KK 
)KK 
;KK 
}LL 
}MM 
privateOO 
staticOO	 
voidOO 
RunTestCWE1OO  
(OO  !
)OO! "
{OO# $
}SS 
privateUU 
staticUU	 
voidUU 
RunTestCWE2UU  
(UU  !
)UU! "
{UU# $
}YY 
private[[ 
static[[	 
void[[ 
RunTestCWE3[[  
([[  !
)[[! "
{[[# $
(]] 
new]] 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_01]] 5
(]]5 6
)]]6 7
)]]7 8
.]]8 9
RunTest]]9 @
(]]@ A
$str]]A p
)]]p q
;]]q r
(^^ 
new^^ 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_02^^ 5
(^^5 6
)^^6 7
)^^7 8
.^^8 9
RunTest^^9 @
(^^@ A
$str^^A p
)^^p q
;^^q r
(__ 
new__ 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_03__ 5
(__5 6
)__6 7
)__7 8
.__8 9
RunTest__9 @
(__@ A
$str__A p
)__p q
;__q r
(`` 
new`` 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_04`` 5
(``5 6
)``6 7
)``7 8
.``8 9
RunTest``9 @
(``@ A
$str``A p
)``p q
;``q r
(aa 
newaa 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_05aa 5
(aa5 6
)aa6 7
)aa7 8
.aa8 9
RunTestaa9 @
(aa@ A
$straaA p
)aap q
;aaq r
(bb 
newbb 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_06bb 5
(bb5 6
)bb6 7
)bb7 8
.bb8 9
RunTestbb9 @
(bb@ A
$strbbA p
)bbp q
;bbq r
(cc 
newcc 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_07cc 5
(cc5 6
)cc6 7
)cc7 8
.cc8 9
RunTestcc9 @
(cc@ A
$strccA p
)ccp q
;ccq r
(dd 
newdd 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_08dd 5
(dd5 6
)dd6 7
)dd7 8
.dd8 9
RunTestdd9 @
(dd@ A
$strddA p
)ddp q
;ddq r
(ee 
newee 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_09ee 5
(ee5 6
)ee6 7
)ee7 8
.ee8 9
RunTestee9 @
(ee@ A
$streeA p
)eep q
;eeq r
(ff 
newff 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_10ff 5
(ff5 6
)ff6 7
)ff7 8
.ff8 9
RunTestff9 @
(ff@ A
$strffA p
)ffp q
;ffq r
(gg 
newgg 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_11gg 5
(gg5 6
)gg6 7
)gg7 8
.gg8 9
RunTestgg9 @
(gg@ A
$strggA p
)ggp q
;ggq r
(hh 
newhh 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_12hh 5
(hh5 6
)hh6 7
)hh7 8
.hh8 9
RunTesthh9 @
(hh@ A
$strhhA p
)hhp q
;hhq r
(ii 
newii 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_13ii 5
(ii5 6
)ii6 7
)ii7 8
.ii8 9
RunTestii9 @
(ii@ A
$striiA p
)iip q
;iiq r
(jj 
newjj 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_14jj 5
(jj5 6
)jj6 7
)jj7 8
.jj8 9
RunTestjj9 @
(jj@ A
$strjjA p
)jjp q
;jjq r
(kk 
newkk 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_15kk 5
(kk5 6
)kk6 7
)kk7 8
.kk8 9
RunTestkk9 @
(kk@ A
$strkkA p
)kkp q
;kkq r
(ll 
newll 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_16ll 5
(ll5 6
)ll6 7
)ll7 8
.ll8 9
RunTestll9 @
(ll@ A
$strllA p
)llp q
;llq r
(mm 
newmm 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_17mm 5
(mm5 6
)mm6 7
)mm7 8
.mm8 9
RunTestmm9 @
(mm@ A
$strmmA p
)mmp q
;mmq r
(nn 
newnn 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_21nn 5
(nn5 6
)nn6 7
)nn7 8
.nn8 9
RunTestnn9 @
(nn@ A
$strnnA p
)nnp q
;nnq r
(oo 
newoo :
.CWE321_Hard_Coded_Cryptographic_Key__basic_22aoo 6
(oo6 7
)oo7 8
)oo8 9
.oo9 :
RunTestoo: A
(ooA B
$strooB r
)oor s
;oos t
(pp 
newpp 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_31pp 5
(pp5 6
)pp6 7
)pp7 8
.pp8 9
RunTestpp9 @
(pp@ A
$strppA p
)ppp q
;ppq r
(qq 
newqq 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_41qq 5
(qq5 6
)qq6 7
)qq7 8
.qq8 9
RunTestqq9 @
(qq@ A
$strqqA p
)qqp q
;qqq r
(rr 
newrr 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_42rr 5
(rr5 6
)rr6 7
)rr7 8
.rr8 9
RunTestrr9 @
(rr@ A
$strrrA p
)rrp q
;rrq r
(ss 
newss 9
-CWE321_Hard_Coded_Cryptographic_Key__basic_45ss 5
(ss5 6
)ss6 7
)ss7 8
.ss8 9
RunTestss9 @
(ss@ A
$strssA p
)ssp q
;ssq r
(tt 
newtt :
.CWE321_Hard_Coded_Cryptographic_Key__basic_51att 6
(tt6 7
)tt7 8
)tt8 9
.tt9 :
RunTesttt: A
(ttA B
$strttB r
)ttr s
;tts t
(uu 
newuu :
.CWE321_Hard_Coded_Cryptographic_Key__basic_52auu 6
(uu6 7
)uu7 8
)uu8 9
.uu9 :
RunTestuu: A
(uuA B
$struuB r
)uur s
;uus t
(vv 
newvv :
.CWE321_Hard_Coded_Cryptographic_Key__basic_53avv 6
(vv6 7
)vv7 8
)vv8 9
.vv9 :
RunTestvv: A
(vvA B
$strvvB r
)vvr s
;vvs t
(ww 
newww :
.CWE321_Hard_Coded_Cryptographic_Key__basic_54aww 6
(ww6 7
)ww7 8
)ww8 9
.ww9 :
RunTestww: A
(wwA B
$strwwB r
)wwr s
;wws t
(xx 
newxx :
.CWE321_Hard_Coded_Cryptographic_Key__basic_61axx 6
(xx6 7
)xx7 8
)xx8 9
.xx9 :
RunTestxx: A
(xxA B
$strxxB r
)xxr s
;xxs t
(yy 
newyy :
.CWE321_Hard_Coded_Cryptographic_Key__basic_66ayy 6
(yy6 7
)yy7 8
)yy8 9
.yy9 :
RunTestyy: A
(yyA B
$stryyB r
)yyr s
;yys t
(zz 
newzz :
.CWE321_Hard_Coded_Cryptographic_Key__basic_67azz 6
(zz6 7
)zz7 8
)zz8 9
.zz9 :
RunTestzz: A
(zzA B
$strzzB r
)zzr s
;zzs t
({{ 
new{{ :
.CWE321_Hard_Coded_Cryptographic_Key__basic_68a{{ 6
({{6 7
){{7 8
){{8 9
.{{9 :
RunTest{{: A
({{A B
$str{{B r
){{r s
;{{s t
(|| 
new|| :
.CWE321_Hard_Coded_Cryptographic_Key__basic_71a|| 6
(||6 7
)||7 8
)||8 9
.||9 :
RunTest||: A
(||A B
$str||B r
)||r s
;||s t
(}} 
new}} :
.CWE321_Hard_Coded_Cryptographic_Key__basic_72a}} 6
(}}6 7
)}}7 8
)}}8 9
.}}9 :
RunTest}}: A
(}}A B
$str}}B r
)}}r s
;}}s t
(~~ 
new~~ :
.CWE321_Hard_Coded_Cryptographic_Key__basic_73a~~ 6
(~~6 7
)~~7 8
)~~8 9
.~~9 :
RunTest~~: A
(~~A B
$str~~B r
)~~r s
;~~s t
( 
new :
.CWE321_Hard_Coded_Cryptographic_Key__basic_74a 6
(6 7
)7 8
)8 9
.9 :
RunTest: A
(A B
$strB r
)r s
;s t
(
 
new
 <
.CWE321_Hard_Coded_Cryptographic_Key__basic_75a
 6
(
6 7
)
7 8
)
8 9
.
9 :
RunTest
: A
(
A B
$str
B r
)
r s
;
s t
(
 
new
 <
.CWE321_Hard_Coded_Cryptographic_Key__basic_81a
 6
(
6 7
)
7 8
)
8 9
.
9 :
RunTest
: A
(
A B
$str
B r
)
r s
;
s t
}
 
private
 
static
	 
void
 
RunTestCWE4
  
(
  !
)
! "
{
# $
}
 
private
 
static
	 
void
 
RunTestCWE5
  
(
  !
)
! "
{
# $
}
 
private
 
static
	 
void
 
RunTestCWE6
  
(
  !
)
! "
{
# $
}
 
private
 
static
	 
void
 
RunTestCWE7
  
(
  !
)
! "
{
# $
}
 
private
 
static
	 
void
 
RunTestCWE8
  
(
  !
)
! "
{
# $
}
¡¡ 
private
££ 
static
££	 
void
££ 
RunTestCWE9
££  
(
££  !
)
££! "
{
££# $
}
§§ 
}¨¨ 
}©© Æ
C:\Users\CyberDiver\Documents\SAST Benchmarking\Juliet_Test_Suite_v1.3_for_C#\src\testcases\CWE321_Hard_Coded_Cryptographic_Key\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str >
)> ?
]? @
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str @
)@ A
]A B
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *